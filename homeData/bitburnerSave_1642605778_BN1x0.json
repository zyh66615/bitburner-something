{"ctor":"BitburnerSaveObject","data":{"PlayerSave":"{\"ctor\":\"PlayerObject\",\"data\":{\"hacking\":351,\"hp\":10,\"max_hp\":10,\"strength\":2,\"defense\":2,\"dexterity\":3,\"agility\":3,\"charisma\":14,\"intelligence\":0,\"hacking_chance_mult\":1.1843044313729356,\"hacking_speed_mult\":1.232031899957265,\"hacking_money_mult\":1.1843044313729356,\"hacking_grow_mult\":1.1843044313729356,\"hacking_exp\":2329271.049492172,\"strength_exp\":24.624294597992783,\"defense_exp\":24.624294597992783,\"dexterity_exp\":24.624294597992783,\"agility_exp\":24.624294597992783,\"charisma_exp\":226.96715968272494,\"intelligence_exp\":0,\"hacking_mult\":1.3056956355886615,\"strength_mult\":1.1843044313729356,\"defense_mult\":1.1843044313729356,\"dexterity_mult\":1.2435196529415824,\"agility_mult\":1.2435196529415824,\"charisma_mult\":1.1843044313729356,\"hacking_exp_mult\":1.3027348745102292,\"strength_exp_mult\":1.3027348745102292,\"defense_exp_mult\":1.3027348745102292,\"dexterity_exp_mult\":1.3027348745102292,\"agility_exp_mult\":1.3027348745102292,\"charisma_exp_mult\":1.3027348745102292,\"company_rep_mult\":1.1843044313729356,\"faction_rep_mult\":1.1843044313729356,\"money\":2294413096.5584006,\"city\":\"Ishima\",\"location\":\"Storm Technologies\",\"jobs\":{\"Joe's Guns\":\"Employee\",\"Central Intelligence Agency\":\"Software Engineering Intern\",\"Omnia Cybersystems\":\"Software Engineering Intern\"},\"companyName\":\"Omnia Cybersystems\",\"currentServer\":\"home\",\"purchasedServers\":[\"pserv-1024-b5a5bf75-d570-44c7-9489-fff9a2b752ce\",\"pserv-1024-8d4d3e75-dde0-4983-a18c-1883a0e6c2d8\",\"pserv-1024-e821b9e8-0767-475b-8775-fc9987eac400\",\"pserv-1024-40d52f47-02e4-4a9f-99d8-748112d029a2\",\"pserv-1024-59648f7d-7551-491d-8270-7ca85c96053a\",\"pserv-1024-98c3a23c-b27d-4e25-a25f-a3f7e345ff45\",\"pserv-1024-3818a3fe-1461-4897-b993-fd2b4810e643\",\"pserv-1024-befc7db1-6714-4711-984d-d7d2a3a81094\",\"pserv-1024-7ebeb642-ed0c-413b-a25d-940c56f6e521\",\"pserv-1024-8fc49717-e985-4ce3-b95a-4e53647dbce1\",\"pserv-1024-be088da0-7a1e-48d9-aaa1-62191d08af48\",\"pserv-1024-f71421ab-e7ee-4385-b39c-b784523786ba\",\"pserv-1024-56b942cd-25b4-4eda-868c-92c187579315\",\"pserv-1024-85da8a5a-078e-4313-9659-5ad2b36094d8\",\"pserv-1024-240cc89a-a780-44c3-9c05-61e0f461b7aa\",\"pserv-1024-0488cf4a-f880-4a21-a86f-f2c6496e1657\",\"pserv-1024-58028ebf-2970-402e-ad04-5a59c054b4d9\",\"pserv-1024-36c3c521-210d-4321-81b2-b0b153e321ab\",\"pserv-1024-2c573361-0593-4291-b8c4-b612ed70b8cb\",\"pserv-1024-382bebe2-06ab-4ade-8882-2b9b79949213\",\"pserv-1024-9914b245-c952-4864-bfe5-a61d68c192ac\",\"pserv-1024-77932f55-3377-4a85-bab5-dd6c2c9ad6c2\",\"pserv-1024-0e665033-336c-4ffe-ad05-95e7f63e01e1\",\"pserv-16384-f4e2c6fc-9255-478a-bb1b-a0aae0611ee9\",\"pserv-16384-c4b7be4d-cc4b-4f91-a44e-1d5d235898ca\"],\"hacknetNodes\":[{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":10,\"level\":200,\"moneyGainRatePerSecond\":8534.131683047055,\"onlineTimeSeconds\":7518.799999995407,\"ram\":64,\"totalMoneyGenerated\":36474839.03854009,\"name\":\"hacknet-node-0\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":10,\"level\":200,\"moneyGainRatePerSecond\":8534.131683047055,\"onlineTimeSeconds\":7518.399999995408,\"ram\":64,\"totalMoneyGenerated\":36465169.98246992,\"name\":\"hacknet-node-1\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":10,\"level\":200,\"moneyGainRatePerSecond\":8534.131683047055,\"onlineTimeSeconds\":7517.999999995408,\"ram\":64,\"totalMoneyGenerated\":36455662.46010638,\"name\":\"hacknet-node-2\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":10,\"level\":200,\"moneyGainRatePerSecond\":8534.131683047055,\"onlineTimeSeconds\":5955.199999996761,\"ram\":64,\"totalMoneyGenerated\":36158464.834635675,\"name\":\"hacknet-node-3\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":10,\"level\":200,\"moneyGainRatePerSecond\":8534.131683047055,\"onlineTimeSeconds\":5954.999999996761,\"ram\":64,\"totalMoneyGenerated\":36164425.737257555,\"name\":\"hacknet-node-4\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":10,\"level\":200,\"moneyGainRatePerSecond\":8534.131683047055,\"onlineTimeSeconds\":5954.7999999967615,\"ram\":64,\"totalMoneyGenerated\":36162054.01111133,\"name\":\"hacknet-node-5\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":10,\"level\":200,\"moneyGainRatePerSecond\":8534.131683047055,\"onlineTimeSeconds\":4649.999999997962,\"ram\":64,\"totalMoneyGenerated\":29617889.687987078,\"name\":\"hacknet-node-6\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":10,\"level\":200,\"moneyGainRatePerSecond\":8534.131683047055,\"onlineTimeSeconds\":4649.599999997962,\"ram\":64,\"totalMoneyGenerated\":29613249.223130926,\"name\":\"hacknet-node-7\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":10,\"level\":200,\"moneyGainRatePerSecond\":8534.131683047055,\"onlineTimeSeconds\":4649.399999997962,\"ram\":64,\"totalMoneyGenerated\":29609019.260508593,\"name\":\"hacknet-node-8\"}}],\"hashManager\":{\"ctor\":\"HashManager\",\"data\":{\"capacity\":0,\"hashes\":0,\"upgrades\":{\"Sell for Money\":0,\"Sell for Corporation Funds\":0,\"Reduce Minimum Security\":0,\"Increase Maximum Money\":0,\"Improve Studying\":0,\"Improve Gym Training\":0,\"Exchange for Corporation Research\":0,\"Exchange for Bladeburner Rank\":0,\"Exchange for Bladeburner SP\":0,\"Generate Coding Contract\":0}}},\"factions\":[\"CyberSec\",\"Sector-12\",\"Netburners\",\"Tian Di Hui\",\"The Black Hand\"],\"factionInvitations\":[],\"queuedAugmentations\":[{\"level\":1,\"name\":\"Social Negotiation Assistant (S.N.A)\"},{\"level\":1,\"name\":\"ADR-V1 Pheromone Gene\"},{\"level\":18,\"name\":\"NeuroFlux Governor\"},{\"level\":19,\"name\":\"NeuroFlux Governor\"},{\"level\":20,\"name\":\"NeuroFlux Governor\"},{\"level\":1,\"name\":\"Nuoptimal Nootropic Injector Implant\"},{\"level\":1,\"name\":\"Speech Enhancement\"}],\"augmentations\":[{\"level\":17,\"name\":\"NeuroFlux Governor\"},{\"level\":1,\"name\":\"Neurotrainer I\"},{\"level\":1,\"name\":\"Hacknet Node NIC Architecture Neural-Upload\"},{\"level\":1,\"name\":\"Synaptic Enhancement Implant\"},{\"level\":1,\"name\":\"BitWire\"},{\"level\":1,\"name\":\"Cranial Signal Processors - Gen I\"},{\"level\":1,\"name\":\"CashRoot Starter Kit\"},{\"level\":1,\"name\":\"Wired Reflexes\"}],\"sourceFiles\":[],\"numPeopleKilled\":0,\"karma\":0,\"crime_money_mult\":1.1843044313729356,\"crime_success_mult\":1.1843044313729356,\"isWorking\":true,\"focus\":false,\"workType\":\"Working for Faction\",\"workCostMult\":5,\"workExpMult\":4,\"currentWorkFactionName\":\"The Black Hand\",\"currentWorkFactionDescription\":\"carrying out hacking contracts\",\"workHackExpGainRate\":0.19541023117653436,\"workStrExpGainRate\":0,\"workDefExpGainRate\":0,\"workDexExpGainRate\":0,\"workAgiExpGainRate\":0,\"workChaExpGainRate\":0,\"workRepGainRate\":0.4263495952942568,\"workMoneyGainRate\":0,\"workMoneyLossRate\":0,\"workHackExpGained\":19.18928470153565,\"workStrExpGained\":0,\"workDefExpGained\":0,\"workDexExpGained\":0,\"workAgiExpGained\":0,\"workChaExpGained\":0,\"workRepGained\":41.86753025789597,\"workMoneyGained\":0,\"createProgramName\":\"\",\"createProgramReqLvl\":100,\"className\":\"\",\"crimeType\":\"\",\"timeWorked\":24200,\"timeWorkedCreateProgram\":0,\"timeNeededToCompleteWork\":72000000,\"work_money_mult\":1.1843044313729356,\"hacknet_node_money_mult\":1.3027348745102292,\"hacknet_node_purchase_cost_mult\":0.758648874045534,\"hacknet_node_ram_cost_mult\":0.8429431933839266,\"hacknet_node_core_cost_mult\":0.8429431933839266,\"hacknet_node_level_cost_mult\":0.8429431933839266,\"hasWseAccount\":true,\"hasTixApiAccess\":false,\"has4SData\":false,\"has4SDataTixApi\":false,\"gang\":null,\"corporation\":null,\"bladeburner\":null,\"bladeburner_max_stamina_mult\":1,\"bladeburner_stamina_gain_mult\":1,\"bladeburner_analysis_mult\":1,\"bladeburner_success_chance_mult\":1,\"sleeves\":[],\"resleeves\":[],\"sleevesFromCovenant\":0,\"bitNodeN\":1,\"lastUpdate\":1642605777738,\"totalPlaytime\":266852800,\"playtimeSinceLastAug\":7575800,\"playtimeSinceLastBitnode\":266852800,\"moneySourceA\":{\"ctor\":\"MoneySourceTracker\",\"data\":{\"bladeburner\":0,\"casino\":0,\"class\":-53440,\"codingcontract\":0,\"corporation\":0,\"crime\":0,\"gang\":0,\"hacking\":7372076783,\"hacknet\":306720774.2354357,\"hacknet_expenses\":-544265469.2829611,\"hospitalization\":0,\"infiltration\":0,\"sleeves\":0,\"stock\":0,\"total\":2293413096.5584154,\"work\":368348.28576778236,\"servers\":-3210240000,\"other\":-287300000,\"augmentations\":-1343893899.6775095}},\"moneySourceB\":{\"ctor\":\"MoneySourceTracker\",\"data\":{\"bladeburner\":0,\"casino\":0,\"class\":-2474400,\"codingcontract\":187500000,\"corporation\":0,\"crime\":0,\"gang\":0,\"hacking\":19503384472.571426,\"hacknet\":2321833388.651539,\"hacknet_expenses\":-2834571296.4006596,\"hospitalization\":0,\"infiltration\":0,\"sleeves\":0,\"stock\":-200927871.14019957,\"total\":2730416369.9156423,\"work\":12370155.546320047,\"servers\":-10919818016.595043,\"other\":-344400000,\"augmentations\":-4992480062.708986}},\"scriptProdSinceLastAug\":7372076783,\"exploits\":[],\"achievements\":[{\"ID\":\"FIRST_HACKNET_NODE\",\"unlockedOn\":1642339414658},{\"ID\":\"NS2\",\"unlockedOn\":1642343740615},{\"ID\":\"WORKOUT\",\"unlockedOn\":1642344940610},{\"ID\":\"HACKNET_NODE_10M\",\"unlockedOn\":1642420708995},{\"ID\":\"BRUTESSH.EXE\",\"unlockedOn\":1642422808996},{\"ID\":\"CYBERSEC\",\"unlockedOn\":1642423769004},{\"ID\":\"TOR\",\"unlockedOn\":1642424428998},{\"ID\":\"FTPCRACK.EXE\",\"unlockedOn\":1642426645652},{\"ID\":\"RELAYSMTP.EXE\",\"unlockedOn\":1642428623734},{\"ID\":\"FROZE\",\"unlockedOn\":1642430134063},{\"ID\":\"TRAVEL\",\"unlockedOn\":1642430580714},{\"ID\":\"INSTALL_1\",\"unlockedOn\":1642431300713},{\"ID\":\"SCRIPT_32GB\",\"unlockedOn\":1642433585396},{\"ID\":\"DRAIN_SERVER\",\"unlockedOn\":1642557549229},{\"ID\":\"HTTPWORM.EXE\",\"unlockedOn\":1642585735077},{\"ID\":\"SQLINJECT.EXE\",\"unlockedOn\":1642601629939},{\"ID\":\"THE_BLACK_HAND\",\"unlockedOn\":1642605709947}],\"factionWorkType\":\"Faction Hacking Work\",\"committingCrimeThruSingFn\":false,\"singFnCrimeWorkerScript\":null}}","AllServersSave":"{\"home\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"home\",\"httpPortOpen\":false,\"ip\":\"67.3.0.0\",\"isConnectedTo\":true,\"maxRam\":1024,\"messages\":[\"hackers-starting-handbook.lit\",\"j0.msg\",\"j1.msg\",\"csec-test.msg\",\"j2.msg\",\"nitesec-test.msg\",\"j3.msg\"],\"organizationName\":\"Home PC\",\"programs\":[\"NUKE.exe\",\"BruteSSH.exe\",\"fl1ght.exe\",\"FTPCrack.exe\",\"relaySMTP.exe\",\"HTTPWorm.exe\",\"SQLInject.exe\"],\"ramUsed\":1015.65,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{},\"filename\":\"mainHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":1774306.0507422425,\"onlineMoneyMade\":3109974530,\"onlineRunningTime\":1740.0100000002587,\"pid\":836,\"ramUsage\":7.65,\"server\":\"home\",\"threads\":1,\"dependencies\":[{\"filename\":\"mainHack.js\",\"url\":\"blob:file:///b75d73ff-6d05-4865-9315-30f699752d30\",\"moduleSequenceNumber\":21106}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omega-net\",576,26575.17767107638,\"8fcb2e0b-2466-4096-88a1-f75dd9afaa71\"],\"dataMap\":{},\"filename\":\"grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":154.20999999999978,\"pid\":1230,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":576,\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///9ce01242-138e-4da8-aa86-35eee3e23c69\",\"moduleSequenceNumber\":21191}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n  if (ns.getHostname() !== \\\"home\\\") {\\n    throw new Exception(\\\"Run the script from home\\\");\\n  }\\n\\n  await ns.wget(\\n    `https://raw.githubusercontent.com/zyh66615/bitburner-something/main/scripts/initHacking.js?ts=${new Date().getTime()}`,\\n    \\\"initHacking.ns\\\"\\n  );\\n  ns.spawn(\\\"initHacking.ns\\\", 1);\\n}\",\"filename\":\"start.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"start.js\",\"url\":\"blob:https://danielyxie.github.io/db067b02-c71d-47b5-ab63-f147fd799425\",\"moduleSequenceNumber\":36919}],\"dependents\":[],\"ramUsage\":3.65,\"server\":\"home\",\"_hash\":\"7935a667e1691d892872ade2d076ea9e5c285507d4019ee6efbf692b7eae22bb\",\"moduleSequenceNumber\":21062,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"spawn\",\"cost\":2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"const baseUrl = 'https://raw.githubusercontent.com/zyh66615/bitburner-something/main/scripts/'\\r\\nconst filesToDownload = [\\r\\n  'common.js',\\r\\n  'mainHack.js',\\r\\n  'spider.js',\\r\\n  'grow.js',\\r\\n  'hack.js',\\r\\n  'weaken.js',\\r\\n  'playerServers.js',\\r\\n  'killAll.js',\\r\\n  'runHacking.js',\\r\\n  'find.js',\\r\\n]\\r\\nconst valuesToRemove = ['BB_SERVER_MAP']\\r\\n\\r\\nfunction localeHHMMSS(ms = 0) {\\r\\n  if (!ms) {\\r\\n    ms = new Date().getTime()\\r\\n  }\\r\\n\\r\\n  return new Date(ms).toLocaleTimeString()\\r\\n}\\r\\n\\r\\nexport async function main(ns) {\\r\\n  ns.tprint(`[${localeHHMMSS()}] Starting initHacking.js`)\\r\\n\\r\\n  let hostname = ns.getHostname()\\r\\n\\r\\n  if (hostname !== 'home') {\\r\\n    throw new Exception('Run the script from home')\\r\\n  }\\r\\n\\r\\n  for (let i = 0; i < filesToDownload.length; i++) {\\r\\n    const filename = filesToDownload[i]\\r\\n    const path = baseUrl + filename\\r\\n    await ns.scriptKill(filename, 'home')\\r\\n    await ns.rm(filename)\\r\\n    await ns.sleep(200)\\r\\n    ns.tprint(`[${localeHHMMSS()}] Trying to download ${path}`)\\r\\n    await ns.wget(path + '?ts=' + new Date().getTime(), filename)\\r\\n  }\\r\\n\\r\\n  valuesToRemove.map((value) => localStorage.removeItem(value))\\r\\n\\r\\n  ns.tprint(`[${localeHHMMSS()}] Spawning killAll.js`)\\r\\n  ns.spawn('killAll.js', 1, 'runHacking.js')\\r\\n}\\r\\n\",\"filename\":\"initHacking.ns\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"initHacking.ns\",\"url\":\"blob:https://danielyxie.github.io/d0de9e13-7483-440a-9ba0-c8cead663e80\",\"moduleSequenceNumber\":36924}],\"dependents\":[],\"ramUsage\":5.65,\"server\":\"home\",\"_hash\":\"a876e4dca68b7d275c141ab7ceb699052f1dc6f2d171393f59bf86f5352cb361\",\"moduleSequenceNumber\":21063,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scriptKill\",\"cost\":1},{\"type\":\"fn\",\"name\":\"rm\",\"cost\":1},{\"type\":\"fn\",\"name\":\"spawn\",\"cost\":2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export function settings() {\\r\\n    return {\\r\\n      minSecurityLevelOffset: 2,\\r\\n      maxMoneyMultiplayer: 0.9,\\r\\n      minSecurityWeight: 100,\\r\\n      mapRefreshInterval: 1 * 60 * 60 * 1000,\\r\\n      keys: {\\r\\n        serverMap: 'BB_SERVER_MAP',\\r\\n        hackTarget: 'BB_HACK_TARGET',\\r\\n        action: 'BB_ACTION',\\r\\n      },\\r\\n    }\\r\\n  }\\r\\n  \\r\\n  export function getItem(key) {\\r\\n    let item = localStorage.getItem(key)\\r\\n  \\r\\n    return item ? JSON.parse(item) : undefined\\r\\n  }\\r\\n  \\r\\n  export function setItem(key, value) {\\r\\n    localStorage.setItem(key, JSON.stringify(value))\\r\\n  }\\r\\n  \\r\\n  export async function main(ns) {\\r\\n    return {\\r\\n      settings,\\r\\n      getItem,\\r\\n      setItem,\\r\\n    }\\r\\n  }\\r\\n  \",\"filename\":\"common.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"server\":\"home\",\"_hash\":\"6ecfd09c973bbd6b3bae4b2a45494b2955a22cb8484544424f13cde566b75c5d\",\"moduleSequenceNumber\":21064,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"const settings = {\\r\\n    homeRamReserved: 10,\\r\\n    homeRamReservedBase: 10,\\r\\n    homeRamExtraRamReserved: 5,\\r\\n    homeRamBigMode: 64,\\r\\n    minSecurityLevelOffset: 1,\\r\\n    maxMoneyMultiplayer: 0.8,\\r\\n    minSecurityWeight: 100,\\r\\n    mapRefreshInterval: 1 * 60 * 60 * 1000,\\r\\n    maxWeakenTime: 20 * 60 * 1000,\\r\\n    keys: {\\r\\n      serverMap: 'BB_SERVER_MAP',\\r\\n    },\\r\\n    changes: {\\r\\n      hack: 0.002,\\r\\n      grow: 0.004,\\r\\n      weaken: 0.05,\\r\\n    },\\r\\n  }\\r\\n  \\r\\n  function getItem(key) {\\r\\n    let item = localStorage.getItem(key)\\r\\n  \\r\\n    return item ? JSON.parse(item) : undefined\\r\\n  }\\r\\n  \\r\\n  function setItem(key, value) {\\r\\n    localStorage.setItem(key, JSON.stringify(value))\\r\\n  }\\r\\n  \\r\\n  const hackPrograms = ['BruteSSH.exe', 'FTPCrack.exe', 'relaySMTP.exe', 'HTTPWorm.exe', 'SQLInject.exe']\\r\\n  const hackScripts = ['hack.js', 'grow.js', 'weaken.js']\\r\\n  \\r\\n  function getPlayerDetails(ns) {\\r\\n    let portHacks = 0\\r\\n  \\r\\n    hackPrograms.forEach((hackProgram) => {\\r\\n      if (ns.fileExists(hackProgram, 'home')) {\\r\\n        portHacks += 1\\r\\n      }\\r\\n    })\\r\\n  \\r\\n    return {\\r\\n      hackingLevel: ns.getHackingLevel(),\\r\\n      portHacks,\\r\\n    }\\r\\n  }\\r\\n  \\r\\n  function convertMSToHHMMSS(ms = 0) {\\r\\n    if (ms <= 0) {\\r\\n      return '00:00:00'\\r\\n    }\\r\\n  \\r\\n    if (!ms) {\\r\\n      ms = new Date().getTime()\\r\\n    }\\r\\n  \\r\\n    return new Date(ms).toISOString().substr(11, 8)\\r\\n  }\\r\\n  \\r\\n  function localeHHMMSS(ms = 0) {\\r\\n    if (!ms) {\\r\\n      ms = new Date().getTime()\\r\\n    }\\r\\n  \\r\\n    return new Date(ms).toLocaleTimeString()\\r\\n  }\\r\\n  \\r\\n  function numberWithCommas(x) {\\r\\n    return x.toString().replace(/\\\\B(?<!\\\\.\\\\d*)(?=(\\\\d{3})+(?!\\\\d))/g, ',')\\r\\n  }\\r\\n  \\r\\n  function createUUID() {\\r\\n    var dt = new Date().getTime()\\r\\n    var uuid = 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {\\r\\n      var r = (dt + Math.random() * 16) % 16 | 0\\r\\n      dt = Math.floor(dt / 16)\\r\\n      return (c == 'x' ? r : (r & 0x3) | 0x8).toString(16)\\r\\n    })\\r\\n    return uuid\\r\\n  }\\r\\n  \\r\\n  function weakenCyclesForGrow(growCycles) {\\r\\n    return Math.max(0, Math.ceil(growCycles * (settings.changes.grow / settings.changes.weaken)))\\r\\n  }\\r\\n  \\r\\n  function weakenCyclesForHack(hackCycles) {\\r\\n    return Math.max(0, Math.ceil(hackCycles * (settings.changes.hack / settings.changes.weaken)))\\r\\n  }\\r\\n  \\r\\n  async function getHackableServers(ns, servers) {\\r\\n    const playerDetails = getPlayerDetails(ns)\\r\\n  \\r\\n    const hackableServers = Object.keys(servers)\\r\\n      .filter((hostname) => ns.serverExists(hostname))\\r\\n      .filter((hostname) => servers[hostname].ports <= playerDetails.portHacks || ns.hasRootAccess(hostname))\\r\\n      .filter((hostname) => servers[hostname].ram >= 2)\\r\\n  \\r\\n    for (const hostname of hackableServers) {\\r\\n      if (hostname === 'home') continue;\\r\\n      if (!ns.hasRootAccess(hostname)) {\\r\\n        hackPrograms.forEach((hackProgram) => {\\r\\n          if (ns.fileExists(hackProgram, 'home')) {\\r\\n            ns[hackProgram.split('.').shift().toLocaleLowerCase()](hostname)\\r\\n          }\\r\\n        })\\r\\n        ns.nuke(hostname)\\r\\n      }\\r\\n  \\r\\n      await ns.scp(hackScripts, hostname)\\r\\n  \\r\\n    }\\r\\n  \\r\\n    hackableServers.sort((a, b) => servers[a].ram - servers[b].ram)\\r\\n    return hackableServers\\r\\n  }\\r\\n  \\r\\n  function findTargetServer(ns, serversList, servers, serverExtraData) {\\r\\n    const playerDetails = getPlayerDetails(ns)\\r\\n  \\r\\n    serversList = serversList\\r\\n      .filter((hostname) => servers[hostname].hackingLevel <= playerDetails.hackingLevel)\\r\\n      .filter((hostname) => servers[hostname].maxMoney)\\r\\n      .filter((hostname) => hostname !== 'home')\\r\\n      .filter((hostname) => ns.getWeakenTime(hostname) < settings.maxWeakenTime)\\r\\n  \\r\\n    let weightedServers = serversList.map((hostname) => {\\r\\n      const fullHackCycles = Math.ceil(100 / Math.max(0.00000001, ns.hackAnalyze(hostname)))\\r\\n  \\r\\n      serverExtraData[hostname] = {\\r\\n        fullHackCycles,\\r\\n      }\\r\\n  \\r\\n      const serverValue = servers[hostname].maxMoney * (settings.minSecurityWeight / (servers[hostname].minSecurityLevel + ns.getServerSecurityLevel(hostname)))\\r\\n  \\r\\n      return {\\r\\n        hostname,\\r\\n        serverValue,\\r\\n        minSecurityLevel: servers[hostname].minSecurityLevel,\\r\\n        securityLevel: ns.getServerSecurityLevel(hostname),\\r\\n        maxMoney: servers[hostname].maxMoney,\\r\\n      }\\r\\n    })\\r\\n  \\r\\n    weightedServers.sort((a, b) => b.serverValue - a.serverValue)\\r\\n    ns.print(JSON.stringify(weightedServers, null, 2))\\r\\n  \\r\\n    return weightedServers.map((server) => server.hostname)\\r\\n  }\\r\\n  \\r\\n  /** @param {NS} ns **/ export async function main(ns) {\\r\\n    ns.tprint(`[${localeHHMMSS()}] Starting mainHack.js`)\\r\\n  \\r\\n    let hostname = ns.getHostname()\\r\\n  \\r\\n    if (hostname !== 'home') {\\r\\n      throw new Exception('Run the script from home')\\r\\n    }\\r\\n  \\r\\n    while (true) {\\r\\n      const serverExtraData = {}\\r\\n      const serverMap = getItem(settings.keys.serverMap)\\r\\n      if (serverMap.servers.home.ram >= settings.homeRamBigMode) {\\r\\n        settings.homeRamReserved = settings.homeRamReservedBase + settings.homeRamExtraRamReserved\\r\\n      }\\r\\n  \\r\\n      if (!serverMap || serverMap.lastUpdate < new Date().getTime() - settings.mapRefreshInterval) {\\r\\n        ns.tprint(`[${localeHHMMSS()}] Spawning spider.js`)\\r\\n        ns.spawn('spider.js', 1, 'mainHack.js')\\r\\n        ns.exit()\\r\\n        return\\r\\n      }\\r\\n      serverMap.servers.home.ram = Math.max(0, serverMap.servers.home.ram - settings.homeRamReserved)\\r\\n  \\r\\n      const hackableServers = await getHackableServers(ns, serverMap.servers)\\r\\n  \\r\\n      const targetServers = findTargetServer(ns, hackableServers, serverMap.servers, serverExtraData)\\r\\n      const bestTarget = targetServers.shift()\\r\\n      const hackTime = ns.getHackTime(bestTarget)\\r\\n      const growTime = ns.getGrowTime(bestTarget)\\r\\n      const weakenTime = ns.getWeakenTime(bestTarget)\\r\\n  \\r\\n      const growDelay = Math.max(0, weakenTime - growTime - 15 * 1000 )\\r\\n      const hackDelay = Math.max(0, growTime + growDelay - hackTime - 15 * 1000)\\r\\n  \\r\\n      const securityLevel = ns.getServerSecurityLevel(bestTarget)\\r\\n      const money = ns.getServerMoneyAvailable(bestTarget)\\r\\n  \\r\\n      let action = 'weaken'\\r\\n      if (securityLevel > serverMap.servers[bestTarget].minSecurityLevel + settings.minSecurityLevelOffset) {\\r\\n        action = 'weaken'\\r\\n      } else if (money < serverMap.servers[bestTarget].maxMoney * settings.maxMoneyMultiplayer) {\\r\\n        action = 'grow'\\r\\n      } else {\\r\\n        action = 'hack'\\r\\n      }\\r\\n  \\r\\n      let hackCycles = 0\\r\\n      let growCycles = 0\\r\\n      let weakenCycles = 0\\r\\n  \\r\\n      for (let i = 0; i < hackableServers.length; i++) {\\r\\n        const server = serverMap.servers[hackableServers[i]]\\r\\n        hackCycles += Math.floor(server.ram / 1.7)\\r\\n        growCycles += Math.floor(server.ram / 1.75)\\r\\n      }\\r\\n      weakenCycles = growCycles\\r\\n  \\r\\n      ns.tprint(\\r\\n        `[${localeHHMMSS()}] Selected ${bestTarget} for a target. Planning to ${action} the server. Will wake up around ${localeHHMMSS(\\r\\n          new Date().getTime() + weakenTime + 300\\r\\n        )}`\\r\\n      )\\r\\n      ns.tprint(\\r\\n        `[${localeHHMMSS()}] Stock values: baseSecurity: ${serverMap.servers[bestTarget].baseSecurityLevel}; minSecurity: ${serverMap.servers[bestTarget].minSecurityLevel\\r\\n        }; maxMoney: $${numberWithCommas(parseInt(serverMap.servers[bestTarget].maxMoney, 10))}`\\r\\n      )\\r\\n      ns.tprint(`[${localeHHMMSS()}] Current values: security: ${Math.floor(securityLevel * 1000) / 1000}; money: $${numberWithCommas(parseInt(money, 10))}`)\\r\\n      ns.tprint(\\r\\n        `[${localeHHMMSS()}] Time to: hack: ${convertMSToHHMMSS(hackTime)}; grow: ${convertMSToHHMMSS(growTime)}; weaken: ${convertMSToHHMMSS(weakenTime)}`\\r\\n      )\\r\\n      ns.tprint(`[${localeHHMMSS()}] Delays: ${convertMSToHHMMSS(hackDelay)} for hacks, ${convertMSToHHMMSS(growDelay)} for grows`)\\r\\n  \\r\\n      if (action === 'weaken') {\\r\\n        if (settings.changes.weaken * weakenCycles > securityLevel - serverMap.servers[bestTarget].minSecurityLevel) {\\r\\n          weakenCycles = Math.ceil((securityLevel - serverMap.servers[bestTarget].minSecurityLevel) / settings.changes.weaken)\\r\\n          growCycles -= weakenCycles\\r\\n          growCycles = Math.max(0, growCycles)\\r\\n  \\r\\n          weakenCycles += weakenCyclesForGrow(growCycles)\\r\\n          growCycles -= weakenCyclesForGrow(growCycles)\\r\\n          growCycles = Math.max(0, growCycles)\\r\\n        } else {\\r\\n          growCycles = 0\\r\\n        }\\r\\n  \\r\\n        ns.tprint(\\r\\n          `[${localeHHMMSS()}] Cycles ratio: ${growCycles} grow cycles; ${weakenCycles} weaken cycles; expected security reduction: ${Math.floor(settings.changes.weaken * weakenCycles * 1000) / 1000\\r\\n          }`\\r\\n        )\\r\\n  \\r\\n        for (let i = 0; i < hackableServers.length; i++) {\\r\\n          const server = serverMap.servers[hackableServers[i]]\\r\\n          let cyclesFittable = Math.max(0, Math.floor(server.ram / 1.75))\\r\\n          const cyclesToRun = Math.max(0, Math.min(cyclesFittable, growCycles))\\r\\n  \\r\\n          if (growCycles) {\\r\\n            await ns.exec('grow.js', server.host, cyclesToRun, bestTarget, cyclesToRun, growDelay, createUUID())\\r\\n            growCycles -= cyclesToRun\\r\\n            cyclesFittable -= cyclesToRun\\r\\n          }\\r\\n  \\r\\n          if (cyclesFittable) {\\r\\n            await ns.exec('weaken.js', server.host, cyclesFittable, bestTarget, cyclesFittable, 0, createUUID())\\r\\n            weakenCycles -= cyclesFittable\\r\\n          }\\r\\n        }\\r\\n      } else if (action === 'grow') {\\r\\n        weakenCycles = weakenCyclesForGrow(growCycles)\\r\\n        growCycles -= weakenCycles\\r\\n  \\r\\n        ns.tprint(`[${localeHHMMSS()}] Cycles ratio: ${growCycles} grow cycles; ${weakenCycles} weaken cycles`)\\r\\n  \\r\\n        for (let i = 0; i < hackableServers.length; i++) {\\r\\n          const server = serverMap.servers[hackableServers[i]]\\r\\n          let cyclesFittable = Math.max(0, Math.floor(server.ram / 1.75))\\r\\n          const cyclesToRun = Math.max(0, Math.min(cyclesFittable, growCycles))\\r\\n  \\r\\n          if (growCycles) {\\r\\n            await ns.exec('grow.js', server.host, cyclesToRun, bestTarget, cyclesToRun, growDelay, createUUID())\\r\\n            growCycles -= cyclesToRun\\r\\n            cyclesFittable -= cyclesToRun\\r\\n          }\\r\\n  \\r\\n          if (cyclesFittable) {\\r\\n            await ns.exec('weaken.js', server.host, cyclesFittable, bestTarget, cyclesFittable, 0, createUUID())\\r\\n            weakenCycles -= cyclesFittable\\r\\n          }\\r\\n        }\\r\\n      } else {\\r\\n        if (hackCycles > serverExtraData[bestTarget].fullHackCycles) {\\r\\n          hackCycles = serverExtraData[bestTarget].fullHackCycles\\r\\n  \\r\\n          if (hackCycles * 100 < growCycles) {\\r\\n            hackCycles *= 10\\r\\n          }\\r\\n  \\r\\n          growCycles = Math.max(0, growCycles - Math.ceil((hackCycles * 1.7) / 1.75))\\r\\n  \\r\\n          weakenCycles = weakenCyclesForGrow(growCycles) + weakenCyclesForHack(hackCycles)\\r\\n          growCycles -= weakenCycles\\r\\n          hackCycles -= Math.ceil((weakenCyclesForHack(hackCycles) * 1.75) / 1.7)\\r\\n  \\r\\n          growCycles = Math.max(0, growCycles)\\r\\n        } else {\\r\\n          growCycles = 0\\r\\n          weakenCycles = weakenCyclesForHack(hackCycles)\\r\\n          hackCycles -= Math.ceil((weakenCycles * 1.75) / 1.7)\\r\\n        }\\r\\n  \\r\\n        ns.tprint(`[${localeHHMMSS()}] Cycles ratio: ${hackCycles} hack cycles; ${growCycles} grow cycles; ${weakenCycles} weaken cycles`)\\r\\n  \\r\\n        for (let i = 0; i < hackableServers.length; i++) {\\r\\n          const server = serverMap.servers[hackableServers[i]]\\r\\n          let cyclesFittable = Math.max(0, Math.floor(server.ram / 1.7))\\r\\n          const cyclesToRun = Math.max(0, Math.min(cyclesFittable, hackCycles))\\r\\n  \\r\\n          if (hackCycles) {\\r\\n            await ns.exec('hack.js', server.host, cyclesToRun, bestTarget, cyclesToRun, hackDelay, createUUID())\\r\\n            hackCycles -= cyclesToRun\\r\\n            cyclesFittable -= cyclesToRun\\r\\n          }\\r\\n  \\r\\n          const freeRam = server.ram - cyclesToRun * 1.7\\r\\n          cyclesFittable = Math.max(0, Math.floor(freeRam / 1.75))\\r\\n  \\r\\n          if (cyclesFittable && growCycles) {\\r\\n            const growCyclesToRun = Math.min(growCycles, cyclesFittable)\\r\\n  \\r\\n            await ns.exec('grow.js', server.host, growCyclesToRun, bestTarget, growCyclesToRun, growDelay, createUUID())\\r\\n            growCycles -= growCyclesToRun\\r\\n            cyclesFittable -= growCyclesToRun\\r\\n          }\\r\\n  \\r\\n          if (cyclesFittable) {\\r\\n            await ns.exec('weaken.js', server.host, cyclesFittable, bestTarget, cyclesFittable, 0, createUUID())\\r\\n            weakenCycles -= cyclesFittable\\r\\n          }\\r\\n        }\\r\\n      }\\r\\n  \\r\\n      await ns.sleep(weakenTime + 100)\\r\\n    }\\r\\n  }\",\"filename\":\"mainHack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"mainHack.js\",\"url\":\"blob:file:///b75d73ff-6d05-4865-9315-30f699752d30\",\"moduleSequenceNumber\":21106}],\"dependents\":[],\"ramUsage\":7.65,\"server\":\"home\",\"_hash\":\"0442b399fc8b8dcfafa88dbc735d6c1b0166c76f96ce25b8fe773001d70231af\",\"moduleSequenceNumber\":21106,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"serverExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hackAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"spawn\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { settings, setItem } from 'common.js'\\r\\n\\r\\nconst hackPrograms = ['BruteSSH.exe', 'FTPCrack.exe', 'relaySMTP.exe', 'HTTPWorm.exe', 'SQLInject.exe']\\r\\n\\r\\nfunction getPlayerDetails(ns) {\\r\\n  let portHacks = 0\\r\\n\\r\\n  hackPrograms.forEach((hackProgram) => {\\r\\n    if (ns.fileExists(hackProgram, 'home')) {\\r\\n      portHacks += 1\\r\\n    }\\r\\n  })\\r\\n\\r\\n  return {\\r\\n    hackingLevel: ns.getHackingLevel(),\\r\\n    portHacks,\\r\\n  }\\r\\n}\\r\\n\\r\\nfunction allHacks(host) {\\r\\n  ns.brutessh(host)\\r\\n  ns.ftpcrack(host)\\r\\n  ns.relaysmtp(host)\\r\\n  ns.httpworm(host)\\r\\n  ns.sqlinject(host)\\r\\n}\\r\\n\\r\\nfunction localeHHMMSS(ms = 0) {\\r\\n  if (!ms) {\\r\\n    ms = new Date().getTime()\\r\\n  }\\r\\n\\r\\n  return new Date(ms).toLocaleTimeString()\\r\\n}\\r\\n\\r\\nexport async function main(ns) {\\r\\n  ns.tprint(`[${localeHHMMSS()}] Starting spider.js`)\\r\\n\\r\\n  const scriptToRunAfter = ns.args[0]\\r\\n\\r\\n  let hostname = ns.getHostname()\\r\\n\\r\\n  if (hostname !== 'home') {\\r\\n    throw new Exception('Run the script from home')\\r\\n  }\\r\\n\\r\\n  const serverMap = { servers: {}, lastUpdate: new Date().getTime() }\\r\\n  const scanArray = ['home']\\r\\n\\r\\n  while (scanArray.length) {\\r\\n    const host = scanArray.shift()\\r\\n\\r\\n    serverMap.servers[host] = {\\r\\n      host,\\r\\n      ports: ns.getServerNumPortsRequired(host),\\r\\n      hackingLevel: ns.getServerRequiredHackingLevel(host),\\r\\n      maxMoney: ns.getServerMaxMoney(host),\\r\\n      growth: ns.getServerGrowth(host),\\r\\n      minSecurityLevel: ns.getServerMinSecurityLevel(host),\\r\\n      baseSecurityLevel: ns.getServerBaseSecurityLevel(host),\\r\\n      ram: ns.getServerRam(host)[0],\\r\\n      files: ns.ls(host),\\r\\n    }\\r\\n\\r\\n    const playerDetails = getPlayerDetails(ns)\\r\\n    if (!ns.hasRootAccess(host)) {\\r\\n      if (serverMap.servers[host].ports <= playerDetails.portHacks && serverMap.servers[host].hackingLevel <= playerDetails.hackingLevel) {\\r\\n        hackPrograms.forEach((hackProgram) => {\\r\\n          if (ns.fileExists(hackProgram, 'home')) {\\r\\n            ns[hackProgram.split('.').shift().toLocaleLowerCase()](host)\\r\\n          }\\r\\n        })\\r\\n        ns.nuke(host)\\r\\n      }\\r\\n    }\\r\\n\\r\\n    const connections = ns.scan(host) || ['home']\\r\\n    serverMap.servers[host].connections = connections\\r\\n\\r\\n    connections.filter((hostname) => !serverMap.servers[hostname]).forEach((hostname) => scanArray.push(hostname))\\r\\n  }\\r\\n\\r\\n  let hasAllParents = false\\r\\n\\r\\n  while (!hasAllParents) {\\r\\n    hasAllParents = true\\r\\n\\r\\n    Object.keys(serverMap.servers).forEach((hostname) => {\\r\\n      const server = serverMap.servers[hostname]\\r\\n\\r\\n      if (!server.parent) hasAllParents = false\\r\\n\\r\\n      if (hostname === 'home') {\\r\\n        server.parent = 'home'\\r\\n        server.children = server.children ? server.children : []\\r\\n      }\\r\\n\\r\\n      if (hostname.includes('pserv-')) {\\r\\n        server.parent = 'home'\\r\\n        server.children = []\\r\\n\\r\\n        if (serverMap.servers[server.parent].children) {\\r\\n          serverMap.servers[server.parent].children.push(hostname)\\r\\n        } else {\\r\\n          serverMap.servers[server.parent].children = [hostname]\\r\\n        }\\r\\n      }\\r\\n\\r\\n      if (!server.parent) {\\r\\n        if (server.connections.length === 1) {\\r\\n          server.parent = server.connections[0]\\r\\n          server.children = []\\r\\n\\r\\n          if (serverMap.servers[server.parent].children) {\\r\\n            serverMap.servers[server.parent].children.push(hostname)\\r\\n          } else {\\r\\n            serverMap.servers[server.parent].children = [hostname]\\r\\n          }\\r\\n        } else {\\r\\n          if (!server.children) {\\r\\n            server.children = []\\r\\n          }\\r\\n\\r\\n          if (server.children.length) {\\r\\n            const parent = server.connections.filter((hostname) => !server.children.includes(hostname))\\r\\n\\r\\n            if (parent.length === 1) {\\r\\n              server.parent = parent.shift()\\r\\n\\r\\n              if (serverMap.servers[server.parent].children) {\\r\\n                serverMap.servers[server.parent].children.push(hostname)\\r\\n              } else {\\r\\n                serverMap.servers[server.parent].children = [hostname]\\r\\n              }\\r\\n            }\\r\\n          }\\r\\n        }\\r\\n      }\\r\\n    })\\r\\n  }\\r\\n\\r\\n  setItem(settings().keys.serverMap, serverMap)\\r\\n\\r\\n  if (!scriptToRunAfter) {\\r\\n    ns.tprint(`[${localeHHMMSS()}] Spawning mainHack.js`)\\r\\n    ns.spawn('mainHack.js', 1)\\r\\n  } else {\\r\\n    ns.tprint(`[${localeHHMMSS()}] Spawning ${scriptToRunAfter}`)\\r\\n    ns.spawn(scriptToRunAfter, 1)\\r\\n  }\\r\\n}\\r\\n\",\"filename\":\"spider.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"common.js\",\"url\":\"blob:file:///6047cb9f-b977-4b99-ba35-acac99588e82\",\"moduleSequenceNumber\":21064},{\"filename\":\"spider.js\",\"url\":\"blob:file:///041f319b-daf1-4a58-95e8-aff0feab87e1\",\"moduleSequenceNumber\":21091}],\"dependents\":[],\"ramUsage\":5.25,\"server\":\"home\",\"_hash\":\"ea07b0fc02484c584726a1037a698f608f95dee74fc8f168d4d37a281a932054\",\"moduleSequenceNumber\":21091,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerGrowth\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerBaseSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"spawn\",\"cost\":2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const target = ns.args[0]\\r\\n    const threads = ns.args[1]\\r\\n    const delay = ns.args[2]\\r\\n  \\r\\n    if (delay && delay > 0) {\\r\\n      await ns.sleep(delay)\\r\\n    }\\r\\n  \\r\\n    ns.print(`Starting operation: grow on ${target} in ${threads} threads`)\\r\\n    await ns.grow(target, { threads, stock: true })\\r\\n    ns.exit()\\r\\n  }\\r\\n  \",\"filename\":\"grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///9ce01242-138e-4da8-aa86-35eee3e23c69\",\"moduleSequenceNumber\":21191}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"home\",\"_hash\":\"7c1d1fb4f0c8f7bb72603cc66887138d311d1d62640ec9a93a5d7a6bde532915\",\"moduleSequenceNumber\":21191,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const target = ns.args[0]\\r\\n    const threads = ns.args[1]\\r\\n    const delay = ns.args[2]\\r\\n  \\r\\n    if (delay && delay > 0) {\\r\\n      await ns.sleep(delay)\\r\\n    }\\r\\n  \\r\\n    ns.print(`Starting operation: hack on ${target} in ${threads} threads`)\\r\\n    await ns.hack(target, { threads, stock: true })\\r\\n    ns.exit()\\r\\n  }\\r\\n  \",\"filename\":\"hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:file:///34e0d521-1ffe-43f8-b8ea-769ea64bbfa4\",\"moduleSequenceNumber\":22906}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"home\",\"_hash\":\"4d51de5d68e34b64abafc337497582a9ed6ccdf51fcb55366e3ec23598254bba\",\"moduleSequenceNumber\":22906,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const target = ns.args[0]\\r\\n    const threads = ns.args[1]\\r\\n    const delay = ns.args[2]\\r\\n  \\r\\n    if (delay && delay > 0) {\\r\\n      await ns.sleep(delay)\\r\\n    }\\r\\n  \\r\\n    ns.print(`Starting operation: weaken on ${target} in ${threads} threads`)\\r\\n    await ns.weaken(target, { threads, stock: true })\\r\\n    ns.exit()\\r\\n  }\\r\\n  \",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:file:///d58d74fe-b36a-4822-9d27-31595793ca76\",\"moduleSequenceNumber\":21192}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"home\",\"_hash\":\"e952e94dd27d633fd591066b3da072c2321e9de8a9bce8a0ea0e9eae632ecaf0\",\"moduleSequenceNumber\":21192,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"const settings = {\\r\\n    maxPlayerServers: 25,\\r\\n    gbRamCost: 55000,\\r\\n    maxGbRam: 1048576,\\r\\n    minGbRam: 64,\\r\\n    totalMoneyAllocation: 0.4,\\r\\n    actions: {\\r\\n      BUY: 'buy',\\r\\n      UPGRADE: 'upgrade',\\r\\n    },\\r\\n    keys: {\\r\\n      serverMap: 'BB_SERVER_MAP',\\r\\n    },\\r\\n  }\\r\\n  \\r\\n  function getItem(key) {\\r\\n    let item = localStorage.getItem(key)\\r\\n  \\r\\n    return item ? JSON.parse(item) : undefined\\r\\n  }\\r\\n  \\r\\n  function setItem(key, value) {\\r\\n    localStorage.setItem(key, JSON.stringify(value))\\r\\n  }\\r\\n  \\r\\n  function localeHHMMSS(ms = 0) {\\r\\n    if (!ms) {\\r\\n      ms = new Date().getTime()\\r\\n    }\\r\\n  \\r\\n    return new Date(ms).toLocaleTimeString()\\r\\n  }\\r\\n  \\r\\n  function createUUID() {\\r\\n    var dt = new Date().getTime()\\r\\n    var uuid = 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {\\r\\n      var r = (dt + Math.random() * 16) % 16 | 0\\r\\n      dt = Math.floor(dt / 16)\\r\\n      return (c == 'x' ? r : (r & 0x3) | 0x8).toString(16)\\r\\n    })\\r\\n    return uuid\\r\\n  }\\r\\n  \\r\\n  function updateServer(ns, serverMap, host) {\\r\\n    serverMap.servers[host] = {\\r\\n      host,\\r\\n      ports: ns.getServerNumPortsRequired(host),\\r\\n      hackingLevel: ns.getServerRequiredHackingLevel(host),\\r\\n      maxMoney: ns.getServerMaxMoney(host),\\r\\n      growth: ns.getServerGrowth(host),\\r\\n      minSecurityLevel: ns.getServerMinSecurityLevel(host),\\r\\n      baseSecurityLevel: ns.getServerBaseSecurityLevel(host),\\r\\n      ram: ns.getServerRam(host)[0],\\r\\n      connections: ['home'],\\r\\n      parent: 'home',\\r\\n      children: [],\\r\\n    }\\r\\n  \\r\\n    Object.keys(serverMap.servers).map((hostname) => {\\r\\n      if (!ns.serverExists(hostname)) {\\r\\n        delete serverMap.servers[hostname]\\r\\n      }\\r\\n    })\\r\\n  \\r\\n    setItem(settings.keys.serverMap, serverMap)\\r\\n  }\\r\\n  \\r\\n  function getPurchasedServers(ns) {\\r\\n    let purchasedServers = ns.getPurchasedServers()\\r\\n    if (purchasedServers.length) {\\r\\n      purchasedServers.sort((a, b) => {\\r\\n        const totalRamA = ns.getServerRam(a).shift()\\r\\n        const totalRamB = ns.getServerRam(b).shift()\\r\\n  \\r\\n        if (totalRamA === totalRamB) {\\r\\n          return ns.getServerRam(a).shift() - ns.getServerRam(b).shift()\\r\\n        } else {\\r\\n          return totalRamA - totalRamB\\r\\n        }\\r\\n      })\\r\\n    }\\r\\n  \\r\\n    return purchasedServers\\r\\n  }\\r\\n  \\r\\n  export async function main(ns) {\\r\\n    ns.tprint(`[${localeHHMMSS()}] Starting playerServers.js`)\\r\\n  \\r\\n    settings.maxGbRam = ns.getPurchasedServerMaxRam()\\r\\n    settings.maxPlayerServers = ns.getPurchasedServerLimit()\\r\\n    let hostname = ns.getHostname()\\r\\n  \\r\\n    if (hostname !== 'home') {\\r\\n      throw new Exception('Run the script from home')\\r\\n    }\\r\\n  \\r\\n    while (true) {\\r\\n      let didChange = false\\r\\n  \\r\\n      const serverMap = getItem(settings.keys.serverMap)\\r\\n      let purchasedServers = getPurchasedServers(ns)\\r\\n  \\r\\n      let action = purchasedServers.length < settings.maxPlayerServers ? settings.actions.BUY : settings.actions.UPGRADE\\r\\n  \\r\\n      if (action == settings.actions.BUY) {\\r\\n        let smallestCurrentServer = purchasedServers.length ? ns.getServerRam(purchasedServers[0]).shift() : 0\\r\\n        let targetRam = Math.max(settings.minGbRam, smallestCurrentServer)\\r\\n  \\r\\n        if (targetRam === settings.minGbRam) {\\r\\n          while (ns.getServerMoneyAvailable('home') * settings.totalMoneyAllocation >= targetRam * settings.gbRamCost * settings.maxPlayerServers) {\\r\\n            targetRam *= 2\\r\\n          }\\r\\n  \\r\\n          targetRam /= 2\\r\\n        }\\r\\n  \\r\\n        targetRam = Math.max(settings.minGbRam, targetRam)\\r\\n        targetRam = Math.min(targetRam, settings.maxGbRam)\\r\\n  \\r\\n        if (ns.getServerMoneyAvailable('home') * settings.totalMoneyAllocation >= targetRam * settings.gbRamCost) {\\r\\n          let hostname = `pserv-${targetRam}-${createUUID()}`\\r\\n          hostname = ns.purchaseServer(hostname, targetRam)\\r\\n  \\r\\n          if (hostname) {\\r\\n            ns.tprint(`[${localeHHMMSS()}] Bought new server: ${hostname} (${targetRam} GB)`)\\r\\n  \\r\\n            updateServer(ns, serverMap, hostname)\\r\\n            didChange = true\\r\\n          }\\r\\n        }\\r\\n      } else {\\r\\n        let smallestCurrentServer = Math.max(ns.getServerRam(purchasedServers[0]).shift(), settings.minGbRam)\\r\\n        let biggestCurrentServer = ns.getServerRam(purchasedServers[purchasedServers.length - 1]).shift()\\r\\n        let targetRam = biggestCurrentServer\\r\\n  \\r\\n        if (smallestCurrentServer === settings.maxGbRam) {\\r\\n          ns.tprint(`[${localeHHMMSS()}] All servers maxxed. Exiting.`)\\r\\n          ns.exit()\\r\\n          return\\r\\n        }\\r\\n  \\r\\n        if (smallestCurrentServer === biggestCurrentServer) {\\r\\n          while (ns.getServerMoneyAvailable('home') * settings.totalMoneyAllocation >= targetRam * settings.gbRamCost) {\\r\\n            targetRam *= 4\\r\\n          }\\r\\n  \\r\\n          targetRam /= 4\\r\\n        }\\r\\n  \\r\\n        targetRam = Math.min(targetRam, settings.maxGbRam)\\r\\n  \\r\\n        purchasedServers = getPurchasedServers(ns)\\r\\n        if (targetRam > ns.getServerRam(purchasedServers[0]).shift()) {\\r\\n          didChange = true\\r\\n          while (didChange) {\\r\\n            didChange = false\\r\\n            purchasedServers = getPurchasedServers(ns)\\r\\n  \\r\\n            if (targetRam > ns.getServerRam(purchasedServers[0]).shift()) {\\r\\n              if (ns.getServerMoneyAvailable('home') * settings.totalMoneyAllocation >= targetRam * settings.gbRamCost) {\\r\\n                let hostname = `pserv-${targetRam}-${createUUID()}`\\r\\n  \\r\\n                await ns.killall(purchasedServers[0])\\r\\n                await ns.sleep(10)\\r\\n                const serverDeleted = await ns.deleteServer(purchasedServers[0])\\r\\n                if (serverDeleted) {\\r\\n                  hostname = await ns.purchaseServer(hostname, targetRam)\\r\\n  \\r\\n                  if (hostname) {\\r\\n                    ns.tprint(`[${localeHHMMSS()}] Upgraded: ${purchasedServers[0]} into server: ${hostname} (${targetRam} GB)`)\\r\\n  \\r\\n                    updateServer(ns, serverMap, hostname)\\r\\n                    didChange = true\\r\\n                  }\\r\\n                }\\r\\n              }\\r\\n            }\\r\\n          }\\r\\n        }\\r\\n      }\\r\\n  \\r\\n      if (!didChange) {\\r\\n        await ns.sleep(5123)\\r\\n      }\\r\\n    }\\r\\n  }\",\"filename\":\"playerServers.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"playerServers.js\",\"url\":\"blob:file:///60c8027c-6422-4405-992d-4bb14eb7d262\",\"moduleSequenceNumber\":42190}],\"dependents\":[],\"ramUsage\":9.9,\"server\":\"home\",\"_hash\":\"e0b085db6873bef8ac957837510fee5f728da7d65f83a9a1a9c03345b149952b\",\"moduleSequenceNumber\":53774,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerGrowth\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerBaseSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"serverExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getPurchasedServers\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"getPurchasedServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServerLimit\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"purchaseServer\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"deleteServer\",\"cost\":2.25}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"const settings = {\\r\\n    mapRefreshInterval: 1 * 60 * 60 * 1000,\\r\\n    keys: {\\r\\n      serverMap: 'BB_SERVER_MAP',\\r\\n    },\\r\\n  }\\r\\n  const scriptsToKill = [\\r\\n    'mainHack.js',\\r\\n    'spider.js',\\r\\n    'grow.js',\\r\\n    'hack.js',\\r\\n    'weaken.js',\\r\\n    'playerServers.js',\\r\\n    'runHacking.js',\\r\\n    'initHacking.js',\\r\\n    'start.js',\\r\\n    'find.js',\\r\\n  ]\\r\\n  \\r\\n  function getItem(key) {\\r\\n    let item = localStorage.getItem(key)\\r\\n  \\r\\n    return item ? JSON.parse(item) : undefined\\r\\n  }\\r\\n  \\r\\n  function localeHHMMSS(ms = 0) {\\r\\n    if (!ms) {\\r\\n      ms = new Date().getTime()\\r\\n    }\\r\\n  \\r\\n    return new Date(ms).toLocaleTimeString()\\r\\n  }\\r\\n  \\r\\n  export async function main(ns) {\\r\\n    ns.tprint(`[${localeHHMMSS()}] Starting killAll.js`)\\r\\n  \\r\\n    const scriptToRunAfter = ns.args[0]\\r\\n  \\r\\n    let hostname = ns.getHostname()\\r\\n  \\r\\n    if (hostname !== 'home') {\\r\\n      throw new Exception('Run the script from home')\\r\\n    }\\r\\n  \\r\\n    const serverMap = getItem(settings.keys.serverMap)\\r\\n  \\r\\n    if (!serverMap || serverMap.lastUpdate < new Date().getTime() - settings.mapRefreshInterval) {\\r\\n      ns.tprint(`[${localeHHMMSS()}] Spawning spider.js`)\\r\\n      ns.spawn('spider.js', 1, 'killAll.js')\\r\\n      ns.exit()\\r\\n      return\\r\\n    }\\r\\n  \\r\\n    for (let i = 0; i < scriptsToKill.length; i++) {\\r\\n      await ns.scriptKill(scriptsToKill[i], 'home')\\r\\n    }\\r\\n  \\r\\n    const killAbleServers = Object.keys(serverMap.servers)\\r\\n      .filter((hostname) => ns.serverExists(hostname))\\r\\n      .filter((hostname) => hostname !== 'home')\\r\\n  \\r\\n    for (let i = 0; i < killAbleServers.length; i++) {\\r\\n      await ns.killall(killAbleServers[i])\\r\\n    }\\r\\n  \\r\\n    ns.tprint(`[${localeHHMMSS()}] All processes killed`)\\r\\n  \\r\\n    if (scriptToRunAfter) {\\r\\n      ns.tprint(`[${localeHHMMSS()}] Spawning ${scriptToRunAfter}`)\\r\\n      ns.spawn(scriptToRunAfter, 1)\\r\\n    } else {\\r\\n      ns.tprint(`[${localeHHMMSS()}] Spawning runHacking.js`)\\r\\n      ns.spawn('runHacking.js', 1)\\r\\n    }\\r\\n  }\\r\\n  \",\"filename\":\"killAll.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"killAll.js\",\"url\":\"blob:file:///8f653b8d-b98c-4c3b-ad68-15e1fec6fb03\",\"moduleSequenceNumber\":42841}],\"dependents\":[],\"ramUsage\":5.25,\"server\":\"home\",\"_hash\":\"b1e4474ac713827250de334d736c4ac2d9aab75778642467eb7b22c6dbd8932f\",\"moduleSequenceNumber\":42841,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"spawn\",\"cost\":2},{\"type\":\"fn\",\"name\":\"scriptKill\",\"cost\":1},{\"type\":\"fn\",\"name\":\"serverExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"function localeHHMMSS(ms = 0) {\\r\\n    if (!ms) {\\r\\n      ms = new Date().getTime()\\r\\n    }\\r\\n  \\r\\n    return new Date(ms).toLocaleTimeString()\\r\\n  }\\r\\n  \\r\\n   /** @param {NS} ns **/export async function main(ns) {\\r\\n    ns.tprint(`[${localeHHMMSS()}] Starting runHacking.js`)\\r\\n  \\r\\n    let hostname = ns.getHostname()\\r\\n  \\r\\n    if (hostname !== 'home') {\\r\\n      throw new Exception('Run the script from home')\\r\\n    }\\r\\n  \\r\\n    const homeRam = ns.getServerMaxRam('home')\\r\\n  \\r\\n    if (homeRam >= 64) {\\r\\n      ns.tprint(`[${localeHHMMSS()}] Spawning spider.js`)\\r\\n      await ns.run('spider.js', 1, 'mainHack.js')\\r\\n      await ns.sleep(3000)\\r\\n      ns.tprint(`[${localeHHMMSS()}] Spawning playerServers.js`)\\r\\n      ns.spawn('playerServers.js', 1)\\r\\n    } else {\\r\\n      ns.tprint(`[${localeHHMMSS()}] Spawning spider.js`)\\r\\n      ns.spawn('spider.js', 1, 'mainHack.js')\\r\\n    }\\r\\n  }\",\"filename\":\"runHacking.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"runHacking.js\",\"url\":\"blob:file:///9fd3ff98-7c1d-4636-b07e-4ac516a6b80c\",\"moduleSequenceNumber\":43057}],\"dependents\":[],\"ramUsage\":4.7,\"server\":\"home\",\"_hash\":\"6af156c744b129e3a9917f188e7110861bd5295db253ffff415aa93fecadc53a\",\"moduleSequenceNumber\":43057,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"run\",\"cost\":1},{\"type\":\"fn\",\"name\":\"spawn\",\"cost\":2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"const settings = {\\r\\n    keys: {\\r\\n      serverMap: 'BB_SERVER_MAP',\\r\\n    },\\r\\n  }\\r\\n  \\r\\n  function getItem(key) {\\r\\n    let item = localStorage.getItem(key)\\r\\n  \\r\\n    return item ? JSON.parse(item) : undefined\\r\\n  }\\r\\n  \\r\\n  function localeHHMMSS(ms = 0) {\\r\\n    if (!ms) {\\r\\n      ms = new Date().getTime()\\r\\n    }\\r\\n  \\r\\n    return new Date(ms).toLocaleTimeString()\\r\\n  }\\r\\n  \\r\\n  function printPathToServer(servers, serverToFind) {\\r\\n    if (serverToFind === 'home') return 'home'\\r\\n    if (!servers[serverToFind]) return `-- Unable to locate ${serverToFind} --`\\r\\n  \\r\\n    const jumps = []\\r\\n  \\r\\n    let isParentHome = servers.parent === 'home'\\r\\n    let currentServer = serverToFind\\r\\n  \\r\\n    while (!isParentHome) {\\r\\n      jumps.push(servers[currentServer].parent)\\r\\n  \\r\\n      if (servers[currentServer].parent !== 'home') {\\r\\n        currentServer = servers[currentServer].parent\\r\\n      } else {\\r\\n        isParentHome = true\\r\\n      }\\r\\n    }\\r\\n  \\r\\n    jumps.unshift(serverToFind)\\r\\n  \\r\\n    return jumps.reverse().join('; connect ')\\r\\n  }\\r\\n  \\r\\n  export async function main(ns) {\\r\\n    ns.tprint(`[${localeHHMMSS()}] Starting find.js`)\\r\\n  \\r\\n    const serverToFind = ns.args[0]\\r\\n  \\r\\n    let hostname = ns.getHostname()\\r\\n  \\r\\n    if (hostname !== 'home') {\\r\\n      throw new Exception('Run the script from home')\\r\\n    }\\r\\n  \\r\\n    const serverMap = getItem(settings.keys.serverMap)\\r\\n  \\r\\n    if (serverToFind) {\\r\\n      if (Object.keys(serverMap.servers).includes(serverToFind)) {\\r\\n        ns.tprint(`[${localeHHMMSS()}] Path to ${serverToFind} found:`)\\r\\n        ns.tprint(printPathToServer(serverMap.servers, serverToFind))\\r\\n      } else {\\r\\n        ns.tprint(`[${localeHHMMSS()}] Unable to find the path to ${serverToFind}`)\\r\\n      }\\r\\n    } else {\\r\\n      ns.tprint(`[${localeHHMMSS()}] Common servers:`)\\r\\n      ns.tprint(`* CSEC (CyberSec faction)`)\\r\\n      ns.tprint(printPathToServer(serverMap.servers, 'CSEC') + '; hack;')\\r\\n      ns.tprint('')\\r\\n      ns.tprint(`* avmnite-02h (NiteSec faction)`)\\r\\n      ns.tprint(printPathToServer(serverMap.servers, 'avmnite-02h') + '; hack;')\\r\\n      ns.tprint('')\\r\\n      ns.tprint(`* I.I.I.I (The Black Hand faction)`)\\r\\n      ns.tprint(printPathToServer(serverMap.servers, 'I.I.I.I') + '; hack;')\\r\\n      ns.tprint('')\\r\\n      ns.tprint(`* run4theh111z (Bitrunners faction)`)\\r\\n      ns.tprint(printPathToServer(serverMap.servers, 'run4theh111z') + '; hack;')\\r\\n      ns.tprint('')\\r\\n      ns.tprint(`* w0r1d_d43m0n`)\\r\\n      ns.tprint(printPathToServer(serverMap.servers, 'w0r1d_d43m0n') + '; hack;')\\r\\n      ns.tprint('')\\r\\n      ns.tprint(`[${localeHHMMSS()}] Looking for servers with coding contracts:`)\\r\\n      Object.keys(serverMap.servers).forEach((hostname) => {\\r\\n        const files = ns.ls(hostname)\\r\\n        if (files && files.length) {\\r\\n          const contract = files.find((file) => file.includes('.cct'))\\r\\n  \\r\\n          if (!!contract) {\\r\\n            ns.tprint('')\\r\\n            ns.tprint(`* ${hostname} has a coding contract(s)! Connect using:`)\\r\\n            ns.tprint(printPathToServer(serverMap.servers, hostname) + `; run ${contract};`)\\r\\n          }\\r\\n        }\\r\\n      })\\r\\n      ns.tprint('')\\r\\n      ns.tprint('Buy all hacks command:')\\r\\n      ns.tprint('home; connect darkweb; buy BruteSSH.exe; buy FTPCrack.exe; buy relaySMTP.exe; buy HTTPWorm.exe; buy SQLInject.exe; home;')\\r\\n      ns.tprint('')\\r\\n    }\\r\\n  }\\r\\n  \",\"filename\":\"find.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"find.js\",\"url\":\"blob:file:///cf101968-6c6e-43a6-a866-2a90beddd888\",\"moduleSequenceNumber\":21543}],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"home\",\"_hash\":\"f662cf3180ec3d6ab08f1398edefd3f9e8df96c73d66b21e4587e77984a7b2e9\",\"moduleSequenceNumber\":21543,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    const host = ns.getHostname();\\n\\n    if (host == 'home') {\\n        var files = ns.ls(host);\\n        for (file of files) {\\n            await ns.rm(file);\\n        }\\n    } else {\\n        ns.tprint('please run srcipt in home');\\n    }\\n\\n}\",\"filename\":\"rm.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.85,\"server\":\"home\",\"_hash\":\"b96d2bf9c26fbc3bf9320a57f1cbaabd6d87a04e2c9ac791624169c307691f8e\",\"moduleSequenceNumber\":21074,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"rm\",\"cost\":1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"const settings = {\\n    keys: {\\n        serverMap: 'BB_SERVER_MAP',\\n    },\\n}\\n\\nfunction getItem(key) {\\n    let item = localStorage.getItem(key)\\n\\n    return item ? JSON.parse(item) : undefined\\n}\\n\\nfunction localeHHMMSS(ms = 0) {\\n    if (!ms) {\\n        ms = new Date().getTime()\\n    }\\n\\n    return new Date(ms).toLocaleTimeString()\\n}\\n\\nfunction convert2DArrayToString(arr) {\\n    var components = []\\n    arr.forEach(function (e) {\\n        var s = e.toString()\\n        s = ['[', s, ']'].join('')\\n        components.push(s)\\n    })\\n    return components.join(',').replace(/\\\\s/g, '')\\n}\\n\\nconst codingContractTypesMetadata = [\\n    {\\n        name: 'Find Largest Prime Factor',\\n        solver: function (data) {\\n            var fac = 2\\n            var n = data\\n            while (n > (fac - 1) * (fac - 1)) {\\n                while (n % fac === 0) {\\n                    n = Math.round(n / fac)\\n                }\\n                ++fac\\n            }\\n            return n === 1 ? fac - 1 : n\\n        },\\n    },\\n    {\\n        name: 'Subarray with Maximum Sum',\\n        solver: function (data) {\\n            var nums = data.slice()\\n            for (var i = 1; i < nums.length; i++) {\\n                nums[i] = Math.max(nums[i], nums[i] + nums[i - 1])\\n            }\\n            return Math.max.apply(Math, nums)\\n        },\\n    },\\n    {\\n        name: 'Total Ways to Sum',\\n        solver: function (data) {\\n            var ways = [1]\\n            ways.length = data + 1\\n            ways.fill(0, 1)\\n            for (var i = 1; i < data; ++i) {\\n                for (var j = i; j <= data; ++j) {\\n                    ways[j] += ways[j - i]\\n                }\\n            }\\n            return ways[data]\\n        },\\n    },\\n    {\\n        name: 'Spiralize Matrix',\\n        solver: function (data, ans) {\\n            var spiral = []\\n            var m = data.length\\n            var n = data[0].length\\n            var u = 0\\n            var d = m - 1\\n            var l = 0\\n            var r = n - 1\\n            var k = 0\\n            while (true) {\\n                // Up\\n                for (var col = l; col <= r; col++) {\\n                    spiral[k] = data[u][col]\\n                    ++k\\n                }\\n                if (++u > d) {\\n                    break\\n                }\\n                // Right\\n                for (var row = u; row <= d; row++) {\\n                    spiral[k] = data[row][r]\\n                    ++k\\n                }\\n                if (--r < l) {\\n                    break\\n                }\\n                // Down\\n                for (var col = r; col >= l; col--) {\\n                    spiral[k] = data[d][col]\\n                    ++k\\n                }\\n                if (--d < u) {\\n                    break\\n                }\\n                // Left\\n                for (var row = d; row >= u; row--) {\\n                    spiral[k] = data[row][l]\\n                    ++k\\n                }\\n                if (++l > r) {\\n                    break\\n                }\\n            }\\n\\n            return spiral\\n        },\\n    },\\n    {\\n        name: 'Array Jumping Game',\\n        solver: function (data) {\\n            var n = data.length\\n            var i = 0\\n            for (var reach = 0; i < n && i <= reach; ++i) {\\n                reach = Math.max(i + data[i], reach)\\n            }\\n            var solution = i === n\\n            return solution ? 1 : 0\\n        },\\n    },\\n    {\\n        name: 'Merge Overlapping Intervals',\\n        solver: function (data) {\\n            var intervals = data.slice()\\n            intervals.sort(function (a, b) {\\n                return a[0] - b[0]\\n            })\\n            var result = []\\n            var start = intervals[0][0]\\n            var end = intervals[0][1]\\n            for (var _i = 0, intervals_1 = intervals; _i < intervals_1.length; _i++) {\\n                var interval = intervals_1[_i]\\n                if (interval[0] <= end) {\\n                    end = Math.max(end, interval[1])\\n                } else {\\n                    result.push([start, end])\\n                    start = interval[0]\\n                    end = interval[1]\\n                }\\n            }\\n            result.push([start, end])\\n            var sanitizedResult = convert2DArrayToString(result)\\n            return sanitizedResult\\n        },\\n    },\\n    {\\n        name: 'Generate IP Addresses',\\n        solver: function (data, ans) {\\n            var ret = []\\n            for (var a = 1; a <= 3; ++a) {\\n                for (var b = 1; b <= 3; ++b) {\\n                    for (var c = 1; c <= 3; ++c) {\\n                        for (var d = 1; d <= 3; ++d) {\\n                            if (a + b + c + d === data.length) {\\n                                var A = parseInt(data.substring(0, a), 10)\\n                                var B = parseInt(data.substring(a, a + b), 10)\\n                                var C = parseInt(data.substring(a + b, a + b + c), 10)\\n                                var D = parseInt(data.substring(a + b + c, a + b + c + d), 10)\\n                                if (A <= 255 && B <= 255 && C <= 255 && D <= 255) {\\n                                    var ip = [A.toString(), '.', B.toString(), '.', C.toString(), '.', D.toString()].join('')\\n                                    if (ip.length === data.length + 3) {\\n                                        ret.push(ip)\\n                                    }\\n                                }\\n                            }\\n                        }\\n                    }\\n                }\\n            }\\n            return ret\\n        },\\n    },\\n    {\\n        name: 'Algorithmic Stock Trader I',\\n        solver: function (data) {\\n            var maxCur = 0\\n            var maxSoFar = 0\\n            for (var i = 1; i < data.length; ++i) {\\n                maxCur = Math.max(0, (maxCur += data[i] - data[i - 1]))\\n                maxSoFar = Math.max(maxCur, maxSoFar)\\n            }\\n            return maxSoFar.toString()\\n        },\\n    },\\n    {\\n        name: 'Algorithmic Stock Trader II',\\n        solver: function (data) {\\n            var profit = 0\\n            for (var p = 1; p < data.length; ++p) {\\n                profit += Math.max(data[p] - data[p - 1], 0)\\n            }\\n            return profit.toString()\\n        },\\n    },\\n    {\\n        name: 'Algorithmic Stock Trader III',\\n        solver: function (data) {\\n            var hold1 = Number.MIN_SAFE_INTEGER\\n            var hold2 = Number.MIN_SAFE_INTEGER\\n            var release1 = 0\\n            var release2 = 0\\n            for (var _i = 0, data_1 = data; _i < data_1.length; _i++) {\\n                var price = data_1[_i]\\n                release2 = Math.max(release2, hold2 + price)\\n                hold2 = Math.max(hold2, release1 - price)\\n                release1 = Math.max(release1, hold1 + price)\\n                hold1 = Math.max(hold1, price * -1)\\n            }\\n            return release2.toString()\\n        },\\n    },\\n    {\\n        name: 'Algorithmic Stock Trader IV',\\n        solver: function (data) {\\n            var k = data[0]\\n            var prices = data[1]\\n            var len = prices.length\\n            if (len < 2) {\\n                return 0\\n            }\\n            if (k > len / 2) {\\n                var res = 0\\n                for (var i = 1; i < len; ++i) {\\n                    res += Math.max(prices[i] - prices[i - 1], 0)\\n                }\\n                return res\\n            }\\n            var hold = []\\n            var rele = []\\n            hold.length = k + 1\\n            rele.length = k + 1\\n            for (var i = 0; i <= k; ++i) {\\n                hold[i] = Number.MIN_SAFE_INTEGER\\n                rele[i] = 0\\n            }\\n            var cur\\n            for (var i = 0; i < len; ++i) {\\n                cur = prices[i]\\n                for (var j = k; j > 0; --j) {\\n                    rele[j] = Math.max(rele[j], hold[j] + cur)\\n                    hold[j] = Math.max(hold[j], rele[j - 1] - cur)\\n                }\\n            }\\n            return rele[k]\\n        },\\n    },\\n    {\\n        name: 'Minimum Path Sum in a Triangle',\\n        solver: function (data) {\\n            var n = data.length\\n            var dp = data[n - 1].slice()\\n            for (var i = n - 2; i > -1; --i) {\\n                for (var j = 0; j < data[i].length; ++j) {\\n                    dp[j] = Math.min(dp[j], dp[j + 1]) + data[i][j]\\n                }\\n            }\\n            return dp[0]\\n        },\\n    },\\n    {\\n        name: 'Unique Paths in a Grid I',\\n        solver: function (data) {\\n            var n = data[0] // Number of rows\\n            var m = data[1] // Number of columns\\n            var currentRow = []\\n            currentRow.length = n\\n            for (var i = 0; i < n; i++) {\\n                currentRow[i] = 1\\n            }\\n            for (var row = 1; row < m; row++) {\\n                for (var i = 1; i < n; i++) {\\n                    currentRow[i] += currentRow[i - 1]\\n                }\\n            }\\n            return currentRow[n - 1]\\n        },\\n    },\\n    {\\n        name: 'Unique Paths in a Grid II',\\n        solver: function (data) {\\n            var obstacleGrid = []\\n            obstacleGrid.length = data.length\\n            for (var i = 0; i < obstacleGrid.length; ++i) {\\n                obstacleGrid[i] = data[i].slice()\\n            }\\n            for (var i = 0; i < obstacleGrid.length; i++) {\\n                for (var j = 0; j < obstacleGrid[0].length; j++) {\\n                    if (obstacleGrid[i][j] == 1) {\\n                        obstacleGrid[i][j] = 0\\n                    } else if (i == 0 && j == 0) {\\n                        obstacleGrid[0][0] = 1\\n                    } else {\\n                        obstacleGrid[i][j] = (i > 0 ? obstacleGrid[i - 1][j] : 0) + (j > 0 ? obstacleGrid[i][j - 1] : 0)\\n                    }\\n                }\\n            }\\n            return obstacleGrid[obstacleGrid.length - 1][obstacleGrid[0].length - 1]\\n        },\\n    },\\n    {\\n        name: 'Sanitize Parentheses in Expression',\\n        solver: function (data) {\\n            var left = 0\\n            var right = 0\\n            var res = []\\n            for (var i = 0; i < data.length; ++i) {\\n                if (data[i] === '(') {\\n                    ++left\\n                } else if (data[i] === ')') {\\n                    left > 0 ? --left : ++right\\n                }\\n            }\\n            function dfs(pair, index, left, right, s, solution, res) {\\n                if (s.length === index) {\\n                    if (left === 0 && right === 0 && pair === 0) {\\n                        for (var i = 0; i < res.length; i++) {\\n                            if (res[i] === solution) {\\n                                return\\n                            }\\n                        }\\n                        res.push(solution)\\n                    }\\n                    return\\n                }\\n                if (s[index] === '(') {\\n                    if (left > 0) {\\n                        dfs(pair, index + 1, left - 1, right, s, solution, res)\\n                    }\\n                    dfs(pair + 1, index + 1, left, right, s, solution + s[index], res)\\n                } else if (s[index] === ')') {\\n                    if (right > 0) dfs(pair, index + 1, left, right - 1, s, solution, res)\\n                    if (pair > 0) dfs(pair - 1, index + 1, left, right, s, solution + s[index], res)\\n                } else {\\n                    dfs(pair, index + 1, left, right, s, solution + s[index], res)\\n                }\\n            }\\n            dfs(0, 0, left, right, data, '', res)\\n\\n            return res\\n        },\\n    },\\n    {\\n        name: 'Find All Valid Math Expressions',\\n        solver: function (data) {\\n            var num = data[0]\\n            var target = data[1]\\n            function helper(res, path, num, target, pos, evaluated, multed) {\\n                if (pos === num.length) {\\n                    if (target === evaluated) {\\n                        res.push(path)\\n                    }\\n                    return\\n                }\\n                for (var i = pos; i < num.length; ++i) {\\n                    if (i != pos && num[pos] == '0') {\\n                        break\\n                    }\\n                    var cur = parseInt(num.substring(pos, i + 1))\\n                    if (pos === 0) {\\n                        helper(res, path + cur, num, target, i + 1, cur, cur)\\n                    } else {\\n                        helper(res, path + '+' + cur, num, target, i + 1, evaluated + cur, cur)\\n                        helper(res, path + '-' + cur, num, target, i + 1, evaluated - cur, -cur)\\n                        helper(res, path + '*' + cur, num, target, i + 1, evaluated - multed + multed * cur, multed * cur)\\n                    }\\n                }\\n            }\\n\\n            if (num == null || num.length === 0) {\\n                return []\\n            }\\n            var result = []\\n            helper(result, '', num, target, 0, 0, 0)\\n            return result\\n        },\\n    },\\n]\\n\\nfunction findAnswer(contract) {\\n    let answer\\n\\n    const codingContractSolution = codingContractTypesMetadata.find((codingContractTypeMetadata) => codingContractTypeMetadata.name === contract.type)\\n\\n    if (codingContractSolution) {\\n        answer = codingContractSolution.solver(contract.data)\\n    } else {\\n        console.error('Unable to find answer for', contract)\\n    }\\n\\n    return answer\\n}\\n\\nexport async function main(ns) {\\n    ns.tprint(`[${localeHHMMSS()}] Starting contracter.js`)\\n\\n    let hostname = ns.getHostname()\\n\\n    if (hostname !== 'home') {\\n        throw new Exception('Run the script from home')\\n    }\\n\\n    const serverMap = getItem(settings.keys.serverMap)\\n    const contractsDb = []\\n\\n    Object.keys(serverMap.servers).forEach((hostname) => {\\n        const files = ns.ls(hostname)\\n        if (files && files.length) {\\n            const contracts = files.filter((file) => file.includes('.cct'))\\n\\n            if (contracts.length) {\\n                contracts.forEach((contract) => {\\n                    const contractData = {\\n                        contract,\\n                        hostname,\\n                        type: ns.codingcontract.getContractType(contract, hostname),\\n                        data: ns.codingcontract.getData(contract, hostname),\\n                    }\\n\\n                    contractsDb.push(contractData)\\n                })\\n            }\\n        }\\n    })\\n\\n    if (contractsDb.length) {\\n        for (let i = 0; i < contractsDb.length; i++) {\\n            const contract = contractsDb[i]\\n            const answer = findAnswer(contract)\\n\\n            if (answer != null) {\\n                const solvingResult = ns.codingcontract.attempt(answer, contract.contract, contract.hostname, { returnReward: true })\\n\\n                if (solvingResult) {\\n                    ns.tprint(`[${localeHHMMSS()}] Solved ${contract.contract} on ${contract.hostname}. ${solvingResult}`)\\n                } else {\\n                    ns.tprint(`[${localeHHMMSS()}] Wrong answer for ${contract.contract} on ${contract.hostname}`)\\n                }\\n            } else {\\n                ns.tprint(`[${localeHHMMSS()}] Unable to find the answer for: ${JSON.stringify(contract)}`)\\n            }\\n\\n            await ns.sleep(10)\\n        }\\n    }\\n}\",\"filename\":\"contrater.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":21.85,\"server\":\"home\",\"_hash\":\"df012b7119d3df9a573892d2ee88dab2d375fdf1fdbfc8a977a3f8ffa56d2fb7\",\"moduleSequenceNumber\":21075,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"codingcontract.getContractType\",\"cost\":5},{\"type\":\"fn\",\"name\":\"codingcontract.getData\",\"cost\":5},{\"type\":\"fn\",\"name\":\"codingcontract.attempt\",\"cost\":10}]}}],\"serversOnNetwork\":[\"n00dles\",\"foodnstuff\",\"sigma-cosmetics\",\"joesguns\",\"hong-fang-tea\",\"harakiri-sushi\",\"iron-gym\",\"darkweb\",\"pserv-1024-b5a5bf75-d570-44c7-9489-fff9a2b752ce\",\"pserv-1024-8d4d3e75-dde0-4983-a18c-1883a0e6c2d8\",\"pserv-1024-e821b9e8-0767-475b-8775-fc9987eac400\",\"pserv-1024-40d52f47-02e4-4a9f-99d8-748112d029a2\",\"pserv-1024-59648f7d-7551-491d-8270-7ca85c96053a\",\"pserv-1024-98c3a23c-b27d-4e25-a25f-a3f7e345ff45\",\"pserv-1024-3818a3fe-1461-4897-b993-fd2b4810e643\",\"pserv-1024-befc7db1-6714-4711-984d-d7d2a3a81094\",\"pserv-1024-7ebeb642-ed0c-413b-a25d-940c56f6e521\",\"pserv-1024-8fc49717-e985-4ce3-b95a-4e53647dbce1\",\"pserv-1024-be088da0-7a1e-48d9-aaa1-62191d08af48\",\"pserv-1024-f71421ab-e7ee-4385-b39c-b784523786ba\",\"pserv-1024-56b942cd-25b4-4eda-868c-92c187579315\",\"pserv-1024-85da8a5a-078e-4313-9659-5ad2b36094d8\",\"pserv-1024-240cc89a-a780-44c3-9c05-61e0f461b7aa\",\"pserv-1024-0488cf4a-f880-4a21-a86f-f2c6496e1657\",\"pserv-1024-58028ebf-2970-402e-ad04-5a59c054b4d9\",\"pserv-1024-36c3c521-210d-4321-81b2-b0b153e321ab\",\"pserv-1024-2c573361-0593-4291-b8c4-b612ed70b8cb\",\"pserv-1024-382bebe2-06ab-4ade-8882-2b9b79949213\",\"pserv-1024-9914b245-c952-4864-bfe5-a61d68c192ac\",\"pserv-1024-77932f55-3377-4a85-bab5-dd6c2c9ad6c2\",\"pserv-1024-0e665033-336c-4ffe-ad05-95e7f63e01e1\",\"pserv-16384-f4e2c6fc-9255-478a-bb1b-a0aae0611ee9\",\"pserv-16384-c4b7be4d-cc4b-4f91-a44e-1d5d235898ca\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":1,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"ecorp\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"ecorp\",\"httpPortOpen\":false,\"ip\":\"31.8.3.7\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"ECorp\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"nwo\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":99,\"hackDifficulty\":99,\"minDifficulty\":33,\"moneyAvailable\":36644252364,\"moneyMax\":916106309100,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1376,\"serverGrowth\":99}},\"megacorp\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"megacorp\",\"httpPortOpen\":false,\"ip\":\"98.7.5.8\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"MegaCorp\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"powerhouse-fitness\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":99,\"hackDifficulty\":99,\"minDifficulty\":33,\"moneyAvailable\":52724158589,\"moneyMax\":1318103964725,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1325,\"serverGrowth\":99}},\"b-and-a\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"b-and-a\",\"httpPortOpen\":false,\"ip\":\"7.3.1.3\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Bachman & Associates\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\".\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":79,\"hackDifficulty\":79,\"minDifficulty\":26,\"moneyAvailable\":17893077264,\"moneyMax\":447326931600,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1149,\"serverGrowth\":78}},\"blade\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"blade\",\"httpPortOpen\":true,\"ip\":\"87.0.7.6\",\"isConnectedTo\":false,\"maxRam\":256,\"messages\":[\"beyond-man.lit\"],\"organizationName\":\"Blade Industries\",\"programs\":[],\"ramUsed\":255.5,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omega-net\",146,26575.17767107638,\"7c117b0b-50d2-43c9-a941-fa4195b808f9\"],\"dataMap\":{},\"filename\":\"grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":154.20999999999978,\"pid\":1229,\"ramUsage\":1.75,\"server\":\"blade\",\"threads\":146,\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///9ce01242-138e-4da8-aa86-35eee3e23c69\",\"moduleSequenceNumber\":32263}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const target = ns.args[0]\\r\\n    const threads = ns.args[1]\\r\\n    const delay = ns.args[2]\\r\\n  \\r\\n    if (delay && delay > 0) {\\r\\n      await ns.sleep(delay)\\r\\n    }\\r\\n  \\r\\n    ns.print(`Starting operation: hack on ${target} in ${threads} threads`)\\r\\n    await ns.hack(target, { threads, stock: true })\\r\\n    ns.exit()\\r\\n  }\\r\\n  \",\"filename\":\"hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:file:///34e0d521-1ffe-43f8-b8ea-769ea64bbfa4\",\"moduleSequenceNumber\":30965}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"blade\",\"_hash\":\"4d51de5d68e34b64abafc337497582a9ed6ccdf51fcb55366e3ec23598254bba\",\"moduleSequenceNumber\":30965,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const target = ns.args[0]\\r\\n    const threads = ns.args[1]\\r\\n    const delay = ns.args[2]\\r\\n  \\r\\n    if (delay && delay > 0) {\\r\\n      await ns.sleep(delay)\\r\\n    }\\r\\n  \\r\\n    ns.print(`Starting operation: grow on ${target} in ${threads} threads`)\\r\\n    await ns.grow(target, { threads, stock: true })\\r\\n    ns.exit()\\r\\n  }\\r\\n  \",\"filename\":\"grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///9ce01242-138e-4da8-aa86-35eee3e23c69\",\"moduleSequenceNumber\":32263}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"blade\",\"_hash\":\"7c1d1fb4f0c8f7bb72603cc66887138d311d1d62640ec9a93a5d7a6bde532915\",\"moduleSequenceNumber\":32263,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const target = ns.args[0]\\r\\n    const threads = ns.args[1]\\r\\n    const delay = ns.args[2]\\r\\n  \\r\\n    if (delay && delay > 0) {\\r\\n      await ns.sleep(delay)\\r\\n    }\\r\\n  \\r\\n    ns.print(`Starting operation: weaken on ${target} in ${threads} threads`)\\r\\n    await ns.weaken(target, { threads, stock: true })\\r\\n    ns.exit()\\r\\n  }\\r\\n  \",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"blade\",\"_hash\":\"e952e94dd27d633fd591066b3da072c2321e9de8a9bce8a0ea0e9eae632ecaf0\",\"moduleSequenceNumber\":30948,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"kuai-gong\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":93,\"hackDifficulty\":93,\"minDifficulty\":31,\"moneyAvailable\":29549450863,\"moneyMax\":738736271575,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1130,\"serverGrowth\":79}},\"nwo\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"nwo\",\"httpPortOpen\":false,\"ip\":\"93.5.3.2\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"the-hidden-world.lit\"],\"organizationName\":\"NWO\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"omnitek\",\"ecorp\",\"fulcrumassets\",\"The-Cave\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":99,\"hackDifficulty\":99,\"minDifficulty\":33,\"moneyAvailable\":22732482491,\"moneyMax\":568312062275,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1235,\"serverGrowth\":78}},\"clarkinc\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"clarkinc\",\"httpPortOpen\":false,\"ip\":\"78.6.6.2\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"beyond-man.lit\",\"cost-of-immortality.lit\"],\"organizationName\":\"Clarke Incorporated\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"kuai-gong\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":50,\"hackDifficulty\":50,\"minDifficulty\":17,\"moneyAvailable\":22645354019,\"moneyMax\":566133850475,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1024,\"serverGrowth\":47}},\"omnitek\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"omnitek\",\"httpPortOpen\":true,\"ip\":\"28.7.5.6\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[\"coded-intelligence.lit\",\"history-of-synthoids.lit\"],\"organizationName\":\"OmniTek Incorporated\",\"programs\":[],\"ramUsed\":127.75,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omega-net\",73,26575.17767107638,\"2ad0680c-e964-4ad0-b608-3250234c1f6b\"],\"dataMap\":{},\"filename\":\"grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":154.20999999999978,\"pid\":1226,\"ramUsage\":1.75,\"server\":\"omnitek\",\"threads\":73,\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///9ce01242-138e-4da8-aa86-35eee3e23c69\",\"moduleSequenceNumber\":32261}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const target = ns.args[0]\\r\\n    const threads = ns.args[1]\\r\\n    const delay = ns.args[2]\\r\\n  \\r\\n    if (delay && delay > 0) {\\r\\n      await ns.sleep(delay)\\r\\n    }\\r\\n  \\r\\n    ns.print(`Starting operation: hack on ${target} in ${threads} threads`)\\r\\n    await ns.hack(target, { threads, stock: true })\\r\\n    ns.exit()\\r\\n  }\\r\\n  \",\"filename\":\"hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:file:///34e0d521-1ffe-43f8-b8ea-769ea64bbfa4\",\"moduleSequenceNumber\":30963}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"omnitek\",\"_hash\":\"4d51de5d68e34b64abafc337497582a9ed6ccdf51fcb55366e3ec23598254bba\",\"moduleSequenceNumber\":30963,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const target = ns.args[0]\\r\\n    const threads = ns.args[1]\\r\\n    const delay = ns.args[2]\\r\\n  \\r\\n    if (delay && delay > 0) {\\r\\n      await ns.sleep(delay)\\r\\n    }\\r\\n  \\r\\n    ns.print(`Starting operation: grow on ${target} in ${threads} threads`)\\r\\n    await ns.grow(target, { threads, stock: true })\\r\\n    ns.exit()\\r\\n  }\\r\\n  \",\"filename\":\"grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///9ce01242-138e-4da8-aa86-35eee3e23c69\",\"moduleSequenceNumber\":32261}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"omnitek\",\"_hash\":\"7c1d1fb4f0c8f7bb72603cc66887138d311d1d62640ec9a93a5d7a6bde532915\",\"moduleSequenceNumber\":32261,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const target = ns.args[0]\\r\\n    const threads = ns.args[1]\\r\\n    const delay = ns.args[2]\\r\\n  \\r\\n    if (delay && delay > 0) {\\r\\n      await ns.sleep(delay)\\r\\n    }\\r\\n  \\r\\n    ns.print(`Starting operation: weaken on ${target} in ${threads} threads`)\\r\\n    await ns.weaken(target, { threads, stock: true })\\r\\n    ns.exit()\\r\\n  }\\r\\n  \",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"omnitek\",\"_hash\":\"e952e94dd27d633fd591066b3da072c2321e9de8a9bce8a0ea0e9eae632ecaf0\",\"moduleSequenceNumber\":30942,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"vitalife\",\"nwo\",\"powerhouse-fitness\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":91,\"hackDifficulty\":91,\"minDifficulty\":30,\"moneyAvailable\":13667451930,\"moneyMax\":341686298250,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1045,\"serverGrowth\":99}},\"4sigma\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"4sigma\",\"httpPortOpen\":false,\"ip\":\"47.1.5.9\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Four Sigma\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"vitalife\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":56,\"hackDifficulty\":56,\"minDifficulty\":19,\"moneyAvailable\":22280133192,\"moneyMax\":557003329800,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":908,\"serverGrowth\":89}},\"kuai-gong\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"kuai-gong\",\"httpPortOpen\":false,\"ip\":\"45.8.1.7\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"KuaiGong International\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"fulcrumtech\",\"blade\",\"clarkinc\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":96,\"hackDifficulty\":96,\"minDifficulty\":32,\"moneyAvailable\":28849160004,\"moneyMax\":721229000100,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1021,\"serverGrowth\":98}},\"fulcrumtech\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"fulcrumtech\",\"httpPortOpen\":true,\"ip\":\"87.6.2.6\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[\"simulated-reality.lit\"],\"organizationName\":\"Fulcrum Technologies\",\"programs\":[],\"ramUsed\":127.75,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omega-net\",73,26575.17767107638,\"9e50cf3b-95af-4e00-a126-34148f69a48a\"],\"dataMap\":{},\"filename\":\"grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":154.20999999999978,\"pid\":1224,\"ramUsage\":1.75,\"server\":\"fulcrumtech\",\"threads\":73,\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///9ce01242-138e-4da8-aa86-35eee3e23c69\",\"moduleSequenceNumber\":32259}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const target = ns.args[0]\\r\\n    const threads = ns.args[1]\\r\\n    const delay = ns.args[2]\\r\\n  \\r\\n    if (delay && delay > 0) {\\r\\n      await ns.sleep(delay)\\r\\n    }\\r\\n  \\r\\n    ns.print(`Starting operation: hack on ${target} in ${threads} threads`)\\r\\n    await ns.hack(target, { threads, stock: true })\\r\\n    ns.exit()\\r\\n  }\\r\\n  \",\"filename\":\"hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:file:///34e0d521-1ffe-43f8-b8ea-769ea64bbfa4\",\"moduleSequenceNumber\":30961}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"fulcrumtech\",\"_hash\":\"4d51de5d68e34b64abafc337497582a9ed6ccdf51fcb55366e3ec23598254bba\",\"moduleSequenceNumber\":30961,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const target = ns.args[0]\\r\\n    const threads = ns.args[1]\\r\\n    const delay = ns.args[2]\\r\\n  \\r\\n    if (delay && delay > 0) {\\r\\n      await ns.sleep(delay)\\r\\n    }\\r\\n  \\r\\n    ns.print(`Starting operation: grow on ${target} in ${threads} threads`)\\r\\n    await ns.grow(target, { threads, stock: true })\\r\\n    ns.exit()\\r\\n  }\\r\\n  \",\"filename\":\"grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///9ce01242-138e-4da8-aa86-35eee3e23c69\",\"moduleSequenceNumber\":32259}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"fulcrumtech\",\"_hash\":\"7c1d1fb4f0c8f7bb72603cc66887138d311d1d62640ec9a93a5d7a6bde532915\",\"moduleSequenceNumber\":32259,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const target = ns.args[0]\\r\\n    const threads = ns.args[1]\\r\\n    const delay = ns.args[2]\\r\\n  \\r\\n    if (delay && delay > 0) {\\r\\n      await ns.sleep(delay)\\r\\n    }\\r\\n  \\r\\n    ns.print(`Starting operation: weaken on ${target} in ${threads} threads`)\\r\\n    await ns.weaken(target, { threads, stock: true })\\r\\n    ns.exit()\\r\\n  }\\r\\n  \",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"fulcrumtech\",\"_hash\":\"e952e94dd27d633fd591066b3da072c2321e9de8a9bce8a0ea0e9eae632ecaf0\",\"moduleSequenceNumber\":30924,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"microdyne\",\"kuai-gong\",\".\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":86,\"hackDifficulty\":86,\"minDifficulty\":29,\"moneyAvailable\":1591211957,\"moneyMax\":39780298925,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1240,\"serverGrowth\":89}},\"fulcrumassets\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"fulcrumassets\",\"httpPortOpen\":false,\"ip\":\"71.5.2.2\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Fulcrum Technologies\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"nwo\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":99,\"hackDifficulty\":99,\"minDifficulty\":33,\"moneyAvailable\":1000000,\"moneyMax\":25000000,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1363,\"serverGrowth\":1}},\"stormtech\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"stormtech\",\"httpPortOpen\":false,\"ip\":\"59.5.0.5\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Storm Technologies\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"run4theh111z\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":78,\"hackDifficulty\":78,\"minDifficulty\":26,\"moneyAvailable\":1049592677,\"moneyMax\":26239816925,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":929,\"serverGrowth\":74}},\"defcomm\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"defcomm\",\"httpPortOpen\":false,\"ip\":\"1.8.6.3\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"DefComm\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"deltaone\",\"nova-med\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":84,\"hackDifficulty\":84,\"minDifficulty\":28,\"moneyAvailable\":859288267,\"moneyMax\":21482206675,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":875,\"serverGrowth\":61}},\"infocomm\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"infocomm\",\"httpPortOpen\":false,\"ip\":\"95.7.3.1\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"InfoComm\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"icarus\",\"microdyne\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":89,\"hackDifficulty\":89,\"minDifficulty\":30,\"moneyAvailable\":690515848,\"moneyMax\":17262896200,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":926,\"serverGrowth\":51}},\"helios\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"helios\",\"httpPortOpen\":true,\"ip\":\"76.6.9.9\",\"isConnectedTo\":false,\"maxRam\":256,\"messages\":[\"beyond-man.lit\"],\"organizationName\":\"Helios Labs\",\"programs\":[],\"ramUsed\":255.5,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omega-net\",146,26575.17767107638,\"3effa7c6-8dd6-4bbb-91dc-d131a9ba4861\"],\"dataMap\":{},\"filename\":\"grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":154.20999999999978,\"pid\":1228,\"ramUsage\":1.75,\"server\":\"helios\",\"threads\":146,\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///9ce01242-138e-4da8-aa86-35eee3e23c69\",\"moduleSequenceNumber\":32262}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const target = ns.args[0]\\r\\n    const threads = ns.args[1]\\r\\n    const delay = ns.args[2]\\r\\n  \\r\\n    if (delay && delay > 0) {\\r\\n      await ns.sleep(delay)\\r\\n    }\\r\\n  \\r\\n    ns.print(`Starting operation: hack on ${target} in ${threads} threads`)\\r\\n    await ns.hack(target, { threads, stock: true })\\r\\n    ns.exit()\\r\\n  }\\r\\n  \",\"filename\":\"hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:file:///34e0d521-1ffe-43f8-b8ea-769ea64bbfa4\",\"moduleSequenceNumber\":30964}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"helios\",\"_hash\":\"4d51de5d68e34b64abafc337497582a9ed6ccdf51fcb55366e3ec23598254bba\",\"moduleSequenceNumber\":30964,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const target = ns.args[0]\\r\\n    const threads = ns.args[1]\\r\\n    const delay = ns.args[2]\\r\\n  \\r\\n    if (delay && delay > 0) {\\r\\n      await ns.sleep(delay)\\r\\n    }\\r\\n  \\r\\n    ns.print(`Starting operation: grow on ${target} in ${threads} threads`)\\r\\n    await ns.grow(target, { threads, stock: true })\\r\\n    ns.exit()\\r\\n  }\\r\\n  \",\"filename\":\"grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///9ce01242-138e-4da8-aa86-35eee3e23c69\",\"moduleSequenceNumber\":32262}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"helios\",\"_hash\":\"7c1d1fb4f0c8f7bb72603cc66887138d311d1d62640ec9a93a5d7a6bde532915\",\"moduleSequenceNumber\":32262,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const target = ns.args[0]\\r\\n    const threads = ns.args[1]\\r\\n    const delay = ns.args[2]\\r\\n  \\r\\n    if (delay && delay > 0) {\\r\\n      await ns.sleep(delay)\\r\\n    }\\r\\n  \\r\\n    ns.print(`Starting operation: weaken on ${target} in ${threads} threads`)\\r\\n    await ns.weaken(target, { threads, stock: true })\\r\\n    ns.exit()\\r\\n  }\\r\\n  \",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"helios\",\"_hash\":\"e952e94dd27d633fd591066b3da072c2321e9de8a9bce8a0ea0e9eae632ecaf0\",\"moduleSequenceNumber\":30936,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"applied-energetics\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":87,\"hackDifficulty\":87,\"minDifficulty\":29,\"moneyAvailable\":672527727,\"moneyMax\":16813193175,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":883,\"serverGrowth\":72}},\"vitalife\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"vitalife\",\"httpPortOpen\":true,\"ip\":\"46.7.9.1\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[\"A-Green-Tomorrow.lit\"],\"organizationName\":\"VitaLife\",\"programs\":[],\"ramUsed\":127.75,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omega-net\",73,26575.17767107638,\"625d8229-60b3-46d2-9926-1bc4328ec7b2\"],\"dataMap\":{},\"filename\":\"grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":154.20999999999978,\"pid\":1225,\"ramUsage\":1.75,\"server\":\"vitalife\",\"threads\":73,\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///9ce01242-138e-4da8-aa86-35eee3e23c69\",\"moduleSequenceNumber\":32260}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const target = ns.args[0]\\r\\n    const threads = ns.args[1]\\r\\n    const delay = ns.args[2]\\r\\n  \\r\\n    if (delay && delay > 0) {\\r\\n      await ns.sleep(delay)\\r\\n    }\\r\\n  \\r\\n    ns.print(`Starting operation: hack on ${target} in ${threads} threads`)\\r\\n    await ns.hack(target, { threads, stock: true })\\r\\n    ns.exit()\\r\\n  }\\r\\n  \",\"filename\":\"hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:file:///34e0d521-1ffe-43f8-b8ea-769ea64bbfa4\",\"moduleSequenceNumber\":30962}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"vitalife\",\"_hash\":\"4d51de5d68e34b64abafc337497582a9ed6ccdf51fcb55366e3ec23598254bba\",\"moduleSequenceNumber\":30962,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const target = ns.args[0]\\r\\n    const threads = ns.args[1]\\r\\n    const delay = ns.args[2]\\r\\n  \\r\\n    if (delay && delay > 0) {\\r\\n      await ns.sleep(delay)\\r\\n    }\\r\\n  \\r\\n    ns.print(`Starting operation: grow on ${target} in ${threads} threads`)\\r\\n    await ns.grow(target, { threads, stock: true })\\r\\n    ns.exit()\\r\\n  }\\r\\n  \",\"filename\":\"grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///9ce01242-138e-4da8-aa86-35eee3e23c69\",\"moduleSequenceNumber\":32260}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"vitalife\",\"_hash\":\"7c1d1fb4f0c8f7bb72603cc66887138d311d1d62640ec9a93a5d7a6bde532915\",\"moduleSequenceNumber\":32260,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const target = ns.args[0]\\r\\n    const threads = ns.args[1]\\r\\n    const delay = ns.args[2]\\r\\n  \\r\\n    if (delay && delay > 0) {\\r\\n      await ns.sleep(delay)\\r\\n    }\\r\\n  \\r\\n    ns.print(`Starting operation: weaken on ${target} in ${threads} threads`)\\r\\n    await ns.weaken(target, { threads, stock: true })\\r\\n    ns.exit()\\r\\n  }\\r\\n  \",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"vitalife\",\"_hash\":\"e952e94dd27d633fd591066b3da072c2321e9de8a9bce8a0ea0e9eae632ecaf0\",\"moduleSequenceNumber\":30930,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"microdyne\",\"omnitek\",\"4sigma\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":84,\"hackDifficulty\":84,\"minDifficulty\":28,\"moneyAvailable\":709827190,\"moneyMax\":17745679750,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":898,\"serverGrowth\":65}},\"icarus\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"icarus\",\"httpPortOpen\":false,\"ip\":\"25.0.7.5\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Icarus Microsystems\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"unitalife\",\"infocomm\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":89,\"hackDifficulty\":89,\"minDifficulty\":30,\"moneyAvailable\":962441867,\"moneyMax\":24061046675,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":855,\"serverGrowth\":85}},\"univ-energy\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"univ-energy\",\"httpPortOpen\":true,\"ip\":\"71.3.6.9\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[],\"organizationName\":\"Universal Energy\",\"programs\":[],\"ramUsed\":127.75,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omega-net\",73,26575.17767107638,\"bb2fea15-9283-4bda-9167-6f64dfac306e\"],\"dataMap\":{},\"filename\":\"grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":154.20999999999978,\"pid\":1223,\"ramUsage\":1.75,\"server\":\"univ-energy\",\"threads\":73,\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///9ce01242-138e-4da8-aa86-35eee3e23c69\",\"moduleSequenceNumber\":26133}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const target = ns.args[0]\\r\\n    const threads = ns.args[1]\\r\\n    const delay = ns.args[2]\\r\\n  \\r\\n    if (delay && delay > 0) {\\r\\n      await ns.sleep(delay)\\r\\n    }\\r\\n  \\r\\n    ns.print(`Starting operation: hack on ${target} in ${threads} threads`)\\r\\n    await ns.hack(target, { threads, stock: true })\\r\\n    ns.exit()\\r\\n  }\\r\\n  \",\"filename\":\"hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:file:///34e0d521-1ffe-43f8-b8ea-769ea64bbfa4\",\"moduleSequenceNumber\":29127}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"univ-energy\",\"_hash\":\"4d51de5d68e34b64abafc337497582a9ed6ccdf51fcb55366e3ec23598254bba\",\"moduleSequenceNumber\":29127,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const target = ns.args[0]\\r\\n    const threads = ns.args[1]\\r\\n    const delay = ns.args[2]\\r\\n  \\r\\n    if (delay && delay > 0) {\\r\\n      await ns.sleep(delay)\\r\\n    }\\r\\n  \\r\\n    ns.print(`Starting operation: grow on ${target} in ${threads} threads`)\\r\\n    await ns.grow(target, { threads, stock: true })\\r\\n    ns.exit()\\r\\n  }\\r\\n  \",\"filename\":\"grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///9ce01242-138e-4da8-aa86-35eee3e23c69\",\"moduleSequenceNumber\":26133}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"univ-energy\",\"_hash\":\"7c1d1fb4f0c8f7bb72603cc66887138d311d1d62640ec9a93a5d7a6bde532915\",\"moduleSequenceNumber\":26133,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const target = ns.args[0]\\r\\n    const threads = ns.args[1]\\r\\n    const delay = ns.args[2]\\r\\n  \\r\\n    if (delay && delay > 0) {\\r\\n      await ns.sleep(delay)\\r\\n    }\\r\\n  \\r\\n    ns.print(`Starting operation: weaken on ${target} in ${threads} threads`)\\r\\n    await ns.weaken(target, { threads, stock: true })\\r\\n    ns.exit()\\r\\n  }\\r\\n  \",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"univ-energy\",\"_hash\":\"e952e94dd27d633fd591066b3da072c2321e9de8a9bce8a0ea0e9eae632ecaf0\",\"moduleSequenceNumber\":26114,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"omnia\",\"taiyang-digital\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":81,\"hackDifficulty\":81,\"minDifficulty\":27,\"moneyAvailable\":1183723441,\"moneyMax\":29593086025,\"numOpenPortsRequired\":4,\"openPortCount\":4,\"requiredHackingSkill\":831,\"serverGrowth\":83}},\"titan-labs\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"titan-labs\",\"httpPortOpen\":true,\"ip\":\"58.8.1.3\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"coded-intelligence.lit\"],\"organizationName\":\"Titan Laboratories\",\"programs\":[],\"ramUsed\":31.5,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omega-net\",18,26575.17767107638,\"48e576ac-cfe9-4799-8375-6b89f71164f8\"],\"dataMap\":{},\"filename\":\"grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":154.20999999999978,\"pid\":1212,\"ramUsage\":1.75,\"server\":\"titan-labs\",\"threads\":18,\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///9ce01242-138e-4da8-aa86-35eee3e23c69\",\"moduleSequenceNumber\":32254}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const target = ns.args[0]\\r\\n    const threads = ns.args[1]\\r\\n    const delay = ns.args[2]\\r\\n  \\r\\n    if (delay && delay > 0) {\\r\\n      await ns.sleep(delay)\\r\\n    }\\r\\n  \\r\\n    ns.print(`Starting operation: hack on ${target} in ${threads} threads`)\\r\\n    await ns.hack(target, { threads, stock: true })\\r\\n    ns.exit()\\r\\n  }\\r\\n  \",\"filename\":\"hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:file:///34e0d521-1ffe-43f8-b8ea-769ea64bbfa4\",\"moduleSequenceNumber\":30956}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"titan-labs\",\"_hash\":\"4d51de5d68e34b64abafc337497582a9ed6ccdf51fcb55366e3ec23598254bba\",\"moduleSequenceNumber\":30956,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const target = ns.args[0]\\r\\n    const threads = ns.args[1]\\r\\n    const delay = ns.args[2]\\r\\n  \\r\\n    if (delay && delay > 0) {\\r\\n      await ns.sleep(delay)\\r\\n    }\\r\\n  \\r\\n    ns.print(`Starting operation: grow on ${target} in ${threads} threads`)\\r\\n    await ns.grow(target, { threads, stock: true })\\r\\n    ns.exit()\\r\\n  }\\r\\n  \",\"filename\":\"grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///9ce01242-138e-4da8-aa86-35eee3e23c69\",\"moduleSequenceNumber\":32254}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"titan-labs\",\"_hash\":\"7c1d1fb4f0c8f7bb72603cc66887138d311d1d62640ec9a93a5d7a6bde532915\",\"moduleSequenceNumber\":32254,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const target = ns.args[0]\\r\\n    const threads = ns.args[1]\\r\\n    const delay = ns.args[2]\\r\\n  \\r\\n    if (delay && delay > 0) {\\r\\n      await ns.sleep(delay)\\r\\n    }\\r\\n  \\r\\n    ns.print(`Starting operation: weaken on ${target} in ${threads} threads`)\\r\\n    await ns.weaken(target, { threads, stock: true })\\r\\n    ns.exit()\\r\\n  }\\r\\n  \",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"titan-labs\",\"_hash\":\"e952e94dd27d633fd591066b3da072c2321e9de8a9bce8a0ea0e9eae632ecaf0\",\"moduleSequenceNumber\":30912,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"nova-med\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":71,\"hackDifficulty\":71,\"minDifficulty\":24,\"moneyAvailable\":864284881,\"moneyMax\":21607122025,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":802,\"serverGrowth\":72}},\"microdyne\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"microdyne\",\"httpPortOpen\":true,\"ip\":\"71.9.4.7\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"synthetic-muscles.lit\"],\"organizationName\":\"Microdyne Technologies\",\"programs\":[],\"ramUsed\":31.5,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omega-net\",18,26575.17767107638,\"9ed86ffc-0f4a-4778-9997-d07245072142\"],\"dataMap\":{},\"filename\":\"grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":154.20999999999978,\"pid\":1213,\"ramUsage\":1.75,\"server\":\"microdyne\",\"threads\":18,\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///9ce01242-138e-4da8-aa86-35eee3e23c69\",\"moduleSequenceNumber\":32255}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const target = ns.args[0]\\r\\n    const threads = ns.args[1]\\r\\n    const delay = ns.args[2]\\r\\n  \\r\\n    if (delay && delay > 0) {\\r\\n      await ns.sleep(delay)\\r\\n    }\\r\\n  \\r\\n    ns.print(`Starting operation: hack on ${target} in ${threads} threads`)\\r\\n    await ns.hack(target, { threads, stock: true })\\r\\n    ns.exit()\\r\\n  }\\r\\n  \",\"filename\":\"hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:file:///34e0d521-1ffe-43f8-b8ea-769ea64bbfa4\",\"moduleSequenceNumber\":30957}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"microdyne\",\"_hash\":\"4d51de5d68e34b64abafc337497582a9ed6ccdf51fcb55366e3ec23598254bba\",\"moduleSequenceNumber\":30957,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const target = ns.args[0]\\r\\n    const threads = ns.args[1]\\r\\n    const delay = ns.args[2]\\r\\n  \\r\\n    if (delay && delay > 0) {\\r\\n      await ns.sleep(delay)\\r\\n    }\\r\\n  \\r\\n    ns.print(`Starting operation: grow on ${target} in ${threads} threads`)\\r\\n    await ns.grow(target, { threads, stock: true })\\r\\n    ns.exit()\\r\\n  }\\r\\n  \",\"filename\":\"grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///9ce01242-138e-4da8-aa86-35eee3e23c69\",\"moduleSequenceNumber\":32255}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"microdyne\",\"_hash\":\"7c1d1fb4f0c8f7bb72603cc66887138d311d1d62640ec9a93a5d7a6bde532915\",\"moduleSequenceNumber\":32255,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const target = ns.args[0]\\r\\n    const threads = ns.args[1]\\r\\n    const delay = ns.args[2]\\r\\n  \\r\\n    if (delay && delay > 0) {\\r\\n      await ns.sleep(delay)\\r\\n    }\\r\\n  \\r\\n    ns.print(`Starting operation: weaken on ${target} in ${threads} threads`)\\r\\n    await ns.weaken(target, { threads, stock: true })\\r\\n    ns.exit()\\r\\n  }\\r\\n  \",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"microdyne\",\"_hash\":\"e952e94dd27d633fd591066b3da072c2321e9de8a9bce8a0ea0e9eae632ecaf0\",\"moduleSequenceNumber\":30918,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"infocomm\",\"fulcrumtech\",\"vitalife\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":68,\"hackDifficulty\":68,\"minDifficulty\":23,\"moneyAvailable\":697624536,\"moneyMax\":17440613400,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":812,\"serverGrowth\":82}},\"taiyang-digital\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"taiyang-digital\",\"httpPortOpen\":false,\"ip\":\"44.2.5.5\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"A-Green-Tomorrow.lit\",\"brighter-than-the-sun.lit\"],\"organizationName\":\"Taiyang Digital\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"univ-energy\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":73,\"hackDifficulty\":73,\"minDifficulty\":24,\"moneyAvailable\":825548905,\"moneyMax\":20638722625,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":922,\"serverGrowth\":76}},\"galactic-cyber\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"galactic-cyber\",\"httpPortOpen\":false,\"ip\":\"12.2.6.4\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Galactic Cybersystems\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"alpha-ent\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":60,\"hackDifficulty\":60,\"minDifficulty\":20,\"moneyAvailable\":766883722,\"moneyMax\":19172093050,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":831,\"serverGrowth\":86}},\"aerocorp\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"aerocorp\",\"httpPortOpen\":false,\"ip\":\"79.6.1.1\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"man-and-machine.lit\"],\"organizationName\":\"AeroCorp\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"millenium-fitness\",\"omnia\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":84,\"hackDifficulty\":84,\"minDifficulty\":28,\"moneyAvailable\":1076899484,\"moneyMax\":26922487100,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":876,\"serverGrowth\":58}},\"omnia\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"omnia\",\"httpPortOpen\":true,\"ip\":\"28.6.0.5\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"history-of-synthoids.lit\"],\"organizationName\":\"Omnia Cybersystems\",\"programs\":[],\"ramUsed\":63,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omega-net\",36,26575.17767107638,\"33727169-ec09-403c-8173-1709a08de352\"],\"dataMap\":{},\"filename\":\"grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":154.20999999999978,\"pid\":1219,\"ramUsage\":1.75,\"server\":\"omnia\",\"threads\":36,\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///9ce01242-138e-4da8-aa86-35eee3e23c69\",\"moduleSequenceNumber\":32257}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const target = ns.args[0]\\r\\n    const threads = ns.args[1]\\r\\n    const delay = ns.args[2]\\r\\n  \\r\\n    if (delay && delay > 0) {\\r\\n      await ns.sleep(delay)\\r\\n    }\\r\\n  \\r\\n    ns.print(`Starting operation: hack on ${target} in ${threads} threads`)\\r\\n    await ns.hack(target, { threads, stock: true })\\r\\n    ns.exit()\\r\\n  }\\r\\n  \",\"filename\":\"hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:file:///34e0d521-1ffe-43f8-b8ea-769ea64bbfa4\",\"moduleSequenceNumber\":30959}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"omnia\",\"_hash\":\"4d51de5d68e34b64abafc337497582a9ed6ccdf51fcb55366e3ec23598254bba\",\"moduleSequenceNumber\":30959,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const target = ns.args[0]\\r\\n    const threads = ns.args[1]\\r\\n    const delay = ns.args[2]\\r\\n  \\r\\n    if (delay && delay > 0) {\\r\\n      await ns.sleep(delay)\\r\\n    }\\r\\n  \\r\\n    ns.print(`Starting operation: grow on ${target} in ${threads} threads`)\\r\\n    await ns.grow(target, { threads, stock: true })\\r\\n    ns.exit()\\r\\n  }\\r\\n  \",\"filename\":\"grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///9ce01242-138e-4da8-aa86-35eee3e23c69\",\"moduleSequenceNumber\":32257}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"omnia\",\"_hash\":\"7c1d1fb4f0c8f7bb72603cc66887138d311d1d62640ec9a93a5d7a6bde532915\",\"moduleSequenceNumber\":32257,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const target = ns.args[0]\\r\\n    const threads = ns.args[1]\\r\\n    const delay = ns.args[2]\\r\\n  \\r\\n    if (delay && delay > 0) {\\r\\n      await ns.sleep(delay)\\r\\n    }\\r\\n  \\r\\n    ns.print(`Starting operation: weaken on ${target} in ${threads} threads`)\\r\\n    await ns.weaken(target, { threads, stock: true })\\r\\n    ns.exit()\\r\\n  }\\r\\n  \",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"omnia\",\"_hash\":\"e952e94dd27d633fd591066b3da072c2321e9de8a9bce8a0ea0e9eae632ecaf0\",\"moduleSequenceNumber\":30900,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"aerocorp\",\"univ-energy\",\"zeus-med\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":85,\"hackDifficulty\":85,\"minDifficulty\":28,\"moneyAvailable\":994640233,\"moneyMax\":24866005825,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":942,\"serverGrowth\":63}},\"zb-def\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"zb-def\",\"httpPortOpen\":false,\"ip\":\"70.3.2.4\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"synthetic-muscles.lit\"],\"organizationName\":\"ZB Defense Industries\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"zeus-med\",\"applied-energetics\",\"run4theh111z\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":56,\"hackDifficulty\":56,\"minDifficulty\":19,\"moneyAvailable\":994666722,\"moneyMax\":24866668050,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":817,\"serverGrowth\":65}},\"applied-energetics\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"applied-energetics\",\"httpPortOpen\":false,\"ip\":\"30.7.8.3\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Applied Energetics\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"zb-def\",\"helios\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":67,\"hackDifficulty\":67,\"minDifficulty\":22,\"moneyAvailable\":715998447,\"moneyMax\":17899961175,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":850,\"serverGrowth\":72}},\"solaris\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"solaris\",\"httpPortOpen\":true,\"ip\":\"94.1.2.6\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"A-Green-Tomorrow.lit\",\"the-failed-frontier.lit\"],\"organizationName\":\"Solaris Space Systems\",\"programs\":[],\"ramUsed\":15.75,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omega-net\",9,26575.17767107638,\"f352629f-9b7e-4145-b819-ae9937d4beaa\"],\"dataMap\":{},\"filename\":\"grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":154.20999999999978,\"pid\":1198,\"ramUsage\":1.75,\"server\":\"solaris\",\"threads\":9,\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///9ce01242-138e-4da8-aa86-35eee3e23c69\",\"moduleSequenceNumber\":32253}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const target = ns.args[0]\\r\\n    const threads = ns.args[1]\\r\\n    const delay = ns.args[2]\\r\\n  \\r\\n    if (delay && delay > 0) {\\r\\n      await ns.sleep(delay)\\r\\n    }\\r\\n  \\r\\n    ns.print(`Starting operation: hack on ${target} in ${threads} threads`)\\r\\n    await ns.hack(target, { threads, stock: true })\\r\\n    ns.exit()\\r\\n  }\\r\\n  \",\"filename\":\"hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:file:///34e0d521-1ffe-43f8-b8ea-769ea64bbfa4\",\"moduleSequenceNumber\":30955}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"solaris\",\"_hash\":\"4d51de5d68e34b64abafc337497582a9ed6ccdf51fcb55366e3ec23598254bba\",\"moduleSequenceNumber\":30955,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const target = ns.args[0]\\r\\n    const threads = ns.args[1]\\r\\n    const delay = ns.args[2]\\r\\n  \\r\\n    if (delay && delay > 0) {\\r\\n      await ns.sleep(delay)\\r\\n    }\\r\\n  \\r\\n    ns.print(`Starting operation: grow on ${target} in ${threads} threads`)\\r\\n    await ns.grow(target, { threads, stock: true })\\r\\n    ns.exit()\\r\\n  }\\r\\n  \",\"filename\":\"grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///9ce01242-138e-4da8-aa86-35eee3e23c69\",\"moduleSequenceNumber\":32253}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"solaris\",\"_hash\":\"7c1d1fb4f0c8f7bb72603cc66887138d311d1d62640ec9a93a5d7a6bde532915\",\"moduleSequenceNumber\":32253,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const target = ns.args[0]\\r\\n    const threads = ns.args[1]\\r\\n    const delay = ns.args[2]\\r\\n  \\r\\n    if (delay && delay > 0) {\\r\\n      await ns.sleep(delay)\\r\\n    }\\r\\n  \\r\\n    ns.print(`Starting operation: weaken on ${target} in ${threads} threads`)\\r\\n    await ns.weaken(target, { threads, stock: true })\\r\\n    ns.exit()\\r\\n  }\\r\\n  \",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"solaris\",\"_hash\":\"e952e94dd27d633fd591066b3da072c2321e9de8a9bce8a0ea0e9eae632ecaf0\",\"moduleSequenceNumber\":30906,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"unitalife\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":78,\"hackDifficulty\":78,\"minDifficulty\":26,\"moneyAvailable\":732594870,\"moneyMax\":18314871750,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":784,\"serverGrowth\":78}},\"deltaone\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"deltaone\",\"httpPortOpen\":false,\"ip\":\"2.4.5.2\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"DeltaOne\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"snap-fitness\",\"defcomm\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":76,\"hackDifficulty\":76,\"minDifficulty\":25,\"moneyAvailable\":1393272177,\"moneyMax\":34831804425,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":836,\"serverGrowth\":58}},\"global-pharm\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"global-pharm\",\"httpPortOpen\":true,\"ip\":\"18.0.9.6\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"A-Green-Tomorrow.lit\"],\"organizationName\":\"Global Pharmaceuticals\",\"programs\":[],\"ramUsed\":15.75,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omega-net\",9,26575.17767107638,\"9c89a0f7-4442-4c86-91b9-3a76869c78af\"],\"dataMap\":{},\"filename\":\"grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":154.20999999999978,\"pid\":1197,\"ramUsage\":1.75,\"server\":\"global-pharm\",\"threads\":9,\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///9ce01242-138e-4da8-aa86-35eee3e23c69\",\"moduleSequenceNumber\":26128}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const target = ns.args[0]\\r\\n    const threads = ns.args[1]\\r\\n    const delay = ns.args[2]\\r\\n  \\r\\n    if (delay && delay > 0) {\\r\\n      await ns.sleep(delay)\\r\\n    }\\r\\n  \\r\\n    ns.print(`Starting operation: hack on ${target} in ${threads} threads`)\\r\\n    await ns.hack(target, { threads, stock: true })\\r\\n    ns.exit()\\r\\n  }\\r\\n  \",\"filename\":\"hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:file:///34e0d521-1ffe-43f8-b8ea-769ea64bbfa4\",\"moduleSequenceNumber\":29111}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"global-pharm\",\"_hash\":\"4d51de5d68e34b64abafc337497582a9ed6ccdf51fcb55366e3ec23598254bba\",\"moduleSequenceNumber\":29111,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const target = ns.args[0]\\r\\n    const threads = ns.args[1]\\r\\n    const delay = ns.args[2]\\r\\n  \\r\\n    if (delay && delay > 0) {\\r\\n      await ns.sleep(delay)\\r\\n    }\\r\\n  \\r\\n    ns.print(`Starting operation: grow on ${target} in ${threads} threads`)\\r\\n    await ns.grow(target, { threads, stock: true })\\r\\n    ns.exit()\\r\\n  }\\r\\n  \",\"filename\":\"grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///9ce01242-138e-4da8-aa86-35eee3e23c69\",\"moduleSequenceNumber\":26128}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"global-pharm\",\"_hash\":\"7c1d1fb4f0c8f7bb72603cc66887138d311d1d62640ec9a93a5d7a6bde532915\",\"moduleSequenceNumber\":26128,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const target = ns.args[0]\\r\\n    const threads = ns.args[1]\\r\\n    const delay = ns.args[2]\\r\\n  \\r\\n    if (delay && delay > 0) {\\r\\n      await ns.sleep(delay)\\r\\n    }\\r\\n  \\r\\n    ns.print(`Starting operation: weaken on ${target} in ${threads} threads`)\\r\\n    await ns.weaken(target, { threads, stock: true })\\r\\n    ns.exit()\\r\\n  }\\r\\n  \",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"global-pharm\",\"_hash\":\"e952e94dd27d633fd591066b3da072c2321e9de8a9bce8a0ea0e9eae632ecaf0\",\"moduleSequenceNumber\":26102,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"alpha-ent\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":85,\"hackDifficulty\":85,\"minDifficulty\":28,\"moneyAvailable\":1745379431,\"moneyMax\":43634485775,\"numOpenPortsRequired\":4,\"openPortCount\":4,\"requiredHackingSkill\":759,\"serverGrowth\":82}},\"nova-med\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"nova-med\",\"httpPortOpen\":false,\"ip\":\"11.8.9.7\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Nova Medical\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"defcomm\",\"titan-labs\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":60,\"hackDifficulty\":60,\"minDifficulty\":20,\"moneyAvailable\":1103749848,\"moneyMax\":27593746200,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":809,\"serverGrowth\":67}},\"zeus-med\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"zeus-med\",\"httpPortOpen\":false,\"ip\":\"52.7.1.8\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Zeus Medical\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"omnia\",\"zb-def\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":74,\"hackDifficulty\":74,\"minDifficulty\":25,\"moneyAvailable\":1466580180,\"moneyMax\":36664504500,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":836,\"serverGrowth\":76}},\"unitalife\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"unitalife\",\"httpPortOpen\":true,\"ip\":\"32.6.2.5\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[],\"organizationName\":\"UnitaLife Group\",\"programs\":[],\"ramUsed\":63,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omega-net\",36,26575.17767107638,\"92162198-fd8b-4578-b3bc-d8e5e7423c30\"],\"dataMap\":{},\"filename\":\"grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":154.20999999999978,\"pid\":1218,\"ramUsage\":1.75,\"server\":\"unitalife\",\"threads\":36,\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///9ce01242-138e-4da8-aa86-35eee3e23c69\",\"moduleSequenceNumber\":26131}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const target = ns.args[0]\\r\\n    const threads = ns.args[1]\\r\\n    const delay = ns.args[2]\\r\\n  \\r\\n    if (delay && delay > 0) {\\r\\n      await ns.sleep(delay)\\r\\n    }\\r\\n  \\r\\n    ns.print(`Starting operation: hack on ${target} in ${threads} threads`)\\r\\n    await ns.hack(target, { threads, stock: true })\\r\\n    ns.exit()\\r\\n  }\\r\\n  \",\"filename\":\"hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:file:///34e0d521-1ffe-43f8-b8ea-769ea64bbfa4\",\"moduleSequenceNumber\":29124}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"unitalife\",\"_hash\":\"4d51de5d68e34b64abafc337497582a9ed6ccdf51fcb55366e3ec23598254bba\",\"moduleSequenceNumber\":29124,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const target = ns.args[0]\\r\\n    const threads = ns.args[1]\\r\\n    const delay = ns.args[2]\\r\\n  \\r\\n    if (delay && delay > 0) {\\r\\n      await ns.sleep(delay)\\r\\n    }\\r\\n  \\r\\n    ns.print(`Starting operation: grow on ${target} in ${threads} threads`)\\r\\n    await ns.grow(target, { threads, stock: true })\\r\\n    ns.exit()\\r\\n  }\\r\\n  \",\"filename\":\"grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///9ce01242-138e-4da8-aa86-35eee3e23c69\",\"moduleSequenceNumber\":26131}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"unitalife\",\"_hash\":\"7c1d1fb4f0c8f7bb72603cc66887138d311d1d62640ec9a93a5d7a6bde532915\",\"moduleSequenceNumber\":26131,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const target = ns.args[0]\\r\\n    const threads = ns.args[1]\\r\\n    const delay = ns.args[2]\\r\\n  \\r\\n    if (delay && delay > 0) {\\r\\n      await ns.sleep(delay)\\r\\n    }\\r\\n  \\r\\n    ns.print(`Starting operation: weaken on ${target} in ${threads} threads`)\\r\\n    await ns.weaken(target, { threads, stock: true })\\r\\n    ns.exit()\\r\\n  }\\r\\n  \",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"unitalife\",\"_hash\":\"e952e94dd27d633fd591066b3da072c2321e9de8a9bce8a0ea0e9eae632ecaf0\",\"moduleSequenceNumber\":26108,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"snap-fitness\",\"icarus\",\"solaris\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":72,\"hackDifficulty\":72,\"minDifficulty\":24,\"moneyAvailable\":1064090147,\"moneyMax\":26602253675,\"numOpenPortsRequired\":4,\"openPortCount\":4,\"requiredHackingSkill\":800,\"serverGrowth\":77}},\"lexo-corp\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"lexo-corp\",\"httpPortOpen\":true,\"ip\":\"37.1.3.9\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"LexoCorp\",\"programs\":[],\"ramUsed\":15.75,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omega-net\",9,26575.17767107638,\"096c9067-ec3e-49ff-91a5-28c5cf3eb117\"],\"dataMap\":{},\"filename\":\"grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":154.20999999999978,\"pid\":1196,\"ramUsage\":1.75,\"server\":\"lexo-corp\",\"threads\":9,\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///9ce01242-138e-4da8-aa86-35eee3e23c69\",\"moduleSequenceNumber\":26127}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const target = ns.args[0]\\r\\n    const threads = ns.args[1]\\r\\n    const delay = ns.args[2]\\r\\n  \\r\\n    if (delay && delay > 0) {\\r\\n      await ns.sleep(delay)\\r\\n    }\\r\\n  \\r\\n    ns.print(`Starting operation: hack on ${target} in ${threads} threads`)\\r\\n    await ns.hack(target, { threads, stock: true })\\r\\n    ns.exit()\\r\\n  }\\r\\n  \",\"filename\":\"hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:file:///34e0d521-1ffe-43f8-b8ea-769ea64bbfa4\",\"moduleSequenceNumber\":29110}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"lexo-corp\",\"_hash\":\"4d51de5d68e34b64abafc337497582a9ed6ccdf51fcb55366e3ec23598254bba\",\"moduleSequenceNumber\":29110,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const target = ns.args[0]\\r\\n    const threads = ns.args[1]\\r\\n    const delay = ns.args[2]\\r\\n  \\r\\n    if (delay && delay > 0) {\\r\\n      await ns.sleep(delay)\\r\\n    }\\r\\n  \\r\\n    ns.print(`Starting operation: grow on ${target} in ${threads} threads`)\\r\\n    await ns.grow(target, { threads, stock: true })\\r\\n    ns.exit()\\r\\n  }\\r\\n  \",\"filename\":\"grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///9ce01242-138e-4da8-aa86-35eee3e23c69\",\"moduleSequenceNumber\":26127}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"lexo-corp\",\"_hash\":\"7c1d1fb4f0c8f7bb72603cc66887138d311d1d62640ec9a93a5d7a6bde532915\",\"moduleSequenceNumber\":26127,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const target = ns.args[0]\\r\\n    const threads = ns.args[1]\\r\\n    const delay = ns.args[2]\\r\\n  \\r\\n    if (delay && delay > 0) {\\r\\n      await ns.sleep(delay)\\r\\n    }\\r\\n  \\r\\n    ns.print(`Starting operation: weaken on ${target} in ${threads} threads`)\\r\\n    await ns.weaken(target, { threads, stock: true })\\r\\n    ns.exit()\\r\\n  }\\r\\n  \",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"lexo-corp\",\"_hash\":\"e952e94dd27d633fd591066b3da072c2321e9de8a9bce8a0ea0e9eae632ecaf0\",\"moduleSequenceNumber\":26096,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"I.I.I.I\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":71,\"hackDifficulty\":71,\"minDifficulty\":24,\"moneyAvailable\":740569208,\"moneyMax\":18514230200,\"numOpenPortsRequired\":4,\"openPortCount\":4,\"requiredHackingSkill\":653,\"serverGrowth\":62}},\"rho-construction\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"rho-construction\",\"httpPortOpen\":false,\"ip\":\"60.7.3.2\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Rho Construction\",\"programs\":[],\"ramUsed\":31.5,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omega-net\",18,26575.17767107638,\"5383904b-2928-4e91-997a-651f75c779ca\"],\"dataMap\":{},\"filename\":\"grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":154.20999999999978,\"pid\":1210,\"ramUsage\":1.75,\"server\":\"rho-construction\",\"threads\":18,\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///9ce01242-138e-4da8-aa86-35eee3e23c69\",\"moduleSequenceNumber\":23836}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const target = ns.args[0]\\r\\n    const threads = ns.args[1]\\r\\n    const delay = ns.args[2]\\r\\n  \\r\\n    if (delay && delay > 0) {\\r\\n      await ns.sleep(delay)\\r\\n    }\\r\\n  \\r\\n    ns.print(`Starting operation: hack on ${target} in ${threads} threads`)\\r\\n    await ns.hack(target, { threads, stock: true })\\r\\n    ns.exit()\\r\\n  }\\r\\n  \",\"filename\":\"hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:file:///34e0d521-1ffe-43f8-b8ea-769ea64bbfa4\",\"moduleSequenceNumber\":29119}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"rho-construction\",\"_hash\":\"4d51de5d68e34b64abafc337497582a9ed6ccdf51fcb55366e3ec23598254bba\",\"moduleSequenceNumber\":29119,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const target = ns.args[0]\\r\\n    const threads = ns.args[1]\\r\\n    const delay = ns.args[2]\\r\\n  \\r\\n    if (delay && delay > 0) {\\r\\n      await ns.sleep(delay)\\r\\n    }\\r\\n  \\r\\n    ns.print(`Starting operation: grow on ${target} in ${threads} threads`)\\r\\n    await ns.grow(target, { threads, stock: true })\\r\\n    ns.exit()\\r\\n  }\\r\\n  \",\"filename\":\"grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///9ce01242-138e-4da8-aa86-35eee3e23c69\",\"moduleSequenceNumber\":23836}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"rho-construction\",\"_hash\":\"7c1d1fb4f0c8f7bb72603cc66887138d311d1d62640ec9a93a5d7a6bde532915\",\"moduleSequenceNumber\":23836,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const target = ns.args[0]\\r\\n    const threads = ns.args[1]\\r\\n    const delay = ns.args[2]\\r\\n  \\r\\n    if (delay && delay > 0) {\\r\\n      await ns.sleep(delay)\\r\\n    }\\r\\n  \\r\\n    ns.print(`Starting operation: weaken on ${target} in ${threads} threads`)\\r\\n    await ns.weaken(target, { threads, stock: true })\\r\\n    ns.exit()\\r\\n  }\\r\\n  \",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"rho-construction\",\"_hash\":\"e952e94dd27d633fd591066b3da072c2321e9de8a9bce8a0ea0e9eae632ecaf0\",\"moduleSequenceNumber\":23828,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"syscore\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":56,\"hackDifficulty\":56,\"minDifficulty\":19,\"moneyAvailable\":562435339,\"moneyMax\":14060883475,\"numOpenPortsRequired\":3,\"openPortCount\":3,\"requiredHackingSkill\":483,\"serverGrowth\":51}},\"alpha-ent\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"alpha-ent\",\"httpPortOpen\":true,\"ip\":\"77.3.1.2\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[\"sector-12-crime.lit\"],\"organizationName\":\"Alpha Enterprises\",\"programs\":[],\"ramUsed\":127.75,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omega-net\",73,26575.17767107638,\"9b8e4db6-edce-48b7-9d15-95baff290283\"],\"dataMap\":{},\"filename\":\"grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":154.20999999999978,\"pid\":1222,\"ramUsage\":1.75,\"server\":\"alpha-ent\",\"threads\":73,\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///9ce01242-138e-4da8-aa86-35eee3e23c69\",\"moduleSequenceNumber\":26132}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const target = ns.args[0]\\r\\n    const threads = ns.args[1]\\r\\n    const delay = ns.args[2]\\r\\n  \\r\\n    if (delay && delay > 0) {\\r\\n      await ns.sleep(delay)\\r\\n    }\\r\\n  \\r\\n    ns.print(`Starting operation: hack on ${target} in ${threads} threads`)\\r\\n    await ns.hack(target, { threads, stock: true })\\r\\n    ns.exit()\\r\\n  }\\r\\n  \",\"filename\":\"hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:file:///34e0d521-1ffe-43f8-b8ea-769ea64bbfa4\",\"moduleSequenceNumber\":29126}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"alpha-ent\",\"_hash\":\"4d51de5d68e34b64abafc337497582a9ed6ccdf51fcb55366e3ec23598254bba\",\"moduleSequenceNumber\":29126,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const target = ns.args[0]\\r\\n    const threads = ns.args[1]\\r\\n    const delay = ns.args[2]\\r\\n  \\r\\n    if (delay && delay > 0) {\\r\\n      await ns.sleep(delay)\\r\\n    }\\r\\n  \\r\\n    ns.print(`Starting operation: grow on ${target} in ${threads} threads`)\\r\\n    await ns.grow(target, { threads, stock: true })\\r\\n    ns.exit()\\r\\n  }\\r\\n  \",\"filename\":\"grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///9ce01242-138e-4da8-aa86-35eee3e23c69\",\"moduleSequenceNumber\":26132}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"alpha-ent\",\"_hash\":\"7c1d1fb4f0c8f7bb72603cc66887138d311d1d62640ec9a93a5d7a6bde532915\",\"moduleSequenceNumber\":26132,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const target = ns.args[0]\\r\\n    const threads = ns.args[1]\\r\\n    const delay = ns.args[2]\\r\\n  \\r\\n    if (delay && delay > 0) {\\r\\n      await ns.sleep(delay)\\r\\n    }\\r\\n  \\r\\n    ns.print(`Starting operation: weaken on ${target} in ${threads} threads`)\\r\\n    await ns.weaken(target, { threads, stock: true })\\r\\n    ns.exit()\\r\\n  }\\r\\n  \",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"alpha-ent\",\"_hash\":\"e952e94dd27d633fd591066b3da072c2321e9de8a9bce8a0ea0e9eae632ecaf0\",\"moduleSequenceNumber\":26084,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"catalyst\",\"galactic-cyber\",\"global-pharm\",\"snap-fitness\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":58,\"hackDifficulty\":58,\"minDifficulty\":19,\"moneyAvailable\":601101951,\"moneyMax\":15027548775,\"numOpenPortsRequired\":4,\"openPortCount\":4,\"requiredHackingSkill\":530,\"serverGrowth\":54}},\"aevum-police\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"aevum-police\",\"httpPortOpen\":true,\"ip\":\"1.9.9.9\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Aevum Police Headquarters\",\"programs\":[],\"ramUsed\":31.5,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omega-net\",18,26575.17767107638,\"44d32ccb-7185-4276-80a4-a228bcf305b0\"],\"dataMap\":{},\"filename\":\"grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":154.20999999999978,\"pid\":1211,\"ramUsage\":1.75,\"server\":\"aevum-police\",\"threads\":18,\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///9ce01242-138e-4da8-aa86-35eee3e23c69\",\"moduleSequenceNumber\":26130}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const target = ns.args[0]\\r\\n    const threads = ns.args[1]\\r\\n    const delay = ns.args[2]\\r\\n  \\r\\n    if (delay && delay > 0) {\\r\\n      await ns.sleep(delay)\\r\\n    }\\r\\n  \\r\\n    ns.print(`Starting operation: hack on ${target} in ${threads} threads`)\\r\\n    await ns.hack(target, { threads, stock: true })\\r\\n    ns.exit()\\r\\n  }\\r\\n  \",\"filename\":\"hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:file:///34e0d521-1ffe-43f8-b8ea-769ea64bbfa4\",\"moduleSequenceNumber\":29120}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"aevum-police\",\"_hash\":\"4d51de5d68e34b64abafc337497582a9ed6ccdf51fcb55366e3ec23598254bba\",\"moduleSequenceNumber\":29120,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const target = ns.args[0]\\r\\n    const threads = ns.args[1]\\r\\n    const delay = ns.args[2]\\r\\n  \\r\\n    if (delay && delay > 0) {\\r\\n      await ns.sleep(delay)\\r\\n    }\\r\\n  \\r\\n    ns.print(`Starting operation: grow on ${target} in ${threads} threads`)\\r\\n    await ns.grow(target, { threads, stock: true })\\r\\n    ns.exit()\\r\\n  }\\r\\n  \",\"filename\":\"grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///9ce01242-138e-4da8-aa86-35eee3e23c69\",\"moduleSequenceNumber\":26130}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"aevum-police\",\"_hash\":\"7c1d1fb4f0c8f7bb72603cc66887138d311d1d62640ec9a93a5d7a6bde532915\",\"moduleSequenceNumber\":26130,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const target = ns.args[0]\\r\\n    const threads = ns.args[1]\\r\\n    const delay = ns.args[2]\\r\\n  \\r\\n    if (delay && delay > 0) {\\r\\n      await ns.sleep(delay)\\r\\n    }\\r\\n  \\r\\n    ns.print(`Starting operation: weaken on ${target} in ${threads} threads`)\\r\\n    await ns.weaken(target, { threads, stock: true })\\r\\n    ns.exit()\\r\\n  }\\r\\n  \",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"aevum-police\",\"_hash\":\"e952e94dd27d633fd591066b3da072c2321e9de8a9bce8a0ea0e9eae632ecaf0\",\"moduleSequenceNumber\":26090,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"summit-uni\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":77,\"hackDifficulty\":77,\"minDifficulty\":26,\"moneyAvailable\":294417015,\"moneyMax\":7360425375,\"numOpenPortsRequired\":4,\"openPortCount\":4,\"requiredHackingSkill\":448,\"serverGrowth\":46}},\"rothman-uni\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"rothman-uni\",\"httpPortOpen\":false,\"ip\":\"94.4.1.9\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"secret-societies.lit\",\"the-failed-frontier.lit\",\"tensions-in-tech-race.lit\"],\"organizationName\":\"Rothman University\",\"programs\":[],\"ramUsed\":31.5,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omega-net\",18,26575.17767107638,\"ae13207b-2d61-46ad-89bf-23267cae5596\"],\"dataMap\":{},\"filename\":\"grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":154.20999999999978,\"pid\":1208,\"ramUsage\":1.75,\"server\":\"rothman-uni\",\"threads\":18,\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///9ce01242-138e-4da8-aa86-35eee3e23c69\",\"moduleSequenceNumber\":23834}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const target = ns.args[0]\\r\\n    const threads = ns.args[1]\\r\\n    const delay = ns.args[2]\\r\\n  \\r\\n    if (delay && delay > 0) {\\r\\n      await ns.sleep(delay)\\r\\n    }\\r\\n  \\r\\n    ns.print(`Starting operation: hack on ${target} in ${threads} threads`)\\r\\n    await ns.hack(target, { threads, stock: true })\\r\\n    ns.exit()\\r\\n  }\\r\\n  \",\"filename\":\"hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:file:///34e0d521-1ffe-43f8-b8ea-769ea64bbfa4\",\"moduleSequenceNumber\":29117}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"rothman-uni\",\"_hash\":\"4d51de5d68e34b64abafc337497582a9ed6ccdf51fcb55366e3ec23598254bba\",\"moduleSequenceNumber\":29117,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const target = ns.args[0]\\r\\n    const threads = ns.args[1]\\r\\n    const delay = ns.args[2]\\r\\n  \\r\\n    if (delay && delay > 0) {\\r\\n      await ns.sleep(delay)\\r\\n    }\\r\\n  \\r\\n    ns.print(`Starting operation: grow on ${target} in ${threads} threads`)\\r\\n    await ns.grow(target, { threads, stock: true })\\r\\n    ns.exit()\\r\\n  }\\r\\n  \",\"filename\":\"grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///9ce01242-138e-4da8-aa86-35eee3e23c69\",\"moduleSequenceNumber\":23834}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"rothman-uni\",\"_hash\":\"7c1d1fb4f0c8f7bb72603cc66887138d311d1d62640ec9a93a5d7a6bde532915\",\"moduleSequenceNumber\":23834,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const target = ns.args[0]\\r\\n    const threads = ns.args[1]\\r\\n    const delay = ns.args[2]\\r\\n  \\r\\n    if (delay && delay > 0) {\\r\\n      await ns.sleep(delay)\\r\\n    }\\r\\n  \\r\\n    ns.print(`Starting operation: weaken on ${target} in ${threads} threads`)\\r\\n    await ns.weaken(target, { threads, stock: true })\\r\\n    ns.exit()\\r\\n  }\\r\\n  \",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"rothman-uni\",\"_hash\":\"e952e94dd27d633fd591066b3da072c2321e9de8a9bce8a0ea0e9eae632ecaf0\",\"moduleSequenceNumber\":23798,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"comptek\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":48,\"hackDifficulty\":48,\"minDifficulty\":16,\"moneyAvailable\":185099841,\"moneyMax\":4627496025,\"numOpenPortsRequired\":3,\"openPortCount\":3,\"requiredHackingSkill\":406,\"serverGrowth\":42}},\"zb-institute\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"zb-institute\",\"httpPortOpen\":true,\"ip\":\"87.9.7.7\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[],\"organizationName\":\"ZB Institute of Technology\",\"programs\":[],\"ramUsed\":63,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omega-net\",36,26575.17767107638,\"cea00299-048a-4955-8c11-42c4aeafe038\"],\"dataMap\":{},\"filename\":\"grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":154.20999999999978,\"pid\":1215,\"ramUsage\":1.75,\"server\":\"zb-institute\",\"threads\":36,\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///9ce01242-138e-4da8-aa86-35eee3e23c69\",\"moduleSequenceNumber\":32256}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const target = ns.args[0]\\r\\n    const threads = ns.args[1]\\r\\n    const delay = ns.args[2]\\r\\n  \\r\\n    if (delay && delay > 0) {\\r\\n      await ns.sleep(delay)\\r\\n    }\\r\\n  \\r\\n    ns.print(`Starting operation: hack on ${target} in ${threads} threads`)\\r\\n    await ns.hack(target, { threads, stock: true })\\r\\n    ns.exit()\\r\\n  }\\r\\n  \",\"filename\":\"hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:file:///34e0d521-1ffe-43f8-b8ea-769ea64bbfa4\",\"moduleSequenceNumber\":30958}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"zb-institute\",\"_hash\":\"4d51de5d68e34b64abafc337497582a9ed6ccdf51fcb55366e3ec23598254bba\",\"moduleSequenceNumber\":30958,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const target = ns.args[0]\\r\\n    const threads = ns.args[1]\\r\\n    const delay = ns.args[2]\\r\\n  \\r\\n    if (delay && delay > 0) {\\r\\n      await ns.sleep(delay)\\r\\n    }\\r\\n  \\r\\n    ns.print(`Starting operation: grow on ${target} in ${threads} threads`)\\r\\n    await ns.grow(target, { threads, stock: true })\\r\\n    ns.exit()\\r\\n  }\\r\\n  \",\"filename\":\"grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///9ce01242-138e-4da8-aa86-35eee3e23c69\",\"moduleSequenceNumber\":32256}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"zb-institute\",\"_hash\":\"7c1d1fb4f0c8f7bb72603cc66887138d311d1d62640ec9a93a5d7a6bde532915\",\"moduleSequenceNumber\":32256,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const target = ns.args[0]\\r\\n    const threads = ns.args[1]\\r\\n    const delay = ns.args[2]\\r\\n  \\r\\n    if (delay && delay > 0) {\\r\\n      await ns.sleep(delay)\\r\\n    }\\r\\n  \\r\\n    ns.print(`Starting operation: weaken on ${target} in ${threads} threads`)\\r\\n    await ns.weaken(target, { threads, stock: true })\\r\\n    ns.exit()\\r\\n  }\\r\\n  \",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"zb-institute\",\"_hash\":\"e952e94dd27d633fd591066b3da072c2321e9de8a9bce8a0ea0e9eae632ecaf0\",\"moduleSequenceNumber\":30894,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"comptek\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":85,\"hackDifficulty\":85,\"minDifficulty\":28,\"moneyAvailable\":972497187,\"moneyMax\":24312429675,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":774,\"serverGrowth\":81}},\"summit-uni\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"summit-uni\",\"httpPortOpen\":false,\"ip\":\"75.5.9.5\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"secret-societies.lit\",\"the-failed-frontier.lit\",\"synthetic-muscles.lit\"],\"organizationName\":\"Summit University\",\"programs\":[],\"ramUsed\":63,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omega-net\",36,26575.17767107638,\"36a140d6-cd7a-4004-a8b8-13d90df43319\"],\"dataMap\":{},\"filename\":\"grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":154.20999999999978,\"pid\":1216,\"ramUsage\":1.75,\"server\":\"summit-uni\",\"threads\":36,\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///9ce01242-138e-4da8-aa86-35eee3e23c69\",\"moduleSequenceNumber\":23838}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const target = ns.args[0]\\r\\n    const threads = ns.args[1]\\r\\n    const delay = ns.args[2]\\r\\n  \\r\\n    if (delay && delay > 0) {\\r\\n      await ns.sleep(delay)\\r\\n    }\\r\\n  \\r\\n    ns.print(`Starting operation: hack on ${target} in ${threads} threads`)\\r\\n    await ns.hack(target, { threads, stock: true })\\r\\n    ns.exit()\\r\\n  }\\r\\n  \",\"filename\":\"hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:file:///34e0d521-1ffe-43f8-b8ea-769ea64bbfa4\",\"moduleSequenceNumber\":29122}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"summit-uni\",\"_hash\":\"4d51de5d68e34b64abafc337497582a9ed6ccdf51fcb55366e3ec23598254bba\",\"moduleSequenceNumber\":29122,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const target = ns.args[0]\\r\\n    const threads = ns.args[1]\\r\\n    const delay = ns.args[2]\\r\\n  \\r\\n    if (delay && delay > 0) {\\r\\n      await ns.sleep(delay)\\r\\n    }\\r\\n  \\r\\n    ns.print(`Starting operation: grow on ${target} in ${threads} threads`)\\r\\n    await ns.grow(target, { threads, stock: true })\\r\\n    ns.exit()\\r\\n  }\\r\\n  \",\"filename\":\"grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///9ce01242-138e-4da8-aa86-35eee3e23c69\",\"moduleSequenceNumber\":23838}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"summit-uni\",\"_hash\":\"7c1d1fb4f0c8f7bb72603cc66887138d311d1d62640ec9a93a5d7a6bde532915\",\"moduleSequenceNumber\":23838,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const target = ns.args[0]\\r\\n    const threads = ns.args[1]\\r\\n    const delay = ns.args[2]\\r\\n  \\r\\n    if (delay && delay > 0) {\\r\\n      await ns.sleep(delay)\\r\\n    }\\r\\n  \\r\\n    ns.print(`Starting operation: weaken on ${target} in ${threads} threads`)\\r\\n    await ns.weaken(target, { threads, stock: true })\\r\\n    ns.exit()\\r\\n  }\\r\\n  \",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"summit-uni\",\"_hash\":\"e952e94dd27d633fd591066b3da072c2321e9de8a9bce8a0ea0e9eae632ecaf0\",\"moduleSequenceNumber\":23810,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"the-hub\",\"aevum-police\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":61,\"hackDifficulty\":61,\"minDifficulty\":20,\"moneyAvailable\":209602168,\"moneyMax\":5240054200,\"numOpenPortsRequired\":3,\"openPortCount\":3,\"requiredHackingSkill\":428,\"serverGrowth\":42}},\"syscore\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"syscore\",\"httpPortOpen\":false,\"ip\":\"35.2.2.7\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"SysCore Securities\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"avmnite-02h\",\"rho-construction\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":71,\"hackDifficulty\":71,\"minDifficulty\":24,\"moneyAvailable\":592787093,\"moneyMax\":14819677325,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":591,\"serverGrowth\":61}},\"catalyst\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"catalyst\",\"httpPortOpen\":false,\"ip\":\"29.3.3.8\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"tensions-in-tech-race.lit\"],\"organizationName\":\"Catalyst Ventures\",\"programs\":[],\"ramUsed\":31.5,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omega-net\",18,26575.17767107638,\"4fc03014-6058-423a-b9e9-06f6b0269850\"],\"dataMap\":{},\"filename\":\"grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":154.20999999999978,\"pid\":1209,\"ramUsage\":1.75,\"server\":\"catalyst\",\"threads\":18,\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///9ce01242-138e-4da8-aa86-35eee3e23c69\",\"moduleSequenceNumber\":23835}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const target = ns.args[0]\\r\\n    const threads = ns.args[1]\\r\\n    const delay = ns.args[2]\\r\\n  \\r\\n    if (delay && delay > 0) {\\r\\n      await ns.sleep(delay)\\r\\n    }\\r\\n  \\r\\n    ns.print(`Starting operation: hack on ${target} in ${threads} threads`)\\r\\n    await ns.hack(target, { threads, stock: true })\\r\\n    ns.exit()\\r\\n  }\\r\\n  \",\"filename\":\"hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:file:///34e0d521-1ffe-43f8-b8ea-769ea64bbfa4\",\"moduleSequenceNumber\":29118}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"catalyst\",\"_hash\":\"4d51de5d68e34b64abafc337497582a9ed6ccdf51fcb55366e3ec23598254bba\",\"moduleSequenceNumber\":29118,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const target = ns.args[0]\\r\\n    const threads = ns.args[1]\\r\\n    const delay = ns.args[2]\\r\\n  \\r\\n    if (delay && delay > 0) {\\r\\n      await ns.sleep(delay)\\r\\n    }\\r\\n  \\r\\n    ns.print(`Starting operation: grow on ${target} in ${threads} threads`)\\r\\n    await ns.grow(target, { threads, stock: true })\\r\\n    ns.exit()\\r\\n  }\\r\\n  \",\"filename\":\"grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///9ce01242-138e-4da8-aa86-35eee3e23c69\",\"moduleSequenceNumber\":23835}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"catalyst\",\"_hash\":\"7c1d1fb4f0c8f7bb72603cc66887138d311d1d62640ec9a93a5d7a6bde532915\",\"moduleSequenceNumber\":23835,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const target = ns.args[0]\\r\\n    const threads = ns.args[1]\\r\\n    const delay = ns.args[2]\\r\\n  \\r\\n    if (delay && delay > 0) {\\r\\n      await ns.sleep(delay)\\r\\n    }\\r\\n  \\r\\n    ns.print(`Starting operation: weaken on ${target} in ${threads} threads`)\\r\\n    await ns.weaken(target, { threads, stock: true })\\r\\n    ns.exit()\\r\\n  }\\r\\n  \",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"catalyst\",\"_hash\":\"e952e94dd27d633fd591066b3da072c2321e9de8a9bce8a0ea0e9eae632ecaf0\",\"moduleSequenceNumber\":23804,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"comptek\",\"alpha-ent\",\"millenium-fitness\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":66,\"hackDifficulty\":66,\"minDifficulty\":22,\"moneyAvailable\":527550034,\"moneyMax\":13188750850,\"numOpenPortsRequired\":3,\"openPortCount\":3,\"requiredHackingSkill\":420,\"serverGrowth\":40}},\"the-hub\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"the-hub\",\"httpPortOpen\":false,\"ip\":\"63.7.0.5\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"The Hub\",\"programs\":[],\"ramUsed\":31.5,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omega-net\",18,26575.17767107638,\"a174e77f-8812-4b23-ace6-7b6359928a09\"],\"dataMap\":{},\"filename\":\"grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":154.20999999999978,\"pid\":1206,\"ramUsage\":1.75,\"server\":\"the-hub\",\"threads\":18,\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///9ce01242-138e-4da8-aa86-35eee3e23c69\",\"moduleSequenceNumber\":23832}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const target = ns.args[0]\\r\\n    const threads = ns.args[1]\\r\\n    const delay = ns.args[2]\\r\\n  \\r\\n    if (delay && delay > 0) {\\r\\n      await ns.sleep(delay)\\r\\n    }\\r\\n  \\r\\n    ns.print(`Starting operation: hack on ${target} in ${threads} threads`)\\r\\n    await ns.hack(target, { threads, stock: true })\\r\\n    ns.exit()\\r\\n  }\\r\\n  \",\"filename\":\"hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:file:///34e0d521-1ffe-43f8-b8ea-769ea64bbfa4\",\"moduleSequenceNumber\":29115}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"the-hub\",\"_hash\":\"4d51de5d68e34b64abafc337497582a9ed6ccdf51fcb55366e3ec23598254bba\",\"moduleSequenceNumber\":29115,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const target = ns.args[0]\\r\\n    const threads = ns.args[1]\\r\\n    const delay = ns.args[2]\\r\\n  \\r\\n    if (delay && delay > 0) {\\r\\n      await ns.sleep(delay)\\r\\n    }\\r\\n  \\r\\n    ns.print(`Starting operation: grow on ${target} in ${threads} threads`)\\r\\n    await ns.grow(target, { threads, stock: true })\\r\\n    ns.exit()\\r\\n  }\\r\\n  \",\"filename\":\"grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///9ce01242-138e-4da8-aa86-35eee3e23c69\",\"moduleSequenceNumber\":23832}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"the-hub\",\"_hash\":\"7c1d1fb4f0c8f7bb72603cc66887138d311d1d62640ec9a93a5d7a6bde532915\",\"moduleSequenceNumber\":23832,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const target = ns.args[0]\\r\\n    const threads = ns.args[1]\\r\\n    const delay = ns.args[2]\\r\\n  \\r\\n    if (delay && delay > 0) {\\r\\n      await ns.sleep(delay)\\r\\n    }\\r\\n  \\r\\n    ns.print(`Starting operation: weaken on ${target} in ${threads} threads`)\\r\\n    await ns.weaken(target, { threads, stock: true })\\r\\n    ns.exit()\\r\\n  }\\r\\n  \",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"the-hub\",\"_hash\":\"e952e94dd27d633fd591066b3da072c2321e9de8a9bce8a0ea0e9eae632ecaf0\",\"moduleSequenceNumber\":23786,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"silver-helix\",\"summit-uni\",\"I.I.I.I\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":40,\"hackDifficulty\":40,\"minDifficulty\":13,\"moneyAvailable\":192267549,\"moneyMax\":4806688725,\"numOpenPortsRequired\":2,\"openPortCount\":3,\"requiredHackingSkill\":297,\"serverGrowth\":49}},\"comptek\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"comptek\",\"httpPortOpen\":false,\"ip\":\"94.4.4.7\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"man-and-machine.lit\"],\"organizationName\":\"CompuTek\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"omega-net\",\"rothman-uni\",\"zb-institute\",\"catalyst\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":59,\"hackDifficulty\":59,\"minDifficulty\":20,\"moneyAvailable\":235508082,\"moneyMax\":5887702050,\"numOpenPortsRequired\":3,\"openPortCount\":0,\"requiredHackingSkill\":382,\"serverGrowth\":50}},\"netlink\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"netlink\",\"httpPortOpen\":false,\"ip\":\"80.4.0.2\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"simulated-reality.lit\"],\"organizationName\":\"NetLink Technologies\",\"programs\":[],\"ramUsed\":31.5,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omega-net\",18,26575.17767107638,\"9b48edff-b8c9-4bde-9f37-424b0f727998\"],\"dataMap\":{},\"filename\":\"grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":154.20999999999978,\"pid\":1207,\"ramUsage\":1.75,\"server\":\"netlink\",\"threads\":18,\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///9ce01242-138e-4da8-aa86-35eee3e23c69\",\"moduleSequenceNumber\":23833}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const target = ns.args[0]\\r\\n    const threads = ns.args[1]\\r\\n    const delay = ns.args[2]\\r\\n  \\r\\n    if (delay && delay > 0) {\\r\\n      await ns.sleep(delay)\\r\\n    }\\r\\n  \\r\\n    ns.print(`Starting operation: hack on ${target} in ${threads} threads`)\\r\\n    await ns.hack(target, { threads, stock: true })\\r\\n    ns.exit()\\r\\n  }\\r\\n  \",\"filename\":\"hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:file:///34e0d521-1ffe-43f8-b8ea-769ea64bbfa4\",\"moduleSequenceNumber\":29116}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"netlink\",\"_hash\":\"4d51de5d68e34b64abafc337497582a9ed6ccdf51fcb55366e3ec23598254bba\",\"moduleSequenceNumber\":29116,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const target = ns.args[0]\\r\\n    const threads = ns.args[1]\\r\\n    const delay = ns.args[2]\\r\\n  \\r\\n    if (delay && delay > 0) {\\r\\n      await ns.sleep(delay)\\r\\n    }\\r\\n  \\r\\n    ns.print(`Starting operation: grow on ${target} in ${threads} threads`)\\r\\n    await ns.grow(target, { threads, stock: true })\\r\\n    ns.exit()\\r\\n  }\\r\\n  \",\"filename\":\"grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///9ce01242-138e-4da8-aa86-35eee3e23c69\",\"moduleSequenceNumber\":23833}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"netlink\",\"_hash\":\"7c1d1fb4f0c8f7bb72603cc66887138d311d1d62640ec9a93a5d7a6bde532915\",\"moduleSequenceNumber\":23833,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const target = ns.args[0]\\r\\n    const threads = ns.args[1]\\r\\n    const delay = ns.args[2]\\r\\n  \\r\\n    if (delay && delay > 0) {\\r\\n      await ns.sleep(delay)\\r\\n    }\\r\\n  \\r\\n    ns.print(`Starting operation: weaken on ${target} in ${threads} threads`)\\r\\n    await ns.weaken(target, { threads, stock: true })\\r\\n    ns.exit()\\r\\n  }\\r\\n  \",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"netlink\",\"_hash\":\"e952e94dd27d633fd591066b3da072c2321e9de8a9bce8a0ea0e9eae632ecaf0\",\"moduleSequenceNumber\":23792,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"silver-helix\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":72,\"hackDifficulty\":72,\"minDifficulty\":24,\"moneyAvailable\":275000000,\"moneyMax\":6875000000,\"numOpenPortsRequired\":3,\"openPortCount\":3,\"requiredHackingSkill\":402,\"serverGrowth\":66}},\"johnson-ortho\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"johnson-ortho\",\"httpPortOpen\":true,\"ip\":\"34.2.4.5\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Johnson Orthopedics\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"omega-net\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":60,\"hackDifficulty\":60,\"minDifficulty\":20,\"moneyAvailable\":81569708,\"moneyMax\":2039242700,\"numOpenPortsRequired\":2,\"openPortCount\":5,\"requiredHackingSkill\":286,\"serverGrowth\":47}},\"n00dles\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"n00dles\",\"httpPortOpen\":false,\"ip\":\"28.9.0.9\",\"isConnectedTo\":false,\"maxRam\":4,\"messages\":[],\"organizationName\":\"Noodle Bar\",\"programs\":[],\"ramUsed\":3.5,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omega-net\",2,26575.17767107638,\"6b8e5845-a9e2-4d56-b038-9e043c1b1891\"],\"dataMap\":{},\"filename\":\"grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":154.20999999999978,\"pid\":1187,\"ramUsage\":1.75,\"server\":\"n00dles\",\"threads\":2,\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///9ce01242-138e-4da8-aa86-35eee3e23c69\",\"moduleSequenceNumber\":21179}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const target = ns.args[0]\\r\\n    const threads = ns.args[1]\\r\\n    const delay = ns.args[2]\\r\\n  \\r\\n    if (delay && delay > 0) {\\r\\n      await ns.sleep(delay)\\r\\n    }\\r\\n  \\r\\n    ns.print(`Starting operation: hack on ${target} in ${threads} threads`)\\r\\n    await ns.hack(target, { threads, stock: true })\\r\\n    ns.exit()\\r\\n  }\\r\\n  \",\"filename\":\"hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:file:///34e0d521-1ffe-43f8-b8ea-769ea64bbfa4\",\"moduleSequenceNumber\":22894}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"n00dles\",\"_hash\":\"4d51de5d68e34b64abafc337497582a9ed6ccdf51fcb55366e3ec23598254bba\",\"moduleSequenceNumber\":22894,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const target = ns.args[0]\\r\\n    const threads = ns.args[1]\\r\\n    const delay = ns.args[2]\\r\\n  \\r\\n    if (delay && delay > 0) {\\r\\n      await ns.sleep(delay)\\r\\n    }\\r\\n  \\r\\n    ns.print(`Starting operation: grow on ${target} in ${threads} threads`)\\r\\n    await ns.grow(target, { threads, stock: true })\\r\\n    ns.exit()\\r\\n  }\\r\\n  \",\"filename\":\"grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///9ce01242-138e-4da8-aa86-35eee3e23c69\",\"moduleSequenceNumber\":21179}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"n00dles\",\"_hash\":\"7c1d1fb4f0c8f7bb72603cc66887138d311d1d62640ec9a93a5d7a6bde532915\",\"moduleSequenceNumber\":21179,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const target = ns.args[0]\\r\\n    const threads = ns.args[1]\\r\\n    const delay = ns.args[2]\\r\\n  \\r\\n    if (delay && delay > 0) {\\r\\n      await ns.sleep(delay)\\r\\n    }\\r\\n  \\r\\n    ns.print(`Starting operation: weaken on ${target} in ${threads} threads`)\\r\\n    await ns.weaken(target, { threads, stock: true })\\r\\n    ns.exit()\\r\\n  }\\r\\n  \",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"n00dles\",\"_hash\":\"e952e94dd27d633fd591066b3da072c2321e9de8a9bce8a0ea0e9eae632ecaf0\",\"moduleSequenceNumber\":21112,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"home\",\"CSEC\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":70000,\"moneyMax\":1750000,\"numOpenPortsRequired\":0,\"openPortCount\":1,\"requiredHackingSkill\":1,\"serverGrowth\":3000}},\"foodnstuff\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"foodnstuff\",\"httpPortOpen\":false,\"ip\":\"32.3.3.3\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"sector-12-crime.lit\"],\"organizationName\":\"FoodNStuff\",\"programs\":[],\"ramUsed\":15.75,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omega-net\",9,26575.17767107638,\"d19e080e-7949-46a5-9f32-61f610efeded\"],\"dataMap\":{},\"filename\":\"grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":154.20999999999978,\"pid\":1189,\"ramUsage\":1.75,\"server\":\"foodnstuff\",\"threads\":9,\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///9ce01242-138e-4da8-aa86-35eee3e23c69\",\"moduleSequenceNumber\":21181}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const target = ns.args[0]\\r\\n    const threads = ns.args[1]\\r\\n    const delay = ns.args[2]\\r\\n  \\r\\n    if (delay && delay > 0) {\\r\\n      await ns.sleep(delay)\\r\\n    }\\r\\n  \\r\\n    ns.print(`Starting operation: hack on ${target} in ${threads} threads`)\\r\\n    await ns.hack(target, { threads, stock: true })\\r\\n    ns.exit()\\r\\n  }\\r\\n  \",\"filename\":\"hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:file:///34e0d521-1ffe-43f8-b8ea-769ea64bbfa4\",\"moduleSequenceNumber\":22896}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"foodnstuff\",\"_hash\":\"4d51de5d68e34b64abafc337497582a9ed6ccdf51fcb55366e3ec23598254bba\",\"moduleSequenceNumber\":22896,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const target = ns.args[0]\\r\\n    const threads = ns.args[1]\\r\\n    const delay = ns.args[2]\\r\\n  \\r\\n    if (delay && delay > 0) {\\r\\n      await ns.sleep(delay)\\r\\n    }\\r\\n  \\r\\n    ns.print(`Starting operation: grow on ${target} in ${threads} threads`)\\r\\n    await ns.grow(target, { threads, stock: true })\\r\\n    ns.exit()\\r\\n  }\\r\\n  \",\"filename\":\"grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///9ce01242-138e-4da8-aa86-35eee3e23c69\",\"moduleSequenceNumber\":21181}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"foodnstuff\",\"_hash\":\"7c1d1fb4f0c8f7bb72603cc66887138d311d1d62640ec9a93a5d7a6bde532915\",\"moduleSequenceNumber\":21181,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const target = ns.args[0]\\r\\n    const threads = ns.args[1]\\r\\n    const delay = ns.args[2]\\r\\n  \\r\\n    if (delay && delay > 0) {\\r\\n      await ns.sleep(delay)\\r\\n    }\\r\\n  \\r\\n    ns.print(`Starting operation: weaken on ${target} in ${threads} threads`)\\r\\n    await ns.weaken(target, { threads, stock: true })\\r\\n    ns.exit()\\r\\n  }\\r\\n  \",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"foodnstuff\",\"_hash\":\"e952e94dd27d633fd591066b3da072c2321e9de8a9bce8a0ea0e9eae632ecaf0\",\"moduleSequenceNumber\":21118,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":10,\"hackDifficulty\":3,\"minDifficulty\":3,\"moneyAvailable\":2185827.855190042,\"moneyMax\":50000000,\"numOpenPortsRequired\":0,\"openPortCount\":1,\"requiredHackingSkill\":1,\"serverGrowth\":5}},\"sigma-cosmetics\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"sigma-cosmetics\",\"httpPortOpen\":false,\"ip\":\"63.3.0.2\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Sigma Cosmetics\",\"programs\":[],\"ramUsed\":15.75,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omega-net\",9,26575.17767107638,\"b916a21f-9f5e-49c3-8283-8b4b00b66835\"],\"dataMap\":{},\"filename\":\"grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":154.20999999999978,\"pid\":1190,\"ramUsage\":1.75,\"server\":\"sigma-cosmetics\",\"threads\":9,\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///9ce01242-138e-4da8-aa86-35eee3e23c69\",\"moduleSequenceNumber\":21182}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const target = ns.args[0]\\r\\n    const threads = ns.args[1]\\r\\n    const delay = ns.args[2]\\r\\n  \\r\\n    if (delay && delay > 0) {\\r\\n      await ns.sleep(delay)\\r\\n    }\\r\\n  \\r\\n    ns.print(`Starting operation: hack on ${target} in ${threads} threads`)\\r\\n    await ns.hack(target, { threads, stock: true })\\r\\n    ns.exit()\\r\\n  }\\r\\n  \",\"filename\":\"hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:file:///34e0d521-1ffe-43f8-b8ea-769ea64bbfa4\",\"moduleSequenceNumber\":22897}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"sigma-cosmetics\",\"_hash\":\"4d51de5d68e34b64abafc337497582a9ed6ccdf51fcb55366e3ec23598254bba\",\"moduleSequenceNumber\":22897,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const target = ns.args[0]\\r\\n    const threads = ns.args[1]\\r\\n    const delay = ns.args[2]\\r\\n  \\r\\n    if (delay && delay > 0) {\\r\\n      await ns.sleep(delay)\\r\\n    }\\r\\n  \\r\\n    ns.print(`Starting operation: grow on ${target} in ${threads} threads`)\\r\\n    await ns.grow(target, { threads, stock: true })\\r\\n    ns.exit()\\r\\n  }\\r\\n  \",\"filename\":\"grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///9ce01242-138e-4da8-aa86-35eee3e23c69\",\"moduleSequenceNumber\":21182}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"sigma-cosmetics\",\"_hash\":\"7c1d1fb4f0c8f7bb72603cc66887138d311d1d62640ec9a93a5d7a6bde532915\",\"moduleSequenceNumber\":21182,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const target = ns.args[0]\\r\\n    const threads = ns.args[1]\\r\\n    const delay = ns.args[2]\\r\\n  \\r\\n    if (delay && delay > 0) {\\r\\n      await ns.sleep(delay)\\r\\n    }\\r\\n  \\r\\n    ns.print(`Starting operation: weaken on ${target} in ${threads} threads`)\\r\\n    await ns.weaken(target, { threads, stock: true })\\r\\n    ns.exit()\\r\\n  }\\r\\n  \",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"sigma-cosmetics\",\"_hash\":\"e952e94dd27d633fd591066b3da072c2321e9de8a9bce8a0ea0e9eae632ecaf0\",\"moduleSequenceNumber\":21124,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"home\",\"nectar-net\",\"max-hardware\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":10,\"hackDifficulty\":10,\"minDifficulty\":3,\"moneyAvailable\":2300000,\"moneyMax\":57500000,\"numOpenPortsRequired\":0,\"openPortCount\":1,\"requiredHackingSkill\":5,\"serverGrowth\":10}},\"joesguns\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"joesguns\",\"httpPortOpen\":false,\"ip\":\"85.0.4.0\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Joe's Guns\",\"programs\":[],\"ramUsed\":15.75,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omega-net\",9,26575.17767107638,\"3bb8b2c6-d265-4965-a521-c8e53c3127f2\"],\"dataMap\":{},\"filename\":\"grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":154.20999999999978,\"pid\":1191,\"ramUsage\":1.75,\"server\":\"joesguns\",\"threads\":9,\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///9ce01242-138e-4da8-aa86-35eee3e23c69\",\"moduleSequenceNumber\":21183}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const target = ns.args[0]\\r\\n    const threads = ns.args[1]\\r\\n    const delay = ns.args[2]\\r\\n  \\r\\n    if (delay && delay > 0) {\\r\\n      await ns.sleep(delay)\\r\\n    }\\r\\n  \\r\\n    ns.print(`Starting operation: hack on ${target} in ${threads} threads`)\\r\\n    await ns.hack(target, { threads, stock: true })\\r\\n    ns.exit()\\r\\n  }\\r\\n  \",\"filename\":\"hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:file:///34e0d521-1ffe-43f8-b8ea-769ea64bbfa4\",\"moduleSequenceNumber\":22898}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"joesguns\",\"_hash\":\"4d51de5d68e34b64abafc337497582a9ed6ccdf51fcb55366e3ec23598254bba\",\"moduleSequenceNumber\":22898,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const target = ns.args[0]\\r\\n    const threads = ns.args[1]\\r\\n    const delay = ns.args[2]\\r\\n  \\r\\n    if (delay && delay > 0) {\\r\\n      await ns.sleep(delay)\\r\\n    }\\r\\n  \\r\\n    ns.print(`Starting operation: grow on ${target} in ${threads} threads`)\\r\\n    await ns.grow(target, { threads, stock: true })\\r\\n    ns.exit()\\r\\n  }\\r\\n  \",\"filename\":\"grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///9ce01242-138e-4da8-aa86-35eee3e23c69\",\"moduleSequenceNumber\":21183}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"joesguns\",\"_hash\":\"7c1d1fb4f0c8f7bb72603cc66887138d311d1d62640ec9a93a5d7a6bde532915\",\"moduleSequenceNumber\":21183,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const target = ns.args[0]\\r\\n    const threads = ns.args[1]\\r\\n    const delay = ns.args[2]\\r\\n  \\r\\n    if (delay && delay > 0) {\\r\\n      await ns.sleep(delay)\\r\\n    }\\r\\n  \\r\\n    ns.print(`Starting operation: weaken on ${target} in ${threads} threads`)\\r\\n    await ns.weaken(target, { threads, stock: true })\\r\\n    ns.exit()\\r\\n  }\\r\\n  \",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"joesguns\",\"_hash\":\"e952e94dd27d633fd591066b3da072c2321e9de8a9bce8a0ea0e9eae632ecaf0\",\"moduleSequenceNumber\":21130,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":15,\"hackDifficulty\":15,\"minDifficulty\":5,\"moneyAvailable\":2500000,\"moneyMax\":62500000,\"numOpenPortsRequired\":0,\"openPortCount\":1,\"requiredHackingSkill\":10,\"serverGrowth\":20}},\"zer0\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"zer0\",\"httpPortOpen\":false,\"ip\":\"78.2.5.0\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"ZER0 Nightclub\",\"programs\":[],\"ramUsed\":31.5,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omega-net\",18,26575.17767107638,\"e234ea00-52ab-4026-b882-3b9710aa5962\"],\"dataMap\":{},\"filename\":\"grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":154.20999999999978,\"pid\":1202,\"ramUsage\":1.75,\"server\":\"zer0\",\"threads\":18,\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///9ce01242-138e-4da8-aa86-35eee3e23c69\",\"moduleSequenceNumber\":21189}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const target = ns.args[0]\\r\\n    const threads = ns.args[1]\\r\\n    const delay = ns.args[2]\\r\\n  \\r\\n    if (delay && delay > 0) {\\r\\n      await ns.sleep(delay)\\r\\n    }\\r\\n  \\r\\n    ns.print(`Starting operation: hack on ${target} in ${threads} threads`)\\r\\n    await ns.hack(target, { threads, stock: true })\\r\\n    ns.exit()\\r\\n  }\\r\\n  \",\"filename\":\"hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:file:///34e0d521-1ffe-43f8-b8ea-769ea64bbfa4\",\"moduleSequenceNumber\":22904}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"zer0\",\"_hash\":\"4d51de5d68e34b64abafc337497582a9ed6ccdf51fcb55366e3ec23598254bba\",\"moduleSequenceNumber\":22904,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const target = ns.args[0]\\r\\n    const threads = ns.args[1]\\r\\n    const delay = ns.args[2]\\r\\n  \\r\\n    if (delay && delay > 0) {\\r\\n      await ns.sleep(delay)\\r\\n    }\\r\\n  \\r\\n    ns.print(`Starting operation: grow on ${target} in ${threads} threads`)\\r\\n    await ns.grow(target, { threads, stock: true })\\r\\n    ns.exit()\\r\\n  }\\r\\n  \",\"filename\":\"grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///9ce01242-138e-4da8-aa86-35eee3e23c69\",\"moduleSequenceNumber\":21189}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"zer0\",\"_hash\":\"7c1d1fb4f0c8f7bb72603cc66887138d311d1d62640ec9a93a5d7a6bde532915\",\"moduleSequenceNumber\":21189,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const target = ns.args[0]\\r\\n    const threads = ns.args[1]\\r\\n    const delay = ns.args[2]\\r\\n  \\r\\n    if (delay && delay > 0) {\\r\\n      await ns.sleep(delay)\\r\\n    }\\r\\n  \\r\\n    ns.print(`Starting operation: weaken on ${target} in ${threads} threads`)\\r\\n    await ns.weaken(target, { threads, stock: true })\\r\\n    ns.exit()\\r\\n  }\\r\\n  \",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"zer0\",\"_hash\":\"e952e94dd27d633fd591066b3da072c2321e9de8a9bce8a0ea0e9eae632ecaf0\",\"moduleSequenceNumber\":21172,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"harakiri-sushi\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":25,\"hackDifficulty\":25,\"minDifficulty\":8,\"moneyAvailable\":7500000,\"moneyMax\":187500000,\"numOpenPortsRequired\":1,\"openPortCount\":1,\"requiredHackingSkill\":75,\"serverGrowth\":40}},\"nectar-net\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"nectar-net\",\"httpPortOpen\":false,\"ip\":\"46.8.4.1\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Nectar Nightclub Network\",\"programs\":[],\"ramUsed\":15.75,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omega-net\",9,26575.17767107638,\"e13e3d0e-7084-4bfd-9227-ee2d977e7d47\"],\"dataMap\":{},\"filename\":\"grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":154.20999999999978,\"pid\":1194,\"ramUsage\":1.75,\"server\":\"nectar-net\",\"threads\":9,\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///9ce01242-138e-4da8-aa86-35eee3e23c69\",\"moduleSequenceNumber\":21186}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const target = ns.args[0]\\r\\n    const threads = ns.args[1]\\r\\n    const delay = ns.args[2]\\r\\n  \\r\\n    if (delay && delay > 0) {\\r\\n      await ns.sleep(delay)\\r\\n    }\\r\\n  \\r\\n    ns.print(`Starting operation: hack on ${target} in ${threads} threads`)\\r\\n    await ns.hack(target, { threads, stock: true })\\r\\n    ns.exit()\\r\\n  }\\r\\n  \",\"filename\":\"hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:file:///34e0d521-1ffe-43f8-b8ea-769ea64bbfa4\",\"moduleSequenceNumber\":22901}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"nectar-net\",\"_hash\":\"4d51de5d68e34b64abafc337497582a9ed6ccdf51fcb55366e3ec23598254bba\",\"moduleSequenceNumber\":22901,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const target = ns.args[0]\\r\\n    const threads = ns.args[1]\\r\\n    const delay = ns.args[2]\\r\\n  \\r\\n    if (delay && delay > 0) {\\r\\n      await ns.sleep(delay)\\r\\n    }\\r\\n  \\r\\n    ns.print(`Starting operation: grow on ${target} in ${threads} threads`)\\r\\n    await ns.grow(target, { threads, stock: true })\\r\\n    ns.exit()\\r\\n  }\\r\\n  \",\"filename\":\"grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///9ce01242-138e-4da8-aa86-35eee3e23c69\",\"moduleSequenceNumber\":21186}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"nectar-net\",\"_hash\":\"7c1d1fb4f0c8f7bb72603cc66887138d311d1d62640ec9a93a5d7a6bde532915\",\"moduleSequenceNumber\":21186,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const target = ns.args[0]\\r\\n    const threads = ns.args[1]\\r\\n    const delay = ns.args[2]\\r\\n  \\r\\n    if (delay && delay > 0) {\\r\\n      await ns.sleep(delay)\\r\\n    }\\r\\n  \\r\\n    ns.print(`Starting operation: weaken on ${target} in ${threads} threads`)\\r\\n    await ns.weaken(target, { threads, stock: true })\\r\\n    ns.exit()\\r\\n  }\\r\\n  \",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"nectar-net\",\"_hash\":\"e952e94dd27d633fd591066b3da072c2321e9de8a9bce8a0ea0e9eae632ecaf0\",\"moduleSequenceNumber\":21160,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"sigma-cosmetics\",\"silver-helix\",\"phantasy\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":20,\"hackDifficulty\":20,\"minDifficulty\":7,\"moneyAvailable\":2750000,\"moneyMax\":68750000,\"numOpenPortsRequired\":0,\"openPortCount\":1,\"requiredHackingSkill\":20,\"serverGrowth\":25}},\"neo-net\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"neo-net\",\"httpPortOpen\":false,\"ip\":\"23.9.8.2\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"the-hidden-world.lit\"],\"organizationName\":\"Neo Nightclub Network\",\"programs\":[],\"ramUsed\":31.5,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omega-net\",18,26575.17767107638,\"e782ae20-ec33-490f-9f9a-f908f837035c\"],\"dataMap\":{},\"filename\":\"grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":154.20999999999978,\"pid\":1203,\"ramUsage\":1.75,\"server\":\"neo-net\",\"threads\":18,\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///9ce01242-138e-4da8-aa86-35eee3e23c69\",\"moduleSequenceNumber\":21190}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const target = ns.args[0]\\r\\n    const threads = ns.args[1]\\r\\n    const delay = ns.args[2]\\r\\n  \\r\\n    if (delay && delay > 0) {\\r\\n      await ns.sleep(delay)\\r\\n    }\\r\\n  \\r\\n    ns.print(`Starting operation: hack on ${target} in ${threads} threads`)\\r\\n    await ns.hack(target, { threads, stock: true })\\r\\n    ns.exit()\\r\\n  }\\r\\n  \",\"filename\":\"hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:file:///34e0d521-1ffe-43f8-b8ea-769ea64bbfa4\",\"moduleSequenceNumber\":22905}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"neo-net\",\"_hash\":\"4d51de5d68e34b64abafc337497582a9ed6ccdf51fcb55366e3ec23598254bba\",\"moduleSequenceNumber\":22905,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const target = ns.args[0]\\r\\n    const threads = ns.args[1]\\r\\n    const delay = ns.args[2]\\r\\n  \\r\\n    if (delay && delay > 0) {\\r\\n      await ns.sleep(delay)\\r\\n    }\\r\\n  \\r\\n    ns.print(`Starting operation: grow on ${target} in ${threads} threads`)\\r\\n    await ns.grow(target, { threads, stock: true })\\r\\n    ns.exit()\\r\\n  }\\r\\n  \",\"filename\":\"grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///9ce01242-138e-4da8-aa86-35eee3e23c69\",\"moduleSequenceNumber\":21190}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"neo-net\",\"_hash\":\"7c1d1fb4f0c8f7bb72603cc66887138d311d1d62640ec9a93a5d7a6bde532915\",\"moduleSequenceNumber\":21190,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const target = ns.args[0]\\r\\n    const threads = ns.args[1]\\r\\n    const delay = ns.args[2]\\r\\n  \\r\\n    if (delay && delay > 0) {\\r\\n      await ns.sleep(delay)\\r\\n    }\\r\\n  \\r\\n    ns.print(`Starting operation: weaken on ${target} in ${threads} threads`)\\r\\n    await ns.weaken(target, { threads, stock: true })\\r\\n    ns.exit()\\r\\n  }\\r\\n  \",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"neo-net\",\"_hash\":\"e952e94dd27d633fd591066b3da072c2321e9de8a9bce8a0ea0e9eae632ecaf0\",\"moduleSequenceNumber\":21178,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"CSEC\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":25,\"hackDifficulty\":25,\"minDifficulty\":8,\"moneyAvailable\":5000000,\"moneyMax\":125000000,\"numOpenPortsRequired\":1,\"openPortCount\":1,\"requiredHackingSkill\":50,\"serverGrowth\":25}},\"silver-helix\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"silver-helix\",\"httpPortOpen\":false,\"ip\":\"90.3.0.9\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"new-triads.lit\"],\"organizationName\":\"Silver Helix\",\"programs\":[],\"ramUsed\":63,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omega-net\",36,26575.17767107638,\"e6fc6061-182a-4657-9a4a-63e6570aac87\"],\"dataMap\":{},\"filename\":\"grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":154.20999999999978,\"pid\":1214,\"ramUsage\":1.75,\"server\":\"silver-helix\",\"threads\":36,\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///9ce01242-138e-4da8-aa86-35eee3e23c69\",\"moduleSequenceNumber\":23837}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const target = ns.args[0]\\r\\n    const threads = ns.args[1]\\r\\n    const delay = ns.args[2]\\r\\n  \\r\\n    if (delay && delay > 0) {\\r\\n      await ns.sleep(delay)\\r\\n    }\\r\\n  \\r\\n    ns.print(`Starting operation: hack on ${target} in ${threads} threads`)\\r\\n    await ns.hack(target, { threads, stock: true })\\r\\n    ns.exit()\\r\\n  }\\r\\n  \",\"filename\":\"hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:file:///34e0d521-1ffe-43f8-b8ea-769ea64bbfa4\",\"moduleSequenceNumber\":29121}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"silver-helix\",\"_hash\":\"4d51de5d68e34b64abafc337497582a9ed6ccdf51fcb55366e3ec23598254bba\",\"moduleSequenceNumber\":29121,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const target = ns.args[0]\\r\\n    const threads = ns.args[1]\\r\\n    const delay = ns.args[2]\\r\\n  \\r\\n    if (delay && delay > 0) {\\r\\n      await ns.sleep(delay)\\r\\n    }\\r\\n  \\r\\n    ns.print(`Starting operation: grow on ${target} in ${threads} threads`)\\r\\n    await ns.grow(target, { threads, stock: true })\\r\\n    ns.exit()\\r\\n  }\\r\\n  \",\"filename\":\"grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///9ce01242-138e-4da8-aa86-35eee3e23c69\",\"moduleSequenceNumber\":23837}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"silver-helix\",\"_hash\":\"7c1d1fb4f0c8f7bb72603cc66887138d311d1d62640ec9a93a5d7a6bde532915\",\"moduleSequenceNumber\":23837,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const target = ns.args[0]\\r\\n    const threads = ns.args[1]\\r\\n    const delay = ns.args[2]\\r\\n  \\r\\n    if (delay && delay > 0) {\\r\\n      await ns.sleep(delay)\\r\\n    }\\r\\n  \\r\\n    ns.print(`Starting operation: weaken on ${target} in ${threads} threads`)\\r\\n    await ns.weaken(target, { threads, stock: true })\\r\\n    ns.exit()\\r\\n  }\\r\\n  \",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"silver-helix\",\"_hash\":\"e952e94dd27d633fd591066b3da072c2321e9de8a9bce8a0ea0e9eae632ecaf0\",\"moduleSequenceNumber\":23768,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"nectar-net\",\"the-hub\",\"netlink\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":30,\"hackDifficulty\":31.624,\"minDifficulty\":10,\"moneyAvailable\":0,\"moneyMax\":1125000000,\"numOpenPortsRequired\":2,\"openPortCount\":3,\"requiredHackingSkill\":150,\"serverGrowth\":30}},\"hong-fang-tea\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"hong-fang-tea\",\"httpPortOpen\":false,\"ip\":\"29.7.9.7\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"brighter-than-the-sun.lit\"],\"organizationName\":\"HongFang Teahouse\",\"programs\":[],\"ramUsed\":15.75,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omega-net\",9,26575.17767107638,\"4d117414-e0c2-4e8d-bfbc-d1e3de1c66ca\"],\"dataMap\":{},\"filename\":\"grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":154.20999999999978,\"pid\":1192,\"ramUsage\":1.75,\"server\":\"hong-fang-tea\",\"threads\":9,\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///9ce01242-138e-4da8-aa86-35eee3e23c69\",\"moduleSequenceNumber\":21184}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const target = ns.args[0]\\r\\n    const threads = ns.args[1]\\r\\n    const delay = ns.args[2]\\r\\n  \\r\\n    if (delay && delay > 0) {\\r\\n      await ns.sleep(delay)\\r\\n    }\\r\\n  \\r\\n    ns.print(`Starting operation: hack on ${target} in ${threads} threads`)\\r\\n    await ns.hack(target, { threads, stock: true })\\r\\n    ns.exit()\\r\\n  }\\r\\n  \",\"filename\":\"hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:file:///34e0d521-1ffe-43f8-b8ea-769ea64bbfa4\",\"moduleSequenceNumber\":22899}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"hong-fang-tea\",\"_hash\":\"4d51de5d68e34b64abafc337497582a9ed6ccdf51fcb55366e3ec23598254bba\",\"moduleSequenceNumber\":22899,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const target = ns.args[0]\\r\\n    const threads = ns.args[1]\\r\\n    const delay = ns.args[2]\\r\\n  \\r\\n    if (delay && delay > 0) {\\r\\n      await ns.sleep(delay)\\r\\n    }\\r\\n  \\r\\n    ns.print(`Starting operation: grow on ${target} in ${threads} threads`)\\r\\n    await ns.grow(target, { threads, stock: true })\\r\\n    ns.exit()\\r\\n  }\\r\\n  \",\"filename\":\"grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///9ce01242-138e-4da8-aa86-35eee3e23c69\",\"moduleSequenceNumber\":21184}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"hong-fang-tea\",\"_hash\":\"7c1d1fb4f0c8f7bb72603cc66887138d311d1d62640ec9a93a5d7a6bde532915\",\"moduleSequenceNumber\":21184,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const target = ns.args[0]\\r\\n    const threads = ns.args[1]\\r\\n    const delay = ns.args[2]\\r\\n  \\r\\n    if (delay && delay > 0) {\\r\\n      await ns.sleep(delay)\\r\\n    }\\r\\n  \\r\\n    ns.print(`Starting operation: weaken on ${target} in ${threads} threads`)\\r\\n    await ns.weaken(target, { threads, stock: true })\\r\\n    ns.exit()\\r\\n  }\\r\\n  \",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"hong-fang-tea\",\"_hash\":\"e952e94dd27d633fd591066b3da072c2321e9de8a9bce8a0ea0e9eae632ecaf0\",\"moduleSequenceNumber\":21136,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":15,\"hackDifficulty\":15,\"minDifficulty\":5,\"moneyAvailable\":3000000,\"moneyMax\":75000000,\"numOpenPortsRequired\":0,\"openPortCount\":1,\"requiredHackingSkill\":30,\"serverGrowth\":20}},\"harakiri-sushi\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"harakiri-sushi\",\"httpPortOpen\":false,\"ip\":\"59.8.7.4\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"HaraKiri Sushi Bar Network\",\"programs\":[],\"ramUsed\":15.75,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omega-net\",9,26575.17767107638,\"7e950bb0-f11e-4060-a42c-264fecc57151\"],\"dataMap\":{},\"filename\":\"grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":154.20999999999978,\"pid\":1193,\"ramUsage\":1.75,\"server\":\"harakiri-sushi\",\"threads\":9,\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///9ce01242-138e-4da8-aa86-35eee3e23c69\",\"moduleSequenceNumber\":21185}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const target = ns.args[0]\\r\\n    const threads = ns.args[1]\\r\\n    const delay = ns.args[2]\\r\\n  \\r\\n    if (delay && delay > 0) {\\r\\n      await ns.sleep(delay)\\r\\n    }\\r\\n  \\r\\n    ns.print(`Starting operation: hack on ${target} in ${threads} threads`)\\r\\n    await ns.hack(target, { threads, stock: true })\\r\\n    ns.exit()\\r\\n  }\\r\\n  \",\"filename\":\"hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:file:///34e0d521-1ffe-43f8-b8ea-769ea64bbfa4\",\"moduleSequenceNumber\":22900}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"harakiri-sushi\",\"_hash\":\"4d51de5d68e34b64abafc337497582a9ed6ccdf51fcb55366e3ec23598254bba\",\"moduleSequenceNumber\":22900,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const target = ns.args[0]\\r\\n    const threads = ns.args[1]\\r\\n    const delay = ns.args[2]\\r\\n  \\r\\n    if (delay && delay > 0) {\\r\\n      await ns.sleep(delay)\\r\\n    }\\r\\n  \\r\\n    ns.print(`Starting operation: grow on ${target} in ${threads} threads`)\\r\\n    await ns.grow(target, { threads, stock: true })\\r\\n    ns.exit()\\r\\n  }\\r\\n  \",\"filename\":\"grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///9ce01242-138e-4da8-aa86-35eee3e23c69\",\"moduleSequenceNumber\":21185}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"harakiri-sushi\",\"_hash\":\"7c1d1fb4f0c8f7bb72603cc66887138d311d1d62640ec9a93a5d7a6bde532915\",\"moduleSequenceNumber\":21185,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const target = ns.args[0]\\r\\n    const threads = ns.args[1]\\r\\n    const delay = ns.args[2]\\r\\n  \\r\\n    if (delay && delay > 0) {\\r\\n      await ns.sleep(delay)\\r\\n    }\\r\\n  \\r\\n    ns.print(`Starting operation: weaken on ${target} in ${threads} threads`)\\r\\n    await ns.weaken(target, { threads, stock: true })\\r\\n    ns.exit()\\r\\n  }\\r\\n  \",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"harakiri-sushi\",\"_hash\":\"e952e94dd27d633fd591066b3da072c2321e9de8a9bce8a0ea0e9eae632ecaf0\",\"moduleSequenceNumber\":21142,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"home\",\"zer0\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":15,\"hackDifficulty\":15,\"minDifficulty\":5,\"moneyAvailable\":4000000,\"moneyMax\":100000000,\"numOpenPortsRequired\":0,\"openPortCount\":1,\"requiredHackingSkill\":40,\"serverGrowth\":40}},\"phantasy\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"phantasy\",\"httpPortOpen\":false,\"ip\":\"69.9.9.6\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Phantasy Club\",\"programs\":[],\"ramUsed\":31.5,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omega-net\",18,26575.17767107638,\"01a1395e-78a4-4fa5-bfc2-842dc788177e\"],\"dataMap\":{},\"filename\":\"grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":154.20999999999978,\"pid\":1205,\"ramUsage\":1.75,\"server\":\"phantasy\",\"threads\":18,\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///9ce01242-138e-4da8-aa86-35eee3e23c69\",\"moduleSequenceNumber\":23831}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const target = ns.args[0]\\r\\n    const threads = ns.args[1]\\r\\n    const delay = ns.args[2]\\r\\n  \\r\\n    if (delay && delay > 0) {\\r\\n      await ns.sleep(delay)\\r\\n    }\\r\\n  \\r\\n    ns.print(`Starting operation: hack on ${target} in ${threads} threads`)\\r\\n    await ns.hack(target, { threads, stock: true })\\r\\n    ns.exit()\\r\\n  }\\r\\n  \",\"filename\":\"hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:file:///34e0d521-1ffe-43f8-b8ea-769ea64bbfa4\",\"moduleSequenceNumber\":29114}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"phantasy\",\"_hash\":\"4d51de5d68e34b64abafc337497582a9ed6ccdf51fcb55366e3ec23598254bba\",\"moduleSequenceNumber\":29114,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const target = ns.args[0]\\r\\n    const threads = ns.args[1]\\r\\n    const delay = ns.args[2]\\r\\n  \\r\\n    if (delay && delay > 0) {\\r\\n      await ns.sleep(delay)\\r\\n    }\\r\\n  \\r\\n    ns.print(`Starting operation: grow on ${target} in ${threads} threads`)\\r\\n    await ns.grow(target, { threads, stock: true })\\r\\n    ns.exit()\\r\\n  }\\r\\n  \",\"filename\":\"grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///9ce01242-138e-4da8-aa86-35eee3e23c69\",\"moduleSequenceNumber\":23831}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"phantasy\",\"_hash\":\"7c1d1fb4f0c8f7bb72603cc66887138d311d1d62640ec9a93a5d7a6bde532915\",\"moduleSequenceNumber\":23831,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const target = ns.args[0]\\r\\n    const threads = ns.args[1]\\r\\n    const delay = ns.args[2]\\r\\n  \\r\\n    if (delay && delay > 0) {\\r\\n      await ns.sleep(delay)\\r\\n    }\\r\\n  \\r\\n    ns.print(`Starting operation: weaken on ${target} in ${threads} threads`)\\r\\n    await ns.weaken(target, { threads, stock: true })\\r\\n    ns.exit()\\r\\n  }\\r\\n  \",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"phantasy\",\"_hash\":\"e952e94dd27d633fd591066b3da072c2321e9de8a9bce8a0ea0e9eae632ecaf0\",\"moduleSequenceNumber\":23774,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"nectar-net\",\"crush-fitness\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":20,\"hackDifficulty\":20,\"minDifficulty\":7,\"moneyAvailable\":24000000,\"moneyMax\":600000000,\"numOpenPortsRequired\":2,\"openPortCount\":3,\"requiredHackingSkill\":100,\"serverGrowth\":35}},\"max-hardware\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"max-hardware\",\"httpPortOpen\":false,\"ip\":\"10.5.1.9\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Max Hardware Store\",\"programs\":[],\"ramUsed\":31.5,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omega-net\",18,26575.17767107638,\"86c6a335-a6be-45ce-b3b5-c445e9998163\"],\"dataMap\":{},\"filename\":\"grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":154.20999999999978,\"pid\":1201,\"ramUsage\":1.75,\"server\":\"max-hardware\",\"threads\":18,\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///9ce01242-138e-4da8-aa86-35eee3e23c69\",\"moduleSequenceNumber\":21188}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const target = ns.args[0]\\r\\n    const threads = ns.args[1]\\r\\n    const delay = ns.args[2]\\r\\n  \\r\\n    if (delay && delay > 0) {\\r\\n      await ns.sleep(delay)\\r\\n    }\\r\\n  \\r\\n    ns.print(`Starting operation: hack on ${target} in ${threads} threads`)\\r\\n    await ns.hack(target, { threads, stock: true })\\r\\n    ns.exit()\\r\\n  }\\r\\n  \",\"filename\":\"hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:file:///34e0d521-1ffe-43f8-b8ea-769ea64bbfa4\",\"moduleSequenceNumber\":22903}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"max-hardware\",\"_hash\":\"4d51de5d68e34b64abafc337497582a9ed6ccdf51fcb55366e3ec23598254bba\",\"moduleSequenceNumber\":22903,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const target = ns.args[0]\\r\\n    const threads = ns.args[1]\\r\\n    const delay = ns.args[2]\\r\\n  \\r\\n    if (delay && delay > 0) {\\r\\n      await ns.sleep(delay)\\r\\n    }\\r\\n  \\r\\n    ns.print(`Starting operation: grow on ${target} in ${threads} threads`)\\r\\n    await ns.grow(target, { threads, stock: true })\\r\\n    ns.exit()\\r\\n  }\\r\\n  \",\"filename\":\"grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///9ce01242-138e-4da8-aa86-35eee3e23c69\",\"moduleSequenceNumber\":21188}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"max-hardware\",\"_hash\":\"7c1d1fb4f0c8f7bb72603cc66887138d311d1d62640ec9a93a5d7a6bde532915\",\"moduleSequenceNumber\":21188,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const target = ns.args[0]\\r\\n    const threads = ns.args[1]\\r\\n    const delay = ns.args[2]\\r\\n  \\r\\n    if (delay && delay > 0) {\\r\\n      await ns.sleep(delay)\\r\\n    }\\r\\n  \\r\\n    ns.print(`Starting operation: weaken on ${target} in ${threads} threads`)\\r\\n    await ns.weaken(target, { threads, stock: true })\\r\\n    ns.exit()\\r\\n  }\\r\\n  \",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"max-hardware\",\"_hash\":\"e952e94dd27d633fd591066b3da072c2321e9de8a9bce8a0ea0e9eae632ecaf0\",\"moduleSequenceNumber\":21166,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"sigma-cosmetics\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":15,\"hackDifficulty\":5,\"minDifficulty\":5,\"moneyAvailable\":24738.673514509803,\"moneyMax\":250000000,\"numOpenPortsRequired\":1,\"openPortCount\":1,\"requiredHackingSkill\":80,\"serverGrowth\":30}},\"omega-net\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"omega-net\",\"httpPortOpen\":false,\"ip\":\"85.9.6.6\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"the-new-god.lit\"],\"organizationName\":\"Omega Software\",\"programs\":[],\"ramUsed\":31.5,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omega-net\",18,26575.17767107638,\"581ea138-60b6-4b55-b842-56100160f3ac\"],\"dataMap\":{},\"filename\":\"grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":154.20999999999978,\"pid\":1204,\"ramUsage\":1.75,\"server\":\"omega-net\",\"threads\":18,\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///9ce01242-138e-4da8-aa86-35eee3e23c69\",\"moduleSequenceNumber\":23830}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const target = ns.args[0]\\r\\n    const threads = ns.args[1]\\r\\n    const delay = ns.args[2]\\r\\n  \\r\\n    if (delay && delay > 0) {\\r\\n      await ns.sleep(delay)\\r\\n    }\\r\\n  \\r\\n    ns.print(`Starting operation: hack on ${target} in ${threads} threads`)\\r\\n    await ns.hack(target, { threads, stock: true })\\r\\n    ns.exit()\\r\\n  }\\r\\n  \",\"filename\":\"hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:file:///34e0d521-1ffe-43f8-b8ea-769ea64bbfa4\",\"moduleSequenceNumber\":29113}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"omega-net\",\"_hash\":\"4d51de5d68e34b64abafc337497582a9ed6ccdf51fcb55366e3ec23598254bba\",\"moduleSequenceNumber\":29113,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const target = ns.args[0]\\r\\n    const threads = ns.args[1]\\r\\n    const delay = ns.args[2]\\r\\n  \\r\\n    if (delay && delay > 0) {\\r\\n      await ns.sleep(delay)\\r\\n    }\\r\\n  \\r\\n    ns.print(`Starting operation: grow on ${target} in ${threads} threads`)\\r\\n    await ns.grow(target, { threads, stock: true })\\r\\n    ns.exit()\\r\\n  }\\r\\n  \",\"filename\":\"grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///9ce01242-138e-4da8-aa86-35eee3e23c69\",\"moduleSequenceNumber\":23830}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"omega-net\",\"_hash\":\"7c1d1fb4f0c8f7bb72603cc66887138d311d1d62640ec9a93a5d7a6bde532915\",\"moduleSequenceNumber\":23830,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const target = ns.args[0]\\r\\n    const threads = ns.args[1]\\r\\n    const delay = ns.args[2]\\r\\n  \\r\\n    if (delay && delay > 0) {\\r\\n      await ns.sleep(delay)\\r\\n    }\\r\\n  \\r\\n    ns.print(`Starting operation: weaken on ${target} in ${threads} threads`)\\r\\n    await ns.weaken(target, { threads, stock: true })\\r\\n    ns.exit()\\r\\n  }\\r\\n  \",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"omega-net\",\"_hash\":\"e952e94dd27d633fd591066b3da072c2321e9de8a9bce8a0ea0e9eae632ecaf0\",\"moduleSequenceNumber\":23762,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"CSEC\",\"comptek\",\"johnson-ortho\",\"avmnite-02h\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":28,\"hackDifficulty\":9,\"minDifficulty\":9,\"moneyAvailable\":0,\"moneyMax\":1554987575,\"numOpenPortsRequired\":2,\"openPortCount\":3,\"requiredHackingSkill\":206,\"serverGrowth\":32}},\"crush-fitness\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"crush-fitness\",\"httpPortOpen\":true,\"ip\":\"56.5.8.6\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Crush Fitness\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"phantasy\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":42,\"hackDifficulty\":42,\"minDifficulty\":14,\"moneyAvailable\":42108192,\"moneyMax\":1052704800,\"numOpenPortsRequired\":2,\"openPortCount\":5,\"requiredHackingSkill\":260,\"serverGrowth\":33}},\"iron-gym\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"iron-gym\",\"httpPortOpen\":false,\"ip\":\"58.6.7.2\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Iron Gym Network\",\"programs\":[],\"ramUsed\":31.5,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omega-net\",18,26575.17767107638,\"763fa258-0ea9-4c7e-bdb9-ec5de64ec5d9\"],\"dataMap\":{},\"filename\":\"grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":154.20999999999978,\"pid\":1200,\"ramUsage\":1.75,\"server\":\"iron-gym\",\"threads\":18,\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///9ce01242-138e-4da8-aa86-35eee3e23c69\",\"moduleSequenceNumber\":21187}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const target = ns.args[0]\\r\\n    const threads = ns.args[1]\\r\\n    const delay = ns.args[2]\\r\\n  \\r\\n    if (delay && delay > 0) {\\r\\n      await ns.sleep(delay)\\r\\n    }\\r\\n  \\r\\n    ns.print(`Starting operation: hack on ${target} in ${threads} threads`)\\r\\n    await ns.hack(target, { threads, stock: true })\\r\\n    ns.exit()\\r\\n  }\\r\\n  \",\"filename\":\"hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:file:///34e0d521-1ffe-43f8-b8ea-769ea64bbfa4\",\"moduleSequenceNumber\":22902}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"iron-gym\",\"_hash\":\"4d51de5d68e34b64abafc337497582a9ed6ccdf51fcb55366e3ec23598254bba\",\"moduleSequenceNumber\":22902,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const target = ns.args[0]\\r\\n    const threads = ns.args[1]\\r\\n    const delay = ns.args[2]\\r\\n  \\r\\n    if (delay && delay > 0) {\\r\\n      await ns.sleep(delay)\\r\\n    }\\r\\n  \\r\\n    ns.print(`Starting operation: grow on ${target} in ${threads} threads`)\\r\\n    await ns.grow(target, { threads, stock: true })\\r\\n    ns.exit()\\r\\n  }\\r\\n  \",\"filename\":\"grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///9ce01242-138e-4da8-aa86-35eee3e23c69\",\"moduleSequenceNumber\":21187}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"iron-gym\",\"_hash\":\"7c1d1fb4f0c8f7bb72603cc66887138d311d1d62640ec9a93a5d7a6bde532915\",\"moduleSequenceNumber\":21187,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const target = ns.args[0]\\r\\n    const threads = ns.args[1]\\r\\n    const delay = ns.args[2]\\r\\n  \\r\\n    if (delay && delay > 0) {\\r\\n      await ns.sleep(delay)\\r\\n    }\\r\\n  \\r\\n    ns.print(`Starting operation: weaken on ${target} in ${threads} threads`)\\r\\n    await ns.weaken(target, { threads, stock: true })\\r\\n    ns.exit()\\r\\n  }\\r\\n  \",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"iron-gym\",\"_hash\":\"e952e94dd27d633fd591066b3da072c2321e9de8a9bce8a0ea0e9eae632ecaf0\",\"moduleSequenceNumber\":21148,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":30,\"hackDifficulty\":30,\"minDifficulty\":10,\"moneyAvailable\":20000000,\"moneyMax\":500000000,\"numOpenPortsRequired\":1,\"openPortCount\":1,\"requiredHackingSkill\":100,\"serverGrowth\":20}},\"millenium-fitness\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"millenium-fitness\",\"httpPortOpen\":false,\"ip\":\"31.5.5.7\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Millenium Fitness Network\",\"programs\":[],\"ramUsed\":15.75,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omega-net\",9,26575.17767107638,\"cfe03b14-34e0-408a-a079-239064fbd719\"],\"dataMap\":{},\"filename\":\"grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":154.20999999999978,\"pid\":1195,\"ramUsage\":1.75,\"server\":\"millenium-fitness\",\"threads\":9,\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///9ce01242-138e-4da8-aa86-35eee3e23c69\",\"moduleSequenceNumber\":23829}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const target = ns.args[0]\\r\\n    const threads = ns.args[1]\\r\\n    const delay = ns.args[2]\\r\\n  \\r\\n    if (delay && delay > 0) {\\r\\n      await ns.sleep(delay)\\r\\n    }\\r\\n  \\r\\n    ns.print(`Starting operation: hack on ${target} in ${threads} threads`)\\r\\n    await ns.hack(target, { threads, stock: true })\\r\\n    ns.exit()\\r\\n  }\\r\\n  \",\"filename\":\"hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:file:///34e0d521-1ffe-43f8-b8ea-769ea64bbfa4\",\"moduleSequenceNumber\":29109}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"millenium-fitness\",\"_hash\":\"4d51de5d68e34b64abafc337497582a9ed6ccdf51fcb55366e3ec23598254bba\",\"moduleSequenceNumber\":29109,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const target = ns.args[0]\\r\\n    const threads = ns.args[1]\\r\\n    const delay = ns.args[2]\\r\\n  \\r\\n    if (delay && delay > 0) {\\r\\n      await ns.sleep(delay)\\r\\n    }\\r\\n  \\r\\n    ns.print(`Starting operation: grow on ${target} in ${threads} threads`)\\r\\n    await ns.grow(target, { threads, stock: true })\\r\\n    ns.exit()\\r\\n  }\\r\\n  \",\"filename\":\"grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///9ce01242-138e-4da8-aa86-35eee3e23c69\",\"moduleSequenceNumber\":23829}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"millenium-fitness\",\"_hash\":\"7c1d1fb4f0c8f7bb72603cc66887138d311d1d62640ec9a93a5d7a6bde532915\",\"moduleSequenceNumber\":23829,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const target = ns.args[0]\\r\\n    const threads = ns.args[1]\\r\\n    const delay = ns.args[2]\\r\\n  \\r\\n    if (delay && delay > 0) {\\r\\n      await ns.sleep(delay)\\r\\n    }\\r\\n  \\r\\n    ns.print(`Starting operation: weaken on ${target} in ${threads} threads`)\\r\\n    await ns.weaken(target, { threads, stock: true })\\r\\n    ns.exit()\\r\\n  }\\r\\n  \",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"millenium-fitness\",\"_hash\":\"e952e94dd27d633fd591066b3da072c2321e9de8a9bce8a0ea0e9eae632ecaf0\",\"moduleSequenceNumber\":23822,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"catalyst\",\"aerocorp\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":45,\"hackDifficulty\":45,\"minDifficulty\":15,\"moneyAvailable\":250000000,\"moneyMax\":6250000000,\"numOpenPortsRequired\":3,\"openPortCount\":3,\"requiredHackingSkill\":507,\"serverGrowth\":31}},\"powerhouse-fitness\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"powerhouse-fitness\",\"httpPortOpen\":true,\"ip\":\"10.1.0.9\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[],\"organizationName\":\"Powerhouse Fitness\",\"programs\":[],\"ramUsed\":63,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omega-net\",36,26575.17767107638,\"95df48fb-2254-425c-911c-003f6273d6ca\"],\"dataMap\":{},\"filename\":\"grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":154.20999999999978,\"pid\":1220,\"ramUsage\":1.75,\"server\":\"powerhouse-fitness\",\"threads\":36,\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///9ce01242-138e-4da8-aa86-35eee3e23c69\",\"moduleSequenceNumber\":32258}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const target = ns.args[0]\\r\\n    const threads = ns.args[1]\\r\\n    const delay = ns.args[2]\\r\\n  \\r\\n    if (delay && delay > 0) {\\r\\n      await ns.sleep(delay)\\r\\n    }\\r\\n  \\r\\n    ns.print(`Starting operation: hack on ${target} in ${threads} threads`)\\r\\n    await ns.hack(target, { threads, stock: true })\\r\\n    ns.exit()\\r\\n  }\\r\\n  \",\"filename\":\"hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:file:///34e0d521-1ffe-43f8-b8ea-769ea64bbfa4\",\"moduleSequenceNumber\":30960}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"powerhouse-fitness\",\"_hash\":\"4d51de5d68e34b64abafc337497582a9ed6ccdf51fcb55366e3ec23598254bba\",\"moduleSequenceNumber\":30960,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const target = ns.args[0]\\r\\n    const threads = ns.args[1]\\r\\n    const delay = ns.args[2]\\r\\n  \\r\\n    if (delay && delay > 0) {\\r\\n      await ns.sleep(delay)\\r\\n    }\\r\\n  \\r\\n    ns.print(`Starting operation: grow on ${target} in ${threads} threads`)\\r\\n    await ns.grow(target, { threads, stock: true })\\r\\n    ns.exit()\\r\\n  }\\r\\n  \",\"filename\":\"grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///9ce01242-138e-4da8-aa86-35eee3e23c69\",\"moduleSequenceNumber\":32258}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"powerhouse-fitness\",\"_hash\":\"7c1d1fb4f0c8f7bb72603cc66887138d311d1d62640ec9a93a5d7a6bde532915\",\"moduleSequenceNumber\":32258,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const target = ns.args[0]\\r\\n    const threads = ns.args[1]\\r\\n    const delay = ns.args[2]\\r\\n  \\r\\n    if (delay && delay > 0) {\\r\\n      await ns.sleep(delay)\\r\\n    }\\r\\n  \\r\\n    ns.print(`Starting operation: weaken on ${target} in ${threads} threads`)\\r\\n    await ns.weaken(target, { threads, stock: true })\\r\\n    ns.exit()\\r\\n  }\\r\\n  \",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"powerhouse-fitness\",\"_hash\":\"e952e94dd27d633fd591066b3da072c2321e9de8a9bce8a0ea0e9eae632ecaf0\",\"moduleSequenceNumber\":30954,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"omnitek\",\"megacorp\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":56,\"hackDifficulty\":56,\"minDifficulty\":19,\"moneyAvailable\":900000000,\"moneyMax\":22500000000,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":998,\"serverGrowth\":52}},\"snap-fitness\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"snap-fitness\",\"httpPortOpen\":false,\"ip\":\"39.7.2.0\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Snap Fitness\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"alpha-ent\",\"deltaone\",\"unitalife\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":51,\"hackDifficulty\":51,\"minDifficulty\":17,\"moneyAvailable\":450000000,\"moneyMax\":11250000000,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":768,\"serverGrowth\":43}},\"run4theh111z\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"run4theh111z\",\"httpPortOpen\":true,\"ip\":\"79.9.0.0\",\"isConnectedTo\":false,\"maxRam\":256,\"messages\":[\"simulated-reality.lit\",\"the-new-god.lit\"],\"organizationName\":\"The Runners\",\"programs\":[],\"ramUsed\":255.5,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omega-net\",146,26575.17767107638,\"1eb14198-d2f8-49c3-8091-4036f4d12599\"],\"dataMap\":{},\"filename\":\"grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":154.20999999999978,\"pid\":1227,\"ramUsage\":1.75,\"server\":\"run4theh111z\",\"threads\":146,\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///9ce01242-138e-4da8-aa86-35eee3e23c69\",\"moduleSequenceNumber\":26134}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const target = ns.args[0]\\r\\n    const threads = ns.args[1]\\r\\n    const delay = ns.args[2]\\r\\n  \\r\\n    if (delay && delay > 0) {\\r\\n      await ns.sleep(delay)\\r\\n    }\\r\\n  \\r\\n    ns.print(`Starting operation: hack on ${target} in ${threads} threads`)\\r\\n    await ns.hack(target, { threads, stock: true })\\r\\n    ns.exit()\\r\\n  }\\r\\n  \",\"filename\":\"hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:file:///34e0d521-1ffe-43f8-b8ea-769ea64bbfa4\",\"moduleSequenceNumber\":29128}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"run4theh111z\",\"_hash\":\"4d51de5d68e34b64abafc337497582a9ed6ccdf51fcb55366e3ec23598254bba\",\"moduleSequenceNumber\":29128,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const target = ns.args[0]\\r\\n    const threads = ns.args[1]\\r\\n    const delay = ns.args[2]\\r\\n  \\r\\n    if (delay && delay > 0) {\\r\\n      await ns.sleep(delay)\\r\\n    }\\r\\n  \\r\\n    ns.print(`Starting operation: grow on ${target} in ${threads} threads`)\\r\\n    await ns.grow(target, { threads, stock: true })\\r\\n    ns.exit()\\r\\n  }\\r\\n  \",\"filename\":\"grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///9ce01242-138e-4da8-aa86-35eee3e23c69\",\"moduleSequenceNumber\":26134}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"run4theh111z\",\"_hash\":\"7c1d1fb4f0c8f7bb72603cc66887138d311d1d62640ec9a93a5d7a6bde532915\",\"moduleSequenceNumber\":26134,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const target = ns.args[0]\\r\\n    const threads = ns.args[1]\\r\\n    const delay = ns.args[2]\\r\\n  \\r\\n    if (delay && delay > 0) {\\r\\n      await ns.sleep(delay)\\r\\n    }\\r\\n  \\r\\n    ns.print(`Starting operation: weaken on ${target} in ${threads} threads`)\\r\\n    await ns.weaken(target, { threads, stock: true })\\r\\n    ns.exit()\\r\\n  }\\r\\n  \",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"run4theh111z\",\"_hash\":\"e952e94dd27d633fd591066b3da072c2321e9de8a9bce8a0ea0e9eae632ecaf0\",\"moduleSequenceNumber\":26120,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"zb-def\",\"stormtech\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":0,\"hackDifficulty\":0,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":4,\"openPortCount\":4,\"requiredHackingSkill\":543,\"serverGrowth\":0}},\"I.I.I.I\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"I.I.I.I\",\"httpPortOpen\":false,\"ip\":\"94.7.4.5\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"democracy-is-dead.lit\"],\"organizationName\":\"I.I.I.I\",\"programs\":[],\"ramUsed\":63,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omega-net\",36,26575.17767107638,\"0c9b0912-2f94-4619-99c0-233ee14d403f\"],\"dataMap\":{},\"filename\":\"grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":154.20999999999978,\"pid\":1217,\"ramUsage\":1.75,\"server\":\"I.I.I.I\",\"threads\":36,\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///9ce01242-138e-4da8-aa86-35eee3e23c69\",\"moduleSequenceNumber\":23839}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const target = ns.args[0]\\r\\n    const threads = ns.args[1]\\r\\n    const delay = ns.args[2]\\r\\n  \\r\\n    if (delay && delay > 0) {\\r\\n      await ns.sleep(delay)\\r\\n    }\\r\\n  \\r\\n    ns.print(`Starting operation: hack on ${target} in ${threads} threads`)\\r\\n    await ns.hack(target, { threads, stock: true })\\r\\n    ns.exit()\\r\\n  }\\r\\n  \",\"filename\":\"hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:file:///34e0d521-1ffe-43f8-b8ea-769ea64bbfa4\",\"moduleSequenceNumber\":29123}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"I.I.I.I\",\"_hash\":\"4d51de5d68e34b64abafc337497582a9ed6ccdf51fcb55366e3ec23598254bba\",\"moduleSequenceNumber\":29123,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const target = ns.args[0]\\r\\n    const threads = ns.args[1]\\r\\n    const delay = ns.args[2]\\r\\n  \\r\\n    if (delay && delay > 0) {\\r\\n      await ns.sleep(delay)\\r\\n    }\\r\\n  \\r\\n    ns.print(`Starting operation: grow on ${target} in ${threads} threads`)\\r\\n    await ns.grow(target, { threads, stock: true })\\r\\n    ns.exit()\\r\\n  }\\r\\n  \",\"filename\":\"grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///9ce01242-138e-4da8-aa86-35eee3e23c69\",\"moduleSequenceNumber\":23839}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"I.I.I.I\",\"_hash\":\"7c1d1fb4f0c8f7bb72603cc66887138d311d1d62640ec9a93a5d7a6bde532915\",\"moduleSequenceNumber\":23839,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const target = ns.args[0]\\r\\n    const threads = ns.args[1]\\r\\n    const delay = ns.args[2]\\r\\n  \\r\\n    if (delay && delay > 0) {\\r\\n      await ns.sleep(delay)\\r\\n    }\\r\\n  \\r\\n    ns.print(`Starting operation: weaken on ${target} in ${threads} threads`)\\r\\n    await ns.weaken(target, { threads, stock: true })\\r\\n    ns.exit()\\r\\n  }\\r\\n  \",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"I.I.I.I\",\"_hash\":\"e952e94dd27d633fd591066b3da072c2321e9de8a9bce8a0ea0e9eae632ecaf0\",\"moduleSequenceNumber\":23816,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"the-hub\",\"lexo-corp\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":0,\"hackDifficulty\":0,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":3,\"openPortCount\":3,\"requiredHackingSkill\":351,\"serverGrowth\":0}},\"avmnite-02h\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"avmnite-02h\",\"httpPortOpen\":false,\"ip\":\"39.0.9.2\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[\"democracy-is-dead.lit\"],\"organizationName\":\"NiteSec\",\"programs\":[],\"ramUsed\":127.75,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omega-net\",73,26575.17767107638,\"fcf04574-34ae-4a09-bd69-1810d915d22a\"],\"dataMap\":{},\"filename\":\"grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":154.20999999999978,\"pid\":1221,\"ramUsage\":1.75,\"server\":\"avmnite-02h\",\"threads\":73,\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///9ce01242-138e-4da8-aa86-35eee3e23c69\",\"moduleSequenceNumber\":23840}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const target = ns.args[0]\\r\\n    const threads = ns.args[1]\\r\\n    const delay = ns.args[2]\\r\\n  \\r\\n    if (delay && delay > 0) {\\r\\n      await ns.sleep(delay)\\r\\n    }\\r\\n  \\r\\n    ns.print(`Starting operation: hack on ${target} in ${threads} threads`)\\r\\n    await ns.hack(target, { threads, stock: true })\\r\\n    ns.exit()\\r\\n  }\\r\\n  \",\"filename\":\"hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:file:///34e0d521-1ffe-43f8-b8ea-769ea64bbfa4\",\"moduleSequenceNumber\":29125}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"avmnite-02h\",\"_hash\":\"4d51de5d68e34b64abafc337497582a9ed6ccdf51fcb55366e3ec23598254bba\",\"moduleSequenceNumber\":29125,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const target = ns.args[0]\\r\\n    const threads = ns.args[1]\\r\\n    const delay = ns.args[2]\\r\\n  \\r\\n    if (delay && delay > 0) {\\r\\n      await ns.sleep(delay)\\r\\n    }\\r\\n  \\r\\n    ns.print(`Starting operation: grow on ${target} in ${threads} threads`)\\r\\n    await ns.grow(target, { threads, stock: true })\\r\\n    ns.exit()\\r\\n  }\\r\\n  \",\"filename\":\"grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///9ce01242-138e-4da8-aa86-35eee3e23c69\",\"moduleSequenceNumber\":23840}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"avmnite-02h\",\"_hash\":\"7c1d1fb4f0c8f7bb72603cc66887138d311d1d62640ec9a93a5d7a6bde532915\",\"moduleSequenceNumber\":23840,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const target = ns.args[0]\\r\\n    const threads = ns.args[1]\\r\\n    const delay = ns.args[2]\\r\\n  \\r\\n    if (delay && delay > 0) {\\r\\n      await ns.sleep(delay)\\r\\n    }\\r\\n  \\r\\n    ns.print(`Starting operation: weaken on ${target} in ${threads} threads`)\\r\\n    await ns.weaken(target, { threads, stock: true })\\r\\n    ns.exit()\\r\\n  }\\r\\n  \",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"avmnite-02h\",\"_hash\":\"e952e94dd27d633fd591066b3da072c2321e9de8a9bce8a0ea0e9eae632ecaf0\",\"moduleSequenceNumber\":23780,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"omega-net\",\"syscore\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":0,\"hackDifficulty\":0,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":2,\"openPortCount\":3,\"requiredHackingSkill\":217,\"serverGrowth\":0}},\".\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\".\",\"httpPortOpen\":true,\"ip\":\"26.2.6.1\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\".\",\"programs\":[],\"ramUsed\":15.75,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omega-net\",9,26575.17767107638,\"1ce94d08-46b0-487b-8e3d-6ea42988c1ff\"],\"dataMap\":{},\"filename\":\"grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":154.20999999999978,\"pid\":1199,\"ramUsage\":1.75,\"server\":\".\",\"threads\":9,\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///9ce01242-138e-4da8-aa86-35eee3e23c69\",\"moduleSequenceNumber\":26129}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const target = ns.args[0]\\r\\n    const threads = ns.args[1]\\r\\n    const delay = ns.args[2]\\r\\n  \\r\\n    if (delay && delay > 0) {\\r\\n      await ns.sleep(delay)\\r\\n    }\\r\\n  \\r\\n    ns.print(`Starting operation: hack on ${target} in ${threads} threads`)\\r\\n    await ns.hack(target, { threads, stock: true })\\r\\n    ns.exit()\\r\\n  }\\r\\n  \",\"filename\":\"hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:file:///34e0d521-1ffe-43f8-b8ea-769ea64bbfa4\",\"moduleSequenceNumber\":29112}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\".\",\"_hash\":\"4d51de5d68e34b64abafc337497582a9ed6ccdf51fcb55366e3ec23598254bba\",\"moduleSequenceNumber\":29112,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const target = ns.args[0]\\r\\n    const threads = ns.args[1]\\r\\n    const delay = ns.args[2]\\r\\n  \\r\\n    if (delay && delay > 0) {\\r\\n      await ns.sleep(delay)\\r\\n    }\\r\\n  \\r\\n    ns.print(`Starting operation: grow on ${target} in ${threads} threads`)\\r\\n    await ns.grow(target, { threads, stock: true })\\r\\n    ns.exit()\\r\\n  }\\r\\n  \",\"filename\":\"grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///9ce01242-138e-4da8-aa86-35eee3e23c69\",\"moduleSequenceNumber\":26129}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\".\",\"_hash\":\"7c1d1fb4f0c8f7bb72603cc66887138d311d1d62640ec9a93a5d7a6bde532915\",\"moduleSequenceNumber\":26129,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const target = ns.args[0]\\r\\n    const threads = ns.args[1]\\r\\n    const delay = ns.args[2]\\r\\n  \\r\\n    if (delay && delay > 0) {\\r\\n      await ns.sleep(delay)\\r\\n    }\\r\\n  \\r\\n    ns.print(`Starting operation: weaken on ${target} in ${threads} threads`)\\r\\n    await ns.weaken(target, { threads, stock: true })\\r\\n    ns.exit()\\r\\n  }\\r\\n  \",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\".\",\"_hash\":\"e952e94dd27d633fd591066b3da072c2321e9de8a9bce8a0ea0e9eae632ecaf0\",\"moduleSequenceNumber\":26126,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"fulcrumtech\",\"b-and-a\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":0,\"hackDifficulty\":0,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":4,\"openPortCount\":4,\"requiredHackingSkill\":542,\"serverGrowth\":0}},\"CSEC\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"CSEC\",\"httpPortOpen\":false,\"ip\":\"9.9.9.3\",\"isConnectedTo\":false,\"maxRam\":8,\"messages\":[\"democracy-is-dead.lit\"],\"organizationName\":\"CyberSec\",\"programs\":[],\"ramUsed\":7,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omega-net\",4,26575.17767107638,\"846b3548-3117-4cb6-a14d-7173e96cd79b\"],\"dataMap\":{},\"filename\":\"grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":154.20999999999978,\"pid\":1188,\"ramUsage\":1.75,\"server\":\"CSEC\",\"threads\":4,\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///9ce01242-138e-4da8-aa86-35eee3e23c69\",\"moduleSequenceNumber\":21180}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const target = ns.args[0]\\r\\n    const threads = ns.args[1]\\r\\n    const delay = ns.args[2]\\r\\n  \\r\\n    if (delay && delay > 0) {\\r\\n      await ns.sleep(delay)\\r\\n    }\\r\\n  \\r\\n    ns.print(`Starting operation: hack on ${target} in ${threads} threads`)\\r\\n    await ns.hack(target, { threads, stock: true })\\r\\n    ns.exit()\\r\\n  }\\r\\n  \",\"filename\":\"hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:file:///34e0d521-1ffe-43f8-b8ea-769ea64bbfa4\",\"moduleSequenceNumber\":22895}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"CSEC\",\"_hash\":\"4d51de5d68e34b64abafc337497582a9ed6ccdf51fcb55366e3ec23598254bba\",\"moduleSequenceNumber\":22895,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const target = ns.args[0]\\r\\n    const threads = ns.args[1]\\r\\n    const delay = ns.args[2]\\r\\n  \\r\\n    if (delay && delay > 0) {\\r\\n      await ns.sleep(delay)\\r\\n    }\\r\\n  \\r\\n    ns.print(`Starting operation: grow on ${target} in ${threads} threads`)\\r\\n    await ns.grow(target, { threads, stock: true })\\r\\n    ns.exit()\\r\\n  }\\r\\n  \",\"filename\":\"grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///9ce01242-138e-4da8-aa86-35eee3e23c69\",\"moduleSequenceNumber\":21180}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"CSEC\",\"_hash\":\"7c1d1fb4f0c8f7bb72603cc66887138d311d1d62640ec9a93a5d7a6bde532915\",\"moduleSequenceNumber\":21180,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const target = ns.args[0]\\r\\n    const threads = ns.args[1]\\r\\n    const delay = ns.args[2]\\r\\n  \\r\\n    if (delay && delay > 0) {\\r\\n      await ns.sleep(delay)\\r\\n    }\\r\\n  \\r\\n    ns.print(`Starting operation: weaken on ${target} in ${threads} threads`)\\r\\n    await ns.weaken(target, { threads, stock: true })\\r\\n    ns.exit()\\r\\n  }\\r\\n  \",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"CSEC\",\"_hash\":\"e952e94dd27d633fd591066b3da072c2321e9de8a9bce8a0ea0e9eae632ecaf0\",\"moduleSequenceNumber\":21154,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"n00dles\",\"neo-net\",\"omega-net\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":0,\"hackDifficulty\":0,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":1,\"openPortCount\":1,\"requiredHackingSkill\":58,\"serverGrowth\":0}},\"The-Cave\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"The-Cave\",\"httpPortOpen\":false,\"ip\":\"34.8.9.6\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"alpha-omega.lit\"],\"organizationName\":\"Helios\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"nwo\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":0,\"hackDifficulty\":0,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":925,\"serverGrowth\":0}},\"w0r1d_d43m0n\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"w0r1d_d43m0n\",\"httpPortOpen\":false,\"ip\":\"34.3.3.6\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"w0r1d_d43m0n\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":0,\"hackDifficulty\":0,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":3000,\"serverGrowth\":0}},\"darkweb\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"darkweb\",\"httpPortOpen\":true,\"ip\":\"25.7.8.3\",\"isConnectedTo\":false,\"maxRam\":1,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-1024-b5a5bf75-d570-44c7-9489-fff9a2b752ce\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-1024-b5a5bf75-d570-44c7-9489-fff9a2b752ce\",\"httpPortOpen\":false,\"ip\":\"66.0.8.9\",\"isConnectedTo\":false,\"maxRam\":1024,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":1023.75,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omega-net\",585,26575.17767107638,\"fe27f567-427a-4a9d-b05b-024083c77d0c\"],\"dataMap\":{},\"filename\":\"grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":154.20999999999978,\"pid\":1231,\"ramUsage\":1.75,\"server\":\"pserv-1024-b5a5bf75-d570-44c7-9489-fff9a2b752ce\",\"threads\":585,\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///9ce01242-138e-4da8-aa86-35eee3e23c69\",\"moduleSequenceNumber\":43064}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const target = ns.args[0]\\r\\n    const threads = ns.args[1]\\r\\n    const delay = ns.args[2]\\r\\n  \\r\\n    if (delay && delay > 0) {\\r\\n      await ns.sleep(delay)\\r\\n    }\\r\\n  \\r\\n    ns.print(`Starting operation: hack on ${target} in ${threads} threads`)\\r\\n    await ns.hack(target, { threads, stock: true })\\r\\n    ns.exit()\\r\\n  }\\r\\n  \",\"filename\":\"hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:file:///34e0d521-1ffe-43f8-b8ea-769ea64bbfa4\",\"moduleSequenceNumber\":40855}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"pserv-1024-b5a5bf75-d570-44c7-9489-fff9a2b752ce\",\"_hash\":\"4d51de5d68e34b64abafc337497582a9ed6ccdf51fcb55366e3ec23598254bba\",\"moduleSequenceNumber\":40855,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const target = ns.args[0]\\r\\n    const threads = ns.args[1]\\r\\n    const delay = ns.args[2]\\r\\n  \\r\\n    if (delay && delay > 0) {\\r\\n      await ns.sleep(delay)\\r\\n    }\\r\\n  \\r\\n    ns.print(`Starting operation: grow on ${target} in ${threads} threads`)\\r\\n    await ns.grow(target, { threads, stock: true })\\r\\n    ns.exit()\\r\\n  }\\r\\n  \",\"filename\":\"grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///9ce01242-138e-4da8-aa86-35eee3e23c69\",\"moduleSequenceNumber\":43064}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"pserv-1024-b5a5bf75-d570-44c7-9489-fff9a2b752ce\",\"_hash\":\"7c1d1fb4f0c8f7bb72603cc66887138d311d1d62640ec9a93a5d7a6bde532915\",\"moduleSequenceNumber\":43064,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const target = ns.args[0]\\r\\n    const threads = ns.args[1]\\r\\n    const delay = ns.args[2]\\r\\n  \\r\\n    if (delay && delay > 0) {\\r\\n      await ns.sleep(delay)\\r\\n    }\\r\\n  \\r\\n    ns.print(`Starting operation: weaken on ${target} in ${threads} threads`)\\r\\n    await ns.weaken(target, { threads, stock: true })\\r\\n    ns.exit()\\r\\n  }\\r\\n  \",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"pserv-1024-b5a5bf75-d570-44c7-9489-fff9a2b752ce\",\"_hash\":\"e952e94dd27d633fd591066b3da072c2321e9de8a9bce8a0ea0e9eae632ecaf0\",\"moduleSequenceNumber\":40715,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-1024-8d4d3e75-dde0-4983-a18c-1883a0e6c2d8\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-1024-8d4d3e75-dde0-4983-a18c-1883a0e6c2d8\",\"httpPortOpen\":false,\"ip\":\"36.6.5.6\",\"isConnectedTo\":false,\"maxRam\":1024,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":1023.75,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omega-net\",585,26575.17767107638,\"e7c37b43-8ad1-4d68-a1b2-a67b905dd24d\"],\"dataMap\":{},\"filename\":\"grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":154.20999999999978,\"pid\":1232,\"ramUsage\":1.75,\"server\":\"pserv-1024-8d4d3e75-dde0-4983-a18c-1883a0e6c2d8\",\"threads\":585,\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///9ce01242-138e-4da8-aa86-35eee3e23c69\",\"moduleSequenceNumber\":43065}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const target = ns.args[0]\\r\\n    const threads = ns.args[1]\\r\\n    const delay = ns.args[2]\\r\\n  \\r\\n    if (delay && delay > 0) {\\r\\n      await ns.sleep(delay)\\r\\n    }\\r\\n  \\r\\n    ns.print(`Starting operation: hack on ${target} in ${threads} threads`)\\r\\n    await ns.hack(target, { threads, stock: true })\\r\\n    ns.exit()\\r\\n  }\\r\\n  \",\"filename\":\"hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:file:///34e0d521-1ffe-43f8-b8ea-769ea64bbfa4\",\"moduleSequenceNumber\":40856}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"pserv-1024-8d4d3e75-dde0-4983-a18c-1883a0e6c2d8\",\"_hash\":\"4d51de5d68e34b64abafc337497582a9ed6ccdf51fcb55366e3ec23598254bba\",\"moduleSequenceNumber\":40856,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const target = ns.args[0]\\r\\n    const threads = ns.args[1]\\r\\n    const delay = ns.args[2]\\r\\n  \\r\\n    if (delay && delay > 0) {\\r\\n      await ns.sleep(delay)\\r\\n    }\\r\\n  \\r\\n    ns.print(`Starting operation: grow on ${target} in ${threads} threads`)\\r\\n    await ns.grow(target, { threads, stock: true })\\r\\n    ns.exit()\\r\\n  }\\r\\n  \",\"filename\":\"grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///9ce01242-138e-4da8-aa86-35eee3e23c69\",\"moduleSequenceNumber\":43065}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"pserv-1024-8d4d3e75-dde0-4983-a18c-1883a0e6c2d8\",\"_hash\":\"7c1d1fb4f0c8f7bb72603cc66887138d311d1d62640ec9a93a5d7a6bde532915\",\"moduleSequenceNumber\":43065,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const target = ns.args[0]\\r\\n    const threads = ns.args[1]\\r\\n    const delay = ns.args[2]\\r\\n  \\r\\n    if (delay && delay > 0) {\\r\\n      await ns.sleep(delay)\\r\\n    }\\r\\n  \\r\\n    ns.print(`Starting operation: weaken on ${target} in ${threads} threads`)\\r\\n    await ns.weaken(target, { threads, stock: true })\\r\\n    ns.exit()\\r\\n  }\\r\\n  \",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"pserv-1024-8d4d3e75-dde0-4983-a18c-1883a0e6c2d8\",\"_hash\":\"e952e94dd27d633fd591066b3da072c2321e9de8a9bce8a0ea0e9eae632ecaf0\",\"moduleSequenceNumber\":40721,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-1024-e821b9e8-0767-475b-8775-fc9987eac400\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-1024-e821b9e8-0767-475b-8775-fc9987eac400\",\"httpPortOpen\":false,\"ip\":\"24.3.9.4\",\"isConnectedTo\":false,\"maxRam\":1024,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":1023.75,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omega-net\",585,26575.17767107638,\"f2ce4dcd-1b50-4127-a98a-756cbc7a1d3c\"],\"dataMap\":{},\"filename\":\"grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":154.20999999999978,\"pid\":1233,\"ramUsage\":1.75,\"server\":\"pserv-1024-e821b9e8-0767-475b-8775-fc9987eac400\",\"threads\":585,\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///9ce01242-138e-4da8-aa86-35eee3e23c69\",\"moduleSequenceNumber\":43066}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const target = ns.args[0]\\r\\n    const threads = ns.args[1]\\r\\n    const delay = ns.args[2]\\r\\n  \\r\\n    if (delay && delay > 0) {\\r\\n      await ns.sleep(delay)\\r\\n    }\\r\\n  \\r\\n    ns.print(`Starting operation: hack on ${target} in ${threads} threads`)\\r\\n    await ns.hack(target, { threads, stock: true })\\r\\n    ns.exit()\\r\\n  }\\r\\n  \",\"filename\":\"hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:file:///34e0d521-1ffe-43f8-b8ea-769ea64bbfa4\",\"moduleSequenceNumber\":40857}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"pserv-1024-e821b9e8-0767-475b-8775-fc9987eac400\",\"_hash\":\"4d51de5d68e34b64abafc337497582a9ed6ccdf51fcb55366e3ec23598254bba\",\"moduleSequenceNumber\":40857,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const target = ns.args[0]\\r\\n    const threads = ns.args[1]\\r\\n    const delay = ns.args[2]\\r\\n  \\r\\n    if (delay && delay > 0) {\\r\\n      await ns.sleep(delay)\\r\\n    }\\r\\n  \\r\\n    ns.print(`Starting operation: grow on ${target} in ${threads} threads`)\\r\\n    await ns.grow(target, { threads, stock: true })\\r\\n    ns.exit()\\r\\n  }\\r\\n  \",\"filename\":\"grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///9ce01242-138e-4da8-aa86-35eee3e23c69\",\"moduleSequenceNumber\":43066}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"pserv-1024-e821b9e8-0767-475b-8775-fc9987eac400\",\"_hash\":\"7c1d1fb4f0c8f7bb72603cc66887138d311d1d62640ec9a93a5d7a6bde532915\",\"moduleSequenceNumber\":43066,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const target = ns.args[0]\\r\\n    const threads = ns.args[1]\\r\\n    const delay = ns.args[2]\\r\\n  \\r\\n    if (delay && delay > 0) {\\r\\n      await ns.sleep(delay)\\r\\n    }\\r\\n  \\r\\n    ns.print(`Starting operation: weaken on ${target} in ${threads} threads`)\\r\\n    await ns.weaken(target, { threads, stock: true })\\r\\n    ns.exit()\\r\\n  }\\r\\n  \",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"pserv-1024-e821b9e8-0767-475b-8775-fc9987eac400\",\"_hash\":\"e952e94dd27d633fd591066b3da072c2321e9de8a9bce8a0ea0e9eae632ecaf0\",\"moduleSequenceNumber\":40727,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-1024-40d52f47-02e4-4a9f-99d8-748112d029a2\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-1024-40d52f47-02e4-4a9f-99d8-748112d029a2\",\"httpPortOpen\":false,\"ip\":\"36.6.2.5\",\"isConnectedTo\":false,\"maxRam\":1024,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":1023.75,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omega-net\",585,26575.17767107638,\"c89207e2-45cd-4b7d-b2f7-ad44a4652843\"],\"dataMap\":{},\"filename\":\"grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":154.20999999999978,\"pid\":1234,\"ramUsage\":1.75,\"server\":\"pserv-1024-40d52f47-02e4-4a9f-99d8-748112d029a2\",\"threads\":585,\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///9ce01242-138e-4da8-aa86-35eee3e23c69\",\"moduleSequenceNumber\":43067}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const target = ns.args[0]\\r\\n    const threads = ns.args[1]\\r\\n    const delay = ns.args[2]\\r\\n  \\r\\n    if (delay && delay > 0) {\\r\\n      await ns.sleep(delay)\\r\\n    }\\r\\n  \\r\\n    ns.print(`Starting operation: hack on ${target} in ${threads} threads`)\\r\\n    await ns.hack(target, { threads, stock: true })\\r\\n    ns.exit()\\r\\n  }\\r\\n  \",\"filename\":\"hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:file:///34e0d521-1ffe-43f8-b8ea-769ea64bbfa4\",\"moduleSequenceNumber\":40858}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"pserv-1024-40d52f47-02e4-4a9f-99d8-748112d029a2\",\"_hash\":\"4d51de5d68e34b64abafc337497582a9ed6ccdf51fcb55366e3ec23598254bba\",\"moduleSequenceNumber\":40858,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const target = ns.args[0]\\r\\n    const threads = ns.args[1]\\r\\n    const delay = ns.args[2]\\r\\n  \\r\\n    if (delay && delay > 0) {\\r\\n      await ns.sleep(delay)\\r\\n    }\\r\\n  \\r\\n    ns.print(`Starting operation: grow on ${target} in ${threads} threads`)\\r\\n    await ns.grow(target, { threads, stock: true })\\r\\n    ns.exit()\\r\\n  }\\r\\n  \",\"filename\":\"grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///9ce01242-138e-4da8-aa86-35eee3e23c69\",\"moduleSequenceNumber\":43067}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"pserv-1024-40d52f47-02e4-4a9f-99d8-748112d029a2\",\"_hash\":\"7c1d1fb4f0c8f7bb72603cc66887138d311d1d62640ec9a93a5d7a6bde532915\",\"moduleSequenceNumber\":43067,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const target = ns.args[0]\\r\\n    const threads = ns.args[1]\\r\\n    const delay = ns.args[2]\\r\\n  \\r\\n    if (delay && delay > 0) {\\r\\n      await ns.sleep(delay)\\r\\n    }\\r\\n  \\r\\n    ns.print(`Starting operation: weaken on ${target} in ${threads} threads`)\\r\\n    await ns.weaken(target, { threads, stock: true })\\r\\n    ns.exit()\\r\\n  }\\r\\n  \",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"pserv-1024-40d52f47-02e4-4a9f-99d8-748112d029a2\",\"_hash\":\"e952e94dd27d633fd591066b3da072c2321e9de8a9bce8a0ea0e9eae632ecaf0\",\"moduleSequenceNumber\":40733,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-1024-59648f7d-7551-491d-8270-7ca85c96053a\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-1024-59648f7d-7551-491d-8270-7ca85c96053a\",\"httpPortOpen\":false,\"ip\":\"76.6.4.6\",\"isConnectedTo\":false,\"maxRam\":1024,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":1023.75,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omega-net\",585,26575.17767107638,\"8558eceb-22e0-4f50-b617-8c13764e63ca\"],\"dataMap\":{},\"filename\":\"grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":154.20999999999978,\"pid\":1235,\"ramUsage\":1.75,\"server\":\"pserv-1024-59648f7d-7551-491d-8270-7ca85c96053a\",\"threads\":585,\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///9ce01242-138e-4da8-aa86-35eee3e23c69\",\"moduleSequenceNumber\":43068}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const target = ns.args[0]\\r\\n    const threads = ns.args[1]\\r\\n    const delay = ns.args[2]\\r\\n  \\r\\n    if (delay && delay > 0) {\\r\\n      await ns.sleep(delay)\\r\\n    }\\r\\n  \\r\\n    ns.print(`Starting operation: hack on ${target} in ${threads} threads`)\\r\\n    await ns.hack(target, { threads, stock: true })\\r\\n    ns.exit()\\r\\n  }\\r\\n  \",\"filename\":\"hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:file:///34e0d521-1ffe-43f8-b8ea-769ea64bbfa4\",\"moduleSequenceNumber\":40859}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"pserv-1024-59648f7d-7551-491d-8270-7ca85c96053a\",\"_hash\":\"4d51de5d68e34b64abafc337497582a9ed6ccdf51fcb55366e3ec23598254bba\",\"moduleSequenceNumber\":40859,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const target = ns.args[0]\\r\\n    const threads = ns.args[1]\\r\\n    const delay = ns.args[2]\\r\\n  \\r\\n    if (delay && delay > 0) {\\r\\n      await ns.sleep(delay)\\r\\n    }\\r\\n  \\r\\n    ns.print(`Starting operation: grow on ${target} in ${threads} threads`)\\r\\n    await ns.grow(target, { threads, stock: true })\\r\\n    ns.exit()\\r\\n  }\\r\\n  \",\"filename\":\"grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///9ce01242-138e-4da8-aa86-35eee3e23c69\",\"moduleSequenceNumber\":43068}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"pserv-1024-59648f7d-7551-491d-8270-7ca85c96053a\",\"_hash\":\"7c1d1fb4f0c8f7bb72603cc66887138d311d1d62640ec9a93a5d7a6bde532915\",\"moduleSequenceNumber\":43068,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const target = ns.args[0]\\r\\n    const threads = ns.args[1]\\r\\n    const delay = ns.args[2]\\r\\n  \\r\\n    if (delay && delay > 0) {\\r\\n      await ns.sleep(delay)\\r\\n    }\\r\\n  \\r\\n    ns.print(`Starting operation: weaken on ${target} in ${threads} threads`)\\r\\n    await ns.weaken(target, { threads, stock: true })\\r\\n    ns.exit()\\r\\n  }\\r\\n  \",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"pserv-1024-59648f7d-7551-491d-8270-7ca85c96053a\",\"_hash\":\"e952e94dd27d633fd591066b3da072c2321e9de8a9bce8a0ea0e9eae632ecaf0\",\"moduleSequenceNumber\":40739,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-1024-98c3a23c-b27d-4e25-a25f-a3f7e345ff45\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-1024-98c3a23c-b27d-4e25-a25f-a3f7e345ff45\",\"httpPortOpen\":false,\"ip\":\"22.0.2.4\",\"isConnectedTo\":false,\"maxRam\":1024,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":1023.75,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omega-net\",585,26575.17767107638,\"bcb66a92-ac1e-4ba6-80f5-3f166c4d0cbb\"],\"dataMap\":{},\"filename\":\"grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":154.20999999999978,\"pid\":1236,\"ramUsage\":1.75,\"server\":\"pserv-1024-98c3a23c-b27d-4e25-a25f-a3f7e345ff45\",\"threads\":585,\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///9ce01242-138e-4da8-aa86-35eee3e23c69\",\"moduleSequenceNumber\":43069}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const target = ns.args[0]\\r\\n    const threads = ns.args[1]\\r\\n    const delay = ns.args[2]\\r\\n  \\r\\n    if (delay && delay > 0) {\\r\\n      await ns.sleep(delay)\\r\\n    }\\r\\n  \\r\\n    ns.print(`Starting operation: hack on ${target} in ${threads} threads`)\\r\\n    await ns.hack(target, { threads, stock: true })\\r\\n    ns.exit()\\r\\n  }\\r\\n  \",\"filename\":\"hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:file:///34e0d521-1ffe-43f8-b8ea-769ea64bbfa4\",\"moduleSequenceNumber\":40860}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"pserv-1024-98c3a23c-b27d-4e25-a25f-a3f7e345ff45\",\"_hash\":\"4d51de5d68e34b64abafc337497582a9ed6ccdf51fcb55366e3ec23598254bba\",\"moduleSequenceNumber\":40860,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const target = ns.args[0]\\r\\n    const threads = ns.args[1]\\r\\n    const delay = ns.args[2]\\r\\n  \\r\\n    if (delay && delay > 0) {\\r\\n      await ns.sleep(delay)\\r\\n    }\\r\\n  \\r\\n    ns.print(`Starting operation: grow on ${target} in ${threads} threads`)\\r\\n    await ns.grow(target, { threads, stock: true })\\r\\n    ns.exit()\\r\\n  }\\r\\n  \",\"filename\":\"grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///9ce01242-138e-4da8-aa86-35eee3e23c69\",\"moduleSequenceNumber\":43069}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"pserv-1024-98c3a23c-b27d-4e25-a25f-a3f7e345ff45\",\"_hash\":\"7c1d1fb4f0c8f7bb72603cc66887138d311d1d62640ec9a93a5d7a6bde532915\",\"moduleSequenceNumber\":43069,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const target = ns.args[0]\\r\\n    const threads = ns.args[1]\\r\\n    const delay = ns.args[2]\\r\\n  \\r\\n    if (delay && delay > 0) {\\r\\n      await ns.sleep(delay)\\r\\n    }\\r\\n  \\r\\n    ns.print(`Starting operation: weaken on ${target} in ${threads} threads`)\\r\\n    await ns.weaken(target, { threads, stock: true })\\r\\n    ns.exit()\\r\\n  }\\r\\n  \",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"pserv-1024-98c3a23c-b27d-4e25-a25f-a3f7e345ff45\",\"_hash\":\"e952e94dd27d633fd591066b3da072c2321e9de8a9bce8a0ea0e9eae632ecaf0\",\"moduleSequenceNumber\":40745,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-1024-3818a3fe-1461-4897-b993-fd2b4810e643\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-1024-3818a3fe-1461-4897-b993-fd2b4810e643\",\"httpPortOpen\":false,\"ip\":\"87.9.7.8\",\"isConnectedTo\":false,\"maxRam\":1024,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":1023.75,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omega-net\",585,26575.17767107638,\"fc1d88f7-18f9-42d1-a225-9ac5fde26081\"],\"dataMap\":{},\"filename\":\"grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":154.20999999999978,\"pid\":1237,\"ramUsage\":1.75,\"server\":\"pserv-1024-3818a3fe-1461-4897-b993-fd2b4810e643\",\"threads\":585,\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///9ce01242-138e-4da8-aa86-35eee3e23c69\",\"moduleSequenceNumber\":43070}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const target = ns.args[0]\\r\\n    const threads = ns.args[1]\\r\\n    const delay = ns.args[2]\\r\\n  \\r\\n    if (delay && delay > 0) {\\r\\n      await ns.sleep(delay)\\r\\n    }\\r\\n  \\r\\n    ns.print(`Starting operation: hack on ${target} in ${threads} threads`)\\r\\n    await ns.hack(target, { threads, stock: true })\\r\\n    ns.exit()\\r\\n  }\\r\\n  \",\"filename\":\"hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:file:///34e0d521-1ffe-43f8-b8ea-769ea64bbfa4\",\"moduleSequenceNumber\":40861}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"pserv-1024-3818a3fe-1461-4897-b993-fd2b4810e643\",\"_hash\":\"4d51de5d68e34b64abafc337497582a9ed6ccdf51fcb55366e3ec23598254bba\",\"moduleSequenceNumber\":40861,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const target = ns.args[0]\\r\\n    const threads = ns.args[1]\\r\\n    const delay = ns.args[2]\\r\\n  \\r\\n    if (delay && delay > 0) {\\r\\n      await ns.sleep(delay)\\r\\n    }\\r\\n  \\r\\n    ns.print(`Starting operation: grow on ${target} in ${threads} threads`)\\r\\n    await ns.grow(target, { threads, stock: true })\\r\\n    ns.exit()\\r\\n  }\\r\\n  \",\"filename\":\"grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///9ce01242-138e-4da8-aa86-35eee3e23c69\",\"moduleSequenceNumber\":43070}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"pserv-1024-3818a3fe-1461-4897-b993-fd2b4810e643\",\"_hash\":\"7c1d1fb4f0c8f7bb72603cc66887138d311d1d62640ec9a93a5d7a6bde532915\",\"moduleSequenceNumber\":43070,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const target = ns.args[0]\\r\\n    const threads = ns.args[1]\\r\\n    const delay = ns.args[2]\\r\\n  \\r\\n    if (delay && delay > 0) {\\r\\n      await ns.sleep(delay)\\r\\n    }\\r\\n  \\r\\n    ns.print(`Starting operation: weaken on ${target} in ${threads} threads`)\\r\\n    await ns.weaken(target, { threads, stock: true })\\r\\n    ns.exit()\\r\\n  }\\r\\n  \",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"pserv-1024-3818a3fe-1461-4897-b993-fd2b4810e643\",\"_hash\":\"e952e94dd27d633fd591066b3da072c2321e9de8a9bce8a0ea0e9eae632ecaf0\",\"moduleSequenceNumber\":40751,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-1024-befc7db1-6714-4711-984d-d7d2a3a81094\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-1024-befc7db1-6714-4711-984d-d7d2a3a81094\",\"httpPortOpen\":false,\"ip\":\"99.7.3.7\",\"isConnectedTo\":false,\"maxRam\":1024,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":1023.75,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omega-net\",585,26575.17767107638,\"94f21977-8f40-4438-b694-5e76fba83be5\"],\"dataMap\":{},\"filename\":\"grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":154.20999999999978,\"pid\":1238,\"ramUsage\":1.75,\"server\":\"pserv-1024-befc7db1-6714-4711-984d-d7d2a3a81094\",\"threads\":585,\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///9ce01242-138e-4da8-aa86-35eee3e23c69\",\"moduleSequenceNumber\":43071}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const target = ns.args[0]\\r\\n    const threads = ns.args[1]\\r\\n    const delay = ns.args[2]\\r\\n  \\r\\n    if (delay && delay > 0) {\\r\\n      await ns.sleep(delay)\\r\\n    }\\r\\n  \\r\\n    ns.print(`Starting operation: hack on ${target} in ${threads} threads`)\\r\\n    await ns.hack(target, { threads, stock: true })\\r\\n    ns.exit()\\r\\n  }\\r\\n  \",\"filename\":\"hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:file:///34e0d521-1ffe-43f8-b8ea-769ea64bbfa4\",\"moduleSequenceNumber\":40862}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"pserv-1024-befc7db1-6714-4711-984d-d7d2a3a81094\",\"_hash\":\"4d51de5d68e34b64abafc337497582a9ed6ccdf51fcb55366e3ec23598254bba\",\"moduleSequenceNumber\":40862,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const target = ns.args[0]\\r\\n    const threads = ns.args[1]\\r\\n    const delay = ns.args[2]\\r\\n  \\r\\n    if (delay && delay > 0) {\\r\\n      await ns.sleep(delay)\\r\\n    }\\r\\n  \\r\\n    ns.print(`Starting operation: grow on ${target} in ${threads} threads`)\\r\\n    await ns.grow(target, { threads, stock: true })\\r\\n    ns.exit()\\r\\n  }\\r\\n  \",\"filename\":\"grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///9ce01242-138e-4da8-aa86-35eee3e23c69\",\"moduleSequenceNumber\":43071}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"pserv-1024-befc7db1-6714-4711-984d-d7d2a3a81094\",\"_hash\":\"7c1d1fb4f0c8f7bb72603cc66887138d311d1d62640ec9a93a5d7a6bde532915\",\"moduleSequenceNumber\":43071,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const target = ns.args[0]\\r\\n    const threads = ns.args[1]\\r\\n    const delay = ns.args[2]\\r\\n  \\r\\n    if (delay && delay > 0) {\\r\\n      await ns.sleep(delay)\\r\\n    }\\r\\n  \\r\\n    ns.print(`Starting operation: weaken on ${target} in ${threads} threads`)\\r\\n    await ns.weaken(target, { threads, stock: true })\\r\\n    ns.exit()\\r\\n  }\\r\\n  \",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"pserv-1024-befc7db1-6714-4711-984d-d7d2a3a81094\",\"_hash\":\"e952e94dd27d633fd591066b3da072c2321e9de8a9bce8a0ea0e9eae632ecaf0\",\"moduleSequenceNumber\":40757,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-1024-7ebeb642-ed0c-413b-a25d-940c56f6e521\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-1024-7ebeb642-ed0c-413b-a25d-940c56f6e521\",\"httpPortOpen\":false,\"ip\":\"89.7.9.3\",\"isConnectedTo\":false,\"maxRam\":1024,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":1023.75,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omega-net\",585,26575.17767107638,\"a248c7ae-87c7-4e67-8828-10cb94412f69\"],\"dataMap\":{},\"filename\":\"grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":154.20999999999978,\"pid\":1239,\"ramUsage\":1.75,\"server\":\"pserv-1024-7ebeb642-ed0c-413b-a25d-940c56f6e521\",\"threads\":585,\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///9ce01242-138e-4da8-aa86-35eee3e23c69\",\"moduleSequenceNumber\":43072}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const target = ns.args[0]\\r\\n    const threads = ns.args[1]\\r\\n    const delay = ns.args[2]\\r\\n  \\r\\n    if (delay && delay > 0) {\\r\\n      await ns.sleep(delay)\\r\\n    }\\r\\n  \\r\\n    ns.print(`Starting operation: hack on ${target} in ${threads} threads`)\\r\\n    await ns.hack(target, { threads, stock: true })\\r\\n    ns.exit()\\r\\n  }\\r\\n  \",\"filename\":\"hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:file:///34e0d521-1ffe-43f8-b8ea-769ea64bbfa4\",\"moduleSequenceNumber\":40863}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"pserv-1024-7ebeb642-ed0c-413b-a25d-940c56f6e521\",\"_hash\":\"4d51de5d68e34b64abafc337497582a9ed6ccdf51fcb55366e3ec23598254bba\",\"moduleSequenceNumber\":40863,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const target = ns.args[0]\\r\\n    const threads = ns.args[1]\\r\\n    const delay = ns.args[2]\\r\\n  \\r\\n    if (delay && delay > 0) {\\r\\n      await ns.sleep(delay)\\r\\n    }\\r\\n  \\r\\n    ns.print(`Starting operation: grow on ${target} in ${threads} threads`)\\r\\n    await ns.grow(target, { threads, stock: true })\\r\\n    ns.exit()\\r\\n  }\\r\\n  \",\"filename\":\"grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///9ce01242-138e-4da8-aa86-35eee3e23c69\",\"moduleSequenceNumber\":43072}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"pserv-1024-7ebeb642-ed0c-413b-a25d-940c56f6e521\",\"_hash\":\"7c1d1fb4f0c8f7bb72603cc66887138d311d1d62640ec9a93a5d7a6bde532915\",\"moduleSequenceNumber\":43072,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const target = ns.args[0]\\r\\n    const threads = ns.args[1]\\r\\n    const delay = ns.args[2]\\r\\n  \\r\\n    if (delay && delay > 0) {\\r\\n      await ns.sleep(delay)\\r\\n    }\\r\\n  \\r\\n    ns.print(`Starting operation: weaken on ${target} in ${threads} threads`)\\r\\n    await ns.weaken(target, { threads, stock: true })\\r\\n    ns.exit()\\r\\n  }\\r\\n  \",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"pserv-1024-7ebeb642-ed0c-413b-a25d-940c56f6e521\",\"_hash\":\"e952e94dd27d633fd591066b3da072c2321e9de8a9bce8a0ea0e9eae632ecaf0\",\"moduleSequenceNumber\":40763,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-1024-8fc49717-e985-4ce3-b95a-4e53647dbce1\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-1024-8fc49717-e985-4ce3-b95a-4e53647dbce1\",\"httpPortOpen\":false,\"ip\":\"43.9.6.4\",\"isConnectedTo\":false,\"maxRam\":1024,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":1023.75,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omega-net\",585,26575.17767107638,\"c837ad84-0422-4628-b86f-3e33a33d2201\"],\"dataMap\":{},\"filename\":\"grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":154.20999999999978,\"pid\":1240,\"ramUsage\":1.75,\"server\":\"pserv-1024-8fc49717-e985-4ce3-b95a-4e53647dbce1\",\"threads\":585,\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///9ce01242-138e-4da8-aa86-35eee3e23c69\",\"moduleSequenceNumber\":43073}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const target = ns.args[0]\\r\\n    const threads = ns.args[1]\\r\\n    const delay = ns.args[2]\\r\\n  \\r\\n    if (delay && delay > 0) {\\r\\n      await ns.sleep(delay)\\r\\n    }\\r\\n  \\r\\n    ns.print(`Starting operation: hack on ${target} in ${threads} threads`)\\r\\n    await ns.hack(target, { threads, stock: true })\\r\\n    ns.exit()\\r\\n  }\\r\\n  \",\"filename\":\"hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:file:///34e0d521-1ffe-43f8-b8ea-769ea64bbfa4\",\"moduleSequenceNumber\":40864}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"pserv-1024-8fc49717-e985-4ce3-b95a-4e53647dbce1\",\"_hash\":\"4d51de5d68e34b64abafc337497582a9ed6ccdf51fcb55366e3ec23598254bba\",\"moduleSequenceNumber\":40864,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const target = ns.args[0]\\r\\n    const threads = ns.args[1]\\r\\n    const delay = ns.args[2]\\r\\n  \\r\\n    if (delay && delay > 0) {\\r\\n      await ns.sleep(delay)\\r\\n    }\\r\\n  \\r\\n    ns.print(`Starting operation: grow on ${target} in ${threads} threads`)\\r\\n    await ns.grow(target, { threads, stock: true })\\r\\n    ns.exit()\\r\\n  }\\r\\n  \",\"filename\":\"grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///9ce01242-138e-4da8-aa86-35eee3e23c69\",\"moduleSequenceNumber\":43073}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"pserv-1024-8fc49717-e985-4ce3-b95a-4e53647dbce1\",\"_hash\":\"7c1d1fb4f0c8f7bb72603cc66887138d311d1d62640ec9a93a5d7a6bde532915\",\"moduleSequenceNumber\":43073,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const target = ns.args[0]\\r\\n    const threads = ns.args[1]\\r\\n    const delay = ns.args[2]\\r\\n  \\r\\n    if (delay && delay > 0) {\\r\\n      await ns.sleep(delay)\\r\\n    }\\r\\n  \\r\\n    ns.print(`Starting operation: weaken on ${target} in ${threads} threads`)\\r\\n    await ns.weaken(target, { threads, stock: true })\\r\\n    ns.exit()\\r\\n  }\\r\\n  \",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"pserv-1024-8fc49717-e985-4ce3-b95a-4e53647dbce1\",\"_hash\":\"e952e94dd27d633fd591066b3da072c2321e9de8a9bce8a0ea0e9eae632ecaf0\",\"moduleSequenceNumber\":40769,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-1024-be088da0-7a1e-48d9-aaa1-62191d08af48\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-1024-be088da0-7a1e-48d9-aaa1-62191d08af48\",\"httpPortOpen\":false,\"ip\":\"85.5.2.6\",\"isConnectedTo\":false,\"maxRam\":1024,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":1023.75,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omega-net\",585,26575.17767107638,\"2dfd4b79-ca47-4865-84be-5fdd813730fb\"],\"dataMap\":{},\"filename\":\"grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":154.20999999999978,\"pid\":1241,\"ramUsage\":1.75,\"server\":\"pserv-1024-be088da0-7a1e-48d9-aaa1-62191d08af48\",\"threads\":585,\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///9ce01242-138e-4da8-aa86-35eee3e23c69\",\"moduleSequenceNumber\":43074}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const target = ns.args[0]\\r\\n    const threads = ns.args[1]\\r\\n    const delay = ns.args[2]\\r\\n  \\r\\n    if (delay && delay > 0) {\\r\\n      await ns.sleep(delay)\\r\\n    }\\r\\n  \\r\\n    ns.print(`Starting operation: hack on ${target} in ${threads} threads`)\\r\\n    await ns.hack(target, { threads, stock: true })\\r\\n    ns.exit()\\r\\n  }\\r\\n  \",\"filename\":\"hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:file:///34e0d521-1ffe-43f8-b8ea-769ea64bbfa4\",\"moduleSequenceNumber\":40865}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"pserv-1024-be088da0-7a1e-48d9-aaa1-62191d08af48\",\"_hash\":\"4d51de5d68e34b64abafc337497582a9ed6ccdf51fcb55366e3ec23598254bba\",\"moduleSequenceNumber\":40865,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const target = ns.args[0]\\r\\n    const threads = ns.args[1]\\r\\n    const delay = ns.args[2]\\r\\n  \\r\\n    if (delay && delay > 0) {\\r\\n      await ns.sleep(delay)\\r\\n    }\\r\\n  \\r\\n    ns.print(`Starting operation: grow on ${target} in ${threads} threads`)\\r\\n    await ns.grow(target, { threads, stock: true })\\r\\n    ns.exit()\\r\\n  }\\r\\n  \",\"filename\":\"grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///9ce01242-138e-4da8-aa86-35eee3e23c69\",\"moduleSequenceNumber\":43074}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"pserv-1024-be088da0-7a1e-48d9-aaa1-62191d08af48\",\"_hash\":\"7c1d1fb4f0c8f7bb72603cc66887138d311d1d62640ec9a93a5d7a6bde532915\",\"moduleSequenceNumber\":43074,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const target = ns.args[0]\\r\\n    const threads = ns.args[1]\\r\\n    const delay = ns.args[2]\\r\\n  \\r\\n    if (delay && delay > 0) {\\r\\n      await ns.sleep(delay)\\r\\n    }\\r\\n  \\r\\n    ns.print(`Starting operation: weaken on ${target} in ${threads} threads`)\\r\\n    await ns.weaken(target, { threads, stock: true })\\r\\n    ns.exit()\\r\\n  }\\r\\n  \",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"pserv-1024-be088da0-7a1e-48d9-aaa1-62191d08af48\",\"_hash\":\"e952e94dd27d633fd591066b3da072c2321e9de8a9bce8a0ea0e9eae632ecaf0\",\"moduleSequenceNumber\":40775,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-1024-f71421ab-e7ee-4385-b39c-b784523786ba\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-1024-f71421ab-e7ee-4385-b39c-b784523786ba\",\"httpPortOpen\":false,\"ip\":\"59.4.5.1\",\"isConnectedTo\":false,\"maxRam\":1024,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":1023.75,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omega-net\",585,26575.17767107638,\"a5362ec4-f730-4cd2-8f12-6a468c3845c2\"],\"dataMap\":{},\"filename\":\"grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":154.20999999999978,\"pid\":1242,\"ramUsage\":1.75,\"server\":\"pserv-1024-f71421ab-e7ee-4385-b39c-b784523786ba\",\"threads\":585,\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///9ce01242-138e-4da8-aa86-35eee3e23c69\",\"moduleSequenceNumber\":43075}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const target = ns.args[0]\\r\\n    const threads = ns.args[1]\\r\\n    const delay = ns.args[2]\\r\\n  \\r\\n    if (delay && delay > 0) {\\r\\n      await ns.sleep(delay)\\r\\n    }\\r\\n  \\r\\n    ns.print(`Starting operation: hack on ${target} in ${threads} threads`)\\r\\n    await ns.hack(target, { threads, stock: true })\\r\\n    ns.exit()\\r\\n  }\\r\\n  \",\"filename\":\"hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:file:///34e0d521-1ffe-43f8-b8ea-769ea64bbfa4\",\"moduleSequenceNumber\":40866}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"pserv-1024-f71421ab-e7ee-4385-b39c-b784523786ba\",\"_hash\":\"4d51de5d68e34b64abafc337497582a9ed6ccdf51fcb55366e3ec23598254bba\",\"moduleSequenceNumber\":40866,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const target = ns.args[0]\\r\\n    const threads = ns.args[1]\\r\\n    const delay = ns.args[2]\\r\\n  \\r\\n    if (delay && delay > 0) {\\r\\n      await ns.sleep(delay)\\r\\n    }\\r\\n  \\r\\n    ns.print(`Starting operation: grow on ${target} in ${threads} threads`)\\r\\n    await ns.grow(target, { threads, stock: true })\\r\\n    ns.exit()\\r\\n  }\\r\\n  \",\"filename\":\"grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///9ce01242-138e-4da8-aa86-35eee3e23c69\",\"moduleSequenceNumber\":43075}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"pserv-1024-f71421ab-e7ee-4385-b39c-b784523786ba\",\"_hash\":\"7c1d1fb4f0c8f7bb72603cc66887138d311d1d62640ec9a93a5d7a6bde532915\",\"moduleSequenceNumber\":43075,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const target = ns.args[0]\\r\\n    const threads = ns.args[1]\\r\\n    const delay = ns.args[2]\\r\\n  \\r\\n    if (delay && delay > 0) {\\r\\n      await ns.sleep(delay)\\r\\n    }\\r\\n  \\r\\n    ns.print(`Starting operation: weaken on ${target} in ${threads} threads`)\\r\\n    await ns.weaken(target, { threads, stock: true })\\r\\n    ns.exit()\\r\\n  }\\r\\n  \",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"pserv-1024-f71421ab-e7ee-4385-b39c-b784523786ba\",\"_hash\":\"e952e94dd27d633fd591066b3da072c2321e9de8a9bce8a0ea0e9eae632ecaf0\",\"moduleSequenceNumber\":40781,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-1024-56b942cd-25b4-4eda-868c-92c187579315\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-1024-56b942cd-25b4-4eda-868c-92c187579315\",\"httpPortOpen\":false,\"ip\":\"70.0.5.4\",\"isConnectedTo\":false,\"maxRam\":1024,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":1023.75,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omega-net\",585,26575.17767107638,\"0bd9a443-ebba-492c-b611-3184920fa4a4\"],\"dataMap\":{},\"filename\":\"grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":154.20999999999978,\"pid\":1243,\"ramUsage\":1.75,\"server\":\"pserv-1024-56b942cd-25b4-4eda-868c-92c187579315\",\"threads\":585,\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///9ce01242-138e-4da8-aa86-35eee3e23c69\",\"moduleSequenceNumber\":43076}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const target = ns.args[0]\\r\\n    const threads = ns.args[1]\\r\\n    const delay = ns.args[2]\\r\\n  \\r\\n    if (delay && delay > 0) {\\r\\n      await ns.sleep(delay)\\r\\n    }\\r\\n  \\r\\n    ns.print(`Starting operation: hack on ${target} in ${threads} threads`)\\r\\n    await ns.hack(target, { threads, stock: true })\\r\\n    ns.exit()\\r\\n  }\\r\\n  \",\"filename\":\"hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:file:///34e0d521-1ffe-43f8-b8ea-769ea64bbfa4\",\"moduleSequenceNumber\":40867}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"pserv-1024-56b942cd-25b4-4eda-868c-92c187579315\",\"_hash\":\"4d51de5d68e34b64abafc337497582a9ed6ccdf51fcb55366e3ec23598254bba\",\"moduleSequenceNumber\":40867,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const target = ns.args[0]\\r\\n    const threads = ns.args[1]\\r\\n    const delay = ns.args[2]\\r\\n  \\r\\n    if (delay && delay > 0) {\\r\\n      await ns.sleep(delay)\\r\\n    }\\r\\n  \\r\\n    ns.print(`Starting operation: grow on ${target} in ${threads} threads`)\\r\\n    await ns.grow(target, { threads, stock: true })\\r\\n    ns.exit()\\r\\n  }\\r\\n  \",\"filename\":\"grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///9ce01242-138e-4da8-aa86-35eee3e23c69\",\"moduleSequenceNumber\":43076}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"pserv-1024-56b942cd-25b4-4eda-868c-92c187579315\",\"_hash\":\"7c1d1fb4f0c8f7bb72603cc66887138d311d1d62640ec9a93a5d7a6bde532915\",\"moduleSequenceNumber\":43076,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const target = ns.args[0]\\r\\n    const threads = ns.args[1]\\r\\n    const delay = ns.args[2]\\r\\n  \\r\\n    if (delay && delay > 0) {\\r\\n      await ns.sleep(delay)\\r\\n    }\\r\\n  \\r\\n    ns.print(`Starting operation: weaken on ${target} in ${threads} threads`)\\r\\n    await ns.weaken(target, { threads, stock: true })\\r\\n    ns.exit()\\r\\n  }\\r\\n  \",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"pserv-1024-56b942cd-25b4-4eda-868c-92c187579315\",\"_hash\":\"e952e94dd27d633fd591066b3da072c2321e9de8a9bce8a0ea0e9eae632ecaf0\",\"moduleSequenceNumber\":40787,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-1024-85da8a5a-078e-4313-9659-5ad2b36094d8\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-1024-85da8a5a-078e-4313-9659-5ad2b36094d8\",\"httpPortOpen\":false,\"ip\":\"66.4.1.8\",\"isConnectedTo\":false,\"maxRam\":1024,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":1023.75,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omega-net\",585,26575.17767107638,\"98e8d89d-0ab5-45f0-8e22-4c315a0b87ee\"],\"dataMap\":{},\"filename\":\"grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":154.20999999999978,\"pid\":1244,\"ramUsage\":1.75,\"server\":\"pserv-1024-85da8a5a-078e-4313-9659-5ad2b36094d8\",\"threads\":585,\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///9ce01242-138e-4da8-aa86-35eee3e23c69\",\"moduleSequenceNumber\":43077}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const target = ns.args[0]\\r\\n    const threads = ns.args[1]\\r\\n    const delay = ns.args[2]\\r\\n  \\r\\n    if (delay && delay > 0) {\\r\\n      await ns.sleep(delay)\\r\\n    }\\r\\n  \\r\\n    ns.print(`Starting operation: hack on ${target} in ${threads} threads`)\\r\\n    await ns.hack(target, { threads, stock: true })\\r\\n    ns.exit()\\r\\n  }\\r\\n  \",\"filename\":\"hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:file:///34e0d521-1ffe-43f8-b8ea-769ea64bbfa4\",\"moduleSequenceNumber\":40868}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"pserv-1024-85da8a5a-078e-4313-9659-5ad2b36094d8\",\"_hash\":\"4d51de5d68e34b64abafc337497582a9ed6ccdf51fcb55366e3ec23598254bba\",\"moduleSequenceNumber\":40868,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const target = ns.args[0]\\r\\n    const threads = ns.args[1]\\r\\n    const delay = ns.args[2]\\r\\n  \\r\\n    if (delay && delay > 0) {\\r\\n      await ns.sleep(delay)\\r\\n    }\\r\\n  \\r\\n    ns.print(`Starting operation: grow on ${target} in ${threads} threads`)\\r\\n    await ns.grow(target, { threads, stock: true })\\r\\n    ns.exit()\\r\\n  }\\r\\n  \",\"filename\":\"grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///9ce01242-138e-4da8-aa86-35eee3e23c69\",\"moduleSequenceNumber\":43077}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"pserv-1024-85da8a5a-078e-4313-9659-5ad2b36094d8\",\"_hash\":\"7c1d1fb4f0c8f7bb72603cc66887138d311d1d62640ec9a93a5d7a6bde532915\",\"moduleSequenceNumber\":43077,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const target = ns.args[0]\\r\\n    const threads = ns.args[1]\\r\\n    const delay = ns.args[2]\\r\\n  \\r\\n    if (delay && delay > 0) {\\r\\n      await ns.sleep(delay)\\r\\n    }\\r\\n  \\r\\n    ns.print(`Starting operation: weaken on ${target} in ${threads} threads`)\\r\\n    await ns.weaken(target, { threads, stock: true })\\r\\n    ns.exit()\\r\\n  }\\r\\n  \",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"pserv-1024-85da8a5a-078e-4313-9659-5ad2b36094d8\",\"_hash\":\"e952e94dd27d633fd591066b3da072c2321e9de8a9bce8a0ea0e9eae632ecaf0\",\"moduleSequenceNumber\":40793,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-1024-240cc89a-a780-44c3-9c05-61e0f461b7aa\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-1024-240cc89a-a780-44c3-9c05-61e0f461b7aa\",\"httpPortOpen\":false,\"ip\":\"42.9.0.3\",\"isConnectedTo\":false,\"maxRam\":1024,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":1023.75,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omega-net\",585,26575.17767107638,\"da1118d1-945b-4000-8f24-f28647f0b2b7\"],\"dataMap\":{},\"filename\":\"grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":154.20999999999978,\"pid\":1245,\"ramUsage\":1.75,\"server\":\"pserv-1024-240cc89a-a780-44c3-9c05-61e0f461b7aa\",\"threads\":585,\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///9ce01242-138e-4da8-aa86-35eee3e23c69\",\"moduleSequenceNumber\":43078}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const target = ns.args[0]\\r\\n    const threads = ns.args[1]\\r\\n    const delay = ns.args[2]\\r\\n  \\r\\n    if (delay && delay > 0) {\\r\\n      await ns.sleep(delay)\\r\\n    }\\r\\n  \\r\\n    ns.print(`Starting operation: hack on ${target} in ${threads} threads`)\\r\\n    await ns.hack(target, { threads, stock: true })\\r\\n    ns.exit()\\r\\n  }\\r\\n  \",\"filename\":\"hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:file:///34e0d521-1ffe-43f8-b8ea-769ea64bbfa4\",\"moduleSequenceNumber\":40869}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"pserv-1024-240cc89a-a780-44c3-9c05-61e0f461b7aa\",\"_hash\":\"4d51de5d68e34b64abafc337497582a9ed6ccdf51fcb55366e3ec23598254bba\",\"moduleSequenceNumber\":40869,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const target = ns.args[0]\\r\\n    const threads = ns.args[1]\\r\\n    const delay = ns.args[2]\\r\\n  \\r\\n    if (delay && delay > 0) {\\r\\n      await ns.sleep(delay)\\r\\n    }\\r\\n  \\r\\n    ns.print(`Starting operation: grow on ${target} in ${threads} threads`)\\r\\n    await ns.grow(target, { threads, stock: true })\\r\\n    ns.exit()\\r\\n  }\\r\\n  \",\"filename\":\"grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///9ce01242-138e-4da8-aa86-35eee3e23c69\",\"moduleSequenceNumber\":43078}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"pserv-1024-240cc89a-a780-44c3-9c05-61e0f461b7aa\",\"_hash\":\"7c1d1fb4f0c8f7bb72603cc66887138d311d1d62640ec9a93a5d7a6bde532915\",\"moduleSequenceNumber\":43078,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const target = ns.args[0]\\r\\n    const threads = ns.args[1]\\r\\n    const delay = ns.args[2]\\r\\n  \\r\\n    if (delay && delay > 0) {\\r\\n      await ns.sleep(delay)\\r\\n    }\\r\\n  \\r\\n    ns.print(`Starting operation: weaken on ${target} in ${threads} threads`)\\r\\n    await ns.weaken(target, { threads, stock: true })\\r\\n    ns.exit()\\r\\n  }\\r\\n  \",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"pserv-1024-240cc89a-a780-44c3-9c05-61e0f461b7aa\",\"_hash\":\"e952e94dd27d633fd591066b3da072c2321e9de8a9bce8a0ea0e9eae632ecaf0\",\"moduleSequenceNumber\":40799,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-1024-0488cf4a-f880-4a21-a86f-f2c6496e1657\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-1024-0488cf4a-f880-4a21-a86f-f2c6496e1657\",\"httpPortOpen\":false,\"ip\":\"44.5.0.2\",\"isConnectedTo\":false,\"maxRam\":1024,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":1023.75,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omega-net\",585,26575.17767107638,\"79a07480-286c-46a9-90e6-a73560ce1bec\"],\"dataMap\":{},\"filename\":\"grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":154.20999999999978,\"pid\":1246,\"ramUsage\":1.75,\"server\":\"pserv-1024-0488cf4a-f880-4a21-a86f-f2c6496e1657\",\"threads\":585,\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///9ce01242-138e-4da8-aa86-35eee3e23c69\",\"moduleSequenceNumber\":43079}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const target = ns.args[0]\\r\\n    const threads = ns.args[1]\\r\\n    const delay = ns.args[2]\\r\\n  \\r\\n    if (delay && delay > 0) {\\r\\n      await ns.sleep(delay)\\r\\n    }\\r\\n  \\r\\n    ns.print(`Starting operation: hack on ${target} in ${threads} threads`)\\r\\n    await ns.hack(target, { threads, stock: true })\\r\\n    ns.exit()\\r\\n  }\\r\\n  \",\"filename\":\"hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:file:///34e0d521-1ffe-43f8-b8ea-769ea64bbfa4\",\"moduleSequenceNumber\":40870}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"pserv-1024-0488cf4a-f880-4a21-a86f-f2c6496e1657\",\"_hash\":\"4d51de5d68e34b64abafc337497582a9ed6ccdf51fcb55366e3ec23598254bba\",\"moduleSequenceNumber\":40870,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const target = ns.args[0]\\r\\n    const threads = ns.args[1]\\r\\n    const delay = ns.args[2]\\r\\n  \\r\\n    if (delay && delay > 0) {\\r\\n      await ns.sleep(delay)\\r\\n    }\\r\\n  \\r\\n    ns.print(`Starting operation: grow on ${target} in ${threads} threads`)\\r\\n    await ns.grow(target, { threads, stock: true })\\r\\n    ns.exit()\\r\\n  }\\r\\n  \",\"filename\":\"grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///9ce01242-138e-4da8-aa86-35eee3e23c69\",\"moduleSequenceNumber\":43079}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"pserv-1024-0488cf4a-f880-4a21-a86f-f2c6496e1657\",\"_hash\":\"7c1d1fb4f0c8f7bb72603cc66887138d311d1d62640ec9a93a5d7a6bde532915\",\"moduleSequenceNumber\":43079,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const target = ns.args[0]\\r\\n    const threads = ns.args[1]\\r\\n    const delay = ns.args[2]\\r\\n  \\r\\n    if (delay && delay > 0) {\\r\\n      await ns.sleep(delay)\\r\\n    }\\r\\n  \\r\\n    ns.print(`Starting operation: weaken on ${target} in ${threads} threads`)\\r\\n    await ns.weaken(target, { threads, stock: true })\\r\\n    ns.exit()\\r\\n  }\\r\\n  \",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"pserv-1024-0488cf4a-f880-4a21-a86f-f2c6496e1657\",\"_hash\":\"e952e94dd27d633fd591066b3da072c2321e9de8a9bce8a0ea0e9eae632ecaf0\",\"moduleSequenceNumber\":40805,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-1024-58028ebf-2970-402e-ad04-5a59c054b4d9\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-1024-58028ebf-2970-402e-ad04-5a59c054b4d9\",\"httpPortOpen\":false,\"ip\":\"31.7.7.0\",\"isConnectedTo\":false,\"maxRam\":1024,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":1023.75,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omega-net\",585,26575.17767107638,\"faf5bcf0-6325-462f-b1de-09af67a0ab49\"],\"dataMap\":{},\"filename\":\"grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":154.20999999999978,\"pid\":1247,\"ramUsage\":1.75,\"server\":\"pserv-1024-58028ebf-2970-402e-ad04-5a59c054b4d9\",\"threads\":585,\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///9ce01242-138e-4da8-aa86-35eee3e23c69\",\"moduleSequenceNumber\":43080}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const target = ns.args[0]\\r\\n    const threads = ns.args[1]\\r\\n    const delay = ns.args[2]\\r\\n  \\r\\n    if (delay && delay > 0) {\\r\\n      await ns.sleep(delay)\\r\\n    }\\r\\n  \\r\\n    ns.print(`Starting operation: hack on ${target} in ${threads} threads`)\\r\\n    await ns.hack(target, { threads, stock: true })\\r\\n    ns.exit()\\r\\n  }\\r\\n  \",\"filename\":\"hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:file:///34e0d521-1ffe-43f8-b8ea-769ea64bbfa4\",\"moduleSequenceNumber\":40871}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"pserv-1024-58028ebf-2970-402e-ad04-5a59c054b4d9\",\"_hash\":\"4d51de5d68e34b64abafc337497582a9ed6ccdf51fcb55366e3ec23598254bba\",\"moduleSequenceNumber\":40871,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const target = ns.args[0]\\r\\n    const threads = ns.args[1]\\r\\n    const delay = ns.args[2]\\r\\n  \\r\\n    if (delay && delay > 0) {\\r\\n      await ns.sleep(delay)\\r\\n    }\\r\\n  \\r\\n    ns.print(`Starting operation: grow on ${target} in ${threads} threads`)\\r\\n    await ns.grow(target, { threads, stock: true })\\r\\n    ns.exit()\\r\\n  }\\r\\n  \",\"filename\":\"grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///9ce01242-138e-4da8-aa86-35eee3e23c69\",\"moduleSequenceNumber\":43080}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"pserv-1024-58028ebf-2970-402e-ad04-5a59c054b4d9\",\"_hash\":\"7c1d1fb4f0c8f7bb72603cc66887138d311d1d62640ec9a93a5d7a6bde532915\",\"moduleSequenceNumber\":43080,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const target = ns.args[0]\\r\\n    const threads = ns.args[1]\\r\\n    const delay = ns.args[2]\\r\\n  \\r\\n    if (delay && delay > 0) {\\r\\n      await ns.sleep(delay)\\r\\n    }\\r\\n  \\r\\n    ns.print(`Starting operation: weaken on ${target} in ${threads} threads`)\\r\\n    await ns.weaken(target, { threads, stock: true })\\r\\n    ns.exit()\\r\\n  }\\r\\n  \",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"pserv-1024-58028ebf-2970-402e-ad04-5a59c054b4d9\",\"_hash\":\"e952e94dd27d633fd591066b3da072c2321e9de8a9bce8a0ea0e9eae632ecaf0\",\"moduleSequenceNumber\":40811,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-1024-36c3c521-210d-4321-81b2-b0b153e321ab\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-1024-36c3c521-210d-4321-81b2-b0b153e321ab\",\"httpPortOpen\":false,\"ip\":\"0.5.7.2\",\"isConnectedTo\":false,\"maxRam\":1024,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":1023.75,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omega-net\",585,26575.17767107638,\"8815abaa-b7dd-4d1d-a417-fd5065d6c45e\"],\"dataMap\":{},\"filename\":\"grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":154.20999999999978,\"pid\":1248,\"ramUsage\":1.75,\"server\":\"pserv-1024-36c3c521-210d-4321-81b2-b0b153e321ab\",\"threads\":585,\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///9ce01242-138e-4da8-aa86-35eee3e23c69\",\"moduleSequenceNumber\":43081}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const target = ns.args[0]\\r\\n    const threads = ns.args[1]\\r\\n    const delay = ns.args[2]\\r\\n  \\r\\n    if (delay && delay > 0) {\\r\\n      await ns.sleep(delay)\\r\\n    }\\r\\n  \\r\\n    ns.print(`Starting operation: hack on ${target} in ${threads} threads`)\\r\\n    await ns.hack(target, { threads, stock: true })\\r\\n    ns.exit()\\r\\n  }\\r\\n  \",\"filename\":\"hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:file:///34e0d521-1ffe-43f8-b8ea-769ea64bbfa4\",\"moduleSequenceNumber\":40872}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"pserv-1024-36c3c521-210d-4321-81b2-b0b153e321ab\",\"_hash\":\"4d51de5d68e34b64abafc337497582a9ed6ccdf51fcb55366e3ec23598254bba\",\"moduleSequenceNumber\":40872,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const target = ns.args[0]\\r\\n    const threads = ns.args[1]\\r\\n    const delay = ns.args[2]\\r\\n  \\r\\n    if (delay && delay > 0) {\\r\\n      await ns.sleep(delay)\\r\\n    }\\r\\n  \\r\\n    ns.print(`Starting operation: grow on ${target} in ${threads} threads`)\\r\\n    await ns.grow(target, { threads, stock: true })\\r\\n    ns.exit()\\r\\n  }\\r\\n  \",\"filename\":\"grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///9ce01242-138e-4da8-aa86-35eee3e23c69\",\"moduleSequenceNumber\":43081}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"pserv-1024-36c3c521-210d-4321-81b2-b0b153e321ab\",\"_hash\":\"7c1d1fb4f0c8f7bb72603cc66887138d311d1d62640ec9a93a5d7a6bde532915\",\"moduleSequenceNumber\":43081,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const target = ns.args[0]\\r\\n    const threads = ns.args[1]\\r\\n    const delay = ns.args[2]\\r\\n  \\r\\n    if (delay && delay > 0) {\\r\\n      await ns.sleep(delay)\\r\\n    }\\r\\n  \\r\\n    ns.print(`Starting operation: weaken on ${target} in ${threads} threads`)\\r\\n    await ns.weaken(target, { threads, stock: true })\\r\\n    ns.exit()\\r\\n  }\\r\\n  \",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"pserv-1024-36c3c521-210d-4321-81b2-b0b153e321ab\",\"_hash\":\"e952e94dd27d633fd591066b3da072c2321e9de8a9bce8a0ea0e9eae632ecaf0\",\"moduleSequenceNumber\":40817,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-1024-2c573361-0593-4291-b8c4-b612ed70b8cb\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-1024-2c573361-0593-4291-b8c4-b612ed70b8cb\",\"httpPortOpen\":false,\"ip\":\"79.1.0.2\",\"isConnectedTo\":false,\"maxRam\":1024,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":1023.75,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omega-net\",585,26575.17767107638,\"f29cc8dd-b47a-43e1-8b24-797f3ecc2390\"],\"dataMap\":{},\"filename\":\"grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":154.20999999999978,\"pid\":1249,\"ramUsage\":1.75,\"server\":\"pserv-1024-2c573361-0593-4291-b8c4-b612ed70b8cb\",\"threads\":585,\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///9ce01242-138e-4da8-aa86-35eee3e23c69\",\"moduleSequenceNumber\":43082}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const target = ns.args[0]\\r\\n    const threads = ns.args[1]\\r\\n    const delay = ns.args[2]\\r\\n  \\r\\n    if (delay && delay > 0) {\\r\\n      await ns.sleep(delay)\\r\\n    }\\r\\n  \\r\\n    ns.print(`Starting operation: hack on ${target} in ${threads} threads`)\\r\\n    await ns.hack(target, { threads, stock: true })\\r\\n    ns.exit()\\r\\n  }\\r\\n  \",\"filename\":\"hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:file:///34e0d521-1ffe-43f8-b8ea-769ea64bbfa4\",\"moduleSequenceNumber\":40873}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"pserv-1024-2c573361-0593-4291-b8c4-b612ed70b8cb\",\"_hash\":\"4d51de5d68e34b64abafc337497582a9ed6ccdf51fcb55366e3ec23598254bba\",\"moduleSequenceNumber\":40873,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const target = ns.args[0]\\r\\n    const threads = ns.args[1]\\r\\n    const delay = ns.args[2]\\r\\n  \\r\\n    if (delay && delay > 0) {\\r\\n      await ns.sleep(delay)\\r\\n    }\\r\\n  \\r\\n    ns.print(`Starting operation: grow on ${target} in ${threads} threads`)\\r\\n    await ns.grow(target, { threads, stock: true })\\r\\n    ns.exit()\\r\\n  }\\r\\n  \",\"filename\":\"grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///9ce01242-138e-4da8-aa86-35eee3e23c69\",\"moduleSequenceNumber\":43082}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"pserv-1024-2c573361-0593-4291-b8c4-b612ed70b8cb\",\"_hash\":\"7c1d1fb4f0c8f7bb72603cc66887138d311d1d62640ec9a93a5d7a6bde532915\",\"moduleSequenceNumber\":43082,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const target = ns.args[0]\\r\\n    const threads = ns.args[1]\\r\\n    const delay = ns.args[2]\\r\\n  \\r\\n    if (delay && delay > 0) {\\r\\n      await ns.sleep(delay)\\r\\n    }\\r\\n  \\r\\n    ns.print(`Starting operation: weaken on ${target} in ${threads} threads`)\\r\\n    await ns.weaken(target, { threads, stock: true })\\r\\n    ns.exit()\\r\\n  }\\r\\n  \",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"pserv-1024-2c573361-0593-4291-b8c4-b612ed70b8cb\",\"_hash\":\"e952e94dd27d633fd591066b3da072c2321e9de8a9bce8a0ea0e9eae632ecaf0\",\"moduleSequenceNumber\":40823,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-1024-382bebe2-06ab-4ade-8882-2b9b79949213\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-1024-382bebe2-06ab-4ade-8882-2b9b79949213\",\"httpPortOpen\":false,\"ip\":\"66.3.1.7\",\"isConnectedTo\":false,\"maxRam\":1024,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":1023.75,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omega-net\",585,26575.17767107638,\"1d02983e-e332-4967-bf4a-10406cbd295b\"],\"dataMap\":{},\"filename\":\"grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":154.20999999999978,\"pid\":1250,\"ramUsage\":1.75,\"server\":\"pserv-1024-382bebe2-06ab-4ade-8882-2b9b79949213\",\"threads\":585,\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///9ce01242-138e-4da8-aa86-35eee3e23c69\",\"moduleSequenceNumber\":43083}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const target = ns.args[0]\\r\\n    const threads = ns.args[1]\\r\\n    const delay = ns.args[2]\\r\\n  \\r\\n    if (delay && delay > 0) {\\r\\n      await ns.sleep(delay)\\r\\n    }\\r\\n  \\r\\n    ns.print(`Starting operation: hack on ${target} in ${threads} threads`)\\r\\n    await ns.hack(target, { threads, stock: true })\\r\\n    ns.exit()\\r\\n  }\\r\\n  \",\"filename\":\"hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:file:///34e0d521-1ffe-43f8-b8ea-769ea64bbfa4\",\"moduleSequenceNumber\":40874}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"pserv-1024-382bebe2-06ab-4ade-8882-2b9b79949213\",\"_hash\":\"4d51de5d68e34b64abafc337497582a9ed6ccdf51fcb55366e3ec23598254bba\",\"moduleSequenceNumber\":40874,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const target = ns.args[0]\\r\\n    const threads = ns.args[1]\\r\\n    const delay = ns.args[2]\\r\\n  \\r\\n    if (delay && delay > 0) {\\r\\n      await ns.sleep(delay)\\r\\n    }\\r\\n  \\r\\n    ns.print(`Starting operation: grow on ${target} in ${threads} threads`)\\r\\n    await ns.grow(target, { threads, stock: true })\\r\\n    ns.exit()\\r\\n  }\\r\\n  \",\"filename\":\"grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///9ce01242-138e-4da8-aa86-35eee3e23c69\",\"moduleSequenceNumber\":43083}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"pserv-1024-382bebe2-06ab-4ade-8882-2b9b79949213\",\"_hash\":\"7c1d1fb4f0c8f7bb72603cc66887138d311d1d62640ec9a93a5d7a6bde532915\",\"moduleSequenceNumber\":43083,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const target = ns.args[0]\\r\\n    const threads = ns.args[1]\\r\\n    const delay = ns.args[2]\\r\\n  \\r\\n    if (delay && delay > 0) {\\r\\n      await ns.sleep(delay)\\r\\n    }\\r\\n  \\r\\n    ns.print(`Starting operation: weaken on ${target} in ${threads} threads`)\\r\\n    await ns.weaken(target, { threads, stock: true })\\r\\n    ns.exit()\\r\\n  }\\r\\n  \",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"pserv-1024-382bebe2-06ab-4ade-8882-2b9b79949213\",\"_hash\":\"e952e94dd27d633fd591066b3da072c2321e9de8a9bce8a0ea0e9eae632ecaf0\",\"moduleSequenceNumber\":40829,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-1024-9914b245-c952-4864-bfe5-a61d68c192ac\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-1024-9914b245-c952-4864-bfe5-a61d68c192ac\",\"httpPortOpen\":false,\"ip\":\"53.0.0.4\",\"isConnectedTo\":false,\"maxRam\":1024,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":1023.75,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omega-net\",585,26575.17767107638,\"cfa4b881-5a42-447d-9883-cb276219d723\"],\"dataMap\":{},\"filename\":\"grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":154.20999999999978,\"pid\":1251,\"ramUsage\":1.75,\"server\":\"pserv-1024-9914b245-c952-4864-bfe5-a61d68c192ac\",\"threads\":585,\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///9ce01242-138e-4da8-aa86-35eee3e23c69\",\"moduleSequenceNumber\":43084}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const target = ns.args[0]\\r\\n    const threads = ns.args[1]\\r\\n    const delay = ns.args[2]\\r\\n  \\r\\n    if (delay && delay > 0) {\\r\\n      await ns.sleep(delay)\\r\\n    }\\r\\n  \\r\\n    ns.print(`Starting operation: hack on ${target} in ${threads} threads`)\\r\\n    await ns.hack(target, { threads, stock: true })\\r\\n    ns.exit()\\r\\n  }\\r\\n  \",\"filename\":\"hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:file:///34e0d521-1ffe-43f8-b8ea-769ea64bbfa4\",\"moduleSequenceNumber\":40875}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"pserv-1024-9914b245-c952-4864-bfe5-a61d68c192ac\",\"_hash\":\"4d51de5d68e34b64abafc337497582a9ed6ccdf51fcb55366e3ec23598254bba\",\"moduleSequenceNumber\":40875,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const target = ns.args[0]\\r\\n    const threads = ns.args[1]\\r\\n    const delay = ns.args[2]\\r\\n  \\r\\n    if (delay && delay > 0) {\\r\\n      await ns.sleep(delay)\\r\\n    }\\r\\n  \\r\\n    ns.print(`Starting operation: grow on ${target} in ${threads} threads`)\\r\\n    await ns.grow(target, { threads, stock: true })\\r\\n    ns.exit()\\r\\n  }\\r\\n  \",\"filename\":\"grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///9ce01242-138e-4da8-aa86-35eee3e23c69\",\"moduleSequenceNumber\":43084}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"pserv-1024-9914b245-c952-4864-bfe5-a61d68c192ac\",\"_hash\":\"7c1d1fb4f0c8f7bb72603cc66887138d311d1d62640ec9a93a5d7a6bde532915\",\"moduleSequenceNumber\":43084,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const target = ns.args[0]\\r\\n    const threads = ns.args[1]\\r\\n    const delay = ns.args[2]\\r\\n  \\r\\n    if (delay && delay > 0) {\\r\\n      await ns.sleep(delay)\\r\\n    }\\r\\n  \\r\\n    ns.print(`Starting operation: weaken on ${target} in ${threads} threads`)\\r\\n    await ns.weaken(target, { threads, stock: true })\\r\\n    ns.exit()\\r\\n  }\\r\\n  \",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"pserv-1024-9914b245-c952-4864-bfe5-a61d68c192ac\",\"_hash\":\"e952e94dd27d633fd591066b3da072c2321e9de8a9bce8a0ea0e9eae632ecaf0\",\"moduleSequenceNumber\":40835,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-1024-77932f55-3377-4a85-bab5-dd6c2c9ad6c2\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-1024-77932f55-3377-4a85-bab5-dd6c2c9ad6c2\",\"httpPortOpen\":false,\"ip\":\"85.4.7.7\",\"isConnectedTo\":false,\"maxRam\":1024,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":1023.75,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omega-net\",585,26575.17767107638,\"9b35e868-1cb2-4ceb-9e24-ecf6551fc227\"],\"dataMap\":{},\"filename\":\"grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":154.20999999999978,\"pid\":1252,\"ramUsage\":1.75,\"server\":\"pserv-1024-77932f55-3377-4a85-bab5-dd6c2c9ad6c2\",\"threads\":585,\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///9ce01242-138e-4da8-aa86-35eee3e23c69\",\"moduleSequenceNumber\":43085}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const target = ns.args[0]\\r\\n    const threads = ns.args[1]\\r\\n    const delay = ns.args[2]\\r\\n  \\r\\n    if (delay && delay > 0) {\\r\\n      await ns.sleep(delay)\\r\\n    }\\r\\n  \\r\\n    ns.print(`Starting operation: hack on ${target} in ${threads} threads`)\\r\\n    await ns.hack(target, { threads, stock: true })\\r\\n    ns.exit()\\r\\n  }\\r\\n  \",\"filename\":\"hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:file:///34e0d521-1ffe-43f8-b8ea-769ea64bbfa4\",\"moduleSequenceNumber\":40876}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"pserv-1024-77932f55-3377-4a85-bab5-dd6c2c9ad6c2\",\"_hash\":\"4d51de5d68e34b64abafc337497582a9ed6ccdf51fcb55366e3ec23598254bba\",\"moduleSequenceNumber\":40876,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const target = ns.args[0]\\r\\n    const threads = ns.args[1]\\r\\n    const delay = ns.args[2]\\r\\n  \\r\\n    if (delay && delay > 0) {\\r\\n      await ns.sleep(delay)\\r\\n    }\\r\\n  \\r\\n    ns.print(`Starting operation: grow on ${target} in ${threads} threads`)\\r\\n    await ns.grow(target, { threads, stock: true })\\r\\n    ns.exit()\\r\\n  }\\r\\n  \",\"filename\":\"grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///9ce01242-138e-4da8-aa86-35eee3e23c69\",\"moduleSequenceNumber\":43085}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"pserv-1024-77932f55-3377-4a85-bab5-dd6c2c9ad6c2\",\"_hash\":\"7c1d1fb4f0c8f7bb72603cc66887138d311d1d62640ec9a93a5d7a6bde532915\",\"moduleSequenceNumber\":43085,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const target = ns.args[0]\\r\\n    const threads = ns.args[1]\\r\\n    const delay = ns.args[2]\\r\\n  \\r\\n    if (delay && delay > 0) {\\r\\n      await ns.sleep(delay)\\r\\n    }\\r\\n  \\r\\n    ns.print(`Starting operation: weaken on ${target} in ${threads} threads`)\\r\\n    await ns.weaken(target, { threads, stock: true })\\r\\n    ns.exit()\\r\\n  }\\r\\n  \",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"pserv-1024-77932f55-3377-4a85-bab5-dd6c2c9ad6c2\",\"_hash\":\"e952e94dd27d633fd591066b3da072c2321e9de8a9bce8a0ea0e9eae632ecaf0\",\"moduleSequenceNumber\":40841,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-1024-0e665033-336c-4ffe-ad05-95e7f63e01e1\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-1024-0e665033-336c-4ffe-ad05-95e7f63e01e1\",\"httpPortOpen\":false,\"ip\":\"66.0.8.4\",\"isConnectedTo\":false,\"maxRam\":1024,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":1023.75,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omega-net\",585,26575.17767107638,\"9e6645ae-a932-4eda-833b-dad23ceabcb2\"],\"dataMap\":{},\"filename\":\"grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":154.20999999999978,\"pid\":1253,\"ramUsage\":1.75,\"server\":\"pserv-1024-0e665033-336c-4ffe-ad05-95e7f63e01e1\",\"threads\":585,\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///9ce01242-138e-4da8-aa86-35eee3e23c69\",\"moduleSequenceNumber\":43086}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const target = ns.args[0]\\r\\n    const threads = ns.args[1]\\r\\n    const delay = ns.args[2]\\r\\n  \\r\\n    if (delay && delay > 0) {\\r\\n      await ns.sleep(delay)\\r\\n    }\\r\\n  \\r\\n    ns.print(`Starting operation: hack on ${target} in ${threads} threads`)\\r\\n    await ns.hack(target, { threads, stock: true })\\r\\n    ns.exit()\\r\\n  }\\r\\n  \",\"filename\":\"hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:file:///34e0d521-1ffe-43f8-b8ea-769ea64bbfa4\",\"moduleSequenceNumber\":40877}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"pserv-1024-0e665033-336c-4ffe-ad05-95e7f63e01e1\",\"_hash\":\"4d51de5d68e34b64abafc337497582a9ed6ccdf51fcb55366e3ec23598254bba\",\"moduleSequenceNumber\":40877,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const target = ns.args[0]\\r\\n    const threads = ns.args[1]\\r\\n    const delay = ns.args[2]\\r\\n  \\r\\n    if (delay && delay > 0) {\\r\\n      await ns.sleep(delay)\\r\\n    }\\r\\n  \\r\\n    ns.print(`Starting operation: grow on ${target} in ${threads} threads`)\\r\\n    await ns.grow(target, { threads, stock: true })\\r\\n    ns.exit()\\r\\n  }\\r\\n  \",\"filename\":\"grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///9ce01242-138e-4da8-aa86-35eee3e23c69\",\"moduleSequenceNumber\":43086}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"pserv-1024-0e665033-336c-4ffe-ad05-95e7f63e01e1\",\"_hash\":\"7c1d1fb4f0c8f7bb72603cc66887138d311d1d62640ec9a93a5d7a6bde532915\",\"moduleSequenceNumber\":43086,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const target = ns.args[0]\\r\\n    const threads = ns.args[1]\\r\\n    const delay = ns.args[2]\\r\\n  \\r\\n    if (delay && delay > 0) {\\r\\n      await ns.sleep(delay)\\r\\n    }\\r\\n  \\r\\n    ns.print(`Starting operation: weaken on ${target} in ${threads} threads`)\\r\\n    await ns.weaken(target, { threads, stock: true })\\r\\n    ns.exit()\\r\\n  }\\r\\n  \",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"pserv-1024-0e665033-336c-4ffe-ad05-95e7f63e01e1\",\"_hash\":\"e952e94dd27d633fd591066b3da072c2321e9de8a9bce8a0ea0e9eae632ecaf0\",\"moduleSequenceNumber\":40847,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-16384-f4e2c6fc-9255-478a-bb1b-a0aae0611ee9\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-16384-f4e2c6fc-9255-478a-bb1b-a0aae0611ee9\",\"httpPortOpen\":false,\"ip\":\"4.3.5.1\",\"isConnectedTo\":false,\"maxRam\":16384,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":16383.5,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omega-net\",9362,26575.17767107638,\"55f3dfff-1d88-46d3-bcd1-3b1e70ae6dbd\"],\"dataMap\":{},\"filename\":\"grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":154.20999999999978,\"pid\":1254,\"ramUsage\":1.75,\"server\":\"pserv-16384-f4e2c6fc-9255-478a-bb1b-a0aae0611ee9\",\"threads\":9362,\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///9ce01242-138e-4da8-aa86-35eee3e23c69\",\"moduleSequenceNumber\":43087}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const target = ns.args[0]\\r\\n    const threads = ns.args[1]\\r\\n    const delay = ns.args[2]\\r\\n  \\r\\n    if (delay && delay > 0) {\\r\\n      await ns.sleep(delay)\\r\\n    }\\r\\n  \\r\\n    ns.print(`Starting operation: hack on ${target} in ${threads} threads`)\\r\\n    await ns.hack(target, { threads, stock: true })\\r\\n    ns.exit()\\r\\n  }\\r\\n  \",\"filename\":\"hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:file:///34e0d521-1ffe-43f8-b8ea-769ea64bbfa4\",\"moduleSequenceNumber\":40878}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"pserv-16384-f4e2c6fc-9255-478a-bb1b-a0aae0611ee9\",\"_hash\":\"4d51de5d68e34b64abafc337497582a9ed6ccdf51fcb55366e3ec23598254bba\",\"moduleSequenceNumber\":40878,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const target = ns.args[0]\\r\\n    const threads = ns.args[1]\\r\\n    const delay = ns.args[2]\\r\\n  \\r\\n    if (delay && delay > 0) {\\r\\n      await ns.sleep(delay)\\r\\n    }\\r\\n  \\r\\n    ns.print(`Starting operation: grow on ${target} in ${threads} threads`)\\r\\n    await ns.grow(target, { threads, stock: true })\\r\\n    ns.exit()\\r\\n  }\\r\\n  \",\"filename\":\"grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///9ce01242-138e-4da8-aa86-35eee3e23c69\",\"moduleSequenceNumber\":43087}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"pserv-16384-f4e2c6fc-9255-478a-bb1b-a0aae0611ee9\",\"_hash\":\"7c1d1fb4f0c8f7bb72603cc66887138d311d1d62640ec9a93a5d7a6bde532915\",\"moduleSequenceNumber\":43087,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const target = ns.args[0]\\r\\n    const threads = ns.args[1]\\r\\n    const delay = ns.args[2]\\r\\n  \\r\\n    if (delay && delay > 0) {\\r\\n      await ns.sleep(delay)\\r\\n    }\\r\\n  \\r\\n    ns.print(`Starting operation: weaken on ${target} in ${threads} threads`)\\r\\n    await ns.weaken(target, { threads, stock: true })\\r\\n    ns.exit()\\r\\n  }\\r\\n  \",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:file:///d58d74fe-b36a-4822-9d27-31595793ca76\",\"moduleSequenceNumber\":40879}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"pserv-16384-f4e2c6fc-9255-478a-bb1b-a0aae0611ee9\",\"_hash\":\"e952e94dd27d633fd591066b3da072c2321e9de8a9bce8a0ea0e9eae632ecaf0\",\"moduleSequenceNumber\":40879,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-16384-c4b7be4d-cc4b-4f91-a44e-1d5d235898ca\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-16384-c4b7be4d-cc4b-4f91-a44e-1d5d235898ca\",\"httpPortOpen\":false,\"ip\":\"35.6.3.0\",\"isConnectedTo\":false,\"maxRam\":16384,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":16383.5,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omega-net\",6622,26575.17767107638,\"d3df9fca-728b-480e-a650-d905f6f3615a\"],\"dataMap\":{},\"filename\":\"grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":154.20999999999978,\"pid\":1255,\"ramUsage\":1.75,\"server\":\"pserv-16384-c4b7be4d-cc4b-4f91-a44e-1d5d235898ca\",\"threads\":6622,\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///9ce01242-138e-4da8-aa86-35eee3e23c69\",\"moduleSequenceNumber\":43088}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omega-net\",2740,0,\"7fe0c841-2a30-47e3-bac4-877f70c819ea\"],\"dataMap\":{},\"filename\":\"weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":154.20999999999978,\"pid\":1256,\"ramUsage\":1.75,\"server\":\"pserv-16384-c4b7be4d-cc4b-4f91-a44e-1d5d235898ca\",\"threads\":2740,\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:file:///d58d74fe-b36a-4822-9d27-31595793ca76\",\"moduleSequenceNumber\":43089}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const target = ns.args[0]\\r\\n    const threads = ns.args[1]\\r\\n    const delay = ns.args[2]\\r\\n  \\r\\n    if (delay && delay > 0) {\\r\\n      await ns.sleep(delay)\\r\\n    }\\r\\n  \\r\\n    ns.print(`Starting operation: hack on ${target} in ${threads} threads`)\\r\\n    await ns.hack(target, { threads, stock: true })\\r\\n    ns.exit()\\r\\n  }\\r\\n  \",\"filename\":\"hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:file:///34e0d521-1ffe-43f8-b8ea-769ea64bbfa4\",\"moduleSequenceNumber\":48322}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"pserv-16384-c4b7be4d-cc4b-4f91-a44e-1d5d235898ca\",\"_hash\":\"4d51de5d68e34b64abafc337497582a9ed6ccdf51fcb55366e3ec23598254bba\",\"moduleSequenceNumber\":48322,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const target = ns.args[0]\\r\\n    const threads = ns.args[1]\\r\\n    const delay = ns.args[2]\\r\\n  \\r\\n    if (delay && delay > 0) {\\r\\n      await ns.sleep(delay)\\r\\n    }\\r\\n  \\r\\n    ns.print(`Starting operation: grow on ${target} in ${threads} threads`)\\r\\n    await ns.grow(target, { threads, stock: true })\\r\\n    ns.exit()\\r\\n  }\\r\\n  \",\"filename\":\"grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///9ce01242-138e-4da8-aa86-35eee3e23c69\",\"moduleSequenceNumber\":43088}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"pserv-16384-c4b7be4d-cc4b-4f91-a44e-1d5d235898ca\",\"_hash\":\"7c1d1fb4f0c8f7bb72603cc66887138d311d1d62640ec9a93a5d7a6bde532915\",\"moduleSequenceNumber\":43088,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const target = ns.args[0]\\r\\n    const threads = ns.args[1]\\r\\n    const delay = ns.args[2]\\r\\n  \\r\\n    if (delay && delay > 0) {\\r\\n      await ns.sleep(delay)\\r\\n    }\\r\\n  \\r\\n    ns.print(`Starting operation: weaken on ${target} in ${threads} threads`)\\r\\n    await ns.weaken(target, { threads, stock: true })\\r\\n    ns.exit()\\r\\n  }\\r\\n  \",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:file:///d58d74fe-b36a-4822-9d27-31595793ca76\",\"moduleSequenceNumber\":43089}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"pserv-16384-c4b7be4d-cc4b-4f91-a44e-1d5d235898ca\",\"_hash\":\"e952e94dd27d633fd591066b3da072c2321e9de8a9bce8a0ea0e9eae632ecaf0\",\"moduleSequenceNumber\":43089,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}}}","CompaniesSave":"{\"ECorp\":{\"ctor\":\"Company\",\"data\":{\"name\":\"ECorp\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":3,\"salaryMultiplier\":3,\"jobStatReqOffset\":249,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.008,\"isMegacorp\":false}},\"MegaCorp\":{\"ctor\":\"Company\",\"data\":{\"name\":\"MegaCorp\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":3,\"salaryMultiplier\":3,\"jobStatReqOffset\":249,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":1.9062,\"isMegacorp\":false}},\"Bachman & Associates\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Bachman & Associates\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.6,\"salaryMultiplier\":2.6,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.008,\"isMegacorp\":false}},\"Blade Industries\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Blade Industries\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.75,\"salaryMultiplier\":2.75,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.008,\"isMegacorp\":false}},\"NWO\":{\"ctor\":\"Company\",\"data\":{\"name\":\"NWO\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.75,\"salaryMultiplier\":2.75,\"jobStatReqOffset\":249,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.008,\"isMegacorp\":false}},\"Clarke Incorporated\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Clarke Incorporated\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.25,\"salaryMultiplier\":2.25,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.008,\"isMegacorp\":false}},\"OmniTek Incorporated\":{\"ctor\":\"Company\",\"data\":{\"name\":\"OmniTek Incorporated\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.25,\"salaryMultiplier\":2.25,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.4466,\"isMegacorp\":false}},\"Four Sigma\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Four Sigma\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.5,\"salaryMultiplier\":2.5,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.008,\"isMegacorp\":false}},\"KuaiGong International\":{\"ctor\":\"Company\",\"data\":{\"name\":\"KuaiGong International\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.2,\"salaryMultiplier\":2.2,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.008,\"isMegacorp\":false}},\"Fulcrum Technologies\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Fulcrum Technologies\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true},\"expMultiplier\":2,\"salaryMultiplier\":2,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.008,\"isMegacorp\":false}},\"Storm Technologies\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Storm Technologies\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true},\"expMultiplier\":1.8,\"salaryMultiplier\":1.8,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.008,\"isMegacorp\":false}},\"DefComm\":{\"ctor\":\"Company\",\"data\":{\"name\":\"DefComm\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.75,\"salaryMultiplier\":1.75,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.008,\"isMegacorp\":false}},\"Helios Labs\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Helios Labs\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.8,\"salaryMultiplier\":1.8,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.008,\"isMegacorp\":false}},\"VitaLife\":{\"ctor\":\"Company\",\"data\":{\"name\":\"VitaLife\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.8,\"salaryMultiplier\":1.8,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.008,\"isMegacorp\":false}},\"Icarus Microsystems\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Icarus Microsystems\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.9,\"salaryMultiplier\":1.9,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.008,\"isMegacorp\":false}},\"Universal Energy\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Universal Energy\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":2,\"salaryMultiplier\":2,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":16.5071,\"isMegacorp\":false}},\"Galactic Cybersystems\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Galactic Cybersystems\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.9,\"salaryMultiplier\":1.9,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.008,\"isMegacorp\":false}},\"AeroCorp\":{\"ctor\":\"Company\",\"data\":{\"name\":\"AeroCorp\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Operations Manager\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.7,\"salaryMultiplier\":1.7,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.008,\"isMegacorp\":false}},\"Omnia Cybersystems\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Omnia Cybersystems\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Operations Manager\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.7,\"salaryMultiplier\":1.7,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":106.18092229807722,\"favor\":0.008,\"isMegacorp\":false}},\"Solaris Space Systems\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Solaris Space Systems\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Operations Manager\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.7,\"salaryMultiplier\":1.7,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.008,\"isMegacorp\":false}},\"DeltaOne\":{\"ctor\":\"Company\",\"data\":{\"name\":\"DeltaOne\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Operations Manager\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.6,\"salaryMultiplier\":1.6,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.008,\"isMegacorp\":false}},\"Global Pharmaceuticals\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Global Pharmaceuticals\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.8,\"salaryMultiplier\":1.8,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.008,\"isMegacorp\":false}},\"Nova Medical\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Nova Medical\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.75,\"salaryMultiplier\":1.75,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.008,\"isMegacorp\":false}},\"Central Intelligence Agency\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Central Intelligence Agency\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true,\"Field Agent\":true,\"Secret Agent\":true,\"Special Operative\":true},\"expMultiplier\":2,\"salaryMultiplier\":2,\"jobStatReqOffset\":149,\"isPlayerEmployed\":false,\"playerReputation\":238.41274938365615,\"favor\":3.0857,\"isMegacorp\":false}},\"National Security Agency\":{\"ctor\":\"Company\",\"data\":{\"name\":\"National Security Agency\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true,\"Field Agent\":true,\"Secret Agent\":true,\"Special Operative\":true},\"expMultiplier\":2,\"salaryMultiplier\":2,\"jobStatReqOffset\":149,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.008,\"isMegacorp\":false}},\"Watchdog Security\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Watchdog Security\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true,\"Field Agent\":true,\"Secret Agent\":true,\"Special Operative\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.5,\"salaryMultiplier\":1.5,\"jobStatReqOffset\":124,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.008,\"isMegacorp\":false}},\"LexoCorp\":{\"ctor\":\"Company\",\"data\":{\"name\":\"LexoCorp\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.4,\"salaryMultiplier\":1.4,\"jobStatReqOffset\":99,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.008,\"isMegacorp\":false}},\"Rho Construction\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Rho Construction\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true},\"expMultiplier\":1.3,\"salaryMultiplier\":1.3,\"jobStatReqOffset\":49,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.008,\"isMegacorp\":false}},\"Alpha Enterprises\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Alpha Enterprises\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.5,\"salaryMultiplier\":1.5,\"jobStatReqOffset\":99,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.8337,\"isMegacorp\":false}},\"Aevum Police Headquarters\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Aevum Police Headquarters\",\"info\":\"\",\"companyPositions\":{\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true},\"expMultiplier\":1.3,\"salaryMultiplier\":1.3,\"jobStatReqOffset\":99,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.008,\"isMegacorp\":false}},\"SysCore Securities\":{\"ctor\":\"Company\",\"data\":{\"name\":\"SysCore Securities\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true},\"expMultiplier\":1.3,\"salaryMultiplier\":1.3,\"jobStatReqOffset\":124,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.008,\"isMegacorp\":false}},\"CompuTek\":{\"ctor\":\"Company\",\"data\":{\"name\":\"CompuTek\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true},\"expMultiplier\":1.2,\"salaryMultiplier\":1.2,\"jobStatReqOffset\":74,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.008,\"isMegacorp\":false}},\"NetLink Technologies\":{\"ctor\":\"Company\",\"data\":{\"name\":\"NetLink Technologies\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true},\"expMultiplier\":1.2,\"salaryMultiplier\":1.2,\"jobStatReqOffset\":99,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.008,\"isMegacorp\":false}},\"Carmichael Security\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Carmichael Security\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Field Agent\":true,\"Secret Agent\":true,\"Special Operative\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.2,\"salaryMultiplier\":1.2,\"jobStatReqOffset\":74,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.2157,\"isMegacorp\":false}},\"FoodNStuff\":{\"ctor\":\"Company\",\"data\":{\"name\":\"FoodNStuff\",\"info\":\"\",\"companyPositions\":{\"Employee\":true,\"Part-time Employee\":true},\"expMultiplier\":1,\"salaryMultiplier\":1,\"jobStatReqOffset\":0,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":2.8219,\"isMegacorp\":false}},\"Joe's Guns\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Joe's Guns\",\"info\":\"\",\"companyPositions\":{\"Employee\":true,\"Part-time Employee\":true},\"expMultiplier\":1,\"salaryMultiplier\":1,\"jobStatReqOffset\":0,\"isPlayerEmployed\":false,\"playerReputation\":2.0870110026221944,\"favor\":0.0091,\"isMegacorp\":false}},\"Omega Software\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Omega Software\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true},\"expMultiplier\":1.1,\"salaryMultiplier\":1.1,\"jobStatReqOffset\":49,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.008,\"isMegacorp\":false}},\"Noodle Bar\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Noodle Bar\",\"info\":\"\",\"companyPositions\":{\"Waiter\":true,\"Part-time Waiter\":true},\"expMultiplier\":1,\"salaryMultiplier\":1,\"jobStatReqOffset\":0,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.008,\"isMegacorp\":false}}}","FactionsSave":"{\"Illuminati\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Synthetic Heart\",\"Synfibril Muscle\",\"NEMEAN Subdermal Weave\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"NeuroFlux Governor\",\"QLink\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Illuminati\",\"playerReputation\":0}},\"Daedalus\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Synthetic Heart\",\"Synfibril Muscle\",\"NEMEAN Subdermal Weave\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"NeuroFlux Governor\",\"The Red Pill\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Daedalus\",\"playerReputation\":0}},\"The Covenant\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Augmented Targeting III\",\"Synthetic Heart\",\"Synfibril Muscle\",\"Combat Rib III\",\"NEMEAN Subdermal Weave\",\"Graphene Bone Lacings\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"NeuroFlux Governor\",\"SPTN-97 Gene Modification\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"The Covenant\",\"playerReputation\":0}},\"ECorp\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Graphene Bionic Spine Upgrade\",\"Graphene Bionic Legs Upgrade\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"PC Direct-Neural Interface\",\"PC Direct-Neural Interface Optimization Submodule\",\"NeuroFlux Governor\",\"ECorp HVMind Implant\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"ECorp\",\"playerReputation\":0}},\"MegaCorp\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Graphene Bionic Legs Upgrade\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"ADR-V1 Pheromone Gene\",\"NeuroFlux Governor\",\"CordiARC Fusion Reactor\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"MegaCorp\",\"playerReputation\":0}},\"Bachman & Associates\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Enhanced Social Interaction Implant\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"Speech Enhancement\",\"FocusWire\",\"ADR-V2 Pheromone Gene\",\"NeuroFlux Governor\",\"SmartJaw\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Bachman & Associates\",\"playerReputation\":0}},\"Blade Industries\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Synfibril Muscle\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Nanofiber Weave\",\"Bionic Spine\",\"Bionic Legs\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"PC Direct-Neural Interface\",\"PC Direct-Neural Interface Optimization Submodule\",\"NeuroFlux Governor\",\"HyperSight Corneal Implant\",\"Neotra\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Blade Industries\",\"playerReputation\":0}},\"NWO\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Synthetic Heart\",\"Synfibril Muscle\",\"Enhanced Social Interaction Implant\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"ADR-V1 Pheromone Gene\",\"NeuroFlux Governor\",\"Neurotrainer III\",\"Power Recirculation Core\",\"Xanipher\",\"Hydroflame Left Arm\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"NWO\",\"playerReputation\":0}},\"Clarke Incorporated\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Enhanced Social Interaction Implant\",\"Neuralstimulator\",\"Neuronal Densification\",\"Nuoptimal Nootropic Injector Implant\",\"Speech Enhancement\",\"FocusWire\",\"ADR-V2 Pheromone Gene\",\"NeuroFlux Governor\",\"nextSENS Gene Modification\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Clarke Incorporated\",\"playerReputation\":0}},\"OmniTek Incorporated\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Nanofiber Weave\",\"Bionic Spine\",\"Bionic Legs\",\"Enhanced Social Interaction Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"PC Direct-Neural Interface\",\"NeuroFlux Governor\",\"OmniTek InfoLoad\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"OmniTek Incorporated\",\"playerReputation\":0}},\"Four Sigma\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Enhanced Social Interaction Implant\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"Speech Enhancement\",\"FocusWire\",\"PC Direct-Neural Interface\",\"ADR-V1 Pheromone Gene\",\"ADR-V2 Pheromone Gene\",\"NeuroFlux Governor\",\"Neurotrainer III\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Four Sigma\",\"playerReputation\":0}},\"KuaiGong International\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Synthetic Heart\",\"Synfibril Muscle\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Bionic Spine\",\"Bionic Legs\",\"Embedded Netburner Module Core V2 Upgrade\",\"Speech Enhancement\",\"FocusWire\",\"NeuroFlux Governor\",\"HyperSight Corneal Implant\",\"Photosynthetic Cells\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"KuaiGong International\",\"playerReputation\":0}},\"Fulcrum Secret Technologies\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Synthetic Heart\",\"Synfibril Muscle\",\"Nanofiber Weave\",\"NEMEAN Subdermal Weave\",\"Graphene Bone Lacings\",\"Graphene Bionic Spine Upgrade\",\"Graphene Bionic Legs Upgrade\",\"Artificial Bio-neural Network Implant\",\"Enhanced Myelin Sheathing\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"PC Direct-Neural Interface Optimization Submodule\",\"PC Direct-Neural Interface NeuroNet Injector\",\"NeuroFlux Governor\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Fulcrum Secret Technologies\",\"playerReputation\":0}},\"BitRunners\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Artificial Bio-neural Network Implant\",\"Enhanced Myelin Sheathing\",\"DataJack\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Neural Accelerator\",\"Cranial Signal Processors - Gen III\",\"Cranial Signal Processors - Gen IV\",\"Cranial Signal Processors - Gen V\",\"NeuroFlux Governor\",\"Neurotrainer II\",\"BitRunners Neurolink\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"BitRunners\",\"playerReputation\":0}},\"The Black Hand\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"Artificial Synaptic Potentiation\",\"Enhanced Myelin Sheathing\",\"DataJack\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Neuralstimulator\",\"Cranial Signal Processors - Gen III\",\"Cranial Signal Processors - Gen IV\",\"NeuroFlux Governor\",\"The Black Hand\"],\"favor\":0,\"isBanned\":false,\"isMember\":true,\"name\":\"The Black Hand\",\"playerReputation\":4.539833653596257}},\"NiteSec\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"BitWire\",\"Artificial Synaptic Potentiation\",\"Neural-Retention Enhancement\",\"DataJack\",\"Embedded Netburner Module\",\"Cranial Signal Processors - Gen II\",\"Cranial Signal Processors - Gen III\",\"NeuroFlux Governor\",\"Neurotrainer II\",\"CRTX42-AA Gene Modification\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"NiteSec\",\"playerReputation\":0}},\"Aevum\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Wired Reflexes\",\"Speech Processor Implant\",\"Synaptic Enhancement Implant\",\"Neuralstimulator\",\"NeuroFlux Governor\",\"Neurotrainer I\",\"PCMatrix\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Aevum\",\"playerReputation\":0}},\"Chongqing\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Speech Processor Implant\",\"DataJack\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"NeuroFlux Governor\",\"Neuregen Gene Modification\"],\"favor\":0,\"isBanned\":true,\"isMember\":false,\"name\":\"Chongqing\",\"playerReputation\":0}},\"Ishima\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Augmented Targeting I\",\"Combat Rib I\",\"Wired Reflexes\",\"Speech Processor Implant\",\"Neuralstimulator\",\"NeuroFlux Governor\",\"INFRARET Enhancement\"],\"favor\":0,\"isBanned\":true,\"isMember\":false,\"name\":\"Ishima\",\"playerReputation\":0}},\"New Tokyo\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Speech Processor Implant\",\"DataJack\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"NeuroFlux Governor\",\"NutriGen Implant\"],\"favor\":0,\"isBanned\":true,\"isMember\":false,\"name\":\"New Tokyo\",\"playerReputation\":0}},\"Sector-12\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"Augmented Targeting I\",\"Augmented Targeting II\",\"Wired Reflexes\",\"Speech Processor Implant\",\"Neuralstimulator\",\"NeuroFlux Governor\",\"CashRoot Starter Kit\"],\"favor\":27.9169,\"isBanned\":false,\"isMember\":true,\"name\":\"Sector-12\",\"playerReputation\":536.7100980598851}},\"Volhaven\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Combat Rib I\",\"Combat Rib II\",\"Wired Reflexes\",\"Speech Processor Implant\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"NeuroFlux Governor\",\"DermaForce Particle Barrier\"],\"favor\":0,\"isBanned\":true,\"isMember\":false,\"name\":\"Volhaven\",\"playerReputation\":0}},\"Speakers for the Dead\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Unstable Circadian Modulator\",\"Synthetic Heart\",\"Synfibril Muscle\",\"Nanofiber Weave\",\"Wired Reflexes\",\"Bionic Spine\",\"Bionic Legs\",\"Speech Enhancement\",\"The Shadow's Simulacrum\",\"NeuroFlux Governor\",\"Graphene BrachiBlades Upgrade\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Speakers for the Dead\",\"playerReputation\":0}},\"The Dark Army\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"HemoRecirculator\",\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Nanofiber Weave\",\"Wired Reflexes\",\"The Shadow's Simulacrum\",\"NeuroFlux Governor\",\"Power Recirculation Core\",\"Graphene Bionic Arms Upgrade\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"The Dark Army\",\"playerReputation\":0}},\"The Syndicate\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"HemoRecirculator\",\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Nanofiber Weave\",\"NEMEAN Subdermal Weave\",\"Wired Reflexes\",\"Bionic Spine\",\"Bionic Legs\",\"ADR-V1 Pheromone Gene\",\"The Shadow's Simulacrum\",\"NeuroFlux Governor\",\"Power Recirculation Core\",\"BrachiBlades\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"The Syndicate\",\"playerReputation\":0}},\"Silhouette\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Speech Processor Implant\",\"TITN-41 Gene-Modification Injection\",\"ADR-V2 Pheromone Gene\",\"NeuroFlux Governor\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Silhouette\",\"playerReputation\":0}},\"Tetrads\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"HemoRecirculator\",\"NeuroFlux Governor\",\"LuminCloaking-V1 Skin Implant\",\"LuminCloaking-V2 Skin Implant\",\"Power Recirculation Core\",\"Bionic Arms\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Tetrads\",\"playerReputation\":0}},\"Slum Snakes\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Augmented Targeting I\",\"Combat Rib I\",\"Wired Reflexes\",\"NeuroFlux Governor\",\"LuminCloaking-V1 Skin Implant\",\"LuminCloaking-V2 Skin Implant\",\"SmartSonar Implant\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Slum Snakes\",\"playerReputation\":0}},\"Netburners\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"Hacknet Node CPU Architecture Neural-Upload\",\"Hacknet Node Cache Architecture Neural-Upload\",\"Hacknet Node NIC Architecture Neural-Upload\",\"Hacknet Node Kernel Direct-Neural Interface\",\"Hacknet Node Core Direct-Neural Interface\",\"NeuroFlux Governor\"],\"favor\":8.9896,\"isBanned\":false,\"isMember\":true,\"name\":\"Netburners\",\"playerReputation\":293.8022145697317}},\"Tian Di Hui\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"Nanofiber Weave\",\"Wired Reflexes\",\"Speech Processor Implant\",\"Nuoptimal Nootropic Injector Implant\",\"Speech Enhancement\",\"ADR-V1 Pheromone Gene\",\"NeuroFlux Governor\",\"Social Negotiation Assistant (S.N.A)\",\"Neuroreceptor Management Implant\"],\"favor\":1.0937999999999999,\"isBanned\":false,\"isMember\":true,\"name\":\"Tian Di Hui\",\"playerReputation\":6385.033788988945}},\"CyberSec\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"BitWire\",\"Synaptic Enhancement Implant\",\"Cranial Signal Processors - Gen I\",\"Cranial Signal Processors - Gen II\",\"NeuroFlux Governor\",\"Neurotrainer I\"],\"favor\":66.0585,\"isBanned\":false,\"isMember\":true,\"name\":\"CyberSec\",\"playerReputation\":3242.6144678805795}},\"Bladeburners\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"EsperTech Bladeburner Eyewear\",\"EMS-4 Recombination\",\"ORION-MKIV Shoulder\",\"Hyperion Plasma Cannon V1\",\"Hyperion Plasma Cannon V2\",\"GOLEM Serum\",\"Vangelis Virus\",\"Vangelis Virus 3.0\",\"I.N.T.E.R.L.I.N.K.E.D\",\"Blade's Runners\",\"BLADE-51b Tesla Armor\",\"BLADE-51b Tesla Armor: Power Cells Upgrade\",\"BLADE-51b Tesla Armor: Energy Shielding Upgrade\",\"BLADE-51b Tesla Armor: Unibeam Upgrade\",\"BLADE-51b Tesla Armor: Omnibeam Upgrade\",\"BLADE-51b Tesla Armor: IPU Upgrade\",\"The Blade's Simulacrum\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Bladeburners\",\"playerReputation\":0}},\"Church of the Machine God\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Stanek's Gift - Genesis\",\"Stanek's Gift - Awakening\",\"Stanek's Gift - Serenity\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Church of the Machine God\",\"playerReputation\":0}}}","AliasesSave":"{\"vi\":\"nano\",\"cl\":\"cls\"}","GlobalAliasesSave":"{}","MessagesSave":"{\"j0.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"j0.msg\",\"msg\":\"I know you can sense it. I know you're searching for it. It's why you spend night after night at your computer. <br><br>It's real, I've seen it. And I can help you find it. But not right now. You're not ready yet.<br><br>Use this program to track your progress<br><br>The fl1ght.exe program was added to your home computer<br><br>-jump3R\",\"recvd\":true}},\"j1.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"j1.msg\",\"msg\":\"Soon you will be contacted by a hacking group known as CyberSec. They can help you with your search. <br><br>You should join them, garner their favor, and exploit them for their Augmentations. But do not trust them. They are not what they seem. No one is.<br><br>-jump3R\",\"recvd\":true}},\"j2.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"j2.msg\",\"msg\":\"Do not try to save the world. There is no world to save. If you want to find the truth, worry only about yourself. Ethics and morals will get you killed. <br><br>Watch out for a hacking group known as NiteSec.<br><br>-jump3R\",\"recvd\":true}},\"j3.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"j3.msg\",\"msg\":\"You must learn to walk before you can run. And you must run before you can fly. Look for the black hand. <br><br>I.I.I.I <br><br>-jump3R\",\"recvd\":true}},\"j4.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"j4.msg\",\"msg\":\"To find what you are searching for, you must understand the bits. The bits are all around us. The runners will help you.<br><br>-jump3R\",\"recvd\":false}},\"csec-test.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"csec-test.msg\",\"msg\":\"We've been watching you. Your skills are very impressive. But you're wasting your talents. If you join us, you can put your skills to good use and change the world for the better. If you join us, we can unlock your full potential. <br><br>But first, you must pass our test. Find and install the backdoor on our server. <br><br>-CyberSec\",\"recvd\":true}},\"nitesec-test.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"nitesec-test.msg\",\"msg\":\"People say that the corrupted governments and corporations rule the world. Yes, maybe they do. But do you know who everyone really fears? People like us. Because they can't hide from us. Because they can't fight shadows and ideas with bullets. <br><br>Join us, and people will fear you, too. <br><br>Find and install the backdoor on our server. Then, we will contact you again.<br><br>-NiteSec\",\"recvd\":true}},\"19dfj3l1nd.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"19dfj3l1nd.msg\",\"msg\":\"We know what you are doing. We know what drives you. We know what you are looking for. <br><br> We can help you find the answers.<br><br>run4theh111z\",\"recvd\":false}},\"icarus.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"icarus.msg\",\"msg\":\"@)(#V%*N)@(#*)*C)@#%*)*V)@#(*%V@)(#VN%*)@#(*%<br>)@B(*#%)@)M#B*%V)____FIND___#$@)#%(B*)@#(*%B)<br>@_#(%_@#M(BDSPOMB__THE-CAVE_#)$(*@#$)@#BNBEGB<br>DFLSMFVMV)#@($*)@#*$MV)@#(*$V)M#(*$)M@(#*VM$)\",\"recvd\":false}}}","StockMarketSave":"{\"ECorp\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"ECorp\",\"symbol\":\"ECP\",\"price\":32458.220175589515,\"lastPrice\":32414.5422509825,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.43,\"b\":true,\"otlkMag\":18.57542017677223,\"otlkMagForecast\":68.75968635906519,\"cap\":591733520,\"spreadPerc\":0.4,\"shareTxForMovement\":39802,\"shareTxUntilMovement\":39802,\"totalShares\":88800000,\"maxShares\":17800000}},\"MegaCorp\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"MegaCorp\",\"symbol\":\"MGCP\",\"price\":34164.13378700758,\"lastPrice\":34116.02498046877,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.45,\"b\":false,\"otlkMag\":18.710601490407928,\"otlkMagForecast\":31.263443628119987,\"cap\":412436559,\"spreadPerc\":0.4,\"shareTxForMovement\":81905,\"shareTxUntilMovement\":81905,\"totalShares\":76300000,\"maxShares\":15300000}},\"Blade Industries\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Blade Industries\",\"symbol\":\"BLD\",\"price\":29992.59910859661,\"lastPrice\":29920.403328330452,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.77,\"b\":true,\"otlkMag\":13.664602601237467,\"otlkMagForecast\":64.66490578703906,\"cap\":189861871,\"spreadPerc\":0.6,\"shareTxForMovement\":42328,\"shareTxUntilMovement\":42328,\"totalShares\":67500000,\"maxShares\":13500000}},\"Clarke Incorporated\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Clarke Incorporated\",\"symbol\":\"CLRK\",\"price\":10155.70166397075,\"lastPrice\":10134.740749540197,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.66,\"b\":false,\"otlkMag\":11.288916445292184,\"otlkMagForecast\":36.755794822420306,\"cap\":213968999,\"spreadPerc\":0.4,\"shareTxForMovement\":62097,\"shareTxUntilMovement\":62097,\"totalShares\":140900000,\"maxShares\":28200000}},\"OmniTek Incorporated\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"OmniTek Incorporated\",\"symbol\":\"OMTK\",\"price\":32303.095395978326,\"lastPrice\":32233.399237092905,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.69,\"b\":false,\"otlkMag\":12.816943692841617,\"otlkMagForecast\":37.4150649142846,\"cap\":663291844,\"spreadPerc\":0.1,\"shareTxForMovement\":72441,\"shareTxUntilMovement\":72441,\"totalShares\":45400000,\"maxShares\":9100000}},\"Four Sigma\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Four Sigma\",\"symbol\":\"FSIG\",\"price\":226028.92542745106,\"lastPrice\":226793.89017478883,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":1.08,\"b\":true,\"otlkMag\":18.976143054228682,\"otlkMagForecast\":67.9999990962532,\"cap\":1154432794,\"spreadPerc\":0.2,\"shareTxForMovement\":47432,\"shareTxUntilMovement\":47432,\"totalShares\":33100000,\"maxShares\":6600000}},\"KuaiGong International\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"KuaiGong International\",\"symbol\":\"KGI\",\"price\":18737.207528780666,\"lastPrice\":18688.599445755655,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.83,\"b\":false,\"otlkMag\":9.312094488265195,\"otlkMagForecast\":41.13879885410315,\"cap\":199072665,\"spreadPerc\":0.4,\"shareTxForMovement\":69548,\"shareTxUntilMovement\":69548,\"totalShares\":73400000,\"maxShares\":14700000}},\"Fulcrum Technologies\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Fulcrum Technologies\",\"symbol\":\"FLCM\",\"price\":115347.49355099836,\"lastPrice\":114886.67148933363,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":1.28,\"b\":true,\"otlkMag\":19.785965736305954,\"otlkMagForecast\":68.32722559227948,\"cap\":424845776,\"spreadPerc\":0.9,\"shareTxForMovement\":64431,\"shareTxUntilMovement\":64431,\"totalShares\":61800000,\"maxShares\":12400000}},\"Storm Technologies\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Storm Technologies\",\"symbol\":\"STM\",\"price\":20462.820432899258,\"lastPrice\":20516.684411015573,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.84,\"b\":true,\"otlkMag\":5.9170998928366885,\"otlkMagForecast\":56.62969155238223,\"cap\":341913885,\"spreadPerc\":0.2,\"shareTxForMovement\":62858,\"shareTxUntilMovement\":62858,\"totalShares\":51500000,\"maxShares\":10300000}},\"DefComm\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"DefComm\",\"symbol\":\"DCOMM\",\"price\":24048.689116117832,\"lastPrice\":24094.659156886104,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.61,\"b\":false,\"otlkMag\":11.437386847785161,\"otlkMagForecast\":39.99681502128795,\"cap\":209200195,\"spreadPerc\":0.2,\"shareTxForMovement\":44875,\"shareTxUntilMovement\":44875,\"totalShares\":68100000,\"maxShares\":13600000}},\"Helios Labs\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Helios Labs\",\"symbol\":\"HLS\",\"price\":19902.8310780215,\"lastPrice\":19937.13400606064,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.55,\"b\":true,\"otlkMag\":9.428662449325037,\"otlkMagForecast\":58.088776683807055,\"cap\":61433868,\"spreadPerc\":0.5,\"shareTxForMovement\":86191,\"shareTxUntilMovement\":86191,\"totalShares\":67800000,\"maxShares\":13600000}},\"VitaLife\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"VitaLife\",\"symbol\":\"VITA\",\"price\":11966.1554425064,\"lastPrice\":11992.40405345282,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.7,\"b\":false,\"otlkMag\":7.628686157364094,\"otlkMagForecast\":43.883150967290256,\"cap\":234975275,\"spreadPerc\":0.2,\"shareTxForMovement\":40233,\"shareTxUntilMovement\":40233,\"totalShares\":100500000,\"maxShares\":20100000}},\"Icarus Microsystems\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Icarus Microsystems\",\"symbol\":\"ICRS\",\"price\":21169.750559196873,\"lastPrice\":21210.880783321452,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.62,\"b\":false,\"otlkMag\":8.130455096693469,\"otlkMagForecast\":41.96162714814192,\"cap\":70262942,\"spreadPerc\":0.9,\"shareTxForMovement\":45727,\"shareTxUntilMovement\":45727,\"totalShares\":36200000,\"maxShares\":7200000}},\"Universal Energy\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Universal Energy\",\"symbol\":\"UNV\",\"price\":29057.42074027782,\"lastPrice\":29011.056050321942,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.51,\"b\":true,\"otlkMag\":8.824608764456464,\"otlkMagForecast\":60.403581259043925,\"cap\":71309127,\"spreadPerc\":0.3,\"shareTxForMovement\":83451,\"shareTxUntilMovement\":83451,\"totalShares\":33800000,\"maxShares\":6800000}},\"AeroCorp\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"AeroCorp\",\"symbol\":\"AERO\",\"price\":12533.502587728695,\"lastPrice\":12555.497089458306,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.56,\"b\":true,\"otlkMag\":5.22176688838065,\"otlkMagForecast\":55.9779422444147,\"cap\":216880190,\"spreadPerc\":0.8,\"shareTxForMovement\":103622,\"shareTxUntilMovement\":103622,\"totalShares\":51600000,\"maxShares\":10300000}},\"Omnia Cybersystems\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Omnia Cybersystems\",\"symbol\":\"OMN\",\"price\":11613.042631498896,\"lastPrice\":11637.061005416184,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.66,\"b\":false,\"otlkMag\":5.227008817824108,\"otlkMagForecast\":47.06957912329053,\"cap\":172614353,\"spreadPerc\":0.4,\"shareTxForMovement\":122754,\"shareTxUntilMovement\":122754,\"totalShares\":47500000,\"maxShares\":9500000}},\"Solaris Space Systems\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Solaris Space Systems\",\"symbol\":\"SLRS\",\"price\":17674.878180299922,\"lastPrice\":17715.864770986675,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.74,\"b\":true,\"otlkMag\":8.682342541260905,\"otlkMagForecast\":59.27737359253812,\"cap\":43352735,\"spreadPerc\":0.8,\"shareTxForMovement\":101461,\"shareTxUntilMovement\":101461,\"totalShares\":34800000,\"maxShares\":7000000}},\"Global Pharmaceuticals\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Global Pharmaceuticals\",\"symbol\":\"GPH\",\"price\":18477.58202606502,\"lastPrice\":18441.75196800303,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.62,\"b\":false,\"otlkMag\":10.308469967739947,\"otlkMagForecast\":38.86132414524164,\"cap\":207225849,\"spreadPerc\":0.5,\"shareTxForMovement\":124780,\"shareTxUntilMovement\":124780,\"totalShares\":46400000,\"maxShares\":9300000}},\"Nova Medical\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Nova Medical\",\"symbol\":\"NVMD\",\"price\":29800.20278772449,\"lastPrice\":29731.258441522266,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.74,\"b\":true,\"otlkMag\":4.369928124363157,\"otlkMagForecast\":55.83589053171599,\"cap\":284656245,\"spreadPerc\":0.7,\"shareTxForMovement\":112706,\"shareTxUntilMovement\":112706,\"totalShares\":23200000,\"maxShares\":4600000}},\"Watchdog Security\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Watchdog Security\",\"symbol\":\"WDS\",\"price\":4212.631041101069,\"lastPrice\":4181.185122645491,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":2.4,\"b\":false,\"otlkMag\":8.062782654948816,\"otlkMagForecast\":42.41293672589343,\"cap\":41662848,\"spreadPerc\":1.1,\"shareTxForMovement\":22352,\"shareTxUntilMovement\":22352,\"totalShares\":91100000,\"maxShares\":18200000}},\"LexoCorp\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"LexoCorp\",\"symbol\":\"LXO\",\"price\":7464.345149577634,\"lastPrice\":7493.349760480995,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":1.24,\"b\":false,\"otlkMag\":6.545825135982581,\"otlkMagForecast\":43.828231974994196,\"cap\":130471142,\"spreadPerc\":0.8,\"shareTxForMovement\":68634,\"shareTxUntilMovement\":68634,\"totalShares\":49400000,\"maxShares\":9900000}},\"Rho Construction\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Rho Construction\",\"symbol\":\"RHOC\",\"price\":6961.953019286698,\"lastPrice\":6973.07942546325,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.51,\"b\":true,\"otlkMag\":3.681562816602953,\"otlkMagForecast\":51.86401426894399,\"cap\":80835697,\"spreadPerc\":0.7,\"shareTxForMovement\":76372,\"shareTxUntilMovement\":76372,\"totalShares\":31300000,\"maxShares\":6300000}},\"Alpha Enterprises\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Alpha Enterprises\",\"symbol\":\"APHE\",\"price\":5645.909043827892,\"lastPrice\":5679.524663698508,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":1.9,\"b\":false,\"otlkMag\":9.580279411120548,\"otlkMagForecast\":41.46887661046574,\"cap\":15997809,\"spreadPerc\":1.5,\"shareTxForMovement\":82190,\"shareTxUntilMovement\":82190,\"totalShares\":28900000,\"maxShares\":5800000}},\"SysCore Securities\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"SysCore Securities\",\"symbol\":\"SYSC\",\"price\":5664.831013578337,\"lastPrice\":5637.6246483519635,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":1.54,\"b\":false,\"otlkMag\":6.106331907835908,\"otlkMagForecast\":46.62630617508474,\"cap\":44065610,\"spreadPerc\":0.8,\"shareTxForMovement\":88578,\"shareTxUntilMovement\":88578,\"totalShares\":46200000,\"maxShares\":9200000}},\"CompuTek\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"CompuTek\",\"symbol\":\"CTK\",\"price\":5979.761938532974,\"lastPrice\":5995.877149360066,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.86,\"b\":false,\"otlkMag\":5.640785022786809,\"otlkMagForecast\":45.97125360480648,\"cap\":99963952,\"spreadPerc\":0.5,\"shareTxForMovement\":80896,\"shareTxUntilMovement\":80896,\"totalShares\":40300000,\"maxShares\":8100000}},\"NetLink Technologies\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"NetLink Technologies\",\"symbol\":\"NTLK\",\"price\":156.73423162434415,\"lastPrice\":158.49256221381663,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":3.58,\"b\":true,\"otlkMag\":5.649983879722,\"otlkMagForecast\":56.97306295044174,\"cap\":35598087,\"spreadPerc\":1.2,\"shareTxForMovement\":21139,\"shareTxUntilMovement\":21139,\"totalShares\":32000000,\"maxShares\":6400000}},\"Omega Software\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Omega Software\",\"symbol\":\"OMGA\",\"price\":2763.4070896365424,\"lastPrice\":2772.2398954958417,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":1.02,\"b\":false,\"otlkMag\":5.488989179438498,\"otlkMagForecast\":46.78859425600984,\"cap\":34305649,\"spreadPerc\":1,\"shareTxForMovement\":32807,\"shareTxUntilMovement\":32807,\"totalShares\":27100000,\"maxShares\":5400000}},\"FoodNStuff\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"FoodNStuff\",\"symbol\":\"FNS\",\"price\":2487.7060446976875,\"lastPrice\":2493.396874108061,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.73,\"b\":false,\"otlkMag\":1.4656077409907484,\"otlkMagForecast\":48.370226352403655,\"cap\":50443305,\"spreadPerc\":0.6,\"shareTxForMovement\":79068,\"shareTxUntilMovement\":79068,\"totalShares\":16300000,\"maxShares\":3300000}},\"Sigma Cosmetics\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Sigma Cosmetics\",\"symbol\":\"SGC\",\"price\":8183.322357572436,\"lastPrice\":8235.89225940724,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":2.05,\"b\":false,\"otlkMag\":6.004920762794998,\"otlkMagForecast\":46.95188436296707,\"cap\":31627059,\"spreadPerc\":1.3,\"shareTxForMovement\":63580,\"shareTxUntilMovement\":63580,\"totalShares\":10600000,\"maxShares\":2100000}},\"Joe's Guns\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Joe's Guns\",\"symbol\":\"JGN\",\"price\":498.02468060769456,\"lastPrice\":502.9719296554863,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":3.17,\"b\":true,\"otlkMag\":6.3989353367813075,\"otlkMagForecast\":57.32206621909529,\"cap\":10628192,\"spreadPerc\":0.9,\"shareTxForMovement\":37158,\"shareTxUntilMovement\":37158,\"totalShares\":96100000,\"maxShares\":19200000}},\"Catalyst Ventures\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Catalyst Ventures\",\"symbol\":\"CTYS\",\"price\":607.6675285264721,\"lastPrice\":610.9237638712647,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":1.71,\"b\":true,\"otlkMag\":10.57568587223464,\"otlkMagForecast\":61.54539632034251,\"cap\":5249926,\"spreadPerc\":0.9,\"shareTxForMovement\":58927,\"shareTxUntilMovement\":58927,\"totalShares\":227300000,\"maxShares\":45500000}},\"Microdyne Technologies\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Microdyne Technologies\",\"symbol\":\"MDYN\",\"price\":19822.020994382718,\"lastPrice\":19871.092419274726,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.79,\"b\":false,\"otlkMag\":7.584431263484446,\"otlkMagForecast\":42.518396382174515,\"cap\":525636876,\"spreadPerc\":0.4,\"shareTxForMovement\":99686,\"shareTxUntilMovement\":99686,\"totalShares\":14800000,\"maxShares\":3000000}},\"Titan Laboratories\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Titan Laboratories\",\"symbol\":\"TITN\",\"price\":19623.38959366389,\"lastPrice\":19585.950258508383,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.61,\"b\":true,\"otlkMag\":10.243621272962763,\"otlkMagForecast\":60.83273011656406,\"cap\":82004958,\"spreadPerc\":0.3,\"shareTxForMovement\":164787,\"shareTxUntilMovement\":164787,\"totalShares\":18600000,\"maxShares\":3700000}},\"Orders\":{\"ECP\":[],\"MGCP\":[],\"BLD\":[],\"CLRK\":[],\"OMTK\":[],\"FSIG\":[],\"KGI\":[],\"FLCM\":[],\"STM\":[],\"DCOMM\":[],\"HLS\":[],\"VITA\":[],\"ICRS\":[],\"UNV\":[],\"AERO\":[],\"OMN\":[],\"SLRS\":[],\"GPH\":[],\"NVMD\":[],\"WDS\":[],\"LXO\":[],\"RHOC\":[],\"APHE\":[],\"SYSC\":[],\"CTK\":[],\"NTLK\":[],\"OMGA\":[],\"FNS\":[],\"SGC\":[],\"JGN\":[],\"CTYS\":[],\"MDYN\":[],\"TITN\":[]},\"storedCycles\":19,\"lastUpdate\":1642605773938,\"ticksUntilCycle\":13}","SettingsSave":"{\"ActiveScriptsServerPageSize\":100,\"ActiveScriptsScriptPageSize\":10,\"AutosaveInterval\":30,\"CodeInstructionRunTime\":5,\"DisableASCIIArt\":false,\"DisableHotkeys\":false,\"DisableTextEffects\":false,\"DisableOverviewProgressBars\":false,\"EnableBashHotkeys\":false,\"TimestampsFormat\":\"\",\"Locale\":\"en\",\"MaxLogCapacity\":500,\"MaxPortCapacity\":50,\"MaxTerminalCapacity\":500,\"OwnedAugmentationsOrder\":1,\"PurchaseAugmentationsOrder\":2,\"SaveGameOnFileSave\":true,\"SuppressBuyAugmentationConfirmation\":false,\"SuppressFactionInvites\":false,\"SuppressMessages\":false,\"SuppressTravelConfirmation\":false,\"SuppressBladeburnerPopup\":false,\"SuppressTIXPopup\":false,\"SuppressSavedGameToast\":false,\"UseIEC60027_2\":false,\"ExcludeRunningScriptsFromSave\":false,\"IsSidebarOpened\":true,\"MonacoTheme\":\"monokai\",\"MonacoInsertSpaces\":true,\"MonacoFontSize\":22,\"MonacoVim\":false,\"MonacoWordWrap\":\"off\",\"theme\":{\"primarylight\":\"#0f0\",\"primary\":\"#0c0\",\"primarydark\":\"#090\",\"successlight\":\"#0f0\",\"success\":\"#0c0\",\"successdark\":\"#090\",\"errorlight\":\"#f00\",\"error\":\"#c00\",\"errordark\":\"#900\",\"secondarylight\":\"#AAA\",\"secondary\":\"#888\",\"secondarydark\":\"#666\",\"warninglight\":\"#ff0\",\"warning\":\"#cc0\",\"warningdark\":\"#990\",\"infolight\":\"#69f\",\"info\":\"#36c\",\"infodark\":\"#039\",\"welllight\":\"#444\",\"well\":\"#222\",\"white\":\"#fff\",\"black\":\"#000\",\"hp\":\"#dd3434\",\"money\":\"#ffd700\",\"hack\":\"#adff2f\",\"combat\":\"#faffdf\",\"cha\":\"#a671d1\",\"int\":\"#6495ed\",\"rep\":\"#faffdf\",\"disabled\":\"#66cfbc\",\"backgroundprimary\":\"#000\",\"backgroundsecondary\":\"#000\",\"button\":\"#333\"},\"styles\":{\"lineHeight\":1.5,\"fontFamily\":\"Lucida Console, Lucida Sans Unicode, Fira Mono, Consolas, Courier New, Courier, monospace, Times New Roman\"},\"overview\":{\"x\":0,\"y\":0,\"opened\":true}}","VersionSave":"10","AllGangsSave":"","LastExportBonus":"1642605504081","StaneksGiftSave":"{\"ctor\":\"StaneksGift\",\"data\":{\"storedCycles\":0,\"fragments\":[]}}","SaveTimestamp":"1642605777921"}}