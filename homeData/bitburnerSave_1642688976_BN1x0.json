{"ctor":"BitburnerSaveObject","data":{"PlayerSave":"{\"ctor\":\"PlayerObject\",\"data\":{\"hacking\":468,\"hp\":10,\"max_hp\":10,\"strength\":10,\"defense\":3,\"dexterity\":2,\"agility\":2,\"charisma\":36,\"intelligence\":0,\"hacking_chance_mult\":1.5008634634460747,\"hacking_speed_mult\":1.4734029304020668,\"hacking_money_mult\":1.3613274044862353,\"hacking_grow_mult\":1.3613274044862353,\"hacking_exp\":4701534.991472625,\"strength_exp\":103.23490239180659,\"defense_exp\":16.382213985587377,\"dexterity_exp\":16.382213985587377,\"agility_exp\":16.382213985587377,\"charisma_exp\":440.600693364511,\"intelligence_exp\":0,\"hacking_mult\":1.6059239058873,\"strength_mult\":1.6335928853834825,\"defense_mult\":1.6335928853834825,\"dexterity_mult\":1.4293937747105472,\"agility_mult\":1.4293937747105472,\"charisma_mult\":1.7969521739218308,\"hacking_exp_mult\":1.572333152181602,\"strength_exp_mult\":1.497460144934859,\"defense_exp_mult\":1.497460144934859,\"dexterity_exp_mult\":1.497460144934859,\"agility_exp_mult\":1.497460144934859,\"charisma_exp_mult\":1.497460144934859,\"company_rep_mult\":2.2731445000111163,\"faction_rep_mult\":1.7220791666750879,\"money\":632186687.7006266,\"city\":\"Sector-12\",\"location\":\"Universal Energy\",\"jobs\":{\"Joe's Guns\":\"Employee\",\"FoodNStuff\":\"Employee\",\"DeltaOne\":\"Software Engineering Intern\",\"Universal Energy\":\"Software Engineering Intern\"},\"companyName\":\"Universal Energy\",\"currentServer\":\"home\",\"purchasedServers\":[\"pserv-1024-ed40466b-733c-4479-97d1-abeef13f8803\",\"pserv-1024-4366e5fd-d2b1-42d0-a38a-308ab84864ea\",\"pserv-1024-10ec7d70-dcf1-4f47-a6ea-941c3dc2057e\",\"pserv-1024-460cd4bd-4cae-47fd-8148-7ca7352dfc18\",\"pserv-1024-574455f3-22f4-4950-9425-1895cd99b02e\",\"pserv-1024-096a732b-d300-4732-8577-36b392a4d1b3\",\"pserv-1024-9f1ff2e7-150a-4b85-9ab9-6a9a928c8a23\",\"pserv-1024-0237a7e9-b600-4c6d-94b4-63617196a9c5\",\"pserv-1024-3cd119f2-f064-4ab5-ab47-07642ef6292b\",\"pserv-1024-269f0d47-d50c-4365-9e9b-81c1a9d26cbb\",\"pserv-4096-da1896c1-0bb1-4d84-85c2-422b3271d9fe\",\"pserv-4096-f4e59f1d-267b-4618-ae78-a0d62851ee5c\",\"pserv-4096-6c7894fc-0f09-405f-8ea4-c6ed376036b7\",\"pserv-4096-71c387c0-49c0-4cfb-9693-4f13f9bcf48d\",\"pserv-4096-60b00704-2d0f-4fd0-a83e-32bb052d12a3\",\"pserv-4096-ea699298-8f2d-4ecb-ab84-bb8645f59467\",\"pserv-4096-4041d657-ea33-47e3-aec1-3f51aebc88cc\",\"pserv-4096-3cf8eb5c-cf2f-4d28-8e9e-da3d8b3ddfbb\",\"pserv-4096-5eeeaf7a-f719-4766-a0d3-b850dde4b604\",\"pserv-4096-28c8b228-cb8f-4094-b5fa-91411026cd10\",\"pserv-4096-2a571507-1dcd-44ab-9cb0-6520abb63c7d\",\"pserv-4096-0ecaf692-4fd7-4c69-a1e8-b12c5c9e56e2\",\"pserv-4096-0107f8d5-c741-4a52-889f-cfb4fe679ad2\",\"pserv-4096-2b71c339-8ce0-43c3-ab2f-7c0ac2c977b4\",\"pserv-4096-87cb486d-447f-49cf-b4a8-ef39fe4ff643\"],\"hacknetNodes\":[{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":8,\"level\":200,\"moneyGainRatePerSecond\":19493.02351859522,\"onlineTimeSeconds\":3536.999999998974,\"ram\":64,\"totalMoneyGenerated\":43250138.22208883,\"name\":\"hacknet-node-0\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":8,\"level\":200,\"moneyGainRatePerSecond\":19493.02351859522,\"onlineTimeSeconds\":3524.5999999989854,\"ram\":64,\"totalMoneyGenerated\":42269308.78629998,\"name\":\"hacknet-node-1\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":8,\"level\":200,\"moneyGainRatePerSecond\":19493.02351859522,\"onlineTimeSeconds\":2084.2000000002954,\"ram\":64,\"totalMoneyGenerated\":38769549.96575483,\"name\":\"hacknet-node-2\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":8,\"level\":200,\"moneyGainRatePerSecond\":19493.02351859522,\"onlineTimeSeconds\":1913.600000000298,\"ram\":64,\"totalMoneyGenerated\":37170672.878343984,\"name\":\"hacknet-node-3\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":8,\"level\":200,\"moneyGainRatePerSecond\":19493.02351859522,\"onlineTimeSeconds\":1913.400000000298,\"ram\":64,\"totalMoneyGenerated\":37172249.03483746,\"name\":\"hacknet-node-4\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":8,\"level\":200,\"moneyGainRatePerSecond\":19493.02351859522,\"onlineTimeSeconds\":1913.200000000298,\"ram\":64,\"totalMoneyGenerated\":37164923.33021325,\"name\":\"hacknet-node-5\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":8,\"level\":200,\"moneyGainRatePerSecond\":19493.02351859522,\"onlineTimeSeconds\":64.80000000000038,\"ram\":64,\"totalMoneyGenerated\":1083957.1830002512,\"name\":\"hacknet-node-6\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":8,\"level\":200,\"moneyGainRatePerSecond\":19493.02351859522,\"onlineTimeSeconds\":64.60000000000038,\"ram\":64,\"totalMoneyGenerated\":1072358.347894102,\"name\":\"hacknet-node-7\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":8,\"level\":200,\"moneyGainRatePerSecond\":19493.02351859522,\"onlineTimeSeconds\":64.40000000000038,\"ram\":64,\"totalMoneyGenerated\":1056673.1301858274,\"name\":\"hacknet-node-8\"}}],\"hashManager\":{\"ctor\":\"HashManager\",\"data\":{\"capacity\":0,\"hashes\":0,\"upgrades\":{\"Sell for Money\":0,\"Sell for Corporation Funds\":0,\"Reduce Minimum Security\":0,\"Increase Maximum Money\":0,\"Improve Studying\":0,\"Improve Gym Training\":0,\"Exchange for Corporation Research\":0,\"Exchange for Bladeburner Rank\":0,\"Exchange for Bladeburner SP\":0,\"Generate Coding Contract\":0}}},\"factions\":[\"CyberSec\",\"Netburners\",\"NiteSec\",\"The Black Hand\"],\"factionInvitations\":[\"Sector-12\"],\"queuedAugmentations\":[],\"augmentations\":[{\"level\":31,\"name\":\"NeuroFlux Governor\"},{\"level\":1,\"name\":\"Neurotrainer I\"},{\"level\":1,\"name\":\"Hacknet Node NIC Architecture Neural-Upload\"},{\"level\":1,\"name\":\"Synaptic Enhancement Implant\"},{\"level\":1,\"name\":\"BitWire\"},{\"level\":1,\"name\":\"Cranial Signal Processors - Gen I\"},{\"level\":1,\"name\":\"CashRoot Starter Kit\"},{\"level\":1,\"name\":\"Wired Reflexes\"},{\"level\":1,\"name\":\"Social Negotiation Assistant (S.N.A)\"},{\"level\":1,\"name\":\"ADR-V1 Pheromone Gene\"},{\"level\":1,\"name\":\"Nuoptimal Nootropic Injector Implant\"},{\"level\":1,\"name\":\"Speech Enhancement\"},{\"level\":1,\"name\":\"Artificial Synaptic Potentiation\"},{\"level\":1,\"name\":\"Cranial Signal Processors - Gen II\"},{\"level\":1,\"name\":\"Hacknet Node Core Direct-Neural Interface\"},{\"level\":1,\"name\":\"Hacknet Node Kernel Direct-Neural Interface\"},{\"level\":1,\"name\":\"Hacknet Node CPU Architecture Neural-Upload\"},{\"level\":1,\"name\":\"Hacknet Node Cache Architecture Neural-Upload\"},{\"level\":1,\"name\":\"Neuroreceptor Management Implant\"},{\"level\":1,\"name\":\"Speech Processor Implant\"},{\"level\":1,\"name\":\"Nanofiber Weave\"}],\"sourceFiles\":[],\"numPeopleKilled\":0,\"karma\":0,\"crime_money_mult\":1.3613274044862353,\"crime_success_mult\":1.3613274044862353,\"isWorking\":true,\"focus\":false,\"workType\":\"Working for Faction\",\"workCostMult\":3,\"workExpMult\":2,\"currentWorkFactionName\":\"NiteSec\",\"currentWorkFactionDescription\":\"carrying out hacking contracts\",\"workHackExpGainRate\":0.2358499728272403,\"workStrExpGainRate\":0,\"workDefExpGainRate\":0,\"workDexExpGainRate\":0,\"workAgiExpGainRate\":0,\"workChaExpGainRate\":0,\"workRepGainRate\":0.8945055054983742,\"workMoneyGainRate\":0,\"workMoneyLossRate\":0,\"workHackExpGained\":82.31164051670657,\"workStrExpGained\":0,\"workDefExpGained\":0,\"workDexExpGained\":0,\"workAgiExpGained\":0,\"workChaExpGained\":0,\"workRepGained\":312.18242141893495,\"workMoneyGained\":0,\"createProgramName\":\"\",\"createProgramReqLvl\":100,\"className\":\"\",\"crimeType\":\"\",\"timeWorked\":69800,\"timeWorkedCreateProgram\":0,\"timeNeededToCompleteWork\":72000000,\"work_money_mult\":1.497460144934859,\"hacknet_node_money_mult\":3.433395338558457,\"hacknet_node_purchase_cost_mult\":0.560212077785614,\"hacknet_node_ram_cost_mult\":0.7323033696543974,\"hacknet_node_core_cost_mult\":0.7323033696543974,\"hacknet_node_level_cost_mult\":0.6224578642062377,\"hasWseAccount\":true,\"hasTixApiAccess\":true,\"has4SData\":false,\"has4SDataTixApi\":false,\"gang\":null,\"corporation\":null,\"bladeburner\":null,\"bladeburner_max_stamina_mult\":1,\"bladeburner_stamina_gain_mult\":1,\"bladeburner_analysis_mult\":1,\"bladeburner_success_chance_mult\":1,\"sleeves\":[],\"resleeves\":[],\"sleevesFromCovenant\":0,\"bitNodeN\":1,\"lastUpdate\":1642688975753,\"totalPlaytime\":350050600,\"playtimeSinceLastAug\":3650600,\"playtimeSinceLastBitnode\":350050600,\"moneySourceA\":{\"ctor\":\"MoneySourceTracker\",\"data\":{\"bladeburner\":0,\"casino\":0,\"class\":-13920,\"codingcontract\":0,\"corporation\":0,\"crime\":0,\"gang\":0,\"hacking\":5867578225,\"hacknet\":239009830.87882492,\"hacknet_expenses\":-314178398.4491099,\"hospitalization\":0,\"infiltration\":0,\"sleeves\":0,\"stock\":0,\"total\":631186687.7006242,\"work\":690950.2732830684,\"servers\":-4875200000,\"other\":-286700000,\"augmentations\":0}},\"moneySourceB\":{\"ctor\":\"MoneySourceTracker\",\"data\":{\"bladeburner\":0,\"casino\":0,\"class\":-9772800,\"codingcontract\":1537500000,\"corporation\":0,\"crime\":0,\"gang\":0,\"hacking\":116965820763.24509,\"hacknet\":14107340303.88947,\"hacknet_expenses\":-9006383890.907587,\"hospitalization\":0,\"infiltration\":0,\"sleeves\":0,\"stock\":-5273618049.684852,\"total\":4583790917.242319,\"work\":16057698.72336325,\"servers\":-75884920676.05196,\"other\":-1206200000,\"augmentations\":-36662032432.44262}},\"scriptProdSinceLastAug\":5867578225,\"exploits\":[],\"achievements\":[{\"ID\":\"FIRST_HACKNET_NODE\",\"unlockedOn\":1642339414658},{\"ID\":\"NS2\",\"unlockedOn\":1642343740615},{\"ID\":\"WORKOUT\",\"unlockedOn\":1642344940610},{\"ID\":\"HACKNET_NODE_10M\",\"unlockedOn\":1642420708995},{\"ID\":\"BRUTESSH.EXE\",\"unlockedOn\":1642422808996},{\"ID\":\"CYBERSEC\",\"unlockedOn\":1642423769004},{\"ID\":\"TOR\",\"unlockedOn\":1642424428998},{\"ID\":\"FTPCRACK.EXE\",\"unlockedOn\":1642426645652},{\"ID\":\"RELAYSMTP.EXE\",\"unlockedOn\":1642428623734},{\"ID\":\"FROZE\",\"unlockedOn\":1642430134063},{\"ID\":\"TRAVEL\",\"unlockedOn\":1642430580714},{\"ID\":\"INSTALL_1\",\"unlockedOn\":1642431300713},{\"ID\":\"SCRIPT_32GB\",\"unlockedOn\":1642433585396},{\"ID\":\"DRAIN_SERVER\",\"unlockedOn\":1642557549229},{\"ID\":\"HTTPWORM.EXE\",\"unlockedOn\":1642585735077},{\"ID\":\"SQLINJECT.EXE\",\"unlockedOn\":1642601629939},{\"ID\":\"THE_BLACK_HAND\",\"unlockedOn\":1642605709947},{\"ID\":\"NITESEC\",\"unlockedOn\":1642642847233},{\"ID\":\"MAX_HACKNET_NODE\",\"unlockedOn\":1642667396271}],\"factionWorkType\":\"Faction Hacking Work\",\"committingCrimeThruSingFn\":false,\"singFnCrimeWorkerScript\":null}}","AllServersSave":"{\"home\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":2,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"home\",\"httpPortOpen\":false,\"ip\":\"67.3.0.0\",\"isConnectedTo\":true,\"maxRam\":8192,\"messages\":[\"hackers-starting-handbook.lit\",\"j0.msg\",\"j1.msg\",\"csec-test.msg\",\"j2.msg\",\"nitesec-test.msg\",\"j3.msg\"],\"organizationName\":\"Home PC\",\"programs\":[\"NUKE.exe\",\"BruteSSH.exe\",\"fl1ght.exe\",\"FTPCrack.exe\",\"relaySMTP.exe\",\"HTTPWorm.exe\",\"SQLInject.exe\"],\"ramUsed\":8186.55,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{},\"filename\":\"mainHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":4660892.15367626,\"onlineMoneyMade\":5867578225,\"onlineRunningTime\":3331.809999999161,\"pid\":39,\"ramUsage\":7.65,\"server\":\"home\",\"threads\":1,\"dependencies\":[{\"filename\":\"mainHack.js\",\"url\":\"blob:file:///29c16c0d-7c64-4d8b-a200-ad079e0fd685\",\"moduleSequenceNumber\":40963}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{},\"filename\":\"playerServers.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":3138.409999999337,\"pid\":55,\"ramUsage\":9.9,\"server\":\"home\",\"threads\":1,\"dependencies\":[{\"filename\":\"playerServers.js\",\"url\":\"blob:file:///6b462fea-47f2-4d86-b8d6-1a67c0e47a8f\",\"moduleSequenceNumber\":41050}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omega-net\",972,16589.730537389638,\"d492e806-c397-4172-9280-1aca21feb516\"],\"dataMap\":{},\"filename\":\"grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":122.81000000000121,\"pid\":946,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":972,\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///80166b39-171c-489e-943d-41105d6b5336\",\"moduleSequenceNumber\":41048}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omega-net\",3696,0,\"2569784c-2401-4e68-a6c2-554a38c4d7ee\"],\"dataMap\":{},\"filename\":\"weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":122.81000000000121,\"pid\":947,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":3696,\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:file:///61b83b51-890f-441e-9924-f5c1af023233\",\"moduleSequenceNumber\":41049}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/export async function main(ns) {\\n    if (ns.getHostname() !== \\\"home\\\") {\\n      throw new Exception(\\\"Run the script from home\\\");\\n    }\\n  \\n    await ns.wget(\\n      `https://raw.githubusercontent.com/zyh66615/bitburner-something/main/scripts/initHacking.js?ts=${new Date().getTime()}`,\\n      \\\"initHacking.js\\\"\\n    );\\n    ns.spawn(\\\"initHacking.js\\\", 1);\\n  }\",\"filename\":\"start.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"start.js\",\"url\":\"blob:file:///980fc66c-dc69-44b8-8f75-ced1b4c8d3fd\",\"moduleSequenceNumber\":35702}],\"dependents\":[],\"ramUsage\":3.65,\"server\":\"home\",\"_hash\":\"48eac7256f279284cc060fcb82118e1875322fb79a28d5c5f89ecb56c63e97d3\",\"moduleSequenceNumber\":40931,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"spawn\",\"cost\":2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"const baseUrl = 'https://raw.githubusercontent.com/zyh66615/bitburner-something/main/scripts/'\\r\\nconst filesToDownload = [\\r\\n  'common.js',\\r\\n  'mainHack.js',\\r\\n  'spider.js',\\r\\n  'grow.js',\\r\\n  'hack.js',\\r\\n  'weaken.js',\\r\\n  'playerServers.js',\\r\\n  'killAll.js',\\r\\n  'runHacking.js',\\r\\n  'find.js',\\r\\n  'contracter.js',\\r\\n  'seeAllStock.js',\\r\\n  'rmfile.js',\\r\\n]\\r\\nconst valuesToRemove = ['BB_SERVER_MAP']\\r\\n\\r\\nfunction localeHHMMSS(ms = 0) {\\r\\n  if (!ms) {\\r\\n    ms = new Date().getTime()\\r\\n  }\\r\\n\\r\\n  return new Date(ms).toLocaleTimeString()\\r\\n}\\r\\n\\r\\n/** @param {NS} ns **/export async function main(ns) {\\r\\n  ns.tprint(`[${localeHHMMSS()}] Starting initHacking.js`)\\r\\n\\r\\n  let hostname = ns.getHostname()\\r\\n\\r\\n  if (hostname !== 'home') {\\r\\n    throw new Exception('Run the script from home')\\r\\n  }\\r\\n\\r\\n  for (let i = 0; i < filesToDownload.length; i++) {\\r\\n    const filename = filesToDownload[i]\\r\\n    const path = baseUrl + filename\\r\\n    await ns.scriptKill(filename, 'home')\\r\\n    await ns.rm(filename)\\r\\n    await ns.sleep(200)\\r\\n    ns.tprint(`[${localeHHMMSS()}] Trying to download ${path}`)\\r\\n    await ns.wget(path + '?ts=' + new Date().getTime(), filename)\\r\\n  }\\r\\n\\r\\n  valuesToRemove.map((value) => localStorage.removeItem(value))\\r\\n\\r\\n  ns.tprint(`[${localeHHMMSS()}] Spawning killAll.js`)\\r\\n  ns.spawn('killAll.js', 1, 'runHacking.js')\\r\\n}\\r\\n\",\"filename\":\"initHacking.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"initHacking.js\",\"url\":\"blob:file:///92a9e0ef-18e2-4f0a-8dfb-287b696fbc49\",\"moduleSequenceNumber\":35707}],\"dependents\":[],\"ramUsage\":5.65,\"server\":\"home\",\"_hash\":\"87d5c6d4813b8c4bff6fe68416a8e301688beacc755c7a28f361bac30c1dc18f\",\"moduleSequenceNumber\":40932,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scriptKill\",\"cost\":1},{\"type\":\"fn\",\"name\":\"rm\",\"cost\":1},{\"type\":\"fn\",\"name\":\"spawn\",\"cost\":2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export function settings() {\\r\\n    return {\\r\\n      minSecurityLevelOffset: 2,\\r\\n      maxMoneyMultiplayer: 0.9,\\r\\n      minSecurityWeight: 100,\\r\\n      mapRefreshInterval: 1 * 60 * 60 * 1000,\\r\\n      keys: {\\r\\n        serverMap: 'BB_SERVER_MAP',\\r\\n        hackTarget: 'BB_HACK_TARGET',\\r\\n        action: 'BB_ACTION',\\r\\n      },\\r\\n    }\\r\\n  }\\r\\n  \\r\\n  export function getItem(key) {\\r\\n    let item = localStorage.getItem(key)\\r\\n  \\r\\n    return item ? JSON.parse(item) : undefined\\r\\n  }\\r\\n  \\r\\n  export function setItem(key, value) {\\r\\n    localStorage.setItem(key, JSON.stringify(value))\\r\\n  }\\r\\n  \\r\\n/** @param {NS} ns **/export async function main(ns) {\\r\\n    return {\\r\\n      settings,\\r\\n      getItem,\\r\\n      setItem,\\r\\n    }\\r\\n  }\\r\\n  \",\"filename\":\"common.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"server\":\"home\",\"_hash\":\"62e95182508a38746dd0e7f9968f8f9a923e5d64df00cc6bf959ebcd1a23a23c\",\"moduleSequenceNumber\":40933,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"const settings = {\\r\\n    homeRamReserved: 12,\\r\\n    homeRamReservedBase: 12,\\r\\n    homeRamExtraRamReserved: 10,\\r\\n    homeRamBigMode: 64,\\r\\n    minSecurityLevelOffset: 1,\\r\\n    maxMoneyMultiplayer: 0.8,\\r\\n    minSecurityWeight: 100,\\r\\n    mapRefreshInterval: 2 * 60 * 60 * 1000,\\r\\n    maxWeakenTime: 10 * 60 * 1000,\\r\\n    keys: {\\r\\n      serverMap: 'BB_SERVER_MAP',\\r\\n    },\\r\\n    changes: {\\r\\n      hack: 0.002,\\r\\n      grow: 0.004,\\r\\n      weaken: 0.05,\\r\\n    },\\r\\n  }\\r\\n  \\r\\n  function getItem(key) {\\r\\n    let item = localStorage.getItem(key)\\r\\n  \\r\\n    return item ? JSON.parse(item) : undefined\\r\\n  }\\r\\n  \\r\\n  function setItem(key, value) {\\r\\n    localStorage.setItem(key, JSON.stringify(value))\\r\\n  }\\r\\n  \\r\\n  const hackPrograms = ['BruteSSH.exe', 'FTPCrack.exe', 'relaySMTP.exe', 'HTTPWorm.exe', 'SQLInject.exe']\\r\\n  const hackScripts = ['hack.js', 'grow.js', 'weaken.js']\\r\\n  \\r\\n  function getPlayerDetails(ns) {\\r\\n    let portHacks = 0\\r\\n  \\r\\n    hackPrograms.forEach((hackProgram) => {\\r\\n      if (ns.fileExists(hackProgram, 'home')) {\\r\\n        portHacks += 1\\r\\n      }\\r\\n    })\\r\\n  \\r\\n    return {\\r\\n      hackingLevel: ns.getHackingLevel(),\\r\\n      portHacks,\\r\\n    }\\r\\n  }\\r\\n  \\r\\n  function convertMSToHHMMSS(ms = 0) {\\r\\n    if (ms <= 0) {\\r\\n      return '00:00:00'\\r\\n    }\\r\\n  \\r\\n    if (!ms) {\\r\\n      ms = new Date().getTime()\\r\\n    }\\r\\n  \\r\\n    return new Date(ms).toISOString().substr(11, 8)\\r\\n  }\\r\\n  \\r\\n  function localeHHMMSS(ms = 0) {\\r\\n    if (!ms) {\\r\\n      ms = new Date().getTime()\\r\\n    }\\r\\n  \\r\\n    return new Date(ms).toLocaleTimeString()\\r\\n  }\\r\\n  \\r\\n  function numberWithCommas(x) {\\r\\n    return x.toString().replace(/\\\\B(?<!\\\\.\\\\d*)(?=(\\\\d{3})+(?!\\\\d))/g, ',')\\r\\n  }\\r\\n  \\r\\n  function createUUID() {\\r\\n    var dt = new Date().getTime()\\r\\n    var uuid = 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {\\r\\n      var r = (dt + Math.random() * 16) % 16 | 0\\r\\n      dt = Math.floor(dt / 16)\\r\\n      return (c == 'x' ? r : (r & 0x3) | 0x8).toString(16)\\r\\n    })\\r\\n    return uuid\\r\\n  }\\r\\n  \\r\\n  function weakenCyclesForGrow(growCycles) {\\r\\n    return Math.max(0, Math.ceil(growCycles * (settings.changes.grow / settings.changes.weaken)))\\r\\n  }\\r\\n  \\r\\n  function weakenCyclesForHack(hackCycles) {\\r\\n    return Math.max(0, Math.ceil(hackCycles * (settings.changes.hack / settings.changes.weaken)))\\r\\n  }\\r\\n  \\r\\n  async function getHackableServers(ns, servers) {\\r\\n    const playerDetails = getPlayerDetails(ns)\\r\\n  \\r\\n    const hackableServers = Object.keys(servers)\\r\\n      .filter((hostname) => ns.serverExists(hostname))\\r\\n      .filter((hostname) => servers[hostname].ports <= playerDetails.portHacks || ns.hasRootAccess(hostname))\\r\\n      .filter((hostname) => servers[hostname].ram >= 2)\\r\\n  \\r\\n    for (const hostname of hackableServers) {\\r\\n      if (hostname === 'home') continue;\\r\\n      if (!ns.hasRootAccess(hostname)) {\\r\\n        hackPrograms.forEach((hackProgram) => {\\r\\n          if (ns.fileExists(hackProgram, 'home')) {\\r\\n            ns[hackProgram.split('.').shift().toLocaleLowerCase()](hostname)\\r\\n          }\\r\\n        })\\r\\n        ns.nuke(hostname)\\r\\n      }\\r\\n  \\r\\n      await ns.scp(hackScripts, hostname)\\r\\n  \\r\\n    }\\r\\n  \\r\\n    hackableServers.sort((a, b) => servers[a].ram - servers[b].ram)\\r\\n    return hackableServers\\r\\n  }\\r\\n  \\r\\n  function findTargetServer(ns, serversList, servers, serverExtraData) {\\r\\n    const playerDetails = getPlayerDetails(ns)\\r\\n  \\r\\n    serversList = serversList\\r\\n      .filter((hostname) => servers[hostname].hackingLevel <= playerDetails.hackingLevel)\\r\\n      .filter((hostname) => servers[hostname].maxMoney)\\r\\n      .filter((hostname) => hostname !== 'home')\\r\\n      .filter((hostname) => ns.getWeakenTime(hostname) < settings.maxWeakenTime)\\r\\n  \\r\\n    let weightedServers = serversList.map((hostname) => {\\r\\n      const fullHackCycles = Math.ceil(100 / Math.max(0.00000001, ns.hackAnalyze(hostname)))\\r\\n  \\r\\n      serverExtraData[hostname] = {\\r\\n        fullHackCycles,\\r\\n      }\\r\\n  \\r\\n      const serverValue = servers[hostname].maxMoney * (settings.minSecurityWeight / (servers[hostname].minSecurityLevel + ns.getServerSecurityLevel(hostname)))\\r\\n  \\r\\n      return {\\r\\n        hostname,\\r\\n        serverValue,\\r\\n        minSecurityLevel: servers[hostname].minSecurityLevel,\\r\\n        securityLevel: ns.getServerSecurityLevel(hostname),\\r\\n        maxMoney: servers[hostname].maxMoney,\\r\\n      }\\r\\n    })\\r\\n  \\r\\n    weightedServers.sort((a, b) => b.serverValue - a.serverValue)\\r\\n    ns.print(JSON.stringify(weightedServers, null, 2))\\r\\n  \\r\\n    return weightedServers.map((server) => server.hostname)\\r\\n  }\\r\\n  \\r\\n  /** @param {NS} ns **/ export async function main(ns) {\\r\\n    ns.tprint(`[${localeHHMMSS()}] Starting mainHack.js`)\\r\\n  \\r\\n    let hostname = ns.getHostname()\\r\\n  \\r\\n    if (hostname !== 'home') {\\r\\n      throw new Exception('Run the script from home')\\r\\n    }\\r\\n  \\r\\n    while (true) {\\r\\n      const serverExtraData = {}\\r\\n      const serverMap = getItem(settings.keys.serverMap)\\r\\n      if (serverMap.servers.home.ram >= settings.homeRamBigMode) {\\r\\n        settings.homeRamReserved = settings.homeRamReservedBase + settings.homeRamExtraRamReserved\\r\\n      }\\r\\n  \\r\\n      if (!serverMap || serverMap.lastUpdate < new Date().getTime() - settings.mapRefreshInterval) {\\r\\n        ns.tprint(`[${localeHHMMSS()}] Spawning spider.js`)\\r\\n        ns.spawn('spider.js', 1, 'mainHack.js')\\r\\n        ns.exit()\\r\\n        return\\r\\n      }\\r\\n      serverMap.servers.home.ram = Math.max(0, serverMap.servers.home.ram - settings.homeRamReserved)\\r\\n  \\r\\n      const hackableServers = await getHackableServers(ns, serverMap.servers)\\r\\n  \\r\\n      const targetServers = findTargetServer(ns, hackableServers, serverMap.servers, serverExtraData)\\r\\n      const bestTarget = targetServers.shift()\\r\\n      const hackTime = ns.getHackTime(bestTarget)\\r\\n      const growTime = ns.getGrowTime(bestTarget)\\r\\n      const weakenTime = ns.getWeakenTime(bestTarget)\\r\\n  \\r\\n      const growDelay = Math.max(0, weakenTime - growTime - 15 * 1000 )\\r\\n      const hackDelay = Math.max(0, growTime + growDelay - hackTime - 15 * 1000)\\r\\n  \\r\\n      const securityLevel = ns.getServerSecurityLevel(bestTarget)\\r\\n      const money = ns.getServerMoneyAvailable(bestTarget)\\r\\n  \\r\\n      let action = 'weaken'\\r\\n      if (securityLevel > serverMap.servers[bestTarget].minSecurityLevel + settings.minSecurityLevelOffset) {\\r\\n        action = 'weaken'\\r\\n      } else if (money < serverMap.servers[bestTarget].maxMoney * settings.maxMoneyMultiplayer) {\\r\\n        action = 'grow'\\r\\n      } else {\\r\\n        action = 'hack'\\r\\n      }\\r\\n  \\r\\n      let hackCycles = 0\\r\\n      let growCycles = 0\\r\\n      let weakenCycles = 0\\r\\n  \\r\\n      for (let i = 0; i < hackableServers.length; i++) {\\r\\n        const server = serverMap.servers[hackableServers[i]]\\r\\n        hackCycles += Math.floor(server.ram / 1.7)\\r\\n        growCycles += Math.floor(server.ram / 1.75)\\r\\n      }\\r\\n      weakenCycles = growCycles\\r\\n  \\r\\n      ns.tprint(\\r\\n        `[${localeHHMMSS()}] Selected ${bestTarget} for a target. Planning to ${action} the server. Will wake up around ${localeHHMMSS(\\r\\n          new Date().getTime() + weakenTime + 300\\r\\n        )}`\\r\\n      )\\r\\n      ns.tprint(\\r\\n        `[${localeHHMMSS()}] Stock values: baseSecurity: ${serverMap.servers[bestTarget].baseSecurityLevel}; minSecurity: ${serverMap.servers[bestTarget].minSecurityLevel\\r\\n        }; maxMoney: $${numberWithCommas(parseInt(serverMap.servers[bestTarget].maxMoney, 10))}`\\r\\n      )\\r\\n      ns.tprint(`[${localeHHMMSS()}] Current values: security: ${Math.floor(securityLevel * 1000) / 1000}; money: $${numberWithCommas(parseInt(money, 10))}`)\\r\\n      ns.tprint(\\r\\n        `[${localeHHMMSS()}] Time to: hack: ${convertMSToHHMMSS(hackTime)}; grow: ${convertMSToHHMMSS(growTime)}; weaken: ${convertMSToHHMMSS(weakenTime)}`\\r\\n      )\\r\\n      ns.tprint(`[${localeHHMMSS()}] Delays: ${convertMSToHHMMSS(hackDelay)} for hacks, ${convertMSToHHMMSS(growDelay)} for grows`)\\r\\n  \\r\\n      if (action === 'weaken') {\\r\\n        if (settings.changes.weaken * weakenCycles > securityLevel - serverMap.servers[bestTarget].minSecurityLevel) {\\r\\n          weakenCycles = Math.ceil((securityLevel - serverMap.servers[bestTarget].minSecurityLevel) / settings.changes.weaken)\\r\\n          growCycles -= weakenCycles\\r\\n          growCycles = Math.max(0, growCycles)\\r\\n  \\r\\n          weakenCycles += weakenCyclesForGrow(growCycles)\\r\\n          growCycles -= weakenCyclesForGrow(growCycles)\\r\\n          growCycles = Math.max(0, growCycles)\\r\\n        } else {\\r\\n          growCycles = 0\\r\\n        }\\r\\n  \\r\\n        ns.tprint(\\r\\n          `[${localeHHMMSS()}] Cycles ratio: ${growCycles} grow cycles; ${weakenCycles} weaken cycles; expected security reduction: ${Math.floor(settings.changes.weaken * weakenCycles * 1000) / 1000\\r\\n          }`\\r\\n        )\\r\\n  \\r\\n        for (let i = 0; i < hackableServers.length; i++) {\\r\\n          const server = serverMap.servers[hackableServers[i]]\\r\\n          let cyclesFittable = Math.max(0, Math.floor(server.ram / 1.75))\\r\\n          const cyclesToRun = Math.max(0, Math.min(cyclesFittable, growCycles))\\r\\n  \\r\\n          if (growCycles) {\\r\\n            await ns.exec('grow.js', server.host, cyclesToRun, bestTarget, cyclesToRun, growDelay, createUUID())\\r\\n            growCycles -= cyclesToRun\\r\\n            cyclesFittable -= cyclesToRun\\r\\n          }\\r\\n  \\r\\n          if (cyclesFittable) {\\r\\n            await ns.exec('weaken.js', server.host, cyclesFittable, bestTarget, cyclesFittable, 0, createUUID())\\r\\n            weakenCycles -= cyclesFittable\\r\\n          }\\r\\n        }\\r\\n      } else if (action === 'grow') {\\r\\n        weakenCycles = weakenCyclesForGrow(growCycles)\\r\\n        growCycles -= weakenCycles\\r\\n  \\r\\n        ns.tprint(`[${localeHHMMSS()}] Cycles ratio: ${growCycles} grow cycles; ${weakenCycles} weaken cycles`)\\r\\n  \\r\\n        for (let i = 0; i < hackableServers.length; i++) {\\r\\n          const server = serverMap.servers[hackableServers[i]]\\r\\n          let cyclesFittable = Math.max(0, Math.floor(server.ram / 1.75))\\r\\n          const cyclesToRun = Math.max(0, Math.min(cyclesFittable, growCycles))\\r\\n  \\r\\n          if (growCycles) {\\r\\n            await ns.exec('grow.js', server.host, cyclesToRun, bestTarget, cyclesToRun, growDelay, createUUID())\\r\\n            growCycles -= cyclesToRun\\r\\n            cyclesFittable -= cyclesToRun\\r\\n          }\\r\\n  \\r\\n          if (cyclesFittable) {\\r\\n            await ns.exec('weaken.js', server.host, cyclesFittable, bestTarget, cyclesFittable, 0, createUUID())\\r\\n            weakenCycles -= cyclesFittable\\r\\n          }\\r\\n        }\\r\\n      } else {\\r\\n        if (hackCycles > serverExtraData[bestTarget].fullHackCycles) {\\r\\n          hackCycles = serverExtraData[bestTarget].fullHackCycles\\r\\n  \\r\\n          if (hackCycles * 100 < growCycles) {\\r\\n            hackCycles *= 10\\r\\n          }\\r\\n  \\r\\n          growCycles = Math.max(0, growCycles - Math.ceil((hackCycles * 1.7) / 1.75))\\r\\n  \\r\\n          weakenCycles = weakenCyclesForGrow(growCycles) + weakenCyclesForHack(hackCycles)\\r\\n          growCycles -= weakenCycles\\r\\n          hackCycles -= Math.ceil((weakenCyclesForHack(hackCycles) * 1.75) / 1.7)\\r\\n  \\r\\n          growCycles = Math.max(0, growCycles)\\r\\n        } else {\\r\\n          growCycles = 0\\r\\n          weakenCycles = weakenCyclesForHack(hackCycles)\\r\\n          hackCycles -= Math.ceil((weakenCycles * 1.75) / 1.7)\\r\\n        }\\r\\n  \\r\\n        ns.tprint(`[${localeHHMMSS()}] Cycles ratio: ${hackCycles} hack cycles; ${growCycles} grow cycles; ${weakenCycles} weaken cycles`)\\r\\n  \\r\\n        for (let i = 0; i < hackableServers.length; i++) {\\r\\n          const server = serverMap.servers[hackableServers[i]]\\r\\n          let cyclesFittable = Math.max(0, Math.floor(server.ram / 1.7))\\r\\n          const cyclesToRun = Math.max(0, Math.min(cyclesFittable, hackCycles))\\r\\n  \\r\\n          if (hackCycles) {\\r\\n            await ns.exec('hack.js', server.host, cyclesToRun, bestTarget, cyclesToRun, hackDelay, createUUID())\\r\\n            hackCycles -= cyclesToRun\\r\\n            cyclesFittable -= cyclesToRun\\r\\n          }\\r\\n  \\r\\n          const freeRam = server.ram - cyclesToRun * 1.7\\r\\n          cyclesFittable = Math.max(0, Math.floor(freeRam / 1.75))\\r\\n  \\r\\n          if (cyclesFittable && growCycles) {\\r\\n            const growCyclesToRun = Math.min(growCycles, cyclesFittable)\\r\\n  \\r\\n            await ns.exec('grow.js', server.host, growCyclesToRun, bestTarget, growCyclesToRun, growDelay, createUUID())\\r\\n            growCycles -= growCyclesToRun\\r\\n            cyclesFittable -= growCyclesToRun\\r\\n          }\\r\\n  \\r\\n          if (cyclesFittable) {\\r\\n            await ns.exec('weaken.js', server.host, cyclesFittable, bestTarget, cyclesFittable, 0, createUUID())\\r\\n            weakenCycles -= cyclesFittable\\r\\n          }\\r\\n        }\\r\\n      }\\r\\n  \\r\\n      await ns.sleep(weakenTime + 300)\\r\\n    }\\r\\n  }\",\"filename\":\"mainHack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"mainHack.js\",\"url\":\"blob:file:///29c16c0d-7c64-4d8b-a200-ad079e0fd685\",\"moduleSequenceNumber\":40963}],\"dependents\":[],\"ramUsage\":7.65,\"server\":\"home\",\"_hash\":\"e0d1d0abed4654d25934bb5202a8c57f7332e2448730d928d4256b606b4277c1\",\"moduleSequenceNumber\":40963,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"serverExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hackAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"spawn\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { settings, setItem } from 'common.js'\\r\\n\\r\\nconst hackPrograms = ['BruteSSH.exe', 'FTPCrack.exe', 'relaySMTP.exe', 'HTTPWorm.exe', 'SQLInject.exe']\\r\\n\\r\\nexport function getPlayerDetails(ns) {\\r\\n  let portHacks = 0\\r\\n\\r\\n  hackPrograms.forEach((hackProgram) => {\\r\\n    if (ns.fileExists(hackProgram, 'home')) {\\r\\n      portHacks += 1\\r\\n    }\\r\\n  })\\r\\n\\r\\n  return {\\r\\n    hackingLevel: ns.getHackingLevel(),\\r\\n    portHacks,\\r\\n  }\\r\\n}\\r\\n\\r\\nfunction allHacks(host) {\\r\\n  ns.brutessh(host)\\r\\n  ns.ftpcrack(host)\\r\\n  ns.relaysmtp(host)\\r\\n  ns.httpworm(host)\\r\\n  ns.sqlinject(host)\\r\\n}\\r\\n\\r\\nfunction localeHHMMSS(ms = 0) {\\r\\n  if (!ms) {\\r\\n    ms = new Date().getTime()\\r\\n  }\\r\\n\\r\\n  return new Date(ms).toLocaleTimeString()\\r\\n}\\r\\n\\r\\n/** @param {NS} ns **/export async function main(ns) {\\r\\n  ns.tprint(`[${localeHHMMSS()}] Starting spider.js`)\\r\\n\\r\\n  const scriptToRunAfter = ns.args[0]\\r\\n\\r\\n  let hostname = ns.getHostname()\\r\\n\\r\\n  if (hostname !== 'home') {\\r\\n    throw new Exception('Run the script from home')\\r\\n  }\\r\\n\\r\\n  const serverMap = { servers: {}, lastUpdate: new Date().getTime() }\\r\\n  const scanArray = ['home']\\r\\n\\r\\n  while (scanArray.length) {\\r\\n    const host = scanArray.shift()\\r\\n\\r\\n    serverMap.servers[host] = {\\r\\n      host,\\r\\n      ports: ns.getServerNumPortsRequired(host),\\r\\n      hackingLevel: ns.getServerRequiredHackingLevel(host),\\r\\n      maxMoney: ns.getServerMaxMoney(host),\\r\\n      growth: ns.getServerGrowth(host),\\r\\n      minSecurityLevel: ns.getServerMinSecurityLevel(host),\\r\\n      baseSecurityLevel: ns.getServerBaseSecurityLevel(host),\\r\\n      ram: ns.getServerRam(host)[0],\\r\\n      files: ns.ls(host),\\r\\n    }\\r\\n\\r\\n    const playerDetails = getPlayerDetails(ns)\\r\\n    if (!ns.hasRootAccess(host)) {\\r\\n      if (serverMap.servers[host].ports <= playerDetails.portHacks && serverMap.servers[host].hackingLevel <= playerDetails.hackingLevel) {\\r\\n        hackPrograms.forEach((hackProgram) => {\\r\\n          if (ns.fileExists(hackProgram, 'home')) {\\r\\n            ns[hackProgram.split('.').shift().toLocaleLowerCase()](host)\\r\\n          }\\r\\n        })\\r\\n        ns.nuke(host)\\r\\n      }\\r\\n    }\\r\\n\\r\\n    const connections = ns.scan(host) || ['home']\\r\\n    serverMap.servers[host].connections = connections\\r\\n\\r\\n    connections.filter((hostname) => !serverMap.servers[hostname]).forEach((hostname) => scanArray.push(hostname))\\r\\n  }\\r\\n\\r\\n  let hasAllParents = false\\r\\n\\r\\n  while (!hasAllParents) {\\r\\n    hasAllParents = true\\r\\n\\r\\n    Object.keys(serverMap.servers).forEach((hostname) => {\\r\\n      const server = serverMap.servers[hostname]\\r\\n\\r\\n      if (!server.parent) hasAllParents = false\\r\\n\\r\\n      if (hostname === 'home') {\\r\\n        server.parent = 'home'\\r\\n        server.children = server.children ? server.children : []\\r\\n      }\\r\\n\\r\\n      if (hostname.includes('pserv-')) {\\r\\n        server.parent = 'home'\\r\\n        server.children = []\\r\\n\\r\\n        if (serverMap.servers[server.parent].children) {\\r\\n          serverMap.servers[server.parent].children.push(hostname)\\r\\n        } else {\\r\\n          serverMap.servers[server.parent].children = [hostname]\\r\\n        }\\r\\n      }\\r\\n\\r\\n      if (!server.parent) {\\r\\n        if (server.connections.length === 1) {\\r\\n          server.parent = server.connections[0]\\r\\n          server.children = []\\r\\n\\r\\n          if (serverMap.servers[server.parent].children) {\\r\\n            serverMap.servers[server.parent].children.push(hostname)\\r\\n          } else {\\r\\n            serverMap.servers[server.parent].children = [hostname]\\r\\n          }\\r\\n        } else {\\r\\n          if (!server.children) {\\r\\n            server.children = []\\r\\n          }\\r\\n\\r\\n          if (server.children.length) {\\r\\n            const parent = server.connections.filter((hostname) => !server.children.includes(hostname))\\r\\n\\r\\n            if (parent.length === 1) {\\r\\n              server.parent = parent.shift()\\r\\n\\r\\n              if (serverMap.servers[server.parent].children) {\\r\\n                serverMap.servers[server.parent].children.push(hostname)\\r\\n              } else {\\r\\n                serverMap.servers[server.parent].children = [hostname]\\r\\n              }\\r\\n            }\\r\\n          }\\r\\n        }\\r\\n      }\\r\\n    })\\r\\n  }\\r\\n\\r\\n  setItem(settings().keys.serverMap, serverMap)\\r\\n\\r\\n  if (!scriptToRunAfter) {\\r\\n    ns.tprint(`[${localeHHMMSS()}] Spawning mainHack.js`)\\r\\n    ns.spawn('mainHack.js', 1)\\r\\n  } else {\\r\\n    ns.tprint(`[${localeHHMMSS()}] Spawning ${scriptToRunAfter}`)\\r\\n    ns.spawn(scriptToRunAfter, 1)\\r\\n  }\\r\\n}\\r\\n\",\"filename\":\"spider.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"common.js\",\"url\":\"blob:file:///aa74ba42-7266-4ceb-8bd5-875b558ba36d\",\"moduleSequenceNumber\":40933},{\"filename\":\"spider.js\",\"url\":\"blob:file:///e543c112-cb6a-4255-876a-5aa25d16b938\",\"moduleSequenceNumber\":40947}],\"dependents\":[],\"ramUsage\":5.25,\"server\":\"home\",\"_hash\":\"87399378fad41507ed4b47621895a0ef37a64b9795207e30904d89d62d7fba8c\",\"moduleSequenceNumber\":40947,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerGrowth\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerBaseSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"spawn\",\"cost\":2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/export async function main(ns) {\\r\\n    const target = ns.args[0]\\r\\n    const threads = ns.args[1]\\r\\n    const delay = ns.args[2]\\r\\n  \\r\\n    if (delay && delay > 0) {\\r\\n      await ns.sleep(delay)\\r\\n    }\\r\\n  \\r\\n    ns.print(`Starting operation: grow on ${target} in ${threads} threads`)\\r\\n    await ns.grow(target, { threads, stock: true })\\r\\n    ns.exit()\\r\\n  }\\r\\n  \",\"filename\":\"grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///80166b39-171c-489e-943d-41105d6b5336\",\"moduleSequenceNumber\":41048}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"home\",\"_hash\":\"c43d4c7c8798e16588b33c740af14ea55f3ecddd2586b8cc3336577ba8faa5f8\",\"moduleSequenceNumber\":41048,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/export async function main(ns) {\\r\\n    const target = ns.args[0]\\r\\n    const threads = ns.args[1]\\r\\n    const delay = ns.args[2]\\r\\n  \\r\\n    if (delay && delay > 0) {\\r\\n      await ns.sleep(delay)\\r\\n    }\\r\\n  \\r\\n    ns.print(`Starting operation: hack on ${target} in ${threads} threads`)\\r\\n    await ns.hack(target, { threads, stock: true })\\r\\n    ns.exit()\\r\\n  }\\r\\n  \",\"filename\":\"hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:file:///378f0e19-d812-47dc-9213-0472ce7d046a\",\"moduleSequenceNumber\":42497}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"home\",\"_hash\":\"30d9fdd2f5a8bacc809001f44651e87fc2a5770c889d459ab5aa86fb10c18201\",\"moduleSequenceNumber\":42497,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/export async function main(ns) {\\r\\n    const target = ns.args[0]\\r\\n    const threads = ns.args[1]\\r\\n    const delay = ns.args[2]\\r\\n  \\r\\n    if (delay && delay > 0) {\\r\\n      await ns.sleep(delay)\\r\\n    }\\r\\n  \\r\\n    ns.print(`Starting operation: weaken on ${target} in ${threads} threads`)\\r\\n    await ns.weaken(target, { threads, stock: true })\\r\\n    ns.exit()\\r\\n  }\\r\\n  \",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:file:///61b83b51-890f-441e-9924-f5c1af023233\",\"moduleSequenceNumber\":41049}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"home\",\"_hash\":\"7656e4aac5fc95a4a03444258a0cf4af92d88b1dd44a7486167d2200da1eb442\",\"moduleSequenceNumber\":41049,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"const settings = {\\r\\n    maxPlayerServers: 25,\\r\\n    gbRamCost: 55000,\\r\\n    maxGbRam: 1048576,\\r\\n    minGbRam: 64,\\r\\n    totalMoneyAllocation: 0.2,\\r\\n    actions: {\\r\\n      BUY: 'buy',\\r\\n      UPGRADE: 'upgrade',\\r\\n    },\\r\\n    keys: {\\r\\n      serverMap: 'BB_SERVER_MAP',\\r\\n    },\\r\\n  }\\r\\n  \\r\\n  function getItem(key) {\\r\\n    let item = localStorage.getItem(key)\\r\\n  \\r\\n    return item ? JSON.parse(item) : undefined\\r\\n  }\\r\\n  \\r\\n  function setItem(key, value) {\\r\\n    localStorage.setItem(key, JSON.stringify(value))\\r\\n  }\\r\\n  \\r\\n  function localeHHMMSS(ms = 0) {\\r\\n    if (!ms) {\\r\\n      ms = new Date().getTime()\\r\\n    }\\r\\n  \\r\\n    return new Date(ms).toLocaleTimeString()\\r\\n  }\\r\\n  \\r\\n  function createUUID() {\\r\\n    var dt = new Date().getTime()\\r\\n    var uuid = 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {\\r\\n      var r = (dt + Math.random() * 16) % 16 | 0\\r\\n      dt = Math.floor(dt / 16)\\r\\n      return (c == 'x' ? r : (r & 0x3) | 0x8).toString(16)\\r\\n    })\\r\\n    return uuid\\r\\n  }\\r\\n  \\r\\n  function updateServer(ns, serverMap, host) {\\r\\n    serverMap.servers[host] = {\\r\\n      host,\\r\\n      ports: ns.getServerNumPortsRequired(host),\\r\\n      hackingLevel: ns.getServerRequiredHackingLevel(host),\\r\\n      maxMoney: ns.getServerMaxMoney(host),\\r\\n      growth: ns.getServerGrowth(host),\\r\\n      minSecurityLevel: ns.getServerMinSecurityLevel(host),\\r\\n      baseSecurityLevel: ns.getServerBaseSecurityLevel(host),\\r\\n      ram: ns.getServerRam(host)[0],\\r\\n      connections: ['home'],\\r\\n      parent: 'home',\\r\\n      children: [],\\r\\n    }\\r\\n  \\r\\n    Object.keys(serverMap.servers).map((hostname) => {\\r\\n      if (!ns.serverExists(hostname)) {\\r\\n        delete serverMap.servers[hostname]\\r\\n      }\\r\\n    })\\r\\n  \\r\\n    setItem(settings.keys.serverMap, serverMap)\\r\\n  }\\r\\n  \\r\\n  function getPurchasedServers(ns) {\\r\\n    let purchasedServers = ns.getPurchasedServers()\\r\\n    if (purchasedServers.length) {\\r\\n      purchasedServers.sort((a, b) => {\\r\\n        const totalRamA = ns.getServerRam(a).shift()\\r\\n        const totalRamB = ns.getServerRam(b).shift()\\r\\n  \\r\\n        if (totalRamA === totalRamB) {\\r\\n          return ns.getServerRam(a).shift() - ns.getServerRam(b).shift()\\r\\n        } else {\\r\\n          return totalRamA - totalRamB\\r\\n        }\\r\\n      })\\r\\n    }\\r\\n  \\r\\n    return purchasedServers\\r\\n  }\\r\\n  \\r\\n /** @param {NS} ns **/export async function main(ns) {\\r\\n    ns.tprint(`[${localeHHMMSS()}] Starting playerServers.js`)\\r\\n  \\r\\n    settings.maxGbRam = ns.getPurchasedServerMaxRam()\\r\\n    settings.maxPlayerServers = ns.getPurchasedServerLimit()\\r\\n    let hostname = ns.getHostname()\\r\\n  \\r\\n    if (hostname !== 'home') {\\r\\n      throw new Exception('Run the script from home')\\r\\n    }\\r\\n  \\r\\n    while (true) {\\r\\n      let didChange = false\\r\\n  \\r\\n      const serverMap = getItem(settings.keys.serverMap)\\r\\n      let purchasedServers = getPurchasedServers(ns)\\r\\n  \\r\\n      let action = purchasedServers.length < settings.maxPlayerServers ? settings.actions.BUY : settings.actions.UPGRADE\\r\\n  \\r\\n      if (action == settings.actions.BUY) {\\r\\n        let smallestCurrentServer = purchasedServers.length ? ns.getServerRam(purchasedServers[0]).shift() : 0\\r\\n        let targetRam = Math.max(settings.minGbRam, smallestCurrentServer)\\r\\n  \\r\\n        if (targetRam === settings.minGbRam) {\\r\\n          while (ns.getServerMoneyAvailable('home') * settings.totalMoneyAllocation >= targetRam * settings.gbRamCost * settings.maxPlayerServers) {\\r\\n            targetRam *= 2\\r\\n          }\\r\\n  \\r\\n          targetRam /= 2\\r\\n        }\\r\\n  \\r\\n        targetRam = Math.max(settings.minGbRam, targetRam)\\r\\n        targetRam = Math.min(targetRam, settings.maxGbRam)\\r\\n  \\r\\n        if (ns.getServerMoneyAvailable('home') * settings.totalMoneyAllocation >= targetRam * settings.gbRamCost) {\\r\\n          let hostname = `pserv-${targetRam}-${createUUID()}`\\r\\n          hostname = ns.purchaseServer(hostname, targetRam)\\r\\n  \\r\\n          if (hostname) {\\r\\n            ns.tprint(`[${localeHHMMSS()}] Bought new server: ${hostname} (${targetRam} GB)`)\\r\\n  \\r\\n            updateServer(ns, serverMap, hostname)\\r\\n            didChange = true\\r\\n          }\\r\\n        }\\r\\n      } else {\\r\\n        let smallestCurrentServer = Math.max(ns.getServerRam(purchasedServers[0]).shift(), settings.minGbRam)\\r\\n        let biggestCurrentServer = ns.getServerRam(purchasedServers[purchasedServers.length - 1]).shift()\\r\\n        let targetRam = biggestCurrentServer\\r\\n  \\r\\n        if (smallestCurrentServer === settings.maxGbRam) {\\r\\n          ns.tprint(`[${localeHHMMSS()}] All servers maxxed. Exiting.`)\\r\\n          ns.exit()\\r\\n          return\\r\\n        }\\r\\n  \\r\\n        if (smallestCurrentServer === biggestCurrentServer) {\\r\\n          while (ns.getServerMoneyAvailable('home') * settings.totalMoneyAllocation >= targetRam * settings.gbRamCost) {\\r\\n            targetRam *= 4\\r\\n          }\\r\\n  \\r\\n          targetRam /= 4\\r\\n        }\\r\\n  \\r\\n        targetRam = Math.min(targetRam, settings.maxGbRam)\\r\\n  \\r\\n        purchasedServers = getPurchasedServers(ns)\\r\\n        if (targetRam > ns.getServerRam(purchasedServers[0]).shift()) {\\r\\n          didChange = true\\r\\n          while (didChange) {\\r\\n            didChange = false\\r\\n            purchasedServers = getPurchasedServers(ns)\\r\\n  \\r\\n            if (targetRam > ns.getServerRam(purchasedServers[0]).shift()) {\\r\\n              if (ns.getServerMoneyAvailable('home') * settings.totalMoneyAllocation >= targetRam * settings.gbRamCost) {\\r\\n                let hostname = `pserv-${targetRam}-${createUUID()}`\\r\\n  \\r\\n                await ns.killall(purchasedServers[0])\\r\\n                await ns.sleep(10)\\r\\n                const serverDeleted = await ns.deleteServer(purchasedServers[0])\\r\\n                if (serverDeleted) {\\r\\n                  hostname = await ns.purchaseServer(hostname, targetRam)\\r\\n  \\r\\n                  if (hostname) {\\r\\n                    ns.tprint(`[${localeHHMMSS()}] Upgraded: ${purchasedServers[0]} into server: ${hostname} (${targetRam} GB)`)\\r\\n  \\r\\n                    updateServer(ns, serverMap, hostname)\\r\\n                    didChange = true\\r\\n                  }\\r\\n                }\\r\\n              }\\r\\n            }\\r\\n          }\\r\\n        }\\r\\n      }\\r\\n  \\r\\n      if (!didChange) {\\r\\n        await ns.sleep(5123)\\r\\n      }\\r\\n    }\\r\\n  }\",\"filename\":\"playerServers.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"playerServers.js\",\"url\":\"blob:file:///f7df7e63-6bac-49a9-bca2-9133aa3dab66\",\"moduleSequenceNumber\":41923}],\"dependents\":[],\"ramUsage\":9.9,\"server\":\"home\",\"_hash\":\"42b622cb3cc6947f01f984244611ce5a262d3443e01473b85699785df035a950\",\"moduleSequenceNumber\":41923,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerGrowth\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerBaseSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"serverExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getPurchasedServers\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"getPurchasedServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServerLimit\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"purchaseServer\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"deleteServer\",\"cost\":2.25}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"const settings = {\\r\\n    mapRefreshInterval: 1 * 60 * 60 * 1000,\\r\\n    keys: {\\r\\n      serverMap: 'BB_SERVER_MAP',\\r\\n    },\\r\\n  }\\r\\n  const scriptsToKill = [\\r\\n    'mainHack.js',\\r\\n    'spider.js',\\r\\n    'grow.js',\\r\\n    'hack.js',\\r\\n    'weaken.js',\\r\\n    'playerServers.js',\\r\\n    'runHacking.js',\\r\\n    'initHacking.js',\\r\\n    'start.js',\\r\\n    'find.js',\\r\\n  ]\\r\\n  \\r\\n  function getItem(key) {\\r\\n    let item = localStorage.getItem(key)\\r\\n  \\r\\n    return item ? JSON.parse(item) : undefined\\r\\n  }\\r\\n  \\r\\n  function localeHHMMSS(ms = 0) {\\r\\n    if (!ms) {\\r\\n      ms = new Date().getTime()\\r\\n    }\\r\\n  \\r\\n    return new Date(ms).toLocaleTimeString()\\r\\n  }\\r\\n  \\r\\n/** @param {NS} ns **/export async function main(ns) {\\r\\n    ns.tprint(`[${localeHHMMSS()}] Starting killAll.js`)\\r\\n  \\r\\n    const scriptToRunAfter = ns.args[0]\\r\\n  \\r\\n    let hostname = ns.getHostname()\\r\\n  \\r\\n    if (hostname !== 'home') {\\r\\n      throw new Exception('Run the script from home')\\r\\n    }\\r\\n  \\r\\n    const serverMap = getItem(settings.keys.serverMap)\\r\\n  \\r\\n    if (!serverMap || serverMap.lastUpdate < new Date().getTime() - settings.mapRefreshInterval) {\\r\\n      ns.tprint(`[${localeHHMMSS()}] Spawning spider.js`)\\r\\n      ns.spawn('spider.js', 1, 'killAll.js')\\r\\n      ns.exit()\\r\\n      return\\r\\n    }\\r\\n  \\r\\n    for (let i = 0; i < scriptsToKill.length; i++) {\\r\\n      await ns.scriptKill(scriptsToKill[i], 'home')\\r\\n    }\\r\\n  \\r\\n    const killAbleServers = Object.keys(serverMap.servers)\\r\\n      .filter((hostname) => ns.serverExists(hostname))\\r\\n      .filter((hostname) => hostname !== 'home')\\r\\n  \\r\\n    for (let i = 0; i < killAbleServers.length; i++) {\\r\\n      await ns.killall(killAbleServers[i])\\r\\n    }\\r\\n  \\r\\n    ns.tprint(`[${localeHHMMSS()}] All processes killed`)\\r\\n  \\r\\n    if (scriptToRunAfter) {\\r\\n      ns.tprint(`[${localeHHMMSS()}] Spawning ${scriptToRunAfter}`)\\r\\n      ns.spawn(scriptToRunAfter, 1)\\r\\n    } else {\\r\\n      ns.tprint(`[${localeHHMMSS()}] You can run runHacking.js to start hack`)\\r\\n    }\\r\\n  }\\r\\n  \",\"filename\":\"killAll.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"killAll.js\",\"url\":\"blob:file:///3f013d76-2652-41de-933e-27baa616431d\",\"moduleSequenceNumber\":41511}],\"dependents\":[],\"ramUsage\":5.25,\"server\":\"home\",\"_hash\":\"7f22a2c7bf88dd9d5727caefe24457d4ee896d71d0ee21f42dbec2b9f447ff47\",\"moduleSequenceNumber\":41511,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"spawn\",\"cost\":2},{\"type\":\"fn\",\"name\":\"scriptKill\",\"cost\":1},{\"type\":\"fn\",\"name\":\"serverExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"function localeHHMMSS(ms = 0) {\\r\\n    if (!ms) {\\r\\n      ms = new Date().getTime()\\r\\n    }\\r\\n  \\r\\n    return new Date(ms).toLocaleTimeString()\\r\\n  }\\r\\n  \\r\\n  /** @param {NS} ns **/export async function main(ns) {\\r\\n    ns.tprint(`[${localeHHMMSS()}] Starting runHacking.js`)\\r\\n  \\r\\n    let hostname = ns.getHostname()\\r\\n  \\r\\n    if (hostname !== 'home') {\\r\\n      throw new Exception('Run the script from home')\\r\\n    }\\r\\n  \\r\\n    const homeRam = ns.getServerRam('home').shift()\\r\\n  \\r\\n    if (homeRam >= 64) {\\r\\n      ns.tprint(`[${localeHHMMSS()}] Spawning spider.js`)\\r\\n      await ns.run('spider.js', 1, 'mainHack.js')\\r\\n      await ns.sleep(3000)\\r\\n      ns.tprint(`[${localeHHMMSS()}] Spawning playerServers.js`)\\r\\n      ns.spawn('playerServers.js', 1)\\r\\n    } else {\\r\\n      ns.tprint(`[${localeHHMMSS()}] Spawning spider.js`)\\r\\n      ns.spawn('spider.js', 1, 'mainHack.js')\\r\\n    }\\r\\n  }\\r\\n  \",\"filename\":\"runHacking.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"runHacking.js\",\"url\":\"blob:file:///aa395cca-bf74-4c65-918d-bf4737386c26\",\"moduleSequenceNumber\":40946}],\"dependents\":[],\"ramUsage\":4.75,\"server\":\"home\",\"_hash\":\"6e42e3cf38665ed411c4ebce834ce33a1a2991f2ac086a3b5de49e365eb76b6d\",\"moduleSequenceNumber\":40946,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"run\",\"cost\":1},{\"type\":\"fn\",\"name\":\"spawn\",\"cost\":2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getPlayerDetails } from 'spider.js'\\r\\nconst settings = {\\r\\n  keys: {\\r\\n    serverMap: 'BB_SERVER_MAP',\\r\\n  },\\r\\n}\\r\\n\\r\\nfunction getItem(key) {\\r\\n  let item = localStorage.getItem(key)\\r\\n\\r\\n  return item ? JSON.parse(item) : undefined\\r\\n}\\r\\n\\r\\nfunction localeHHMMSS(ms = 0) {\\r\\n  if (!ms) {\\r\\n    ms = new Date().getTime()\\r\\n  }\\r\\n\\r\\n  return new Date(ms).toLocaleTimeString()\\r\\n}\\r\\n\\r\\nfunction printPathToServer(servers, serverToFind) {\\r\\n  if (serverToFind === 'home') return 'home'\\r\\n  if (!servers[serverToFind]) return `-- Unable to locate ${serverToFind} --`\\r\\n\\r\\n  const jumps = []\\r\\n\\r\\n  let isParentHome = servers.parent === 'home'\\r\\n  let currentServer = serverToFind\\r\\n\\r\\n  while (!isParentHome) {\\r\\n    jumps.push(servers[currentServer].parent)\\r\\n\\r\\n    if (servers[currentServer].parent !== 'home') {\\r\\n      currentServer = servers[currentServer].parent\\r\\n    } else {\\r\\n      isParentHome = true\\r\\n    }\\r\\n  }\\r\\n\\r\\n  jumps.unshift(serverToFind)\\r\\n\\r\\n  return jumps.reverse().join('; connect ')\\r\\n}\\r\\n\\r\\n/** @param {NS} ns **/ export async function main(ns) {\\r\\n  ns.tprint(`[${localeHHMMSS()}] Starting find.js`)\\r\\n\\r\\n  const serverToFind = ns.args[0]\\r\\n\\r\\n  let hostname = ns.getHostname()\\r\\n\\r\\n  if (hostname !== 'home') {\\r\\n    throw new Exception('Run the script from home')\\r\\n  }\\r\\n\\r\\n  const serverMap = getItem(settings.keys.serverMap)\\r\\n\\r\\n  if (serverToFind) {\\r\\n    if (Object.keys(serverMap.servers).includes(serverToFind)) {\\r\\n      ns.tprint(`[${localeHHMMSS()}] Path to ${serverToFind} found:`)\\r\\n      ns.tprint(printPathToServer(serverMap.servers, serverToFind))\\r\\n    } else {\\r\\n      ns.tprint(`[${localeHHMMSS()}] Unable to find the path to ${serverToFind}`)\\r\\n    }\\r\\n  } else {\\r\\n    ns.tprint(`[${localeHHMMSS()}] Common servers:`)\\r\\n\\r\\n    const playerDetials = getPlayerDetails(ns)\\r\\n    var currentLevels = playerDetials.hackingLevel\\r\\n    var currentPorts = playerDetials.portHacks\\r\\n\\r\\n    ns.tprint('now hackinglevels: ' + currentLevels + ' portHacks: ' + currentPorts)\\r\\n\\r\\n    var currentHost = 'CSEC'\\r\\n    var requiredLevels = ns.getServerRequiredHackingLevel(currentHost)\\r\\n    var requiredPorts = ns.getServerNumPortsRequired(currentHost)\\r\\n    var flag = currentLevels >= requiredLevels && currentPorts >= requiredPorts ? '√' : '×'\\r\\n    var rootAccess = ns.hasRootAccess(currentHost)\\r\\n\\r\\n    ns.tprint(`* CSEC (CyberSec faction)` + ' access: ' + rootAccess + ' hacking levels:' + requiredLevels + ' ports:' + requiredPorts + ' hackable:' + flag)\\r\\n    ns.tprint(printPathToServer(serverMap.servers, 'CSEC') + '; backdoor;')\\r\\n    ns.tprint('')\\r\\n\\r\\n    currentHost = 'avmnite-02h'\\r\\n    requiredLevels = ns.getServerRequiredHackingLevel(currentHost)\\r\\n    requiredPorts = ns.getServerNumPortsRequired(currentHost)\\r\\n    flag = currentLevels >= requiredLevels && currentPorts >= requiredPorts ? '√' : '×'\\r\\n    rootAccess = ns.hasRootAccess(currentHost)\\r\\n\\r\\n    ns.tprint(`* avmnite-02h (NiteSec faction)` + ' access: ' + rootAccess + ' hacking levels:' + requiredLevels + ' ports:' + requiredPorts + ' hackable:' + flag)\\r\\n    ns.tprint(printPathToServer(serverMap.servers, 'avmnite-02h') + '; backdoor;')\\r\\n    ns.tprint('')\\r\\n\\r\\n    currentHost = 'I.I.I.I'\\r\\n    requiredLevels = ns.getServerRequiredHackingLevel(currentHost)\\r\\n    requiredPorts = ns.getServerNumPortsRequired(currentHost)\\r\\n    flag = currentLevels >= requiredLevels && currentPorts >= requiredPorts ? '√' : '×'\\r\\n    rootAccess = ns.hasRootAccess(currentHost)\\r\\n\\r\\n    ns.tprint(`* I.I.I.I (The Black Hand faction)` + ' access: ' + rootAccess + ' hacking levels:' + requiredLevels + ' ports:' + requiredPorts + ' hackable:' + flag)\\r\\n    ns.tprint(printPathToServer(serverMap.servers, 'I.I.I.I') + '; backdoor;')\\r\\n    ns.tprint('')\\r\\n\\r\\n    currentHost = 'run4theh111z'\\r\\n    requiredLevels = ns.getServerRequiredHackingLevel(currentHost)\\r\\n    requiredPorts = ns.getServerNumPortsRequired(currentHost)\\r\\n    flag = currentLevels >= requiredLevels && currentPorts >= requiredPorts ? '√' : '×'\\r\\n    rootAccess = ns.hasRootAccess(currentHost)\\r\\n\\r\\n    ns.tprint(`* run4theh111z (Bitrunners faction)` + ' access: ' + rootAccess + ' hacking levels:' + requiredLevels + ' ports:' + requiredPorts + ' hackable:' + flag)\\r\\n    ns.tprint(printPathToServer(serverMap.servers, 'run4theh111z') + '; backdoor;')\\r\\n    ns.tprint('')\\r\\n    ns.tprint(`[${localeHHMMSS()}] Looking for servers with coding contracts:`)\\r\\n    Object.keys(serverMap.servers).forEach((hostname) => {\\r\\n      const files = ns.ls(hostname)\\r\\n      if (files && files.length) {\\r\\n        const contract = files.find((file) => file.includes('.cct'))\\r\\n\\r\\n        if (!!contract) {\\r\\n          ns.tprint('')\\r\\n          ns.tprint(`* ${hostname} has a coding contract(s)! Connect using:`)\\r\\n          ns.tprint(printPathToServer(serverMap.servers, hostname) + `; run ${contract};`)\\r\\n        }\\r\\n      }\\r\\n    })\\r\\n    ns.tprint('')\\r\\n    ns.tprint('Buy all hacks command:')\\r\\n    ns.tprint('home; connect darkweb; buy BruteSSH.exe; buy FTPCrack.exe; buy relaySMTP.exe; buy HTTPWorm.exe; buy SQLInject.exe; home;')\\r\\n    ns.tprint('')\\r\\n  }\\r\\n}\\r\\n\",\"filename\":\"find.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"common.js\",\"url\":\"blob:file:///aa74ba42-7266-4ceb-8bd5-875b558ba36d\",\"moduleSequenceNumber\":40933},{\"filename\":\"spider.js\",\"url\":\"blob:file:///e543c112-cb6a-4255-876a-5aa25d16b938\",\"moduleSequenceNumber\":40947},{\"filename\":\"find.js\",\"url\":\"blob:file:///42c46b02-0fbc-45db-8ee5-f3ce60690b36\",\"moduleSequenceNumber\":41357}],\"dependents\":[],\"ramUsage\":2.25,\"server\":\"home\",\"_hash\":\"0a5020d8929b934657f504ad28e2e306d253f43d98ee1df6bd2e0344e52cc03d\",\"moduleSequenceNumber\":41357,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"const settings = {\\r\\n  keys: {\\r\\n    serverMap: 'BB_SERVER_MAP',\\r\\n  },\\r\\n}\\r\\n\\r\\nfunction getItem(key) {\\r\\n  let item = localStorage.getItem(key)\\r\\n\\r\\n  return item ? JSON.parse(item) : undefined\\r\\n}\\r\\n\\r\\nfunction localeHHMMSS(ms = 0) {\\r\\n  if (!ms) {\\r\\n    ms = new Date().getTime()\\r\\n  }\\r\\n\\r\\n  return new Date(ms).toLocaleTimeString()\\r\\n}\\r\\n\\r\\nfunction convert2DArrayToString(arr) {\\r\\n  var components = []\\r\\n  arr.forEach(function (e) {\\r\\n    var s = e.toString()\\r\\n    s = ['[', s, ']'].join('')\\r\\n    components.push(s)\\r\\n  })\\r\\n  return components.join(',').replace(/\\\\s/g, '')\\r\\n}\\r\\n\\r\\nconst codingContractTypesMetadata = [\\r\\n  {\\r\\n    name: 'Find Largest Prime Factor',\\r\\n    solver: function (data) {\\r\\n      var fac = 2\\r\\n      var n = data\\r\\n      while (n > (fac - 1) * (fac - 1)) {\\r\\n        while (n % fac === 0) {\\r\\n          n = Math.round(n / fac)\\r\\n        }\\r\\n        ++fac\\r\\n      }\\r\\n      return n === 1 ? fac - 1 : n\\r\\n    },\\r\\n  },\\r\\n  {\\r\\n    name: 'Subarray with Maximum Sum',\\r\\n    solver: function (data) {\\r\\n      var nums = data.slice()\\r\\n      for (var i = 1; i < nums.length; i++) {\\r\\n        nums[i] = Math.max(nums[i], nums[i] + nums[i - 1])\\r\\n      }\\r\\n      return Math.max.apply(Math, nums)\\r\\n    },\\r\\n  },\\r\\n  {\\r\\n    name: 'Total Ways to Sum',\\r\\n    solver: function (data) {\\r\\n      var ways = [1]\\r\\n      ways.length = data + 1\\r\\n      ways.fill(0, 1)\\r\\n      for (var i = 1; i < data; ++i) {\\r\\n        for (var j = i; j <= data; ++j) {\\r\\n          ways[j] += ways[j - i]\\r\\n        }\\r\\n      }\\r\\n      return ways[data]\\r\\n    },\\r\\n  },\\r\\n  {\\r\\n    name: 'Spiralize Matrix',\\r\\n    solver: function (data, ans) {\\r\\n      var spiral = []\\r\\n      var m = data.length\\r\\n      var n = data[0].length\\r\\n      var u = 0\\r\\n      var d = m - 1\\r\\n      var l = 0\\r\\n      var r = n - 1\\r\\n      var k = 0\\r\\n      while (true) {\\r\\n        // Up\\r\\n        for (var col = l; col <= r; col++) {\\r\\n          spiral[k] = data[u][col]\\r\\n          ++k\\r\\n        }\\r\\n        if (++u > d) {\\r\\n          break\\r\\n        }\\r\\n        // Right\\r\\n        for (var row = u; row <= d; row++) {\\r\\n          spiral[k] = data[row][r]\\r\\n          ++k\\r\\n        }\\r\\n        if (--r < l) {\\r\\n          break\\r\\n        }\\r\\n        // Down\\r\\n        for (var col = r; col >= l; col--) {\\r\\n          spiral[k] = data[d][col]\\r\\n          ++k\\r\\n        }\\r\\n        if (--d < u) {\\r\\n          break\\r\\n        }\\r\\n        // Left\\r\\n        for (var row = d; row >= u; row--) {\\r\\n          spiral[k] = data[row][l]\\r\\n          ++k\\r\\n        }\\r\\n        if (++l > r) {\\r\\n          break\\r\\n        }\\r\\n      }\\r\\n\\r\\n      return spiral\\r\\n    },\\r\\n  },\\r\\n  {\\r\\n    name: 'Array Jumping Game',\\r\\n    solver: function (data) {\\r\\n      var n = data.length\\r\\n      var i = 0\\r\\n      for (var reach = 0; i < n && i <= reach; ++i) {\\r\\n        reach = Math.max(i + data[i], reach)\\r\\n      }\\r\\n      var solution = i === n\\r\\n      return solution ? 1 : 0\\r\\n    },\\r\\n  },\\r\\n  {\\r\\n    name: 'Merge Overlapping Intervals',\\r\\n    solver: function (data) {\\r\\n      var intervals = data.slice()\\r\\n      intervals.sort(function (a, b) {\\r\\n        return a[0] - b[0]\\r\\n      })\\r\\n      var result = []\\r\\n      var start = intervals[0][0]\\r\\n      var end = intervals[0][1]\\r\\n      for (var _i = 0, intervals_1 = intervals; _i < intervals_1.length; _i++) {\\r\\n        var interval = intervals_1[_i]\\r\\n        if (interval[0] <= end) {\\r\\n          end = Math.max(end, interval[1])\\r\\n        } else {\\r\\n          result.push([start, end])\\r\\n          start = interval[0]\\r\\n          end = interval[1]\\r\\n        }\\r\\n      }\\r\\n      result.push([start, end])\\r\\n      var sanitizedResult = convert2DArrayToString(result)\\r\\n      return sanitizedResult\\r\\n    },\\r\\n  },\\r\\n  {\\r\\n    name: 'Generate IP Addresses',\\r\\n    solver: function (data, ans) {\\r\\n      var ret = []\\r\\n      for (var a = 1; a <= 3; ++a) {\\r\\n        for (var b = 1; b <= 3; ++b) {\\r\\n          for (var c = 1; c <= 3; ++c) {\\r\\n            for (var d = 1; d <= 3; ++d) {\\r\\n              if (a + b + c + d === data.length) {\\r\\n                var A = parseInt(data.substring(0, a), 10)\\r\\n                var B = parseInt(data.substring(a, a + b), 10)\\r\\n                var C = parseInt(data.substring(a + b, a + b + c), 10)\\r\\n                var D = parseInt(data.substring(a + b + c, a + b + c + d), 10)\\r\\n                if (A <= 255 && B <= 255 && C <= 255 && D <= 255) {\\r\\n                  var ip = [A.toString(), '.', B.toString(), '.', C.toString(), '.', D.toString()].join('')\\r\\n                  if (ip.length === data.length + 3) {\\r\\n                    ret.push(ip)\\r\\n                  }\\r\\n                }\\r\\n              }\\r\\n            }\\r\\n          }\\r\\n        }\\r\\n      }\\r\\n      return ret\\r\\n    },\\r\\n  },\\r\\n  {\\r\\n    name: 'Algorithmic Stock Trader I',\\r\\n    solver: function (data) {\\r\\n      var maxCur = 0\\r\\n      var maxSoFar = 0\\r\\n      for (var i = 1; i < data.length; ++i) {\\r\\n        maxCur = Math.max(0, (maxCur += data[i] - data[i - 1]))\\r\\n        maxSoFar = Math.max(maxCur, maxSoFar)\\r\\n      }\\r\\n      return maxSoFar.toString()\\r\\n    },\\r\\n  },\\r\\n  {\\r\\n    name: 'Algorithmic Stock Trader II',\\r\\n    solver: function (data) {\\r\\n      var profit = 0\\r\\n      for (var p = 1; p < data.length; ++p) {\\r\\n        profit += Math.max(data[p] - data[p - 1], 0)\\r\\n      }\\r\\n      return profit.toString()\\r\\n    },\\r\\n  },\\r\\n  {\\r\\n    name: 'Algorithmic Stock Trader III',\\r\\n    solver: function (data) {\\r\\n      var hold1 = Number.MIN_SAFE_INTEGER\\r\\n      var hold2 = Number.MIN_SAFE_INTEGER\\r\\n      var release1 = 0\\r\\n      var release2 = 0\\r\\n      for (var _i = 0, data_1 = data; _i < data_1.length; _i++) {\\r\\n        var price = data_1[_i]\\r\\n        release2 = Math.max(release2, hold2 + price)\\r\\n        hold2 = Math.max(hold2, release1 - price)\\r\\n        release1 = Math.max(release1, hold1 + price)\\r\\n        hold1 = Math.max(hold1, price * -1)\\r\\n      }\\r\\n      return release2.toString()\\r\\n    },\\r\\n  },\\r\\n  {\\r\\n    name: 'Algorithmic Stock Trader IV',\\r\\n    solver: function (data) {\\r\\n      var k = data[0]\\r\\n      var prices = data[1]\\r\\n      var len = prices.length\\r\\n      if (len < 2) {\\r\\n        return 0\\r\\n      }\\r\\n      if (k > len / 2) {\\r\\n        var res = 0\\r\\n        for (var i = 1; i < len; ++i) {\\r\\n          res += Math.max(prices[i] - prices[i - 1], 0)\\r\\n        }\\r\\n        return res\\r\\n      }\\r\\n      var hold = []\\r\\n      var rele = []\\r\\n      hold.length = k + 1\\r\\n      rele.length = k + 1\\r\\n      for (var i = 0; i <= k; ++i) {\\r\\n        hold[i] = Number.MIN_SAFE_INTEGER\\r\\n        rele[i] = 0\\r\\n      }\\r\\n      var cur\\r\\n      for (var i = 0; i < len; ++i) {\\r\\n        cur = prices[i]\\r\\n        for (var j = k; j > 0; --j) {\\r\\n          rele[j] = Math.max(rele[j], hold[j] + cur)\\r\\n          hold[j] = Math.max(hold[j], rele[j - 1] - cur)\\r\\n        }\\r\\n      }\\r\\n      return rele[k]\\r\\n    },\\r\\n  },\\r\\n  {\\r\\n    name: 'Minimum Path Sum in a Triangle',\\r\\n    solver: function (data) {\\r\\n      var n = data.length\\r\\n      var dp = data[n - 1].slice()\\r\\n      for (var i = n - 2; i > -1; --i) {\\r\\n        for (var j = 0; j < data[i].length; ++j) {\\r\\n          dp[j] = Math.min(dp[j], dp[j + 1]) + data[i][j]\\r\\n        }\\r\\n      }\\r\\n      return dp[0]\\r\\n    },\\r\\n  },\\r\\n  {\\r\\n    name: 'Unique Paths in a Grid I',\\r\\n    solver: function (data) {\\r\\n      var n = data[0] // Number of rows\\r\\n      var m = data[1] // Number of columns\\r\\n      var currentRow = []\\r\\n      currentRow.length = n\\r\\n      for (var i = 0; i < n; i++) {\\r\\n        currentRow[i] = 1\\r\\n      }\\r\\n      for (var row = 1; row < m; row++) {\\r\\n        for (var i = 1; i < n; i++) {\\r\\n          currentRow[i] += currentRow[i - 1]\\r\\n        }\\r\\n      }\\r\\n      return currentRow[n - 1]\\r\\n    },\\r\\n  },\\r\\n  {\\r\\n    name: 'Unique Paths in a Grid II',\\r\\n    solver: function (data) {\\r\\n      var obstacleGrid = []\\r\\n      obstacleGrid.length = data.length\\r\\n      for (var i = 0; i < obstacleGrid.length; ++i) {\\r\\n        obstacleGrid[i] = data[i].slice()\\r\\n      }\\r\\n      for (var i = 0; i < obstacleGrid.length; i++) {\\r\\n        for (var j = 0; j < obstacleGrid[0].length; j++) {\\r\\n          if (obstacleGrid[i][j] == 1) {\\r\\n            obstacleGrid[i][j] = 0\\r\\n          } else if (i == 0 && j == 0) {\\r\\n            obstacleGrid[0][0] = 1\\r\\n          } else {\\r\\n            obstacleGrid[i][j] = (i > 0 ? obstacleGrid[i - 1][j] : 0) + (j > 0 ? obstacleGrid[i][j - 1] : 0)\\r\\n          }\\r\\n        }\\r\\n      }\\r\\n      return obstacleGrid[obstacleGrid.length - 1][obstacleGrid[0].length - 1]\\r\\n    },\\r\\n  },\\r\\n  {\\r\\n    name: 'Sanitize Parentheses in Expression',\\r\\n    solver: function (data) {\\r\\n      var left = 0\\r\\n      var right = 0\\r\\n      var res = []\\r\\n      for (var i = 0; i < data.length; ++i) {\\r\\n        if (data[i] === '(') {\\r\\n          ++left\\r\\n        } else if (data[i] === ')') {\\r\\n          left > 0 ? --left : ++right\\r\\n        }\\r\\n      }\\r\\n      function dfs(pair, index, left, right, s, solution, res) {\\r\\n        if (s.length === index) {\\r\\n          if (left === 0 && right === 0 && pair === 0) {\\r\\n            for (var i = 0; i < res.length; i++) {\\r\\n              if (res[i] === solution) {\\r\\n                return\\r\\n              }\\r\\n            }\\r\\n            res.push(solution)\\r\\n          }\\r\\n          return\\r\\n        }\\r\\n        if (s[index] === '(') {\\r\\n          if (left > 0) {\\r\\n            dfs(pair, index + 1, left - 1, right, s, solution, res)\\r\\n          }\\r\\n          dfs(pair + 1, index + 1, left, right, s, solution + s[index], res)\\r\\n        } else if (s[index] === ')') {\\r\\n          if (right > 0) dfs(pair, index + 1, left, right - 1, s, solution, res)\\r\\n          if (pair > 0) dfs(pair - 1, index + 1, left, right, s, solution + s[index], res)\\r\\n        } else {\\r\\n          dfs(pair, index + 1, left, right, s, solution + s[index], res)\\r\\n        }\\r\\n      }\\r\\n      dfs(0, 0, left, right, data, '', res)\\r\\n\\r\\n      return res\\r\\n    },\\r\\n  },\\r\\n  {\\r\\n    name: 'Find All Valid Math Expressions',\\r\\n    solver: function (data) {\\r\\n      var num = data[0]\\r\\n      var target = data[1]\\r\\n      function helper(res, path, num, target, pos, evaluated, multed) {\\r\\n        if (pos === num.length) {\\r\\n          if (target === evaluated) {\\r\\n            res.push(path)\\r\\n          }\\r\\n          return\\r\\n        }\\r\\n        for (var i = pos; i < num.length; ++i) {\\r\\n          if (i != pos && num[pos] == '0') {\\r\\n            break\\r\\n          }\\r\\n          var cur = parseInt(num.substring(pos, i + 1))\\r\\n          if (pos === 0) {\\r\\n            helper(res, path + cur, num, target, i + 1, cur, cur)\\r\\n          } else {\\r\\n            helper(res, path + '+' + cur, num, target, i + 1, evaluated + cur, cur)\\r\\n            helper(res, path + '-' + cur, num, target, i + 1, evaluated - cur, -cur)\\r\\n            helper(res, path + '*' + cur, num, target, i + 1, evaluated - multed + multed * cur, multed * cur)\\r\\n          }\\r\\n        }\\r\\n      }\\r\\n\\r\\n      if (num == null || num.length === 0) {\\r\\n        return []\\r\\n      }\\r\\n      var result = []\\r\\n      helper(result, '', num, target, 0, 0, 0)\\r\\n      return result\\r\\n    },\\r\\n  },\\r\\n]\\r\\n\\r\\nfunction findAnswer(contract) {\\r\\n  let answer\\r\\n\\r\\n  const codingContractSolution = codingContractTypesMetadata.find((codingContractTypeMetadata) => codingContractTypeMetadata.name === contract.type)\\r\\n\\r\\n  if (codingContractSolution) {\\r\\n    answer = codingContractSolution.solver(contract.data)\\r\\n  } else {\\r\\n    console.error('Unable to find answer for', contract)\\r\\n  }\\r\\n\\r\\n  return answer\\r\\n}\\r\\n\\r\\nexport async function main(ns) {\\r\\n  ns.tprint(`[${localeHHMMSS()}] Starting contracter.js`)\\r\\n\\r\\n  let hostname = ns.getHostname()\\r\\n\\r\\n  if (hostname !== 'home') {\\r\\n    throw new Exception('Run the script from home')\\r\\n  }\\r\\n\\r\\n  const serverMap = getItem(settings.keys.serverMap)\\r\\n  const contractsDb = []\\r\\n\\r\\n  Object.keys(serverMap.servers).forEach((hostname) => {\\r\\n    const files = ns.ls(hostname)\\r\\n    if (files && files.length) {\\r\\n      const contracts = files.filter((file) => file.includes('.cct'))\\r\\n\\r\\n      if (contracts.length) {\\r\\n        contracts.forEach((contract) => {\\r\\n          const contractData = {\\r\\n            contract,\\r\\n            hostname,\\r\\n            type: ns.codingcontract.getContractType(contract, hostname),\\r\\n            data: ns.codingcontract.getData(contract, hostname),\\r\\n          }\\r\\n\\r\\n          contractsDb.push(contractData)\\r\\n        })\\r\\n      }\\r\\n    }\\r\\n  })\\r\\n\\r\\n  if (contractsDb.length) {\\r\\n    for (let i = 0; i < contractsDb.length; i++) {\\r\\n      const contract = contractsDb[i]\\r\\n      const answer = findAnswer(contract)\\r\\n\\r\\n      if (answer != null) {\\r\\n        const solvingResult = ns.codingcontract.attempt(answer, contract.contract, contract.hostname, { returnReward: true })\\r\\n\\r\\n        if (solvingResult) {\\r\\n          ns.tprint(`[${localeHHMMSS()}] Solved ${contract.contract} on ${contract.hostname}. ${solvingResult}`)\\r\\n        } else {\\r\\n          ns.tprint(`[${localeHHMMSS()}] Wrong answer for ${contract.contract} on ${contract.hostname}`)\\r\\n        }\\r\\n      } else {\\r\\n        ns.tprint(`[${localeHHMMSS()}] Unable to find the answer for: ${JSON.stringify(contract)}`)\\r\\n      }\\r\\n\\r\\n      await ns.sleep(10)\\r\\n    }\\r\\n  }\\r\\n  ns.tprint(`[${localeHHMMSS()}] contracter.js finished`)\\r\\n}\",\"filename\":\"contracter.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"contracter.js\",\"url\":\"blob:file:///d5f59188-0cbf-4319-a7da-9ab3c947eb5e\",\"moduleSequenceNumber\":41512}],\"dependents\":[],\"ramUsage\":21.85,\"server\":\"home\",\"_hash\":\"e545dfc6852ea80599e19dd568ae4074bfcc42d9c78a9129c3bc3f439347de80\",\"moduleSequenceNumber\":41512,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"codingcontract.getContractType\",\"cost\":5},{\"type\":\"fn\",\"name\":\"codingcontract.getData\",\"cost\":5},{\"type\":\"fn\",\"name\":\"codingcontract.attempt\",\"cost\":10}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"const commission = 100000\\r\\nlet stockSymbols\\r\\n\\r\\nfunction localeHHMMSS(ms = 0) {\\r\\n  if (!ms) {\\r\\n    ms = new Date().getTime()\\r\\n  }\\r\\n\\r\\n  return new Date(ms).toLocaleTimeString()\\r\\n}\\r\\n\\r\\nfunction sellShorts(ns, stockSymbol) {\\r\\n  const stockInfo = getStockInfo(ns, stockSymbol)\\r\\n  const shortSellValue = ns.stock.sell(stockSymbol, stockInfo.sharesShort)\\r\\n\\r\\n  if (shortSellValue) {\\r\\n    ns.print(\\r\\n      `[${localeHHMMSS()}][${stockSymbol}] Sold ${stockInfo.sharesShort} shorts for ${ns.nFormat(shortSellValue, '$0.000a')}. Profit: ${ns.nFormat(\\r\\n        stockInfo.sharesLong * (stockInfo.avgPriceShort - shortSellValue) - 2 * commission,\\r\\n        '$0.000a'\\r\\n      )}`\\r\\n    )\\r\\n  }\\r\\n}\\r\\n/** @param {NS} ns **/\\r\\nfunction sellLongs(ns, stockSymbol) {\\r\\n  const stockInfo = getStockInfo(ns, stockSymbol)\\r\\n  const longSellValue = ns.stock.sell(stockSymbol, stockInfo.sharesLong)\\r\\n\\r\\n  if (longSellValue) {\\r\\n    ns.print(\\r\\n      `[${localeHHMMSS()}][${stockSymbol}] Sold ${stockInfo.sharesLong} longs for ${ns.nFormat(longSellValue, '$0.000a')}. Profit: ${ns.nFormat(\\r\\n        stockInfo.sharesLong * (longSellValue - stockInfo.avgPriceLong) - 2 * commission,\\r\\n        '$0.000a'\\r\\n      )}`\\r\\n    )\\r\\n  }\\r\\n}\\r\\n/** @param {NS} ns **/\\r\\nfunction getStockInfo(ns, stockSymbol) {\\r\\n  const [sharesLong, avgPriceLong, sharesShort, avgPriceShort] = ns.stock.getPosition(stockSymbol)\\r\\n\\r\\n  const stockAskPrice = ns.stock.getAskPrice(stockSymbol)\\r\\n  const stockBidPrice = ns.stock.getBidPrice(stockSymbol)\\r\\n\\r\\n  return {\\r\\n    stockSymbol,\\r\\n    sharesLong,\\r\\n    avgPriceLong,\\r\\n    stockAskPrice,\\r\\n    sharesShort,\\r\\n    avgPriceShort,\\r\\n    stockBidPrice,\\r\\n  }\\r\\n}\\r\\n\\r\\n/** @param {NS} ns **/export async function main(ns) {\\r\\n  ns.disableLog('ALL')\\r\\n\\r\\n  stockSymbols = ns.stock.getSymbols()\\r\\n  stockSymbols.forEach((stockSymbol) => {\\r\\n    sellLongs(ns, stockSymbol)\\r\\n    sellShorts(ns, stockSymbol)\\r\\n  })\\r\\n}\",\"filename\":\"seeAllStock.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":12.1,\"server\":\"home\",\"_hash\":\"2ef477adb6052d210ec5b4c29a2529d0e4055eeb734655563e0e203cbe41631e\",\"moduleSequenceNumber\":40944,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"stock.sell\",\"cost\":2.5},{\"type\":\"fn\",\"name\":\"stock.getPosition\",\"cost\":2},{\"type\":\"fn\",\"name\":\"stock.getAskPrice\",\"cost\":2},{\"type\":\"fn\",\"name\":\"stock.getBidPrice\",\"cost\":2},{\"type\":\"fn\",\"name\":\"stock.getSymbols\",\"cost\":2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"const settings = {\\r\\n    keys: {\\r\\n        serverMap: 'BB_SERVER_MAP',\\r\\n    },\\r\\n}\\r\\nfunction getItem(key) {\\r\\n    let item = localStorage.getItem(key)\\r\\n\\r\\n    return item ? JSON.parse(item) : undefined\\r\\n}\\r\\n\\r\\nconst excluedFiles = ['start.js', 'rmfile.js']\\r\\n/** @param {NS} ns **/\\r\\nexport async function main(ns) {\\r\\n    const servers = getItem(settings.keys.serverMap).servers;\\r\\n    ns.exec('killAll.js', 'home', 1)\\r\\n    Object.keys(servers).forEach((server) => {\\r\\n        const files = ns.ls(server)\\r\\n        for (const file of files){\\r\\n            if (file.endsWith('js') && !excluedFiles.includes(file)){\\r\\n                ns.rm(file, server)\\r\\n            }\\r\\n        }\\r\\n    })\\r\\n\\r\\n}\",\"filename\":\"rmfile.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4.1,\"server\":\"home\",\"_hash\":\"f452406f0f27d3e2991900eade8886f0c8d7f35cc098ee6da872e37d1c36402a\",\"moduleSequenceNumber\":40945,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"rm\",\"cost\":1}]}}],\"serversOnNetwork\":[\"n00dles\",\"foodnstuff\",\"sigma-cosmetics\",\"joesguns\",\"hong-fang-tea\",\"harakiri-sushi\",\"iron-gym\",\"darkweb\",\"pserv-1024-ed40466b-733c-4479-97d1-abeef13f8803\",\"pserv-1024-4366e5fd-d2b1-42d0-a38a-308ab84864ea\",\"pserv-1024-10ec7d70-dcf1-4f47-a6ea-941c3dc2057e\",\"pserv-1024-460cd4bd-4cae-47fd-8148-7ca7352dfc18\",\"pserv-1024-574455f3-22f4-4950-9425-1895cd99b02e\",\"pserv-1024-096a732b-d300-4732-8577-36b392a4d1b3\",\"pserv-1024-9f1ff2e7-150a-4b85-9ab9-6a9a928c8a23\",\"pserv-1024-0237a7e9-b600-4c6d-94b4-63617196a9c5\",\"pserv-1024-3cd119f2-f064-4ab5-ab47-07642ef6292b\",\"pserv-1024-269f0d47-d50c-4365-9e9b-81c1a9d26cbb\",\"pserv-4096-da1896c1-0bb1-4d84-85c2-422b3271d9fe\",\"pserv-4096-f4e59f1d-267b-4618-ae78-a0d62851ee5c\",\"pserv-4096-6c7894fc-0f09-405f-8ea4-c6ed376036b7\",\"pserv-4096-71c387c0-49c0-4cfb-9693-4f13f9bcf48d\",\"pserv-4096-60b00704-2d0f-4fd0-a83e-32bb052d12a3\",\"pserv-4096-ea699298-8f2d-4ecb-ab84-bb8645f59467\",\"pserv-4096-4041d657-ea33-47e3-aec1-3f51aebc88cc\",\"pserv-4096-3cf8eb5c-cf2f-4d28-8e9e-da3d8b3ddfbb\",\"pserv-4096-5eeeaf7a-f719-4766-a0d3-b850dde4b604\",\"pserv-4096-28c8b228-cb8f-4094-b5fa-91411026cd10\",\"pserv-4096-2a571507-1dcd-44ab-9cb0-6520abb63c7d\",\"pserv-4096-0ecaf692-4fd7-4c69-a1e8-b12c5c9e56e2\",\"pserv-4096-0107f8d5-c741-4a52-889f-cfb4fe679ad2\",\"pserv-4096-2b71c339-8ce0-43c3-ab2f-7c0ac2c977b4\",\"pserv-4096-87cb486d-447f-49cf-b4a8-ef39fe4ff643\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":1,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"ecorp\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"ecorp\",\"httpPortOpen\":false,\"ip\":\"94.8.3.4\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"ECorp\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"powerhouse-fitness\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":99,\"hackDifficulty\":99,\"minDifficulty\":33,\"moneyAvailable\":49986521274,\"moneyMax\":1249663031850,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1330,\"serverGrowth\":99}},\"megacorp\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"megacorp\",\"httpPortOpen\":false,\"ip\":\"7.4.2.7\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"MegaCorp\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"blade\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":99,\"hackDifficulty\":99,\"minDifficulty\":33,\"moneyAvailable\":48594614502,\"moneyMax\":1214865362550,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1144,\"serverGrowth\":99}},\"b-and-a\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"b-and-a\",\"httpPortOpen\":false,\"ip\":\"22.7.3.2\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Bachman & Associates\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"kuai-gong\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":76,\"hackDifficulty\":76,\"minDifficulty\":25,\"moneyAvailable\":26235959019,\"moneyMax\":655898975475,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":997,\"serverGrowth\":74}},\"blade\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"blade\",\"httpPortOpen\":false,\"ip\":\"26.6.4.9\",\"isConnectedTo\":false,\"maxRam\":256,\"messages\":[\"beyond-man.lit\"],\"organizationName\":\"Blade Industries\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"4sigma\",\"megacorp\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":88,\"hackDifficulty\":88,\"minDifficulty\":29,\"moneyAvailable\":11295481063,\"moneyMax\":282387026575,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":965,\"serverGrowth\":70}},\"nwo\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"nwo\",\"httpPortOpen\":false,\"ip\":\"2.2.0.7\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"the-hidden-world.lit\"],\"organizationName\":\"NWO\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\".\",\"fulcrumassets\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":99,\"hackDifficulty\":99,\"minDifficulty\":33,\"moneyAvailable\":32967167022,\"moneyMax\":824179175550,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1171,\"serverGrowth\":86}},\"clarkinc\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"clarkinc\",\"httpPortOpen\":false,\"ip\":\"70.8.1.2\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"beyond-man.lit\",\"cost-of-immortality.lit\"],\"organizationName\":\"Clarke Incorporated\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"omnitek\",\"The-Cave\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":58,\"hackDifficulty\":58,\"minDifficulty\":19,\"moneyAvailable\":21520187002,\"moneyMax\":538004675050,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1197,\"serverGrowth\":71}},\"omnitek\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"omnitek\",\"httpPortOpen\":false,\"ip\":\"48.6.0.1\",\"isConnectedTo\":false,\"maxRam\":256,\"messages\":[\"coded-intelligence.lit\",\"history-of-synthoids.lit\"],\"organizationName\":\"OmniTek Incorporated\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"fulcrumtech\",\"clarkinc\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":96,\"hackDifficulty\":96,\"minDifficulty\":32,\"moneyAvailable\":20208161819,\"moneyMax\":505204045475,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":999,\"serverGrowth\":97}},\"4sigma\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"4sigma\",\"httpPortOpen\":false,\"ip\":\"86.4.1.5\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Four Sigma\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"fulcrumtech\",\"blade\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":55,\"hackDifficulty\":55,\"minDifficulty\":18,\"moneyAvailable\":19371049393,\"moneyMax\":484276234825,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":902,\"serverGrowth\":82}},\"kuai-gong\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"kuai-gong\",\"httpPortOpen\":false,\"ip\":\"88.5.2.0\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"KuaiGong International\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"helios\",\"b-and-a\",\"powerhouse-fitness\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":98,\"hackDifficulty\":98,\"minDifficulty\":33,\"moneyAvailable\":26098535389,\"moneyMax\":652463384725,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1133,\"serverGrowth\":90}},\"fulcrumtech\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"fulcrumtech\",\"httpPortOpen\":false,\"ip\":\"32.4.1.9\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[\"simulated-reality.lit\"],\"organizationName\":\"Fulcrum Technologies\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"run4theh111z\",\"omnitek\",\"4sigma\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":95,\"hackDifficulty\":95,\"minDifficulty\":32,\"moneyAvailable\":1754437932,\"moneyMax\":43860948300,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1038,\"serverGrowth\":89}},\"fulcrumassets\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"fulcrumassets\",\"httpPortOpen\":false,\"ip\":\"37.7.5.5\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Fulcrum Technologies\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"nwo\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":99,\"hackDifficulty\":99,\"minDifficulty\":33,\"moneyAvailable\":1000000,\"moneyMax\":25000000,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1351,\"serverGrowth\":1}},\"stormtech\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"stormtech\",\"httpPortOpen\":false,\"ip\":\"67.5.4.0\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Storm Technologies\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"applied-energetics\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":87,\"hackDifficulty\":87,\"minDifficulty\":29,\"moneyAvailable\":1171989353,\"moneyMax\":29299733825,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":988,\"serverGrowth\":76}},\"defcomm\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"defcomm\",\"httpPortOpen\":false,\"ip\":\"56.4.2.1\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"DefComm\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"omnia\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":88,\"hackDifficulty\":88,\"minDifficulty\":29,\"moneyAvailable\":832352202,\"moneyMax\":20808805050,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":938,\"serverGrowth\":59}},\"infocomm\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"infocomm\",\"httpPortOpen\":false,\"ip\":\"59.3.9.4\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"InfoComm\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"univ-energy\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":78,\"hackDifficulty\":78,\"minDifficulty\":26,\"moneyAvailable\":619610633,\"moneyMax\":15490265825,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":917,\"serverGrowth\":51}},\"helios\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"helios\",\"httpPortOpen\":false,\"ip\":\"93.4.6.1\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"beyond-man.lit\"],\"organizationName\":\"Helios Labs\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"run4theh111z\",\"kuai-gong\",\".\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":91,\"hackDifficulty\":91,\"minDifficulty\":30,\"moneyAvailable\":707618435,\"moneyMax\":17690460875,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":871,\"serverGrowth\":73}},\"vitalife\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"vitalife\",\"httpPortOpen\":false,\"ip\":\"11.4.3.3\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"A-Green-Tomorrow.lit\"],\"organizationName\":\"VitaLife\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"titan-labs\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":82,\"hackDifficulty\":82,\"minDifficulty\":27,\"moneyAvailable\":775746278,\"moneyMax\":19393656950,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":830,\"serverGrowth\":75}},\"icarus\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"icarus\",\"httpPortOpen\":false,\"ip\":\"91.9.8.0\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Icarus Microsystems\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"omnia\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":88,\"hackDifficulty\":88,\"minDifficulty\":29,\"moneyAvailable\":946260276,\"moneyMax\":23656506900,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":898,\"serverGrowth\":91}},\"univ-energy\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"univ-energy\",\"httpPortOpen\":true,\"ip\":\"15.4.9.0\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[],\"organizationName\":\"Universal Energy\",\"programs\":[],\"ramUsed\":127.75,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omega-net\",73,16589.730537389638,\"47b692b0-2439-4d27-aae4-f23a40666623\"],\"dataMap\":{},\"filename\":\"grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":122.81000000000121,\"pid\":920,\"ramUsage\":1.75,\"server\":\"univ-energy\",\"threads\":73,\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///80166b39-171c-489e-943d-41105d6b5336\",\"moduleSequenceNumber\":45971}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/export async function main(ns) {\\r\\n    const target = ns.args[0]\\r\\n    const threads = ns.args[1]\\r\\n    const delay = ns.args[2]\\r\\n  \\r\\n    if (delay && delay > 0) {\\r\\n      await ns.sleep(delay)\\r\\n    }\\r\\n  \\r\\n    ns.print(`Starting operation: hack on ${target} in ${threads} threads`)\\r\\n    await ns.hack(target, { threads, stock: true })\\r\\n    ns.exit()\\r\\n  }\\r\\n  \",\"filename\":\"hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:file:///378f0e19-d812-47dc-9213-0472ce7d046a\",\"moduleSequenceNumber\":49153}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"univ-energy\",\"_hash\":\"30d9fdd2f5a8bacc809001f44651e87fc2a5770c889d459ab5aa86fb10c18201\",\"moduleSequenceNumber\":49153,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/export async function main(ns) {\\r\\n    const target = ns.args[0]\\r\\n    const threads = ns.args[1]\\r\\n    const delay = ns.args[2]\\r\\n  \\r\\n    if (delay && delay > 0) {\\r\\n      await ns.sleep(delay)\\r\\n    }\\r\\n  \\r\\n    ns.print(`Starting operation: grow on ${target} in ${threads} threads`)\\r\\n    await ns.grow(target, { threads, stock: true })\\r\\n    ns.exit()\\r\\n  }\\r\\n  \",\"filename\":\"grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///80166b39-171c-489e-943d-41105d6b5336\",\"moduleSequenceNumber\":45971}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"univ-energy\",\"_hash\":\"c43d4c7c8798e16588b33c740af14ea55f3ecddd2586b8cc3336577ba8faa5f8\",\"moduleSequenceNumber\":45971,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/export async function main(ns) {\\r\\n    const target = ns.args[0]\\r\\n    const threads = ns.args[1]\\r\\n    const delay = ns.args[2]\\r\\n  \\r\\n    if (delay && delay > 0) {\\r\\n      await ns.sleep(delay)\\r\\n    }\\r\\n  \\r\\n    ns.print(`Starting operation: weaken on ${target} in ${threads} threads`)\\r\\n    await ns.weaken(target, { threads, stock: true })\\r\\n    ns.exit()\\r\\n  }\\r\\n  \",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"univ-energy\",\"_hash\":\"7656e4aac5fc95a4a03444258a0cf4af92d88b1dd44a7486167d2200da1eb442\",\"moduleSequenceNumber\":45939,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"unitalife\",\"infocomm\",\"zb-def\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":86,\"hackDifficulty\":86,\"minDifficulty\":29,\"moneyAvailable\":1118739597,\"moneyMax\":27968489925,\"numOpenPortsRequired\":4,\"openPortCount\":4,\"requiredHackingSkill\":812,\"serverGrowth\":87}},\"titan-labs\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"titan-labs\",\"httpPortOpen\":false,\"ip\":\"39.8.1.2\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"coded-intelligence.lit\"],\"organizationName\":\"Titan Laboratories\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"nova-med\",\"vitalife\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":75,\"hackDifficulty\":75,\"minDifficulty\":25,\"moneyAvailable\":803272112,\"moneyMax\":20081802800,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":829,\"serverGrowth\":80}},\"microdyne\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"microdyne\",\"httpPortOpen\":false,\"ip\":\"37.2.9.6\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"synthetic-muscles.lit\"],\"organizationName\":\"Microdyne Technologies\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"zb-def\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":69,\"hackDifficulty\":69,\"minDifficulty\":23,\"moneyAvailable\":593137999,\"moneyMax\":14828449975,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":822,\"serverGrowth\":79}},\"taiyang-digital\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"taiyang-digital\",\"httpPortOpen\":false,\"ip\":\"58.4.1.3\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"A-Green-Tomorrow.lit\",\"brighter-than-the-sun.lit\"],\"organizationName\":\"Taiyang Digital\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"solaris\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":78,\"hackDifficulty\":78,\"minDifficulty\":26,\"moneyAvailable\":875356666,\"moneyMax\":21883916650,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":913,\"serverGrowth\":76}},\"galactic-cyber\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"galactic-cyber\",\"httpPortOpen\":false,\"ip\":\"34.8.4.7\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Galactic Cybersystems\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"lexo-corp\",\"omnia\",\"deltaone\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":62,\"hackDifficulty\":62,\"minDifficulty\":21,\"moneyAvailable\":786541811,\"moneyMax\":19663545275,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":849,\"serverGrowth\":83}},\"aerocorp\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"aerocorp\",\"httpPortOpen\":false,\"ip\":\"86.5.4.6\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"man-and-machine.lit\"],\"organizationName\":\"AeroCorp\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"rho-construction\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":90,\"hackDifficulty\":90,\"minDifficulty\":30,\"moneyAvailable\":1139729973,\"moneyMax\":28493249325,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":923,\"serverGrowth\":61}},\"omnia\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"omnia\",\"httpPortOpen\":false,\"ip\":\"40.6.9.0\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"history-of-synthoids.lit\"],\"organizationName\":\"Omnia Cybersystems\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"galactic-cyber\",\"defcomm\",\"icarus\",\"solaris\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":90,\"hackDifficulty\":90,\"minDifficulty\":30,\"moneyAvailable\":953276323,\"moneyMax\":23831908075,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":913,\"serverGrowth\":67}},\"zb-def\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"zb-def\",\"httpPortOpen\":false,\"ip\":\"81.6.8.1\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"synthetic-muscles.lit\"],\"organizationName\":\"ZB Defense Industries\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"univ-energy\",\"microdyne\",\"applied-energetics\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":62,\"hackDifficulty\":62,\"minDifficulty\":21,\"moneyAvailable\":967780749,\"moneyMax\":24194518725,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":780,\"serverGrowth\":72}},\"applied-energetics\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"applied-energetics\",\"httpPortOpen\":false,\"ip\":\"33.1.9.6\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Applied Energetics\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"zb-def\",\"stormtech\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":76,\"hackDifficulty\":76,\"minDifficulty\":25,\"moneyAvailable\":860747286,\"moneyMax\":21518682150,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":850,\"serverGrowth\":72}},\"solaris\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"solaris\",\"httpPortOpen\":false,\"ip\":\"41.3.3.4\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"A-Green-Tomorrow.lit\",\"the-failed-frontier.lit\"],\"organizationName\":\"Solaris Space Systems\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"omnia\",\"taiyang-digital\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":79,\"hackDifficulty\":79,\"minDifficulty\":26,\"moneyAvailable\":768566941,\"moneyMax\":19214173525,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":843,\"serverGrowth\":75}},\"deltaone\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"deltaone\",\"httpPortOpen\":false,\"ip\":\"59.5.5.4\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"DeltaOne\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"galactic-cyber\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":79,\"hackDifficulty\":79,\"minDifficulty\":26,\"moneyAvailable\":1417819993,\"moneyMax\":35445499825,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":814,\"serverGrowth\":52}},\"global-pharm\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"global-pharm\",\"httpPortOpen\":true,\"ip\":\"75.9.1.1\",\"isConnectedTo\":false,\"maxRam\":8,\"messages\":[\"A-Green-Tomorrow.lit\"],\"organizationName\":\"Global Pharmaceuticals\",\"programs\":[],\"ramUsed\":7,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omega-net\",4,16589.730537389638,\"216c7532-9cd9-4267-9582-e9bff730860b\"],\"dataMap\":{},\"filename\":\"grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":122.81000000000121,\"pid\":891,\"ramUsage\":1.75,\"server\":\"global-pharm\",\"threads\":4,\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///80166b39-171c-489e-943d-41105d6b5336\",\"moduleSequenceNumber\":45952}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/export async function main(ns) {\\r\\n    const target = ns.args[0]\\r\\n    const threads = ns.args[1]\\r\\n    const delay = ns.args[2]\\r\\n  \\r\\n    if (delay && delay > 0) {\\r\\n      await ns.sleep(delay)\\r\\n    }\\r\\n  \\r\\n    ns.print(`Starting operation: hack on ${target} in ${threads} threads`)\\r\\n    await ns.hack(target, { threads, stock: true })\\r\\n    ns.exit()\\r\\n  }\\r\\n  \",\"filename\":\"hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:file:///378f0e19-d812-47dc-9213-0472ce7d046a\",\"moduleSequenceNumber\":49134}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"global-pharm\",\"_hash\":\"30d9fdd2f5a8bacc809001f44651e87fc2a5770c889d459ab5aa86fb10c18201\",\"moduleSequenceNumber\":49134,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/export async function main(ns) {\\r\\n    const target = ns.args[0]\\r\\n    const threads = ns.args[1]\\r\\n    const delay = ns.args[2]\\r\\n  \\r\\n    if (delay && delay > 0) {\\r\\n      await ns.sleep(delay)\\r\\n    }\\r\\n  \\r\\n    ns.print(`Starting operation: grow on ${target} in ${threads} threads`)\\r\\n    await ns.grow(target, { threads, stock: true })\\r\\n    ns.exit()\\r\\n  }\\r\\n  \",\"filename\":\"grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///80166b39-171c-489e-943d-41105d6b5336\",\"moduleSequenceNumber\":45952}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"global-pharm\",\"_hash\":\"c43d4c7c8798e16588b33c740af14ea55f3ecddd2586b8cc3336577ba8faa5f8\",\"moduleSequenceNumber\":45952,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/export async function main(ns) {\\r\\n    const target = ns.args[0]\\r\\n    const threads = ns.args[1]\\r\\n    const delay = ns.args[2]\\r\\n  \\r\\n    if (delay && delay > 0) {\\r\\n      await ns.sleep(delay)\\r\\n    }\\r\\n  \\r\\n    ns.print(`Starting operation: weaken on ${target} in ${threads} threads`)\\r\\n    await ns.weaken(target, { threads, stock: true })\\r\\n    ns.exit()\\r\\n  }\\r\\n  \",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"global-pharm\",\"_hash\":\"7656e4aac5fc95a4a03444258a0cf4af92d88b1dd44a7486167d2200da1eb442\",\"moduleSequenceNumber\":45927,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"aevum-police\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":79,\"hackDifficulty\":79,\"minDifficulty\":26,\"moneyAvailable\":1579512125,\"moneyMax\":39487803125,\"numOpenPortsRequired\":4,\"openPortCount\":4,\"requiredHackingSkill\":751,\"serverGrowth\":90}},\"nova-med\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"nova-med\",\"httpPortOpen\":false,\"ip\":\"56.2.1.4\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Nova Medical\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"zeus-med\",\"titan-labs\",\"run4theh111z\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":66,\"hackDifficulty\":66,\"minDifficulty\":22,\"moneyAvailable\":1147875864,\"moneyMax\":28696896600,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":812,\"serverGrowth\":68}},\"zeus-med\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"zeus-med\",\"httpPortOpen\":false,\"ip\":\"95.1.6.3\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Zeus Medical\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"unitalife\",\"nova-med\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":79,\"hackDifficulty\":79,\"minDifficulty\":26,\"moneyAvailable\":1446017423,\"moneyMax\":36150435575,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":821,\"serverGrowth\":79}},\"unitalife\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"unitalife\",\"httpPortOpen\":true,\"ip\":\"89.6.6.2\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"UnitaLife Group\",\"programs\":[],\"ramUsed\":15.75,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omega-net\",9,16589.730537389638,\"80e85823-1efa-46f7-af50-7ca096a82248\"],\"dataMap\":{},\"filename\":\"grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":122.81000000000121,\"pid\":905,\"ramUsage\":1.75,\"server\":\"unitalife\",\"threads\":9,\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///80166b39-171c-489e-943d-41105d6b5336\",\"moduleSequenceNumber\":45960}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/export async function main(ns) {\\r\\n    const target = ns.args[0]\\r\\n    const threads = ns.args[1]\\r\\n    const delay = ns.args[2]\\r\\n  \\r\\n    if (delay && delay > 0) {\\r\\n      await ns.sleep(delay)\\r\\n    }\\r\\n  \\r\\n    ns.print(`Starting operation: hack on ${target} in ${threads} threads`)\\r\\n    await ns.hack(target, { threads, stock: true })\\r\\n    ns.exit()\\r\\n  }\\r\\n  \",\"filename\":\"hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:file:///378f0e19-d812-47dc-9213-0472ce7d046a\",\"moduleSequenceNumber\":49142}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"unitalife\",\"_hash\":\"30d9fdd2f5a8bacc809001f44651e87fc2a5770c889d459ab5aa86fb10c18201\",\"moduleSequenceNumber\":49142,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/export async function main(ns) {\\r\\n    const target = ns.args[0]\\r\\n    const threads = ns.args[1]\\r\\n    const delay = ns.args[2]\\r\\n  \\r\\n    if (delay && delay > 0) {\\r\\n      await ns.sleep(delay)\\r\\n    }\\r\\n  \\r\\n    ns.print(`Starting operation: grow on ${target} in ${threads} threads`)\\r\\n    await ns.grow(target, { threads, stock: true })\\r\\n    ns.exit()\\r\\n  }\\r\\n  \",\"filename\":\"grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///80166b39-171c-489e-943d-41105d6b5336\",\"moduleSequenceNumber\":45960}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"unitalife\",\"_hash\":\"c43d4c7c8798e16588b33c740af14ea55f3ecddd2586b8cc3336577ba8faa5f8\",\"moduleSequenceNumber\":45960,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/export async function main(ns) {\\r\\n    const target = ns.args[0]\\r\\n    const threads = ns.args[1]\\r\\n    const delay = ns.args[2]\\r\\n  \\r\\n    if (delay && delay > 0) {\\r\\n      await ns.sleep(delay)\\r\\n    }\\r\\n  \\r\\n    ns.print(`Starting operation: weaken on ${target} in ${threads} threads`)\\r\\n    await ns.weaken(target, { threads, stock: true })\\r\\n    ns.exit()\\r\\n  }\\r\\n  \",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"unitalife\",\"_hash\":\"7656e4aac5fc95a4a03444258a0cf4af92d88b1dd44a7486167d2200da1eb442\",\"moduleSequenceNumber\":45933,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"snap-fitness\",\"univ-energy\",\"zeus-med\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":78,\"hackDifficulty\":78,\"minDifficulty\":26,\"moneyAvailable\":1076576652,\"moneyMax\":26914416300,\"numOpenPortsRequired\":4,\"openPortCount\":4,\"requiredHackingSkill\":806,\"serverGrowth\":73}},\"lexo-corp\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"lexo-corp\",\"httpPortOpen\":true,\"ip\":\"43.0.4.2\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[],\"organizationName\":\"LexoCorp\",\"programs\":[],\"ramUsed\":63,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omega-net\",36,16589.730537389638,\"d4b06249-33a7-4c33-ad9a-8680275bbbd9\"],\"dataMap\":{},\"filename\":\"grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":122.81000000000121,\"pid\":917,\"ramUsage\":1.75,\"server\":\"lexo-corp\",\"threads\":36,\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///80166b39-171c-489e-943d-41105d6b5336\",\"moduleSequenceNumber\":45968}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/export async function main(ns) {\\r\\n    const target = ns.args[0]\\r\\n    const threads = ns.args[1]\\r\\n    const delay = ns.args[2]\\r\\n  \\r\\n    if (delay && delay > 0) {\\r\\n      await ns.sleep(delay)\\r\\n    }\\r\\n  \\r\\n    ns.print(`Starting operation: hack on ${target} in ${threads} threads`)\\r\\n    await ns.hack(target, { threads, stock: true })\\r\\n    ns.exit()\\r\\n  }\\r\\n  \",\"filename\":\"hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:file:///378f0e19-d812-47dc-9213-0472ce7d046a\",\"moduleSequenceNumber\":49150}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"lexo-corp\",\"_hash\":\"30d9fdd2f5a8bacc809001f44651e87fc2a5770c889d459ab5aa86fb10c18201\",\"moduleSequenceNumber\":49150,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/export async function main(ns) {\\r\\n    const target = ns.args[0]\\r\\n    const threads = ns.args[1]\\r\\n    const delay = ns.args[2]\\r\\n  \\r\\n    if (delay && delay > 0) {\\r\\n      await ns.sleep(delay)\\r\\n    }\\r\\n  \\r\\n    ns.print(`Starting operation: grow on ${target} in ${threads} threads`)\\r\\n    await ns.grow(target, { threads, stock: true })\\r\\n    ns.exit()\\r\\n  }\\r\\n  \",\"filename\":\"grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///80166b39-171c-489e-943d-41105d6b5336\",\"moduleSequenceNumber\":45968}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"lexo-corp\",\"_hash\":\"c43d4c7c8798e16588b33c740af14ea55f3ecddd2586b8cc3336577ba8faa5f8\",\"moduleSequenceNumber\":45968,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/export async function main(ns) {\\r\\n    const target = ns.args[0]\\r\\n    const threads = ns.args[1]\\r\\n    const delay = ns.args[2]\\r\\n  \\r\\n    if (delay && delay > 0) {\\r\\n      await ns.sleep(delay)\\r\\n    }\\r\\n  \\r\\n    ns.print(`Starting operation: weaken on ${target} in ${threads} threads`)\\r\\n    await ns.weaken(target, { threads, stock: true })\\r\\n    ns.exit()\\r\\n  }\\r\\n  \",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"lexo-corp\",\"_hash\":\"7656e4aac5fc95a4a03444258a0cf4af92d88b1dd44a7486167d2200da1eb442\",\"moduleSequenceNumber\":45921,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"zb-institute\",\"galactic-cyber\",\"snap-fitness\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":78,\"hackDifficulty\":78,\"minDifficulty\":26,\"moneyAvailable\":704991167,\"moneyMax\":17624779175,\"numOpenPortsRequired\":4,\"openPortCount\":4,\"requiredHackingSkill\":734,\"serverGrowth\":60}},\"rho-construction\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"rho-construction\",\"httpPortOpen\":true,\"ip\":\"16.5.9.5\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Rho Construction\",\"programs\":[],\"ramUsed\":15.75,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omega-net\",9,16589.730537389638,\"095efafb-2e36-4814-8437-a18df22ae8c1\"],\"dataMap\":{},\"filename\":\"grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":122.81000000000121,\"pid\":902,\"ramUsage\":1.75,\"server\":\"rho-construction\",\"threads\":9,\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///80166b39-171c-489e-943d-41105d6b5336\",\"moduleSequenceNumber\":45957}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/export async function main(ns) {\\r\\n    const target = ns.args[0]\\r\\n    const threads = ns.args[1]\\r\\n    const delay = ns.args[2]\\r\\n  \\r\\n    if (delay && delay > 0) {\\r\\n      await ns.sleep(delay)\\r\\n    }\\r\\n  \\r\\n    ns.print(`Starting operation: hack on ${target} in ${threads} threads`)\\r\\n    await ns.hack(target, { threads, stock: true })\\r\\n    ns.exit()\\r\\n  }\\r\\n  \",\"filename\":\"hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:file:///378f0e19-d812-47dc-9213-0472ce7d046a\",\"moduleSequenceNumber\":49139}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"rho-construction\",\"_hash\":\"30d9fdd2f5a8bacc809001f44651e87fc2a5770c889d459ab5aa86fb10c18201\",\"moduleSequenceNumber\":49139,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/export async function main(ns) {\\r\\n    const target = ns.args[0]\\r\\n    const threads = ns.args[1]\\r\\n    const delay = ns.args[2]\\r\\n  \\r\\n    if (delay && delay > 0) {\\r\\n      await ns.sleep(delay)\\r\\n    }\\r\\n  \\r\\n    ns.print(`Starting operation: grow on ${target} in ${threads} threads`)\\r\\n    await ns.grow(target, { threads, stock: true })\\r\\n    ns.exit()\\r\\n  }\\r\\n  \",\"filename\":\"grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///80166b39-171c-489e-943d-41105d6b5336\",\"moduleSequenceNumber\":45957}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"rho-construction\",\"_hash\":\"c43d4c7c8798e16588b33c740af14ea55f3ecddd2586b8cc3336577ba8faa5f8\",\"moduleSequenceNumber\":45957,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/export async function main(ns) {\\r\\n    const target = ns.args[0]\\r\\n    const threads = ns.args[1]\\r\\n    const delay = ns.args[2]\\r\\n  \\r\\n    if (delay && delay > 0) {\\r\\n      await ns.sleep(delay)\\r\\n    }\\r\\n  \\r\\n    ns.print(`Starting operation: weaken on ${target} in ${threads} threads`)\\r\\n    await ns.weaken(target, { threads, stock: true })\\r\\n    ns.exit()\\r\\n  }\\r\\n  \",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"rho-construction\",\"_hash\":\"7656e4aac5fc95a4a03444258a0cf4af92d88b1dd44a7486167d2200da1eb442\",\"moduleSequenceNumber\":45897,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"I.I.I.I\",\"aerocorp\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":44,\"hackDifficulty\":44,\"minDifficulty\":15,\"moneyAvailable\":525082135,\"moneyMax\":13127053375,\"numOpenPortsRequired\":3,\"openPortCount\":4,\"requiredHackingSkill\":512,\"serverGrowth\":60}},\"alpha-ent\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"alpha-ent\",\"httpPortOpen\":true,\"ip\":\"64.1.6.3\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"sector-12-crime.lit\"],\"organizationName\":\"Alpha Enterprises\",\"programs\":[],\"ramUsed\":31.5,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omega-net\",18,16589.730537389638,\"13e1cafc-d73d-45c4-bfe5-9f12f805a9e9\"],\"dataMap\":{},\"filename\":\"grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":122.81000000000121,\"pid\":914,\"ramUsage\":1.75,\"server\":\"alpha-ent\",\"threads\":18,\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///80166b39-171c-489e-943d-41105d6b5336\",\"moduleSequenceNumber\":45965}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/export async function main(ns) {\\r\\n    const target = ns.args[0]\\r\\n    const threads = ns.args[1]\\r\\n    const delay = ns.args[2]\\r\\n  \\r\\n    if (delay && delay > 0) {\\r\\n      await ns.sleep(delay)\\r\\n    }\\r\\n  \\r\\n    ns.print(`Starting operation: hack on ${target} in ${threads} threads`)\\r\\n    await ns.hack(target, { threads, stock: true })\\r\\n    ns.exit()\\r\\n  }\\r\\n  \",\"filename\":\"hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:file:///378f0e19-d812-47dc-9213-0472ce7d046a\",\"moduleSequenceNumber\":49147}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"alpha-ent\",\"_hash\":\"30d9fdd2f5a8bacc809001f44651e87fc2a5770c889d459ab5aa86fb10c18201\",\"moduleSequenceNumber\":49147,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/export async function main(ns) {\\r\\n    const target = ns.args[0]\\r\\n    const threads = ns.args[1]\\r\\n    const delay = ns.args[2]\\r\\n  \\r\\n    if (delay && delay > 0) {\\r\\n      await ns.sleep(delay)\\r\\n    }\\r\\n  \\r\\n    ns.print(`Starting operation: grow on ${target} in ${threads} threads`)\\r\\n    await ns.grow(target, { threads, stock: true })\\r\\n    ns.exit()\\r\\n  }\\r\\n  \",\"filename\":\"grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///80166b39-171c-489e-943d-41105d6b5336\",\"moduleSequenceNumber\":45965}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"alpha-ent\",\"_hash\":\"c43d4c7c8798e16588b33c740af14ea55f3ecddd2586b8cc3336577ba8faa5f8\",\"moduleSequenceNumber\":45965,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/export async function main(ns) {\\r\\n    const target = ns.args[0]\\r\\n    const threads = ns.args[1]\\r\\n    const delay = ns.args[2]\\r\\n  \\r\\n    if (delay && delay > 0) {\\r\\n      await ns.sleep(delay)\\r\\n    }\\r\\n  \\r\\n    ns.print(`Starting operation: weaken on ${target} in ${threads} threads`)\\r\\n    await ns.weaken(target, { threads, stock: true })\\r\\n    ns.exit()\\r\\n  }\\r\\n  \",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"alpha-ent\",\"_hash\":\"7656e4aac5fc95a4a03444258a0cf4af92d88b1dd44a7486167d2200da1eb442\",\"moduleSequenceNumber\":45915,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"rothman-uni\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":53,\"hackDifficulty\":53,\"minDifficulty\":18,\"moneyAvailable\":606020421,\"moneyMax\":15150510525,\"numOpenPortsRequired\":4,\"openPortCount\":4,\"requiredHackingSkill\":589,\"serverGrowth\":52}},\"aevum-police\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"aevum-police\",\"httpPortOpen\":true,\"ip\":\"53.0.1.4\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Aevum Police Headquarters\",\"programs\":[],\"ramUsed\":15.75,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omega-net\",9,16589.730537389638,\"a7863946-4c78-4905-94d3-e94077ff6f3b\"],\"dataMap\":{},\"filename\":\"grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":122.81000000000121,\"pid\":903,\"ramUsage\":1.75,\"server\":\"aevum-police\",\"threads\":9,\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///80166b39-171c-489e-943d-41105d6b5336\",\"moduleSequenceNumber\":45958}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/export async function main(ns) {\\r\\n    const target = ns.args[0]\\r\\n    const threads = ns.args[1]\\r\\n    const delay = ns.args[2]\\r\\n  \\r\\n    if (delay && delay > 0) {\\r\\n      await ns.sleep(delay)\\r\\n    }\\r\\n  \\r\\n    ns.print(`Starting operation: hack on ${target} in ${threads} threads`)\\r\\n    await ns.hack(target, { threads, stock: true })\\r\\n    ns.exit()\\r\\n  }\\r\\n  \",\"filename\":\"hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:file:///378f0e19-d812-47dc-9213-0472ce7d046a\",\"moduleSequenceNumber\":49140}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"aevum-police\",\"_hash\":\"30d9fdd2f5a8bacc809001f44651e87fc2a5770c889d459ab5aa86fb10c18201\",\"moduleSequenceNumber\":49140,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/export async function main(ns) {\\r\\n    const target = ns.args[0]\\r\\n    const threads = ns.args[1]\\r\\n    const delay = ns.args[2]\\r\\n  \\r\\n    if (delay && delay > 0) {\\r\\n      await ns.sleep(delay)\\r\\n    }\\r\\n  \\r\\n    ns.print(`Starting operation: grow on ${target} in ${threads} threads`)\\r\\n    await ns.grow(target, { threads, stock: true })\\r\\n    ns.exit()\\r\\n  }\\r\\n  \",\"filename\":\"grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///80166b39-171c-489e-943d-41105d6b5336\",\"moduleSequenceNumber\":45958}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"aevum-police\",\"_hash\":\"c43d4c7c8798e16588b33c740af14ea55f3ecddd2586b8cc3336577ba8faa5f8\",\"moduleSequenceNumber\":45958,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/export async function main(ns) {\\r\\n    const target = ns.args[0]\\r\\n    const threads = ns.args[1]\\r\\n    const delay = ns.args[2]\\r\\n  \\r\\n    if (delay && delay > 0) {\\r\\n      await ns.sleep(delay)\\r\\n    }\\r\\n  \\r\\n    ns.print(`Starting operation: weaken on ${target} in ${threads} threads`)\\r\\n    await ns.weaken(target, { threads, stock: true })\\r\\n    ns.exit()\\r\\n  }\\r\\n  \",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"aevum-police\",\"_hash\":\"7656e4aac5fc95a4a03444258a0cf4af92d88b1dd44a7486167d2200da1eb442\",\"moduleSequenceNumber\":45903,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"I.I.I.I\",\"global-pharm\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":76,\"hackDifficulty\":76,\"minDifficulty\":25,\"moneyAvailable\":376125511,\"moneyMax\":9403137775,\"numOpenPortsRequired\":4,\"openPortCount\":4,\"requiredHackingSkill\":434,\"serverGrowth\":39}},\"rothman-uni\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"rothman-uni\",\"httpPortOpen\":true,\"ip\":\"12.7.6.4\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[\"secret-societies.lit\",\"the-failed-frontier.lit\",\"tensions-in-tech-race.lit\"],\"organizationName\":\"Rothman University\",\"programs\":[],\"ramUsed\":127.75,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omega-net\",73,16589.730537389638,\"eb6b54ea-28dd-4a84-8ef3-8cabcc0e6c48\"],\"dataMap\":{},\"filename\":\"grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":122.81000000000121,\"pid\":919,\"ramUsage\":1.75,\"server\":\"rothman-uni\",\"threads\":73,\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///80166b39-171c-489e-943d-41105d6b5336\",\"moduleSequenceNumber\":45970}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/export async function main(ns) {\\r\\n    const target = ns.args[0]\\r\\n    const threads = ns.args[1]\\r\\n    const delay = ns.args[2]\\r\\n  \\r\\n    if (delay && delay > 0) {\\r\\n      await ns.sleep(delay)\\r\\n    }\\r\\n  \\r\\n    ns.print(`Starting operation: hack on ${target} in ${threads} threads`)\\r\\n    await ns.hack(target, { threads, stock: true })\\r\\n    ns.exit()\\r\\n  }\\r\\n  \",\"filename\":\"hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:file:///378f0e19-d812-47dc-9213-0472ce7d046a\",\"moduleSequenceNumber\":49152}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"rothman-uni\",\"_hash\":\"30d9fdd2f5a8bacc809001f44651e87fc2a5770c889d459ab5aa86fb10c18201\",\"moduleSequenceNumber\":49152,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/export async function main(ns) {\\r\\n    const target = ns.args[0]\\r\\n    const threads = ns.args[1]\\r\\n    const delay = ns.args[2]\\r\\n  \\r\\n    if (delay && delay > 0) {\\r\\n      await ns.sleep(delay)\\r\\n    }\\r\\n  \\r\\n    ns.print(`Starting operation: grow on ${target} in ${threads} threads`)\\r\\n    await ns.grow(target, { threads, stock: true })\\r\\n    ns.exit()\\r\\n  }\\r\\n  \",\"filename\":\"grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///80166b39-171c-489e-943d-41105d6b5336\",\"moduleSequenceNumber\":45970}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"rothman-uni\",\"_hash\":\"c43d4c7c8798e16588b33c740af14ea55f3ecddd2586b8cc3336577ba8faa5f8\",\"moduleSequenceNumber\":45970,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/export async function main(ns) {\\r\\n    const target = ns.args[0]\\r\\n    const threads = ns.args[1]\\r\\n    const delay = ns.args[2]\\r\\n  \\r\\n    if (delay && delay > 0) {\\r\\n      await ns.sleep(delay)\\r\\n    }\\r\\n  \\r\\n    ns.print(`Starting operation: weaken on ${target} in ${threads} threads`)\\r\\n    await ns.weaken(target, { threads, stock: true })\\r\\n    ns.exit()\\r\\n  }\\r\\n  \",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"rothman-uni\",\"_hash\":\"7656e4aac5fc95a4a03444258a0cf4af92d88b1dd44a7486167d2200da1eb442\",\"moduleSequenceNumber\":45885,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"crush-fitness\",\"alpha-ent\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":54,\"hackDifficulty\":54,\"minDifficulty\":18,\"moneyAvailable\":226854339,\"moneyMax\":5671358475,\"numOpenPortsRequired\":3,\"openPortCount\":4,\"requiredHackingSkill\":430,\"serverGrowth\":36}},\"zb-institute\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"zb-institute\",\"httpPortOpen\":false,\"ip\":\"9.5.8.5\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[],\"organizationName\":\"ZB Institute of Technology\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"avmnite-02h\",\"lexo-corp\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":65,\"hackDifficulty\":65,\"minDifficulty\":22,\"moneyAvailable\":825899045,\"moneyMax\":20647476125,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":764,\"serverGrowth\":84}},\"summit-uni\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"summit-uni\",\"httpPortOpen\":true,\"ip\":\"73.6.2.2\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"secret-societies.lit\",\"the-failed-frontier.lit\",\"synthetic-muscles.lit\"],\"organizationName\":\"Summit University\",\"programs\":[],\"ramUsed\":15.75,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omega-net\",9,16589.730537389638,\"32990e93-6182-4bbb-b6fc-5956db5553fd\"],\"dataMap\":{},\"filename\":\"grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":122.81000000000121,\"pid\":901,\"ramUsage\":1.75,\"server\":\"summit-uni\",\"threads\":9,\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///80166b39-171c-489e-943d-41105d6b5336\",\"moduleSequenceNumber\":45956}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/export async function main(ns) {\\r\\n    const target = ns.args[0]\\r\\n    const threads = ns.args[1]\\r\\n    const delay = ns.args[2]\\r\\n  \\r\\n    if (delay && delay > 0) {\\r\\n      await ns.sleep(delay)\\r\\n    }\\r\\n  \\r\\n    ns.print(`Starting operation: hack on ${target} in ${threads} threads`)\\r\\n    await ns.hack(target, { threads, stock: true })\\r\\n    ns.exit()\\r\\n  }\\r\\n  \",\"filename\":\"hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:file:///378f0e19-d812-47dc-9213-0472ce7d046a\",\"moduleSequenceNumber\":49138}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"summit-uni\",\"_hash\":\"30d9fdd2f5a8bacc809001f44651e87fc2a5770c889d459ab5aa86fb10c18201\",\"moduleSequenceNumber\":49138,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/export async function main(ns) {\\r\\n    const target = ns.args[0]\\r\\n    const threads = ns.args[1]\\r\\n    const delay = ns.args[2]\\r\\n  \\r\\n    if (delay && delay > 0) {\\r\\n      await ns.sleep(delay)\\r\\n    }\\r\\n  \\r\\n    ns.print(`Starting operation: grow on ${target} in ${threads} threads`)\\r\\n    await ns.grow(target, { threads, stock: true })\\r\\n    ns.exit()\\r\\n  }\\r\\n  \",\"filename\":\"grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///80166b39-171c-489e-943d-41105d6b5336\",\"moduleSequenceNumber\":45956}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"summit-uni\",\"_hash\":\"c43d4c7c8798e16588b33c740af14ea55f3ecddd2586b8cc3336577ba8faa5f8\",\"moduleSequenceNumber\":45956,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/export async function main(ns) {\\r\\n    const target = ns.args[0]\\r\\n    const threads = ns.args[1]\\r\\n    const delay = ns.args[2]\\r\\n  \\r\\n    if (delay && delay > 0) {\\r\\n      await ns.sleep(delay)\\r\\n    }\\r\\n  \\r\\n    ns.print(`Starting operation: weaken on ${target} in ${threads} threads`)\\r\\n    await ns.weaken(target, { threads, stock: true })\\r\\n    ns.exit()\\r\\n  }\\r\\n  \",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"summit-uni\",\"_hash\":\"7656e4aac5fc95a4a03444258a0cf4af92d88b1dd44a7486167d2200da1eb442\",\"moduleSequenceNumber\":45879,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"netlink\",\"millenium-fitness\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":53,\"hackDifficulty\":53,\"minDifficulty\":18,\"moneyAvailable\":319564992,\"moneyMax\":7989124800,\"numOpenPortsRequired\":3,\"openPortCount\":4,\"requiredHackingSkill\":474,\"serverGrowth\":49}},\"syscore\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"syscore\",\"httpPortOpen\":false,\"ip\":\"42.8.1.9\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"SysCore Securities\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"the-hub\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":71,\"hackDifficulty\":71,\"minDifficulty\":24,\"moneyAvailable\":598250211,\"moneyMax\":14956255275,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":555,\"serverGrowth\":68}},\"catalyst\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"catalyst\",\"httpPortOpen\":true,\"ip\":\"11.8.2.7\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"tensions-in-tech-race.lit\"],\"organizationName\":\"Catalyst Ventures\",\"programs\":[],\"ramUsed\":31.5,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omega-net\",18,16589.730537389638,\"d57e1419-e905-4fcb-93f4-1acfa24e0a34\"],\"dataMap\":{},\"filename\":\"grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":122.81000000000121,\"pid\":913,\"ramUsage\":1.75,\"server\":\"catalyst\",\"threads\":18,\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///80166b39-171c-489e-943d-41105d6b5336\",\"moduleSequenceNumber\":45964}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/export async function main(ns) {\\r\\n    const target = ns.args[0]\\r\\n    const threads = ns.args[1]\\r\\n    const delay = ns.args[2]\\r\\n  \\r\\n    if (delay && delay > 0) {\\r\\n      await ns.sleep(delay)\\r\\n    }\\r\\n  \\r\\n    ns.print(`Starting operation: hack on ${target} in ${threads} threads`)\\r\\n    await ns.hack(target, { threads, stock: true })\\r\\n    ns.exit()\\r\\n  }\\r\\n  \",\"filename\":\"hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:file:///378f0e19-d812-47dc-9213-0472ce7d046a\",\"moduleSequenceNumber\":49146}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"catalyst\",\"_hash\":\"30d9fdd2f5a8bacc809001f44651e87fc2a5770c889d459ab5aa86fb10c18201\",\"moduleSequenceNumber\":49146,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/export async function main(ns) {\\r\\n    const target = ns.args[0]\\r\\n    const threads = ns.args[1]\\r\\n    const delay = ns.args[2]\\r\\n  \\r\\n    if (delay && delay > 0) {\\r\\n      await ns.sleep(delay)\\r\\n    }\\r\\n  \\r\\n    ns.print(`Starting operation: grow on ${target} in ${threads} threads`)\\r\\n    await ns.grow(target, { threads, stock: true })\\r\\n    ns.exit()\\r\\n  }\\r\\n  \",\"filename\":\"grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///80166b39-171c-489e-943d-41105d6b5336\",\"moduleSequenceNumber\":45964}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"catalyst\",\"_hash\":\"c43d4c7c8798e16588b33c740af14ea55f3ecddd2586b8cc3336577ba8faa5f8\",\"moduleSequenceNumber\":45964,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/export async function main(ns) {\\r\\n    const target = ns.args[0]\\r\\n    const threads = ns.args[1]\\r\\n    const delay = ns.args[2]\\r\\n  \\r\\n    if (delay && delay > 0) {\\r\\n      await ns.sleep(delay)\\r\\n    }\\r\\n  \\r\\n    ns.print(`Starting operation: weaken on ${target} in ${threads} threads`)\\r\\n    await ns.weaken(target, { threads, stock: true })\\r\\n    ns.exit()\\r\\n  }\\r\\n  \",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"catalyst\",\"_hash\":\"7656e4aac5fc95a4a03444258a0cf4af92d88b1dd44a7486167d2200da1eb442\",\"moduleSequenceNumber\":45891,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"avmnite-02h\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":62,\"hackDifficulty\":62,\"minDifficulty\":21,\"moneyAvailable\":347938361,\"moneyMax\":8698459025,\"numOpenPortsRequired\":3,\"openPortCount\":4,\"requiredHackingSkill\":401,\"serverGrowth\":27}},\"the-hub\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"the-hub\",\"httpPortOpen\":true,\"ip\":\"9.4.5.5\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[],\"organizationName\":\"The Hub\",\"programs\":[],\"ramUsed\":63,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omega-net\",36,16589.730537389638,\"3bab95ac-9710-4502-bba5-be5115850c30\"],\"dataMap\":{},\"filename\":\"grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":122.81000000000121,\"pid\":916,\"ramUsage\":1.75,\"server\":\"the-hub\",\"threads\":36,\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///80166b39-171c-489e-943d-41105d6b5336\",\"moduleSequenceNumber\":45967}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/export async function main(ns) {\\r\\n    const target = ns.args[0]\\r\\n    const threads = ns.args[1]\\r\\n    const delay = ns.args[2]\\r\\n  \\r\\n    if (delay && delay > 0) {\\r\\n      await ns.sleep(delay)\\r\\n    }\\r\\n  \\r\\n    ns.print(`Starting operation: hack on ${target} in ${threads} threads`)\\r\\n    await ns.hack(target, { threads, stock: true })\\r\\n    ns.exit()\\r\\n  }\\r\\n  \",\"filename\":\"hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:file:///378f0e19-d812-47dc-9213-0472ce7d046a\",\"moduleSequenceNumber\":49149}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"the-hub\",\"_hash\":\"30d9fdd2f5a8bacc809001f44651e87fc2a5770c889d459ab5aa86fb10c18201\",\"moduleSequenceNumber\":49149,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/export async function main(ns) {\\r\\n    const target = ns.args[0]\\r\\n    const threads = ns.args[1]\\r\\n    const delay = ns.args[2]\\r\\n  \\r\\n    if (delay && delay > 0) {\\r\\n      await ns.sleep(delay)\\r\\n    }\\r\\n  \\r\\n    ns.print(`Starting operation: grow on ${target} in ${threads} threads`)\\r\\n    await ns.grow(target, { threads, stock: true })\\r\\n    ns.exit()\\r\\n  }\\r\\n  \",\"filename\":\"grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///80166b39-171c-489e-943d-41105d6b5336\",\"moduleSequenceNumber\":45967}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"the-hub\",\"_hash\":\"c43d4c7c8798e16588b33c740af14ea55f3ecddd2586b8cc3336577ba8faa5f8\",\"moduleSequenceNumber\":45967,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/export async function main(ns) {\\r\\n    const target = ns.args[0]\\r\\n    const threads = ns.args[1]\\r\\n    const delay = ns.args[2]\\r\\n  \\r\\n    if (delay && delay > 0) {\\r\\n      await ns.sleep(delay)\\r\\n    }\\r\\n  \\r\\n    ns.print(`Starting operation: weaken on ${target} in ${threads} threads`)\\r\\n    await ns.weaken(target, { threads, stock: true })\\r\\n    ns.exit()\\r\\n  }\\r\\n  \",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"the-hub\",\"_hash\":\"7656e4aac5fc95a4a03444258a0cf4af92d88b1dd44a7486167d2200da1eb442\",\"moduleSequenceNumber\":45861,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"neo-net\",\"syscore\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":44,\"hackDifficulty\":44,\"minDifficulty\":15,\"moneyAvailable\":171336802,\"moneyMax\":4283420050,\"numOpenPortsRequired\":2,\"openPortCount\":4,\"requiredHackingSkill\":307,\"serverGrowth\":49}},\"comptek\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"comptek\",\"httpPortOpen\":false,\"ip\":\"2.0.5.7\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"man-and-machine.lit\"],\"organizationName\":\"CompuTek\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"omega-net\",\"I.I.I.I\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":56,\"hackDifficulty\":56,\"minDifficulty\":19,\"moneyAvailable\":231033216,\"moneyMax\":5775830400,\"numOpenPortsRequired\":3,\"openPortCount\":0,\"requiredHackingSkill\":311,\"serverGrowth\":45}},\"netlink\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-141808-TheBlackHand.cct\",\"type\":\"Minimum Path Sum in a Triangle\",\"data\":[[7],[4,8],[6,5,3],[2,2,7,7],[8,5,6,1,9],[2,4,9,6,3,3],[5,4,3,1,6,2,6],[7,9,4,3,4,3,5,9],[3,8,3,4,9,2,9,7,2]],\"reward\":{\"name\":\"The Black Hand\",\"type\":0}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"netlink\",\"httpPortOpen\":true,\"ip\":\"0.9.3.0\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"simulated-reality.lit\"],\"organizationName\":\"NetLink Technologies\",\"programs\":[],\"ramUsed\":15.75,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omega-net\",9,16589.730537389638,\"6b01e477-6e23-43d8-ad3c-9870c537d871\"],\"dataMap\":{},\"filename\":\"grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":122.81000000000121,\"pid\":898,\"ramUsage\":1.75,\"server\":\"netlink\",\"threads\":9,\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///80166b39-171c-489e-943d-41105d6b5336\",\"moduleSequenceNumber\":45953}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/export async function main(ns) {\\r\\n    const target = ns.args[0]\\r\\n    const threads = ns.args[1]\\r\\n    const delay = ns.args[2]\\r\\n  \\r\\n    if (delay && delay > 0) {\\r\\n      await ns.sleep(delay)\\r\\n    }\\r\\n  \\r\\n    ns.print(`Starting operation: hack on ${target} in ${threads} threads`)\\r\\n    await ns.hack(target, { threads, stock: true })\\r\\n    ns.exit()\\r\\n  }\\r\\n  \",\"filename\":\"hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:file:///378f0e19-d812-47dc-9213-0472ce7d046a\",\"moduleSequenceNumber\":49135}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"netlink\",\"_hash\":\"30d9fdd2f5a8bacc809001f44651e87fc2a5770c889d459ab5aa86fb10c18201\",\"moduleSequenceNumber\":49135,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/export async function main(ns) {\\r\\n    const target = ns.args[0]\\r\\n    const threads = ns.args[1]\\r\\n    const delay = ns.args[2]\\r\\n  \\r\\n    if (delay && delay > 0) {\\r\\n      await ns.sleep(delay)\\r\\n    }\\r\\n  \\r\\n    ns.print(`Starting operation: grow on ${target} in ${threads} threads`)\\r\\n    await ns.grow(target, { threads, stock: true })\\r\\n    ns.exit()\\r\\n  }\\r\\n  \",\"filename\":\"grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///80166b39-171c-489e-943d-41105d6b5336\",\"moduleSequenceNumber\":45953}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"netlink\",\"_hash\":\"c43d4c7c8798e16588b33c740af14ea55f3ecddd2586b8cc3336577ba8faa5f8\",\"moduleSequenceNumber\":45953,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/export async function main(ns) {\\r\\n    const target = ns.args[0]\\r\\n    const threads = ns.args[1]\\r\\n    const delay = ns.args[2]\\r\\n  \\r\\n    if (delay && delay > 0) {\\r\\n      await ns.sleep(delay)\\r\\n    }\\r\\n  \\r\\n    ns.print(`Starting operation: weaken on ${target} in ${threads} threads`)\\r\\n    await ns.weaken(target, { threads, stock: true })\\r\\n    ns.exit()\\r\\n  }\\r\\n  \",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"netlink\",\"_hash\":\"7656e4aac5fc95a4a03444258a0cf4af92d88b1dd44a7486167d2200da1eb442\",\"moduleSequenceNumber\":45855,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"omega-net\",\"summit-uni\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":64,\"hackDifficulty\":64,\"minDifficulty\":21,\"moneyAvailable\":275000000,\"moneyMax\":6875000000,\"numOpenPortsRequired\":3,\"openPortCount\":4,\"requiredHackingSkill\":424,\"serverGrowth\":51}},\"johnson-ortho\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"johnson-ortho\",\"httpPortOpen\":false,\"ip\":\"99.5.2.5\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Johnson Orthopedics\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"phantasy\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":60,\"hackDifficulty\":60,\"minDifficulty\":20,\"moneyAvailable\":78307304,\"moneyMax\":1957682600,\"numOpenPortsRequired\":2,\"openPortCount\":0,\"requiredHackingSkill\":273,\"serverGrowth\":46}},\"n00dles\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"n00dles\",\"httpPortOpen\":false,\"ip\":\"74.8.2.9\",\"isConnectedTo\":false,\"maxRam\":4,\"messages\":[],\"organizationName\":\"Noodle Bar\",\"programs\":[],\"ramUsed\":3.5,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omega-net\",2,16589.730537389638,\"c6996b8c-cc90-42af-93c2-378eac224311\"],\"dataMap\":{},\"filename\":\"grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":122.81000000000121,\"pid\":889,\"ramUsage\":1.75,\"server\":\"n00dles\",\"threads\":2,\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///80166b39-171c-489e-943d-41105d6b5336\",\"moduleSequenceNumber\":41036}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/export async function main(ns) {\\r\\n    const target = ns.args[0]\\r\\n    const threads = ns.args[1]\\r\\n    const delay = ns.args[2]\\r\\n  \\r\\n    if (delay && delay > 0) {\\r\\n      await ns.sleep(delay)\\r\\n    }\\r\\n  \\r\\n    ns.print(`Starting operation: hack on ${target} in ${threads} threads`)\\r\\n    await ns.hack(target, { threads, stock: true })\\r\\n    ns.exit()\\r\\n  }\\r\\n  \",\"filename\":\"hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:file:///378f0e19-d812-47dc-9213-0472ce7d046a\",\"moduleSequenceNumber\":42485}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"n00dles\",\"_hash\":\"30d9fdd2f5a8bacc809001f44651e87fc2a5770c889d459ab5aa86fb10c18201\",\"moduleSequenceNumber\":42485,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/export async function main(ns) {\\r\\n    const target = ns.args[0]\\r\\n    const threads = ns.args[1]\\r\\n    const delay = ns.args[2]\\r\\n  \\r\\n    if (delay && delay > 0) {\\r\\n      await ns.sleep(delay)\\r\\n    }\\r\\n  \\r\\n    ns.print(`Starting operation: grow on ${target} in ${threads} threads`)\\r\\n    await ns.grow(target, { threads, stock: true })\\r\\n    ns.exit()\\r\\n  }\\r\\n  \",\"filename\":\"grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///80166b39-171c-489e-943d-41105d6b5336\",\"moduleSequenceNumber\":41036}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"n00dles\",\"_hash\":\"c43d4c7c8798e16588b33c740af14ea55f3ecddd2586b8cc3336577ba8faa5f8\",\"moduleSequenceNumber\":41036,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/export async function main(ns) {\\r\\n    const target = ns.args[0]\\r\\n    const threads = ns.args[1]\\r\\n    const delay = ns.args[2]\\r\\n  \\r\\n    if (delay && delay > 0) {\\r\\n      await ns.sleep(delay)\\r\\n    }\\r\\n  \\r\\n    ns.print(`Starting operation: weaken on ${target} in ${threads} threads`)\\r\\n    await ns.weaken(target, { threads, stock: true })\\r\\n    ns.exit()\\r\\n  }\\r\\n  \",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"n00dles\",\"_hash\":\"7656e4aac5fc95a4a03444258a0cf4af92d88b1dd44a7486167d2200da1eb442\",\"moduleSequenceNumber\":40969,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"home\",\"zer0\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":70000,\"moneyMax\":1750000,\"numOpenPortsRequired\":0,\"openPortCount\":1,\"requiredHackingSkill\":1,\"serverGrowth\":3000}},\"foodnstuff\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"foodnstuff\",\"httpPortOpen\":false,\"ip\":\"54.6.5.3\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"sector-12-crime.lit\"],\"organizationName\":\"FoodNStuff\",\"programs\":[],\"ramUsed\":15.75,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omega-net\",9,16589.730537389638,\"58bca5b6-998b-4068-8a8b-00deb7406780\"],\"dataMap\":{},\"filename\":\"grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":122.81000000000121,\"pid\":892,\"ramUsage\":1.75,\"server\":\"foodnstuff\",\"threads\":9,\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///80166b39-171c-489e-943d-41105d6b5336\",\"moduleSequenceNumber\":41038}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/export async function main(ns) {\\r\\n    const target = ns.args[0]\\r\\n    const threads = ns.args[1]\\r\\n    const delay = ns.args[2]\\r\\n  \\r\\n    if (delay && delay > 0) {\\r\\n      await ns.sleep(delay)\\r\\n    }\\r\\n  \\r\\n    ns.print(`Starting operation: hack on ${target} in ${threads} threads`)\\r\\n    await ns.hack(target, { threads, stock: true })\\r\\n    ns.exit()\\r\\n  }\\r\\n  \",\"filename\":\"hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:file:///378f0e19-d812-47dc-9213-0472ce7d046a\",\"moduleSequenceNumber\":42487}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"foodnstuff\",\"_hash\":\"30d9fdd2f5a8bacc809001f44651e87fc2a5770c889d459ab5aa86fb10c18201\",\"moduleSequenceNumber\":42487,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/export async function main(ns) {\\r\\n    const target = ns.args[0]\\r\\n    const threads = ns.args[1]\\r\\n    const delay = ns.args[2]\\r\\n  \\r\\n    if (delay && delay > 0) {\\r\\n      await ns.sleep(delay)\\r\\n    }\\r\\n  \\r\\n    ns.print(`Starting operation: grow on ${target} in ${threads} threads`)\\r\\n    await ns.grow(target, { threads, stock: true })\\r\\n    ns.exit()\\r\\n  }\\r\\n  \",\"filename\":\"grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///80166b39-171c-489e-943d-41105d6b5336\",\"moduleSequenceNumber\":41038}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"foodnstuff\",\"_hash\":\"c43d4c7c8798e16588b33c740af14ea55f3ecddd2586b8cc3336577ba8faa5f8\",\"moduleSequenceNumber\":41038,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/export async function main(ns) {\\r\\n    const target = ns.args[0]\\r\\n    const threads = ns.args[1]\\r\\n    const delay = ns.args[2]\\r\\n  \\r\\n    if (delay && delay > 0) {\\r\\n      await ns.sleep(delay)\\r\\n    }\\r\\n  \\r\\n    ns.print(`Starting operation: weaken on ${target} in ${threads} threads`)\\r\\n    await ns.weaken(target, { threads, stock: true })\\r\\n    ns.exit()\\r\\n  }\\r\\n  \",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"foodnstuff\",\"_hash\":\"7656e4aac5fc95a4a03444258a0cf4af92d88b1dd44a7486167d2200da1eb442\",\"moduleSequenceNumber\":40975,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"home\",\"nectar-net\",\"CSEC\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":10,\"hackDifficulty\":3,\"minDifficulty\":3,\"moneyAvailable\":4838371.840480939,\"moneyMax\":50000000,\"numOpenPortsRequired\":0,\"openPortCount\":1,\"requiredHackingSkill\":1,\"serverGrowth\":5}},\"sigma-cosmetics\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"sigma-cosmetics\",\"httpPortOpen\":false,\"ip\":\"37.9.0.6\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Sigma Cosmetics\",\"programs\":[],\"ramUsed\":15.75,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omega-net\",9,16589.730537389638,\"cedb53fb-4b73-4e30-83b9-42315a207de8\"],\"dataMap\":{},\"filename\":\"grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":122.81000000000121,\"pid\":893,\"ramUsage\":1.75,\"server\":\"sigma-cosmetics\",\"threads\":9,\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///80166b39-171c-489e-943d-41105d6b5336\",\"moduleSequenceNumber\":41039}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/export async function main(ns) {\\r\\n    const target = ns.args[0]\\r\\n    const threads = ns.args[1]\\r\\n    const delay = ns.args[2]\\r\\n  \\r\\n    if (delay && delay > 0) {\\r\\n      await ns.sleep(delay)\\r\\n    }\\r\\n  \\r\\n    ns.print(`Starting operation: hack on ${target} in ${threads} threads`)\\r\\n    await ns.hack(target, { threads, stock: true })\\r\\n    ns.exit()\\r\\n  }\\r\\n  \",\"filename\":\"hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:file:///378f0e19-d812-47dc-9213-0472ce7d046a\",\"moduleSequenceNumber\":42488}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"sigma-cosmetics\",\"_hash\":\"30d9fdd2f5a8bacc809001f44651e87fc2a5770c889d459ab5aa86fb10c18201\",\"moduleSequenceNumber\":42488,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/export async function main(ns) {\\r\\n    const target = ns.args[0]\\r\\n    const threads = ns.args[1]\\r\\n    const delay = ns.args[2]\\r\\n  \\r\\n    if (delay && delay > 0) {\\r\\n      await ns.sleep(delay)\\r\\n    }\\r\\n  \\r\\n    ns.print(`Starting operation: grow on ${target} in ${threads} threads`)\\r\\n    await ns.grow(target, { threads, stock: true })\\r\\n    ns.exit()\\r\\n  }\\r\\n  \",\"filename\":\"grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///80166b39-171c-489e-943d-41105d6b5336\",\"moduleSequenceNumber\":41039}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"sigma-cosmetics\",\"_hash\":\"c43d4c7c8798e16588b33c740af14ea55f3ecddd2586b8cc3336577ba8faa5f8\",\"moduleSequenceNumber\":41039,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/export async function main(ns) {\\r\\n    const target = ns.args[0]\\r\\n    const threads = ns.args[1]\\r\\n    const delay = ns.args[2]\\r\\n  \\r\\n    if (delay && delay > 0) {\\r\\n      await ns.sleep(delay)\\r\\n    }\\r\\n  \\r\\n    ns.print(`Starting operation: weaken on ${target} in ${threads} threads`)\\r\\n    await ns.weaken(target, { threads, stock: true })\\r\\n    ns.exit()\\r\\n  }\\r\\n  \",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"sigma-cosmetics\",\"_hash\":\"7656e4aac5fc95a4a03444258a0cf4af92d88b1dd44a7486167d2200da1eb442\",\"moduleSequenceNumber\":40981,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"home\",\"max-hardware\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":10,\"hackDifficulty\":10,\"minDifficulty\":3,\"moneyAvailable\":2300000,\"moneyMax\":57500000,\"numOpenPortsRequired\":0,\"openPortCount\":1,\"requiredHackingSkill\":5,\"serverGrowth\":10}},\"joesguns\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"joesguns\",\"httpPortOpen\":false,\"ip\":\"39.0.6.5\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Joe's Guns\",\"programs\":[],\"ramUsed\":15.75,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omega-net\",9,16589.730537389638,\"10d6d6f1-a133-4f32-bab2-ff8e148cc326\"],\"dataMap\":{},\"filename\":\"grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":122.81000000000121,\"pid\":894,\"ramUsage\":1.75,\"server\":\"joesguns\",\"threads\":9,\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///80166b39-171c-489e-943d-41105d6b5336\",\"moduleSequenceNumber\":41040}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/export async function main(ns) {\\r\\n    const target = ns.args[0]\\r\\n    const threads = ns.args[1]\\r\\n    const delay = ns.args[2]\\r\\n  \\r\\n    if (delay && delay > 0) {\\r\\n      await ns.sleep(delay)\\r\\n    }\\r\\n  \\r\\n    ns.print(`Starting operation: hack on ${target} in ${threads} threads`)\\r\\n    await ns.hack(target, { threads, stock: true })\\r\\n    ns.exit()\\r\\n  }\\r\\n  \",\"filename\":\"hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:file:///378f0e19-d812-47dc-9213-0472ce7d046a\",\"moduleSequenceNumber\":42489}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"joesguns\",\"_hash\":\"30d9fdd2f5a8bacc809001f44651e87fc2a5770c889d459ab5aa86fb10c18201\",\"moduleSequenceNumber\":42489,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/export async function main(ns) {\\r\\n    const target = ns.args[0]\\r\\n    const threads = ns.args[1]\\r\\n    const delay = ns.args[2]\\r\\n  \\r\\n    if (delay && delay > 0) {\\r\\n      await ns.sleep(delay)\\r\\n    }\\r\\n  \\r\\n    ns.print(`Starting operation: grow on ${target} in ${threads} threads`)\\r\\n    await ns.grow(target, { threads, stock: true })\\r\\n    ns.exit()\\r\\n  }\\r\\n  \",\"filename\":\"grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///80166b39-171c-489e-943d-41105d6b5336\",\"moduleSequenceNumber\":41040}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"joesguns\",\"_hash\":\"c43d4c7c8798e16588b33c740af14ea55f3ecddd2586b8cc3336577ba8faa5f8\",\"moduleSequenceNumber\":41040,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/export async function main(ns) {\\r\\n    const target = ns.args[0]\\r\\n    const threads = ns.args[1]\\r\\n    const delay = ns.args[2]\\r\\n  \\r\\n    if (delay && delay > 0) {\\r\\n      await ns.sleep(delay)\\r\\n    }\\r\\n  \\r\\n    ns.print(`Starting operation: weaken on ${target} in ${threads} threads`)\\r\\n    await ns.weaken(target, { threads, stock: true })\\r\\n    ns.exit()\\r\\n  }\\r\\n  \",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"joesguns\",\"_hash\":\"7656e4aac5fc95a4a03444258a0cf4af92d88b1dd44a7486167d2200da1eb442\",\"moduleSequenceNumber\":40987,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":15,\"hackDifficulty\":15,\"minDifficulty\":5,\"moneyAvailable\":2500000,\"moneyMax\":62500000,\"numOpenPortsRequired\":0,\"openPortCount\":1,\"requiredHackingSkill\":10,\"serverGrowth\":20}},\"zer0\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"zer0\",\"httpPortOpen\":false,\"ip\":\"93.5.5.5\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"ZER0 Nightclub\",\"programs\":[],\"ramUsed\":31.5,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omega-net\",18,16589.730537389638,\"3c5d45ca-61ab-4333-a054-bcb5f5490cc6\"],\"dataMap\":{},\"filename\":\"grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":122.81000000000121,\"pid\":908,\"ramUsage\":1.75,\"server\":\"zer0\",\"threads\":18,\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///80166b39-171c-489e-943d-41105d6b5336\",\"moduleSequenceNumber\":41045}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/export async function main(ns) {\\r\\n    const target = ns.args[0]\\r\\n    const threads = ns.args[1]\\r\\n    const delay = ns.args[2]\\r\\n  \\r\\n    if (delay && delay > 0) {\\r\\n      await ns.sleep(delay)\\r\\n    }\\r\\n  \\r\\n    ns.print(`Starting operation: hack on ${target} in ${threads} threads`)\\r\\n    await ns.hack(target, { threads, stock: true })\\r\\n    ns.exit()\\r\\n  }\\r\\n  \",\"filename\":\"hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:file:///378f0e19-d812-47dc-9213-0472ce7d046a\",\"moduleSequenceNumber\":42494}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"zer0\",\"_hash\":\"30d9fdd2f5a8bacc809001f44651e87fc2a5770c889d459ab5aa86fb10c18201\",\"moduleSequenceNumber\":42494,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/export async function main(ns) {\\r\\n    const target = ns.args[0]\\r\\n    const threads = ns.args[1]\\r\\n    const delay = ns.args[2]\\r\\n  \\r\\n    if (delay && delay > 0) {\\r\\n      await ns.sleep(delay)\\r\\n    }\\r\\n  \\r\\n    ns.print(`Starting operation: grow on ${target} in ${threads} threads`)\\r\\n    await ns.grow(target, { threads, stock: true })\\r\\n    ns.exit()\\r\\n  }\\r\\n  \",\"filename\":\"grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///80166b39-171c-489e-943d-41105d6b5336\",\"moduleSequenceNumber\":41045}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"zer0\",\"_hash\":\"c43d4c7c8798e16588b33c740af14ea55f3ecddd2586b8cc3336577ba8faa5f8\",\"moduleSequenceNumber\":41045,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/export async function main(ns) {\\r\\n    const target = ns.args[0]\\r\\n    const threads = ns.args[1]\\r\\n    const delay = ns.args[2]\\r\\n  \\r\\n    if (delay && delay > 0) {\\r\\n      await ns.sleep(delay)\\r\\n    }\\r\\n  \\r\\n    ns.print(`Starting operation: weaken on ${target} in ${threads} threads`)\\r\\n    await ns.weaken(target, { threads, stock: true })\\r\\n    ns.exit()\\r\\n  }\\r\\n  \",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"zer0\",\"_hash\":\"7656e4aac5fc95a4a03444258a0cf4af92d88b1dd44a7486167d2200da1eb442\",\"moduleSequenceNumber\":41011,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"n00dles\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":25,\"hackDifficulty\":25,\"minDifficulty\":8,\"moneyAvailable\":7500000,\"moneyMax\":187500000,\"numOpenPortsRequired\":1,\"openPortCount\":1,\"requiredHackingSkill\":75,\"serverGrowth\":40}},\"nectar-net\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"nectar-net\",\"httpPortOpen\":false,\"ip\":\"51.9.8.2\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Nectar Nightclub Network\",\"programs\":[],\"ramUsed\":15.75,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omega-net\",9,16589.730537389638,\"1e6e09ed-b388-4e08-a539-913b7691983d\"],\"dataMap\":{},\"filename\":\"grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":122.81000000000121,\"pid\":897,\"ramUsage\":1.75,\"server\":\"nectar-net\",\"threads\":9,\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///80166b39-171c-489e-943d-41105d6b5336\",\"moduleSequenceNumber\":41043}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/export async function main(ns) {\\r\\n    const target = ns.args[0]\\r\\n    const threads = ns.args[1]\\r\\n    const delay = ns.args[2]\\r\\n  \\r\\n    if (delay && delay > 0) {\\r\\n      await ns.sleep(delay)\\r\\n    }\\r\\n  \\r\\n    ns.print(`Starting operation: hack on ${target} in ${threads} threads`)\\r\\n    await ns.hack(target, { threads, stock: true })\\r\\n    ns.exit()\\r\\n  }\\r\\n  \",\"filename\":\"hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:file:///378f0e19-d812-47dc-9213-0472ce7d046a\",\"moduleSequenceNumber\":42492}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"nectar-net\",\"_hash\":\"30d9fdd2f5a8bacc809001f44651e87fc2a5770c889d459ab5aa86fb10c18201\",\"moduleSequenceNumber\":42492,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/export async function main(ns) {\\r\\n    const target = ns.args[0]\\r\\n    const threads = ns.args[1]\\r\\n    const delay = ns.args[2]\\r\\n  \\r\\n    if (delay && delay > 0) {\\r\\n      await ns.sleep(delay)\\r\\n    }\\r\\n  \\r\\n    ns.print(`Starting operation: grow on ${target} in ${threads} threads`)\\r\\n    await ns.grow(target, { threads, stock: true })\\r\\n    ns.exit()\\r\\n  }\\r\\n  \",\"filename\":\"grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///80166b39-171c-489e-943d-41105d6b5336\",\"moduleSequenceNumber\":41043}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"nectar-net\",\"_hash\":\"c43d4c7c8798e16588b33c740af14ea55f3ecddd2586b8cc3336577ba8faa5f8\",\"moduleSequenceNumber\":41043,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/export async function main(ns) {\\r\\n    const target = ns.args[0]\\r\\n    const threads = ns.args[1]\\r\\n    const delay = ns.args[2]\\r\\n  \\r\\n    if (delay && delay > 0) {\\r\\n      await ns.sleep(delay)\\r\\n    }\\r\\n  \\r\\n    ns.print(`Starting operation: weaken on ${target} in ${threads} threads`)\\r\\n    await ns.weaken(target, { threads, stock: true })\\r\\n    ns.exit()\\r\\n  }\\r\\n  \",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"nectar-net\",\"_hash\":\"7656e4aac5fc95a4a03444258a0cf4af92d88b1dd44a7486167d2200da1eb442\",\"moduleSequenceNumber\":41017,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"foodnstuff\",\"omega-net\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":20,\"hackDifficulty\":20,\"minDifficulty\":7,\"moneyAvailable\":2750000,\"moneyMax\":68750000,\"numOpenPortsRequired\":0,\"openPortCount\":1,\"requiredHackingSkill\":20,\"serverGrowth\":25}},\"neo-net\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"neo-net\",\"httpPortOpen\":false,\"ip\":\"16.3.3.0\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"the-hidden-world.lit\"],\"organizationName\":\"Neo Nightclub Network\",\"programs\":[],\"ramUsed\":31.5,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omega-net\",18,16589.730537389638,\"6dc5bdf8-44f7-4ca9-ad3a-e99d45c5696c\"],\"dataMap\":{},\"filename\":\"grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":122.81000000000121,\"pid\":911,\"ramUsage\":1.75,\"server\":\"neo-net\",\"threads\":18,\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///80166b39-171c-489e-943d-41105d6b5336\",\"moduleSequenceNumber\":41047}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/export async function main(ns) {\\r\\n    const target = ns.args[0]\\r\\n    const threads = ns.args[1]\\r\\n    const delay = ns.args[2]\\r\\n  \\r\\n    if (delay && delay > 0) {\\r\\n      await ns.sleep(delay)\\r\\n    }\\r\\n  \\r\\n    ns.print(`Starting operation: hack on ${target} in ${threads} threads`)\\r\\n    await ns.hack(target, { threads, stock: true })\\r\\n    ns.exit()\\r\\n  }\\r\\n  \",\"filename\":\"hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:file:///378f0e19-d812-47dc-9213-0472ce7d046a\",\"moduleSequenceNumber\":42496}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"neo-net\",\"_hash\":\"30d9fdd2f5a8bacc809001f44651e87fc2a5770c889d459ab5aa86fb10c18201\",\"moduleSequenceNumber\":42496,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/export async function main(ns) {\\r\\n    const target = ns.args[0]\\r\\n    const threads = ns.args[1]\\r\\n    const delay = ns.args[2]\\r\\n  \\r\\n    if (delay && delay > 0) {\\r\\n      await ns.sleep(delay)\\r\\n    }\\r\\n  \\r\\n    ns.print(`Starting operation: grow on ${target} in ${threads} threads`)\\r\\n    await ns.grow(target, { threads, stock: true })\\r\\n    ns.exit()\\r\\n  }\\r\\n  \",\"filename\":\"grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///80166b39-171c-489e-943d-41105d6b5336\",\"moduleSequenceNumber\":41047}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"neo-net\",\"_hash\":\"c43d4c7c8798e16588b33c740af14ea55f3ecddd2586b8cc3336577ba8faa5f8\",\"moduleSequenceNumber\":41047,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/export async function main(ns) {\\r\\n    const target = ns.args[0]\\r\\n    const threads = ns.args[1]\\r\\n    const delay = ns.args[2]\\r\\n  \\r\\n    if (delay && delay > 0) {\\r\\n      await ns.sleep(delay)\\r\\n    }\\r\\n  \\r\\n    ns.print(`Starting operation: weaken on ${target} in ${threads} threads`)\\r\\n    await ns.weaken(target, { threads, stock: true })\\r\\n    ns.exit()\\r\\n  }\\r\\n  \",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"neo-net\",\"_hash\":\"7656e4aac5fc95a4a03444258a0cf4af92d88b1dd44a7486167d2200da1eb442\",\"moduleSequenceNumber\":41035,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"CSEC\",\"the-hub\",\"crush-fitness\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":25,\"hackDifficulty\":25,\"minDifficulty\":8,\"moneyAvailable\":5000000,\"moneyMax\":125000000,\"numOpenPortsRequired\":1,\"openPortCount\":1,\"requiredHackingSkill\":50,\"serverGrowth\":25}},\"silver-helix\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"silver-helix\",\"httpPortOpen\":true,\"ip\":\"26.1.3.5\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"new-triads.lit\"],\"organizationName\":\"Silver Helix\",\"programs\":[],\"ramUsed\":63,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omega-net\",36,16589.730537389638,\"c08f6c05-c049-421f-846f-50f64caf8d1f\"],\"dataMap\":{},\"filename\":\"grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":122.81000000000121,\"pid\":915,\"ramUsage\":1.75,\"server\":\"silver-helix\",\"threads\":36,\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///80166b39-171c-489e-943d-41105d6b5336\",\"moduleSequenceNumber\":45966}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/export async function main(ns) {\\r\\n    const target = ns.args[0]\\r\\n    const threads = ns.args[1]\\r\\n    const delay = ns.args[2]\\r\\n  \\r\\n    if (delay && delay > 0) {\\r\\n      await ns.sleep(delay)\\r\\n    }\\r\\n  \\r\\n    ns.print(`Starting operation: hack on ${target} in ${threads} threads`)\\r\\n    await ns.hack(target, { threads, stock: true })\\r\\n    ns.exit()\\r\\n  }\\r\\n  \",\"filename\":\"hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:file:///378f0e19-d812-47dc-9213-0472ce7d046a\",\"moduleSequenceNumber\":49148}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"silver-helix\",\"_hash\":\"30d9fdd2f5a8bacc809001f44651e87fc2a5770c889d459ab5aa86fb10c18201\",\"moduleSequenceNumber\":49148,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/export async function main(ns) {\\r\\n    const target = ns.args[0]\\r\\n    const threads = ns.args[1]\\r\\n    const delay = ns.args[2]\\r\\n  \\r\\n    if (delay && delay > 0) {\\r\\n      await ns.sleep(delay)\\r\\n    }\\r\\n  \\r\\n    ns.print(`Starting operation: grow on ${target} in ${threads} threads`)\\r\\n    await ns.grow(target, { threads, stock: true })\\r\\n    ns.exit()\\r\\n  }\\r\\n  \",\"filename\":\"grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///80166b39-171c-489e-943d-41105d6b5336\",\"moduleSequenceNumber\":45966}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"silver-helix\",\"_hash\":\"c43d4c7c8798e16588b33c740af14ea55f3ecddd2586b8cc3336577ba8faa5f8\",\"moduleSequenceNumber\":45966,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/export async function main(ns) {\\r\\n    const target = ns.args[0]\\r\\n    const threads = ns.args[1]\\r\\n    const delay = ns.args[2]\\r\\n  \\r\\n    if (delay && delay > 0) {\\r\\n      await ns.sleep(delay)\\r\\n    }\\r\\n  \\r\\n    ns.print(`Starting operation: weaken on ${target} in ${threads} threads`)\\r\\n    await ns.weaken(target, { threads, stock: true })\\r\\n    ns.exit()\\r\\n  }\\r\\n  \",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"silver-helix\",\"_hash\":\"7656e4aac5fc95a4a03444258a0cf4af92d88b1dd44a7486167d2200da1eb442\",\"moduleSequenceNumber\":45843,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"max-hardware\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":30,\"hackDifficulty\":30,\"minDifficulty\":10,\"moneyAvailable\":45000000,\"moneyMax\":1125000000,\"numOpenPortsRequired\":2,\"openPortCount\":4,\"requiredHackingSkill\":150,\"serverGrowth\":30}},\"hong-fang-tea\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"hong-fang-tea\",\"httpPortOpen\":false,\"ip\":\"92.2.7.4\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"brighter-than-the-sun.lit\"],\"organizationName\":\"HongFang Teahouse\",\"programs\":[],\"ramUsed\":15.75,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omega-net\",9,16589.730537389638,\"ba272989-c19f-4961-8ee6-81b054f70619\"],\"dataMap\":{},\"filename\":\"grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":122.81000000000121,\"pid\":895,\"ramUsage\":1.75,\"server\":\"hong-fang-tea\",\"threads\":9,\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///80166b39-171c-489e-943d-41105d6b5336\",\"moduleSequenceNumber\":41041}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/export async function main(ns) {\\r\\n    const target = ns.args[0]\\r\\n    const threads = ns.args[1]\\r\\n    const delay = ns.args[2]\\r\\n  \\r\\n    if (delay && delay > 0) {\\r\\n      await ns.sleep(delay)\\r\\n    }\\r\\n  \\r\\n    ns.print(`Starting operation: hack on ${target} in ${threads} threads`)\\r\\n    await ns.hack(target, { threads, stock: true })\\r\\n    ns.exit()\\r\\n  }\\r\\n  \",\"filename\":\"hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:file:///378f0e19-d812-47dc-9213-0472ce7d046a\",\"moduleSequenceNumber\":42490}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"hong-fang-tea\",\"_hash\":\"30d9fdd2f5a8bacc809001f44651e87fc2a5770c889d459ab5aa86fb10c18201\",\"moduleSequenceNumber\":42490,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/export async function main(ns) {\\r\\n    const target = ns.args[0]\\r\\n    const threads = ns.args[1]\\r\\n    const delay = ns.args[2]\\r\\n  \\r\\n    if (delay && delay > 0) {\\r\\n      await ns.sleep(delay)\\r\\n    }\\r\\n  \\r\\n    ns.print(`Starting operation: grow on ${target} in ${threads} threads`)\\r\\n    await ns.grow(target, { threads, stock: true })\\r\\n    ns.exit()\\r\\n  }\\r\\n  \",\"filename\":\"grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///80166b39-171c-489e-943d-41105d6b5336\",\"moduleSequenceNumber\":41041}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"hong-fang-tea\",\"_hash\":\"c43d4c7c8798e16588b33c740af14ea55f3ecddd2586b8cc3336577ba8faa5f8\",\"moduleSequenceNumber\":41041,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/export async function main(ns) {\\r\\n    const target = ns.args[0]\\r\\n    const threads = ns.args[1]\\r\\n    const delay = ns.args[2]\\r\\n  \\r\\n    if (delay && delay > 0) {\\r\\n      await ns.sleep(delay)\\r\\n    }\\r\\n  \\r\\n    ns.print(`Starting operation: weaken on ${target} in ${threads} threads`)\\r\\n    await ns.weaken(target, { threads, stock: true })\\r\\n    ns.exit()\\r\\n  }\\r\\n  \",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"hong-fang-tea\",\"_hash\":\"7656e4aac5fc95a4a03444258a0cf4af92d88b1dd44a7486167d2200da1eb442\",\"moduleSequenceNumber\":40993,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":15,\"hackDifficulty\":15,\"minDifficulty\":5,\"moneyAvailable\":3000000,\"moneyMax\":75000000,\"numOpenPortsRequired\":0,\"openPortCount\":1,\"requiredHackingSkill\":30,\"serverGrowth\":20}},\"harakiri-sushi\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"harakiri-sushi\",\"httpPortOpen\":false,\"ip\":\"82.8.0.3\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"HaraKiri Sushi Bar Network\",\"programs\":[],\"ramUsed\":15.75,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omega-net\",9,16589.730537389638,\"0a788597-fe11-4dcd-a28b-d9e3d5dfd23c\"],\"dataMap\":{},\"filename\":\"grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":122.81000000000121,\"pid\":896,\"ramUsage\":1.75,\"server\":\"harakiri-sushi\",\"threads\":9,\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///80166b39-171c-489e-943d-41105d6b5336\",\"moduleSequenceNumber\":41042}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/export async function main(ns) {\\r\\n    const target = ns.args[0]\\r\\n    const threads = ns.args[1]\\r\\n    const delay = ns.args[2]\\r\\n  \\r\\n    if (delay && delay > 0) {\\r\\n      await ns.sleep(delay)\\r\\n    }\\r\\n  \\r\\n    ns.print(`Starting operation: hack on ${target} in ${threads} threads`)\\r\\n    await ns.hack(target, { threads, stock: true })\\r\\n    ns.exit()\\r\\n  }\\r\\n  \",\"filename\":\"hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:file:///378f0e19-d812-47dc-9213-0472ce7d046a\",\"moduleSequenceNumber\":42491}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"harakiri-sushi\",\"_hash\":\"30d9fdd2f5a8bacc809001f44651e87fc2a5770c889d459ab5aa86fb10c18201\",\"moduleSequenceNumber\":42491,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/export async function main(ns) {\\r\\n    const target = ns.args[0]\\r\\n    const threads = ns.args[1]\\r\\n    const delay = ns.args[2]\\r\\n  \\r\\n    if (delay && delay > 0) {\\r\\n      await ns.sleep(delay)\\r\\n    }\\r\\n  \\r\\n    ns.print(`Starting operation: grow on ${target} in ${threads} threads`)\\r\\n    await ns.grow(target, { threads, stock: true })\\r\\n    ns.exit()\\r\\n  }\\r\\n  \",\"filename\":\"grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///80166b39-171c-489e-943d-41105d6b5336\",\"moduleSequenceNumber\":41042}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"harakiri-sushi\",\"_hash\":\"c43d4c7c8798e16588b33c740af14ea55f3ecddd2586b8cc3336577ba8faa5f8\",\"moduleSequenceNumber\":41042,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/export async function main(ns) {\\r\\n    const target = ns.args[0]\\r\\n    const threads = ns.args[1]\\r\\n    const delay = ns.args[2]\\r\\n  \\r\\n    if (delay && delay > 0) {\\r\\n      await ns.sleep(delay)\\r\\n    }\\r\\n  \\r\\n    ns.print(`Starting operation: weaken on ${target} in ${threads} threads`)\\r\\n    await ns.weaken(target, { threads, stock: true })\\r\\n    ns.exit()\\r\\n  }\\r\\n  \",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"harakiri-sushi\",\"_hash\":\"7656e4aac5fc95a4a03444258a0cf4af92d88b1dd44a7486167d2200da1eb442\",\"moduleSequenceNumber\":40999,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":15,\"hackDifficulty\":15,\"minDifficulty\":5,\"moneyAvailable\":4000000,\"moneyMax\":100000000,\"numOpenPortsRequired\":0,\"openPortCount\":1,\"requiredHackingSkill\":40,\"serverGrowth\":40}},\"phantasy\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"phantasy\",\"httpPortOpen\":true,\"ip\":\"23.9.8.2\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Phantasy Club\",\"programs\":[],\"ramUsed\":31.5,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omega-net\",18,16589.730537389638,\"4d8f98c0-45de-4c1a-893c-830db2618fb9\"],\"dataMap\":{},\"filename\":\"grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":122.81000000000121,\"pid\":912,\"ramUsage\":1.75,\"server\":\"phantasy\",\"threads\":18,\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///80166b39-171c-489e-943d-41105d6b5336\",\"moduleSequenceNumber\":45963}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/export async function main(ns) {\\r\\n    const target = ns.args[0]\\r\\n    const threads = ns.args[1]\\r\\n    const delay = ns.args[2]\\r\\n  \\r\\n    if (delay && delay > 0) {\\r\\n      await ns.sleep(delay)\\r\\n    }\\r\\n  \\r\\n    ns.print(`Starting operation: hack on ${target} in ${threads} threads`)\\r\\n    await ns.hack(target, { threads, stock: true })\\r\\n    ns.exit()\\r\\n  }\\r\\n  \",\"filename\":\"hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:file:///378f0e19-d812-47dc-9213-0472ce7d046a\",\"moduleSequenceNumber\":49145}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"phantasy\",\"_hash\":\"30d9fdd2f5a8bacc809001f44651e87fc2a5770c889d459ab5aa86fb10c18201\",\"moduleSequenceNumber\":49145,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/export async function main(ns) {\\r\\n    const target = ns.args[0]\\r\\n    const threads = ns.args[1]\\r\\n    const delay = ns.args[2]\\r\\n  \\r\\n    if (delay && delay > 0) {\\r\\n      await ns.sleep(delay)\\r\\n    }\\r\\n  \\r\\n    ns.print(`Starting operation: grow on ${target} in ${threads} threads`)\\r\\n    await ns.grow(target, { threads, stock: true })\\r\\n    ns.exit()\\r\\n  }\\r\\n  \",\"filename\":\"grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///80166b39-171c-489e-943d-41105d6b5336\",\"moduleSequenceNumber\":45963}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"phantasy\",\"_hash\":\"c43d4c7c8798e16588b33c740af14ea55f3ecddd2586b8cc3336577ba8faa5f8\",\"moduleSequenceNumber\":45963,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/export async function main(ns) {\\r\\n    const target = ns.args[0]\\r\\n    const threads = ns.args[1]\\r\\n    const delay = ns.args[2]\\r\\n  \\r\\n    if (delay && delay > 0) {\\r\\n      await ns.sleep(delay)\\r\\n    }\\r\\n  \\r\\n    ns.print(`Starting operation: weaken on ${target} in ${threads} threads`)\\r\\n    await ns.weaken(target, { threads, stock: true })\\r\\n    ns.exit()\\r\\n  }\\r\\n  \",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"phantasy\",\"_hash\":\"7656e4aac5fc95a4a03444258a0cf4af92d88b1dd44a7486167d2200da1eb442\",\"moduleSequenceNumber\":45849,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"max-hardware\",\"johnson-ortho\",\"avmnite-02h\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":20,\"hackDifficulty\":20,\"minDifficulty\":7,\"moneyAvailable\":24000000,\"moneyMax\":600000000,\"numOpenPortsRequired\":2,\"openPortCount\":4,\"requiredHackingSkill\":100,\"serverGrowth\":35}},\"max-hardware\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"max-hardware\",\"httpPortOpen\":false,\"ip\":\"85.8.0.3\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Max Hardware Store\",\"programs\":[],\"ramUsed\":31.5,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omega-net\",18,16589.730537389638,\"c663ff4a-3992-4441-b4f0-34b52270a729\"],\"dataMap\":{},\"filename\":\"grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":122.81000000000121,\"pid\":909,\"ramUsage\":1.75,\"server\":\"max-hardware\",\"threads\":18,\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///80166b39-171c-489e-943d-41105d6b5336\",\"moduleSequenceNumber\":41046}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/export async function main(ns) {\\r\\n    const target = ns.args[0]\\r\\n    const threads = ns.args[1]\\r\\n    const delay = ns.args[2]\\r\\n  \\r\\n    if (delay && delay > 0) {\\r\\n      await ns.sleep(delay)\\r\\n    }\\r\\n  \\r\\n    ns.print(`Starting operation: hack on ${target} in ${threads} threads`)\\r\\n    await ns.hack(target, { threads, stock: true })\\r\\n    ns.exit()\\r\\n  }\\r\\n  \",\"filename\":\"hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:file:///378f0e19-d812-47dc-9213-0472ce7d046a\",\"moduleSequenceNumber\":42495}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"max-hardware\",\"_hash\":\"30d9fdd2f5a8bacc809001f44651e87fc2a5770c889d459ab5aa86fb10c18201\",\"moduleSequenceNumber\":42495,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/export async function main(ns) {\\r\\n    const target = ns.args[0]\\r\\n    const threads = ns.args[1]\\r\\n    const delay = ns.args[2]\\r\\n  \\r\\n    if (delay && delay > 0) {\\r\\n      await ns.sleep(delay)\\r\\n    }\\r\\n  \\r\\n    ns.print(`Starting operation: grow on ${target} in ${threads} threads`)\\r\\n    await ns.grow(target, { threads, stock: true })\\r\\n    ns.exit()\\r\\n  }\\r\\n  \",\"filename\":\"grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///80166b39-171c-489e-943d-41105d6b5336\",\"moduleSequenceNumber\":41046}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"max-hardware\",\"_hash\":\"c43d4c7c8798e16588b33c740af14ea55f3ecddd2586b8cc3336577ba8faa5f8\",\"moduleSequenceNumber\":41046,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/export async function main(ns) {\\r\\n    const target = ns.args[0]\\r\\n    const threads = ns.args[1]\\r\\n    const delay = ns.args[2]\\r\\n  \\r\\n    if (delay && delay > 0) {\\r\\n      await ns.sleep(delay)\\r\\n    }\\r\\n  \\r\\n    ns.print(`Starting operation: weaken on ${target} in ${threads} threads`)\\r\\n    await ns.weaken(target, { threads, stock: true })\\r\\n    ns.exit()\\r\\n  }\\r\\n  \",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"max-hardware\",\"_hash\":\"7656e4aac5fc95a4a03444258a0cf4af92d88b1dd44a7486167d2200da1eb442\",\"moduleSequenceNumber\":41029,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"sigma-cosmetics\",\"silver-helix\",\"phantasy\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":15,\"hackDifficulty\":15,\"minDifficulty\":5,\"moneyAvailable\":10000000,\"moneyMax\":250000000,\"numOpenPortsRequired\":1,\"openPortCount\":1,\"requiredHackingSkill\":80,\"serverGrowth\":30}},\"omega-net\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-613307-Netburners.cct\",\"type\":\"Find All Valid Math Expressions\",\"data\":[\"8750\",68],\"reward\":{\"name\":\"Netburners\",\"type\":0}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"omega-net\",\"httpPortOpen\":true,\"ip\":\"56.7.6.2\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"the-new-god.lit\"],\"organizationName\":\"Omega Software\",\"programs\":[],\"ramUsed\":31.5,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omega-net\",18,16589.730537389638,\"c3730c52-f599-4779-b29b-b16f37cb1661\"],\"dataMap\":{},\"filename\":\"grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":122.81000000000121,\"pid\":910,\"ramUsage\":1.75,\"server\":\"omega-net\",\"threads\":18,\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///80166b39-171c-489e-943d-41105d6b5336\",\"moduleSequenceNumber\":45962}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/export async function main(ns) {\\r\\n    const target = ns.args[0]\\r\\n    const threads = ns.args[1]\\r\\n    const delay = ns.args[2]\\r\\n  \\r\\n    if (delay && delay > 0) {\\r\\n      await ns.sleep(delay)\\r\\n    }\\r\\n  \\r\\n    ns.print(`Starting operation: hack on ${target} in ${threads} threads`)\\r\\n    await ns.hack(target, { threads, stock: true })\\r\\n    ns.exit()\\r\\n  }\\r\\n  \",\"filename\":\"hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:file:///378f0e19-d812-47dc-9213-0472ce7d046a\",\"moduleSequenceNumber\":49144}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"omega-net\",\"_hash\":\"30d9fdd2f5a8bacc809001f44651e87fc2a5770c889d459ab5aa86fb10c18201\",\"moduleSequenceNumber\":49144,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/export async function main(ns) {\\r\\n    const target = ns.args[0]\\r\\n    const threads = ns.args[1]\\r\\n    const delay = ns.args[2]\\r\\n  \\r\\n    if (delay && delay > 0) {\\r\\n      await ns.sleep(delay)\\r\\n    }\\r\\n  \\r\\n    ns.print(`Starting operation: grow on ${target} in ${threads} threads`)\\r\\n    await ns.grow(target, { threads, stock: true })\\r\\n    ns.exit()\\r\\n  }\\r\\n  \",\"filename\":\"grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///80166b39-171c-489e-943d-41105d6b5336\",\"moduleSequenceNumber\":45962}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"omega-net\",\"_hash\":\"c43d4c7c8798e16588b33c740af14ea55f3ecddd2586b8cc3336577ba8faa5f8\",\"moduleSequenceNumber\":45962,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/export async function main(ns) {\\r\\n    const target = ns.args[0]\\r\\n    const threads = ns.args[1]\\r\\n    const delay = ns.args[2]\\r\\n  \\r\\n    if (delay && delay > 0) {\\r\\n      await ns.sleep(delay)\\r\\n    }\\r\\n  \\r\\n    ns.print(`Starting operation: weaken on ${target} in ${threads} threads`)\\r\\n    await ns.weaken(target, { threads, stock: true })\\r\\n    ns.exit()\\r\\n  }\\r\\n  \",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"omega-net\",\"_hash\":\"7656e4aac5fc95a4a03444258a0cf4af92d88b1dd44a7486167d2200da1eb442\",\"moduleSequenceNumber\":45837,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"nectar-net\",\"comptek\",\"netlink\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":33,\"hackDifficulty\":11,\"minDifficulty\":11,\"moneyAvailable\":230281153.8024203,\"moneyMax\":1622526075,\"numOpenPortsRequired\":2,\"openPortCount\":4,\"requiredHackingSkill\":201,\"serverGrowth\":38}},\"crush-fitness\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"crush-fitness\",\"httpPortOpen\":false,\"ip\":\"5.4.3.4\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Crush Fitness\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"neo-net\",\"rothman-uni\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":38,\"hackDifficulty\":38,\"minDifficulty\":13,\"moneyAvailable\":40428400,\"moneyMax\":1010710000,\"numOpenPortsRequired\":2,\"openPortCount\":0,\"requiredHackingSkill\":231,\"serverGrowth\":33}},\"iron-gym\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"iron-gym\",\"httpPortOpen\":false,\"ip\":\"49.3.8.5\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Iron Gym Network\",\"programs\":[],\"ramUsed\":31.5,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omega-net\",18,16589.730537389638,\"964b5c08-e7fc-48e9-ac18-4a490006ec05\"],\"dataMap\":{},\"filename\":\"grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":122.81000000000121,\"pid\":907,\"ramUsage\":1.75,\"server\":\"iron-gym\",\"threads\":18,\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///80166b39-171c-489e-943d-41105d6b5336\",\"moduleSequenceNumber\":41044}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/export async function main(ns) {\\r\\n    const target = ns.args[0]\\r\\n    const threads = ns.args[1]\\r\\n    const delay = ns.args[2]\\r\\n  \\r\\n    if (delay && delay > 0) {\\r\\n      await ns.sleep(delay)\\r\\n    }\\r\\n  \\r\\n    ns.print(`Starting operation: hack on ${target} in ${threads} threads`)\\r\\n    await ns.hack(target, { threads, stock: true })\\r\\n    ns.exit()\\r\\n  }\\r\\n  \",\"filename\":\"hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:file:///378f0e19-d812-47dc-9213-0472ce7d046a\",\"moduleSequenceNumber\":42493}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"iron-gym\",\"_hash\":\"30d9fdd2f5a8bacc809001f44651e87fc2a5770c889d459ab5aa86fb10c18201\",\"moduleSequenceNumber\":42493,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/export async function main(ns) {\\r\\n    const target = ns.args[0]\\r\\n    const threads = ns.args[1]\\r\\n    const delay = ns.args[2]\\r\\n  \\r\\n    if (delay && delay > 0) {\\r\\n      await ns.sleep(delay)\\r\\n    }\\r\\n  \\r\\n    ns.print(`Starting operation: grow on ${target} in ${threads} threads`)\\r\\n    await ns.grow(target, { threads, stock: true })\\r\\n    ns.exit()\\r\\n  }\\r\\n  \",\"filename\":\"grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///80166b39-171c-489e-943d-41105d6b5336\",\"moduleSequenceNumber\":41044}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"iron-gym\",\"_hash\":\"c43d4c7c8798e16588b33c740af14ea55f3ecddd2586b8cc3336577ba8faa5f8\",\"moduleSequenceNumber\":41044,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/export async function main(ns) {\\r\\n    const target = ns.args[0]\\r\\n    const threads = ns.args[1]\\r\\n    const delay = ns.args[2]\\r\\n  \\r\\n    if (delay && delay > 0) {\\r\\n      await ns.sleep(delay)\\r\\n    }\\r\\n  \\r\\n    ns.print(`Starting operation: weaken on ${target} in ${threads} threads`)\\r\\n    await ns.weaken(target, { threads, stock: true })\\r\\n    ns.exit()\\r\\n  }\\r\\n  \",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"iron-gym\",\"_hash\":\"7656e4aac5fc95a4a03444258a0cf4af92d88b1dd44a7486167d2200da1eb442\",\"moduleSequenceNumber\":41005,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":30,\"hackDifficulty\":10,\"minDifficulty\":10,\"moneyAvailable\":5372914.218410489,\"moneyMax\":500000000,\"numOpenPortsRequired\":1,\"openPortCount\":1,\"requiredHackingSkill\":100,\"serverGrowth\":20}},\"millenium-fitness\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"millenium-fitness\",\"httpPortOpen\":true,\"ip\":\"56.4.8.5\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Millenium Fitness Network\",\"programs\":[],\"ramUsed\":15.75,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omega-net\",9,16589.730537389638,\"f1cb0e13-c0a1-4498-b436-2f973e6ea9b2\"],\"dataMap\":{},\"filename\":\"grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":122.81000000000121,\"pid\":904,\"ramUsage\":1.75,\"server\":\"millenium-fitness\",\"threads\":9,\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///80166b39-171c-489e-943d-41105d6b5336\",\"moduleSequenceNumber\":45959}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/export async function main(ns) {\\r\\n    const target = ns.args[0]\\r\\n    const threads = ns.args[1]\\r\\n    const delay = ns.args[2]\\r\\n  \\r\\n    if (delay && delay > 0) {\\r\\n      await ns.sleep(delay)\\r\\n    }\\r\\n  \\r\\n    ns.print(`Starting operation: hack on ${target} in ${threads} threads`)\\r\\n    await ns.hack(target, { threads, stock: true })\\r\\n    ns.exit()\\r\\n  }\\r\\n  \",\"filename\":\"hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:file:///378f0e19-d812-47dc-9213-0472ce7d046a\",\"moduleSequenceNumber\":49141}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"millenium-fitness\",\"_hash\":\"30d9fdd2f5a8bacc809001f44651e87fc2a5770c889d459ab5aa86fb10c18201\",\"moduleSequenceNumber\":49141,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/export async function main(ns) {\\r\\n    const target = ns.args[0]\\r\\n    const threads = ns.args[1]\\r\\n    const delay = ns.args[2]\\r\\n  \\r\\n    if (delay && delay > 0) {\\r\\n      await ns.sleep(delay)\\r\\n    }\\r\\n  \\r\\n    ns.print(`Starting operation: grow on ${target} in ${threads} threads`)\\r\\n    await ns.grow(target, { threads, stock: true })\\r\\n    ns.exit()\\r\\n  }\\r\\n  \",\"filename\":\"grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///80166b39-171c-489e-943d-41105d6b5336\",\"moduleSequenceNumber\":45959}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"millenium-fitness\",\"_hash\":\"c43d4c7c8798e16588b33c740af14ea55f3ecddd2586b8cc3336577ba8faa5f8\",\"moduleSequenceNumber\":45959,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/export async function main(ns) {\\r\\n    const target = ns.args[0]\\r\\n    const threads = ns.args[1]\\r\\n    const delay = ns.args[2]\\r\\n  \\r\\n    if (delay && delay > 0) {\\r\\n      await ns.sleep(delay)\\r\\n    }\\r\\n  \\r\\n    ns.print(`Starting operation: weaken on ${target} in ${threads} threads`)\\r\\n    await ns.weaken(target, { threads, stock: true })\\r\\n    ns.exit()\\r\\n  }\\r\\n  \",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"millenium-fitness\",\"_hash\":\"7656e4aac5fc95a4a03444258a0cf4af92d88b1dd44a7486167d2200da1eb442\",\"moduleSequenceNumber\":45909,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"summit-uni\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":47,\"hackDifficulty\":47,\"minDifficulty\":16,\"moneyAvailable\":250000000,\"moneyMax\":6250000000,\"numOpenPortsRequired\":3,\"openPortCount\":4,\"requiredHackingSkill\":508,\"serverGrowth\":38}},\"powerhouse-fitness\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"powerhouse-fitness\",\"httpPortOpen\":false,\"ip\":\"64.5.7.7\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Powerhouse Fitness\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"kuai-gong\",\"ecorp\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":58,\"hackDifficulty\":58,\"minDifficulty\":19,\"moneyAvailable\":900000000,\"moneyMax\":22500000000,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1050,\"serverGrowth\":60}},\"snap-fitness\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"snap-fitness\",\"httpPortOpen\":false,\"ip\":\"3.9.0.0\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Snap Fitness\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"lexo-corp\",\"unitalife\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":49,\"hackDifficulty\":49,\"minDifficulty\":16,\"moneyAvailable\":450000000,\"moneyMax\":11250000000,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":755,\"serverGrowth\":44}},\"run4theh111z\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"run4theh111z\",\"httpPortOpen\":true,\"ip\":\"5.6.4.8\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"simulated-reality.lit\",\"the-new-god.lit\"],\"organizationName\":\"The Runners\",\"programs\":[],\"ramUsed\":63,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omega-net\",36,16589.730537389638,\"001af6f3-d43c-4b88-92dc-e551b4463554\"],\"dataMap\":{},\"filename\":\"grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":122.81000000000121,\"pid\":918,\"ramUsage\":1.75,\"server\":\"run4theh111z\",\"threads\":36,\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///80166b39-171c-489e-943d-41105d6b5336\",\"moduleSequenceNumber\":45969}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/export async function main(ns) {\\r\\n    const target = ns.args[0]\\r\\n    const threads = ns.args[1]\\r\\n    const delay = ns.args[2]\\r\\n  \\r\\n    if (delay && delay > 0) {\\r\\n      await ns.sleep(delay)\\r\\n    }\\r\\n  \\r\\n    ns.print(`Starting operation: hack on ${target} in ${threads} threads`)\\r\\n    await ns.hack(target, { threads, stock: true })\\r\\n    ns.exit()\\r\\n  }\\r\\n  \",\"filename\":\"hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:file:///378f0e19-d812-47dc-9213-0472ce7d046a\",\"moduleSequenceNumber\":49151}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"run4theh111z\",\"_hash\":\"30d9fdd2f5a8bacc809001f44651e87fc2a5770c889d459ab5aa86fb10c18201\",\"moduleSequenceNumber\":49151,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/export async function main(ns) {\\r\\n    const target = ns.args[0]\\r\\n    const threads = ns.args[1]\\r\\n    const delay = ns.args[2]\\r\\n  \\r\\n    if (delay && delay > 0) {\\r\\n      await ns.sleep(delay)\\r\\n    }\\r\\n  \\r\\n    ns.print(`Starting operation: grow on ${target} in ${threads} threads`)\\r\\n    await ns.grow(target, { threads, stock: true })\\r\\n    ns.exit()\\r\\n  }\\r\\n  \",\"filename\":\"grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///80166b39-171c-489e-943d-41105d6b5336\",\"moduleSequenceNumber\":45969}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"run4theh111z\",\"_hash\":\"c43d4c7c8798e16588b33c740af14ea55f3ecddd2586b8cc3336577ba8faa5f8\",\"moduleSequenceNumber\":45969,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/export async function main(ns) {\\r\\n    const target = ns.args[0]\\r\\n    const threads = ns.args[1]\\r\\n    const delay = ns.args[2]\\r\\n  \\r\\n    if (delay && delay > 0) {\\r\\n      await ns.sleep(delay)\\r\\n    }\\r\\n  \\r\\n    ns.print(`Starting operation: weaken on ${target} in ${threads} threads`)\\r\\n    await ns.weaken(target, { threads, stock: true })\\r\\n    ns.exit()\\r\\n  }\\r\\n  \",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"run4theh111z\",\"_hash\":\"7656e4aac5fc95a4a03444258a0cf4af92d88b1dd44a7486167d2200da1eb442\",\"moduleSequenceNumber\":45945,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"nova-med\",\"fulcrumtech\",\"helios\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":0,\"hackDifficulty\":0,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":4,\"openPortCount\":4,\"requiredHackingSkill\":512,\"serverGrowth\":0}},\"I.I.I.I\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"I.I.I.I\",\"httpPortOpen\":true,\"ip\":\"82.1.5.9\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"democracy-is-dead.lit\"],\"organizationName\":\"I.I.I.I\",\"programs\":[],\"ramUsed\":15.75,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omega-net\",9,16589.730537389638,\"406e7235-8c8e-458b-a409-bb93ab275d20\"],\"dataMap\":{},\"filename\":\"grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":122.81000000000121,\"pid\":900,\"ramUsage\":1.75,\"server\":\"I.I.I.I\",\"threads\":9,\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///80166b39-171c-489e-943d-41105d6b5336\",\"moduleSequenceNumber\":45955}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/export async function main(ns) {\\r\\n    const target = ns.args[0]\\r\\n    const threads = ns.args[1]\\r\\n    const delay = ns.args[2]\\r\\n  \\r\\n    if (delay && delay > 0) {\\r\\n      await ns.sleep(delay)\\r\\n    }\\r\\n  \\r\\n    ns.print(`Starting operation: hack on ${target} in ${threads} threads`)\\r\\n    await ns.hack(target, { threads, stock: true })\\r\\n    ns.exit()\\r\\n  }\\r\\n  \",\"filename\":\"hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:file:///378f0e19-d812-47dc-9213-0472ce7d046a\",\"moduleSequenceNumber\":49137}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"I.I.I.I\",\"_hash\":\"30d9fdd2f5a8bacc809001f44651e87fc2a5770c889d459ab5aa86fb10c18201\",\"moduleSequenceNumber\":49137,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/export async function main(ns) {\\r\\n    const target = ns.args[0]\\r\\n    const threads = ns.args[1]\\r\\n    const delay = ns.args[2]\\r\\n  \\r\\n    if (delay && delay > 0) {\\r\\n      await ns.sleep(delay)\\r\\n    }\\r\\n  \\r\\n    ns.print(`Starting operation: grow on ${target} in ${threads} threads`)\\r\\n    await ns.grow(target, { threads, stock: true })\\r\\n    ns.exit()\\r\\n  }\\r\\n  \",\"filename\":\"grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///80166b39-171c-489e-943d-41105d6b5336\",\"moduleSequenceNumber\":45955}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"I.I.I.I\",\"_hash\":\"c43d4c7c8798e16588b33c740af14ea55f3ecddd2586b8cc3336577ba8faa5f8\",\"moduleSequenceNumber\":45955,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/export async function main(ns) {\\r\\n    const target = ns.args[0]\\r\\n    const threads = ns.args[1]\\r\\n    const delay = ns.args[2]\\r\\n  \\r\\n    if (delay && delay > 0) {\\r\\n      await ns.sleep(delay)\\r\\n    }\\r\\n  \\r\\n    ns.print(`Starting operation: weaken on ${target} in ${threads} threads`)\\r\\n    await ns.weaken(target, { threads, stock: true })\\r\\n    ns.exit()\\r\\n  }\\r\\n  \",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"I.I.I.I\",\"_hash\":\"7656e4aac5fc95a4a03444258a0cf4af92d88b1dd44a7486167d2200da1eb442\",\"moduleSequenceNumber\":45873,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"comptek\",\"rho-construction\",\"aevum-police\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":0,\"hackDifficulty\":0,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":3,\"openPortCount\":4,\"requiredHackingSkill\":359,\"serverGrowth\":0}},\"avmnite-02h\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"avmnite-02h\",\"httpPortOpen\":false,\"ip\":\"88.7.0.8\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"democracy-is-dead.lit\"],\"organizationName\":\"NiteSec\",\"programs\":[],\"ramUsed\":15.75,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omega-net\",9,16589.730537389638,\"a7e97dbe-9200-4e68-aefa-d8319b6734f4\"],\"dataMap\":{},\"filename\":\"grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":122.81000000000121,\"pid\":899,\"ramUsage\":1.75,\"server\":\"avmnite-02h\",\"threads\":9,\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///80166b39-171c-489e-943d-41105d6b5336\",\"moduleSequenceNumber\":45954}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/export async function main(ns) {\\r\\n    const target = ns.args[0]\\r\\n    const threads = ns.args[1]\\r\\n    const delay = ns.args[2]\\r\\n  \\r\\n    if (delay && delay > 0) {\\r\\n      await ns.sleep(delay)\\r\\n    }\\r\\n  \\r\\n    ns.print(`Starting operation: hack on ${target} in ${threads} threads`)\\r\\n    await ns.hack(target, { threads, stock: true })\\r\\n    ns.exit()\\r\\n  }\\r\\n  \",\"filename\":\"hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:file:///378f0e19-d812-47dc-9213-0472ce7d046a\",\"moduleSequenceNumber\":49136}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"avmnite-02h\",\"_hash\":\"30d9fdd2f5a8bacc809001f44651e87fc2a5770c889d459ab5aa86fb10c18201\",\"moduleSequenceNumber\":49136,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/export async function main(ns) {\\r\\n    const target = ns.args[0]\\r\\n    const threads = ns.args[1]\\r\\n    const delay = ns.args[2]\\r\\n  \\r\\n    if (delay && delay > 0) {\\r\\n      await ns.sleep(delay)\\r\\n    }\\r\\n  \\r\\n    ns.print(`Starting operation: grow on ${target} in ${threads} threads`)\\r\\n    await ns.grow(target, { threads, stock: true })\\r\\n    ns.exit()\\r\\n  }\\r\\n  \",\"filename\":\"grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///80166b39-171c-489e-943d-41105d6b5336\",\"moduleSequenceNumber\":45954}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"avmnite-02h\",\"_hash\":\"c43d4c7c8798e16588b33c740af14ea55f3ecddd2586b8cc3336577ba8faa5f8\",\"moduleSequenceNumber\":45954,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/export async function main(ns) {\\r\\n    const target = ns.args[0]\\r\\n    const threads = ns.args[1]\\r\\n    const delay = ns.args[2]\\r\\n  \\r\\n    if (delay && delay > 0) {\\r\\n      await ns.sleep(delay)\\r\\n    }\\r\\n  \\r\\n    ns.print(`Starting operation: weaken on ${target} in ${threads} threads`)\\r\\n    await ns.weaken(target, { threads, stock: true })\\r\\n    ns.exit()\\r\\n  }\\r\\n  \",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"avmnite-02h\",\"_hash\":\"7656e4aac5fc95a4a03444258a0cf4af92d88b1dd44a7486167d2200da1eb442\",\"moduleSequenceNumber\":45867,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"phantasy\",\"zb-institute\",\"catalyst\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":0,\"hackDifficulty\":0,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":2,\"openPortCount\":2,\"requiredHackingSkill\":209,\"serverGrowth\":0}},\".\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\".\",\"httpPortOpen\":true,\"ip\":\"94.4.5.3\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\".\",\"programs\":[],\"ramUsed\":15.75,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omega-net\",9,16589.730537389638,\"bafeb848-0cb5-48d6-bb4c-c8b2c8f7aacc\"],\"dataMap\":{},\"filename\":\"grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":122.81000000000121,\"pid\":906,\"ramUsage\":1.75,\"server\":\".\",\"threads\":9,\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///80166b39-171c-489e-943d-41105d6b5336\",\"moduleSequenceNumber\":45961}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/export async function main(ns) {\\r\\n    const target = ns.args[0]\\r\\n    const threads = ns.args[1]\\r\\n    const delay = ns.args[2]\\r\\n  \\r\\n    if (delay && delay > 0) {\\r\\n      await ns.sleep(delay)\\r\\n    }\\r\\n  \\r\\n    ns.print(`Starting operation: hack on ${target} in ${threads} threads`)\\r\\n    await ns.hack(target, { threads, stock: true })\\r\\n    ns.exit()\\r\\n  }\\r\\n  \",\"filename\":\"hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:file:///378f0e19-d812-47dc-9213-0472ce7d046a\",\"moduleSequenceNumber\":49143}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\".\",\"_hash\":\"30d9fdd2f5a8bacc809001f44651e87fc2a5770c889d459ab5aa86fb10c18201\",\"moduleSequenceNumber\":49143,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/export async function main(ns) {\\r\\n    const target = ns.args[0]\\r\\n    const threads = ns.args[1]\\r\\n    const delay = ns.args[2]\\r\\n  \\r\\n    if (delay && delay > 0) {\\r\\n      await ns.sleep(delay)\\r\\n    }\\r\\n  \\r\\n    ns.print(`Starting operation: grow on ${target} in ${threads} threads`)\\r\\n    await ns.grow(target, { threads, stock: true })\\r\\n    ns.exit()\\r\\n  }\\r\\n  \",\"filename\":\"grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///80166b39-171c-489e-943d-41105d6b5336\",\"moduleSequenceNumber\":45961}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\".\",\"_hash\":\"c43d4c7c8798e16588b33c740af14ea55f3ecddd2586b8cc3336577ba8faa5f8\",\"moduleSequenceNumber\":45961,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/export async function main(ns) {\\r\\n    const target = ns.args[0]\\r\\n    const threads = ns.args[1]\\r\\n    const delay = ns.args[2]\\r\\n  \\r\\n    if (delay && delay > 0) {\\r\\n      await ns.sleep(delay)\\r\\n    }\\r\\n  \\r\\n    ns.print(`Starting operation: weaken on ${target} in ${threads} threads`)\\r\\n    await ns.weaken(target, { threads, stock: true })\\r\\n    ns.exit()\\r\\n  }\\r\\n  \",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\".\",\"_hash\":\"7656e4aac5fc95a4a03444258a0cf4af92d88b1dd44a7486167d2200da1eb442\",\"moduleSequenceNumber\":45951,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"helios\",\"nwo\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":0,\"hackDifficulty\":0,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":4,\"openPortCount\":4,\"requiredHackingSkill\":526,\"serverGrowth\":0}},\"CSEC\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"CSEC\",\"httpPortOpen\":false,\"ip\":\"90.6.3.3\",\"isConnectedTo\":false,\"maxRam\":8,\"messages\":[\"democracy-is-dead.lit\"],\"organizationName\":\"CyberSec\",\"programs\":[],\"ramUsed\":7,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omega-net\",4,16589.730537389638,\"51c92a0a-bfa4-41c7-8afe-4f4bb0ba1637\"],\"dataMap\":{},\"filename\":\"grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":122.81000000000121,\"pid\":890,\"ramUsage\":1.75,\"server\":\"CSEC\",\"threads\":4,\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///80166b39-171c-489e-943d-41105d6b5336\",\"moduleSequenceNumber\":41037}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/export async function main(ns) {\\r\\n    const target = ns.args[0]\\r\\n    const threads = ns.args[1]\\r\\n    const delay = ns.args[2]\\r\\n  \\r\\n    if (delay && delay > 0) {\\r\\n      await ns.sleep(delay)\\r\\n    }\\r\\n  \\r\\n    ns.print(`Starting operation: hack on ${target} in ${threads} threads`)\\r\\n    await ns.hack(target, { threads, stock: true })\\r\\n    ns.exit()\\r\\n  }\\r\\n  \",\"filename\":\"hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:file:///378f0e19-d812-47dc-9213-0472ce7d046a\",\"moduleSequenceNumber\":42486}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"CSEC\",\"_hash\":\"30d9fdd2f5a8bacc809001f44651e87fc2a5770c889d459ab5aa86fb10c18201\",\"moduleSequenceNumber\":42486,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/export async function main(ns) {\\r\\n    const target = ns.args[0]\\r\\n    const threads = ns.args[1]\\r\\n    const delay = ns.args[2]\\r\\n  \\r\\n    if (delay && delay > 0) {\\r\\n      await ns.sleep(delay)\\r\\n    }\\r\\n  \\r\\n    ns.print(`Starting operation: grow on ${target} in ${threads} threads`)\\r\\n    await ns.grow(target, { threads, stock: true })\\r\\n    ns.exit()\\r\\n  }\\r\\n  \",\"filename\":\"grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///80166b39-171c-489e-943d-41105d6b5336\",\"moduleSequenceNumber\":41037}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"CSEC\",\"_hash\":\"c43d4c7c8798e16588b33c740af14ea55f3ecddd2586b8cc3336577ba8faa5f8\",\"moduleSequenceNumber\":41037,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/export async function main(ns) {\\r\\n    const target = ns.args[0]\\r\\n    const threads = ns.args[1]\\r\\n    const delay = ns.args[2]\\r\\n  \\r\\n    if (delay && delay > 0) {\\r\\n      await ns.sleep(delay)\\r\\n    }\\r\\n  \\r\\n    ns.print(`Starting operation: weaken on ${target} in ${threads} threads`)\\r\\n    await ns.weaken(target, { threads, stock: true })\\r\\n    ns.exit()\\r\\n  }\\r\\n  \",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"CSEC\",\"_hash\":\"7656e4aac5fc95a4a03444258a0cf4af92d88b1dd44a7486167d2200da1eb442\",\"moduleSequenceNumber\":41023,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"foodnstuff\",\"neo-net\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":0,\"hackDifficulty\":0,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":1,\"openPortCount\":1,\"requiredHackingSkill\":55,\"serverGrowth\":0}},\"The-Cave\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"The-Cave\",\"httpPortOpen\":false,\"ip\":\"49.9.0.6\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"alpha-omega.lit\"],\"organizationName\":\"Helios\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"clarkinc\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":0,\"hackDifficulty\":0,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":925,\"serverGrowth\":0}},\"w0r1d_d43m0n\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"w0r1d_d43m0n\",\"httpPortOpen\":false,\"ip\":\"18.4.1.9\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"w0r1d_d43m0n\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":0,\"hackDifficulty\":0,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":3000,\"serverGrowth\":0}},\"darkweb\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"darkweb\",\"httpPortOpen\":false,\"ip\":\"47.7.9.5\",\"isConnectedTo\":false,\"maxRam\":1,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-1024-ed40466b-733c-4479-97d1-abeef13f8803\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-1024-ed40466b-733c-4479-97d1-abeef13f8803\",\"httpPortOpen\":false,\"ip\":\"36.9.9.1\",\"isConnectedTo\":false,\"maxRam\":1024,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":1023.75,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omega-net\",585,16589.730537389638,\"ea989502-8add-4dad-94e3-5de9a7c2a41a\"],\"dataMap\":{},\"filename\":\"grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":122.81000000000121,\"pid\":921,\"ramUsage\":1.75,\"server\":\"pserv-1024-ed40466b-733c-4479-97d1-abeef13f8803\",\"threads\":585,\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///80166b39-171c-489e-943d-41105d6b5336\",\"moduleSequenceNumber\":50324}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/export async function main(ns) {\\r\\n    const target = ns.args[0]\\r\\n    const threads = ns.args[1]\\r\\n    const delay = ns.args[2]\\r\\n  \\r\\n    if (delay && delay > 0) {\\r\\n      await ns.sleep(delay)\\r\\n    }\\r\\n  \\r\\n    ns.print(`Starting operation: hack on ${target} in ${threads} threads`)\\r\\n    await ns.hack(target, { threads, stock: true })\\r\\n    ns.exit()\\r\\n  }\\r\\n  \",\"filename\":\"hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:file:///378f0e19-d812-47dc-9213-0472ce7d046a\",\"moduleSequenceNumber\":52570}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"pserv-1024-ed40466b-733c-4479-97d1-abeef13f8803\",\"_hash\":\"30d9fdd2f5a8bacc809001f44651e87fc2a5770c889d459ab5aa86fb10c18201\",\"moduleSequenceNumber\":52570,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/export async function main(ns) {\\r\\n    const target = ns.args[0]\\r\\n    const threads = ns.args[1]\\r\\n    const delay = ns.args[2]\\r\\n  \\r\\n    if (delay && delay > 0) {\\r\\n      await ns.sleep(delay)\\r\\n    }\\r\\n  \\r\\n    ns.print(`Starting operation: grow on ${target} in ${threads} threads`)\\r\\n    await ns.grow(target, { threads, stock: true })\\r\\n    ns.exit()\\r\\n  }\\r\\n  \",\"filename\":\"grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///80166b39-171c-489e-943d-41105d6b5336\",\"moduleSequenceNumber\":50324}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"pserv-1024-ed40466b-733c-4479-97d1-abeef13f8803\",\"_hash\":\"c43d4c7c8798e16588b33c740af14ea55f3ecddd2586b8cc3336577ba8faa5f8\",\"moduleSequenceNumber\":50324,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/export async function main(ns) {\\r\\n    const target = ns.args[0]\\r\\n    const threads = ns.args[1]\\r\\n    const delay = ns.args[2]\\r\\n  \\r\\n    if (delay && delay > 0) {\\r\\n      await ns.sleep(delay)\\r\\n    }\\r\\n  \\r\\n    ns.print(`Starting operation: weaken on ${target} in ${threads} threads`)\\r\\n    await ns.weaken(target, { threads, stock: true })\\r\\n    ns.exit()\\r\\n  }\\r\\n  \",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"pserv-1024-ed40466b-733c-4479-97d1-abeef13f8803\",\"_hash\":\"7656e4aac5fc95a4a03444258a0cf4af92d88b1dd44a7486167d2200da1eb442\",\"moduleSequenceNumber\":50265,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-1024-4366e5fd-d2b1-42d0-a38a-308ab84864ea\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-1024-4366e5fd-d2b1-42d0-a38a-308ab84864ea\",\"httpPortOpen\":false,\"ip\":\"82.6.5.5\",\"isConnectedTo\":false,\"maxRam\":1024,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":1023.75,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omega-net\",585,16589.730537389638,\"e2100f4d-739e-4436-aad3-b0401bf103eb\"],\"dataMap\":{},\"filename\":\"grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":122.81000000000121,\"pid\":922,\"ramUsage\":1.75,\"server\":\"pserv-1024-4366e5fd-d2b1-42d0-a38a-308ab84864ea\",\"threads\":585,\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///80166b39-171c-489e-943d-41105d6b5336\",\"moduleSequenceNumber\":50325}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/export async function main(ns) {\\r\\n    const target = ns.args[0]\\r\\n    const threads = ns.args[1]\\r\\n    const delay = ns.args[2]\\r\\n  \\r\\n    if (delay && delay > 0) {\\r\\n      await ns.sleep(delay)\\r\\n    }\\r\\n  \\r\\n    ns.print(`Starting operation: hack on ${target} in ${threads} threads`)\\r\\n    await ns.hack(target, { threads, stock: true })\\r\\n    ns.exit()\\r\\n  }\\r\\n  \",\"filename\":\"hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:file:///378f0e19-d812-47dc-9213-0472ce7d046a\",\"moduleSequenceNumber\":52571}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"pserv-1024-4366e5fd-d2b1-42d0-a38a-308ab84864ea\",\"_hash\":\"30d9fdd2f5a8bacc809001f44651e87fc2a5770c889d459ab5aa86fb10c18201\",\"moduleSequenceNumber\":52571,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/export async function main(ns) {\\r\\n    const target = ns.args[0]\\r\\n    const threads = ns.args[1]\\r\\n    const delay = ns.args[2]\\r\\n  \\r\\n    if (delay && delay > 0) {\\r\\n      await ns.sleep(delay)\\r\\n    }\\r\\n  \\r\\n    ns.print(`Starting operation: grow on ${target} in ${threads} threads`)\\r\\n    await ns.grow(target, { threads, stock: true })\\r\\n    ns.exit()\\r\\n  }\\r\\n  \",\"filename\":\"grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///80166b39-171c-489e-943d-41105d6b5336\",\"moduleSequenceNumber\":50325}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"pserv-1024-4366e5fd-d2b1-42d0-a38a-308ab84864ea\",\"_hash\":\"c43d4c7c8798e16588b33c740af14ea55f3ecddd2586b8cc3336577ba8faa5f8\",\"moduleSequenceNumber\":50325,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/export async function main(ns) {\\r\\n    const target = ns.args[0]\\r\\n    const threads = ns.args[1]\\r\\n    const delay = ns.args[2]\\r\\n  \\r\\n    if (delay && delay > 0) {\\r\\n      await ns.sleep(delay)\\r\\n    }\\r\\n  \\r\\n    ns.print(`Starting operation: weaken on ${target} in ${threads} threads`)\\r\\n    await ns.weaken(target, { threads, stock: true })\\r\\n    ns.exit()\\r\\n  }\\r\\n  \",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"pserv-1024-4366e5fd-d2b1-42d0-a38a-308ab84864ea\",\"_hash\":\"7656e4aac5fc95a4a03444258a0cf4af92d88b1dd44a7486167d2200da1eb442\",\"moduleSequenceNumber\":50271,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-1024-10ec7d70-dcf1-4f47-a6ea-941c3dc2057e\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-1024-10ec7d70-dcf1-4f47-a6ea-941c3dc2057e\",\"httpPortOpen\":false,\"ip\":\"11.2.9.5\",\"isConnectedTo\":false,\"maxRam\":1024,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":1023.75,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omega-net\",585,16589.730537389638,\"76e38a85-7c72-41cb-9f8f-2a1bae284995\"],\"dataMap\":{},\"filename\":\"grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":122.81000000000121,\"pid\":923,\"ramUsage\":1.75,\"server\":\"pserv-1024-10ec7d70-dcf1-4f47-a6ea-941c3dc2057e\",\"threads\":585,\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///80166b39-171c-489e-943d-41105d6b5336\",\"moduleSequenceNumber\":50326}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/export async function main(ns) {\\r\\n    const target = ns.args[0]\\r\\n    const threads = ns.args[1]\\r\\n    const delay = ns.args[2]\\r\\n  \\r\\n    if (delay && delay > 0) {\\r\\n      await ns.sleep(delay)\\r\\n    }\\r\\n  \\r\\n    ns.print(`Starting operation: hack on ${target} in ${threads} threads`)\\r\\n    await ns.hack(target, { threads, stock: true })\\r\\n    ns.exit()\\r\\n  }\\r\\n  \",\"filename\":\"hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:file:///378f0e19-d812-47dc-9213-0472ce7d046a\",\"moduleSequenceNumber\":52572}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"pserv-1024-10ec7d70-dcf1-4f47-a6ea-941c3dc2057e\",\"_hash\":\"30d9fdd2f5a8bacc809001f44651e87fc2a5770c889d459ab5aa86fb10c18201\",\"moduleSequenceNumber\":52572,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/export async function main(ns) {\\r\\n    const target = ns.args[0]\\r\\n    const threads = ns.args[1]\\r\\n    const delay = ns.args[2]\\r\\n  \\r\\n    if (delay && delay > 0) {\\r\\n      await ns.sleep(delay)\\r\\n    }\\r\\n  \\r\\n    ns.print(`Starting operation: grow on ${target} in ${threads} threads`)\\r\\n    await ns.grow(target, { threads, stock: true })\\r\\n    ns.exit()\\r\\n  }\\r\\n  \",\"filename\":\"grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///80166b39-171c-489e-943d-41105d6b5336\",\"moduleSequenceNumber\":50326}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"pserv-1024-10ec7d70-dcf1-4f47-a6ea-941c3dc2057e\",\"_hash\":\"c43d4c7c8798e16588b33c740af14ea55f3ecddd2586b8cc3336577ba8faa5f8\",\"moduleSequenceNumber\":50326,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/export async function main(ns) {\\r\\n    const target = ns.args[0]\\r\\n    const threads = ns.args[1]\\r\\n    const delay = ns.args[2]\\r\\n  \\r\\n    if (delay && delay > 0) {\\r\\n      await ns.sleep(delay)\\r\\n    }\\r\\n  \\r\\n    ns.print(`Starting operation: weaken on ${target} in ${threads} threads`)\\r\\n    await ns.weaken(target, { threads, stock: true })\\r\\n    ns.exit()\\r\\n  }\\r\\n  \",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"pserv-1024-10ec7d70-dcf1-4f47-a6ea-941c3dc2057e\",\"_hash\":\"7656e4aac5fc95a4a03444258a0cf4af92d88b1dd44a7486167d2200da1eb442\",\"moduleSequenceNumber\":50277,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-1024-460cd4bd-4cae-47fd-8148-7ca7352dfc18\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-1024-460cd4bd-4cae-47fd-8148-7ca7352dfc18\",\"httpPortOpen\":false,\"ip\":\"56.1.6.5\",\"isConnectedTo\":false,\"maxRam\":1024,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":1023.75,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omega-net\",585,16589.730537389638,\"c939bae5-527c-44ff-a154-19cba2565843\"],\"dataMap\":{},\"filename\":\"grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":122.81000000000121,\"pid\":924,\"ramUsage\":1.75,\"server\":\"pserv-1024-460cd4bd-4cae-47fd-8148-7ca7352dfc18\",\"threads\":585,\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///80166b39-171c-489e-943d-41105d6b5336\",\"moduleSequenceNumber\":50327}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/export async function main(ns) {\\r\\n    const target = ns.args[0]\\r\\n    const threads = ns.args[1]\\r\\n    const delay = ns.args[2]\\r\\n  \\r\\n    if (delay && delay > 0) {\\r\\n      await ns.sleep(delay)\\r\\n    }\\r\\n  \\r\\n    ns.print(`Starting operation: hack on ${target} in ${threads} threads`)\\r\\n    await ns.hack(target, { threads, stock: true })\\r\\n    ns.exit()\\r\\n  }\\r\\n  \",\"filename\":\"hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:file:///378f0e19-d812-47dc-9213-0472ce7d046a\",\"moduleSequenceNumber\":52573}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"pserv-1024-460cd4bd-4cae-47fd-8148-7ca7352dfc18\",\"_hash\":\"30d9fdd2f5a8bacc809001f44651e87fc2a5770c889d459ab5aa86fb10c18201\",\"moduleSequenceNumber\":52573,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/export async function main(ns) {\\r\\n    const target = ns.args[0]\\r\\n    const threads = ns.args[1]\\r\\n    const delay = ns.args[2]\\r\\n  \\r\\n    if (delay && delay > 0) {\\r\\n      await ns.sleep(delay)\\r\\n    }\\r\\n  \\r\\n    ns.print(`Starting operation: grow on ${target} in ${threads} threads`)\\r\\n    await ns.grow(target, { threads, stock: true })\\r\\n    ns.exit()\\r\\n  }\\r\\n  \",\"filename\":\"grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///80166b39-171c-489e-943d-41105d6b5336\",\"moduleSequenceNumber\":50327}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"pserv-1024-460cd4bd-4cae-47fd-8148-7ca7352dfc18\",\"_hash\":\"c43d4c7c8798e16588b33c740af14ea55f3ecddd2586b8cc3336577ba8faa5f8\",\"moduleSequenceNumber\":50327,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/export async function main(ns) {\\r\\n    const target = ns.args[0]\\r\\n    const threads = ns.args[1]\\r\\n    const delay = ns.args[2]\\r\\n  \\r\\n    if (delay && delay > 0) {\\r\\n      await ns.sleep(delay)\\r\\n    }\\r\\n  \\r\\n    ns.print(`Starting operation: weaken on ${target} in ${threads} threads`)\\r\\n    await ns.weaken(target, { threads, stock: true })\\r\\n    ns.exit()\\r\\n  }\\r\\n  \",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"pserv-1024-460cd4bd-4cae-47fd-8148-7ca7352dfc18\",\"_hash\":\"7656e4aac5fc95a4a03444258a0cf4af92d88b1dd44a7486167d2200da1eb442\",\"moduleSequenceNumber\":50283,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-1024-574455f3-22f4-4950-9425-1895cd99b02e\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-1024-574455f3-22f4-4950-9425-1895cd99b02e\",\"httpPortOpen\":false,\"ip\":\"28.9.4.6\",\"isConnectedTo\":false,\"maxRam\":1024,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":1023.75,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omega-net\",585,16589.730537389638,\"69ecf782-1896-42f4-bfd2-026ecffc783d\"],\"dataMap\":{},\"filename\":\"grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":122.81000000000121,\"pid\":925,\"ramUsage\":1.75,\"server\":\"pserv-1024-574455f3-22f4-4950-9425-1895cd99b02e\",\"threads\":585,\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///80166b39-171c-489e-943d-41105d6b5336\",\"moduleSequenceNumber\":50328}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/export async function main(ns) {\\r\\n    const target = ns.args[0]\\r\\n    const threads = ns.args[1]\\r\\n    const delay = ns.args[2]\\r\\n  \\r\\n    if (delay && delay > 0) {\\r\\n      await ns.sleep(delay)\\r\\n    }\\r\\n  \\r\\n    ns.print(`Starting operation: hack on ${target} in ${threads} threads`)\\r\\n    await ns.hack(target, { threads, stock: true })\\r\\n    ns.exit()\\r\\n  }\\r\\n  \",\"filename\":\"hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:file:///378f0e19-d812-47dc-9213-0472ce7d046a\",\"moduleSequenceNumber\":52574}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"pserv-1024-574455f3-22f4-4950-9425-1895cd99b02e\",\"_hash\":\"30d9fdd2f5a8bacc809001f44651e87fc2a5770c889d459ab5aa86fb10c18201\",\"moduleSequenceNumber\":52574,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/export async function main(ns) {\\r\\n    const target = ns.args[0]\\r\\n    const threads = ns.args[1]\\r\\n    const delay = ns.args[2]\\r\\n  \\r\\n    if (delay && delay > 0) {\\r\\n      await ns.sleep(delay)\\r\\n    }\\r\\n  \\r\\n    ns.print(`Starting operation: grow on ${target} in ${threads} threads`)\\r\\n    await ns.grow(target, { threads, stock: true })\\r\\n    ns.exit()\\r\\n  }\\r\\n  \",\"filename\":\"grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///80166b39-171c-489e-943d-41105d6b5336\",\"moduleSequenceNumber\":50328}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"pserv-1024-574455f3-22f4-4950-9425-1895cd99b02e\",\"_hash\":\"c43d4c7c8798e16588b33c740af14ea55f3ecddd2586b8cc3336577ba8faa5f8\",\"moduleSequenceNumber\":50328,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/export async function main(ns) {\\r\\n    const target = ns.args[0]\\r\\n    const threads = ns.args[1]\\r\\n    const delay = ns.args[2]\\r\\n  \\r\\n    if (delay && delay > 0) {\\r\\n      await ns.sleep(delay)\\r\\n    }\\r\\n  \\r\\n    ns.print(`Starting operation: weaken on ${target} in ${threads} threads`)\\r\\n    await ns.weaken(target, { threads, stock: true })\\r\\n    ns.exit()\\r\\n  }\\r\\n  \",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"pserv-1024-574455f3-22f4-4950-9425-1895cd99b02e\",\"_hash\":\"7656e4aac5fc95a4a03444258a0cf4af92d88b1dd44a7486167d2200da1eb442\",\"moduleSequenceNumber\":50289,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-1024-096a732b-d300-4732-8577-36b392a4d1b3\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-1024-096a732b-d300-4732-8577-36b392a4d1b3\",\"httpPortOpen\":false,\"ip\":\"17.8.6.2\",\"isConnectedTo\":false,\"maxRam\":1024,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":1023.75,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omega-net\",585,16589.730537389638,\"e74e67ff-e2a6-407f-90f2-19cbeb2116ee\"],\"dataMap\":{},\"filename\":\"grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":122.81000000000121,\"pid\":926,\"ramUsage\":1.75,\"server\":\"pserv-1024-096a732b-d300-4732-8577-36b392a4d1b3\",\"threads\":585,\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///80166b39-171c-489e-943d-41105d6b5336\",\"moduleSequenceNumber\":50329}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/export async function main(ns) {\\r\\n    const target = ns.args[0]\\r\\n    const threads = ns.args[1]\\r\\n    const delay = ns.args[2]\\r\\n  \\r\\n    if (delay && delay > 0) {\\r\\n      await ns.sleep(delay)\\r\\n    }\\r\\n  \\r\\n    ns.print(`Starting operation: hack on ${target} in ${threads} threads`)\\r\\n    await ns.hack(target, { threads, stock: true })\\r\\n    ns.exit()\\r\\n  }\\r\\n  \",\"filename\":\"hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:file:///378f0e19-d812-47dc-9213-0472ce7d046a\",\"moduleSequenceNumber\":52575}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"pserv-1024-096a732b-d300-4732-8577-36b392a4d1b3\",\"_hash\":\"30d9fdd2f5a8bacc809001f44651e87fc2a5770c889d459ab5aa86fb10c18201\",\"moduleSequenceNumber\":52575,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/export async function main(ns) {\\r\\n    const target = ns.args[0]\\r\\n    const threads = ns.args[1]\\r\\n    const delay = ns.args[2]\\r\\n  \\r\\n    if (delay && delay > 0) {\\r\\n      await ns.sleep(delay)\\r\\n    }\\r\\n  \\r\\n    ns.print(`Starting operation: grow on ${target} in ${threads} threads`)\\r\\n    await ns.grow(target, { threads, stock: true })\\r\\n    ns.exit()\\r\\n  }\\r\\n  \",\"filename\":\"grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///80166b39-171c-489e-943d-41105d6b5336\",\"moduleSequenceNumber\":50329}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"pserv-1024-096a732b-d300-4732-8577-36b392a4d1b3\",\"_hash\":\"c43d4c7c8798e16588b33c740af14ea55f3ecddd2586b8cc3336577ba8faa5f8\",\"moduleSequenceNumber\":50329,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/export async function main(ns) {\\r\\n    const target = ns.args[0]\\r\\n    const threads = ns.args[1]\\r\\n    const delay = ns.args[2]\\r\\n  \\r\\n    if (delay && delay > 0) {\\r\\n      await ns.sleep(delay)\\r\\n    }\\r\\n  \\r\\n    ns.print(`Starting operation: weaken on ${target} in ${threads} threads`)\\r\\n    await ns.weaken(target, { threads, stock: true })\\r\\n    ns.exit()\\r\\n  }\\r\\n  \",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"pserv-1024-096a732b-d300-4732-8577-36b392a4d1b3\",\"_hash\":\"7656e4aac5fc95a4a03444258a0cf4af92d88b1dd44a7486167d2200da1eb442\",\"moduleSequenceNumber\":50295,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-1024-9f1ff2e7-150a-4b85-9ab9-6a9a928c8a23\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-1024-9f1ff2e7-150a-4b85-9ab9-6a9a928c8a23\",\"httpPortOpen\":false,\"ip\":\"0.3.0.4\",\"isConnectedTo\":false,\"maxRam\":1024,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":1023.75,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omega-net\",585,16589.730537389638,\"a35a64c1-1b2c-471b-9e13-ce4dfadd8a54\"],\"dataMap\":{},\"filename\":\"grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":122.81000000000121,\"pid\":927,\"ramUsage\":1.75,\"server\":\"pserv-1024-9f1ff2e7-150a-4b85-9ab9-6a9a928c8a23\",\"threads\":585,\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///80166b39-171c-489e-943d-41105d6b5336\",\"moduleSequenceNumber\":50330}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/export async function main(ns) {\\r\\n    const target = ns.args[0]\\r\\n    const threads = ns.args[1]\\r\\n    const delay = ns.args[2]\\r\\n  \\r\\n    if (delay && delay > 0) {\\r\\n      await ns.sleep(delay)\\r\\n    }\\r\\n  \\r\\n    ns.print(`Starting operation: hack on ${target} in ${threads} threads`)\\r\\n    await ns.hack(target, { threads, stock: true })\\r\\n    ns.exit()\\r\\n  }\\r\\n  \",\"filename\":\"hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:file:///378f0e19-d812-47dc-9213-0472ce7d046a\",\"moduleSequenceNumber\":52576}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"pserv-1024-9f1ff2e7-150a-4b85-9ab9-6a9a928c8a23\",\"_hash\":\"30d9fdd2f5a8bacc809001f44651e87fc2a5770c889d459ab5aa86fb10c18201\",\"moduleSequenceNumber\":52576,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/export async function main(ns) {\\r\\n    const target = ns.args[0]\\r\\n    const threads = ns.args[1]\\r\\n    const delay = ns.args[2]\\r\\n  \\r\\n    if (delay && delay > 0) {\\r\\n      await ns.sleep(delay)\\r\\n    }\\r\\n  \\r\\n    ns.print(`Starting operation: grow on ${target} in ${threads} threads`)\\r\\n    await ns.grow(target, { threads, stock: true })\\r\\n    ns.exit()\\r\\n  }\\r\\n  \",\"filename\":\"grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///80166b39-171c-489e-943d-41105d6b5336\",\"moduleSequenceNumber\":50330}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"pserv-1024-9f1ff2e7-150a-4b85-9ab9-6a9a928c8a23\",\"_hash\":\"c43d4c7c8798e16588b33c740af14ea55f3ecddd2586b8cc3336577ba8faa5f8\",\"moduleSequenceNumber\":50330,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/export async function main(ns) {\\r\\n    const target = ns.args[0]\\r\\n    const threads = ns.args[1]\\r\\n    const delay = ns.args[2]\\r\\n  \\r\\n    if (delay && delay > 0) {\\r\\n      await ns.sleep(delay)\\r\\n    }\\r\\n  \\r\\n    ns.print(`Starting operation: weaken on ${target} in ${threads} threads`)\\r\\n    await ns.weaken(target, { threads, stock: true })\\r\\n    ns.exit()\\r\\n  }\\r\\n  \",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"pserv-1024-9f1ff2e7-150a-4b85-9ab9-6a9a928c8a23\",\"_hash\":\"7656e4aac5fc95a4a03444258a0cf4af92d88b1dd44a7486167d2200da1eb442\",\"moduleSequenceNumber\":50301,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-1024-0237a7e9-b600-4c6d-94b4-63617196a9c5\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-1024-0237a7e9-b600-4c6d-94b4-63617196a9c5\",\"httpPortOpen\":false,\"ip\":\"47.4.3.8\",\"isConnectedTo\":false,\"maxRam\":1024,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":1023.75,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omega-net\",585,16589.730537389638,\"f9615671-55d7-4f61-ade7-614a78e2596f\"],\"dataMap\":{},\"filename\":\"grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":122.81000000000121,\"pid\":928,\"ramUsage\":1.75,\"server\":\"pserv-1024-0237a7e9-b600-4c6d-94b4-63617196a9c5\",\"threads\":585,\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///80166b39-171c-489e-943d-41105d6b5336\",\"moduleSequenceNumber\":50331}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/export async function main(ns) {\\r\\n    const target = ns.args[0]\\r\\n    const threads = ns.args[1]\\r\\n    const delay = ns.args[2]\\r\\n  \\r\\n    if (delay && delay > 0) {\\r\\n      await ns.sleep(delay)\\r\\n    }\\r\\n  \\r\\n    ns.print(`Starting operation: hack on ${target} in ${threads} threads`)\\r\\n    await ns.hack(target, { threads, stock: true })\\r\\n    ns.exit()\\r\\n  }\\r\\n  \",\"filename\":\"hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:file:///378f0e19-d812-47dc-9213-0472ce7d046a\",\"moduleSequenceNumber\":52577}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"pserv-1024-0237a7e9-b600-4c6d-94b4-63617196a9c5\",\"_hash\":\"30d9fdd2f5a8bacc809001f44651e87fc2a5770c889d459ab5aa86fb10c18201\",\"moduleSequenceNumber\":52577,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/export async function main(ns) {\\r\\n    const target = ns.args[0]\\r\\n    const threads = ns.args[1]\\r\\n    const delay = ns.args[2]\\r\\n  \\r\\n    if (delay && delay > 0) {\\r\\n      await ns.sleep(delay)\\r\\n    }\\r\\n  \\r\\n    ns.print(`Starting operation: grow on ${target} in ${threads} threads`)\\r\\n    await ns.grow(target, { threads, stock: true })\\r\\n    ns.exit()\\r\\n  }\\r\\n  \",\"filename\":\"grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///80166b39-171c-489e-943d-41105d6b5336\",\"moduleSequenceNumber\":50331}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"pserv-1024-0237a7e9-b600-4c6d-94b4-63617196a9c5\",\"_hash\":\"c43d4c7c8798e16588b33c740af14ea55f3ecddd2586b8cc3336577ba8faa5f8\",\"moduleSequenceNumber\":50331,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/export async function main(ns) {\\r\\n    const target = ns.args[0]\\r\\n    const threads = ns.args[1]\\r\\n    const delay = ns.args[2]\\r\\n  \\r\\n    if (delay && delay > 0) {\\r\\n      await ns.sleep(delay)\\r\\n    }\\r\\n  \\r\\n    ns.print(`Starting operation: weaken on ${target} in ${threads} threads`)\\r\\n    await ns.weaken(target, { threads, stock: true })\\r\\n    ns.exit()\\r\\n  }\\r\\n  \",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"pserv-1024-0237a7e9-b600-4c6d-94b4-63617196a9c5\",\"_hash\":\"7656e4aac5fc95a4a03444258a0cf4af92d88b1dd44a7486167d2200da1eb442\",\"moduleSequenceNumber\":50307,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-1024-3cd119f2-f064-4ab5-ab47-07642ef6292b\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-1024-3cd119f2-f064-4ab5-ab47-07642ef6292b\",\"httpPortOpen\":false,\"ip\":\"5.1.5.8\",\"isConnectedTo\":false,\"maxRam\":1024,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":1023.75,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omega-net\",585,16589.730537389638,\"8b52c02e-6505-4e0f-a775-1d9bff3e9e28\"],\"dataMap\":{},\"filename\":\"grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":122.81000000000121,\"pid\":929,\"ramUsage\":1.75,\"server\":\"pserv-1024-3cd119f2-f064-4ab5-ab47-07642ef6292b\",\"threads\":585,\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///80166b39-171c-489e-943d-41105d6b5336\",\"moduleSequenceNumber\":50332}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/export async function main(ns) {\\r\\n    const target = ns.args[0]\\r\\n    const threads = ns.args[1]\\r\\n    const delay = ns.args[2]\\r\\n  \\r\\n    if (delay && delay > 0) {\\r\\n      await ns.sleep(delay)\\r\\n    }\\r\\n  \\r\\n    ns.print(`Starting operation: hack on ${target} in ${threads} threads`)\\r\\n    await ns.hack(target, { threads, stock: true })\\r\\n    ns.exit()\\r\\n  }\\r\\n  \",\"filename\":\"hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:file:///378f0e19-d812-47dc-9213-0472ce7d046a\",\"moduleSequenceNumber\":52578}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"pserv-1024-3cd119f2-f064-4ab5-ab47-07642ef6292b\",\"_hash\":\"30d9fdd2f5a8bacc809001f44651e87fc2a5770c889d459ab5aa86fb10c18201\",\"moduleSequenceNumber\":52578,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/export async function main(ns) {\\r\\n    const target = ns.args[0]\\r\\n    const threads = ns.args[1]\\r\\n    const delay = ns.args[2]\\r\\n  \\r\\n    if (delay && delay > 0) {\\r\\n      await ns.sleep(delay)\\r\\n    }\\r\\n  \\r\\n    ns.print(`Starting operation: grow on ${target} in ${threads} threads`)\\r\\n    await ns.grow(target, { threads, stock: true })\\r\\n    ns.exit()\\r\\n  }\\r\\n  \",\"filename\":\"grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///80166b39-171c-489e-943d-41105d6b5336\",\"moduleSequenceNumber\":50332}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"pserv-1024-3cd119f2-f064-4ab5-ab47-07642ef6292b\",\"_hash\":\"c43d4c7c8798e16588b33c740af14ea55f3ecddd2586b8cc3336577ba8faa5f8\",\"moduleSequenceNumber\":50332,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/export async function main(ns) {\\r\\n    const target = ns.args[0]\\r\\n    const threads = ns.args[1]\\r\\n    const delay = ns.args[2]\\r\\n  \\r\\n    if (delay && delay > 0) {\\r\\n      await ns.sleep(delay)\\r\\n    }\\r\\n  \\r\\n    ns.print(`Starting operation: weaken on ${target} in ${threads} threads`)\\r\\n    await ns.weaken(target, { threads, stock: true })\\r\\n    ns.exit()\\r\\n  }\\r\\n  \",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"pserv-1024-3cd119f2-f064-4ab5-ab47-07642ef6292b\",\"_hash\":\"7656e4aac5fc95a4a03444258a0cf4af92d88b1dd44a7486167d2200da1eb442\",\"moduleSequenceNumber\":50313,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-1024-269f0d47-d50c-4365-9e9b-81c1a9d26cbb\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-1024-269f0d47-d50c-4365-9e9b-81c1a9d26cbb\",\"httpPortOpen\":false,\"ip\":\"48.7.2.7\",\"isConnectedTo\":false,\"maxRam\":1024,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":1023.75,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omega-net\",585,16589.730537389638,\"4036313a-a7fb-4d4c-9fa4-6ac46762ee31\"],\"dataMap\":{},\"filename\":\"grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":122.81000000000121,\"pid\":930,\"ramUsage\":1.75,\"server\":\"pserv-1024-269f0d47-d50c-4365-9e9b-81c1a9d26cbb\",\"threads\":585,\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///80166b39-171c-489e-943d-41105d6b5336\",\"moduleSequenceNumber\":50333}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/export async function main(ns) {\\r\\n    const target = ns.args[0]\\r\\n    const threads = ns.args[1]\\r\\n    const delay = ns.args[2]\\r\\n  \\r\\n    if (delay && delay > 0) {\\r\\n      await ns.sleep(delay)\\r\\n    }\\r\\n  \\r\\n    ns.print(`Starting operation: hack on ${target} in ${threads} threads`)\\r\\n    await ns.hack(target, { threads, stock: true })\\r\\n    ns.exit()\\r\\n  }\\r\\n  \",\"filename\":\"hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:file:///378f0e19-d812-47dc-9213-0472ce7d046a\",\"moduleSequenceNumber\":52579}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"pserv-1024-269f0d47-d50c-4365-9e9b-81c1a9d26cbb\",\"_hash\":\"30d9fdd2f5a8bacc809001f44651e87fc2a5770c889d459ab5aa86fb10c18201\",\"moduleSequenceNumber\":52579,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/export async function main(ns) {\\r\\n    const target = ns.args[0]\\r\\n    const threads = ns.args[1]\\r\\n    const delay = ns.args[2]\\r\\n  \\r\\n    if (delay && delay > 0) {\\r\\n      await ns.sleep(delay)\\r\\n    }\\r\\n  \\r\\n    ns.print(`Starting operation: grow on ${target} in ${threads} threads`)\\r\\n    await ns.grow(target, { threads, stock: true })\\r\\n    ns.exit()\\r\\n  }\\r\\n  \",\"filename\":\"grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///80166b39-171c-489e-943d-41105d6b5336\",\"moduleSequenceNumber\":50333}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"pserv-1024-269f0d47-d50c-4365-9e9b-81c1a9d26cbb\",\"_hash\":\"c43d4c7c8798e16588b33c740af14ea55f3ecddd2586b8cc3336577ba8faa5f8\",\"moduleSequenceNumber\":50333,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/export async function main(ns) {\\r\\n    const target = ns.args[0]\\r\\n    const threads = ns.args[1]\\r\\n    const delay = ns.args[2]\\r\\n  \\r\\n    if (delay && delay > 0) {\\r\\n      await ns.sleep(delay)\\r\\n    }\\r\\n  \\r\\n    ns.print(`Starting operation: weaken on ${target} in ${threads} threads`)\\r\\n    await ns.weaken(target, { threads, stock: true })\\r\\n    ns.exit()\\r\\n  }\\r\\n  \",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"pserv-1024-269f0d47-d50c-4365-9e9b-81c1a9d26cbb\",\"_hash\":\"7656e4aac5fc95a4a03444258a0cf4af92d88b1dd44a7486167d2200da1eb442\",\"moduleSequenceNumber\":50319,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-4096-da1896c1-0bb1-4d84-85c2-422b3271d9fe\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-4096-da1896c1-0bb1-4d84-85c2-422b3271d9fe\",\"httpPortOpen\":false,\"ip\":\"44.7.5.1\",\"isConnectedTo\":false,\"maxRam\":4096,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":4095,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omega-net\",2340,16589.730537389638,\"748e9409-6331-43fc-b9c4-d04655626599\"],\"dataMap\":{},\"filename\":\"grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":122.81000000000121,\"pid\":931,\"ramUsage\":1.75,\"server\":\"pserv-4096-da1896c1-0bb1-4d84-85c2-422b3271d9fe\",\"threads\":2340,\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///80166b39-171c-489e-943d-41105d6b5336\",\"moduleSequenceNumber\":53717}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/export async function main(ns) {\\r\\n    const target = ns.args[0]\\r\\n    const threads = ns.args[1]\\r\\n    const delay = ns.args[2]\\r\\n  \\r\\n    if (delay && delay > 0) {\\r\\n      await ns.sleep(delay)\\r\\n    }\\r\\n  \\r\\n    ns.print(`Starting operation: hack on ${target} in ${threads} threads`)\\r\\n    await ns.hack(target, { threads, stock: true })\\r\\n    ns.exit()\\r\\n  }\\r\\n  \",\"filename\":\"hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:file:///378f0e19-d812-47dc-9213-0472ce7d046a\",\"moduleSequenceNumber\":55770}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"pserv-4096-da1896c1-0bb1-4d84-85c2-422b3271d9fe\",\"_hash\":\"30d9fdd2f5a8bacc809001f44651e87fc2a5770c889d459ab5aa86fb10c18201\",\"moduleSequenceNumber\":55770,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/export async function main(ns) {\\r\\n    const target = ns.args[0]\\r\\n    const threads = ns.args[1]\\r\\n    const delay = ns.args[2]\\r\\n  \\r\\n    if (delay && delay > 0) {\\r\\n      await ns.sleep(delay)\\r\\n    }\\r\\n  \\r\\n    ns.print(`Starting operation: grow on ${target} in ${threads} threads`)\\r\\n    await ns.grow(target, { threads, stock: true })\\r\\n    ns.exit()\\r\\n  }\\r\\n  \",\"filename\":\"grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///80166b39-171c-489e-943d-41105d6b5336\",\"moduleSequenceNumber\":53717}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"pserv-4096-da1896c1-0bb1-4d84-85c2-422b3271d9fe\",\"_hash\":\"c43d4c7c8798e16588b33c740af14ea55f3ecddd2586b8cc3336577ba8faa5f8\",\"moduleSequenceNumber\":53717,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/export async function main(ns) {\\r\\n    const target = ns.args[0]\\r\\n    const threads = ns.args[1]\\r\\n    const delay = ns.args[2]\\r\\n  \\r\\n    if (delay && delay > 0) {\\r\\n      await ns.sleep(delay)\\r\\n    }\\r\\n  \\r\\n    ns.print(`Starting operation: weaken on ${target} in ${threads} threads`)\\r\\n    await ns.weaken(target, { threads, stock: true })\\r\\n    ns.exit()\\r\\n  }\\r\\n  \",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"pserv-4096-da1896c1-0bb1-4d84-85c2-422b3271d9fe\",\"_hash\":\"7656e4aac5fc95a4a03444258a0cf4af92d88b1dd44a7486167d2200da1eb442\",\"moduleSequenceNumber\":53680,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-4096-f4e59f1d-267b-4618-ae78-a0d62851ee5c\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-4096-f4e59f1d-267b-4618-ae78-a0d62851ee5c\",\"httpPortOpen\":false,\"ip\":\"78.7.2.4\",\"isConnectedTo\":false,\"maxRam\":4096,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":4095,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omega-net\",2340,16589.730537389638,\"fc14bd45-ae72-448d-a65a-3c144e5a7c77\"],\"dataMap\":{},\"filename\":\"grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":122.81000000000121,\"pid\":932,\"ramUsage\":1.75,\"server\":\"pserv-4096-f4e59f1d-267b-4618-ae78-a0d62851ee5c\",\"threads\":2340,\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///80166b39-171c-489e-943d-41105d6b5336\",\"moduleSequenceNumber\":53718}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/export async function main(ns) {\\r\\n    const target = ns.args[0]\\r\\n    const threads = ns.args[1]\\r\\n    const delay = ns.args[2]\\r\\n  \\r\\n    if (delay && delay > 0) {\\r\\n      await ns.sleep(delay)\\r\\n    }\\r\\n  \\r\\n    ns.print(`Starting operation: hack on ${target} in ${threads} threads`)\\r\\n    await ns.hack(target, { threads, stock: true })\\r\\n    ns.exit()\\r\\n  }\\r\\n  \",\"filename\":\"hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:file:///378f0e19-d812-47dc-9213-0472ce7d046a\",\"moduleSequenceNumber\":55771}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"pserv-4096-f4e59f1d-267b-4618-ae78-a0d62851ee5c\",\"_hash\":\"30d9fdd2f5a8bacc809001f44651e87fc2a5770c889d459ab5aa86fb10c18201\",\"moduleSequenceNumber\":55771,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/export async function main(ns) {\\r\\n    const target = ns.args[0]\\r\\n    const threads = ns.args[1]\\r\\n    const delay = ns.args[2]\\r\\n  \\r\\n    if (delay && delay > 0) {\\r\\n      await ns.sleep(delay)\\r\\n    }\\r\\n  \\r\\n    ns.print(`Starting operation: grow on ${target} in ${threads} threads`)\\r\\n    await ns.grow(target, { threads, stock: true })\\r\\n    ns.exit()\\r\\n  }\\r\\n  \",\"filename\":\"grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///80166b39-171c-489e-943d-41105d6b5336\",\"moduleSequenceNumber\":53718}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"pserv-4096-f4e59f1d-267b-4618-ae78-a0d62851ee5c\",\"_hash\":\"c43d4c7c8798e16588b33c740af14ea55f3ecddd2586b8cc3336577ba8faa5f8\",\"moduleSequenceNumber\":53718,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/export async function main(ns) {\\r\\n    const target = ns.args[0]\\r\\n    const threads = ns.args[1]\\r\\n    const delay = ns.args[2]\\r\\n  \\r\\n    if (delay && delay > 0) {\\r\\n      await ns.sleep(delay)\\r\\n    }\\r\\n  \\r\\n    ns.print(`Starting operation: weaken on ${target} in ${threads} threads`)\\r\\n    await ns.weaken(target, { threads, stock: true })\\r\\n    ns.exit()\\r\\n  }\\r\\n  \",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"pserv-4096-f4e59f1d-267b-4618-ae78-a0d62851ee5c\",\"_hash\":\"7656e4aac5fc95a4a03444258a0cf4af92d88b1dd44a7486167d2200da1eb442\",\"moduleSequenceNumber\":53686,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-4096-6c7894fc-0f09-405f-8ea4-c6ed376036b7\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-4096-6c7894fc-0f09-405f-8ea4-c6ed376036b7\",\"httpPortOpen\":false,\"ip\":\"99.1.6.3\",\"isConnectedTo\":false,\"maxRam\":4096,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":4095,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omega-net\",2340,16589.730537389638,\"823d653a-c145-4f80-8735-a309a4fe0371\"],\"dataMap\":{},\"filename\":\"grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":122.81000000000121,\"pid\":933,\"ramUsage\":1.75,\"server\":\"pserv-4096-6c7894fc-0f09-405f-8ea4-c6ed376036b7\",\"threads\":2340,\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///80166b39-171c-489e-943d-41105d6b5336\",\"moduleSequenceNumber\":53719}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/export async function main(ns) {\\r\\n    const target = ns.args[0]\\r\\n    const threads = ns.args[1]\\r\\n    const delay = ns.args[2]\\r\\n  \\r\\n    if (delay && delay > 0) {\\r\\n      await ns.sleep(delay)\\r\\n    }\\r\\n  \\r\\n    ns.print(`Starting operation: hack on ${target} in ${threads} threads`)\\r\\n    await ns.hack(target, { threads, stock: true })\\r\\n    ns.exit()\\r\\n  }\\r\\n  \",\"filename\":\"hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:file:///378f0e19-d812-47dc-9213-0472ce7d046a\",\"moduleSequenceNumber\":55772}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"pserv-4096-6c7894fc-0f09-405f-8ea4-c6ed376036b7\",\"_hash\":\"30d9fdd2f5a8bacc809001f44651e87fc2a5770c889d459ab5aa86fb10c18201\",\"moduleSequenceNumber\":55772,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/export async function main(ns) {\\r\\n    const target = ns.args[0]\\r\\n    const threads = ns.args[1]\\r\\n    const delay = ns.args[2]\\r\\n  \\r\\n    if (delay && delay > 0) {\\r\\n      await ns.sleep(delay)\\r\\n    }\\r\\n  \\r\\n    ns.print(`Starting operation: grow on ${target} in ${threads} threads`)\\r\\n    await ns.grow(target, { threads, stock: true })\\r\\n    ns.exit()\\r\\n  }\\r\\n  \",\"filename\":\"grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///80166b39-171c-489e-943d-41105d6b5336\",\"moduleSequenceNumber\":53719}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"pserv-4096-6c7894fc-0f09-405f-8ea4-c6ed376036b7\",\"_hash\":\"c43d4c7c8798e16588b33c740af14ea55f3ecddd2586b8cc3336577ba8faa5f8\",\"moduleSequenceNumber\":53719,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/export async function main(ns) {\\r\\n    const target = ns.args[0]\\r\\n    const threads = ns.args[1]\\r\\n    const delay = ns.args[2]\\r\\n  \\r\\n    if (delay && delay > 0) {\\r\\n      await ns.sleep(delay)\\r\\n    }\\r\\n  \\r\\n    ns.print(`Starting operation: weaken on ${target} in ${threads} threads`)\\r\\n    await ns.weaken(target, { threads, stock: true })\\r\\n    ns.exit()\\r\\n  }\\r\\n  \",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"pserv-4096-6c7894fc-0f09-405f-8ea4-c6ed376036b7\",\"_hash\":\"7656e4aac5fc95a4a03444258a0cf4af92d88b1dd44a7486167d2200da1eb442\",\"moduleSequenceNumber\":53692,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-4096-71c387c0-49c0-4cfb-9693-4f13f9bcf48d\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-4096-71c387c0-49c0-4cfb-9693-4f13f9bcf48d\",\"httpPortOpen\":false,\"ip\":\"55.2.3.0\",\"isConnectedTo\":false,\"maxRam\":4096,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":4095,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omega-net\",2340,16589.730537389638,\"c93fc11a-2bc9-4222-ac69-04d151f45a2d\"],\"dataMap\":{},\"filename\":\"grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":122.81000000000121,\"pid\":934,\"ramUsage\":1.75,\"server\":\"pserv-4096-71c387c0-49c0-4cfb-9693-4f13f9bcf48d\",\"threads\":2340,\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///80166b39-171c-489e-943d-41105d6b5336\",\"moduleSequenceNumber\":53720}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/export async function main(ns) {\\r\\n    const target = ns.args[0]\\r\\n    const threads = ns.args[1]\\r\\n    const delay = ns.args[2]\\r\\n  \\r\\n    if (delay && delay > 0) {\\r\\n      await ns.sleep(delay)\\r\\n    }\\r\\n  \\r\\n    ns.print(`Starting operation: hack on ${target} in ${threads} threads`)\\r\\n    await ns.hack(target, { threads, stock: true })\\r\\n    ns.exit()\\r\\n  }\\r\\n  \",\"filename\":\"hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:file:///378f0e19-d812-47dc-9213-0472ce7d046a\",\"moduleSequenceNumber\":55773}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"pserv-4096-71c387c0-49c0-4cfb-9693-4f13f9bcf48d\",\"_hash\":\"30d9fdd2f5a8bacc809001f44651e87fc2a5770c889d459ab5aa86fb10c18201\",\"moduleSequenceNumber\":55773,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/export async function main(ns) {\\r\\n    const target = ns.args[0]\\r\\n    const threads = ns.args[1]\\r\\n    const delay = ns.args[2]\\r\\n  \\r\\n    if (delay && delay > 0) {\\r\\n      await ns.sleep(delay)\\r\\n    }\\r\\n  \\r\\n    ns.print(`Starting operation: grow on ${target} in ${threads} threads`)\\r\\n    await ns.grow(target, { threads, stock: true })\\r\\n    ns.exit()\\r\\n  }\\r\\n  \",\"filename\":\"grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///80166b39-171c-489e-943d-41105d6b5336\",\"moduleSequenceNumber\":53720}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"pserv-4096-71c387c0-49c0-4cfb-9693-4f13f9bcf48d\",\"_hash\":\"c43d4c7c8798e16588b33c740af14ea55f3ecddd2586b8cc3336577ba8faa5f8\",\"moduleSequenceNumber\":53720,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/export async function main(ns) {\\r\\n    const target = ns.args[0]\\r\\n    const threads = ns.args[1]\\r\\n    const delay = ns.args[2]\\r\\n  \\r\\n    if (delay && delay > 0) {\\r\\n      await ns.sleep(delay)\\r\\n    }\\r\\n  \\r\\n    ns.print(`Starting operation: weaken on ${target} in ${threads} threads`)\\r\\n    await ns.weaken(target, { threads, stock: true })\\r\\n    ns.exit()\\r\\n  }\\r\\n  \",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"pserv-4096-71c387c0-49c0-4cfb-9693-4f13f9bcf48d\",\"_hash\":\"7656e4aac5fc95a4a03444258a0cf4af92d88b1dd44a7486167d2200da1eb442\",\"moduleSequenceNumber\":53698,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-4096-60b00704-2d0f-4fd0-a83e-32bb052d12a3\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-4096-60b00704-2d0f-4fd0-a83e-32bb052d12a3\",\"httpPortOpen\":false,\"ip\":\"81.4.8.3\",\"isConnectedTo\":false,\"maxRam\":4096,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":4095,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omega-net\",2340,16589.730537389638,\"0ae601a4-4806-483e-93ee-d90caf260abb\"],\"dataMap\":{},\"filename\":\"grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":122.81000000000121,\"pid\":935,\"ramUsage\":1.75,\"server\":\"pserv-4096-60b00704-2d0f-4fd0-a83e-32bb052d12a3\",\"threads\":2340,\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///80166b39-171c-489e-943d-41105d6b5336\",\"moduleSequenceNumber\":53721}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/export async function main(ns) {\\r\\n    const target = ns.args[0]\\r\\n    const threads = ns.args[1]\\r\\n    const delay = ns.args[2]\\r\\n  \\r\\n    if (delay && delay > 0) {\\r\\n      await ns.sleep(delay)\\r\\n    }\\r\\n  \\r\\n    ns.print(`Starting operation: hack on ${target} in ${threads} threads`)\\r\\n    await ns.hack(target, { threads, stock: true })\\r\\n    ns.exit()\\r\\n  }\\r\\n  \",\"filename\":\"hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:file:///378f0e19-d812-47dc-9213-0472ce7d046a\",\"moduleSequenceNumber\":55774}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"pserv-4096-60b00704-2d0f-4fd0-a83e-32bb052d12a3\",\"_hash\":\"30d9fdd2f5a8bacc809001f44651e87fc2a5770c889d459ab5aa86fb10c18201\",\"moduleSequenceNumber\":55774,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/export async function main(ns) {\\r\\n    const target = ns.args[0]\\r\\n    const threads = ns.args[1]\\r\\n    const delay = ns.args[2]\\r\\n  \\r\\n    if (delay && delay > 0) {\\r\\n      await ns.sleep(delay)\\r\\n    }\\r\\n  \\r\\n    ns.print(`Starting operation: grow on ${target} in ${threads} threads`)\\r\\n    await ns.grow(target, { threads, stock: true })\\r\\n    ns.exit()\\r\\n  }\\r\\n  \",\"filename\":\"grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///80166b39-171c-489e-943d-41105d6b5336\",\"moduleSequenceNumber\":53721}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"pserv-4096-60b00704-2d0f-4fd0-a83e-32bb052d12a3\",\"_hash\":\"c43d4c7c8798e16588b33c740af14ea55f3ecddd2586b8cc3336577ba8faa5f8\",\"moduleSequenceNumber\":53721,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/export async function main(ns) {\\r\\n    const target = ns.args[0]\\r\\n    const threads = ns.args[1]\\r\\n    const delay = ns.args[2]\\r\\n  \\r\\n    if (delay && delay > 0) {\\r\\n      await ns.sleep(delay)\\r\\n    }\\r\\n  \\r\\n    ns.print(`Starting operation: weaken on ${target} in ${threads} threads`)\\r\\n    await ns.weaken(target, { threads, stock: true })\\r\\n    ns.exit()\\r\\n  }\\r\\n  \",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"pserv-4096-60b00704-2d0f-4fd0-a83e-32bb052d12a3\",\"_hash\":\"7656e4aac5fc95a4a03444258a0cf4af92d88b1dd44a7486167d2200da1eb442\",\"moduleSequenceNumber\":53704,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-4096-ea699298-8f2d-4ecb-ab84-bb8645f59467\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-4096-ea699298-8f2d-4ecb-ab84-bb8645f59467\",\"httpPortOpen\":false,\"ip\":\"16.8.5.0\",\"isConnectedTo\":false,\"maxRam\":4096,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":4095,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omega-net\",2340,16589.730537389638,\"ee28afe1-c498-4fae-9a68-dc1f495ab11d\"],\"dataMap\":{},\"filename\":\"grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":122.81000000000121,\"pid\":936,\"ramUsage\":1.75,\"server\":\"pserv-4096-ea699298-8f2d-4ecb-ab84-bb8645f59467\",\"threads\":2340,\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///80166b39-171c-489e-943d-41105d6b5336\",\"moduleSequenceNumber\":53722}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/export async function main(ns) {\\r\\n    const target = ns.args[0]\\r\\n    const threads = ns.args[1]\\r\\n    const delay = ns.args[2]\\r\\n  \\r\\n    if (delay && delay > 0) {\\r\\n      await ns.sleep(delay)\\r\\n    }\\r\\n  \\r\\n    ns.print(`Starting operation: hack on ${target} in ${threads} threads`)\\r\\n    await ns.hack(target, { threads, stock: true })\\r\\n    ns.exit()\\r\\n  }\\r\\n  \",\"filename\":\"hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:file:///378f0e19-d812-47dc-9213-0472ce7d046a\",\"moduleSequenceNumber\":55775}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"pserv-4096-ea699298-8f2d-4ecb-ab84-bb8645f59467\",\"_hash\":\"30d9fdd2f5a8bacc809001f44651e87fc2a5770c889d459ab5aa86fb10c18201\",\"moduleSequenceNumber\":55775,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/export async function main(ns) {\\r\\n    const target = ns.args[0]\\r\\n    const threads = ns.args[1]\\r\\n    const delay = ns.args[2]\\r\\n  \\r\\n    if (delay && delay > 0) {\\r\\n      await ns.sleep(delay)\\r\\n    }\\r\\n  \\r\\n    ns.print(`Starting operation: grow on ${target} in ${threads} threads`)\\r\\n    await ns.grow(target, { threads, stock: true })\\r\\n    ns.exit()\\r\\n  }\\r\\n  \",\"filename\":\"grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///80166b39-171c-489e-943d-41105d6b5336\",\"moduleSequenceNumber\":53722}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"pserv-4096-ea699298-8f2d-4ecb-ab84-bb8645f59467\",\"_hash\":\"c43d4c7c8798e16588b33c740af14ea55f3ecddd2586b8cc3336577ba8faa5f8\",\"moduleSequenceNumber\":53722,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/export async function main(ns) {\\r\\n    const target = ns.args[0]\\r\\n    const threads = ns.args[1]\\r\\n    const delay = ns.args[2]\\r\\n  \\r\\n    if (delay && delay > 0) {\\r\\n      await ns.sleep(delay)\\r\\n    }\\r\\n  \\r\\n    ns.print(`Starting operation: weaken on ${target} in ${threads} threads`)\\r\\n    await ns.weaken(target, { threads, stock: true })\\r\\n    ns.exit()\\r\\n  }\\r\\n  \",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"pserv-4096-ea699298-8f2d-4ecb-ab84-bb8645f59467\",\"_hash\":\"7656e4aac5fc95a4a03444258a0cf4af92d88b1dd44a7486167d2200da1eb442\",\"moduleSequenceNumber\":53710,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-4096-4041d657-ea33-47e3-aec1-3f51aebc88cc\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-4096-4041d657-ea33-47e3-aec1-3f51aebc88cc\",\"httpPortOpen\":false,\"ip\":\"93.4.6.6\",\"isConnectedTo\":false,\"maxRam\":4096,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":4095,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omega-net\",2340,16589.730537389638,\"4cfab50e-045b-4b18-af12-e5a3eb7c4498\"],\"dataMap\":{},\"filename\":\"grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":122.81000000000121,\"pid\":937,\"ramUsage\":1.75,\"server\":\"pserv-4096-4041d657-ea33-47e3-aec1-3f51aebc88cc\",\"threads\":2340,\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///80166b39-171c-489e-943d-41105d6b5336\",\"moduleSequenceNumber\":53723}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/export async function main(ns) {\\r\\n    const target = ns.args[0]\\r\\n    const threads = ns.args[1]\\r\\n    const delay = ns.args[2]\\r\\n  \\r\\n    if (delay && delay > 0) {\\r\\n      await ns.sleep(delay)\\r\\n    }\\r\\n  \\r\\n    ns.print(`Starting operation: hack on ${target} in ${threads} threads`)\\r\\n    await ns.hack(target, { threads, stock: true })\\r\\n    ns.exit()\\r\\n  }\\r\\n  \",\"filename\":\"hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:file:///378f0e19-d812-47dc-9213-0472ce7d046a\",\"moduleSequenceNumber\":55776}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"pserv-4096-4041d657-ea33-47e3-aec1-3f51aebc88cc\",\"_hash\":\"30d9fdd2f5a8bacc809001f44651e87fc2a5770c889d459ab5aa86fb10c18201\",\"moduleSequenceNumber\":55776,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/export async function main(ns) {\\r\\n    const target = ns.args[0]\\r\\n    const threads = ns.args[1]\\r\\n    const delay = ns.args[2]\\r\\n  \\r\\n    if (delay && delay > 0) {\\r\\n      await ns.sleep(delay)\\r\\n    }\\r\\n  \\r\\n    ns.print(`Starting operation: grow on ${target} in ${threads} threads`)\\r\\n    await ns.grow(target, { threads, stock: true })\\r\\n    ns.exit()\\r\\n  }\\r\\n  \",\"filename\":\"grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///80166b39-171c-489e-943d-41105d6b5336\",\"moduleSequenceNumber\":53723}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"pserv-4096-4041d657-ea33-47e3-aec1-3f51aebc88cc\",\"_hash\":\"c43d4c7c8798e16588b33c740af14ea55f3ecddd2586b8cc3336577ba8faa5f8\",\"moduleSequenceNumber\":53723,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/export async function main(ns) {\\r\\n    const target = ns.args[0]\\r\\n    const threads = ns.args[1]\\r\\n    const delay = ns.args[2]\\r\\n  \\r\\n    if (delay && delay > 0) {\\r\\n      await ns.sleep(delay)\\r\\n    }\\r\\n  \\r\\n    ns.print(`Starting operation: weaken on ${target} in ${threads} threads`)\\r\\n    await ns.weaken(target, { threads, stock: true })\\r\\n    ns.exit()\\r\\n  }\\r\\n  \",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"pserv-4096-4041d657-ea33-47e3-aec1-3f51aebc88cc\",\"_hash\":\"7656e4aac5fc95a4a03444258a0cf4af92d88b1dd44a7486167d2200da1eb442\",\"moduleSequenceNumber\":53716,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-4096-3cf8eb5c-cf2f-4d28-8e9e-da3d8b3ddfbb\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-4096-3cf8eb5c-cf2f-4d28-8e9e-da3d8b3ddfbb\",\"httpPortOpen\":false,\"ip\":\"96.9.5.6\",\"isConnectedTo\":false,\"maxRam\":4096,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":4095,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omega-net\",2340,16589.730537389638,\"7c2c9554-401e-448c-86ec-dd42dd3a7d6e\"],\"dataMap\":{},\"filename\":\"grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":122.81000000000121,\"pid\":938,\"ramUsage\":1.75,\"server\":\"pserv-4096-3cf8eb5c-cf2f-4d28-8e9e-da3d8b3ddfbb\",\"threads\":2340,\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///80166b39-171c-489e-943d-41105d6b5336\",\"moduleSequenceNumber\":56731}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/export async function main(ns) {\\r\\n    const target = ns.args[0]\\r\\n    const threads = ns.args[1]\\r\\n    const delay = ns.args[2]\\r\\n  \\r\\n    if (delay && delay > 0) {\\r\\n      await ns.sleep(delay)\\r\\n    }\\r\\n  \\r\\n    ns.print(`Starting operation: hack on ${target} in ${threads} threads`)\\r\\n    await ns.hack(target, { threads, stock: true })\\r\\n    ns.exit()\\r\\n  }\\r\\n  \",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"pserv-4096-3cf8eb5c-cf2f-4d28-8e9e-da3d8b3ddfbb\",\"_hash\":\"30d9fdd2f5a8bacc809001f44651e87fc2a5770c889d459ab5aa86fb10c18201\",\"moduleSequenceNumber\":56686,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/export async function main(ns) {\\r\\n    const target = ns.args[0]\\r\\n    const threads = ns.args[1]\\r\\n    const delay = ns.args[2]\\r\\n  \\r\\n    if (delay && delay > 0) {\\r\\n      await ns.sleep(delay)\\r\\n    }\\r\\n  \\r\\n    ns.print(`Starting operation: grow on ${target} in ${threads} threads`)\\r\\n    await ns.grow(target, { threads, stock: true })\\r\\n    ns.exit()\\r\\n  }\\r\\n  \",\"filename\":\"grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///80166b39-171c-489e-943d-41105d6b5336\",\"moduleSequenceNumber\":56731}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"pserv-4096-3cf8eb5c-cf2f-4d28-8e9e-da3d8b3ddfbb\",\"_hash\":\"c43d4c7c8798e16588b33c740af14ea55f3ecddd2586b8cc3336577ba8faa5f8\",\"moduleSequenceNumber\":56731,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/export async function main(ns) {\\r\\n    const target = ns.args[0]\\r\\n    const threads = ns.args[1]\\r\\n    const delay = ns.args[2]\\r\\n  \\r\\n    if (delay && delay > 0) {\\r\\n      await ns.sleep(delay)\\r\\n    }\\r\\n  \\r\\n    ns.print(`Starting operation: weaken on ${target} in ${threads} threads`)\\r\\n    await ns.weaken(target, { threads, stock: true })\\r\\n    ns.exit()\\r\\n  }\\r\\n  \",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"pserv-4096-3cf8eb5c-cf2f-4d28-8e9e-da3d8b3ddfbb\",\"_hash\":\"7656e4aac5fc95a4a03444258a0cf4af92d88b1dd44a7486167d2200da1eb442\",\"moduleSequenceNumber\":56688,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-4096-5eeeaf7a-f719-4766-a0d3-b850dde4b604\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-4096-5eeeaf7a-f719-4766-a0d3-b850dde4b604\",\"httpPortOpen\":false,\"ip\":\"27.6.5.7\",\"isConnectedTo\":false,\"maxRam\":4096,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":4095,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omega-net\",2340,16589.730537389638,\"f96a377e-2a09-4406-9793-d32941e5bf16\"],\"dataMap\":{},\"filename\":\"grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":122.81000000000121,\"pid\":939,\"ramUsage\":1.75,\"server\":\"pserv-4096-5eeeaf7a-f719-4766-a0d3-b850dde4b604\",\"threads\":2340,\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///80166b39-171c-489e-943d-41105d6b5336\",\"moduleSequenceNumber\":56732}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/export async function main(ns) {\\r\\n    const target = ns.args[0]\\r\\n    const threads = ns.args[1]\\r\\n    const delay = ns.args[2]\\r\\n  \\r\\n    if (delay && delay > 0) {\\r\\n      await ns.sleep(delay)\\r\\n    }\\r\\n  \\r\\n    ns.print(`Starting operation: hack on ${target} in ${threads} threads`)\\r\\n    await ns.hack(target, { threads, stock: true })\\r\\n    ns.exit()\\r\\n  }\\r\\n  \",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"pserv-4096-5eeeaf7a-f719-4766-a0d3-b850dde4b604\",\"_hash\":\"30d9fdd2f5a8bacc809001f44651e87fc2a5770c889d459ab5aa86fb10c18201\",\"moduleSequenceNumber\":56692,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/export async function main(ns) {\\r\\n    const target = ns.args[0]\\r\\n    const threads = ns.args[1]\\r\\n    const delay = ns.args[2]\\r\\n  \\r\\n    if (delay && delay > 0) {\\r\\n      await ns.sleep(delay)\\r\\n    }\\r\\n  \\r\\n    ns.print(`Starting operation: grow on ${target} in ${threads} threads`)\\r\\n    await ns.grow(target, { threads, stock: true })\\r\\n    ns.exit()\\r\\n  }\\r\\n  \",\"filename\":\"grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///80166b39-171c-489e-943d-41105d6b5336\",\"moduleSequenceNumber\":56732}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"pserv-4096-5eeeaf7a-f719-4766-a0d3-b850dde4b604\",\"_hash\":\"c43d4c7c8798e16588b33c740af14ea55f3ecddd2586b8cc3336577ba8faa5f8\",\"moduleSequenceNumber\":56732,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/export async function main(ns) {\\r\\n    const target = ns.args[0]\\r\\n    const threads = ns.args[1]\\r\\n    const delay = ns.args[2]\\r\\n  \\r\\n    if (delay && delay > 0) {\\r\\n      await ns.sleep(delay)\\r\\n    }\\r\\n  \\r\\n    ns.print(`Starting operation: weaken on ${target} in ${threads} threads`)\\r\\n    await ns.weaken(target, { threads, stock: true })\\r\\n    ns.exit()\\r\\n  }\\r\\n  \",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"pserv-4096-5eeeaf7a-f719-4766-a0d3-b850dde4b604\",\"_hash\":\"7656e4aac5fc95a4a03444258a0cf4af92d88b1dd44a7486167d2200da1eb442\",\"moduleSequenceNumber\":56694,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-4096-28c8b228-cb8f-4094-b5fa-91411026cd10\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-4096-28c8b228-cb8f-4094-b5fa-91411026cd10\",\"httpPortOpen\":false,\"ip\":\"44.1.7.4\",\"isConnectedTo\":false,\"maxRam\":4096,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":4095,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omega-net\",2340,16589.730537389638,\"08b5b4d9-3a80-44bb-88be-d2571fda9763\"],\"dataMap\":{},\"filename\":\"grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":122.81000000000121,\"pid\":940,\"ramUsage\":1.75,\"server\":\"pserv-4096-28c8b228-cb8f-4094-b5fa-91411026cd10\",\"threads\":2340,\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///80166b39-171c-489e-943d-41105d6b5336\",\"moduleSequenceNumber\":56733}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/export async function main(ns) {\\r\\n    const target = ns.args[0]\\r\\n    const threads = ns.args[1]\\r\\n    const delay = ns.args[2]\\r\\n  \\r\\n    if (delay && delay > 0) {\\r\\n      await ns.sleep(delay)\\r\\n    }\\r\\n  \\r\\n    ns.print(`Starting operation: hack on ${target} in ${threads} threads`)\\r\\n    await ns.hack(target, { threads, stock: true })\\r\\n    ns.exit()\\r\\n  }\\r\\n  \",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"pserv-4096-28c8b228-cb8f-4094-b5fa-91411026cd10\",\"_hash\":\"30d9fdd2f5a8bacc809001f44651e87fc2a5770c889d459ab5aa86fb10c18201\",\"moduleSequenceNumber\":56698,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/export async function main(ns) {\\r\\n    const target = ns.args[0]\\r\\n    const threads = ns.args[1]\\r\\n    const delay = ns.args[2]\\r\\n  \\r\\n    if (delay && delay > 0) {\\r\\n      await ns.sleep(delay)\\r\\n    }\\r\\n  \\r\\n    ns.print(`Starting operation: grow on ${target} in ${threads} threads`)\\r\\n    await ns.grow(target, { threads, stock: true })\\r\\n    ns.exit()\\r\\n  }\\r\\n  \",\"filename\":\"grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///80166b39-171c-489e-943d-41105d6b5336\",\"moduleSequenceNumber\":56733}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"pserv-4096-28c8b228-cb8f-4094-b5fa-91411026cd10\",\"_hash\":\"c43d4c7c8798e16588b33c740af14ea55f3ecddd2586b8cc3336577ba8faa5f8\",\"moduleSequenceNumber\":56733,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/export async function main(ns) {\\r\\n    const target = ns.args[0]\\r\\n    const threads = ns.args[1]\\r\\n    const delay = ns.args[2]\\r\\n  \\r\\n    if (delay && delay > 0) {\\r\\n      await ns.sleep(delay)\\r\\n    }\\r\\n  \\r\\n    ns.print(`Starting operation: weaken on ${target} in ${threads} threads`)\\r\\n    await ns.weaken(target, { threads, stock: true })\\r\\n    ns.exit()\\r\\n  }\\r\\n  \",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"pserv-4096-28c8b228-cb8f-4094-b5fa-91411026cd10\",\"_hash\":\"7656e4aac5fc95a4a03444258a0cf4af92d88b1dd44a7486167d2200da1eb442\",\"moduleSequenceNumber\":56700,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-4096-2a571507-1dcd-44ab-9cb0-6520abb63c7d\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-4096-2a571507-1dcd-44ab-9cb0-6520abb63c7d\",\"httpPortOpen\":false,\"ip\":\"25.9.6.4\",\"isConnectedTo\":false,\"maxRam\":4096,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":4095,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omega-net\",2340,16589.730537389638,\"4878f75f-eeec-486f-be5c-8f74735ca273\"],\"dataMap\":{},\"filename\":\"grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":122.81000000000121,\"pid\":941,\"ramUsage\":1.75,\"server\":\"pserv-4096-2a571507-1dcd-44ab-9cb0-6520abb63c7d\",\"threads\":2340,\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///80166b39-171c-489e-943d-41105d6b5336\",\"moduleSequenceNumber\":56734}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/export async function main(ns) {\\r\\n    const target = ns.args[0]\\r\\n    const threads = ns.args[1]\\r\\n    const delay = ns.args[2]\\r\\n  \\r\\n    if (delay && delay > 0) {\\r\\n      await ns.sleep(delay)\\r\\n    }\\r\\n  \\r\\n    ns.print(`Starting operation: hack on ${target} in ${threads} threads`)\\r\\n    await ns.hack(target, { threads, stock: true })\\r\\n    ns.exit()\\r\\n  }\\r\\n  \",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"pserv-4096-2a571507-1dcd-44ab-9cb0-6520abb63c7d\",\"_hash\":\"30d9fdd2f5a8bacc809001f44651e87fc2a5770c889d459ab5aa86fb10c18201\",\"moduleSequenceNumber\":56704,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/export async function main(ns) {\\r\\n    const target = ns.args[0]\\r\\n    const threads = ns.args[1]\\r\\n    const delay = ns.args[2]\\r\\n  \\r\\n    if (delay && delay > 0) {\\r\\n      await ns.sleep(delay)\\r\\n    }\\r\\n  \\r\\n    ns.print(`Starting operation: grow on ${target} in ${threads} threads`)\\r\\n    await ns.grow(target, { threads, stock: true })\\r\\n    ns.exit()\\r\\n  }\\r\\n  \",\"filename\":\"grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///80166b39-171c-489e-943d-41105d6b5336\",\"moduleSequenceNumber\":56734}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"pserv-4096-2a571507-1dcd-44ab-9cb0-6520abb63c7d\",\"_hash\":\"c43d4c7c8798e16588b33c740af14ea55f3ecddd2586b8cc3336577ba8faa5f8\",\"moduleSequenceNumber\":56734,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/export async function main(ns) {\\r\\n    const target = ns.args[0]\\r\\n    const threads = ns.args[1]\\r\\n    const delay = ns.args[2]\\r\\n  \\r\\n    if (delay && delay > 0) {\\r\\n      await ns.sleep(delay)\\r\\n    }\\r\\n  \\r\\n    ns.print(`Starting operation: weaken on ${target} in ${threads} threads`)\\r\\n    await ns.weaken(target, { threads, stock: true })\\r\\n    ns.exit()\\r\\n  }\\r\\n  \",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"pserv-4096-2a571507-1dcd-44ab-9cb0-6520abb63c7d\",\"_hash\":\"7656e4aac5fc95a4a03444258a0cf4af92d88b1dd44a7486167d2200da1eb442\",\"moduleSequenceNumber\":56706,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-4096-0ecaf692-4fd7-4c69-a1e8-b12c5c9e56e2\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-4096-0ecaf692-4fd7-4c69-a1e8-b12c5c9e56e2\",\"httpPortOpen\":false,\"ip\":\"70.6.3.8\",\"isConnectedTo\":false,\"maxRam\":4096,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":4095,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omega-net\",2340,16589.730537389638,\"7a13c0fb-1d89-41bd-a632-1dcc46e4c838\"],\"dataMap\":{},\"filename\":\"grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":122.81000000000121,\"pid\":942,\"ramUsage\":1.75,\"server\":\"pserv-4096-0ecaf692-4fd7-4c69-a1e8-b12c5c9e56e2\",\"threads\":2340,\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///80166b39-171c-489e-943d-41105d6b5336\",\"moduleSequenceNumber\":56735}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/export async function main(ns) {\\r\\n    const target = ns.args[0]\\r\\n    const threads = ns.args[1]\\r\\n    const delay = ns.args[2]\\r\\n  \\r\\n    if (delay && delay > 0) {\\r\\n      await ns.sleep(delay)\\r\\n    }\\r\\n  \\r\\n    ns.print(`Starting operation: hack on ${target} in ${threads} threads`)\\r\\n    await ns.hack(target, { threads, stock: true })\\r\\n    ns.exit()\\r\\n  }\\r\\n  \",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"pserv-4096-0ecaf692-4fd7-4c69-a1e8-b12c5c9e56e2\",\"_hash\":\"30d9fdd2f5a8bacc809001f44651e87fc2a5770c889d459ab5aa86fb10c18201\",\"moduleSequenceNumber\":56710,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/export async function main(ns) {\\r\\n    const target = ns.args[0]\\r\\n    const threads = ns.args[1]\\r\\n    const delay = ns.args[2]\\r\\n  \\r\\n    if (delay && delay > 0) {\\r\\n      await ns.sleep(delay)\\r\\n    }\\r\\n  \\r\\n    ns.print(`Starting operation: grow on ${target} in ${threads} threads`)\\r\\n    await ns.grow(target, { threads, stock: true })\\r\\n    ns.exit()\\r\\n  }\\r\\n  \",\"filename\":\"grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///80166b39-171c-489e-943d-41105d6b5336\",\"moduleSequenceNumber\":56735}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"pserv-4096-0ecaf692-4fd7-4c69-a1e8-b12c5c9e56e2\",\"_hash\":\"c43d4c7c8798e16588b33c740af14ea55f3ecddd2586b8cc3336577ba8faa5f8\",\"moduleSequenceNumber\":56735,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/export async function main(ns) {\\r\\n    const target = ns.args[0]\\r\\n    const threads = ns.args[1]\\r\\n    const delay = ns.args[2]\\r\\n  \\r\\n    if (delay && delay > 0) {\\r\\n      await ns.sleep(delay)\\r\\n    }\\r\\n  \\r\\n    ns.print(`Starting operation: weaken on ${target} in ${threads} threads`)\\r\\n    await ns.weaken(target, { threads, stock: true })\\r\\n    ns.exit()\\r\\n  }\\r\\n  \",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"pserv-4096-0ecaf692-4fd7-4c69-a1e8-b12c5c9e56e2\",\"_hash\":\"7656e4aac5fc95a4a03444258a0cf4af92d88b1dd44a7486167d2200da1eb442\",\"moduleSequenceNumber\":56712,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-4096-0107f8d5-c741-4a52-889f-cfb4fe679ad2\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-4096-0107f8d5-c741-4a52-889f-cfb4fe679ad2\",\"httpPortOpen\":false,\"ip\":\"73.2.4.4\",\"isConnectedTo\":false,\"maxRam\":4096,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":4095,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omega-net\",2340,16589.730537389638,\"cf7c2bbc-e9b5-47f3-a584-d7f2a2d5ae9d\"],\"dataMap\":{},\"filename\":\"grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":122.81000000000121,\"pid\":943,\"ramUsage\":1.75,\"server\":\"pserv-4096-0107f8d5-c741-4a52-889f-cfb4fe679ad2\",\"threads\":2340,\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///80166b39-171c-489e-943d-41105d6b5336\",\"moduleSequenceNumber\":56736}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/export async function main(ns) {\\r\\n    const target = ns.args[0]\\r\\n    const threads = ns.args[1]\\r\\n    const delay = ns.args[2]\\r\\n  \\r\\n    if (delay && delay > 0) {\\r\\n      await ns.sleep(delay)\\r\\n    }\\r\\n  \\r\\n    ns.print(`Starting operation: hack on ${target} in ${threads} threads`)\\r\\n    await ns.hack(target, { threads, stock: true })\\r\\n    ns.exit()\\r\\n  }\\r\\n  \",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"pserv-4096-0107f8d5-c741-4a52-889f-cfb4fe679ad2\",\"_hash\":\"30d9fdd2f5a8bacc809001f44651e87fc2a5770c889d459ab5aa86fb10c18201\",\"moduleSequenceNumber\":56716,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/export async function main(ns) {\\r\\n    const target = ns.args[0]\\r\\n    const threads = ns.args[1]\\r\\n    const delay = ns.args[2]\\r\\n  \\r\\n    if (delay && delay > 0) {\\r\\n      await ns.sleep(delay)\\r\\n    }\\r\\n  \\r\\n    ns.print(`Starting operation: grow on ${target} in ${threads} threads`)\\r\\n    await ns.grow(target, { threads, stock: true })\\r\\n    ns.exit()\\r\\n  }\\r\\n  \",\"filename\":\"grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///80166b39-171c-489e-943d-41105d6b5336\",\"moduleSequenceNumber\":56736}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"pserv-4096-0107f8d5-c741-4a52-889f-cfb4fe679ad2\",\"_hash\":\"c43d4c7c8798e16588b33c740af14ea55f3ecddd2586b8cc3336577ba8faa5f8\",\"moduleSequenceNumber\":56736,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/export async function main(ns) {\\r\\n    const target = ns.args[0]\\r\\n    const threads = ns.args[1]\\r\\n    const delay = ns.args[2]\\r\\n  \\r\\n    if (delay && delay > 0) {\\r\\n      await ns.sleep(delay)\\r\\n    }\\r\\n  \\r\\n    ns.print(`Starting operation: weaken on ${target} in ${threads} threads`)\\r\\n    await ns.weaken(target, { threads, stock: true })\\r\\n    ns.exit()\\r\\n  }\\r\\n  \",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"pserv-4096-0107f8d5-c741-4a52-889f-cfb4fe679ad2\",\"_hash\":\"7656e4aac5fc95a4a03444258a0cf4af92d88b1dd44a7486167d2200da1eb442\",\"moduleSequenceNumber\":56718,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-4096-2b71c339-8ce0-43c3-ab2f-7c0ac2c977b4\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-4096-2b71c339-8ce0-43c3-ab2f-7c0ac2c977b4\",\"httpPortOpen\":false,\"ip\":\"71.4.6.6\",\"isConnectedTo\":false,\"maxRam\":4096,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":4095,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omega-net\",2340,16589.730537389638,\"1f941a8b-dddb-4906-8701-63819e2c6a6a\"],\"dataMap\":{},\"filename\":\"grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":122.81000000000121,\"pid\":944,\"ramUsage\":1.75,\"server\":\"pserv-4096-2b71c339-8ce0-43c3-ab2f-7c0ac2c977b4\",\"threads\":2340,\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///80166b39-171c-489e-943d-41105d6b5336\",\"moduleSequenceNumber\":56737}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/export async function main(ns) {\\r\\n    const target = ns.args[0]\\r\\n    const threads = ns.args[1]\\r\\n    const delay = ns.args[2]\\r\\n  \\r\\n    if (delay && delay > 0) {\\r\\n      await ns.sleep(delay)\\r\\n    }\\r\\n  \\r\\n    ns.print(`Starting operation: hack on ${target} in ${threads} threads`)\\r\\n    await ns.hack(target, { threads, stock: true })\\r\\n    ns.exit()\\r\\n  }\\r\\n  \",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"pserv-4096-2b71c339-8ce0-43c3-ab2f-7c0ac2c977b4\",\"_hash\":\"30d9fdd2f5a8bacc809001f44651e87fc2a5770c889d459ab5aa86fb10c18201\",\"moduleSequenceNumber\":56722,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/export async function main(ns) {\\r\\n    const target = ns.args[0]\\r\\n    const threads = ns.args[1]\\r\\n    const delay = ns.args[2]\\r\\n  \\r\\n    if (delay && delay > 0) {\\r\\n      await ns.sleep(delay)\\r\\n    }\\r\\n  \\r\\n    ns.print(`Starting operation: grow on ${target} in ${threads} threads`)\\r\\n    await ns.grow(target, { threads, stock: true })\\r\\n    ns.exit()\\r\\n  }\\r\\n  \",\"filename\":\"grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///80166b39-171c-489e-943d-41105d6b5336\",\"moduleSequenceNumber\":56737}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"pserv-4096-2b71c339-8ce0-43c3-ab2f-7c0ac2c977b4\",\"_hash\":\"c43d4c7c8798e16588b33c740af14ea55f3ecddd2586b8cc3336577ba8faa5f8\",\"moduleSequenceNumber\":56737,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/export async function main(ns) {\\r\\n    const target = ns.args[0]\\r\\n    const threads = ns.args[1]\\r\\n    const delay = ns.args[2]\\r\\n  \\r\\n    if (delay && delay > 0) {\\r\\n      await ns.sleep(delay)\\r\\n    }\\r\\n  \\r\\n    ns.print(`Starting operation: weaken on ${target} in ${threads} threads`)\\r\\n    await ns.weaken(target, { threads, stock: true })\\r\\n    ns.exit()\\r\\n  }\\r\\n  \",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"pserv-4096-2b71c339-8ce0-43c3-ab2f-7c0ac2c977b4\",\"_hash\":\"7656e4aac5fc95a4a03444258a0cf4af92d88b1dd44a7486167d2200da1eb442\",\"moduleSequenceNumber\":56724,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-4096-87cb486d-447f-49cf-b4a8-ef39fe4ff643\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-4096-87cb486d-447f-49cf-b4a8-ef39fe4ff643\",\"httpPortOpen\":false,\"ip\":\"84.6.4.1\",\"isConnectedTo\":false,\"maxRam\":4096,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":4095,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omega-net\",2340,16589.730537389638,\"ceaa54e5-2c35-44cf-a8e9-226519b3dc9f\"],\"dataMap\":{},\"filename\":\"grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":122.81000000000121,\"pid\":945,\"ramUsage\":1.75,\"server\":\"pserv-4096-87cb486d-447f-49cf-b4a8-ef39fe4ff643\",\"threads\":2340,\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///80166b39-171c-489e-943d-41105d6b5336\",\"moduleSequenceNumber\":56738}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/export async function main(ns) {\\r\\n    const target = ns.args[0]\\r\\n    const threads = ns.args[1]\\r\\n    const delay = ns.args[2]\\r\\n  \\r\\n    if (delay && delay > 0) {\\r\\n      await ns.sleep(delay)\\r\\n    }\\r\\n  \\r\\n    ns.print(`Starting operation: hack on ${target} in ${threads} threads`)\\r\\n    await ns.hack(target, { threads, stock: true })\\r\\n    ns.exit()\\r\\n  }\\r\\n  \",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"pserv-4096-87cb486d-447f-49cf-b4a8-ef39fe4ff643\",\"_hash\":\"30d9fdd2f5a8bacc809001f44651e87fc2a5770c889d459ab5aa86fb10c18201\",\"moduleSequenceNumber\":56728,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/export async function main(ns) {\\r\\n    const target = ns.args[0]\\r\\n    const threads = ns.args[1]\\r\\n    const delay = ns.args[2]\\r\\n  \\r\\n    if (delay && delay > 0) {\\r\\n      await ns.sleep(delay)\\r\\n    }\\r\\n  \\r\\n    ns.print(`Starting operation: grow on ${target} in ${threads} threads`)\\r\\n    await ns.grow(target, { threads, stock: true })\\r\\n    ns.exit()\\r\\n  }\\r\\n  \",\"filename\":\"grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///80166b39-171c-489e-943d-41105d6b5336\",\"moduleSequenceNumber\":56738}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"pserv-4096-87cb486d-447f-49cf-b4a8-ef39fe4ff643\",\"_hash\":\"c43d4c7c8798e16588b33c740af14ea55f3ecddd2586b8cc3336577ba8faa5f8\",\"moduleSequenceNumber\":56738,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/export async function main(ns) {\\r\\n    const target = ns.args[0]\\r\\n    const threads = ns.args[1]\\r\\n    const delay = ns.args[2]\\r\\n  \\r\\n    if (delay && delay > 0) {\\r\\n      await ns.sleep(delay)\\r\\n    }\\r\\n  \\r\\n    ns.print(`Starting operation: weaken on ${target} in ${threads} threads`)\\r\\n    await ns.weaken(target, { threads, stock: true })\\r\\n    ns.exit()\\r\\n  }\\r\\n  \",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"pserv-4096-87cb486d-447f-49cf-b4a8-ef39fe4ff643\",\"_hash\":\"7656e4aac5fc95a4a03444258a0cf4af92d88b1dd44a7486167d2200da1eb442\",\"moduleSequenceNumber\":56730,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}}}","CompaniesSave":"{\"ECorp\":{\"ctor\":\"Company\",\"data\":{\"name\":\"ECorp\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":3,\"salaryMultiplier\":3,\"jobStatReqOffset\":249,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.014,\"isMegacorp\":false}},\"MegaCorp\":{\"ctor\":\"Company\",\"data\":{\"name\":\"MegaCorp\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":3,\"salaryMultiplier\":3,\"jobStatReqOffset\":249,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":1.9119,\"isMegacorp\":false}},\"Bachman & Associates\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Bachman & Associates\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.6,\"salaryMultiplier\":2.6,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.014,\"isMegacorp\":false}},\"Blade Industries\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Blade Industries\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.75,\"salaryMultiplier\":2.75,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.014,\"isMegacorp\":false}},\"NWO\":{\"ctor\":\"Company\",\"data\":{\"name\":\"NWO\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.75,\"salaryMultiplier\":2.75,\"jobStatReqOffset\":249,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.014,\"isMegacorp\":false}},\"Clarke Incorporated\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Clarke Incorporated\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.25,\"salaryMultiplier\":2.25,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.014,\"isMegacorp\":false}},\"OmniTek Incorporated\":{\"ctor\":\"Company\",\"data\":{\"name\":\"OmniTek Incorporated\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.25,\"salaryMultiplier\":2.25,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.4526,\"isMegacorp\":false}},\"Four Sigma\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Four Sigma\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.5,\"salaryMultiplier\":2.5,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.014,\"isMegacorp\":false}},\"KuaiGong International\":{\"ctor\":\"Company\",\"data\":{\"name\":\"KuaiGong International\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.2,\"salaryMultiplier\":2.2,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.6933,\"isMegacorp\":false}},\"Fulcrum Technologies\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Fulcrum Technologies\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true},\"expMultiplier\":2,\"salaryMultiplier\":2,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.014,\"isMegacorp\":false}},\"Storm Technologies\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Storm Technologies\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true},\"expMultiplier\":1.8,\"salaryMultiplier\":1.8,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.014,\"isMegacorp\":false}},\"DefComm\":{\"ctor\":\"Company\",\"data\":{\"name\":\"DefComm\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.75,\"salaryMultiplier\":1.75,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.014,\"isMegacorp\":false}},\"Helios Labs\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Helios Labs\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.8,\"salaryMultiplier\":1.8,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.014,\"isMegacorp\":false}},\"VitaLife\":{\"ctor\":\"Company\",\"data\":{\"name\":\"VitaLife\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.8,\"salaryMultiplier\":1.8,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.014,\"isMegacorp\":false}},\"Icarus Microsystems\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Icarus Microsystems\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.9,\"salaryMultiplier\":1.9,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.014,\"isMegacorp\":false}},\"Universal Energy\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Universal Energy\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":2,\"salaryMultiplier\":2,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":2235.7843859191694,\"favor\":16.5116,\"isMegacorp\":false}},\"Galactic Cybersystems\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Galactic Cybersystems\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.9,\"salaryMultiplier\":1.9,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.014,\"isMegacorp\":false}},\"AeroCorp\":{\"ctor\":\"Company\",\"data\":{\"name\":\"AeroCorp\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Operations Manager\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.7,\"salaryMultiplier\":1.7,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.014,\"isMegacorp\":false}},\"Omnia Cybersystems\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Omnia Cybersystems\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Operations Manager\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.7,\"salaryMultiplier\":1.7,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.226,\"isMegacorp\":false}},\"Solaris Space Systems\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Solaris Space Systems\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Operations Manager\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.7,\"salaryMultiplier\":1.7,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.014,\"isMegacorp\":false}},\"DeltaOne\":{\"ctor\":\"Company\",\"data\":{\"name\":\"DeltaOne\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Operations Manager\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.6,\"salaryMultiplier\":1.6,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":7.107133006410013,\"favor\":0.014,\"isMegacorp\":false}},\"Global Pharmaceuticals\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Global Pharmaceuticals\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.8,\"salaryMultiplier\":1.8,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.014,\"isMegacorp\":false}},\"Nova Medical\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Nova Medical\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.75,\"salaryMultiplier\":1.75,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":8.8528,\"isMegacorp\":false}},\"Central Intelligence Agency\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Central Intelligence Agency\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true,\"Field Agent\":true,\"Secret Agent\":true,\"Special Operative\":true},\"expMultiplier\":2,\"salaryMultiplier\":2,\"jobStatReqOffset\":149,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":3.5405,\"isMegacorp\":false}},\"National Security Agency\":{\"ctor\":\"Company\",\"data\":{\"name\":\"National Security Agency\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true,\"Field Agent\":true,\"Secret Agent\":true,\"Special Operative\":true},\"expMultiplier\":2,\"salaryMultiplier\":2,\"jobStatReqOffset\":149,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":30.1277,\"isMegacorp\":false}},\"Watchdog Security\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Watchdog Security\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true,\"Field Agent\":true,\"Secret Agent\":true,\"Special Operative\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.5,\"salaryMultiplier\":1.5,\"jobStatReqOffset\":124,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.014,\"isMegacorp\":false}},\"LexoCorp\":{\"ctor\":\"Company\",\"data\":{\"name\":\"LexoCorp\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.4,\"salaryMultiplier\":1.4,\"jobStatReqOffset\":99,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.014,\"isMegacorp\":false}},\"Rho Construction\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Rho Construction\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true},\"expMultiplier\":1.3,\"salaryMultiplier\":1.3,\"jobStatReqOffset\":49,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.014,\"isMegacorp\":false}},\"Alpha Enterprises\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Alpha Enterprises\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.5,\"salaryMultiplier\":1.5,\"jobStatReqOffset\":99,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.8397,\"isMegacorp\":false}},\"Aevum Police Headquarters\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Aevum Police Headquarters\",\"info\":\"\",\"companyPositions\":{\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true},\"expMultiplier\":1.3,\"salaryMultiplier\":1.3,\"jobStatReqOffset\":99,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.014,\"isMegacorp\":false}},\"SysCore Securities\":{\"ctor\":\"Company\",\"data\":{\"name\":\"SysCore Securities\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true},\"expMultiplier\":1.3,\"salaryMultiplier\":1.3,\"jobStatReqOffset\":124,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.014,\"isMegacorp\":false}},\"CompuTek\":{\"ctor\":\"Company\",\"data\":{\"name\":\"CompuTek\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true},\"expMultiplier\":1.2,\"salaryMultiplier\":1.2,\"jobStatReqOffset\":74,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.014,\"isMegacorp\":false}},\"NetLink Technologies\":{\"ctor\":\"Company\",\"data\":{\"name\":\"NetLink Technologies\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true},\"expMultiplier\":1.2,\"salaryMultiplier\":1.2,\"jobStatReqOffset\":99,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.014,\"isMegacorp\":false}},\"Carmichael Security\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Carmichael Security\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Field Agent\":true,\"Secret Agent\":true,\"Special Operative\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.2,\"salaryMultiplier\":1.2,\"jobStatReqOffset\":74,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.2217,\"isMegacorp\":false}},\"FoodNStuff\":{\"ctor\":\"Company\",\"data\":{\"name\":\"FoodNStuff\",\"info\":\"\",\"companyPositions\":{\"Employee\":true,\"Part-time Employee\":true},\"expMultiplier\":1,\"salaryMultiplier\":1,\"jobStatReqOffset\":0,\"isPlayerEmployed\":false,\"playerReputation\":3.15390250216056,\"favor\":2.8276,\"isMegacorp\":false}},\"Joe's Guns\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Joe's Guns\",\"info\":\"\",\"companyPositions\":{\"Employee\":true,\"Part-time Employee\":true},\"expMultiplier\":1,\"salaryMultiplier\":1,\"jobStatReqOffset\":0,\"isPlayerEmployed\":false,\"playerReputation\":8001.026818043565,\"favor\":0.0246,\"isMegacorp\":false}},\"Omega Software\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Omega Software\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true},\"expMultiplier\":1.1,\"salaryMultiplier\":1.1,\"jobStatReqOffset\":49,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.014,\"isMegacorp\":false}},\"Noodle Bar\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Noodle Bar\",\"info\":\"\",\"companyPositions\":{\"Waiter\":true,\"Part-time Waiter\":true},\"expMultiplier\":1,\"salaryMultiplier\":1,\"jobStatReqOffset\":0,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.014,\"isMegacorp\":false}}}","FactionsSave":"{\"Illuminati\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Synthetic Heart\",\"Synfibril Muscle\",\"NEMEAN Subdermal Weave\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"NeuroFlux Governor\",\"QLink\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Illuminati\",\"playerReputation\":0}},\"Daedalus\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Synthetic Heart\",\"Synfibril Muscle\",\"NEMEAN Subdermal Weave\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"NeuroFlux Governor\",\"The Red Pill\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Daedalus\",\"playerReputation\":0}},\"The Covenant\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Augmented Targeting III\",\"Synthetic Heart\",\"Synfibril Muscle\",\"Combat Rib III\",\"NEMEAN Subdermal Weave\",\"Graphene Bone Lacings\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"NeuroFlux Governor\",\"SPTN-97 Gene Modification\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"The Covenant\",\"playerReputation\":0}},\"ECorp\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Graphene Bionic Spine Upgrade\",\"Graphene Bionic Legs Upgrade\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"PC Direct-Neural Interface\",\"PC Direct-Neural Interface Optimization Submodule\",\"NeuroFlux Governor\",\"ECorp HVMind Implant\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"ECorp\",\"playerReputation\":0}},\"MegaCorp\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Graphene Bionic Legs Upgrade\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"ADR-V1 Pheromone Gene\",\"NeuroFlux Governor\",\"CordiARC Fusion Reactor\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"MegaCorp\",\"playerReputation\":0}},\"Bachman & Associates\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Enhanced Social Interaction Implant\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"Speech Enhancement\",\"FocusWire\",\"ADR-V2 Pheromone Gene\",\"NeuroFlux Governor\",\"SmartJaw\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Bachman & Associates\",\"playerReputation\":0}},\"Blade Industries\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Synfibril Muscle\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Nanofiber Weave\",\"Bionic Spine\",\"Bionic Legs\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"PC Direct-Neural Interface\",\"PC Direct-Neural Interface Optimization Submodule\",\"NeuroFlux Governor\",\"HyperSight Corneal Implant\",\"Neotra\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Blade Industries\",\"playerReputation\":0}},\"NWO\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Synthetic Heart\",\"Synfibril Muscle\",\"Enhanced Social Interaction Implant\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"ADR-V1 Pheromone Gene\",\"NeuroFlux Governor\",\"Neurotrainer III\",\"Power Recirculation Core\",\"Xanipher\",\"Hydroflame Left Arm\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"NWO\",\"playerReputation\":0}},\"Clarke Incorporated\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Enhanced Social Interaction Implant\",\"Neuralstimulator\",\"Neuronal Densification\",\"Nuoptimal Nootropic Injector Implant\",\"Speech Enhancement\",\"FocusWire\",\"ADR-V2 Pheromone Gene\",\"NeuroFlux Governor\",\"nextSENS Gene Modification\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Clarke Incorporated\",\"playerReputation\":0}},\"OmniTek Incorporated\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Nanofiber Weave\",\"Bionic Spine\",\"Bionic Legs\",\"Enhanced Social Interaction Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"PC Direct-Neural Interface\",\"NeuroFlux Governor\",\"OmniTek InfoLoad\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"OmniTek Incorporated\",\"playerReputation\":0}},\"Four Sigma\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Enhanced Social Interaction Implant\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"Speech Enhancement\",\"FocusWire\",\"PC Direct-Neural Interface\",\"ADR-V1 Pheromone Gene\",\"ADR-V2 Pheromone Gene\",\"NeuroFlux Governor\",\"Neurotrainer III\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Four Sigma\",\"playerReputation\":0}},\"KuaiGong International\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Synthetic Heart\",\"Synfibril Muscle\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Bionic Spine\",\"Bionic Legs\",\"Embedded Netburner Module Core V2 Upgrade\",\"Speech Enhancement\",\"FocusWire\",\"NeuroFlux Governor\",\"HyperSight Corneal Implant\",\"Photosynthetic Cells\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"KuaiGong International\",\"playerReputation\":0}},\"Fulcrum Secret Technologies\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Synthetic Heart\",\"Synfibril Muscle\",\"Nanofiber Weave\",\"NEMEAN Subdermal Weave\",\"Graphene Bone Lacings\",\"Graphene Bionic Spine Upgrade\",\"Graphene Bionic Legs Upgrade\",\"Artificial Bio-neural Network Implant\",\"Enhanced Myelin Sheathing\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"PC Direct-Neural Interface Optimization Submodule\",\"PC Direct-Neural Interface NeuroNet Injector\",\"NeuroFlux Governor\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Fulcrum Secret Technologies\",\"playerReputation\":0}},\"BitRunners\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Artificial Bio-neural Network Implant\",\"Enhanced Myelin Sheathing\",\"DataJack\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Neural Accelerator\",\"Cranial Signal Processors - Gen III\",\"Cranial Signal Processors - Gen IV\",\"Cranial Signal Processors - Gen V\",\"NeuroFlux Governor\",\"Neurotrainer II\",\"BitRunners Neurolink\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"BitRunners\",\"playerReputation\":0}},\"The Black Hand\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"Artificial Synaptic Potentiation\",\"Enhanced Myelin Sheathing\",\"DataJack\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Neuralstimulator\",\"Cranial Signal Processors - Gen III\",\"Cranial Signal Processors - Gen IV\",\"NeuroFlux Governor\",\"The Black Hand\"],\"favor\":87.6476,\"isBanned\":false,\"isMember\":true,\"name\":\"The Black Hand\",\"playerReputation\":2461.9297673944066}},\"NiteSec\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"BitWire\",\"Artificial Synaptic Potentiation\",\"Neural-Retention Enhancement\",\"DataJack\",\"Embedded Netburner Module\",\"Cranial Signal Processors - Gen II\",\"Cranial Signal Processors - Gen III\",\"NeuroFlux Governor\",\"Neurotrainer II\",\"CRTX42-AA Gene Modification\"],\"favor\":8.2153,\"isBanned\":false,\"isMember\":true,\"name\":\"NiteSec\",\"playerReputation\":7603.810053665991}},\"Aevum\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Wired Reflexes\",\"Speech Processor Implant\",\"Synaptic Enhancement Implant\",\"Neuralstimulator\",\"NeuroFlux Governor\",\"Neurotrainer I\",\"PCMatrix\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Aevum\",\"playerReputation\":0}},\"Chongqing\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Speech Processor Implant\",\"DataJack\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"NeuroFlux Governor\",\"Neuregen Gene Modification\"],\"favor\":8.8153,\"isBanned\":false,\"isMember\":false,\"name\":\"Chongqing\",\"playerReputation\":0}},\"Ishima\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Augmented Targeting I\",\"Combat Rib I\",\"Wired Reflexes\",\"Speech Processor Implant\",\"Neuralstimulator\",\"NeuroFlux Governor\",\"INFRARET Enhancement\"],\"favor\":3.4636,\"isBanned\":false,\"isMember\":false,\"name\":\"Ishima\",\"playerReputation\":0}},\"New Tokyo\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Speech Processor Implant\",\"DataJack\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"NeuroFlux Governor\",\"NutriGen Implant\"],\"favor\":3.4741,\"isBanned\":false,\"isMember\":false,\"name\":\"New Tokyo\",\"playerReputation\":0}},\"Sector-12\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"Augmented Targeting I\",\"Augmented Targeting II\",\"Wired Reflexes\",\"Speech Processor Implant\",\"Neuralstimulator\",\"NeuroFlux Governor\",\"CashRoot Starter Kit\"],\"favor\":38.5722,\"isBanned\":false,\"isMember\":false,\"name\":\"Sector-12\",\"playerReputation\":0}},\"Volhaven\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Combat Rib I\",\"Combat Rib II\",\"Wired Reflexes\",\"Speech Processor Implant\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"NeuroFlux Governor\",\"DermaForce Particle Barrier\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Volhaven\",\"playerReputation\":0}},\"Speakers for the Dead\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Unstable Circadian Modulator\",\"Synthetic Heart\",\"Synfibril Muscle\",\"Nanofiber Weave\",\"Wired Reflexes\",\"Bionic Spine\",\"Bionic Legs\",\"Speech Enhancement\",\"The Shadow's Simulacrum\",\"NeuroFlux Governor\",\"Graphene BrachiBlades Upgrade\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Speakers for the Dead\",\"playerReputation\":0}},\"The Dark Army\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"HemoRecirculator\",\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Nanofiber Weave\",\"Wired Reflexes\",\"The Shadow's Simulacrum\",\"NeuroFlux Governor\",\"Power Recirculation Core\",\"Graphene Bionic Arms Upgrade\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"The Dark Army\",\"playerReputation\":0}},\"The Syndicate\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"HemoRecirculator\",\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Nanofiber Weave\",\"NEMEAN Subdermal Weave\",\"Wired Reflexes\",\"Bionic Spine\",\"Bionic Legs\",\"ADR-V1 Pheromone Gene\",\"The Shadow's Simulacrum\",\"NeuroFlux Governor\",\"Power Recirculation Core\",\"BrachiBlades\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"The Syndicate\",\"playerReputation\":0}},\"Silhouette\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Speech Processor Implant\",\"TITN-41 Gene-Modification Injection\",\"ADR-V2 Pheromone Gene\",\"NeuroFlux Governor\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Silhouette\",\"playerReputation\":0}},\"Tetrads\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"HemoRecirculator\",\"NeuroFlux Governor\",\"LuminCloaking-V1 Skin Implant\",\"LuminCloaking-V2 Skin Implant\",\"Power Recirculation Core\",\"Bionic Arms\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Tetrads\",\"playerReputation\":0}},\"Slum Snakes\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Augmented Targeting I\",\"Combat Rib I\",\"Wired Reflexes\",\"NeuroFlux Governor\",\"LuminCloaking-V1 Skin Implant\",\"LuminCloaking-V2 Skin Implant\",\"SmartSonar Implant\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Slum Snakes\",\"playerReputation\":0}},\"Netburners\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"Hacknet Node CPU Architecture Neural-Upload\",\"Hacknet Node Cache Architecture Neural-Upload\",\"Hacknet Node NIC Architecture Neural-Upload\",\"Hacknet Node Kernel Direct-Neural Interface\",\"Hacknet Node Core Direct-Neural Interface\",\"NeuroFlux Governor\"],\"favor\":46.3597,\"isBanned\":false,\"isMember\":true,\"name\":\"Netburners\",\"playerReputation\":1209.0423395628127}},\"Tian Di Hui\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Nanofiber Weave\",\"Wired Reflexes\",\"Speech Processor Implant\",\"Nuoptimal Nootropic Injector Implant\",\"Speech Enhancement\",\"ADR-V1 Pheromone Gene\",\"NeuroFlux Governor\",\"Social Negotiation Assistant (S.N.A)\",\"Neuroreceptor Management Implant\"],\"favor\":81.3768,\"isBanned\":false,\"isMember\":false,\"name\":\"Tian Di Hui\",\"playerReputation\":0}},\"CyberSec\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"BitWire\",\"Synaptic Enhancement Implant\",\"Cranial Signal Processors - Gen I\",\"Cranial Signal Processors - Gen II\",\"NeuroFlux Governor\",\"Neurotrainer I\"],\"favor\":95.1559,\"isBanned\":false,\"isMember\":true,\"name\":\"CyberSec\",\"playerReputation\":3814.193547436216}},\"Bladeburners\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"EsperTech Bladeburner Eyewear\",\"EMS-4 Recombination\",\"ORION-MKIV Shoulder\",\"Hyperion Plasma Cannon V1\",\"Hyperion Plasma Cannon V2\",\"GOLEM Serum\",\"Vangelis Virus\",\"Vangelis Virus 3.0\",\"I.N.T.E.R.L.I.N.K.E.D\",\"Blade's Runners\",\"BLADE-51b Tesla Armor\",\"BLADE-51b Tesla Armor: Power Cells Upgrade\",\"BLADE-51b Tesla Armor: Energy Shielding Upgrade\",\"BLADE-51b Tesla Armor: Unibeam Upgrade\",\"BLADE-51b Tesla Armor: Omnibeam Upgrade\",\"BLADE-51b Tesla Armor: IPU Upgrade\",\"The Blade's Simulacrum\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Bladeburners\",\"playerReputation\":0}},\"Church of the Machine God\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Stanek's Gift - Genesis\",\"Stanek's Gift - Awakening\",\"Stanek's Gift - Serenity\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Church of the Machine God\",\"playerReputation\":0}}}","AliasesSave":"{\"vi\":\"nano\",\"cl\":\"cls\"}","GlobalAliasesSave":"{}","MessagesSave":"{\"j0.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"j0.msg\",\"msg\":\"I know you can sense it. I know you're searching for it. It's why you spend night after night at your computer. <br><br>It's real, I've seen it. And I can help you find it. But not right now. You're not ready yet.<br><br>Use this program to track your progress<br><br>The fl1ght.exe program was added to your home computer<br><br>-jump3R\",\"recvd\":true}},\"j1.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"j1.msg\",\"msg\":\"Soon you will be contacted by a hacking group known as CyberSec. They can help you with your search. <br><br>You should join them, garner their favor, and exploit them for their Augmentations. But do not trust them. They are not what they seem. No one is.<br><br>-jump3R\",\"recvd\":true}},\"j2.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"j2.msg\",\"msg\":\"Do not try to save the world. There is no world to save. If you want to find the truth, worry only about yourself. Ethics and morals will get you killed. <br><br>Watch out for a hacking group known as NiteSec.<br><br>-jump3R\",\"recvd\":true}},\"j3.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"j3.msg\",\"msg\":\"You must learn to walk before you can run. And you must run before you can fly. Look for the black hand. <br><br>I.I.I.I <br><br>-jump3R\",\"recvd\":true}},\"j4.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"j4.msg\",\"msg\":\"To find what you are searching for, you must understand the bits. The bits are all around us. The runners will help you.<br><br>-jump3R\",\"recvd\":false}},\"csec-test.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"csec-test.msg\",\"msg\":\"We've been watching you. Your skills are very impressive. But you're wasting your talents. If you join us, you can put your skills to good use and change the world for the better. If you join us, we can unlock your full potential. <br><br>But first, you must pass our test. Find and install the backdoor on our server. <br><br>-CyberSec\",\"recvd\":true}},\"nitesec-test.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"nitesec-test.msg\",\"msg\":\"People say that the corrupted governments and corporations rule the world. Yes, maybe they do. But do you know who everyone really fears? People like us. Because they can't hide from us. Because they can't fight shadows and ideas with bullets. <br><br>Join us, and people will fear you, too. <br><br>Find and install the backdoor on our server. Then, we will contact you again.<br><br>-NiteSec\",\"recvd\":true}},\"19dfj3l1nd.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"19dfj3l1nd.msg\",\"msg\":\"We know what you are doing. We know what drives you. We know what you are looking for. <br><br> We can help you find the answers.<br><br>run4theh111z\",\"recvd\":false}},\"icarus.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"icarus.msg\",\"msg\":\"@)(#V%*N)@(#*)*C)@#%*)*V)@#(*%V@)(#VN%*)@#(*%<br>)@B(*#%)@)M#B*%V)____FIND___#$@)#%(B*)@#(*%B)<br>@_#(%_@#M(BDSPOMB__THE-CAVE_#)$(*@#$)@#BNBEGB<br>DFLSMFVMV)#@($*)@#*$MV)@#(*$V)M#(*$)M@(#*VM$)\",\"recvd\":false}}}","StockMarketSave":"{\"ECorp\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"ECorp\",\"symbol\":\"ECP\",\"price\":23803.892675630792,\"lastPrice\":23878.800754295033,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.49,\"b\":false,\"otlkMag\":18.10203605372851,\"otlkMagForecast\":32.431293871232015,\"cap\":580131100,\"spreadPerc\":0.1,\"shareTxForMovement\":63007,\"shareTxUntilMovement\":63007,\"totalShares\":94000000,\"maxShares\":18800000}},\"MegaCorp\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"MegaCorp\",\"symbol\":\"MGCP\",\"price\":25456.481776062446,\"lastPrice\":25388.00198786922,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.42,\"b\":true,\"otlkMag\":19.260860136300128,\"otlkMagForecast\":69.18996454767687,\"cap\":61450457,\"spreadPerc\":0.3,\"shareTxForMovement\":53020,\"shareTxUntilMovement\":53020,\"totalShares\":93300000,\"maxShares\":18700000}},\"Blade Industries\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Blade Industries\",\"symbol\":\"BLD\",\"price\":15769.046859142476,\"lastPrice\":15846.013694554182,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.76,\"b\":true,\"otlkMag\":15.489481161493835,\"otlkMagForecast\":63.69918833879256,\"cap\":23762729,\"spreadPerc\":0.4,\"shareTxForMovement\":54185,\"shareTxUntilMovement\":54185,\"totalShares\":123000000,\"maxShares\":24600000}},\"Clarke Incorporated\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Clarke Incorporated\",\"symbol\":\"CLRK\",\"price\":13603.517611110718,\"lastPrice\":13664.672876836685,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.7,\"b\":true,\"otlkMag\":10.71005173106629,\"otlkMagForecast\":61.76216949621908,\"cap\":37731745,\"spreadPerc\":0.4,\"shareTxForMovement\":81100,\"shareTxUntilMovement\":81100,\"totalShares\":144100000,\"maxShares\":28800000}},\"OmniTek Incorporated\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"OmniTek Incorporated\",\"symbol\":\"OMTK\",\"price\":35182.42735228472,\"lastPrice\":35029.45011025718,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.68,\"b\":true,\"otlkMag\":11.700189568119695,\"otlkMagForecast\":61.03162484175615,\"cap\":242218012,\"spreadPerc\":0.2,\"shareTxForMovement\":73070,\"shareTxUntilMovement\":73070,\"totalShares\":52300000,\"maxShares\":10500000}},\"Four Sigma\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Four Sigma\",\"symbol\":\"FSIG\",\"price\":84860.92671485951,\"lastPrice\":85449.5211069307,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":1.08,\"b\":false,\"otlkMag\":17.793581630527445,\"otlkMagForecast\":34.52956711929042,\"cap\":345268210,\"spreadPerc\":0.7,\"shareTxForMovement\":41858,\"shareTxUntilMovement\":41858,\"totalShares\":38600000,\"maxShares\":7700000}},\"KuaiGong International\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"KuaiGong International\",\"symbol\":\"KGI\",\"price\":21772.265525217495,\"lastPrice\":21666.51385735195,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.76,\"b\":true,\"otlkMag\":10.585877282686873,\"otlkMagForecast\":59.55413979502957,\"cap\":519345520,\"spreadPerc\":0.4,\"shareTxForMovement\":66151,\"shareTxUntilMovement\":66151,\"totalShares\":86200000,\"maxShares\":17200000}},\"Fulcrum Technologies\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Fulcrum Technologies\",\"symbol\":\"FLCM\",\"price\":51918.13882954539,\"lastPrice\":52348.262576136134,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":1.29,\"b\":false,\"otlkMag\":18.777470389408307,\"otlkMagForecast\":33.64420414787918,\"cap\":180804521,\"spreadPerc\":0.9,\"shareTxForMovement\":41240,\"shareTxUntilMovement\":41240,\"totalShares\":66700000,\"maxShares\":13300000}},\"Storm Technologies\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Storm Technologies\",\"symbol\":\"STM\",\"price\":25538.024835953856,\"lastPrice\":25405.863756247836,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.81,\"b\":true,\"otlkMag\":6.644958220010474,\"otlkMagForecast\":57.18708200051154,\"cap\":518726183,\"spreadPerc\":0.8,\"shareTxForMovement\":94466,\"shareTxUntilMovement\":94466,\"totalShares\":48400000,\"maxShares\":9700000}},\"DefComm\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"DefComm\",\"symbol\":\"DCOMM\",\"price\":7291.438644101424,\"lastPrice\":7323.749384558509,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.69,\"b\":true,\"otlkMag\":9.623773620142337,\"otlkMagForecast\":60.08413370324738,\"cap\":36699580,\"spreadPerc\":1,\"shareTxForMovement\":81300,\"shareTxUntilMovement\":81300,\"totalShares\":107600000,\"maxShares\":21500000}},\"Helios Labs\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Helios Labs\",\"symbol\":\"HLS\",\"price\":11784.087747248737,\"lastPrice\":11826.468492472017,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.56,\"b\":false,\"otlkMag\":8.776216729556973,\"otlkMagForecast\":40.65708005011654,\"cap\":235214043,\"spreadPerc\":0.6,\"shareTxForMovement\":56343,\"shareTxUntilMovement\":56343,\"totalShares\":74100000,\"maxShares\":14800000}},\"VitaLife\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"VitaLife\",\"symbol\":\"VITA\",\"price\":10935.243268333554,\"lastPrice\":10989.319169851668,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.77,\"b\":false,\"otlkMag\":7.1818121504832675,\"otlkMagForecast\":42.68527591663877,\"cap\":100287927,\"spreadPerc\":0.8,\"shareTxForMovement\":57962,\"shareTxUntilMovement\":57962,\"totalShares\":101900000,\"maxShares\":20400000}},\"Icarus Microsystems\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Icarus Microsystems\",\"symbol\":\"ICRS\",\"price\":27011.164477355105,\"lastPrice\":27130.859748408024,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.69,\"b\":true,\"otlkMag\":6.895767447455883,\"otlkMagForecast\":57.84243272293848,\"cap\":290587083,\"spreadPerc\":0.8,\"shareTxForMovement\":40102,\"shareTxUntilMovement\":40102,\"totalShares\":35500000,\"maxShares\":7100000}},\"Universal Energy\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Universal Energy\",\"symbol\":\"UNV\",\"price\":27796.961324510845,\"lastPrice\":27889.79066410638,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.52,\"b\":true,\"otlkMag\":9.303545996919663,\"otlkMagForecast\":59.99975580808895,\"cap\":284585728,\"spreadPerc\":0.8,\"shareTxForMovement\":58827,\"shareTxUntilMovement\":58827,\"totalShares\":34700000,\"maxShares\":6900000}},\"AeroCorp\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"AeroCorp\",\"symbol\":\"AERO\",\"price\":14616.653935842822,\"lastPrice\":14677.670242450962,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.65,\"b\":true,\"otlkMag\":5.902596817194465,\"otlkMagForecast\":56.20267218108888,\"cap\":346485598,\"spreadPerc\":0.9,\"shareTxForMovement\":66238,\"shareTxUntilMovement\":66238,\"totalShares\":45600000,\"maxShares\":9100000}},\"Omnia Cybersystems\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Omnia Cybersystems\",\"symbol\":\"OMN\",\"price\":17751.18453799055,\"lastPrice\":17672.870291243915,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.69,\"b\":false,\"otlkMag\":5.1194310571412105,\"otlkMagForecast\":45.90280921671263,\"cap\":196746127,\"spreadPerc\":0.5,\"shareTxForMovement\":77927,\"shareTxUntilMovement\":77927,\"totalShares\":40000000,\"maxShares\":8000000}},\"Solaris Space Systems\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Solaris Space Systems\",\"symbol\":\"SLRS\",\"price\":23269.35667309552,\"lastPrice\":23162.25458904182,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.72,\"b\":true,\"otlkMag\":10.371452830081118,\"otlkMagForecast\":59.1533251324002,\"cap\":83453314,\"spreadPerc\":0.6,\"shareTxForMovement\":120431,\"shareTxUntilMovement\":120431,\"totalShares\":32200000,\"maxShares\":6400000}},\"Global Pharmaceuticals\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Global Pharmaceuticals\",\"symbol\":\"GPH\",\"price\":10294.469864997192,\"lastPrice\":10337.44348484261,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.65,\"b\":false,\"otlkMag\":10.654389323355128,\"otlkMagForecast\":39.33261635945519,\"cap\":20671117,\"spreadPerc\":0.6,\"shareTxForMovement\":78311,\"shareTxUntilMovement\":78311,\"totalShares\":53900000,\"maxShares\":10800000}},\"Nova Medical\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Nova Medical\",\"symbol\":\"NVMD\",\"price\":23275.028318729786,\"lastPrice\":23391.620496702304,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.78,\"b\":false,\"otlkMag\":5.380108196273417,\"otlkMagForecast\":44.75769016095516,\"cap\":455778416,\"spreadPerc\":1.1,\"shareTxForMovement\":84943,\"shareTxUntilMovement\":84943,\"totalShares\":28800000,\"maxShares\":5800000}},\"Watchdog Security\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Watchdog Security\",\"symbol\":\"WDS\",\"price\":4723.079315514202,\"lastPrice\":4796.787566632648,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":2.43,\"b\":true,\"otlkMag\":2.4573135787829834,\"otlkMagForecast\":50.326203362986945,\"cap\":143850456,\"spreadPerc\":0.6,\"shareTxForMovement\":22035,\"shareTxUntilMovement\":22035,\"totalShares\":70200000,\"maxShares\":14000000}},\"LexoCorp\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"LexoCorp\",\"symbol\":\"LXO\",\"price\":7512.449028967871,\"lastPrice\":7454.045850294031,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":1.22,\"b\":true,\"otlkMag\":5.680095445451803,\"otlkMagForecast\":56.79958947459121,\"cap\":146193134,\"spreadPerc\":1.1,\"shareTxForMovement\":82004,\"shareTxUntilMovement\":82004,\"totalShares\":45100000,\"maxShares\":9000000}},\"Rho Construction\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Rho Construction\",\"symbol\":\"RHOC\",\"price\":4664.713898020986,\"lastPrice\":4647.700245434909,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.57,\"b\":false,\"otlkMag\":1.33438582266458,\"otlkMagForecast\":52.03705092093109,\"cap\":63549052,\"spreadPerc\":0.9,\"shareTxForMovement\":110729,\"shareTxUntilMovement\":110729,\"totalShares\":34300000,\"maxShares\":6900000}},\"Alpha Enterprises\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Alpha Enterprises\",\"symbol\":\"APHE\",\"price\":4179.319218585939,\"lastPrice\":4129.985251544211,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":1.86,\"b\":true,\"otlkMag\":10.796530583646751,\"otlkMagForecast\":58.31883178148951,\"cap\":152700690,\"spreadPerc\":0.9,\"shareTxForMovement\":37761,\"shareTxUntilMovement\":37761,\"totalShares\":37800000,\"maxShares\":7600000}},\"SysCore Securities\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"SysCore Securities\",\"symbol\":\"SYSC\",\"price\":4440.57320556348,\"lastPrice\":4486.202485052618,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":1.6,\"b\":false,\"otlkMag\":5.595635258956814,\"otlkMagForecast\":48.428873733809816,\"cap\":7085998,\"spreadPerc\":1,\"shareTxForMovement\":44935,\"shareTxUntilMovement\":44935,\"totalShares\":42800000,\"maxShares\":8600000}},\"CompuTek\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"CompuTek\",\"symbol\":\"CTK\",\"price\":2154.917868269184,\"lastPrice\":2166.81969895869,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.86,\"b\":false,\"otlkMag\":5.253501240021229,\"otlkMagForecast\":44.23786241054771,\"cap\":55245277,\"spreadPerc\":0.4,\"shareTxForMovement\":86315,\"shareTxUntilMovement\":86315,\"totalShares\":78500000,\"maxShares\":15700000}},\"NetLink Technologies\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"NetLink Technologies\",\"symbol\":\"NTLK\",\"price\":2787.075747160229,\"lastPrice\":2856.7035943987617,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":3.89,\"b\":false,\"otlkMag\":1.9847482633679618,\"otlkMagForecast\":55.134726109420114,\"cap\":5846682,\"spreadPerc\":2,\"shareTxForMovement\":48407,\"shareTxUntilMovement\":48407,\"totalShares\":15800000,\"maxShares\":3200000}},\"Omega Software\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Omega Software\",\"symbol\":\"OMGA\",\"price\":6525.473386938908,\"lastPrice\":6564.866878088121,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.94,\"b\":true,\"otlkMag\":2.0886061767715574,\"otlkMagForecast\":49.081494819522824,\"cap\":41671684,\"spreadPerc\":0.8,\"shareTxForMovement\":32537,\"shareTxUntilMovement\":32537,\"totalShares\":9900000,\"maxShares\":2000000}},\"FoodNStuff\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"FoodNStuff\",\"symbol\":\"FNS\",\"price\":3995.4213246098248,\"lastPrice\":4015.1790935749314,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.77,\"b\":false,\"otlkMag\":5.385063541485909,\"otlkMagForecast\":47.27642868839013,\"cap\":61322471,\"spreadPerc\":1,\"shareTxForMovement\":145520,\"shareTxUntilMovement\":145520,\"totalShares\":11300000,\"maxShares\":2300000}},\"Sigma Cosmetics\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Sigma Cosmetics\",\"symbol\":\"SGC\",\"price\":2974.9464369588613,\"lastPrice\":2996.5359172822955,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":1.13,\"b\":true,\"otlkMag\":2.139163758739135,\"otlkMagForecast\":51.486184553672445,\"cap\":35408493,\"spreadPerc\":0.9,\"shareTxForMovement\":33726,\"shareTxUntilMovement\":33726,\"totalShares\":9000000,\"maxShares\":1800000}},\"Joe's Guns\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Joe's Guns\",\"symbol\":\"JGN\",\"price\":1233.0108393391881,\"lastPrice\":1254.3912111278619,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":2.7,\"b\":true,\"otlkMag\":1.9830735720324966,\"otlkMagForecast\":51.6327542301526,\"cap\":4861319,\"spreadPerc\":0.9,\"shareTxForMovement\":46950,\"shareTxUntilMovement\":46950,\"totalShares\":29700000,\"maxShares\":5900000}},\"Catalyst Ventures\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Catalyst Ventures\",\"symbol\":\"CTYS\",\"price\":847.2763605876805,\"lastPrice\":854.132509300198,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":1.26,\"b\":true,\"otlkMag\":16.503308885890114,\"otlkMagForecast\":63.81339544931203,\"cap\":6887017,\"spreadPerc\":1,\"shareTxForMovement\":32733,\"shareTxUntilMovement\":32733,\"totalShares\":81800000,\"maxShares\":16400000}},\"Microdyne Technologies\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Microdyne Technologies\",\"symbol\":\"MDYN\",\"price\":23343.91690434943,\"lastPrice\":23226.07830505816,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.79,\"b\":true,\"otlkMag\":7.1993684605339165,\"otlkMagForecast\":58.291392897949734,\"cap\":154087745,\"spreadPerc\":0.8,\"shareTxForMovement\":131597,\"shareTxUntilMovement\":131597,\"totalShares\":14500000,\"maxShares\":2900000}},\"Titan Laboratories\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Titan Laboratories\",\"symbol\":\"TITN\",\"price\":13824.238776972508,\"lastPrice\":13770.292980456044,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.61,\"b\":true,\"otlkMag\":9.997499373073147,\"otlkMagForecast\":61.30907490269904,\"cap\":127812973,\"spreadPerc\":0.7,\"shareTxForMovement\":109279,\"shareTxUntilMovement\":109279,\"totalShares\":28400000,\"maxShares\":5700000}},\"Orders\":{\"ECP\":[],\"MGCP\":[],\"BLD\":[],\"CLRK\":[],\"OMTK\":[],\"FSIG\":[],\"KGI\":[],\"FLCM\":[],\"STM\":[],\"DCOMM\":[],\"HLS\":[],\"VITA\":[],\"ICRS\":[],\"UNV\":[],\"AERO\":[],\"OMN\":[],\"SLRS\":[],\"GPH\":[],\"NVMD\":[],\"WDS\":[],\"LXO\":[],\"RHOC\":[],\"APHE\":[],\"SYSC\":[],\"CTK\":[],\"NTLK\":[],\"OMGA\":[],\"FNS\":[],\"SGC\":[],\"JGN\":[],\"CTYS\":[],\"MDYN\":[],\"TITN\":[]},\"storedCycles\":13,\"lastUpdate\":1642688973157,\"ticksUntilCycle\":67}","SettingsSave":"{\"ActiveScriptsServerPageSize\":100,\"ActiveScriptsScriptPageSize\":10,\"AutosaveInterval\":30,\"CodeInstructionRunTime\":5,\"DisableASCIIArt\":false,\"DisableHotkeys\":false,\"DisableTextEffects\":false,\"DisableOverviewProgressBars\":false,\"EnableBashHotkeys\":false,\"TimestampsFormat\":\"\",\"Locale\":\"en\",\"MaxLogCapacity\":500,\"MaxPortCapacity\":50,\"MaxTerminalCapacity\":500,\"OwnedAugmentationsOrder\":1,\"PurchaseAugmentationsOrder\":2,\"SaveGameOnFileSave\":true,\"SuppressBuyAugmentationConfirmation\":false,\"SuppressFactionInvites\":false,\"SuppressMessages\":false,\"SuppressTravelConfirmation\":false,\"SuppressBladeburnerPopup\":false,\"SuppressTIXPopup\":false,\"SuppressSavedGameToast\":false,\"UseIEC60027_2\":false,\"ExcludeRunningScriptsFromSave\":false,\"IsSidebarOpened\":true,\"MonacoTheme\":\"monokai\",\"MonacoInsertSpaces\":true,\"MonacoFontSize\":16,\"MonacoVim\":false,\"MonacoWordWrap\":\"off\",\"theme\":{\"primarylight\":\"#0f0\",\"primary\":\"#0c0\",\"primarydark\":\"#090\",\"successlight\":\"#0f0\",\"success\":\"#0c0\",\"successdark\":\"#090\",\"errorlight\":\"#f00\",\"error\":\"#c00\",\"errordark\":\"#900\",\"secondarylight\":\"#AAA\",\"secondary\":\"#888\",\"secondarydark\":\"#666\",\"warninglight\":\"#ff0\",\"warning\":\"#cc0\",\"warningdark\":\"#990\",\"infolight\":\"#69f\",\"info\":\"#36c\",\"infodark\":\"#039\",\"welllight\":\"#444\",\"well\":\"#222\",\"white\":\"#fff\",\"black\":\"#000\",\"hp\":\"#dd3434\",\"money\":\"#ffd700\",\"hack\":\"#adff2f\",\"combat\":\"#faffdf\",\"cha\":\"#a671d1\",\"int\":\"#6495ed\",\"rep\":\"#faffdf\",\"disabled\":\"#66cfbc\",\"backgroundprimary\":\"#000\",\"backgroundsecondary\":\"#000\",\"button\":\"#333\"},\"styles\":{\"lineHeight\":1.5,\"fontFamily\":\"Lucida Console, Lucida Sans Unicode, Fira Mono, Consolas, Courier New, Courier, monospace, Times New Roman\"},\"overview\":{\"x\":0,\"y\":1,\"opened\":true}}","VersionSave":"10","AllGangsSave":"","LastExportBonus":"1642605504081","StaneksGiftSave":"{\"ctor\":\"StaneksGift\",\"data\":{\"storedCycles\":0,\"fragments\":[]}}","SaveTimestamp":"1642688975865"}}