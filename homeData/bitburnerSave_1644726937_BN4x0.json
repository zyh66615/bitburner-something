{"ctor":"BitburnerSaveObject","data":{"PlayerSave":"{\"ctor\":\"PlayerObject\",\"data\":{\"hacking\":4470,\"hp\":293,\"max_hp\":293,\"strength\":2834,\"defense\":2834,\"dexterity\":3227,\"agility\":3054,\"charisma\":7940,\"intelligence\":990,\"hacking_chance_mult\":28.90420529936954,\"hacking_speed_mult\":28.90420529936954,\"hacking_money_mult\":28.90420529936954,\"hacking_grow_mult\":28.90420529936954,\"hacking_exp\":514268742.0373303,\"strength_exp\":16518.83867994575,\"defense_exp\":16518.83867994575,\"dexterity_exp\":27122.336004998993,\"agility_exp\":21830.91322761489,\"charisma_exp\":509302.5884135165,\"intelligence_exp\":14513000000423076,\"hacking_mult\":28.90420529936954,\"strength_mult\":25.35456605207854,\"defense_mult\":25.35456605207854,\"dexterity_mult\":25.35456605207854,\"agility_mult\":25.35456605207854,\"charisma_mult\":36.003483793951524,\"hacking_exp_mult\":28.90420529936954,\"strength_exp_mult\":25.35456605207854,\"defense_exp_mult\":25.35456605207854,\"dexterity_exp_mult\":25.35456605207854,\"agility_exp_mult\":25.35456605207854,\"charisma_exp_mult\":25.35456605207854,\"company_rep_mult\":25.35456605207854,\"faction_rep_mult\":25.35456605207854,\"money\":156448895600.12604,\"city\":\"Sector-12\",\"location\":\"Travel Agency\",\"jobs\":{\"Bachman & Associates\":\"Systems Administrator\",\"Fulcrum Technologies\":\"Chief Technology Officer\",\"ECorp\":\"Systems Administrator\",\"Clarke Incorporated\":\"Systems Administrator\",\"OmniTek Incorporated\":\"Systems Administrator\",\"NWO\":\"Systems Administrator\",\"Blade Industries\":\"Systems Administrator\",\"MegaCorp\":\"Systems Administrator\",\"KuaiGong International\":\"Systems Administrator\",\"Four Sigma\":\"Systems Administrator\"},\"companyName\":\"Fulcrum Technologies\",\"currentServer\":\"home\",\"purchasedServers\":[],\"hacknetNodes\":[{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":46506.91304335006,\"onlineTimeSeconds\":16173.800000023195,\"ram\":64,\"totalMoneyGenerated\":739577585.3054769,\"name\":\"hacknet-node-0\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":46506.91304335006,\"onlineTimeSeconds\":16169.80000002318,\"ram\":64,\"totalMoneyGenerated\":739518892.8021163,\"name\":\"hacknet-node-1\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":46506.91304335006,\"onlineTimeSeconds\":16161.800000023151,\"ram\":64,\"totalMoneyGenerated\":739445265.8941123,\"name\":\"hacknet-node-2\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":46506.91304335006,\"onlineTimeSeconds\":16146.800000023097,\"ram\":64,\"totalMoneyGenerated\":739286038.7693677,\"name\":\"hacknet-node-3\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":46506.91304335006,\"onlineTimeSeconds\":16117.800000022991,\"ram\":64,\"totalMoneyGenerated\":739331692.1199923,\"name\":\"hacknet-node-4\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":46506.91304335006,\"onlineTimeSeconds\":16073.60000002283,\"ram\":64,\"totalMoneyGenerated\":739378360.7293992,\"name\":\"hacknet-node-5\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":46506.91304335006,\"onlineTimeSeconds\":16005.600000022583,\"ram\":64,\"totalMoneyGenerated\":739210611.9969621,\"name\":\"hacknet-node-6\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":46506.91304335006,\"onlineTimeSeconds\":15914.400000022251,\"ram\":64,\"totalMoneyGenerated\":739139087.8613206,\"name\":\"hacknet-node-7\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":46506.91304335006,\"onlineTimeSeconds\":15893.400000022175,\"ram\":64,\"totalMoneyGenerated\":739084187.6384993,\"name\":\"hacknet-node-8\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":46506.91304335006,\"onlineTimeSeconds\":15891.400000022168,\"ram\":64,\"totalMoneyGenerated\":738981875.472352,\"name\":\"hacknet-node-9\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":46506.91304335006,\"onlineTimeSeconds\":15889.40000002216,\"ram\":64,\"totalMoneyGenerated\":738914103.6923814,\"name\":\"hacknet-node-10\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":46506.91304335006,\"onlineTimeSeconds\":15887.400000022153,\"ram\":64,\"totalMoneyGenerated\":738823745.882909,\"name\":\"hacknet-node-11\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":46506.91304335006,\"onlineTimeSeconds\":15886.40000002215,\"ram\":64,\"totalMoneyGenerated\":738719103.2527758,\"name\":\"hacknet-node-12\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":46506.91304335006,\"onlineTimeSeconds\":15883.400000022139,\"ram\":64,\"totalMoneyGenerated\":738635807.8706219,\"name\":\"hacknet-node-13\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":46506.91304335006,\"onlineTimeSeconds\":15881.400000022131,\"ram\":64,\"totalMoneyGenerated\":738533061.909137,\"name\":\"hacknet-node-14\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":46506.91304335006,\"onlineTimeSeconds\":15879.400000022124,\"ram\":64,\"totalMoneyGenerated\":700758879.3618021,\"name\":\"hacknet-node-15\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":46506.91304335006,\"onlineTimeSeconds\":15727.20000002157,\"ram\":64,\"totalMoneyGenerated\":698754285.6124468,\"name\":\"hacknet-node-16\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":46506.91304335006,\"onlineTimeSeconds\":15541.200000020895,\"ram\":64,\"totalMoneyGenerated\":695467239.3376293,\"name\":\"hacknet-node-17\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":46506.91304335006,\"onlineTimeSeconds\":15273.800000019923,\"ram\":64,\"totalMoneyGenerated\":687515598.1616702,\"name\":\"hacknet-node-18\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":46506.91304335006,\"onlineTimeSeconds\":15011.000000018965,\"ram\":64,\"totalMoneyGenerated\":681118454.0469247,\"name\":\"hacknet-node-19\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":46506.91304335006,\"onlineTimeSeconds\":14780.800000018127,\"ram\":64,\"totalMoneyGenerated\":673986440.6964732,\"name\":\"hacknet-node-20\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":46506.91304335006,\"onlineTimeSeconds\":14538.600000017246,\"ram\":64,\"totalMoneyGenerated\":664964486.9964833,\"name\":\"hacknet-node-21\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":46506.91304335006,\"onlineTimeSeconds\":14314.40000001643,\"ram\":64,\"totalMoneyGenerated\":656033783.7637417,\"name\":\"hacknet-node-22\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":46506.91304335006,\"onlineTimeSeconds\":14088.000000015607,\"ram\":64,\"totalMoneyGenerated\":646527317.1658002,\"name\":\"hacknet-node-23\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":46506.91304335006,\"onlineTimeSeconds\":13850.800000014744,\"ram\":64,\"totalMoneyGenerated\":635549471.0726839,\"name\":\"hacknet-node-24\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":46506.91304335006,\"onlineTimeSeconds\":13629.000000013937,\"ram\":64,\"totalMoneyGenerated\":625224991.1429428,\"name\":\"hacknet-node-25\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":46506.91304335006,\"onlineTimeSeconds\":13407.800000013132,\"ram\":64,\"totalMoneyGenerated\":614937623.9459244,\"name\":\"hacknet-node-26\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":46506.91304335006,\"onlineTimeSeconds\":13186.600000012328,\"ram\":64,\"totalMoneyGenerated\":604650291.7382072,\"name\":\"hacknet-node-27\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":46506.91304335006,\"onlineTimeSeconds\":12661.800000010418,\"ram\":64,\"totalMoneyGenerated\":580244673.5046866,\"name\":\"hacknet-node-28\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":1,\"level\":11,\"moneyGainRatePerSecond\":83.67006797185918,\"onlineTimeSeconds\":10.799999999999994,\"ram\":1,\"totalMoneyGenerated\":485.28639423678345,\"name\":\"hacknet-node-29\"}}],\"hashManager\":{\"ctor\":\"HashManager\",\"data\":{\"capacity\":0,\"hashes\":0,\"upgrades\":{\"Sell for Money\":0,\"Sell for Corporation Funds\":0,\"Reduce Minimum Security\":0,\"Increase Maximum Money\":0,\"Improve Studying\":0,\"Improve Gym Training\":0,\"Exchange for Corporation Research\":0,\"Exchange for Bladeburner Rank\":0,\"Exchange for Bladeburner SP\":0,\"Generate Coding Contract\":0}}},\"factions\":[\"Slum Snakes\",\"CyberSec\",\"BitRunners\",\"The Black Hand\",\"NiteSec\",\"Netburners\",\"Tian Di Hui\",\"Chongqing\",\"Tetrads\",\"Bachman & Associates\",\"Fulcrum Secret Technologies\",\"ECorp\",\"The Dark Army\",\"Clarke Incorporated\",\"OmniTek Incorporated\",\"NWO\",\"Blade Industries\",\"MegaCorp\",\"KuaiGong International\",\"Four Sigma\",\"Ishima\",\"Silhouette\",\"New Tokyo\",\"Speakers for the Dead\",\"The Syndicate\"],\"factionInvitations\":[],\"queuedAugmentations\":[{\"level\":1,\"name\":\"Neurotrainer I\"},{\"level\":1,\"name\":\"Synaptic Enhancement Implant\"},{\"level\":1,\"name\":\"BitWire\"},{\"level\":1,\"name\":\"Neural Accelerator\"},{\"level\":1,\"name\":\"Embedded Netburner Module\"},{\"level\":1,\"name\":\"Embedded Netburner Module Core Implant\"}],\"augmentations\":[{\"level\":300,\"name\":\"NeuroFlux Governor\"}],\"sourceFiles\":[{\"lvl\":3,\"n\":1},{\"lvl\":3,\"n\":2},{\"lvl\":3,\"n\":5},{\"lvl\":3,\"n\":4}],\"numPeopleKilled\":30,\"karma\":-55090.5,\"crime_money_mult\":36.003483793951524,\"crime_success_mult\":36.003483793951524,\"isWorking\":true,\"focus\":false,\"workType\":\"Working for Faction\",\"workCostMult\":20,\"workExpMult\":10,\"currentWorkFactionName\":\"KuaiGong International\",\"currentWorkFactionDescription\":\"carrying out hacking contracts\",\"workHackExpGainRate\":4.3356307949054305,\"workStrExpGainRate\":0,\"workDefExpGainRate\":0,\"workDexExpGainRate\":0,\"workAgiExpGainRate\":0,\"workChaExpGainRate\":0,\"workRepGainRate\":190.80119186894441,\"workMoneyGainRate\":0,\"workMoneyLossRate\":0,\"workHackExpGained\":208.1102781554606,\"workStrExpGained\":0,\"workDefExpGained\":0,\"workDexExpGained\":0,\"workAgiExpGained\":0,\"workChaExpGained\":0,\"workRepGained\":10822.352496900538,\"workMoneyGained\":0,\"createProgramName\":\"\",\"createProgramReqLvl\":400,\"className\":\"\",\"crimeType\":\"\",\"timeWorked\":10200,\"timeWorkedCreateProgram\":0,\"timeNeededToCompleteWork\":72000000,\"work_money_mult\":25.35456605207854,\"hacknet_node_money_mult\":25.35456605207854,\"hacknet_node_purchase_cost_mult\":0.03527413428759442,\"hacknet_node_ram_cost_mult\":0.03527413428759442,\"hacknet_node_core_cost_mult\":0.03527413428759442,\"hacknet_node_level_cost_mult\":0.03527413428759442,\"hasWseAccount\":true,\"hasTixApiAccess\":true,\"has4SData\":true,\"has4SDataTixApi\":true,\"gang\":{\"ctor\":\"Gang\",\"data\":{\"facName\":\"Slum Snakes\",\"members\":[{\"ctor\":\"GangMember\",\"data\":{\"task\":\"Traffick Illegal Arms\",\"earnedRespect\":23711.71653960961,\"hack\":13,\"str\":466038,\"def\":153421,\"dex\":2584,\"agi\":28659,\"cha\":24,\"hack_exp\":174.18505466260186,\"str_exp\":609584.3678834585,\"def_exp\":283238.0911136855,\"dex_exp\":17950.19301662802,\"agi_exp\":67757.04218058639,\"cha_exp\":335.9054215322492,\"hack_mult\":1.3946625000000001,\"str_mult\":29.206517322318344,\"def_mult\":15.515548794797638,\"dex_mult\":2.2200750000000005,\"agi_mult\":7.285657510010882,\"cha_mult\":1.4592614400000004,\"hack_asc_points\":203.05497989010132,\"str_asc_points\":9944944.248430718,\"def_asc_points\":4802561.403291162,\"dex_asc_points\":207148.9528366962,\"agi_asc_points\":1268322.584777086,\"cha_asc_points\":415.72649541651367,\"upgrades\":[\"Baseball Bat\",\"Bulletproof Vest\",\"Ford Flex V20\",\"Full Body Armor\",\"NUKE Rootkit\",\"ATX1070 Superbike\",\"Katana\",\"Mercedes-Benz S9001\",\"Glock 18C\",\"Liquid Body Armor\",\"White Ferrari\",\"Graphene Plating Armor\",\"P90C\",\"Steyr AUG\",\"AK-47\",\"M15A10 Assault Rifle\",\"AWM Sniper Rifle\"],\"augmentations\":[\"Bionic Arms\",\"Bionic Legs\",\"Nanofiber Weave\",\"Bionic Spine\",\"Synfibril Muscle\",\"BrachiBlades\",\"Synthetic Heart\",\"BitWire\",\"Neuralstimulator\",\"DataJack\",\"Graphene Bone Lacings\"],\"name\":\"Thug 1\"}},{\"ctor\":\"GangMember\",\"data\":{\"task\":\"Traffick Illegal Arms\",\"earnedRespect\":101463.08666633176,\"hack\":38,\"str\":458589,\"def\":158606,\"dex\":2863,\"agi\":29593,\"cha\":61,\"hack_exp\":1088.304489148204,\"str_exp\":1166438.296534317,\"def_exp\":558808.3002931295,\"dex_exp\":34726.806653358515,\"agi_exp\":103877.74701541105,\"cha_exp\":1383.8712532960337,\"hack_mult\":1.05,\"str_mult\":29.206517322318344,\"def_mult\":15.515548794797638,\"dex_mult\":2.2200750000000005,\"agi_mult\":7.285657510010882,\"cha_mult\":1.4592614400000004,\"hack_asc_points\":0,\"str_asc_points\":8079649.844186293,\"def_asc_points\":4183727.5855866056,\"dex_asc_points\":182458.21383608383,\"agi_asc_points\":1144531.1231703844,\"cha_asc_points\":306.7389869509873,\"upgrades\":[\"Baseball Bat\",\"Bulletproof Vest\",\"Ford Flex V20\",\"Full Body Armor\",\"ATX1070 Superbike\",\"Katana\",\"Mercedes-Benz S9001\",\"Glock 18C\",\"Liquid Body Armor\",\"White Ferrari\",\"Graphene Plating Armor\",\"P90C\",\"Steyr AUG\",\"AK-47\",\"NUKE Rootkit\",\"M15A10 Assault Rifle\",\"AWM Sniper Rifle\"],\"augmentations\":[\"Bionic Arms\",\"Bionic Legs\",\"Nanofiber Weave\",\"Bionic Spine\",\"Synfibril Muscle\",\"BrachiBlades\",\"Synthetic Heart\",\"Graphene Bone Lacings\"],\"name\":\"Thug 2\"}},{\"ctor\":\"GangMember\",\"data\":{\"task\":\"Traffick Illegal Arms\",\"earnedRespect\":39963.04696434275,\"hack\":29,\"str\":158494,\"def\":56162,\"dex\":3207,\"agi\":30106,\"cha\":51,\"hack_exp\":713.0877798067808,\"str_exp\":460917.70137627854,\"def_exp\":226072.60747064112,\"dex_exp\":33847.20016976165,\"agi_exp\":101780.2079573429,\"cha_exp\":1041.4374271077222,\"hack_mult\":1.05,\"str_mult\":17.180304307246086,\"def_mult\":9.126793408704494,\"dex_mult\":2.2200750000000005,\"agi_mult\":7.285657510010882,\"cha_mult\":1.4592614400000004,\"hack_asc_points\":185.46776081588519,\"str_asc_points\":3603182.374644516,\"def_asc_points\":2000067.509637799,\"dex_asc_points\":231641.30428638982,\"agi_asc_points\":1193668.1694908864,\"cha_asc_points\":883.2258658768717,\"upgrades\":[\"Baseball Bat\",\"Bulletproof Vest\",\"Ford Flex V20\",\"Full Body Armor\",\"NUKE Rootkit\",\"ATX1070 Superbike\",\"Katana\",\"Mercedes-Benz S9001\",\"Glock 18C\",\"Liquid Body Armor\",\"White Ferrari\",\"Graphene Plating Armor\",\"P90C\",\"Steyr AUG\",\"AK-47\",\"M15A10 Assault Rifle\",\"AWM Sniper Rifle\"],\"augmentations\":[\"Bionic Arms\",\"Bionic Legs\",\"Nanofiber Weave\",\"Bionic Spine\",\"Synfibril Muscle\",\"BrachiBlades\",\"Synthetic Heart\"],\"name\":\"Thug 3\"}},{\"ctor\":\"GangMember\",\"data\":{\"task\":\"Traffick Illegal Arms\",\"earnedRespect\":11098.604026419687,\"hack\":9,\"str\":133208,\"def\":47294,\"dex\":2605,\"agi\":26942,\"cha\":24,\"hack_exp\":160.09435351426592,\"str_exp\":179526.9060700953,\"def_exp\":93344.42869589214,\"dex_exp\":14970.393919777252,\"agi_exp\":50364.18674901313,\"cha_exp\":335.7472403952146,\"hack_mult\":1.05,\"str_mult\":17.180304307246086,\"def_mult\":9.126793408704494,\"dex_mult\":2.2200750000000005,\"agi_mult\":7.285657510010882,\"cha_mult\":1.4592614400000004,\"hack_asc_points\":246.02903498784394,\"str_asc_points\":3429770.3356630704,\"def_asc_points\":1939752.1087456518,\"dex_asc_points\":232772.507031516,\"agi_asc_points\":1269153.7750431094,\"cha_asc_points\":754.2101277134102,\"upgrades\":[\"Baseball Bat\",\"Bulletproof Vest\",\"Ford Flex V20\",\"Full Body Armor\",\"NUKE Rootkit\",\"ATX1070 Superbike\",\"Katana\",\"Mercedes-Benz S9001\",\"Glock 18C\",\"Liquid Body Armor\",\"White Ferrari\",\"Graphene Plating Armor\",\"P90C\",\"Steyr AUG\",\"AK-47\",\"M15A10 Assault Rifle\",\"AWM Sniper Rifle\"],\"augmentations\":[\"Bionic Arms\",\"Bionic Legs\",\"Nanofiber Weave\",\"Bionic Spine\",\"Synfibril Muscle\",\"BrachiBlades\",\"Synthetic Heart\"],\"name\":\"Thug 4\"}},{\"ctor\":\"GangMember\",\"data\":{\"task\":\"Traffick Illegal Arms\",\"earnedRespect\":48717.107360340604,\"hack\":38,\"str\":138797,\"def\":50351,\"dex\":2862,\"agi\":27653,\"cha\":61,\"hack_exp\":1088.304489148204,\"str_exp\":432596.4406236062,\"def_exp\":229108.91406417327,\"dex_exp\":34557.15365299915,\"agi_exp\":97339.60806012378,\"cha_exp\":1383.8712532960337,\"hack_mult\":1.05,\"str_mult\":17.180304307246086,\"def_mult\":9.126793408704494,\"dex_mult\":2.2200750000000005,\"agi_mult\":7.285657510010882,\"cha_mult\":1.4592614400000004,\"hack_asc_points\":25.196668529915314,\"str_asc_points\":2815506.7537083854,\"def_asc_points\":1600532.7579933892,\"dex_asc_points\":182670.29698714725,\"agi_asc_points\":1024227.9138278058,\"cha_asc_points\":406.7025853845498,\"upgrades\":[\"Baseball Bat\",\"Bulletproof Vest\",\"Ford Flex V20\",\"Full Body Armor\",\"ATX1070 Superbike\",\"Katana\",\"Mercedes-Benz S9001\",\"Glock 18C\",\"Liquid Body Armor\",\"White Ferrari\",\"Graphene Plating Armor\",\"P90C\",\"Steyr AUG\",\"AK-47\",\"NUKE Rootkit\",\"M15A10 Assault Rifle\",\"AWM Sniper Rifle\"],\"augmentations\":[\"Bionic Arms\",\"Bionic Legs\",\"Nanofiber Weave\",\"Bionic Spine\",\"Synfibril Muscle\",\"BrachiBlades\",\"Synthetic Heart\"],\"name\":\"Thug 5\"}},{\"ctor\":\"GangMember\",\"data\":{\"task\":\"Traffick Illegal Arms\",\"earnedRespect\":10860.865073777424,\"hack\":10,\"str\":124658,\"def\":46728,\"dex\":2878,\"agi\":29062,\"cha\":26,\"hack_exp\":164.54565453870686,\"str_exp\":349259.07434904727,\"def_exp\":169690.9703056247,\"dex_exp\":27071.981195706117,\"agi_exp\":108585.27087075851,\"cha_exp\":384.07879704041136,\"hack_mult\":1.05,\"str_mult\":17.180304307246086,\"def_mult\":9.126793408704494,\"dex_mult\":2.2200750000000005,\"agi_mult\":7.285657510010882,\"cha_mult\":1.4592614400000004,\"hack_asc_points\":111.85655615993232,\"str_asc_points\":2422528.5869631087,\"def_asc_points\":1524663.003433431,\"dex_asc_points\":207775.4155648271,\"agi_asc_points\":1085699.197716912,\"cha_asc_points\":415.4176953075005,\"upgrades\":[\"Baseball Bat\",\"Bulletproof Vest\",\"Ford Flex V20\",\"Full Body Armor\",\"NUKE Rootkit\",\"ATX1070 Superbike\",\"Katana\",\"Mercedes-Benz S9001\",\"Glock 18C\",\"Liquid Body Armor\",\"White Ferrari\",\"Graphene Plating Armor\",\"P90C\",\"Steyr AUG\",\"AK-47\",\"M15A10 Assault Rifle\",\"AWM Sniper Rifle\"],\"augmentations\":[\"Bionic Arms\",\"Bionic Legs\",\"Nanofiber Weave\",\"Bionic Spine\",\"Synfibril Muscle\",\"BrachiBlades\",\"Synthetic Heart\"],\"name\":\"Thug 6\"}},{\"ctor\":\"GangMember\",\"data\":{\"task\":\"Traffick Illegal Arms\",\"earnedRespect\":23746.873888777103,\"hack\":25,\"str\":109186,\"def\":40125,\"dex\":2341,\"agi\":25292,\"cha\":43,\"hack_exp\":575.3313025005029,\"str_exp\":320188.4839106852,\"def_exp\":166424.73389310652,\"dex_exp\":24980.705167500604,\"agi_exp\":88803.51270477605,\"cha_exp\":792.4386520253095,\"hack_mult\":1.05,\"str_mult\":17.180304307246086,\"def_mult\":9.126793408704494,\"dex_mult\":2.2200750000000005,\"agi_mult\":7.285657510010882,\"cha_mult\":1.4592614400000004,\"hack_asc_points\":0,\"str_asc_points\":1909019.042731768,\"def_asc_points\":1131773.2574019956,\"dex_asc_points\":143078.38158932273,\"agi_asc_points\":887396.6076418598,\"cha_asc_points\":35.13864126616977,\"upgrades\":[\"Baseball Bat\",\"Bulletproof Vest\",\"Ford Flex V20\",\"Full Body Armor\",\"NUKE Rootkit\",\"ATX1070 Superbike\",\"Katana\",\"Mercedes-Benz S9001\",\"Glock 18C\",\"Liquid Body Armor\",\"White Ferrari\",\"Graphene Plating Armor\",\"P90C\",\"Steyr AUG\",\"AK-47\",\"M15A10 Assault Rifle\",\"AWM Sniper Rifle\"],\"augmentations\":[\"Bionic Arms\",\"Bionic Legs\",\"Nanofiber Weave\",\"Bionic Spine\",\"Synfibril Muscle\",\"BrachiBlades\",\"Synthetic Heart\"],\"name\":\"Thug 7\"}},{\"ctor\":\"GangMember\",\"data\":{\"task\":\"Traffick Illegal Arms\",\"earnedRespect\":6836.220878987713,\"hack\":9,\"str\":63367,\"def\":22403,\"dex\":826,\"agi\":13066,\"cha\":24,\"hack_exp\":160.0996743887817,\"str_exp\":95224.39034664215,\"def_exp\":52693.09753597629,\"dex_exp\":6598.443505870125,\"agi_exp\":29415.266868534014,\"cha_exp\":335.7635315451624,\"hack_mult\":1.05,\"str_mult\":17.180304307246086,\"def_mult\":9.126793408704494,\"dex_mult\":2.2200750000000005,\"agi_mult\":7.285657510010882,\"cha_mult\":1.4592614400000004,\"hack_asc_points\":0,\"str_asc_points\":975293.5031427589,\"def_asc_points\":548421.2777215005,\"dex_asc_points\":39328.44854586843,\"agi_asc_points\":381615.0967103314,\"cha_asc_points\":0,\"upgrades\":[\"Baseball Bat\",\"Bulletproof Vest\",\"Ford Flex V20\",\"Full Body Armor\",\"NUKE Rootkit\",\"ATX1070 Superbike\",\"Katana\",\"Mercedes-Benz S9001\",\"Glock 18C\",\"Liquid Body Armor\",\"White Ferrari\",\"Graphene Plating Armor\",\"P90C\",\"Steyr AUG\",\"AK-47\",\"M15A10 Assault Rifle\",\"AWM Sniper Rifle\"],\"augmentations\":[\"Bionic Arms\",\"Bionic Legs\",\"Nanofiber Weave\",\"Bionic Spine\",\"Synfibril Muscle\",\"BrachiBlades\",\"Synthetic Heart\"],\"name\":\"Thug 8\"}},{\"ctor\":\"GangMember\",\"data\":{\"task\":\"Traffick Illegal Arms\",\"earnedRespect\":5315.772676954641,\"hack\":9,\"str\":38987,\"def\":16759,\"dex\":338,\"agi\":7826,\"cha\":24,\"hack_exp\":159.66868355300554,\"str_exp\":67357.15922712914,\"def_exp\":36433.314318722776,\"dex_exp\":3519.4695280665155,\"agi_exp\":20026.279720783004,\"cha_exp\":335.6053504081278,\"hack_mult\":1.05,\"str_mult\":13.215618697881604,\"def_mult\":9.126793408704494,\"dex_mult\":1.7760600000000002,\"agi_mult\":5.604351930777601,\"cha_mult\":1.4592614400000004,\"hack_asc_points\":0,\"str_asc_points\":715062.7015942762,\"def_asc_points\":361564.1396050401,\"dex_asc_points\":16732.625564325695,\"agi_asc_points\":281065.63702513144,\"cha_asc_points\":0,\"upgrades\":[\"Baseball Bat\",\"Bulletproof Vest\",\"Ford Flex V20\",\"Full Body Armor\",\"NUKE Rootkit\",\"ATX1070 Superbike\",\"Katana\",\"Mercedes-Benz S9001\",\"Glock 18C\",\"Liquid Body Armor\",\"White Ferrari\",\"Graphene Plating Armor\",\"P90C\",\"Steyr AUG\",\"AK-47\",\"M15A10 Assault Rifle\"],\"augmentations\":[\"Bionic Arms\",\"Bionic Legs\",\"Nanofiber Weave\",\"Bionic Spine\",\"Synfibril Muscle\",\"BrachiBlades\",\"Synthetic Heart\"],\"name\":\"Thug 9\"}},{\"ctor\":\"GangMember\",\"data\":{\"task\":\"Traffick Illegal Arms\",\"earnedRespect\":4895.549054922228,\"hack\":9,\"str\":32689,\"def\":15975,\"dex\":313,\"agi\":7366,\"cha\":24,\"hack_exp\":160.0996743887817,\"str_exp\":63660.125811207065,\"def_exp\":38902.23158460696,\"dex_exp\":3810.559587093461,\"agi_exp\":22936.30366138307,\"cha_exp\":335.7635315451624,\"hack_mult\":1.05,\"str_mult\":13.215618697881604,\"def_mult\":9.126793408704494,\"dex_mult\":1.7760600000000002,\"agi_mult\":5.604351930777601,\"cha_mult\":1.4592614400000004,\"hack_asc_points\":0,\"str_asc_points\":514450.73810366646,\"def_asc_points\":318830.76624805166,\"dex_asc_points\":13465.247696976248,\"agi_asc_points\":232020.74709274631,\"cha_asc_points\":0,\"upgrades\":[\"Baseball Bat\",\"Bulletproof Vest\",\"Ford Flex V20\",\"Full Body Armor\",\"NUKE Rootkit\",\"ATX1070 Superbike\",\"Katana\",\"Mercedes-Benz S9001\",\"Glock 18C\",\"Liquid Body Armor\",\"White Ferrari\",\"Graphene Plating Armor\",\"P90C\",\"Steyr AUG\",\"AK-47\",\"M15A10 Assault Rifle\"],\"augmentations\":[\"Bionic Arms\",\"Bionic Legs\",\"Nanofiber Weave\",\"Bionic Spine\",\"Synfibril Muscle\",\"BrachiBlades\",\"Synthetic Heart\"],\"name\":\"Thug 10\"}},{\"ctor\":\"GangMember\",\"data\":{\"task\":\"Train Combat\",\"earnedRespect\":0,\"hack\":1,\"str\":8486,\"def\":2985,\"dex\":127,\"agi\":2466,\"cha\":1,\"hack_exp\":5.656854249492381,\"str_exp\":17737.96026976003,\"def_exp\":10034.538420322482,\"dex_exp\":1363.9978889095137,\"agi_exp\":8280.028568167752,\"cha_exp\":9.428090415820634,\"hack_mult\":1,\"str_mult\":4.89762,\"def_mult\":2.5115999999999996,\"dex_mult\":1.4949999999999999,\"agi_mult\":2.76,\"cha_mult\":1,\"hack_asc_points\":0,\"str_asc_points\":461879.10504001396,\"def_asc_points\":303495.9110867281,\"dex_asc_points\":8431.045462943883,\"agi_asc_points\":194126.67518141988,\"cha_asc_points\":0,\"upgrades\":[],\"augmentations\":[\"Bionic Arms\",\"Bionic Legs\",\"Nanofiber Weave\",\"Bionic Spine\",\"Synfibril Muscle\",\"BrachiBlades\",\"Synthetic Heart\"],\"name\":\"Thug 11\"}}],\"wanted\":7.939347073596731,\"respect\":276595.47990379,\"isHackingGang\":false,\"respectGainRate\":179.69718783360184,\"wantedGainRate\":0.0020499513306908327,\"moneyGainRate\":629280.121304808,\"storedCycles\":2,\"storedTerritoryAndPowerCycles\":90,\"territoryClashChance\":1,\"territoryWarfareEngaged\":true,\"notifyMemberDeath\":true}},\"corporation\":null,\"bladeburner\":{\"ctor\":\"Bladeburner\",\"data\":{\"numHosp\":0,\"moneyLost\":0,\"rank\":37.265132694152264,\"maxRank\":37.265132694152264,\"skillPoints\":12,\"totalSkillPoints\":12,\"teamSize\":8,\"teamLost\":0,\"hpLost\":0,\"storedCycles\":590,\"randomEventCounter\":357,\"actionTimeToComplete\":27,\"actionTimeCurrent\":17,\"actionTimeOverflow\":0,\"action\":{\"ctor\":\"ActionIdentifier\",\"data\":{\"name\":\"\",\"type\":1}},\"cities\":{\"Aevum\":{\"ctor\":\"City\",\"data\":{\"name\":\"Aevum\",\"pop\":1277535219,\"popEst\":1337356156.7930527,\"comms\":26,\"chaos\":0}},\"Chongqing\":{\"ctor\":\"City\",\"data\":{\"name\":\"Chongqing\",\"pop\":1073496116,\"popEst\":1160598849.7676146,\"comms\":24,\"chaos\":0}},\"Sector-12\":{\"ctor\":\"City\",\"data\":{\"name\":\"Sector-12\",\"pop\":1363846474,\"popEst\":1921878562.2185915,\"comms\":20,\"chaos\":0.032999999999998864}},\"New Tokyo\":{\"ctor\":\"City\",\"data\":{\"name\":\"New Tokyo\",\"pop\":1364840791,\"popEst\":1810580683.5344598,\"comms\":122,\"chaos\":0}},\"Ishima\":{\"ctor\":\"City\",\"data\":{\"name\":\"Ishima\",\"pop\":1137469873,\"popEst\":1706538324.6119545,\"comms\":40,\"chaos\":0}},\"Volhaven\":{\"ctor\":\"City\",\"data\":{\"name\":\"Volhaven\",\"pop\":1314521459,\"popEst\":1795188569.1835556,\"comms\":39,\"chaos\":0}}},\"city\":\"Sector-12\",\"skills\":{},\"skillMultipliers\":{\"successChanceAll\":1,\"successChanceStealth\":1,\"successChanceKill\":1,\"successChanceContract\":1,\"successChanceOperation\":1,\"successChanceEstimate\":1,\"actionTime\":1,\"effHack\":1,\"effStr\":1,\"effDef\":1,\"effDex\":1,\"effAgi\":1,\"effCha\":1,\"effInt\":1,\"stamina\":1,\"money\":1,\"expGain\":1},\"staminaBonus\":0.4799999999999999,\"maxStamina\":614.093952545069,\"stamina\":614.093952545069,\"contracts\":{\"Tracking\":{\"ctor\":\"Contract\",\"data\":{\"name\":\"Tracking\",\"level\":3,\"maxLevel\":3,\"autoLevel\":true,\"baseDifficulty\":123.37605865122663,\"difficultyFac\":1.02,\"rewardFac\":1.041,\"successes\":7,\"failures\":0,\"rankGain\":0.3,\"rankLoss\":0,\"hpLoss\":0.5,\"hpLost\":0,\"isStealth\":true,\"isKill\":false,\"count\":37.781250000000014,\"weights\":{\"hack\":0,\"str\":0.05,\"def\":0.05,\"dex\":0.35,\"agi\":0.35,\"cha\":0.1,\"int\":0.05},\"decays\":{\"hack\":0,\"str\":0.91,\"def\":0.91,\"dex\":0.91,\"agi\":0.91,\"cha\":0.9,\"int\":1},\"teamCount\":0}},\"Bounty Hunter\":{\"ctor\":\"Contract\",\"data\":{\"name\":\"Bounty Hunter\",\"level\":2,\"maxLevel\":2,\"autoLevel\":true,\"baseDifficulty\":256.5024390510791,\"difficultyFac\":1.04,\"rewardFac\":1.085,\"successes\":4,\"failures\":0,\"rankGain\":0.9,\"rankLoss\":0,\"hpLoss\":1,\"hpLost\":0,\"isStealth\":false,\"isKill\":true,\"count\":42.07770833333328,\"weights\":{\"hack\":0,\"str\":0.15,\"def\":0.15,\"dex\":0.25,\"agi\":0.25,\"cha\":0.1,\"int\":0.1},\"decays\":{\"hack\":0,\"str\":0.91,\"def\":0.91,\"dex\":0.91,\"agi\":0.91,\"cha\":0.8,\"int\":0.9},\"teamCount\":0}},\"Retirement\":{\"ctor\":\"Contract\",\"data\":{\"name\":\"Retirement\",\"level\":1,\"maxLevel\":1,\"autoLevel\":true,\"baseDifficulty\":189.1733895593263,\"difficultyFac\":1.03,\"rewardFac\":1.065,\"successes\":0,\"failures\":0,\"rankGain\":0.6,\"rankLoss\":0,\"hpLoss\":1,\"hpLost\":0,\"isStealth\":false,\"isKill\":true,\"count\":69.36291666666673,\"weights\":{\"hack\":0,\"str\":0.2,\"def\":0.2,\"dex\":0.2,\"agi\":0.2,\"cha\":0.1,\"int\":0.1},\"decays\":{\"hack\":0,\"str\":0.91,\"def\":0.91,\"dex\":0.91,\"agi\":0.91,\"cha\":0.8,\"int\":0.9},\"teamCount\":0}}},\"operations\":{\"Investigation\":{\"ctor\":\"Operation\",\"data\":{\"name\":\"Investigation\",\"level\":4,\"maxLevel\":4,\"autoLevel\":true,\"baseDifficulty\":407.3356769380397,\"difficultyFac\":1.03,\"rewardFac\":1.07,\"successes\":13,\"failures\":0,\"rankGain\":2.2,\"rankLoss\":0.2,\"hpLoss\":0,\"hpLost\":0,\"isStealth\":true,\"isKill\":false,\"count\":91.68770833332965,\"weights\":{\"hack\":0.25,\"str\":0.05,\"def\":0.05,\"dex\":0.2,\"agi\":0.1,\"cha\":0.25,\"int\":0.1},\"decays\":{\"hack\":0.85,\"str\":0.9,\"def\":0.9,\"dex\":0.9,\"agi\":0.9,\"cha\":0.7,\"int\":0.9},\"teamCount\":0,\"reqdRank\":25}},\"Undercover Operation\":{\"ctor\":\"Operation\",\"data\":{\"name\":\"Undercover Operation\",\"level\":1,\"maxLevel\":1,\"autoLevel\":true,\"baseDifficulty\":528.9398640182725,\"difficultyFac\":1.04,\"rewardFac\":1.09,\"successes\":0,\"failures\":0,\"rankGain\":4.4,\"rankLoss\":0.4,\"hpLoss\":2,\"hpLost\":0,\"isStealth\":true,\"isKill\":false,\"count\":71.64624999999627,\"weights\":{\"hack\":0.2,\"str\":0.05,\"def\":0.05,\"dex\":0.2,\"agi\":0.2,\"cha\":0.2,\"int\":0.1},\"decays\":{\"hack\":0.8,\"str\":0.9,\"def\":0.9,\"dex\":0.9,\"agi\":0.9,\"cha\":0.7,\"int\":0.9},\"teamCount\":0,\"reqdRank\":100}},\"Sting Operation\":{\"ctor\":\"Operation\",\"data\":{\"name\":\"Sting Operation\",\"level\":1,\"maxLevel\":1,\"autoLevel\":true,\"baseDifficulty\":620.218182555034,\"difficultyFac\":1.04,\"rewardFac\":1.095,\"successes\":0,\"failures\":0,\"rankGain\":5.5,\"rankLoss\":0.5,\"hpLoss\":2.5,\"hpLost\":0,\"isStealth\":true,\"isKill\":false,\"count\":97.80770833333023,\"weights\":{\"hack\":0.25,\"str\":0.05,\"def\":0.05,\"dex\":0.25,\"agi\":0.1,\"cha\":0.2,\"int\":0.1},\"decays\":{\"hack\":0.8,\"str\":0.85,\"def\":0.85,\"dex\":0.85,\"agi\":0.85,\"cha\":0.7,\"int\":0.9},\"teamCount\":0,\"reqdRank\":500}},\"Raid\":{\"ctor\":\"Operation\",\"data\":{\"name\":\"Raid\",\"level\":1,\"maxLevel\":1,\"autoLevel\":true,\"baseDifficulty\":850.9745249781452,\"difficultyFac\":1.045,\"rewardFac\":1.1,\"successes\":0,\"failures\":0,\"rankGain\":55,\"rankLoss\":2.5,\"hpLoss\":50,\"hpLost\":0,\"isStealth\":false,\"isKill\":true,\"count\":12.73958333333332,\"weights\":{\"hack\":0.1,\"str\":0.2,\"def\":0.2,\"dex\":0.2,\"agi\":0.2,\"cha\":0,\"int\":0.1},\"decays\":{\"hack\":0.7,\"str\":0.8,\"def\":0.8,\"dex\":0.8,\"agi\":0.8,\"cha\":0,\"int\":0.9},\"teamCount\":0,\"reqdRank\":3000}},\"Stealth Retirement Operation\":{\"ctor\":\"Operation\",\"data\":{\"name\":\"Stealth Retirement Operation\",\"level\":1,\"maxLevel\":1,\"autoLevel\":true,\"baseDifficulty\":1029.2611718537876,\"difficultyFac\":1.05,\"rewardFac\":1.11,\"successes\":0,\"failures\":0,\"rankGain\":22,\"rankLoss\":2,\"hpLoss\":10,\"hpLost\":0,\"isStealth\":true,\"isKill\":true,\"count\":23.413958333333298,\"weights\":{\"hack\":0.1,\"str\":0.1,\"def\":0.1,\"dex\":0.3,\"agi\":0.3,\"cha\":0,\"int\":0.1},\"decays\":{\"hack\":0.7,\"str\":0.8,\"def\":0.8,\"dex\":0.8,\"agi\":0.8,\"cha\":0,\"int\":0.9},\"teamCount\":0,\"reqdRank\":20000}},\"Assassination\":{\"ctor\":\"Operation\",\"data\":{\"name\":\"Assassination\",\"level\":1,\"maxLevel\":1,\"autoLevel\":true,\"baseDifficulty\":1616.430443876445,\"difficultyFac\":1.06,\"rewardFac\":1.14,\"successes\":0,\"failures\":0,\"rankGain\":44,\"rankLoss\":4,\"hpLoss\":5,\"hpLost\":0,\"isStealth\":true,\"isKill\":true,\"count\":8.431041666666632,\"weights\":{\"hack\":0.1,\"str\":0.1,\"def\":0.1,\"dex\":0.3,\"agi\":0.3,\"cha\":0,\"int\":0.1},\"decays\":{\"hack\":0.6,\"str\":0.8,\"def\":0.8,\"dex\":0.8,\"agi\":0.8,\"cha\":0,\"int\":0.8},\"teamCount\":0,\"reqdRank\":50000}}},\"blackops\":{},\"logging\":{\"general\":true,\"contracts\":true,\"ops\":true,\"blackops\":true,\"events\":true},\"automateEnabled\":false,\"automateActionHigh\":{\"ctor\":\"ActionIdentifier\",\"data\":{\"name\":\"\",\"type\":1}},\"automateThreshHigh\":0,\"automateActionLow\":{\"ctor\":\"ActionIdentifier\",\"data\":{\"name\":\"\",\"type\":1}},\"automateThreshLow\":0,\"consoleHistory\":[\"help\",\"ls\",\"skill\",\"automate\"],\"consoleLogs\":[\"Bladeburner Console\",\"Type 'help' to see console commands\",\"> help\",\"Use 'help [command]' to get more information about a particular Bladeburner console command.\",\" \",\"    automate [var] [val] [hi/low] Configure simple automation for Bladeburner tasks\",\"    clear/cls                     Clear the console\",\"    help [cmd]                    Display this help text, or help text for a specific command\",\"    log [en/dis] [type]           Enable or disable logging for events and actions\",\"    skill [action] [name]         Level or display info about your Bladeburner skills\",\"    start [type] [name]           Start a Bladeburner action/task\",\"    stop                          Stops your current Bladeburner action/task\",\" \",\"[2/13 17:45:35] Tracking contract successfully completed! Gained 0.323 rank and $250.000k\",\"[2/13 17:45:44] Tracking contract successfully completed! Gained 0.300 rank and $250.000k\",\"[2/13 17:45:53] Tracking contract successfully completed! Gained 0.317 rank and $250.000k\",\"> ls\",\"Invalid console command\",\"> skill\",\"Invalid usage of 'skill' console command: skill [action] [name]\",\"Use 'help skill' for more info\",\"[2/13 17:46:24] Training completed. Gained: 760.6 str exp, 760.6 def exp, 760.6 dex exp, 760.6 agi exp, 0.040 max stamina\",\"[2/13 17:46:54] Training completed. Gained: 760.6 str exp, 760.6 def exp, 760.6 dex exp, 760.6 agi exp, 0.040 max stamina\",\"[2/13 17:47:24] Training completed. Gained: 760.6 str exp, 760.6 def exp, 760.6 dex exp, 760.6 agi exp, 0.040 max stamina\",\"[2/13 17:47:54] Training completed. Gained: 760.6 str exp, 760.6 def exp, 760.6 dex exp, 760.6 agi exp, 0.040 max stamina\",\"> automate\",\"Invalid use of 'automate' command: automate [var] [val] [hi/low]. Use 'help automate' for more info\",\"[2/13 17:48:24] Training completed. Gained: 760.6 str exp, 760.6 def exp, 760.6 dex exp, 760.6 agi exp, 0.040 max stamina\",\"[2/13 17:48:54] Training completed. Gained: 760.6 str exp, 760.6 def exp, 760.6 dex exp, 760.6 agi exp, 0.040 max stamina\",\"[2/13 17:49:24] Training completed. Gained: 760.6 str exp, 760.6 def exp, 760.6 dex exp, 760.6 agi exp, 0.040 max stamina\",\"[2/13 17:49:54] Training completed. Gained: 760.6 str exp, 760.6 def exp, 760.6 dex exp, 760.6 agi exp, 0.040 max stamina\",\"[2/13 17:50:24] Training completed. Gained: 760.6 str exp, 760.6 def exp, 760.6 dex exp, 760.6 agi exp, 0.040 max stamina\",\"[2/13 17:50:39] Tracking contract successfully completed! Gained 0.323 rank and $260.250k\",\"[2/13 17:50:47] Tracking contract successfully completed! Gained 0.309 rank and $260.250k\",\"[2/13 17:50:55] Tracking contract successfully completed! Gained 0.284 rank and $260.250k\",\"[2/13 17:51:03] Tracking contract successfully completed! Gained 0.313 rank and $260.250k\",\"[2/13 17:51:13] Successfully recruited a team member! Gained 20.0 charisma exp\",\"[2/13 17:51:23] Successfully recruited a team member! Gained 20.0 charisma exp\",\"[2/13 17:51:30] Intelligence indicates that a large number of Synthoids migrated from Ishima to some other city\",\"[2/13 17:51:33] Successfully recruited a team member! Gained 20.0 charisma exp\",\"[2/13 17:51:43] Successfully recruited a team member! Gained 20.0 charisma exp\",\"[2/13 17:51:53] Successfully recruited a team member! Gained 20.0 charisma exp\",\"[2/13 17:52:03] Successfully recruited a team member! Gained 20.0 charisma exp\",\"[2/13 17:52:13] Successfully recruited a team member! Gained 20.0 charisma exp\",\"[2/13 17:52:23] Successfully recruited a team member! Gained 20.0 charisma exp\",\"[2/13 17:52:54] Training completed. Gained: 760.6 str exp, 760.6 def exp, 760.6 dex exp, 760.6 agi exp, 0.040 max stamina\",\"[2/13 17:53:24] Training completed. Gained: 760.6 str exp, 760.6 def exp, 760.6 dex exp, 760.6 agi exp, 0.040 max stamina\",\"[2/13 17:53:54] Training completed. Gained: 760.6 str exp, 760.6 def exp, 760.6 dex exp, 760.6 agi exp, 0.040 max stamina\",\"[2/13 17:54:19] Bounty Hunter contract successfully completed! Gained 0.865 rank and $250.000k\",\"[2/13 17:54:35] Bounty Hunter contract successfully completed! Gained 0.918 rank and $250.000k\",\"[2/13 17:54:51] Bounty Hunter contract successfully completed! Gained 0.842 rank and $250.000k\",\"[2/13 17:55:08] Bounty Hunter contract successfully completed! Gained 1.073 rank and $271.250k\",\"[2/13 17:55:45] Investigation successfully completed! Gained 2.035 rank\",\"[2/13 17:56:10] Investigation successfully completed! Gained 2.042 rank\",\"[2/13 17:56:35] Investigation successfully completed! Gained 2.030 rank\",\"[2/13 17:57:01] Investigation successfully completed! Gained 2.367 rank\",\"[2/13 17:57:27] Investigation successfully completed! Gained 2.284 rank\",\"[2/13 17:57:53] Investigation successfully completed! Gained 2.543 rank\",\"[2/13 17:58:20] Investigation successfully completed! Gained 2.365 rank\",\"[2/13 17:58:47] Investigation successfully completed! Gained 2.607 rank\",\"[2/13 17:59:14] Investigation successfully completed! Gained 2.318 rank\",\"[2/13 17:59:41] Investigation successfully completed! Gained 2.543 rank\",\"[2/13 18:00:08] Investigation successfully completed! Gained 2.630 rank\",\"[2/13 18:00:35] Intelligence indicates that the Synthoid population of Chongqing just changed significantly\",\"[2/13 18:00:35] Investigation successfully completed! Gained 2.684 rank\",\"[2/13 18:01:02] Investigation successfully completed! Gained 2.953 rank\"]}},\"bladeburner_max_stamina_mult\":1,\"bladeburner_stamina_gain_mult\":1,\"bladeburner_analysis_mult\":1,\"bladeburner_success_chance_mult\":1,\"sleeves\":[],\"resleeves\":[],\"sleevesFromCovenant\":0,\"bitNodeN\":6,\"lastUpdate\":1644746647014,\"totalPlaytime\":2407716600,\"playtimeSinceLastAug\":16270200,\"playtimeSinceLastBitnode\":16839800,\"moneySourceA\":{\"ctor\":\"MoneySourceTracker\",\"data\":{\"bladeburner\":2812250,\"casino\":0,\"class\":0,\"codingcontract\":0,\"corporation\":0,\"crime\":36453527.341375925,\"gang\":-1358194832824.9602,\"hacking\":136955462224.86835,\"hacknet\":20252313443.250256,\"hacknet_expenses\":-4715804375.984545,\"hospitalization\":0,\"infiltration\":0,\"sleeves\":0,\"stock\":438809545241.58624,\"total\":-843551104487.6895,\"work\":809046112.8725407,\"servers\":0,\"other\":-288000000,\"augmentations\":-77218100000}},\"moneySourceB\":{\"ctor\":\"MoneySourceTracker\",\"data\":{\"bladeburner\":2812250,\"casino\":0,\"class\":0,\"codingcontract\":0,\"corporation\":0,\"crime\":36650024.44217592,\"gang\":-1358194832824.9602,\"hacking\":136980372943.86835,\"hacknet\":20252334629.189434,\"hacknet_expenses\":-4716175279.775614,\"hospitalization\":0,\"infiltration\":0,\"sleeves\":0,\"stock\":-45139266511.76793,\"total\":-47553756445250904,\"work\":809046112.8725407,\"servers\":-47552428658397900,\"other\":-575200000,\"augmentations\":-77248122622.99785}},\"scriptProdSinceLastAug\":763530200109.5002,\"exploits\":[\"N00dles\"],\"achievements\":[{\"ID\":\"FIRST_HACKNET_NODE\",\"unlockedOn\":1642339414658},{\"ID\":\"NS2\",\"unlockedOn\":1642343740615},{\"ID\":\"WORKOUT\",\"unlockedOn\":1642344940610},{\"ID\":\"HACKNET_NODE_10M\",\"unlockedOn\":1642420708995},{\"ID\":\"BRUTESSH.EXE\",\"unlockedOn\":1642422808996},{\"ID\":\"CYBERSEC\",\"unlockedOn\":1642423769004},{\"ID\":\"TOR\",\"unlockedOn\":1642424428998},{\"ID\":\"FTPCRACK.EXE\",\"unlockedOn\":1642426645652},{\"ID\":\"RELAYSMTP.EXE\",\"unlockedOn\":1642428623734},{\"ID\":\"FROZE\",\"unlockedOn\":1642430134063},{\"ID\":\"TRAVEL\",\"unlockedOn\":1642430580714},{\"ID\":\"INSTALL_1\",\"unlockedOn\":1642431300713},{\"ID\":\"SCRIPT_32GB\",\"unlockedOn\":1642433585396},{\"ID\":\"DRAIN_SERVER\",\"unlockedOn\":1642557549229},{\"ID\":\"HTTPWORM.EXE\",\"unlockedOn\":1642585735077},{\"ID\":\"SQLINJECT.EXE\",\"unlockedOn\":1642601629939},{\"ID\":\"THE_BLACK_HAND\",\"unlockedOn\":1642605709947},{\"ID\":\"NITESEC\",\"unlockedOn\":1642642847233},{\"ID\":\"MAX_HACKNET_NODE\",\"unlockedOn\":1642667396271},{\"ID\":\"BITRUNNERS\",\"unlockedOn\":1642729355958},{\"ID\":\"4S\",\"unlockedOn\":1642831049312},{\"ID\":\"DONATION\",\"unlockedOn\":1642852540310},{\"ID\":\"DAEDALUS\",\"unlockedOn\":1642858720310},{\"ID\":\"FORMULAS.EXE\",\"unlockedOn\":1642930710404},{\"ID\":\"SF1.1\",\"unlockedOn\":1642931070401},{\"ID\":\"HOSPITALIZED\",\"unlockedOn\":1643719147173},{\"ID\":\"GANG\",\"unlockedOn\":1643951291171},{\"ID\":\"FULL_GANG\",\"unlockedOn\":1644114751284},{\"ID\":\"GANG_MEMBER_POWER\",\"unlockedOn\":1644114931277},{\"ID\":\"SCRIPTS_30\",\"unlockedOn\":1644229253443},{\"ID\":\"REPUTATION_10M\",\"unlockedOn\":1644240399471},{\"ID\":\"SF2.1\",\"unlockedOn\":1644294751221},{\"ID\":\"N00DLES\",\"unlockedOn\":1644407301828},{\"ID\":\"INTELLIGENCE_255\",\"unlockedOn\":1644458674767},{\"ID\":\"MONEY_1Q\",\"unlockedOn\":1644459210991},{\"ID\":\"HACKING_100000\",\"unlockedOn\":1644459211003},{\"ID\":\"COMBAT_3000\",\"unlockedOn\":1644459211007},{\"ID\":\"NEUROFLUX_255\",\"unlockedOn\":1644459211010},{\"ID\":\"SF5.1\",\"unlockedOn\":1644459968438},{\"ID\":\"SF4.1\",\"unlockedOn\":1644729037583},{\"ID\":\"CORPORATION\",\"unlockedOn\":1644729479031},{\"ID\":\"MAX_CORES\",\"unlockedOn\":1644730210876},{\"ID\":\"DISCOUNT\",\"unlockedOn\":1644730599770},{\"ID\":\"BLADEBURNER_DIVISION\",\"unlockedOn\":1644745467606}],\"factionWorkType\":\"Faction Hacking Work\",\"committingCrimeThruSingFn\":false,\"singFnCrimeWorkerScript\":null}}","AllServersSave":"{\"home\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":8,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"home\",\"httpPortOpen\":false,\"ip\":\"67.3.0.0\",\"isConnectedTo\":true,\"maxRam\":33554432,\"messages\":[\"hackers-starting-handbook.lit\",\"j0.msg\",\"j1.msg\",\"csec-test.msg\",\"j2.msg\",\"nitesec-test.msg\",\"j3.msg\",\"j4.msg\",\"19dfj3l1nd.msg\"],\"organizationName\":\"Home PC\",\"programs\":[\"NUKE.exe\",\"b1t_flum3.exe\",\"Formulas.exe\",\"BruteSSH.exe\",\"FTPCrack.exe\",\"relaySMTP.exe\",\"HTTPWorm.exe\",\"SQLInject.exe\",\"fl1ght.exe\"],\"ramUsed\":84.2,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"-s\"],\"dataMap\":{},\"filename\":\"daemon.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":375019.9817242583,\"offlineMoneyMade\":0,\"offlineRunningTime\":160.083,\"onlineExpGained\":34949497.587264426,\"onlineMoneyMade\":132130480141,\"onlineRunningTime\":14916.610000019205,\"pid\":1,\"ramUsage\":4,\"server\":\"home\",\"threads\":1,\"dependencies\":[{\"filename\":\"helpers.js\",\"url\":\"blob:file:///8314bb14-80d1-4b0a-a632-66fb6854bbf0\",\"moduleSequenceNumber\":116},{\"filename\":\"daemon.js\",\"url\":\"blob:file:///2ddb7095-56c2-4470-9bbd-3ccb06c14ec9\",\"moduleSequenceNumber\":207}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{},\"filename\":\"stats.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":160.089,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":14916.210000019204,\"pid\":2,\"ramUsage\":3.3,\"server\":\"home\",\"threads\":1,\"dependencies\":[{\"filename\":\"helpers.js\",\"url\":\"blob:file:///a353ae3e-9742-4195-8c41-d8a569030874\",\"moduleSequenceNumber\":116},{\"filename\":\"stats.js\",\"url\":\"blob:file:///d88ce891-9918-4d49-9b75-2e816cdbb659\",\"moduleSequenceNumber\":221}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"--show-market-summary\"],\"dataMap\":{},\"filename\":\"stockmaster.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":160.10999999999999,\"onlineExpGained\":0,\"onlineMoneyMade\":551803973975.0712,\"onlineRunningTime\":14916.210000019204,\"pid\":3,\"ramUsage\":3.2,\"server\":\"home\",\"threads\":1,\"dependencies\":[{\"filename\":\"helpers.js\",\"url\":\"blob:file:///30ccfd69-5d0d-4b87-9fcb-ab9f92552085\",\"moduleSequenceNumber\":116},{\"filename\":\"stockmaster.js\",\"url\":\"blob:file:///325799e0-d9d4-47c2-abb0-44ac724fad4d\",\"moduleSequenceNumber\":223}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{},\"filename\":\"gangs.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":160.13,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":14916.210000019204,\"pid\":4,\"ramUsage\":4.7,\"server\":\"home\",\"threads\":1,\"dependencies\":[{\"filename\":\"helpers.js\",\"url\":\"blob:file:///fc6a3bbf-3d3f-49ae-8a8e-30515465c134\",\"moduleSequenceNumber\":116},{\"filename\":\"gangs.js\",\"url\":\"blob:file:///050e40d3-4cda-4f14-b0b3-2836e13e9825\",\"moduleSequenceNumber\":224}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{},\"filename\":\"/Temp/stockmarket-summary-tail.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":160.13299999999998,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":14915.810000019203,\"pid\":5,\"ramUsage\":1.6,\"server\":\"home\",\"threads\":1,\"dependencies\":[{\"filename\":\"helpers.js\",\"url\":\"blob:file:///3d729e4d-5cd7-43a1-ac71-095dba4d5fa9\",\"moduleSequenceNumber\":116},{\"filename\":\"/Temp/stockmarket-summary-tail.js\",\"url\":\"blob:file:///f9a54fbe-1101-456d-ac37-b7f442040154\",\"moduleSequenceNumber\":256}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"-c\",\"--max-payoff-time\",\"1h\"],\"dataMap\":{},\"filename\":\"hacknet-upgrade-manager.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":11.009999999999994,\"pid\":54,\"ramUsage\":6.1,\"server\":\"home\",\"threads\":1,\"dependencies\":[{\"filename\":\"helpers.js\",\"url\":\"blob:file:///b4e3ac5f-49e5-4e93-a070-9fb10999b9af\",\"moduleSequenceNumber\":119},{\"filename\":\"hacknet-upgrade-manager.js\",\"url\":\"blob:file:///5cf03bfd-78a1-404b-9b38-59d847fea57e\",\"moduleSequenceNumber\":228}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"--fast-crimes-only\",\"--no-coding-contracts\"],\"dataMap\":{},\"filename\":\"work-for-factions.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":11.009999999999994,\"pid\":55,\"ramUsage\":5.3,\"server\":\"home\",\"threads\":1,\"dependencies\":[{\"filename\":\"helpers.js\",\"url\":\"blob:file:///58d99785-1203-45cb-833d-37e28a7281b6\",\"moduleSequenceNumber\":119},{\"filename\":\"work-for-factions.js\",\"url\":\"blob:file:///fa9d9e08-b266-4ffc-b411-7fdda48f93d7\",\"moduleSequenceNumber\":231}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"harakiri-sushi\",1644746649364,1644746649505,141,\"Batch 0-weak2\",1,0],\"dataMap\":{},\"filename\":\"/Remote/weak-target.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":10.809999999999995,\"pid\":84,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":4,\"dependencies\":[{\"filename\":\"/Remote/weak-target.js\",\"url\":\"blob:file:///9618027a-5945-489c-be0a-23c1d0334adf\",\"moduleSequenceNumber\":241}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"hong-fang-tea\",1644746649372,1644746649491,119,\"Batch 0-weak2\",1,0],\"dataMap\":{},\"filename\":\"/Remote/weak-target.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":10.809999999999995,\"pid\":88,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":7,\"dependencies\":[{\"filename\":\"/Remote/weak-target.js\",\"url\":\"blob:file:///9618027a-5945-489c-be0a-23c1d0334adf\",\"moduleSequenceNumber\":241}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"nectar-net\",1644746649379,1644746649488,109,\"Batch 0-weak2\",1,0],\"dataMap\":{},\"filename\":\"/Remote/weak-target.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":10.809999999999995,\"pid\":92,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":7,\"dependencies\":[{\"filename\":\"/Remote/weak-target.js\",\"url\":\"blob:file:///9618027a-5945-489c-be0a-23c1d0334adf\",\"moduleSequenceNumber\":241}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"n00dles\",1644746649387,1644746649442,55,\"Batch 0-weak2\",1,0],\"dataMap\":{},\"filename\":\"/Remote/weak-target.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":10.809999999999995,\"pid\":96,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":1,\"dependencies\":[{\"filename\":\"/Remote/weak-target.js\",\"url\":\"blob:file:///9618027a-5945-489c-be0a-23c1d0334adf\",\"moduleSequenceNumber\":241}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"iron-gym\",1644746650419,1644746650879,460,\"Batch 0-weak2\",1,0],\"dataMap\":{},\"filename\":\"/Remote/weak-target.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":9.809999999999999,\"pid\":157,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":13,\"dependencies\":[{\"filename\":\"/Remote/weak-target.js\",\"url\":\"blob:file:///9618027a-5945-489c-be0a-23c1d0334adf\",\"moduleSequenceNumber\":241}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"let options;\\nconst argsSchema = [\\n    ['github', 'zyh66615'],\\n    ['repository', 'bitburner-something'],\\n    ['branch', 'main'],\\n    ['download', []], // By default, all supported files in the repository will be downloaded. Override with just a subset of files here\\n    ['new-file', []], // If a repository listing fails, only files returned by ns.ls() will be downloaded. You can add additional files to seek out here.\\n    ['subfolder', ''], // Can be set to download to a sub-folder that is not part of the remote repository structure\\n    ['extension', ['.js', '.ns', '.txt', '.script']], // Files to download by extension\\n    ['omit-folder', ['/Temp/']], // Folders to omit\\n];\\n\\nexport function autocomplete(data, args) {\\n    data.flags(argsSchema);\\n    const lastFlag = args.length > 1 ? args[args.length - 2] : null;\\n    if ([\\\"--download\\\", \\\"--subfolder\\\", \\\"--omit-folder\\\"].includes(lastFlag))\\n        return data.scripts;\\n    return [];\\n}\\n\\n/** @param {NS} ns \\n * Will try to download a fresh version of every file on the current server.\\n * You are responsible for:\\n * - Backing up your save / scripts first (try `download *` in the terminal)\\n * - Ensuring you have no local changes that you don't mind getting overwritten\\n * TODO: Some way to list all files in the repository and/or download them all. **/\\nexport async function main(ns) {\\n    options = ns.flags(argsSchema);    \\n    if (options.subfolder && !options.subfolder.startsWith('/'))\\n        options.subfolder = '/' + options.subfolder; // Game requires folders to have a leading slash. Add one if it's missing.\\n    const baseUrl = `https://raw.githubusercontent.com/${options.github}/${options.repository}/${options.branch}/`;\\n    const filesToDownload = options['new-file'].concat(options.download.length > 0 ? options.download : await repositoryListing(ns));\\n    for (const localFilePath of filesToDownload) {\\n        let fullLocalFilePath = pathJoin(options.subfolder, localFilePath);\\n        const remoteFilePath = baseUrl + localFilePath;\\n        ns.print(`Trying to update \\\"${fullLocalFilePath}\\\" from ${remoteFilePath} ...`);\\n        if (await ns.wget(`${remoteFilePath}?ts=${new Date().getTime()}`, fullLocalFilePath) && await rewriteFileForSubfolder(ns, fullLocalFilePath))\\n            ns.tprint(`SUCCESS: Updated \\\"${localFilePath}\\\" to the latest from ${remoteFilePath}`);\\n        else\\n            ns.tprint(`WARNING: \\\"${localFilePath}\\\" was not updated. (Currently running or not located at ${remoteFilePath} )`)\\n    }\\n}\\n\\n/** Joins all arguments as components in a path, e.g. pathJoin(\\\"foo\\\", \\\"bar\\\", \\\"/baz\\\") = \\\"foo/bar/baz\\\" **/\\nfunction pathJoin(...args) {\\n    return args.filter(s => !!s).join('/').replace(/\\\\/\\\\/+/g, '/');\\n}\\n\\n/** @param {NS} ns\\n * Rewrites a file with path substitions to handle downloading to a subfolder. **/\\nexport async function rewriteFileForSubfolder(ns, path) {\\n    if (!options.subfolder || path.includes('git-pull.js'))\\n        return true;\\n    let contents = ns.read(path);\\n    // Replace subfolder reference in helpers.js getFilePath:\\n    contents = contents.replace(`const subfolder = ''`, `const subfolder = '${options.subfolder}/'`);\\n    // Replace any imports, which can't use getFilePath:\\n    contents = contents.replace(/from '(\\\\.\\\\/)?(.*)'/g, `from '${pathJoin(options.subfolder, '$2')}'`);\\n    await ns.write(path, contents, 'w');\\n    return true;\\n}\\n\\n/** @param {NS} ns \\n * Gets a list of files to download, either from the github repository (if supported), or using a local directory listing **/\\nasync function repositoryListing(ns, folder = '') {\\n    // Note: Limit of 60 free API requests per day, don't over-do it\\n    const listUrl = `https://api.github.com/repos/${options.github}/${options.repository}/contents/${folder}?ref=${options.branch}`\\n    let response = null;\\n    try {\\n        response = await fetch(listUrl); // Raw response\\n        // Expect an array of objects: [{path:\\\"\\\", type:\\\"[file|dir]\\\" },{...},...]\\n        response = await response.json(); // Deserialized\\n        // Sadly, we must recursively retrieve folders, which eats into our 60 free API requests per day.\\n        const folders = response.filter(f => f.type == \\\"dir\\\").map(f => f.path);\\n        let files = response.filter(f => f.type == \\\"file\\\").map(f => f.path)\\n            .filter(f => options.extension.some(ext => f.endsWith(ext)));\\n        ns.print(`The following files exist at ${listUrl}\\\\n${files.join(\\\", \\\")}`);\\n        for (const folder of folders)\\n            files = files.concat((await repositoryListing(ns, folder))\\n                .map(f => `/${f}`)); // Game requires folders to have a leading slash\\n        return files;\\n    } catch (error) {\\n        if (folder !== '') throw error; // Propagate the error if this was a recursive call.\\n        ns.tprint(`WARNING: Failed to get a repository listing (GitHub API request limit of 60 reached?): ${listUrl}` +\\n            `\\\\nResponse Contents (if available): ${JSON.stringify(response ?? '(N/A)')}\\\\nError: ${String(error)}`);\\n        // Fallback, assume the user already has a copy of all files in the repo, and use it as a directory listing\\n        return ns.ls('home').filter(name => options.extension.some(ext => f.endsWith(ext)) &&\\n            !options['omit-folder'].some(dir => name.startsWith(dir)));\\n    }\\n}\",\"filename\":\"git-pull.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"git-pull.js\",\"url\":\"blob:file:///0fd8bfdd-acf5-47db-b535-1e80130600bd\",\"moduleSequenceNumber\":17030}],\"dependents\":[],\"ramUsage\":1.8,\"server\":\"home\",\"moduleSequenceNumber\":113,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    for (let file of ns.ls('home')) {\\n        if (file != 'git-pull.js' || file != 'NUKE.exe') {\\n            ns.rm(file)\\n        }\\n    }\\n}\",\"filename\":\"rm.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"rm.js\",\"url\":\"blob:file:///36446536-7871-45b7-bf87-74bbb5e85732\",\"moduleSequenceNumber\":12694}],\"dependents\":[],\"ramUsage\":2.8,\"server\":\"home\",\"moduleSequenceNumber\":114,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"rm\",\"cost\":1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { disableLogs, formatMoney, scanAllServers } from './helpers.js'\\n\\nconst argsSchema = [\\n    ['all', false],\\n    ['silent', false],\\n    ['at-hack-level', 0],\\n    ['hack-percent', -1],\\n    ['include-hacknet-ram', false],\\n];\\n\\nexport function autocomplete(data, args) {\\n    data.flags(argsSchema);\\n    return [];\\n}\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    disableLogs(ns, [\\\"scan\\\", \\\"sleep\\\"]);\\n\\n    let serverNames = scanAllServers(ns);\\n\\n    var weaken_ram = 1.75;\\n    var grow_ram = 1.75;\\n    var hack_ram = 1.7;\\n\\n    const flags = ns.flags(argsSchema);\\n    var hack_percent = flags['hack-percent'] / 100;\\n    var use_est_hack_percent = false;\\n    if (flags['hack-percent'] == -1) {\\n        use_est_hack_percent = true;\\n    } else {\\n        hack_percent = flags['hack-percent'] / 100;\\n        if (hack_percent <= 0 || hack_percent >= 1) {\\n            ns.tprint(\\\"hack-percent out of range (0-100)\\\");\\n            return;\\n        }\\n    }\\n\\n    var player = ns.getPlayer();\\n    //ns.print(JSON.stringify(player));\\n\\n    if (flags['at-hack-level']) player.hacking = flags['at-hack-level'];\\n    var servers = serverNames.map(ns.getServer);\\n    // Compute the total RAM available to us on all servers (e.g. for running hacking scripts)\\n    var ram_total = servers.reduce(function (total, server) {\\n        if (!server.hasAdminRights || (server.hostname.startsWith('hacknet') && !flags['include-hacknet-ram'])) return total;\\n        return total + server.maxRam;\\n    }, 0);\\n\\n    // Helper to compute server gain/exp rates at a specific hacking level\\n    function getRatesAtHackLevel(server, player, hackLevel) {\\n        // Assume we will have wekened the server to min-security and taken it to max money before targetting\\n        server.hackDifficulty = server.minDifficulty;\\n        server.moneyAvailable = server.moneyMax;\\n        // Temporarily change the hack level on the player object to the requested level\\n        const real_player_hack_skill = player.hacking;\\n        player.hacking = hackLevel;\\n        // Compute the cost (ram*seconds) for each tool\\n        try {\\n            const weakenCost = weaken_ram * ns.formulas.hacking.weakenTime(server, player);\\n            const growCost = grow_ram * ns.formulas.hacking.growTime(server, player) + weakenCost * 0.004 / 0.05;\\n            const hackCost = hack_ram * ns.formulas.hacking.hackTime(server, player) + weakenCost * 0.002 / 0.05;\\n\\n            // Compute the growth and hack gain rates\\n            const growGain = Math.log(ns.formulas.hacking.growPercent(server, 1, player, 1));\\n            const hackGain = ns.formulas.hacking.hackPercent(server, player);\\n            server.estHackPercent = Math.min(0.98, Math.min(ram_total * hackGain / hackCost, 1 - 1 / Math.exp(ram_total * growGain / growCost))); // TODO: I think these might be off by a factor of 2x\\n            if (use_est_hack_percent) hack_percent = server.estHackPercent;\\n            const grows_per_cycle = -Math.log(1 - hack_percent) / growGain;\\n            const hacks_per_cycle = hack_percent / hackGain;\\n            const hackProfit = server.moneyMax * hack_percent * ns.formulas.hacking.hackChance(server, player);\\n            // Compute the relative monetary gain\\n            const theoreticalGainRate = hackProfit / (growCost * grows_per_cycle + hackCost * hacks_per_cycle) * 1000 /* Convert per-millisecond rate to per-second */;\\n            const expRate = ns.formulas.hacking.hackExp(server, player) * (1 + 0.002 / 0.05) / (hackCost) * 1000;\\n            // The practical cap on revenue is based on your hacking scripts. For my hacking scripts this is about 20% per second, adjust as needed\\n            // No idea why we divide by ram_total - Basically ensures that as our available RAM gets larger, the sort order merely becomes \\\"by server max money\\\"\\n            const cappedGainRate = Math.min(theoreticalGainRate, hackProfit / ram_total);\\n            ns.print(`At hack level ${hackLevel} and steal ${(hack_percent * 100).toPrecision(3)}%: Theoretical ${formatMoney(theoreticalGainRate)}, ` +\\n                `Limit: ${formatMoney(hackProfit / ram_total)}, Exp: ${expRate.toPrecision(3)}, Hack Chance: ${(ns.formulas.hacking.hackChance(server, player) * 100).toPrecision(3)}% (${server.hostname})`);\\n            player.hacking = real_player_hack_skill; // Restore the real hacking skill if we changed it temporarily\\n            return [theoreticalGainRate, cappedGainRate, expRate];\\n        }\\n        catch {\\n            // Formulas API unavailable?\\n            return [server.moneyMax, server.moneyMax, 1 / server.minDifficulty];\\n        }\\n    }\\n\\n    ns.print(`All? ${flags['all']} Player hack: ${player.hacking} Ram total: ${ram_total}`);\\n    //ns.print(`\\\\n` + servers.map(s => `${s.hostname} bought: ${s.purchasedByPlayer} moneyMax: ${s.moneyMax} admin: ${s.hasAdminRights} hack: ${s.requiredHackingSkill}`).join('\\\\n'));\\n\\n    // Filter down to the list of servers we wish to report on\\n    servers = servers.filter(server => !server.purchasedByPlayer && (server.moneyMax || 0) > 0 &&\\n        (flags['all'] || server.hasAdminRights && server.requiredHackingSkill <= player.hacking));\\n\\n    // First address the servers within our hacking level\\n    const unlocked_servers = servers.filter(s => s.requiredHackingSkill <= player.hacking)\\n        .map(function (server) {\\n            [server.theoreticalGainRate, server.gainRate, server.expRate] = getRatesAtHackLevel(server, player, player.hacking);\\n            return server;\\n        });\\n    // The best server's gain rate will be used to pro-rate the relative gain of servers that haven't been unlocked yet (if they were unlocked at this level)\\n    const best_unlocked_server = unlocked_servers.sort((a, b) => b.gainRate - a.gainRate)[0];\\n    // Compute locked server's gain rates (pro rated back to the current player's hack level)\\n    const locked_servers = servers.filter(s => s.requiredHackingSkill > player.hacking).sort((a, b) => a.requiredHackingSkill - b.requiredHackingSkill)\\n        .map(function (server) {\\n            // We will need to fake the hacking skill to get the numbers for when this server will first be unlocked, but to keep the comparison\\n            // fair, we will need to scale down the gain by the amount current best server gains now, verses what it would gain at that hack level.\\n            const [bestUnlockedScaledGainRate, _, bestUnlockedScaledExpRate] = getRatesAtHackLevel(best_unlocked_server, player, server.requiredHackingSkill);\\n            const gainRateScaleFactor = best_unlocked_server.theoreticalGainRate / bestUnlockedScaledGainRate;\\n            const expRateScaleFactor = best_unlocked_server.expRate / bestUnlockedScaledExpRate;\\n            const [theoreticalGainRate, cappedGainRate, expRate] = getRatesAtHackLevel(server, player, server.requiredHackingSkill);\\n            // Apply the scaling factors, as well as the same cap as above\\n            server.theoreticalGainRate = theoreticalGainRate * gainRateScaleFactor;\\n            server.expRate = expRate * expRateScaleFactor;\\n            server.gainRate = Math.min(server.theoreticalGainRate, cappedGainRate);\\n            ns.print(`${server.hostname}: Scaled theoretical gain by ${gainRateScaleFactor.toPrecision(3)} to ${formatMoney(server.theoreticalGainRate)} ` +\\n                `(capped at ${formatMoney(cappedGainRate)}) and exp by ${expRateScaleFactor.toPrecision(3)} to ${server.expRate.toPrecision(3)}`);\\n            return server;\\n        }) || [];\\n    // Combine the lists, sort, and display a summary.\\n    const server_eval = unlocked_servers.concat(locked_servers);\\n    const best_server = server_eval.sort((a, b) => b.gainRate - a.gainRate)[0];\\n    if (!flags['silent'])\\n        ns.tprint(\\\"Best server: \\\", best_server.hostname, \\\" with \\\", formatMoney(best_server.gainRate), \\\" per ram-second\\\");\\n\\n    let order = 1;\\n    let serverListByGain = `Servers in order of best to worst hack money at Hack ${player.hacking}:`;\\n    for (const server of server_eval)\\n        serverListByGain += `\\\\n ${order++} ${server.hostname}, with ${formatMoney(server.gainRate)} per ram-second while stealing ` +\\n            `${(server.estHackPercent * 100).toPrecision(3)}% (unlocked at hack ${server.requiredHackingSkill})`;\\n    ns.print(serverListByGain);\\n\\n    var best_exp_server = server_eval.sort(function (a, b) {\\n        return b.expRate - a.expRate;\\n    })[0];\\n    if (!flags['silent'])\\n        ns.tprint(\\\"Best exp server: \\\", best_exp_server.hostname, \\\" with \\\", best_exp_server.expRate, \\\" exp per ram-second\\\");\\n    order = 1;\\n    let serverListByExp = `Servers in order of best to worst hack exp at Hack ${player.hacking}:`;\\n    for (let i = 0; i < 5; i++)\\n        serverListByExp += `\\\\n ${order++} ${server_eval[i].hostname}, with ${server_eval[i].expRate.toPrecision(3)} exp per ram-second`;\\n    ns.print(serverListByExp);\\n\\n    ns.write('/Temp/analyze-hack.txt', JSON.stringify(server_eval.map(s => ({\\n        hostname: s.hostname,\\n        gainRate: s.gainRate,\\n        expRate: s.expRate\\n    }))), \\\"w\\\");\\n    // Below is stats for hacknet servers - uncomment at cost of 4 GB Ram\\n    /*\\n    var hacknet_nodes = [...(function* () {\\n        var n = ns.hacknet.numNodes();\\n        for (var i = 0; i < n; i++) {\\n            var server = ns.hacknet.getNodeStats(i);\\n            server.gainRate = 1000000 / 4 * server.production / server.ram;\\n            yield server;\\n        }\\n    })()];\\n    var best_hacknet_node = hacknet_nodes.sort(function (a, b) {\\n        return b.gainRate - a.gainRate;\\n    })[0];\\n    if (best_hacknet_node) ns.tprint(\\\"Best hacknet node: \\\", best_hacknet_node.name, \\\" with $\\\", best_hacknet_node.gainRate, \\\" per ram-second\\\");\\n    */\\n}\",\"filename\":\"analyze-hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"helpers.js\",\"url\":\"blob:file:///582dde02-21df-453d-940c-b136b1ca01e6\",\"moduleSequenceNumber\":125},{\"filename\":\"analyze-hack.js\",\"url\":\"blob:file:///a171e124-80f2-44df-ab28-c68abe167f2a\",\"moduleSequenceNumber\":260}],\"dependents\":[],\"ramUsage\":4.3,\"server\":\"home\",\"moduleSequenceNumber\":260,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { scanAllServers } from './helpers.js'\\n\\n// the purpose of cascade kill is to kill all scripts running on any server in the game\\n// but saving the host that you run it on for last (so that it doesn't kill itself prematurely)\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    var startingNode = ns.getHostname();\\n    const serverList = scanAllServers(ns);\\n\\n    // Send the kill command to all servers\\n    for (const server of serverList) {\\n        // skip if this host, we save it for last\\n        if (server == startingNode)\\n            continue;\\n\\n        // skip if not running anything\\n        if (ns.ps(server) === 0)\\n            continue;\\n\\n        // kill all scripts\\n        ns.killall(server);\\n    }\\n\\n    // idle for things to die\\n    for (const server of serverList) {\\n        // skip if this host, we save it for last\\n        if (server == startingNode)\\n            continue;\\n        // idle until they're dead, this is to avoid killing the cascade before it's finished.\\n        while (ns.ps(server) > 0) {\\n            await ns.sleep(20);\\n        }\\n        // Remove script files the daemon would have copied over (in case we update the source)\\n        for (let file of ns.ls(server, '.js'))\\n            ns.rm(file, server)\\n    }\\n\\n    // wait to kill these. This kills itself, obviously.\\n    ns.killall(startingNode);\\n}\",\"filename\":\"cascade-kill.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.75,\"server\":\"home\",\"moduleSequenceNumber\":116,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ps\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"rm\",\"cost\":1},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    for (let file of ns.ls('home', '/Temp/'))\\n        ns.rm(file);\\n}\",\"filename\":\"cleanup.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.8,\"server\":\"home\",\"moduleSequenceNumber\":117,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"rm\",\"cost\":1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { formatDuration, formatNumberShort } from './helpers.js'\\nimport { crimeForKillsKarmaStats } from './work-for-factions.js'\\n\\nconst crimes = [\\\"shoplift\\\", \\\"rob store\\\", \\\"mug\\\", \\\"larceny\\\", \\\"deal drugs\\\", \\\"bond forgery\\\", \\\"traffick arms\\\", \\\"homicide\\\", \\\"grand theft auto\\\", \\\"kidnap\\\", \\\"assassinate\\\", \\\"heist\\\"]\\nexport function autocomplete() { return crimes; }\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    ns.disableLog('sleep');\\n    let crime = ns.args.length == 0 ? undefined : ns.args.join(\\\" \\\"); // Need to join in case the crime has a space in it - it will be treated as two args\\n    ns.tail();\\n    if (!crime || ns.args.includes(\\\"--fast-crimes-only\\\")) // More sophisticated auto-scaling crime logic\\n        await crimeForKillsKarmaStats(ns, 0, 0, Number.MAX_SAFE_INTEGER, ns.commitCrime, ns.args.includes(\\\"--fast-crimes-only\\\"));\\n    else // Simple crime loop for the specified crime\\n        await legacyAutoCrime(ns, crime);\\n}\\n\\n/** @param {NS} ns **/\\nasync function legacyAutoCrime(ns, crime = \\\"mug\\\") {\\n    let interval = 100;\\n    while (true) {\\n        let maxBusyLoops = 100;\\n        while (ns.isBusy() && maxBusyLoops-- > 0) {\\n            await ns.sleep(interval);\\n            ns.print(\\\"Waiting to no longer be busy...\\\");\\n        }\\n        if (maxBusyLoops <= 0) {\\n            ns.tprint(\\\"User have been busy for too long. auto-crime.js exiting...\\\");\\n            return;\\n        }\\n        ns.tail(); // Force a tail window open when auto-criming, or else it's very difficult to stop if it was accidentally closed.\\n        let wait = ns.commitCrime(crime) + 10;\\n        ns.print(`Karma: ${formatNumberShort(ns.heart.break())} Committing crime \\\\\\\"${crime}\\\\\\\" and sleeping for ${formatDuration(wait)}...`);\\n        await ns.sleep(wait);\\n    }\\n}\",\"filename\":\"crime.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"helpers.js\",\"url\":\"blob:file:///6d0db65f-b2e2-45ff-8c3f-d0e06c0893d7\",\"moduleSequenceNumber\":224},{\"filename\":\"work-for-factions.js\",\"url\":\"blob:file:///ead99460-3ea8-4399-b5b6-8a7234ea5e27\",\"moduleSequenceNumber\":237},{\"filename\":\"helpers.js\",\"url\":\"blob:file:///aa37f417-5ce9-4531-a313-7882d8191cb0\",\"moduleSequenceNumber\":224},{\"filename\":\"crime.js\",\"url\":\"blob:file:///d99780ea-7ce1-4132-9a1b-22ea1f07faa2\",\"moduleSequenceNumber\":29370}],\"dependents\":[],\"ramUsage\":8.7,\"server\":\"home\",\"moduleSequenceNumber\":118,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"commitCrime\",\"cost\":5},{\"type\":\"fn\",\"name\":\"isBusy\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"run\",\"cost\":1},{\"type\":\"fn\",\"name\":\"isRunning\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {\\n    formatMoney, formatRam, formatDuration, formatDateTime, formatNumber,\\n    scanAllServers, hashCode, disableLogs, log as logHelper, getFilePath,\\n    getNsDataThroughFile_Custom, runCommand_Custom, waitForProcessToComplete_Custom,\\n    tryGetBitNodeMultipliers_Custom, getActiveSourceFiles_Custom,\\n    getFnRunViaNsExec, getFnIsAliveViaNsPs\\n} from './helpers.js'\\n\\n// the purpose of the daemon is: it's our global starting point.\\n// it handles several aspects of the game, primarily hacking for money.\\n// since it requires a robust \\\"execute arbitrarily\\\" functionality\\n// it serves as the launching point for all the helper scripts we need.\\n// this list has been steadily growing as time passes.\\n\\n/*jshint loopfunc:true */\\n\\n// --- CONSTANTS ---\\n// track how costly (in security) a growth/hacking thread is.\\nconst growthThreadHardening = 0.004;\\nconst hackThreadHardening = 0.002;\\n// initial potency of weaken threads before multipliers\\nconst weakenThreadPotency = 0.05;\\n// unadjusted server growth rate, this is way more than what you actually get\\nconst unadjustedGrowthRate = 1.03;\\n// max server growth rate, growth rates higher than this are throttled.\\nconst maxGrowthRate = 1.0035;\\n// Pad weaken thread counts to account for undershooting. (Shouldn't happen. And if this is a timing issue, padding won't help)\\nconst weakenThreadPadding = 0; //0.01;\\n// The name given to purchased servers (should match what's in host-manager.js)\\nconst purchasedServersName = \\\"daemon\\\";\\n\\n// The maximum current total RAM utilization before we stop attempting to schedule work for the next less profitable server. Can be used to reserve capacity.\\nconst maxUtilization = 0.95;\\nconst lowUtilizationThreshold = 0.80; // The counterpart - low utilization, which leads us to ramp up targets\\n// If we have plenty of resources after targeting all possible servers, we can start to grow/weaken servers above our hack level - up to this utilization\\nconst maxUtilizationPreppingAboveHackLevel = 0.75;\\n// Maximum number of milliseconds the main targeting loop should run before we take a break until the next loop\\nconst maxLoopTime = 1000; //ms\\nlet loopInterval = 1000; //ms\\n// the number of milliseconds to delay the grow execution after theft to ensure it doesn't trigger too early and have no effect.\\n// For timing reasons the delay between each step should be *close* 1/4th of this number, but there is some imprecision\\nlet cycleTimingDelay = 1600;\\nlet queueDelay = 100; // the delay that it can take for a script to start, used to pessimistically schedule things in advance\\nlet maxBatches = 5; // the max number of batches this daemon will spool up to avoid running out of IRL ram (TODO: Stop wasting RAM by scheduling batches so far in advance. e.g. Grind XP while waiting for cycle start!)\\nlet maxTargets; // Initial value, will grow if there is an abundance of RAM\\nlet maxPreppingAtMaxTargets = 3; // The max servers we can prep when we're at our current max targets and have spare RAM\\n// Allows some home ram to be reserved for ad-hoc terminal script running and when home is explicitly set as the \\\"preferred server\\\" for starting a helper \\nlet homeReservedRam = 32;\\n\\n// --- VARS ---\\n// some ancillary scripts that run asynchronously, we utilize the startup/execute capabilities of this daemon to run when able\\nlet asynchronousHelpers = [];\\nlet periodicScripts = [];\\n// The primary tools copied around and used for hacking\\nlet hackTools = [];\\n// toolkit var for remembering the names and costs of the scripts we use the most\\nlet tools = [];\\nlet toolsByShortName = []; // Dictionary keyed by tool short name\\nlet allHelpersRunning = false; // Tracks whether all long-lived helper scripts have been launched\\n\\n// Command line Flags\\nlet hackOnly = false; // \\\"-h\\\" command line arg - don't grow or shrink, just hack (a.k.a. scrapping mode)\\nlet stockMode = false; // \\\"-s\\\" command line arg - hack/grow servers in a way that boosts our current stock positions\\nlet stockFocus = false;  // If true, stocks are main source of income - kill any scripts that would do them harm\\nlet xpOnly = false; // \\\"-x\\\" command line arg - focus on a strategy that produces the most hack EXP rather than money\\nlet verbose = false; // \\\"-v\\\" command line arg - Detailed logs about batch scheduling / tuning\\nlet runOnce = false; // \\\"-o\\\" command line arg - Good for debugging, run the main targettomg loop once then stop\\nlet useHacknetNodes = false; // \\\"-n\\\" command line arg - Can toggle using hacknet nodes for extra hacking ram\\nlet loopingMode = false;\\nlet recoveryThreadPadding = 1; // How many multiples to increase the weaken/grow threads to recovery from misfires automatically (useful when RAM is abundant and timings are tight)\\n\\n// simple name array of servers that have been added\\nlet addedServerNames = [];\\n// complex arrays of servers with relevant properties, one is sorted for ram available, the other is for money\\nlet serverListByFreeRam = [];\\nlet serverListByMaxRam = [];\\nlet serverListByTargetOrder = [];\\n\\nlet _ns = null; // Globally available ns reference, for convenience\\nlet daemonHost = null; // the name of the host of this daemon, so we don't have to call the function more than once.\\nlet playerStats = null; // stores ultipliers for player abilities and other player info\\nlet hasFormulas = true;\\nlet currentTerminalServer; // Periodically updated when intelligence farming, the current connected terminal server.\\nlet dictSourceFiles; // Available source files\\nlet bitnodeMults = null; // bitnode multipliers that can be automatically determined after SF-5\\n\\n// Property to avoid log churn if our status hasn't changed since the last loop\\nlet lastUpdate = \\\"\\\";\\nlet lastUpdateTime = Date.now();\\nlet lowUtilizationIterations = 0;\\nlet highUtilizationIterations = 0;\\nlet lastShareTime = 0; // Tracks when share was last invoked so we can respect the configured share-cooldown\\n\\n// Replacements / wrappers for various NS calls to let us keep track of them in one place and consolidate where possible\\nlet log = (...args) => logHelper(_ns, ...args);\\n\\nasync function updatePlayerStats() { return playerStats = await getNsDataThroughFile(_ns, `ns.getPlayer()`, '/Temp/player-info.txt'); }\\n\\nfunction playerHackSkill() { return playerStats.hacking; }\\n\\nfunction getPlayerHackingGrowMulti() { return playerStats.hacking_grow_mult };\\n//let playerMoney = () => playerStats.money;\\nfunction doesFileExist(filename, hostname = undefined) { return _ns.fileExists(filename, hostname); }\\n\\nlet psCache = [];\\n/** @param {NS} ns \\n * PS can get expensive, and we use it a lot so we cache this for the duration of a loop */\\nfunction ps(ns, server, canUseCache = true) {\\n    const cachedResult = psCache[server];\\n    return canUseCache && cachedResult ? cachedResult : (psCache[server] = ns.ps(server));\\n}\\n\\n// Returns true if we're at a point where we want to save money for a big purchase on the horizon\\nfunction shouldReserveMoney() {\\n    let playerMoney = _ns.getServerMoneyAvailable(\\\"home\\\");\\n    if (!doesFileExist(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\n        if (playerMoney > 20000000)\\n            return true; // Start saving at 200m of the 250m required for SQLInject\\n    } else if (!playerStats.has4SDataTixApi) {\\n        if (playerMoney >= (bitnodeMults.FourSigmaMarketDataApiCost * 25000000000) / 2)\\n            return true; // Start saving if we're half-way to buying 4S market access  \\n    }\\n    return false;\\n}\\n\\nlet options;\\nconst argsSchema = [\\n    ['h', false], // Do nothing but hack, no prepping (drains servers to 0 money, if you want to do that for some reason)\\n    ['hack-only', false], // Same as above\\n    ['s', false], // Enable Stock Manipulation\\n    ['stock-manipulation', false], // Same as above\\n    ['stock-manipulation-focus', false], // Stocks are main source of income - kill any scripts that would do them harm (TODO: Enable automatically in BN8)\\n    ['v', false], // Detailed logs about batch scheduling / tuning\\n    ['verbose', false], // Same as above\\n    ['o', false], // Good for debugging, run the main targettomg loop once then stop, with some extra logs\\n    ['run-once', false], // Same as above\\n    ['x', false], // Focus on a strategy that produces the most hack EXP rather than money\\n    ['xp-only', false], // Same as above\\n    ['n', false], // Can toggle on using hacknet nodes for extra hacking ram (at the expense of hash production)\\n    ['use-hacknet-nodes', false], // Same as above\\n    ['silent-misfires', true], // Instruct remote scripts not to alert when they misfire\\n    ['initial-max-targets', 4], // Initial number of servers to target / prep (TODO: Scale this as BN progression increases)\\n    ['max-steal-percentage', 0.8], // Don't steal more than this in case something goes wrong with timing or scheduling, it's hard to recover from\\n    ['cycle-timing-delay', 16000], // Time \\n    ['queue-delay', 1000], // Delay before the first script begins, to give time for all scripts to be scheduled\\n    ['max-batches', 20], // Maximum overlapping cycles to schedule in advance. Note that once scheduled, we must wait for all batches to complete before we can schedule more\\n    ['i', false], // Farm intelligence with manual hack.\\n    ['reserved-ram', 32],\\n    ['looping-mode', false], // Set to true to attempt to schedule perpetually-looping tasks.\\n    ['recovery-thread-padding', 1],\\n    ['share', false], // Enable sharing free ram to increase faction rep gain (enabled automatically once RAM is sufficient)\\n    ['no-share', false], // Disable sharing free ram to increase faction rep gain\\n    ['share-cooldown', 5000], // Wait before attempting to schedule more share threads (e.g. to free RAM to be freed for hack batch scheduling first)\\n    ['share-max-utilization', 0.9], // Set to 1 if you don't care to leave any RAM free after sharing. Will use up to this much of the available RAM\\n];\\n\\nexport function autocomplete(data, args) {\\n    data.flags(argsSchema);\\n    return [];\\n}\\n\\n// script entry point\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    _ns = ns;\\n    daemonHost = \\\"home\\\"; // ns.getHostname(); // get the name of this node (realistically, will always be home)\\n    await updatePlayerStats();\\n    dictSourceFiles = await getActiveSourceFiles_Custom(ns, getNsDataThroughFile);\\n    log(\\\"The following source files are active: \\\" + JSON.stringify(dictSourceFiles));\\n    //ns.disableLog('ALL');\\n    disableLogs(ns, ['getServerMaxRam', 'getServerUsedRam', 'getServerMoneyAvailable', 'getServerGrowth', 'getServerSecurityLevel', 'exec', 'scan']);\\n\\n    // Reset global vars on startup since they persist in memory in certain situations (such as on Augmentation)\\n    lastUpdate = \\\"\\\";\\n    lastUpdateTime = Date.now();\\n    maxTargets = 4;\\n    lowUtilizationIterations = 0;\\n    highUtilizationIterations = 0;\\n    serverListByFreeRam = [];\\n    serverListByTargetOrder = [];\\n    serverListByMaxRam = [];\\n    addedServerNames = [];\\n    tools = [];\\n    toolsByShortName = [];\\n    psCache = [];\\n\\n    // Process command line args (if any)\\n    options = ns.flags(argsSchema);\\n    hackOnly = options.h || options['hack-only'];\\n    xpOnly = options.x || options['xp-only'];\\n    stockMode = options.s || options['stock-manipulation'] || options['stock-manipulation-focus'];\\n    stockFocus = options['stock-manipulation-focus'];\\n    useHacknetNodes = options.n || options['use-hacknet-nodes'];\\n    verbose = options.v || options['verbose'];\\n    runOnce = options.o || options['run-once'];\\n    loopingMode = options['looping-mode'];\\n    recoveryThreadPadding = options['recovery-thread-padding'];\\n    // Log which flaggs are active\\n    if (hackOnly) log('-h - Hack-Only mode activated!');\\n    if (xpOnly) log('-x - Hack XP Grinding mode activated!');\\n    if (stockMode) log('-s - Stock market manipulation mode activated!');\\n    if (stockFocus) log('--stock-manipulation-focus - Stock market manipulation is the main priority');\\n    if (useHacknetNodes) log('-n - Using hacknet nodes to run scripts!');\\n    if (verbose) log('-v - Verbose logging activated!');\\n    if (runOnce) log('-o - Run-once mode activated!');\\n    if (loopingMode) {\\n        log('--looping-mode - scheduled remote tasks will loop themselves');\\n        cycleTimingDelay = 0;\\n        queueDelay = 0;\\n        if (recoveryThreadPadding == 1) recoveryThreadPadding = 10;\\n        if (stockMode) stockFocus = true; // Need to actively kill scripts that go against stock because they will live forever\\n    }\\n    cycleTimingDelay = options['cycle-timing-delay'];\\n    queueDelay = options['queue-delay'];\\n    maxBatches = options['max-batches'];\\n    homeReservedRam = options['reserved-ram']\\n\\n    // These scripts are started once and expected to run forever (or terminate themselves when no longer needed)\\n    asynchronousHelpers = [\\n        { name: \\\"stats.js\\\", shouldRun: () => ns.getServerMaxRam(\\\"home\\\") >= 64 /* Don't waste precious RAM */ }, // Adds stats not usually in the HUD\\n        { name: \\\"hacknet-upgrade-manager.js\\\", args: [\\\"-c\\\", \\\"--max-payoff-time\\\", \\\"1h\\\"] }, // Kickstart hash income by buying everything with up to 1h payoff time immediately\\n        { name: \\\"stockmaster.js\\\", args: [\\\"--show-market-summary\\\"], tail: true, shouldRun: () => playerStats.hasTixApiAccess }, // Start our stockmaster if we have the required stockmarket access\\n        { name: \\\"gangs.js\\\", tail: true, shouldRun: () => 2 in dictSourceFiles }, // Script to create manage our gang for us\\n        { name: \\\"spend-hacknet-hashes.js\\\", args: [\\\"-v\\\"], shouldRun: () => 9 in dictSourceFiles }, // Always have this running to make sure hashes aren't wasted\\n        { name: \\\"sleeve.js\\\", tail: true, shouldRun: () => 10 in dictSourceFiles }, // Script to create manage our sleeves for us\\n        {\\n            name: \\\"work-for-factions.js\\\", args: ['--fast-crimes-only', '--no-coding-contracts'],  // Singularity script to manage how we use our \\\"focus\\\" work.\\n            shouldRun: () => 4 in dictSourceFiles && (ns.getServerMaxRam(\\\"home\\\") >= 128 / (2 ** dictSourceFiles[4])) // Higher SF4 levels result in lower RAM requirements\\n        },\\n    ];\\n    asynchronousHelpers.forEach(helper => helper.name = getFilePath(helper.name));\\n    asynchronousHelpers.forEach(helper => helper.isLaunched = false);\\n    asynchronousHelpers.forEach(helper => helper.requiredServer = \\\"home\\\"); // All helpers should be launched at home since they use tempory scripts, and we only reserve ram on home\\n    // These scripts are spawned periodically (at some interval) to do their checks, with an optional condition that limits when they should be spawned\\n    let shouldUpgradeHacknet = () => !shouldReserveMoney() && (whichServerIsRunning(ns, \\\"hacknet-upgrade-manager.js\\\", false) === null);\\n    // In BN8 (stocks-only bn) and others with hack income disabled, don't waste money on improving hacking infrastructure unless we have plenty of money to spare\\n    let shouldImproveHacking = () => bitnodeMults.ScriptHackMoneyGain != 0 || playerStats.bitNodeN != 8 || ns.getServerMoneyAvailable(\\\"home\\\") > 1e10;\\n\\n    periodicScripts = [\\n        // Buy tor as soon as we can if we haven't already, and all the port crackers\\n        { interval: 29000, name: \\\"/Tasks/tor-manager.js\\\", shouldRun: () => 4 in dictSourceFiles && !addedServerNames.includes(\\\"darkweb\\\") },\\n        { interval: 30000, name: \\\"/Tasks/program-manager.js\\\", shouldRun: () => 4 in dictSourceFiles && getNumPortCrackers() != 5 && (getNumPortCrackers() < 3 || shouldImproveHacking()) },\\n        { interval: 31000, name: \\\"/Tasks/ram-manager.js\\\", shouldRun: () => 4 in dictSourceFiles && dictSourceFiles[4] >= 2 && !shouldReserveMoney() && (getTotalNetworkUtilization() > 0.85 || xpOnly) && shouldImproveHacking() },\\n        // Buy every hacknet upgrade with up to 4h payoff if it is less than 10% of our current money or 8h if it is less than 1% of our current money\\n        { interval: 32000, name: \\\"hacknet-upgrade-manager.js\\\", shouldRun: shouldUpgradeHacknet, args: () => [\\\"-c\\\", \\\"--max-payoff-time\\\", \\\"4h\\\", \\\"--max-spend\\\", ns.getServerMoneyAvailable(\\\"home\\\") * 0.1] },\\n        { interval: 33000, name: \\\"hacknet-upgrade-manager.js\\\", shouldRun: shouldUpgradeHacknet, args: () => [\\\"-c\\\", \\\"--max-payoff-time\\\", \\\"8h\\\", \\\"--max-spend\\\", ns.getServerMoneyAvailable(\\\"home\\\") * 0.01] },\\n        // Don't start auto-joining factions until we're holding 1 billion (so coding contracts returning money is probably less critical) or we've joined one already\\n        {\\n            interval: 34000, name: \\\"faction-manager.js\\\", requiredServer: \\\"home\\\", args: ['--join-only'],\\n            shouldRun: () => 4 in dictSourceFiles && (playerStats.factions.length > 0 || ns.getServerMoneyAvailable(\\\"home\\\") > 1e9) &&\\n                (ns.getServerMaxRam(\\\"home\\\") >= 128 / (2 ** dictSourceFiles[4])) // Uses singularity functions, and higher SF4 levels result in lower RAM requirements\\n        },\\n        { interval: 51000, name: \\\"/Tasks/contractor.js\\\", requiredServer: \\\"home\\\" },\\n        { interval: 110000, name: \\\"/Tasks/backdoor-all-servers.js\\\", requiredServer: \\\"home\\\", shouldRun: () => 4 in dictSourceFiles },\\n        { interval: 111000, name: \\\"host-manager.js\\\", requiredServer: \\\"home\\\", shouldRun: () => !shouldReserveMoney() && shouldImproveHacking(), args: () => [\\\"--reserve-by-time\\\"] },\\n    ];\\n    periodicScripts.forEach(tool => tool.name = getFilePath(tool.name));\\n    hackTools = [\\n        { name: \\\"/Remote/weak-target.js\\\", shortName: \\\"weak\\\", threadSpreadingAllowed: true },\\n        { name: \\\"/Remote/grow-target.js\\\", shortName: \\\"grow\\\" },\\n        { name: \\\"/Remote/hack-target.js\\\", shortName: \\\"hack\\\" },\\n        { name: \\\"/Remote/manualhack-target.js\\\", shortName: \\\"manualhack\\\" },\\n        { name: \\\"/Remote/share.js\\\", shortName: \\\"share\\\", threadSpreadingAllowed: true },\\n    ];\\n    hackTools.forEach(tool => tool.name = getFilePath(tool.name));\\n\\n    await buildToolkit(ns); // build toolkit\\n    await getStaticServerData(ns, scanAllServers(ns)); // Gather information about servers that will never change\\n    buildServerList(ns); // create the exhaustive server list   \\n    await establishMultipliers(ns); // figure out the various bitnode and player multipliers\\n\\n    allHelpersRunning = hackOnly ? true : await runStartupScripts(ns); // Start helper scripts\\n    if (playerHackSkill() < 3000 && !xpOnly)\\n        await kickstartHackXp(ns, 0.5, verbose, 1); // Fire a hack XP cycle using a chunk of free RAM\\n    if (stockFocus)\\n        maxTargets = Object.keys(serverStockSymbols).length; // Ensure we immediately attempt to target all servers that represent stocks\\n    if (stockMode && !playerStats.hasTixApiAccess)\\n        log(\\\"WARNING: Ran with '--stock-manipulation' flag, but this will have no effect until you buy access to the stock market API then restart or manually run stockmaster.js\\\");\\n\\n    maxTargets = Math.max(maxTargets, options['initial-max-targets'])\\n\\n    // the actual worker processes live here\\n    await doTargetingLoop(ns);\\n}\\n\\n// Check running status of scripts on servers\\nfunction whichServerIsRunning(ns, scriptName, canUseCache = true) {\\n    for (const server of serverListByFreeRam)\\n        if (ps(ns, server.name, canUseCache).some(process => process.filename === scriptName))\\n            return server.name;\\n    return null;\\n}\\n\\n// Helper to kick off helper scripts\\n/** @param {NS} ns **/\\nasync function runStartupScripts(ns) {\\n    for (const helper of asynchronousHelpers)\\n        if (!helper.isLaunched && (helper.shouldRun === undefined || helper.shouldRun()))\\n            helper.isLaunched = await tryRunTool(ns, getTool(helper))\\n    // if every helper is launched already return \\\"true\\\" so we can skip doing this each cycle going forward.\\n    return asynchronousHelpers.reduce((allLaunched, tool) => allLaunched && tool.isLaunched, true);\\n}\\n\\n/** @param {NS} ns **/\\nasync function runPeriodicScripts(ns) {\\n    // Checks whether it's time for any scheduled tasks to run\\n    for (const task of periodicScripts) {\\n        let tool = getTool(task);\\n        if ((Date.now() - (task.lastRun || 0) >= task.interval) && (task.shouldRun === undefined || task.shouldRun())) {\\n            task.lastRun = Date.now()\\n            await tryRunTool(ns, tool);\\n        }\\n    }\\n    // Super-early aug, if we are poor, spend hashes as soon as we get them for a quick cash injection. (Only applies if we have hacknet servers)\\n    if (9 in dictSourceFiles && ns.getServerMoneyAvailable(\\\"home\\\") < 10000000 && (ns.getServerMaxRam(\\\"home\\\") - ns.getServerUsedRam(\\\"home\\\")) >= 5.6) {\\n        await runCommand(ns, `0; if(ns.hacknet.spendHashes(\\\"Sell for Money\\\")) ns.toast('Sold 4 hashes for \\\\$1M', 'success')`, '/Temp/sell-hashes-for-money.js');\\n    }\\n}\\n\\n// Helper that gets the either invokes a function that returns a value, or returns the value as-is if it is not a function.\\nconst funcResultOrValue = fnOrVal => (fnOrVal instanceof Function ? fnOrVal() : fnOrVal);\\n\\n// Returns true if the tool is running (including if it was already running), false if it could not be run.\\n/** @param {NS} ns **/\\nasync function tryRunTool(ns, tool) {\\n    if (!doesFileExist(tool.name)) {\\n        log(`ERROR: Tool ${tool.name} was not found on ${daemonHost}`, true, 'error');\\n        return false;\\n    }\\n    let runningOnServer = whichServerIsRunning(ns, tool.name);\\n    if (runningOnServer != null) {\\n        if (verbose) log(`INFO: Tool ${tool.name} is already running on server ${runningOnServer}.`);\\n        return true;\\n    }\\n    const args = funcResultOrValue(tool.args) || []; // Support either a static args array, or a function returning the args.\\n    const runResult = await arbitraryExecution(ns, tool, 1, args, tool.requiredServer || \\\"home\\\"); // TODO: Allow actually requiring a server\\n    if (runResult) {\\n        runningOnServer = whichServerIsRunning(ns, tool.name, false);\\n        if (verbose) log(`Ran tool: ${tool.name} on server ${runningOnServer}` + (args.length > 0 ? ` with args ${JSON.stringify(args)}` : ''));\\n        if (tool.tail === true) {\\n            log(`Tailing Tool: ${tool.name} on server ${runningOnServer}` + (args.length > 0 ? ` with args ${JSON.stringify(args)}` : ''));\\n            ns.tail(tool.name, runningOnServer, ...args);\\n            tool.tail = false; // Avoid popping open additional tail windows in the future\\n        }\\n        return true;\\n    } else\\n        log(`WARNING: Tool cannot be run (insufficient RAM? REQ: ${formatRam(tool.cost)}): ${tool.name}`, false, 'warning');\\n    return false;\\n}\\n\\n/** @param {NS} ns \\n * Execute an external script that roots a server, and wait for it to complete. **/\\nasync function doRoot(ns, server) {\\n    const pid = ns.exec(getFilePath('/Tasks/crack-host.js'), 'home', 1, server.name);\\n    await waitForProcessToComplete_Custom(ns, getFnIsAliveViaNsPs(ns), pid);\\n}\\n\\n// Main targeting loop\\n/** @param {NS} ns **/\\nasync function doTargetingLoop(ns) {\\n    log(\\\"doTargetingLoop\\\");\\n    let loops = -1;\\n    //var isHelperListLaunched = false; // Uncomment this and related code to keep trying to start helpers\\n    do {\\n        loops++;\\n        if (loops > 0) await ns.sleep(loopInterval);\\n        try {\\n            var start = Date.now();\\n            psCache = []; // Clear the cache of the process list we update once per loop           \\n            buildServerList(ns, true); // Check if any new servers have been purchased by the external host_manager process           \\n            await updatePlayerStats(); // Update player info\\n            // Run some auxilliary processes that ease the ram burden of this daemon and add additional functionality (like managing hacknet or buying servers)\\n            await runPeriodicScripts(ns);\\n\\n            if (stockMode) await updateStockPositions(ns); // In stock market manipulation mode, get our current position in all stocks\\n            sortServerList(\\\"targeting\\\"); // Update the order in which we ought to target servers\\n\\n            if (loops % 60 == 0) { // For more expensive updates, only do these every so often\\n                // If we have not yet launched all helpers (e.g. awaiting more home ram, or TIX API to be purchased) see if any are now ready to be run\\n                if (!allHelpersRunning) allHelpersRunning = await runStartupScripts(ns);\\n                // Pull additional data about servers that infrequently changes\\n                await refreshDynamicServerData(ns, addedServerNames);\\n                // Occassionally print our current targetting order (todo, make this controllable with a flag or custom UI?)\\n                if (verbose && loops % 600 == 0)\\n                    log('Targetting Order:\\\\n  ' + serverListByTargetOrder.filter(s => s.shouldHack()).map(s =>\\n                        `${s.isPrepped() ? '*' : ' '} ${s.canHack() ? '✓' : 'X'} Money: ${formatMoney(s.getMoney(), 4)} of ${formatMoney(s.getMaxMoney(), 4)} ` +\\n                        `(${formatMoney(s.getMoneyPerRamSecond(), 4)}/ram.sec), Sec: ${formatNumber(s.getSecurity(), 3)} of ${formatNumber(s.getMinSecurity(), 3)}, ` +\\n                        `TTW: ${formatDuration(s.timeToWeaken())}, Hack: ${s.requiredHackLevel} - ${s.name}` +\\n                        (!stockMode || !serverStockSymbols[s.name] ? '' : ` Sym: ${serverStockSymbols[s.name]} Owned: ${serversWithOwnedStock.includes(s.name)} ` +\\n                            `Manip: ${shouldManipulateGrow[s.name] ? \\\"grow\\\" : shouldManipulateHack[s.name] ? \\\"hack\\\" : '(disabled)'}`))\\n                        .join('\\\\n  '));\\n            }\\n            var prepping = [];\\n            var preppedButNotTargeting = [];\\n            var targeting = [];\\n            var notRooted = [];\\n            var cantHack = [];\\n            var cantHackButPrepped = [];\\n            var cantHackButPrepping = [];\\n            var noMoney = [];\\n            var failed = [];\\n            var skipped = [];\\n            var lowestUnhackable = 99999;\\n\\n            // Hack: We can get stuck and never improve if we don't try to prep at least one server to improve our future targeting options.\\n            // So get the first un-prepped server that is within our hacking level, and move it to the front of the list.\\n            var firstUnpreppedServerIndex = serverListByTargetOrder.findIndex(s => s.shouldHack() && s.canHack() && !s.isPrepped() && !s.isTargeting())\\n            if (firstUnpreppedServerIndex !== -1 && !stockMode)\\n                serverListByTargetOrder.unshift(serverListByTargetOrder.splice(firstUnpreppedServerIndex, 1)[0]);\\n\\n            // If this gets set to true, the loop will continue (e.g. to gather information), but no more work will be scheduled\\n            var workCapped = false;\\n            // Function to assess whether we've hit some cap that should prevent us from scheduling any more work\\n            let isWorkCapped = () => workCapped = workCapped || failed.length > 0 // Scheduling fails when there's insufficient RAM. We've likely encountered a \\\"soft cap\\\" on ram utilization e.g. due to fragmentation\\n                || getTotalNetworkUtilization() >= maxUtilization // \\\"hard cap\\\" on ram utilization, can be used to reserve ram or reduce the rate of encountering the \\\"soft cap\\\"\\n                || targeting.length >= maxTargets // variable cap on the number of simultaneous targets\\n                || (targeting.length + prepping.length) >= (maxTargets + maxPreppingAtMaxTargets); // Only allow a couple servers to be prepped in advance when at max-targets\\n\\n            // check for servers that need to be rooted\\n            // simultaneously compare our current target to potential targets\\n            for (var i = 0; i < serverListByTargetOrder.length; i++) {\\n                if ((Date.now() - start) >= maxLoopTime) { // To avoid lagging the game, completely break out of the loop if we start to run over\\n                    skipped = skipped.concat(serverListByTargetOrder.slice(i));\\n                    workCapped = true;\\n                    break;\\n                }\\n\\n                const server = serverListByTargetOrder[i];\\n                // Attempt to root any servers that are not yet rooted\\n                if (!server.hasRoot() && server.canCrack())\\n                    await doRoot(ns, server);\\n\\n                // Check whether we can / should attempt any actions on this server\\n                if (!server.shouldHack()) { // Ignore servers we own (bought servers / home / no money)\\n                    noMoney.push(server);\\n                } else if (!server.hasRoot()) { // Can't do anything to servers we have not yet cracked\\n                    notRooted.push(server);\\n                } else if (!server.canHack()) { // Note servers above our Hack skill. We can prep them a little if we have spare RAM at the end.\\n                    cantHack.push(server);\\n                    lowestUnhackable = Math.min(lowestUnhackable, server.requiredHackLevel);\\n                    // New logic allows for unhackable servers to be prepping. Keep tabs on how many we have of each\\n                    if (server.isPrepped())\\n                        cantHackButPrepped.push(server);\\n                    else if (server.isPrepping())\\n                        cantHackButPrepping.push(server);\\n                } else if (server.isTargeting()) { // Note servers already being targeted from a prior loop\\n                    targeting.push(server); // TODO: While targeting, we should keep queuing more batches\\n                } else if (server.isPrepping()) { // Note servers already being prepped from a prior loop\\n                    prepping.push(server);\\n                } else if (isWorkCapped() || xpOnly) { // Various conditions for which we'll postpone any additional work on servers\\n                    if (xpOnly && (((nextXpCycleEnd[server.name] || 0) > start - 10000) || server.isXpFarming()))\\n                        targeting.push(server); // A server counts as \\\"targeting\\\" if in XP mode and its due to be farmed or was in the past 10 seconds\\n                    else\\n                        skipped.push(server);\\n                } else if (!hackOnly && true == await prepServer(ns, server)) { // Returns true if prepping, false if prepping failed, null if prepped\\n                    if (server.previouslyPrepped)\\n                        log(`WARNING ${server.prepRegressions++}: Server was prepped, but now at security: ${formatNumber(server.getSecurity())} ` +\\n                            `(min ${formatNumber(server.getMinSecurity())}) money: ${formatMoney(server.getMoney(), 3)} (max ${formatMoney(server.getMaxMoney(), 3)}). ` +\\n                            `Prior cycle: ${server.previousCycle}. ETA now (Hack ${playerHackSkill()}) is ${formatDuration(server.timeToWeaken())}`, true, 'warning');\\n                    prepping.push(server); // Perform weakening and initial growth until the server is \\\"perfected\\\" (unless in hack-only mode)\\n                } else if (!hackOnly && !server.isPrepped()) { // If prepServer returned false or null. Check ourselves whether it is prepped\\n                    log('Prep failed for \\\"' + server.name + '\\\" (RAM Utilization: ' + (getTotalNetworkUtilization() * 100).toFixed(2) + '%)');\\n                    failed.push(server);\\n                } else if (targeting.length >= maxTargets) { // Hard cap on number of targets, changes with utilization\\n                    server.previouslyPrepped = true;\\n                    preppedButNotTargeting.push(server);\\n                } else { // Otherwise, server is prepped at min security & max money and ready to target                       \\n                    var performanceSnapshot = optimizePerformanceMetrics(server); // Adjust the percentage to steal for optimal scheduling\\n                    if (server.actualPercentageToSteal() === 0) { // Not enough RAM for even one hack thread of this next-best target.\\n                        failed.push(server);\\n                    } else if (true == await performScheduling(ns, server, performanceSnapshot)) { // once conditions are optimal, fire barrage after barrage of cycles in a schedule\\n                        targeting.push(server);\\n                    } else {\\n                        log('Targeting failed for \\\"' + server.name + '\\\" (RAM Utilization: ' + (getTotalNetworkUtilization() * 100).toFixed(2) + '%)');\\n                        failed.push(server);\\n                    }\\n                }\\n\\n                // Hack: Quickly ramp up our max-targets without waiting for the next loop if we are far below the low-utilization threshold\\n                if (lowUtilizationIterations >= 5 && targeting.length == maxTargets) {\\n                    let network = getNetworkStats();\\n                    let utilizationPercent = network.totalUsedRam / network.totalMaxRam;\\n                    if (utilizationPercent < lowUtilizationThreshold / 2) maxTargets++;\\n                }\\n            }\\n\\n            // Mini-loop for servers that we can't hack yet, but might have access to soon, we can at least prep them.\\n            if (!isWorkCapped() && cantHack.length > 0 && !hackOnly && !xpOnly) {\\n                // Prep in order of soonest to become available to us\\n                cantHack.sort(function (a, b) {\\n                    var diff = a.requiredHackLevel - b.requiredHackLevel;\\n                    return diff != 0.0 ? diff : b.getMoneyPerRamSecond() - a.getMoneyPerRamSecond(); // Break ties by sorting by max-money\\n                });\\n                // Try to prep them all unless one of our capping rules are hit\\n                // TODO: Something is not working right here, so until we figure it out, never look at more than the first unhackable server.\\n                for (var j = 0; j < 1 /*cantHack.length*/; j++) {\\n                    const server = cantHack[j];\\n                    if (isWorkCapped()) break;\\n                    if (cantHackButPrepped.includes(server) || cantHackButPrepping.includes(server))\\n                        continue;\\n                    var prepResult = await prepServer(ns, server);\\n                    if (prepResult == true) {\\n                        cantHackButPrepping.push(server);\\n                    } else if (prepResult == null) {\\n                        cantHackButPrepped.push(server);\\n                    } else {\\n                        log('Pre-Prep failed for \\\"' + server.name + '\\\" with ' + server.requiredHackLevel +\\n                            ' hack requirement (RAM Utilization: ' + (getTotalNetworkUtilization() * 100).toFixed(2) + '%)');\\n                        failed.push(server);\\n                        break;\\n                    }\\n                }\\n            }\\n\\n            let network = getNetworkStats();\\n            let utilizationPercent = network.totalUsedRam / network.totalMaxRam;\\n            highUtilizationIterations = utilizationPercent >= maxUtilization ? highUtilizationIterations + 1 : 0;\\n            lowUtilizationIterations = utilizationPercent <= lowUtilizationThreshold ? lowUtilizationIterations + 1 : 0;\\n\\n            // If we've been at low utilization for longer than the cycle of all our targets, we can add a target\\n            let intervalsPerTargetCycle = targeting.length == 0 ? 120 :\\n                Math.ceil((targeting.reduce((max, t) => Math.max(max, t.timeToWeaken()), 0) + cycleTimingDelay) / loopInterval);\\n            //log(`intervalsPerTargetCycle: ${intervalsPerTargetCycle} lowUtilizationIterations: ${lowUtilizationIterations} loopInterval: ${loopInterval}`);\\n            if (lowUtilizationIterations > intervalsPerTargetCycle && skipped.length > 0 && maxTargets < serverListByTargetOrder.length) {\\n                maxTargets++;\\n                log(`Increased max targets to ${maxTargets} since utilization (${formatNumber(utilizationPercent * 100, 3)}%) has been quite low for ${lowUtilizationIterations} iterations.`);\\n                lowUtilizationIterations = 0; // Reset the counter of low-utilization iterations\\n            } else if (highUtilizationIterations > 60) { // Decrease max-targets by 1 ram utilization is too high (prevents scheduling efficient cycles)\\n                maxTargets -= 1;\\n                log(`Decreased max targets to ${maxTargets} since utilization has been > ${formatNumber(maxUtilization * 100, 3)}% for 60 iterations and scheduling failed.`);\\n                highUtilizationIterations = 0; // Reset the counter of high-utilization iterations\\n            }\\n            maxTargets = Math.max(maxTargets, targeting.length - 1, 1); // Ensure that after a restart, maxTargets start off with no less than 1 fewer max targets\\n\\n            // If there is still unspent utilization, we can use a chunk of it it to farm XP\\n            if (xpOnly) { // If all we want to do is gain hack XP\\n                let time = await kickstartHackXp(ns, 1.00, verbose);\\n                loopInterval = Math.min(1000, time || 1000); // Wake up earlier if we're almost done an XP cycle\\n            } else if (!isWorkCapped() && lowUtilizationIterations > 10) {\\n                let expectedRunTime = getXPFarmServer().timeToHack();\\n                let freeRamToUse = (expectedRunTime < loopInterval) ? // If expected runtime is fast, use as much RAM as we want, it'll all be free by our next loop.\\n                    1 - (1 - lowUtilizationThreshold) / (1 - utilizationPercent) : // Take us just up to the threshold for 'lowUtilization' so we don't cause unecessary server purchases\\n                    1 - (1 - maxUtilizationPreppingAboveHackLevel - 0.05) / (1 - utilizationPercent); // Otherwise, leave more room (e.g. for scheduling new batches.)\\n                await kickstartHackXp(ns, freeRamToUse, verbose && (expectedRunTime > 10000 || lowUtilizationIterations % 10 == 0), 1);\\n            }\\n\\n            // Use any unspent RAM on share.\\n            const maxShareUtilization = options['share-max-utilization']\\n            if (failed.length <= 0 && utilizationPercent < maxShareUtilization && (Date.now() - lastShareTime) > options['share-cooldown'] &&\\n                !options['no-share'] && (options['share'] || network.totalMaxRam > 1024)) { // If not explicitly enabled or disabled, auto-enable share at 1TB of network RAM\\n                let shareTool = getTool(\\\"share\\\");\\n                let maxThreads = shareTool.getMaxThreads(); // This many threads would use up 100% of the (1-utilizationPercent)% RAM remaining\\n                if (xpOnly) maxThreads -= Math.floor(getServerByName('home').ramAvailable() / shareTool.cost); // Reserve home ram entirely for XP cycles when in xpOnly mode\\n                network = getNetworkStats(); // Update network stats since they may have changed after scheduling xp cycles above\\n                utilizationPercent = network.totalUsedRam / network.totalMaxRam;\\n                let shareThreads = Math.floor(maxThreads * (maxShareUtilization - utilizationPercent) / (1 - utilizationPercent)); // Ensure we don't take utilization above (1-maxShareUtilization)%\\n                if (shareThreads > 0) {\\n                    if (verbose) log(`Creating ${shareThreads.toLocaleString()} share threads to improve faction rep gain rates. Using ${formatRam(shareThreads * 4)} of ${formatRam(network.totalMaxRam)} ` +\\n                        `(${(400 * shareThreads / network.totalMaxRam).toFixed(1)}%) of all RAM). Final utilization will be ${(100 * (4 * shareThreads + network.totalUsedRam) / network.totalMaxRam).toFixed(1)}%`);\\n                    await arbitraryExecution(ns, getTool('share'), shareThreads, [Date.now()], null, true) // Note: Need a unique argument to multiple parallel share scripts on the same server\\n                    lastShareTime = Date.now();\\n                }\\n            } // else log(`Not Sharing. workCapped: ${isWorkCapped()} utilizationPercent: ${utilizationPercent} maxShareUtilization: ${maxShareUtilization} cooldown: ${formatDuration(Date.now() - lastShareTime)} networkRam: ${network.totalMaxRam}`);\\n\\n            // Log some status updates\\n            let keyUpdates = `Of ${serverListByFreeRam.length} total servers:\\\\n > ${noMoney.length} were ignored (owned or no money)`;\\n            if (notRooted.length > 0)\\n                keyUpdates += `, ${notRooted.length} are not rooted (missing ${crackNames.filter(c => !ownedCracks.includes(c)).join(', ')})`;\\n            if (cantHack.length > 0)\\n                keyUpdates += `\\\\n > ${cantHack.length} cannot be hacked (${cantHackButPrepping.length} prepping, ` +\\n                    `${cantHackButPrepped.length} prepped, next unlock at Hack ${lowestUnhackable})`;\\n            if (preppedButNotTargeting.length > 0)\\n                keyUpdates += `\\\\n > ${preppedButNotTargeting.length} are prepped but are not a priority target`;\\n            if (skipped.length > 0)\\n                keyUpdates += `\\\\n > ${skipped.length} were skipped for now (time, RAM, or target + prepping cap reached)`;\\n            if (failed.length > 0)\\n                keyUpdates += `\\\\n > ${failed.length} servers failed to be scheduled (insufficient RAM?).`;\\n            keyUpdates += `\\\\n > Targeting: ${targeting.length} servers, Prepping: ${prepping.length + cantHackButPrepping.length}`;\\n            if (xpOnly)\\n                keyUpdates += `\\\\n > Grinding XP from ${targeting.map(s => s.name).join(\\\", \\\")}`;\\n            // To reduce log spam, only log if some key status changes, or if it's been a minute\\n            if (keyUpdates != lastUpdate || (Date.now() - lastUpdateTime) > 60000) {\\n                log((lastUpdate = keyUpdates) +\\n                    '\\\\n > RAM Utilization: ' + formatRam(Math.ceil(network.totalUsedRam)) + ' of ' + formatRam(network.totalMaxRam) + ' (' + (utilizationPercent * 100).toFixed(1) + '%) ' +\\n                    `for ${lowUtilizationIterations || highUtilizationIterations} its, Max Targets: ${maxTargets}, Loop Took: ${Date.now() - start}ms`);\\n                lastUpdateTime = Date.now();\\n            }\\n            //log('Prepping: ' + prepping.map(s => s.name).join(', '))\\n            //log('targeting: ' + targeting.map(s => s.name).join(', '))\\n        } catch (err) {\\n            log('WARNING: Caught an error in the targeting loop: ' + err, true, 'warning');\\n            // Note netscript errors are raised as a simple string (no message property)\\n            var errorMessage = String(err.message || err);\\n            // Catch errors that appear to be caused by deleted servers, and remove the server from our lists.\\n            const expectedDeletedHostPhrase = \\\"Invalid IP/hostname: \\\";\\n            let expectedErrorPhraseIndex = errorMessage.indexOf(expectedDeletedHostPhrase);\\n            if (expectedErrorPhraseIndex == -1) continue;\\n            let start = expectedErrorPhraseIndex + expectedDeletedHostPhrase.length;\\n            let lineBreak = errorMessage.indexOf('<br>', start);\\n            let deletedHostName = errorMessage.substring(start, lineBreak);\\n            log('INFO: The server \\\"' + deletedHostName + '\\\" appears to have been deleted. Removing it from our lists', false, 'info');\\n            removeServerByName(deletedHostName);\\n        }\\n    } while (!runOnce);\\n}\\n\\n// How much a weaken thread is expected to reduce security by\\nlet actualWeakenPotency = () => bitnodeMults.ServerWeakenRate * weakenThreadPotency * (1 - weakenThreadPadding);\\n\\n// Dictionaries of static server information\\nlet serversDictCommand = (servers, command) => `Object.fromEntries(${JSON.stringify(servers)}.map(server => [server, ${command}]))`;\\nlet dictServerRequiredHackinglevels;\\nlet dictServerNumPortsRequired;\\nlet dictServerMinSecurityLevels;\\nlet dictServerMaxMoney;\\nlet dictServerProfitInfo;\\n\\n// Gathers up arrays of server data via external request to have the data written to disk.\\nasync function getStaticServerData(ns, serverNames) {\\n    dictServerRequiredHackinglevels = await getNsDataThroughFile(ns, serversDictCommand(serverNames, 'ns.getServerRequiredHackingLevel(server)'), '/Temp/servers-hack-req.txt');\\n    dictServerNumPortsRequired = await getNsDataThroughFile(ns, serversDictCommand(serverNames, 'ns.getServerNumPortsRequired(server)'), '/Temp/servers-num-ports.txt');\\n    await refreshDynamicServerData(ns, serverNames);\\n}\\n\\n/** @param {NS} ns **/\\nasync function refreshDynamicServerData(ns, serverNames) {\\n    dictServerMinSecurityLevels = await getNsDataThroughFile(ns, serversDictCommand(serverNames, 'ns.getServerMinSecurityLevel(server)'), '/Temp/servers-security.txt');\\n    dictServerMaxMoney = await getNsDataThroughFile(ns, serversDictCommand(serverNames, 'ns.getServerMaxMoney(server)'), '/Temp/servers-max-money.txt');\\n    // Get the information about the relative profitability of each server\\n    const pid = ns.exec(getFilePath('analyze-hack.js'), 'home', 1, '--all', '--silent');\\n    await waitForProcessToComplete_Custom(ns, getFnIsAliveViaNsPs(ns), pid);\\n    dictServerProfitInfo = ns.read('/Temp/analyze-hack.txt');\\n    if (!dictServerProfitInfo) return log(ns, \\\"WARN: analyze-hack info unavailable.\\\");\\n    dictServerProfitInfo = Object.fromEntries(JSON.parse(dictServerProfitInfo).map(s => [s.hostname, s]));\\n    //ns.print(dictServerProfitInfo);\\n    if (options.i)\\n        currentTerminalServer = getServerByName(await getNsDataThroughFile(ns, 'ns.getCurrentServer()', '/Temp/terminal-server.txt'));\\n}\\n\\n/** @param {NS} ns **/\\nfunction buildServerObject(ns, node) {\\n    return {\\n        ns: ns,\\n        name: node,\\n        requiredHackLevel: dictServerRequiredHackinglevels[node],\\n        portsRequired: dictServerNumPortsRequired[node],\\n        getMinSecurity: () => dictServerMinSecurityLevels[node] ?? 0, // Servers not in our dictionary were purchased, and so undefined is okay\\n        getMaxMoney: () => dictServerMaxMoney[node] ?? 0,\\n        getMoneyPerRamSecond: () => dictServerProfitInfo ? dictServerProfitInfo[node]?.gainRate ?? 0 : (dictServerMaxMoney[node] ?? 0),\\n        getExpPerSecond: () => dictServerProfitInfo ? dictServerProfitInfo[node]?.expRate ?? 0 : (1 / dictServerMinSecurityLevels[node] ?? 0),\\n        percentageToSteal: 1.0 / 16.0, // This will get tweaked automatically based on RAM available and the relative value of this server\\n        getMoney: function () { return this.ns.getServerMoneyAvailable(this.name); },\\n        getSecurity: function () { return this.ns.getServerSecurityLevel(this.name); },\\n        canCrack: function () { return getNumPortCrackers() >= this.portsRequired; },\\n        canHack: function () { return this.requiredHackLevel <= playerHackSkill(); },\\n        shouldHack: function () {\\n            return this.getMaxMoney() > 0 && this.name !== \\\"home\\\" && !this.name.startsWith('hacknet-node-') &&\\n                !this.name.startsWith(purchasedServersName); // Hack, but beats wasting 2.25 GB on ns.getPurchasedServers()\\n        },\\n        previouslyPrepped: false,\\n        prepRegressions: 0,\\n        previousCycle: null,\\n        // \\\"Prepped\\\" means current security is at the minimum, and current money is at the maximum\\n        isPrepped: function () {\\n            let currentSecurity = this.getSecurity();\\n            let currentMoney = this.getMoney();\\n            // Logic for whether we consider the server \\\"prepped\\\" (tolerate a 1% discrepancy)\\n            let isPrepped = (currentSecurity == 0 || ((this.getMinSecurity() / currentSecurity) >= 0.99)) &&\\n                (this.getMaxMoney() != 0 && ((currentMoney / this.getMaxMoney()) >= 0.99) || stockFocus /* Only prep security in stock-focus mode */);\\n            return isPrepped;\\n        },\\n        // Function to tell if the sever is running any tools, with optional filtering criteria on the tool being run\\n        isSubjectOfRunningScript: function (filter, useCache = true, count = false) {\\n            const toolNames = hackTools.map(t => t.name);\\n            let total = 0;\\n            // then figure out if the servers are running the other 2, that means prep\\n            for (const hostname of addedServerNames)\\n                for (const process of ps(ns, hostname, useCache))\\n                    if (toolNames.includes(process.filename) && process.args[0] == this.name && (!filter || filter(process))) {\\n                        if (count) total++; else return true;\\n                    }\\n            return count ? total : false;\\n        },\\n        isPrepping: function (useCache = true) {\\n            return this.isSubjectOfRunningScript(process => process.args.length > 4 && process.args[4] == \\\"prep\\\", useCache);\\n        },\\n        isTargeting: function (useCache = true) {\\n            return this.isSubjectOfRunningScript(process => process.args.length > 4 && process.args[4].includes('Batch'), useCache);\\n        },\\n        isXpFarming: function (useCache = true) {\\n            return this.isSubjectOfRunningScript(process => process.args.length > 4 && process.args[4].includes('FarmXP'), useCache);\\n        },\\n        serverGrowthPercentage: function () {\\n            return this.ns.getServerGrowth(this.name) * bitnodeMults.ServerGrowthRate * getPlayerHackingGrowMulti() / 100;\\n        },\\n        adjustedGrowthRate: function () { return Math.min(maxGrowthRate, 1 + ((unadjustedGrowthRate - 1) / this.getMinSecurity())); },\\n        actualServerGrowthRate: function () {\\n            return Math.pow(this.adjustedGrowthRate(), this.serverGrowthPercentage());\\n        },\\n        // this is the target growth coefficient *immediately*\\n        targetGrowthCoefficient: function () {\\n            return this.getMaxMoney() / Math.max(this.getMoney(), 1);\\n        },\\n        // this is the target growth coefficient per cycle, based on theft\\n        targetGrowthCoefficientAfterTheft: function () {\\n            return 1 / (1 - (this.getHackThreadsNeeded() * this.percentageStolenPerHackThread()));\\n        },\\n        cyclesNeededForGrowthCoefficient: function () {\\n            return Math.log(this.targetGrowthCoefficient()) / Math.log(this.adjustedGrowthRate());\\n        },\\n        cyclesNeededForGrowthCoefficientAfterTheft: function () {\\n            return Math.log(this.targetGrowthCoefficientAfterTheft()) / Math.log(this.adjustedGrowthRate());\\n        },\\n        percentageStolenPerHackThread: function () {\\n            if (hasFormulas) {\\n                try {\\n                    let server = {\\n                        hackDifficulty: this.getMinSecurity(),\\n                        requiredHackingSkill: this.requiredHackLevel\\n                    }\\n                    return ns.formulas.hacking.hackPercent(server, playerStats); // hackAnalyzePercent(this.name) / 100;\\n                } catch {\\n                    hasFormulas = false;\\n                }\\n            }\\n            return Math.min(1, Math.max(0, (((100 - Math.min(100, this.getMinSecurity())) / 100) *\\n                ((playerHackSkill() - (this.requiredHackLevel - 1)) / playerHackSkill()) / 240)));\\n        },\\n        actualPercentageToSteal: function () {\\n            return this.getHackThreadsNeeded() * this.percentageStolenPerHackThread();\\n        },\\n        getHackThreadsNeeded: function () {\\n            // Force rounding of low-precision digits before taking the floor, to avoid double imprecision throwing us way off.\\n            return Math.floor((this.percentageToSteal / this.percentageStolenPerHackThread()).toPrecision(14));\\n        },\\n        getGrowThreadsNeeded: function () {\\n            return Math.min(this.getMaxMoney(), // Worse case (0 money on server) we get 1$ per thread\\n                Math.ceil((this.cyclesNeededForGrowthCoefficient() / this.serverGrowthPercentage()).toPrecision(14)));\\n        },\\n        getGrowThreadsNeededAfterTheft: function () {\\n            return Math.min(this.getMaxMoney(), // Worse case (0 money on server) we get 1$ per thread\\n                Math.ceil((this.cyclesNeededForGrowthCoefficientAfterTheft() / this.serverGrowthPercentage()).toPrecision(14)));\\n        },\\n        getWeakenThreadsNeededAfterTheft: function () {\\n            return Math.ceil((this.getHackThreadsNeeded() * hackThreadHardening / actualWeakenPotency()).toPrecision(14));\\n        },\\n        getWeakenThreadsNeededAfterGrowth: function () {\\n            return Math.ceil((this.getGrowThreadsNeededAfterTheft() * growthThreadHardening / actualWeakenPotency()).toPrecision(14));\\n        },\\n        // Once we get root, we never lose it, so we can stop asking\\n        _hasRootCached: false,\\n        hasRoot: function () { return this._hasRootCached || (this._hasRootCached = this.ns.hasRootAccess(this.name)); },\\n        isHost: function () { return this.name == daemonHost; },\\n        totalRam: function () { return this.ns.getServerMaxRam(this.name); },\\n        // Used ram is constantly changing\\n        usedRam: function () {\\n            var usedRam = this.ns.getServerUsedRam(this.name);\\n            // Complete HACK: but for most planning purposes, we want to pretend home has more ram in use than it does to leave room for \\\"preferred\\\" jobs at home\\n            if (this.name == \\\"home\\\")\\n                usedRam = Math.min(this.totalRam(), usedRam + homeReservedRam);\\n            return usedRam;\\n        },\\n        ramAvailable: function () { return this.totalRam() - this.usedRam(); },\\n        growDelay: function () { return this.timeToWeaken() - this.timeToGrow() + cycleTimingDelay; },\\n        hackDelay: function () { return this.timeToWeaken() - this.timeToHack(); },\\n        timeToWeaken: function () { return this.ns.getWeakenTime(this.name); },\\n        timeToGrow: function () { return this.ns.getGrowTime(this.name); },\\n        timeToHack: function () { return this.ns.getHackTime(this.name); },\\n        weakenThreadsNeeded: function () { return Math.ceil(((this.getSecurity() - this.getMinSecurity()) / actualWeakenPotency()).toPrecision(14)); }\\n    };\\n}\\n\\n// Helpers to get slices of info / cumulative stats across all rooted servers\\nfunction getNetworkStats() {\\n    const rootedServers = serverListByMaxRam.filter(server => server.hasRoot());\\n    const listOfServersFreeRam = rootedServers.map(s => s.ramAvailable()).filter(ram => ram > 1.6); // Servers that can't run a script don't count\\n    const totalMaxRam = rootedServers.map(s => s.totalRam()).reduce((a, b) => a + b, 0);\\n    const totalFreeRam = listOfServersFreeRam.reduce((a, b) => a + b, 0);\\n    return {\\n        listOfServersFreeRam: listOfServersFreeRam,\\n        totalMaxRam: totalMaxRam,\\n        totalFreeRam: totalFreeRam,\\n        totalUsedRam: totalMaxRam - totalFreeRam,\\n        // The money we could make if we took 100% from every currently hackable server, to help us guage how relatively profitable each server is\\n        //totalMaxMoney: rootedServers.filter(s => s.canHack() && s.shouldHack()).map(s => s.getMaxMoney()).reduce((a, b) => a + b, 0)\\n    };\\n}\\n// Simpler function to get current total percentage of ram used across the network\\nfunction getTotalNetworkUtilization() {\\n    const utilizationStats = getNetworkStats();\\n    return utilizationStats.totalUsedRam / utilizationStats.totalMaxRam;\\n}\\n\\n// return a \\\"performance snapshot\\\" (Ram required for the cycle) to compare against optimal, or another snapshot\\n// TODO: Better gaugue of performance is money stolen per (RAM * time) cost - we can schedule as many cycles as we want if done smart\\nfunction getPerformanceSnapshot(currentTarget, networkStats) {\\n    // The total RAM cost of running one weaken/hack/grow cycle to steal `currentTarget.percentageToSteal` of `currentTarget.money`\\n    const weaken1Cost = currentTarget.getWeakenThreadsNeededAfterTheft() * getTool(\\\"weak\\\").cost;\\n    const weaken2Cost = currentTarget.getWeakenThreadsNeededAfterGrowth() * getTool(\\\"weak\\\").cost;\\n    const growCost = currentTarget.getGrowThreadsNeededAfterTheft() * getTool(\\\"grow\\\").cost;\\n    const hackCost = currentTarget.getHackThreadsNeeded() * getTool(\\\"hack\\\").cost;\\n    // Simulate how many times we could schedule this batch given current server ram availability\\n    // (and hope that whatever executes the tasks in this batch is clever enough to slot them in as such (TODO: simulate using our actual executor logic?)\\n    const jobs = [weaken1Cost, weaken2Cost, growCost, hackCost].sort((a, b) => b - a); // Sort jobs largest to smallest\\n    const simulatedRemainingRam = networkStats.listOfServersFreeRam.slice();\\n    var maxScheduled = -1;\\n    var canScheduleAnother = true;\\n    while (canScheduleAnother && maxScheduled++ <= maxBatches) {\\n        for (const job of jobs) {\\n            // Find a free slot for this job, starting with largest servers as the scheduler tends to do\\n            const freeSlot = simulatedRemainingRam.sort((a, b) => b - a).findIndex(ram => ram >= job);\\n            if (freeSlot === -1)\\n                canScheduleAnother = false;\\n            else\\n                simulatedRemainingRam[freeSlot] -= job;\\n        }\\n    }\\n    return {\\n        percentageToSteal: currentTarget.actualPercentageToSteal(),\\n        canBeScheduled: maxScheduled > 0,\\n        // Given our timing delay, **approximately** how many cycles can we initiate before the first batch's first task fires?\\n        // TODO: Do a better job of calculating this *outside* of the performance snapshot, and only calculate it once.\\n        optimalPacedCycles: Math.min(maxBatches, Math.max(1, Math.floor(((currentTarget.timeToWeaken()) / cycleTimingDelay).toPrecision(14))\\n            - 1)), // Fudge factor, this isnt an exact scuence\\n        // Given RAM availability, how many cycles could we schedule across all hosts?\\n        maxCompleteCycles: Math.max(maxScheduled - 1, 1) // Fudge factor. The executor isn't perfect\\n    };\\n}\\n\\n// Produce a summary string containing information about a hack batch for a given target configuration\\nlet getTargetSummary = currentTarget =>\\n    `(H:${currentTarget.getHackThreadsNeeded()} W:${currentTarget.getWeakenThreadsNeededAfterTheft()} ` +\\n    `G:${currentTarget.getGrowThreadsNeededAfterTheft()} W²:${currentTarget.getWeakenThreadsNeededAfterGrowth()}) ` +\\n    (stockMode && shouldManipulateGrow[currentTarget.name] ? 'with grow stock ' : stockMode && shouldManipulateHack[currentTarget.name] ? 'with hack stock ' : '') +\\n    `to steal ${formatNumber(currentTarget.actualPercentageToSteal() * 100)}% ` +\\n    `(${formatMoney(currentTarget.actualPercentageToSteal() * currentTarget.getMaxMoney(), 3, 1)}) ` +\\n    `ETA: ${formatDuration(currentTarget.timeToWeaken())} at Hack ${playerHackSkill()} (${currentTarget.name})`;\\n\\n// Adjusts the \\\"percentage to steal\\\" for a target based on its respective cost and the current network RAM available\\nfunction optimizePerformanceMetrics(currentTarget) {\\n    const maxAdjustments = 1000;\\n    const start = Date.now();\\n    const networkStats = getNetworkStats();\\n    const percentPerHackThread = currentTarget.percentageStolenPerHackThread();\\n    const oldHackThreads = currentTarget.getHackThreadsNeeded();\\n    const oldActualPercentageToSteal = currentTarget.percentageToSteal = currentTarget.actualPercentageToSteal();\\n\\n    if (percentPerHackThread >= 1) {\\n        currentTarget.percentageToSteal = percentPerHackThread;\\n        currentTarget.percentageToSteal = 1;\\n        return getPerformanceSnapshot(currentTarget, networkStats);\\n    }\\n\\n    let lastAdjustmentSign = 1;\\n    let attempts = 0;\\n    let increment = Math.ceil((0.01 / percentPerHackThread).toPrecision(14)); // Initialize the adjustment increment to be the number of hack threads to steal roughly 1%\\n    let newHackThreads = oldHackThreads;\\n    currentTarget.percentageToSteal = Math.max(currentTarget.percentageToSteal, percentPerHackThread); // If the initial % to steal is below the minimum, raise it\\n    // Make adjustments to the number of hack threads until we zero in on the best amount\\n    while (++attempts < maxAdjustments) {\\n        var performanceSnapshot = getPerformanceSnapshot(currentTarget, networkStats);\\n        const adjustment = analyzeSnapshot(performanceSnapshot, currentTarget, networkStats, increment);\\n        if (runOnce && verbose)\\n            log(`Adjustment ${attempts} (increment ${increment}): ${adjustment} to ${newHackThreads} hack threads ` +\\n                `(from ${formatNumber(currentTarget.actualPercentageToSteal() * 100)}% or ${currentTarget.getHackThreadsNeeded()} hack threads)`);\\n        if (adjustment === 0.00 && increment == 1) break; // We've zeroed in on the exact number of hack threads we want\\n        if (adjustment === 0.00 || Math.sign(adjustment) != lastAdjustmentSign) { // Each time we change the direction of adjustments, slow the adjustment rate\\n            increment = Math.max(1, Math.floor((increment / 2.0).toPrecision(14)));\\n            lastAdjustmentSign = adjustment === 0.00 ? lastAdjustmentSign : Math.sign(adjustment);\\n        }\\n        newHackThreads = Math.max(newHackThreads + adjustment, 0); // Adjust the percentage to steal with pefect precision by actually adjusting the number of hack threads\\n        currentTarget.percentageToSteal = Math.max(0, newHackThreads * percentPerHackThread);\\n    }\\n    if (attempts >= maxAdjustments || verbose && currentTarget.actualPercentageToSteal() != oldActualPercentageToSteal) {\\n        log(`Tuned % to steal from ${formatNumber(oldActualPercentageToSteal * 100)}% (${oldHackThreads} threads) to ` +\\n            `${formatNumber(currentTarget.actualPercentageToSteal() * 100)}% (${currentTarget.getHackThreadsNeeded()} threads) ` +\\n            `(${currentTarget.name}) Iterations: ${attempts} Took: ${Date.now() - start} ms`);\\n    }\\n    if (verbose && currentTarget.actualPercentageToSteal() == 0) {\\n        currentTarget.percentageToSteal = percentPerHackThread;\\n        log(`Insufficient RAM for min cycle: ${getTargetSummary(currentTarget)}`);\\n        currentTarget.percentageToSteal = 0.0;\\n    }\\n    if (currentTarget.percentageToSteal != 0 && (currentTarget.actualPercentageToSteal() == 0 ||\\n        Math.abs(currentTarget.actualPercentageToSteal() - currentTarget.percentageToSteal) / currentTarget.percentageToSteal > 0.5))\\n        log(`WARNING: Big difference between %ToSteal (${formatNumber(currentTarget.percentageToSteal * 100)}%) ` +\\n            `and actual%ToSteal (${formatNumber(currentTarget.actualPercentageToSteal() * 100)}%) after ${attempts} attempts. ` +\\n            `Min is: ${formatNumber(currentTarget.percentageStolenPerHackThread() * 100)}%`, false, 'warning');\\n    return performanceSnapshot;\\n}\\n\\n// Suggests an adjustment to the percentage to steal based on how much ram would be consumed if attempting the current percentage.\\nfunction analyzeSnapshot(snapshot, currentTarget, networkStats, incrementalHackThreads) {\\n    const maxPercentageToSteal = options['max-steal-percentage'];\\n    const lastP2steal = currentTarget.percentageToSteal;\\n    // Priority is to use as close to the target ram as possible overshooting.\\n    const isOvershot = s => !s.canBeScheduled || s.maxCompleteCycles < s.optimalPacedCycles;\\n    if (verbose && runOnce)\\n        log(`canBeScheduled: ${snapshot.canBeScheduled},  maxCompleteCycles: ${snapshot.maxCompleteCycles}, optimalPacedCycles: ${snapshot.optimalPacedCycles}`);\\n    if (isOvershot(snapshot)) {\\n        return -incrementalHackThreads;\\n    } else if (snapshot.maxCompleteCycles > snapshot.optimalPacedCycles && lastP2steal < maxPercentageToSteal) {\\n        // Test increasing by the increment, but if it causes us to go over maximum desired utilization, do not suggest it\\n        currentTarget.percentageToSteal = (currentTarget.getHackThreadsNeeded() + incrementalHackThreads) * currentTarget.percentageStolenPerHackThread();\\n        var comparisonSnapshot = getPerformanceSnapshot(currentTarget, networkStats);\\n        currentTarget.percentageToSteal = lastP2steal;\\n        return isOvershot(comparisonSnapshot) ? 0.00 : incrementalHackThreads;\\n    }\\n    return 0.00;\\n}\\n\\n/** @param {NS} ns **/\\nasync function performScheduling(ns, currentTarget, snapshot) {\\n    const start = Date.now();\\n    const scheduledTasks = [];\\n    const maxCycles = Math.min(snapshot.optimalPacedCycles, snapshot.maxCompleteCycles);\\n    if (!snapshot)\\n        return;\\n    if (maxCycles === 0) {\\n        log(`WARNING: Attempt to schedule ${getTargetSummary(currentTarget)} returned 0 max cycles? ${JSON.stringify(snapshot)}`, false, 'warning');\\n        return;\\n    } else if (currentTarget.getHackThreadsNeeded() === 0) {\\n        log(`WARNING: Attempted to schedule empty cycle ${maxCycles} x ${getTargetSummary(currentTarget)}? ${JSON.stringify(snapshot)}`, false, 'warning');\\n        return;\\n    }\\n    let firstEnding = null, lastStart = null, lastBatch = 0, cyclesScheduled = 0;\\n    while (cyclesScheduled < maxCycles) {\\n        const newBatchStart = new Date((cyclesScheduled === 0) ? Date.now() + queueDelay : lastBatch.getTime() + cycleTimingDelay);\\n        lastBatch = new Date(newBatchStart.getTime());\\n        const batchTiming = getScheduleTiming(newBatchStart, currentTarget);\\n        const newBatch = getScheduleObject(batchTiming, currentTarget, scheduledTasks.length);\\n        if (firstEnding === null) { // Can't start anything after this first hack completes (until back at min security), or we risk throwing off timing\\n            firstEnding = new Date(newBatch.hackEnd.valueOf());\\n        }\\n        if (lastStart === null || lastStart < newBatch.firstFire) {\\n            lastStart = new Date(newBatch.lastFire.valueOf());\\n        }\\n        if (cyclesScheduled > 0 && lastStart >= firstEnding) {\\n            if (verbose)\\n                log(`Had to stop scheduling at ${cyclesScheduled} of ${maxCycles} desired cycles (lastStart: ${lastStart} >= firstEnding: ${firstEnding}) ${JSON.stringify(snapshot)}`);\\n            break;\\n        }\\n        scheduledTasks.push(newBatch);\\n        cyclesScheduled++;\\n    }\\n\\n    for (const schedObj of scheduledTasks) {\\n        for (const schedItem of schedObj.scheduleItems) {\\n            const discriminationArg = `Batch ${schedObj.batchNumber}-${schedItem.description}`;\\n            // Args spec: [0: Target, 1: DesiredStartTime (used to delay tool start), 2: ExpectedEndTime (informational), 3: Duration (informational), 4: DoStockManipulation, 5: DisableWarnings]\\n            const args = [currentTarget.name, schedItem.start.getTime(), schedItem.end.getTime(), schedItem.end - schedItem.start, discriminationArg];\\n            if ([\\\"hack\\\", \\\"grow\\\"].includes(schedItem.toolShortName)) // Push an arg used by remote hack/grow tools to determine whether it should manipulate the stock market\\n                args.push(stockMode && (schedItem.toolShortName == \\\"hack\\\" && shouldManipulateHack[currentTarget.name] || schedItem.toolShortName == \\\"grow\\\" && shouldManipulateGrow[currentTarget.name]) ? 1 : 0);\\n            if ([\\\"hack\\\", \\\"weak\\\"].includes(schedItem.toolShortName))\\n                args.push(options['silent-misfires'] || // Optional arg to disable toast warnings about a failed hack if hacking money gain is disabled\\n                    (schedItem.toolShortName == \\\"hack\\\" && (bitnodeMults.ScriptHackMoneyGain == 0 || playerStats.bitNodeN == 8)) ? 1 : 0); // Disable automatically in BN8 (hack income disabled)\\n            args.push(loopingMode ? 1 : 0); // Argument to indicate whether the cycle should loop perpetually\\n            if (recoveryThreadPadding > 1 && [\\\"weak\\\", \\\"grow\\\"].includes(schedItem.toolShortName))\\n                schedItem.threadsNeeded *= recoveryThreadPadding; // Only need to pad grow/weaken threads\\n            if (options.i && currentTerminalServer?.name == currentTarget.name && schedItem.toolShortName == \\\"hack\\\")\\n                schedItem.toolShortName = \\\"manualhack\\\";\\n            const result = await arbitraryExecution(ns, getTool(schedItem.toolShortName), schedItem.threadsNeeded, args)\\n            if (result == false) { // If execution fails, we have probably run out of ram.\\n                log(`WARNING: Scheduling failed for ${getTargetSummary(currentTarget)} ${discriminationArg} of ${cyclesScheduled} Took: ${Date.now() - start}ms`, false, 'warning');\\n                currentTarget.previousCycle = `INCOMPLETE. Tried: ${cyclesScheduled} x ${getTargetSummary(currentTarget)}`;\\n                return false;\\n            }\\n        }\\n    }\\n    if (verbose)\\n        log(`Scheduled ${cyclesScheduled} x ${getTargetSummary(currentTarget)} Took: ${Date.now() - start}ms`);\\n    currentTarget.previousCycle = `${cyclesScheduled} x ${getTargetSummary(currentTarget)}`\\n    return true;\\n}\\n\\n// returns an object that contains all 4 timed events start and end times as dates\\nfunction getScheduleTiming(fromDate, currentTarget) {\\n    const delayInterval = cycleTimingDelay / 4; // spacing interval used to pace our script resolution\\n    const hackTime = currentTarget.timeToHack(); // first to fire\\n    const weakenTime = currentTarget.timeToWeaken(); // second to fire\\n    const growTime = currentTarget.timeToGrow(); // third to fire\\n    const slowestTool = Math.max(hackTime, weakenTime, growTime);\\n    // Determine the times we want tasks to complete at, working backwards, and plan the execution start time accordingly\\n    const t4_secondWeakenResolvesAt = new Date(fromDate.getTime() + slowestTool + delayInterval * 3); // step 4 - weaken after grow fires last\\n    const t4_fireSecondWeakenAt = new Date(t4_secondWeakenResolvesAt.getTime() - weakenTime);\\n    const t3_growResolvesAt = new Date(t4_secondWeakenResolvesAt.getTime() - delayInterval); // step 3 (grow back) should resolve \\\"delay\\\" before the final weaken\\n    const t3_fireGrowAt = new Date(t3_growResolvesAt.getTime() - growTime);\\n    const t2_firstWeakenResolvesAt = new Date(t3_growResolvesAt.getTime() - delayInterval); // step 2 (weaken after hack) should resolve \\\"delay\\\" before the grow.\\n    const t2_fireFirstWeakenAt = new Date(t2_firstWeakenResolvesAt.getTime() - weakenTime);\\n    const t1_hackResolvesAt = new Date(t2_firstWeakenResolvesAt.getTime() - delayInterval); // step 1 (steal a bunch of money) should resolve \\\"delay\\\" before its respective weaken.\\n    const t1_fireHackAt = new Date(hackOnly ? fromDate.getTime() : t1_hackResolvesAt.getTime() - hackTime);\\n    // Track when the last task would be start (we need to ensure this doesn't happen after a prior batch has begun completing tasks)\\n    const lastThingThatFires = new Date(Math.max(t4_fireSecondWeakenAt.getTime(), t3_fireGrowAt.getTime(), t2_fireFirstWeakenAt.getTime(), t1_fireHackAt.getTime()));\\n    let schedule = {\\n        batchStart: fromDate,\\n        lastFire: lastThingThatFires,\\n        hackStart: t1_fireHackAt,\\n        hackEnd: t1_hackResolvesAt,\\n        firstWeakenStart: t2_fireFirstWeakenAt,\\n        firstWeakenEnd: t2_firstWeakenResolvesAt,\\n        growStart: t3_fireGrowAt,\\n        growEnd: t3_growResolvesAt,\\n        secondWeakenStart: t4_fireSecondWeakenAt,\\n        secondWeakenEnd: t4_secondWeakenResolvesAt\\n    };\\n    if (verbose && runOnce) {\\n        log(`Current Time: ${formatDateTime(new Date())} Established a schedule for ${getTargetSummary(currentTarget)} from requested startTime ${formatDateTime(fromDate)}:` +\\n            `\\\\n  Hack - End: ${formatDateTime(schedule.hackEnd)}  Start: ${formatDateTime(schedule.hackStart)}  Time: ${formatDuration(hackTime)}` +\\n            `\\\\n  Weak1- End: ${formatDateTime(schedule.firstWeakenEnd)}  Start: ${formatDateTime(schedule.firstWeakenStart)}  Time: ${formatDuration(weakenTime)}` +\\n            `\\\\n  Grow - End: ${formatDateTime(schedule.growEnd)}  Start: ${formatDateTime(schedule.growStart)}  Time: ${formatDuration(growTime)}` +\\n            `\\\\n  Weak2- End: ${formatDateTime(schedule.secondWeakenEnd)}  Start: ${formatDateTime(schedule.secondWeakenStart)}  Time: ${formatDuration(weakenTime)}`);\\n    }\\n    return schedule;\\n}\\n\\nfunction getScheduleObject(batchTiming, currentTarget, batchNumber) {\\n    var schedItems = [];\\n\\n    var schedHack = getScheduleItem(\\\"hack\\\", \\\"hack\\\", batchTiming.hackStart, batchTiming.hackEnd, currentTarget.getHackThreadsNeeded());\\n    var schedWeak1 = getScheduleItem(\\\"weak1\\\", \\\"weak\\\", batchTiming.firstWeakenStart, batchTiming.firstWeakenEnd, currentTarget.getWeakenThreadsNeededAfterTheft());\\n    // Special end-game case, if we have no choice but to hack a server to zero money, schedule back-to-back grows to restore money\\n    if (currentTarget.percentageStolenPerHackThread() >= 1) {\\n        // Use math and science to minimize total threads required to inject 1 dollar per threads, then grow that to max.\\n        let calcThreadsForGrow = money => Math.ceil(((Math.log(1 / (money / currentTarget.getMaxMoney())) / Math.log(currentTarget.adjustedGrowthRate()))\\n            / currentTarget.serverGrowthPercentage()).toPrecision(14));\\n        let stepSize = Math.floor(currentTarget.getMaxMoney() / 4), injectThreads = stepSize, schedGrowThreads = calcThreadsForGrow(injectThreads);\\n        for (let i = 0; i < 100 && stepSize > 0; i++) {\\n            if (injectThreads + schedGrowThreads > (injectThreads + stepSize) + calcThreadsForGrow(injectThreads + stepSize))\\n                injectThreads += stepSize;\\n            else if (injectThreads + schedGrowThreads > (injectThreads - stepSize) + calcThreadsForGrow(injectThreads - stepSize))\\n                injectThreads -= stepSize;\\n            schedGrowThreads = calcThreadsForGrow(injectThreads);\\n            stepSize = Math.floor(stepSize / 2);\\n        }\\n        schedItems.push(getScheduleItem(\\\"grow-from-zero\\\", \\\"grow\\\", new Date(batchTiming.growStart.getTime() - (cycleTimingDelay / 8)),\\n            new Date(batchTiming.growEnd.getTime() - (cycleTimingDelay / 8)), injectThreads)); // Will put $injectThreads on the server\\n        // This will then grow from whatever % $injectThreads is back to 100%\\n        var schedGrow = getScheduleItem(\\\"grow\\\", \\\"grow\\\", batchTiming.growStart, batchTiming.growEnd, schedGrowThreads);\\n        var schedWeak2 = getScheduleItem(\\\"weak2\\\", \\\"weak\\\", batchTiming.secondWeakenStart, batchTiming.secondWeakenEnd,\\n            Math.ceil(((injectThreads + schedGrowThreads) * growthThreadHardening / actualWeakenPotency()).toPrecision(14)));\\n        if (verbose)\\n            log(`INFO: Special grow strategy since percentage stolen per hack thread is 100%: G1: ${injectThreads}, G1: ${schedGrowThreads}, W2: ${schedWeak2.threadsNeeded} (${currentTarget.name})`);\\n    } else {\\n        var schedGrow = getScheduleItem(\\\"grow\\\", \\\"grow\\\", batchTiming.growStart, batchTiming.growEnd, currentTarget.getGrowThreadsNeededAfterTheft());\\n        var schedWeak2 = getScheduleItem(\\\"weak2\\\", \\\"weak\\\", batchTiming.secondWeakenStart, batchTiming.secondWeakenEnd, currentTarget.getWeakenThreadsNeededAfterGrowth());\\n    }\\n\\n    if (hackOnly) {\\n        schedItems.push(schedHack);\\n    } else {\\n        // Schedule hack/grow first, because they cannot be split, and start with whichever requires the biggest chunk of free RAM\\n        schedItems.push(...(schedHack.threadsNeeded > schedGrow.threadsNeeded ? [schedHack, schedGrow] : [schedGrow, schedHack]));\\n        // Scheduler should ensure there's room for both, but splitting threads is annoying, so schedule the biggest first again to avoid fragmentation\\n        schedItems.push(...(schedWeak1.threadsNeeded > schedWeak2.threadsNeeded ? [schedWeak1, schedWeak2] : [schedWeak2, schedWeak1]));\\n    }\\n\\n    var scheduleObject = {\\n        batchNumber: batchNumber,\\n        batchStart: batchTiming.batchStart,\\n        lastFire: batchTiming.lastFire,\\n        hackEnd: batchTiming.hackEnd,\\n        batchFinish: hackOnly ? batchTiming.hackEnd : batchTiming.secondWeakenEnd,\\n        scheduleItems: schedItems\\n    };\\n    return scheduleObject;\\n}\\n\\n// initialize a new incomplete schedule item\\nfunction getScheduleItem(description, toolShortName, start, end, threadsNeeded) {\\n    var schedItem = {\\n        description: description,\\n        toolShortName: toolShortName,\\n        start: start,\\n        end: end,\\n        threadsNeeded: threadsNeeded\\n    };\\n    return schedItem;\\n}\\n\\n// Intended as a high-powered \\\"figure this out for me\\\" run command.\\n// If it can't run all the threads at once, it runs as many as it can across the spectrum of daemons available.\\n/** @param {NS} ns **/\\nexport async function arbitraryExecution(ns, tool, threads, args, preferredServerName = null, useSmallestServerPossible = false) {\\n    // We will be using the list of servers that is sorted by most available ram\\n    sortServerList(\\\"ram\\\");\\n    var rootedServersByFreeRam = serverListByFreeRam.filter(server => server.hasRoot() && server.totalRam() > 1.6);\\n\\n    // Sort servers by total ram, and try to fill these before utilizing another server.\\n    sortServerList(\\\"totalram\\\");\\n    var preferredServerOrder = serverListByMaxRam.filter(server => server.hasRoot() && server.totalRam() > 1.6);\\n    if (useSmallestServerPossible) // Fill up small servers before utilizing larger ones (can be laggy)\\n        preferredServerOrder.reverse();\\n    // IDEA: \\\"home\\\" is more effective at grow() and weaken() than other nodes (has multiple cores) (TODO: By how much?)\\n    //       so if this is one of those tools, put it at the front of the list of preferred candidates, otherwise keep home ram free if possible\\n    //       TODO: This effort is wasted unless we also scale down the number of threads \\\"needed\\\" when running on home. We will overshoot grow/weaken\\n    //             Disable this for now, and enable it once we have solved for reducing grow/weak threads\\n    var home = preferredServerOrder.splice(preferredServerOrder.findIndex(i => i.name == \\\"home\\\"), 1)[0];\\n    if (tool.shortName == \\\"grow\\\" || tool.shortName == \\\"weak\\\" || preferredServerName == \\\"home\\\")\\n        preferredServerOrder.unshift(home); // Send to front\\n    else\\n        preferredServerOrder.push(home);\\n    // Push all \\\"hacknet-node\\\" servers to the end of the preferred list, since they will lose productivity if used\\n    var anyHacknetNodes = [];\\n    let hnNodeIndex;\\n    while (-1 !== (hnNodeIndex = preferredServerOrder.indexOf(s => s.name.startsWith('hacknet-node-'))))\\n        anyHacknetNodes.push(preferredServerOrder.splice(hnNodeIndex, 1));\\n    preferredServerOrder.push(...anyHacknetNodes.sort((a, b) => b.totalRam != a.totalRam ? b.totalRam - a.totalRam : a.name.localeCompare(b.name)));\\n\\n    // Allow for an overriding \\\"preferred\\\" server to be used in the arguments, and slot it to the front regardless of the above\\n    if (preferredServerName && preferredServerName != \\\"home\\\" /*home is handled above*/) {\\n        const preferredServerIndex = preferredServerOrder.findIndex(i => i.name == preferredServerName);\\n        if (preferredServerIndex != -1)\\n            preferredServerOrder.unshift(preferredServerOrder.splice(preferredServerIndex, 1)[0]);\\n        else\\n            log(`ERROR: Configured preferred server \\\"${preferredServerName}\\\" for ${tool.name} is not a valid server name`, true, 'error');\\n    }\\n    //log(`Preferred Server ${preferredServerName} for ${tool.name} resulted in preferred order: ${preferredServerOrder.map(srv => srv.name)}`);\\n    //log(`Servers by free ram: ${rootedServersByFreeRam.map(svr => svr.name + \\\" (\\\" + svr.ramAvailable() + \\\")\\\")}`);\\n\\n    // Helper function to compute the most threads a server can run \\n    let computeMaxThreads = function (server) {\\n        if (tool.cost == 0) return 1;\\n        let ramAvailable = server.ramAvailable();\\n        // It's a hack, but we know that \\\"home\\\"'s reported ram available is lowered to leave room for \\\"preferred\\\" jobs, \\n        // so if this is a preferred job, ignore what the server object says and get it from the source\\n        if (server.name == \\\"home\\\" && preferredServerName == \\\"home\\\")\\n            ramAvailable = ns.getServerMaxRam(\\\"home\\\") - ns.getServerUsedRam(\\\"home\\\");\\n        // Note: To be conservative, we allow double imprecision to cause this floor() to return one less than should be possible,\\n        //       because the game likely doesn't account for this imprecision (e.g. let 1.9999999999999998 return 1 rather than 2)\\n        return Math.floor((ramAvailable / tool.cost)/*.toPrecision(14)*/);\\n    };\\n\\n    let remainingThreads = threads;\\n    let splitThreads = false;\\n    for (var i = 0; i < rootedServersByFreeRam.length && remainingThreads > 0; i++) {\\n        var targetServer = rootedServersByFreeRam[i];\\n        var maxThreadsHere = Math.min(remainingThreads, computeMaxThreads(targetServer));\\n        if (maxThreadsHere <= 0)\\n            continue; //break; HACK: We don't break here because there are cases when sort order can change (e.g. we've reserved home RAM)\\n\\n        // If this server can handle all required threads, see if a server that is more preferred also has room.\\n        // If so, we prefer to pack that server with more jobs before utilizing another server.\\n        if (maxThreadsHere == remainingThreads) {\\n            for (var j = 0; j < preferredServerOrder.length; j++) {\\n                var nextMostPreferredServer = preferredServerOrder[j];\\n                // If the next largest server is also the current server with the most capacity, then it's the best one to pack\\n                if (nextMostPreferredServer == targetServer)\\n                    break;\\n                // If the job can just as easily fit on this server, prefer to put the job there\\n                if (remainingThreads <= computeMaxThreads(nextMostPreferredServer)) {\\n                    //log('Opted to exec ' + tool.name + ' on preferred server ' + nextMostPreferredServer.name + ' rather than the one with most ram (' + targetServer.name + ')');\\n                    targetServer = nextMostPreferredServer;\\n                    break;\\n                }\\n            }\\n        }\\n\\n        // If running on a non-daemon host, do a script copy check before running\\n        let just_copied = false;\\n        if (targetServer.name != daemonHost && !doesFileExist(tool.name, targetServer.name)) {\\n            let missing_scripts = [tool.name];\\n            if (!doesFileExist(getFilePath('helpers.js'), targetServer.name))\\n                missing_scripts.push(getFilePath('helpers.js')); // Some tools require helpers.js. Best to copy it around.\\n            if (verbose)\\n                log(`Copying ${tool.name} from ${daemonHost} to ${targetServer.name} so that it can be executed remotely.`);\\n            await getNsDataThroughFile(ns, `await ns.scp(${JSON.stringify(missing_scripts)}, '${daemonHost}', '${targetServer.name}')`, '/Temp/copy-scripts.txt')\\n            await ns.sleep(5); // Workaround for Bitburner bug https://github.com/danielyxie/bitburner/issues/1714 - newly created/copied files sometimes need a bit more time, even if awaited\\n            just_copied = true;\\n        }\\n        let pid = ns.exec(tool.name, targetServer.name, maxThreadsHere, ...(args || []));\\n        if (just_copied) await ns.sleep(5); // I don't know why this would make a difference (based on my understanding of the above issue), but hear reports that putting a sleep after the call to exec works around the problem\\n        if (pid == 0) {\\n            log(`ERROR: Failed to exec ${tool.name} on server ${targetServer.name} with ${maxThreadsHere} threads`, false, 'error');\\n            return false;\\n        }\\n        // Decrement the threads that have been successfully scheduled\\n        remainingThreads -= maxThreadsHere;\\n        if (remainingThreads > 0) {\\n            if (!tool.isThreadSpreadingAllowed) break;\\n            // No need to warn if it's allowed? log(`WARNING: Had to split ${threads} ${tool.name} threads across multiple servers. ${maxThreadsHere} on ${targetServer.name}`);\\n            splitThreads = true;\\n        }\\n    }\\n    // The run failed if there were threads left to schedule after we exhausted our pool of servers\\n    if (remainingThreads > 0 && threads < Number.MAX_SAFE_INTEGER)\\n        log(`ERROR: Ran out of RAM to run ${tool.name} ${splitThreads ? '' : `on ${targetServer.name} `}- ${threads - remainingThreads} of ${threads} threads were spawned.`, false, 'error');\\n    if (splitThreads && !tool.isThreadSpreadingAllowed)\\n        return false;\\n    return remainingThreads == 0;\\n}\\n\\n// Brings the server to minimum security and maximum money to prepare for cycling scheduler activity\\nasync function prepServer(ns, currentTarget) {\\n    // Check if already prepped or in targeting mode, in which case presume prep server is to be skipped.\\n    if (currentTarget.isPrepped() || currentTarget.isTargeting())\\n        return null;\\n\\n    var start = Date.now();\\n    var now = new Date(start.valueOf());\\n    var prepSucceeding = true;\\n    var growThreadsScheduled = 0;\\n    var weakenForGrowthThreadsNeeded = 0;\\n    var weakenTool = getTool(\\\"weak\\\");\\n    // Schedule grow, if needed\\n    if (currentTarget.getMoney() < currentTarget.getMaxMoney() && !stockFocus /* Prep should only weaken in stock-focus mode */) {\\n        var growTool = getTool(\\\"grow\\\");\\n        var growThreadsAllowable = growTool.getMaxThreads();\\n        var growThreadsNeeded = currentTarget.getGrowThreadsNeeded();\\n        growThreadsScheduled = Math.min(growThreadsAllowable, growThreadsNeeded);\\n        weakenForGrowthThreadsNeeded = Math.ceil((growThreadsScheduled * growthThreadHardening / actualWeakenPotency()).toPrecision(14));\\n        /* // Logic for \\\"releasing\\\" grow threads to make room for weaken threads? Doesn't seem necessary and also may be buggy\\n        var growThreadThreshold = (growThreadsAllowable - growThreadsNeeded) * (growTool.cost / weakenTool.cost);\\n        var growThreadsReleased = weakenTool.cost / growTool.cost * (weakenForGrowthThreadsNeeded + currentTarget.weakenThreadsNeeded());\\n        if (growThreadThreshold >= growThreadsReleased) {\\n            growThreadsReleased = 0;\\n        }\\n        growThreadsScheduled = Math.max(0, growThreadsScheduled - growThreadsReleased);\\n        */\\n        if (growThreadsScheduled > 0)\\n            prepSucceeding = await arbitraryExecution(ns, growTool, growThreadsScheduled, [currentTarget.name, now.getTime(), now.getTime(), 0, \\\"prep\\\"]);\\n        if (prepSucceeding == false)\\n            log('Failed to schedule all ' + growThreadsScheduled + ' prep grow threads (' + currentTarget.name + ')');\\n    }\\n    // Schedule weaken, if needed\\n    var weakenThreadsScheduled = 0;\\n    if (prepSucceeding && (currentTarget.getSecurity() > currentTarget.getMinSecurity() || weakenForGrowthThreadsNeeded > 0)) {\\n        var weakenThreadsNeeded = currentTarget.weakenThreadsNeeded() + weakenForGrowthThreadsNeeded;\\n        var weakenThreadsAllowable = weakenTool.getMaxThreads();\\n        weakenThreadsScheduled = Math.min(weakenThreadsAllowable, weakenThreadsNeeded);\\n        if (weakenThreadsScheduled > 0)\\n            prepSucceeding = await arbitraryExecution(ns, weakenTool, weakenThreadsScheduled, [currentTarget.name, now.getTime(), now.getTime(), 0, \\\"prep\\\"]);\\n        if (prepSucceeding == false)\\n            log('Failed to schedule all ' + weakenThreadsScheduled + ' prep weaken threads (' + currentTarget.name + ')');\\n    }\\n    // Log a summary of what we did here today\\n    if (verbose && prepSucceeding && (weakenThreadsScheduled > 0 || growThreadsScheduled > 0))\\n        log(`Prepping with ${weakenThreadsScheduled} weaken, ${growThreadsScheduled} grow threads (${weakenThreadsNeeded || 0} / ${growThreadsNeeded || 0} needed)` +\\n            ' ETA ' + Math.floor((currentTarget.timeToWeaken() + queueDelay) / 1000) + 's (' + currentTarget.name + ')' +\\n            ' Took: ' + (Date.now() - start) + 'ms');\\n    return prepSucceeding;\\n}\\n\\nfunction getXPFarmServer(all = false) {\\n    const hackableServers = serverListByMaxRam.filter(server => (server.hasRoot() || server.canCrack()) && server.canHack() && server.shouldHack())\\n        .sort((a, b) => b.getExpPerSecond() - a.getExpPerSecond());\\n    return all ? hackableServers : hackableServers[0];\\n}\\n\\nlet singleServerLimit; // If prior cycles failed to be scheduled, force one additional server into single-server mode until we aqcuire more RAM\\nlet lastCycleTotalRam = 0; // Cache of total ram on the server to check whether we should attempt to lift the above restriction.\\n\\n/** @param {NS} ns \\n * Gain a bunch of hack XP early after a new Augmentation by filling a bunch of RAM with weaken() against a relatively easy target */\\nasync function kickstartHackXp(ns, percentOfFreeRamToConsume = 1, verbose = false, targets = undefined) {\\n    if (!xpOnly)\\n        return await scheduleHackExpCycle(ns, getXPFarmServer(), percentOfFreeRamToConsume, verbose, false); // Grind some XP from the single best target for farming XP\\n    // Otherwise, target multiple servers until we can't schedule any more. Each next best target should get the next best (biggest) server\\n    sortServerList(\\\"totalram\\\");\\n    getTool(\\\"grow\\\").isThreadSpreadingAllowed = true; // Only true when in XP mode - where each grow thread is expected to give 1$. \\\"weak\\\" can always spread.   \\n    var jobHosts = serverListByMaxRam.filter(s => s.hasRoot() && s.totalRam() > 128); // Get the set of servers that can be reasonably expected to host decent-sized jobs\\n    if (jobHosts.length == 0) jobHosts = serverListByMaxRam.filter(s => s.hasRoot() && s.totalRam() > 16); // Lower our standards if we're early-game and nothing qualifies\\n    var homeRam = ns.getServerMaxRam(\\\"home\\\"); // If home ram is large enough, the XP contributed by additional targets is insignificant compared to the risk of increased lag/latency.\\n    targets = Math.min(maxTargets, Math.floor(jobHosts.filter(s => s.totalRam() > 0.01 * homeRam).length)); // Limit targets (too many creates lag which worsens performance, and need a dedicated server for each)\\n    let targetsByExp = getXPFarmServer(true);\\n    if (options.i) { // To farm intelligence, use manual hack on only the current connected server\\n        if (currentTerminalServer.name != \\\"home\\\") {\\n            targets = 1;\\n            targetsByExp = [currentTerminalServer];\\n        }\\n    }\\n    const etas = [];\\n    const totalServerRam = jobHosts.reduce((total, s) => total + s.totalRam(), 0);\\n    if (totalServerRam > lastCycleTotalRam) { // If we've aqcuired more ram, remove restrictions and discover the new best balance\\n        singleServerLimit = 0;\\n        lastCycleTotalRam = totalServerRam;\\n    }\\n    let tryAdvanceMode = bitnodeMults.ScriptHackMoneyGain != 0; // We can't attempt hack-based XP if it's impossible to gain hack income (XP will always be 1/4)\\n    let singleServerMode = false; // Start off maximizing hack threads for best targets by spreading their weaken/grow threads to other servers\\n    for (let i = 0; i < targets; i++) {\\n        let lastSchedulingResult;\\n        singleServerMode = singleServerMode || (i >= (jobHosts.length - 1 - singleServerLimit) || jobHosts[i + 1].totalRam() < 1000); // Switch to single-server mode if running out of hosts with high ram\\n        etas.push(lastSchedulingResult = (await scheduleHackExpCycle(ns, targetsByExp[i], 1, verbose, tryAdvanceMode, jobHosts[i], singleServerMode)) || Number.MAX_SAFE_INTEGER);\\n        if (lastSchedulingResult == Number.MAX_SAFE_INTEGER) break; // Stop scheduling targets if the last attempt failed\\n    }\\n    // TODO: waitForCycleEnd - if any targets are within 200ms? (one game tick) of the end of their cycle, wait for it to end and trigger the next cycle immediately?\\n    // Wait for all job scheduling threads to return, and sleep for the smallest cycle time remaining\\n    return Math.max(0, Math.min(...etas));\\n}\\n\\n// In case we've misfired a bit, this helper can wait a short while to see if we can start a new cycle right as the last one completes.\\nasync function waitForCycleEnd(ns, server, maxWaitTime = 200, waitInterval = 5) {\\n    const eta = nextXpCycleEnd[server.name];\\n    if (verbose) return log(`WARNING: ${server.name} FarmXP process is still in progress from a prior run. Completion time is unknown...`);\\n    const activeCycleTimeLeft = (eta || 0) - Date.now();\\n    let stillBusy;\\n    if (verbose) log(`Waiting for last ${server.name} FarmXP process to complete... (ETA ${eta ? formatDuration(activeCycleTimeLeft) : 'unknown'})`);\\n    while (stillBusy = server.isXpFarming(false) && maxWaitTime > 0) {\\n        await ns.asleep(waitInterval); // Sleep a very short while, then get a fresh process list to check again whether the process is done\\n        maxWaitTime -= waitInterval;\\n    }\\n    if (stillBusy)\\n        log(`WARNING: ${server.name} FarmXP process is ` + (eta ? `more than ${formatDuration(-activeCycleTimeLeft)} overdue...` : 'still in progress from a prior run...'));\\n    return !stillBusy;\\n}\\n\\nlet farmXpReentryLock = []; // A dictionary of server names and whether we're currently scheduling / polling for its cycle to end\\nlet nextXpCycleEnd = []; // A dictionary of server names and when their next XP farming cycle is expected to end\\n/** @param {NS} ns **/\\nasync function scheduleHackExpCycle(ns, server, percentOfFreeRamToConsume, verbose, advancedMode, allocatedServer = null, singleServer = false) {\\n    if (!server.hasRoot() && server.canCrack()) await doRoot(ns, server); // Get root if we do not already have it.\\n    if (!server.hasRoot()) return log(`ERROR: Cannot farm XP from unrooted server ${server.name}`, true, 'error');\\n    // If we are already farming XP from this server, wait for it to complete (if the last cycle is almost done) or skip scheduling more work\\n    const eta = nextXpCycleEnd[server.name];\\n    const activeCycleTimeLeft = (eta || 0) - Date.now();\\n    if (activeCycleTimeLeft > 1000) return activeCycleTimeLeft; // If we're more than 1s away from the expected fire time, just wait for the next loop, don't even check for early completion\\n    if (farmXpReentryLock[server.name] == true) return; // Ensure more than one concurrent callback isn't trying to schedule this server's faming cycle\\n    try {\\n        farmXpReentryLock[server.name] = true;\\n        let expTool; // The tool we will use to farm XP (can be hack, grow, or weaken depending on the situation)\\n        let expTime; // The time this tool will take to run\\n        if (advancedMode) { // We get the most XP by using max possible hack threads while keeping money just above 0 (so that we get full hack() exp)\\n            expTool = options.i ? getTool(\\\"manualhack\\\") : getTool(\\\"hack\\\");\\n            expTime = server.timeToHack();\\n        } else if (server.getSecurity() > server.getMinSecurity()) { // If the server isn't at min-security, we should do that (to reduce hack/grow/weaken time to the minimum)\\n            expTool = getTool(\\\"weak\\\");\\n            expTime = server.timeToWeaken();\\n        } else { // If the server is at min-security, we should farm grow(), since it takes less time (80%) than weaken(). Once at max-money, grow will no longer reduce security.\\n            expTool = getTool(\\\"grow\\\");\\n            expTime = server.timeToGrow();\\n        }\\n        if (server.isXpFarming()) {\\n            if (verbose && activeCycleTimeLeft < -50) // Warn about big misfires (sign of lag)\\n                log(`WARNING: ${server.name} FarmXP process is ` + (eta ? `more than ${formatDuration(-activeCycleTimeLeft)} overdue...` :\\n                    `still in progress from a prior run. ETA unknown, assuming '${expTool.name}' time: ${formatDuration(expTime)}`));\\n            return eta ? (activeCycleTimeLeft > 0 ? activeCycleTimeLeft : 10 /* If we're overdue, sleep only 10 ms before checking again */) : expTime /* Have no ETA, sleep for expTime */;\\n        }\\n        let threads = Math.floor(((allocatedServer == null ? expTool.getMaxThreads() : allocatedServer.ramAvailable() / expTool.cost) * percentOfFreeRamToConsume).toPrecision(14));\\n        if (threads == 0)\\n            return log(`WARNING: Cannot farm XP from ${server.name}, threads == 0 for allocated server ` + (allocatedServer == null ? '(any server)' :\\n                `${allocatedServer.name} with ${formatRam(allocatedServer.ramAvailable())} free RAM`), false, 'warning');\\n\\n        if (advancedMode) { // Need to keep server money above zero, and security at minimum to farm xp from hack(); \\n            const effectiveHackThreads = Math.ceil(1 / server.percentageStolenPerHackThread()); // Only this many hack threads \\\"count\\\" for stealing/hardening. The rest get a 'free ride'\\n            if (threads <= effectiveHackThreads) {\\n                farmXpReentryLock[server.name] = false;\\n                // We don't have enough ram for advanced XP grind (no hack threads would get a 'free ride'). Revert to simple weak/grow farming mode.\\n                return await scheduleHackExpCycle(ns, server, percentOfFreeRamToConsume, verbose, false, allocatedServer, singleServer);\\n            }\\n            var growThreadsNeeded = effectiveHackThreads; // To hack for money, server must have at least 1$ per thread that \\\"counts\\\" for the steal (threads required to steal 100%)\\n            const securityHardeningToCombat = Math.max(effectiveHackThreads * hackThreadHardening + growThreadsNeeded * growthThreadHardening, // Security that will be incurred hack() + grow() threads\\n                server.getSecurity() - server.getMinSecurity()); // If the current security level is higher than this, add enough weaken threads to correct it\\n            var weakenThreadsNeeded = Math.ceil(securityHardeningToCombat / actualWeakenPotency());\\n            // TODO: If the remaining hosts on the network can't fit 4 sets of grow + weaken recovery threads needed, switch to single-server mode! (should take into account already-scheduled cycles)\\n            if (singleServer) // If set to only use a single server, free up the hack threads to make room for recovery threads\\n                threads = Math.max(0, threads - Math.ceil((growThreadsNeeded + weakenThreadsNeeded) * 1.75 / expTool.cost)); // Make room for recovery threads\\n            if (threads == 0)\\n                return log(`Cannot farm XP from ${server.name} on ` + (allocatedServer == null ? '(any server)' : `${allocatedServer.name} with ${formatRam(allocatedServer.ramAvailable())} free RAM`) +\\n                    `: hack threads == 0 after releasing for ${growThreadsNeeded} grow threads and ${weakenThreadsNeeded} weaken threads for ${effectiveHackThreads} effective hack threads.`);\\n        }\\n\\n        let scheduleDelay = 10; // Assume it will take this long a script fired immediately to start running\\n        let now = Date.now();\\n        let scheduleTime = now + scheduleDelay;\\n        let cycleTime = scheduleDelay + expTime + 10; // Wake up this long after a hack has fired (to ensure we don't wake up too early)\\n        nextXpCycleEnd[server.name] = now + cycleTime; // Store when this server's next cycle is expected to end\\n        // Schedule the FarmXP threads first, ensuring that they are not split (if they our split, our hack threads above 'effectiveHackThreads' lose their free ride)\\n        let success = await arbitraryExecution(ns, expTool, threads, [server.name, scheduleTime, 0, expTime, \\\"FarmXP\\\"], allocatedServer?.name);\\n\\n        if (advancedMode) { // Need to keep server money above zero, and security at minimum to farm xp from hack(); \\n            const scheduleGrow = scheduleTime + cycleTime * 2 / 15 - scheduleDelay; // Time this to resolve at 1/3 * cycleTime after each hack fires\\n            const scheduleWeak = scheduleTime + cycleTime * 2 / 3 - scheduleDelay; //  Time this to resolve at 2/3 * cycleTime after each hack fires\\n            success &&= await arbitraryExecution(ns, getTool(\\\"grow\\\"), growThreadsNeeded, [server.name, scheduleGrow, 0, server.timeToGrow(), \\\"growForXp\\\"],\\n                singleServer ? allocatedServer?.name : null, !singleServer);\\n            success &&= await arbitraryExecution(ns, getTool(\\\"weak\\\"), weakenThreadsNeeded, [server.name, scheduleWeak, 0, server.timeToWeaken(), \\\"weakenForXp\\\"],\\n                singleServer ? allocatedServer?.name : null, !singleServer);\\n            //log(`XP Farm ${server.name} money available is ${formatMoney(server.getMoney())} and security is ` +\\n            //    `${server.getSecurity().toPrecision(3)} of ${server.getMinSecurity().toPrecision(3)}`);\\n            //log(`Planned start: Hack: ${Math.round(scheduleTime - now)} Grow: ${Math.round(scheduleGrow - now)} ` +\\n            //    `Weak: ${Math.round(scheduleWeak - now)} Tick: ${Math.round(cycleTime)} Cycle: ${threads} / ${growThreadsNeeded} / ${weakenThreadsNeeded}`);\\n            if (verbose) log(`Exp Cycle: ${threads} x Hack in ${Math.round(scheduleTime - now + expTime)}ms, ` +\\n                `${growThreadsNeeded} x Grow in ${Math.round((scheduleGrow - now + server.timeToGrow()) % cycleTime)}ms, ` +\\n                `${weakenThreadsNeeded} x Weak in ${Math.round((scheduleWeak - now + server.timeToWeaken()) % cycleTime)}ms, ` +\\n                `Tick: ${Math.round(cycleTime)}ms on ${allocatedServer?.name ?? '(any server)'} targeting \\\"${server.name}\\\"`);\\n        } else if (verbose)\\n            log(`In ${formatDuration(cycleTime)}, ${threads} ${expTool.shortName} threads will fire against ${server.name} (for Hack Exp)`);\\n        if (!success) { // If some aspect scheduling fails, we should try adjusting our future scheduling tactics to attempt to use less RAM\\n            if (singleServerLimit >= maxTargets && maxTargets > 1)\\n                maxTargets--;\\n            else\\n                singleServerLimit++;\\n        }\\n        // Note: Next time we tick, Hack will have *just* fired, so for the moment we will be at 0 money and above min security. Trust that all is well\\n        return cycleTime; // Ideally we wake up right after hack has fired so we can schedule another immediately\\n    } finally {\\n        farmXpReentryLock[server.name] = false;\\n    }\\n}\\n\\n// In \\\"-s\\\" mode, we collect information about our current stock positions and hack/grow with stock manipulation enabled in order to boost that stock's position.\\nconst serverStockSymbols = Object.fromEntries([\\n    [\\\"foodnstuff\\\", \\\"FNS\\\"], [\\\"sigma-cosmetics\\\", \\\"SGC\\\"], [\\\"omega-net\\\", \\\"OMGA\\\"], [\\\"comptek\\\", \\\"CTK\\\"], [\\\"netlink\\\", \\\"NTLK\\\"], [\\\"syscore\\\", \\\"SYSC\\\"], [\\\"catalyst\\\", \\\"CTYS\\\"], [\\\"lexo-corp\\\", \\\"LXO\\\"], [\\\"alpha-ent\\\", \\\"APHE\\\"], [\\\"rho-construction\\\", \\\"RHOC\\\"],\\n    [\\\"aerocorp\\\", \\\"AERO\\\"], [\\\"global-pharm\\\", \\\"GPH\\\"], [\\\"omnia\\\", \\\"OMN\\\"], [\\\"defcomm\\\", \\\"DCOMM\\\"], [\\\"solaris\\\", \\\"SLRS\\\"], [\\\"icarus\\\", \\\"ICRS\\\"], [\\\"univ-energy\\\", \\\"UNV\\\"], [\\\"nova-med\\\", \\\"NVMD\\\"], [\\\"titan-labs\\\", \\\"TITN\\\"], [\\\"microdyne\\\", \\\"MDYN\\\"], [\\\"stormtech\\\", \\\"STM\\\"],\\n    [\\\"helios\\\", \\\"HLS\\\"], [\\\"vitalife\\\", \\\"VITA\\\"], [\\\"fulcrumtech\\\", \\\"FLCM\\\"], [\\\"4sigma\\\", \\\"FSIG\\\"], [\\\"kuai-gong\\\", \\\"KGI\\\"], [\\\"omnitek\\\", \\\"OMTK\\\"], [\\\"blade\\\", \\\"BLD\\\"], [\\\"clarkinc\\\", \\\"CLRK\\\"], [\\\"ecorp\\\", \\\"ECP\\\"], [\\\"megacorp\\\", \\\"MGCP\\\"], [\\\"fulcrumassets\\\", \\\"FLCM\\\"]\\n]);\\nlet serversWithOwnedStock = []; // Dict of server names, with a value of \\\"true\\\" if we should turn on stock-manipulation when growing this server\\nlet shouldManipulateGrow = []; // Dict of server names, with a value of \\\"true\\\" if we should turn on stock-manipulation when growing this server\\nlet shouldManipulateHack = []; // Dict of server names, with a value of \\\"true\\\" if we should turn on stock-manipulation when hacking this server\\nlet failedStockUpdates = 0;\\n/** @param {NS} ns **/\\nasync function updateStockPositions(ns) {\\n    if (!playerStats.hasTixApiAccess) return; // No point in attempting anything here if the user doesn't have stock market access yet.\\n    let updatedPositions = ns.read(`/Temp/stock-probabilities.txt`); // Should be a dict of stock symbol -> prob left by the stockmaster.js script.\\n    if (!updatedPositions) {\\n        failedStockUpdates++;\\n        if (failedStockUpdates % 60 == 10) // Periodically warn if stockmaster is not running (or not generating the required file)\\n            log(`WARNING: The file \\\"/Temp/stock-probabilities.txt\\\" has been missing or empty the last ${failedStockUpdates} attempts.` +\\n                `\\\\nEnsure stockmaster.js is running, or turn off the --stock-manipulation flag when running.`, false, 'warning');\\n        return\\n    }\\n    failedStockUpdates = 0;\\n    updatedPositions = JSON.parse(updatedPositions); // Should be a dict of stock symbol -> prob left by the stockmaster.js script.\\n    // Strengthen whatever trend a stock currently has, whether we own it or not\\n    const newShouldManipulateGrow = {}, newShouldManipulateHack = {}, newServersWithOwnedStock = [];\\n    Object.keys(serverStockSymbols).forEach(server => {\\n        const sym = serverStockSymbols[server];\\n        const pos = updatedPositions[sym];\\n        newShouldManipulateGrow[server] = pos.sharesLong > 0 ? true : pos.prob >= 0.5; // If bullish, grow should be made to influence stock\\n        newShouldManipulateHack[server] = pos.sharesShort > 0 ? true : pos.prob < 0.5; // If bearish, hack should be made to influence stock\\n        if (pos.sharesLong > 0 || pos.sharesShort > 0) newServersWithOwnedStock.push(server); // Keep track of servers we own stock in so we can prioritize hacking them in stockFocus mode\\n    });\\n    if (stockFocus) { // Detect any positions that have reversed and kill all active hack/grow scripts against that server set to manipulate in the wrong direction\\n        const newLongPositions = Object.keys(serverStockSymbols).filter(server => newShouldManipulateGrow[server] && !shouldManipulateGrow[server]);\\n        if (newLongPositions.length > 0) await terminateScriptsManipulatingStock(ns, newLongPositions, getTool(\\\"hack\\\").name); // Make sure no hacks are set to manipulate our long positions down!\\n        const newShortPositions = Object.keys(serverStockSymbols).filter(server => newShouldManipulateHack[server] && !shouldManipulateHack[server]);\\n        if (newShortPositions.length > 0) await terminateScriptsManipulatingStock(ns, newShortPositions, getTool(\\\"grow\\\").name); // Make sure no grows are set to manipulate our short positions up!\\n    }\\n    shouldManipulateGrow = newShouldManipulateGrow;\\n    shouldManipulateHack = newShouldManipulateHack;\\n    serversWithOwnedStock = newServersWithOwnedStock;\\n}\\n// Kills all scripts running the specified tool and targeting one of the specified servers if stock market manipulation is enabled\\nasync function terminateScriptsManipulatingStock(ns, servers, toolName) {\\n    const problematicProcesses = addedServerNames.flatMap(hostname => ps(ns, hostname)\\n        .filter(process => servers.includes(process.args[0]) && (loopingMode || toolName == process.filename && process.args.length > 5 && process.args[5]))\\n        .map(process => ({ pid: process.pid, hostname })));\\n    if (problematicProcesses.length > 0)\\n        await runCommand(ns, JSON.stringify(problematicProcesses) + '.forEach(p => ns.kill(p.pid, p.hostname))', '/Temp/kill-remote-stock-manipulation.js');\\n}\\n\\nfunction addServer(server, verbose) {\\n    if (verbose) log(`Adding a new server to all lists: ${server}`);\\n    addedServerNames.push(server.name);\\n    // Lists maintained in various sort orders\\n    serverListByFreeRam.push(server);\\n    serverListByMaxRam.push(server);\\n    serverListByTargetOrder.push(server);\\n}\\n\\nfunction removeServerByName(deletedHostName) {\\n    addedServerNames.splice(addedServerNames.indexOf(deletedHostName), 1);\\n    const removeByName = (hostname, list, listname) => {\\n        const toRemove = list.findIndex(s => s.name === hostname);\\n        if (toRemove === -1)\\n            log(`ERROR: Failed to find server by name ${hostname}.`, true, 'error');\\n        else {\\n            list.splice(toRemove, 1);\\n            log(`${hostname} was found at index ${toRemove} of list ${listname} and removed leaving ${list.length} items.`);\\n        }\\n    }\\n    removeByName(deletedHostName, serverListByFreeRam, 'serverListByFreeRam');\\n    removeByName(deletedHostName, serverListByMaxRam, 'serverListByMaxRam');\\n    removeByName(deletedHostName, serverListByTargetOrder, 'serverListByTargetOrder');\\n}\\n\\nlet getServerByName = hostname => serverListByFreeRam.find(s => s.name == hostname);\\n\\n// Indication that a server has been flagged for deletion (by the host manager). Doesn't count for home of course, as this is where the flag file is stored for copying.\\nlet isFlaggedForDeletion = (hostName) => hostName != \\\"home\\\" && doesFileExist(\\\"/Flags/deleting.txt\\\", hostName);\\n\\n// Helper to construct our server lists from a list of all host names\\nfunction buildServerList(ns, verbose = false) {\\n    // Get list of servers (i.e. all servers on first scan, or newly purchased servers on subsequent scans) that are not currently flagged for deletion\\n    let allServers = scanAllServers(ns).filter(hostName => !isFlaggedForDeletion(hostName));\\n    // Ignore hacknet node servers if we are not supposed to run scripts on them (reduces their hash rate when we do)\\n    if (!useHacknetNodes)\\n        allServers = allServers.filter(hostName => !hostName.startsWith('hacknet-node-'))\\n    // Remove all servers we currently have added that are no longer being returned by the above query\\n    for (const hostName of addedServerNames.filter(hostName => !allServers.includes(hostName)))\\n        removeServerByName(hostName);\\n    // Add any servers that are new\\n    allServers.filter(hostName => !addedServerNames.includes(hostName)).forEach(hostName => addServer(buildServerObject(ns, hostName, verbose)));\\n}\\n\\n// Helper to sort various copies of our host list in different ways.\\nfunction sortServerList(o) {\\n    switch (o) {\\n        case \\\"ram\\\":\\n            // Original sort order adds jobs to the server with the most free ram\\n            serverListByFreeRam.sort(function (a, b) {\\n                var ramDiff = b.ramAvailable() - a.ramAvailable();\\n                return ramDiff != 0.0 ? ramDiff : a.name.localeCompare(b.name); // Break ties by sorting by name\\n            });\\n            break;\\n        case \\\"totalram\\\":\\n            // Original sort order adds jobs to the server with the most free ram\\n            serverListByMaxRam.sort(function (a, b) {\\n                var ramDiff = b.totalRam() - a.totalRam();\\n                return ramDiff != 0.0 ? ramDiff : a.name.localeCompare(b.name); // Break ties by sorting by name\\n            });\\n            break;\\n        case \\\"targeting\\\":\\n            // To ensure we establish some income, prep fastest-to-prep servers first, and target prepped servers before unprepped servers.\\n            serverListByTargetOrder.sort(function (a, b) {\\n                if (a.canHack() != b.canHack()) return a.canHack() ? -1 : 1; // Sort all hackable servers first               \\n                if (stockFocus) { // If focused on stock-market manipulation, sort up servers with a stock, prioritizing those we have some position in\\n                    let stkCmp = serversWithOwnedStock.includes(a.name) == serversWithOwnedStock.includes(b.name) ? 0 : serversWithOwnedStock.includes(a.name) ? -1 : 1;\\n                    if (stkCmp == 0) stkCmp = ((shouldManipulateGrow[a.name] || shouldManipulateHack[a.name]) == (shouldManipulateGrow[b.name] || shouldManipulateHack[b.name])) ? 0 :\\n                        shouldManipulateGrow[a.name] || shouldManipulateHack[a.name] ? -1 : 1;\\n                    if (stkCmp != 0) return stkCmp;\\n                }\\n                // Next, Sort prepped servers to the front. Assume that if we're targetting, we're prepped (between cycles)\\n                if ((a.isPrepped() || a.isTargeting()) != (b.isPrepped() || b.isTargeting)) return a.isPrepped() || a.isTargeting() ? -1 : 1;\\n                if (!a.canHack()) return a.requiredHackLevel - b.requiredHackLevel; // Unhackable servers are sorted by lowest hack requirement\\n                //if (!a.isPrepped()) return a.timeToWeaken() - b.timeToWeaken(); // Unprepped servers are sorted by lowest time to weaken\\n                // For ready-to-hack servers, the sort order is based on money, RAM cost, and cycle time\\n                return b.getMoneyPerRamSecond() - a.getMoneyPerRamSecond(); // Prepped servers are sorted by most money/ram.second\\n            });\\n            break;\\n    }\\n}\\n\\nasync function runCommand(ns, ...args) {\\n    return await runCommand_Custom(ns, getFnRunViaNsExec(ns, daemonHost), ...args);\\n}\\n\\nasync function getNsDataThroughFile(ns, ...args) {\\n    return await getNsDataThroughFile_Custom(ns, getFnRunViaNsExec(ns, daemonHost), getFnIsAliveViaNsPs(ns), ...args);\\n}\\n\\nasync function establishMultipliers(ns) {\\n    log(\\\"establishMultipliers\\\");\\n\\n    bitnodeMults = (await tryGetBitNodeMultipliers_Custom(ns, getNsDataThroughFile)) || {\\n        // prior to SF-5, bitnodeMults stays null and these mults are set to 1.\\n        ServerGrowthRate: 1,\\n        ServerWeakenRate: 1,\\n        FourSigmaMarketDataApiCost: 1,\\n        ScriptHackMoneyGain: 1\\n    };\\n    if (verbose)\\n        log(`Bitnode mults:\\\\n  ${Object.keys(bitnodeMults).filter(k => bitnodeMults[k] != 1.0).map(k => `${k}: ${bitnodeMults[k]}`).join('\\\\n  ')}`);\\n}\\n\\n/** @param {NS} ns **/\\nasync function buildToolkit(ns) {\\n    log(\\\"buildToolkit\\\");\\n    let allTools = hackTools.concat(asynchronousHelpers).concat(periodicScripts);\\n    let toolCosts = await getNsDataThroughFile(ns, `Object.fromEntries(${JSON.stringify(allTools.map(t => t.name))}` +\\n        `.map(s => [s, ns.getScriptRam(s, '${daemonHost}')]))`, '/Temp/script-costs.txt');\\n    for (const toolConfig of allTools) {\\n        let tool = {\\n            instance: ns,\\n            name: toolConfig.name,\\n            shortName: toolConfig.shortName,\\n            tail: toolConfig.tail || false,\\n            args: toolConfig.args || [],\\n            shouldRun: toolConfig.shouldRun,\\n            requiredServer: toolConfig.requiredServer,\\n            isThreadSpreadingAllowed: toolConfig.threadSpreadingAllowed === true,\\n            cost: toolCosts[toolConfig.name],\\n            canRun: function (server) {\\n                return doesFileExist(this.name, server.name) && server.ramAvailable() >= this.cost;\\n            },\\n            getMaxThreads: function () {\\n                // analyzes the servers array and figures about how many threads can be spooled up across all of them.\\n                let maxThreads = 0;\\n                sortServerList(\\\"ram\\\");\\n                for (const server of serverListByFreeRam.filter(s => s.hasRoot())) {\\n                    // Note: To be conservative, we allow double imprecision to cause this floor() to return one less than should be possible,\\n                    //       because the game likely doesn't account for this imprecision (e.g. let 1.9999999999999998 return 1 rather than 2)\\n                    var threadsHere = Math.floor((server.ramAvailable() / this.cost)/*.toPrecision(14)*/);\\n                    if (!this.isThreadSpreadingAllowed)\\n                        return threadsHere;\\n                    maxThreads += threadsHere;\\n                }\\n                return maxThreads;\\n            }\\n        };\\n        tools.push(tool);\\n        toolsByShortName[tool.shortName || hashToolDefinition(tool)] = tool;\\n    }\\n}\\n\\nconst hashToolDefinition = s => hashCode(s.name + (s.args?.toString() || ''));\\n\\nfunction getTool(s) { return toolsByShortName[s] || toolsByShortName[s.shortName || hashToolDefinition(s)]; }\\n\\nconst crackNames = [\\\"BruteSSH.exe\\\", \\\"FTPCrack.exe\\\", \\\"relaySMTP.exe\\\", \\\"HTTPWorm.exe\\\", \\\"SQLInject.exe\\\"];\\nlet ownedCracks = [];\\n\\nfunction getNumPortCrackers() {\\n    // Once we own a port cracker, assume it won't be deleted.\\n    if (ownedCracks.length == 5) return 5;\\n    for (const crack of crackNames.filter(c => !ownedCracks.includes(c)))\\n        if (doesFileExist(crack, 'home'))\\n            ownedCracks.push(crack);\\n    return ownedCracks.length;\\n}\",\"filename\":\"daemon.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"helpers.js\",\"url\":\"blob:file:///e3715146-12bf-4f3c-b8ba-b39b739e25b0\",\"moduleSequenceNumber\":125},{\"filename\":\"daemon.js\",\"url\":\"blob:file:///7f02ac94-f36f-4170-9368-fb8ed0ff662e\",\"moduleSequenceNumber\":225}],\"dependents\":[],\"ramUsage\":4,\"server\":\"home\",\"moduleSequenceNumber\":225,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"ps\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerGrowth\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { formatNumberShort, formatMoney, getNsDataThroughFile, getActiveSourceFiles } from './helpers.js'\\n\\n// Prefer to join factions in (ish) order of most expensive to least expensive \\n// This also acts as a list of default \\\"easy\\\" factions to list and compare, in addition to any other invites you may have\\nconst preferredFactionOrder = [\\n    \\\"BitRunners\\\", \\\"The Black Hand\\\", \\\"NiteSec\\\", \\\"CyberSec\\\", \\\"Netburners\\\", // Hack Based\\n    \\\"Tian Di Hui\\\", \\\"Sector-12\\\", \\\"Chongqing\\\", \\\"New Tokyo\\\", \\\"Ishima\\\", \\\"Aevum\\\", \\\"Volhaven\\\", // Location Based\\n    \\\"Slum Snakes\\\", \\\"Tetrads\\\" // Crime Based\\n];\\nlet factionNames = [];\\nlet playerData = null;\\nlet joinedFactions = [];\\nlet ownedAugmentations = [];\\nlet factionData = {};\\nlet augmentationData = {};\\nlet allAugStats = [];\\nlet options = null; // A copy of the options used at construction time\\nlet purchaseableAugs = [];\\nlet purchaseFactionDonations = [];\\n// Factors that control how augmentation prices scale\\nconst nfCountMult = 1.14\\nlet augCountMult = 1.9; // The multiplier for the cost increase of augmentations (changes based on SF11 level)\\n\\nconst argsSchema = [\\n    ['a', false], // Display all factions (spoilers), not just unlocked and early-game factions\\n    ['all', false],\\n    ['after-faction', []], // Pretend we were to buy all augs offered by these factions. Show us only what remains.\\n    ['join-only', false], // Don't generate input, just join factions that can/should be joined\\n    ['force-join', ['Slum Snakes']], // Always join these factions if we have an invite\\n    // Display-related options - controls what information is displayed and how\\n    ['v', false], // Print the terminal as well as the script logs\\n    ['verbose', false],\\n    ['i', false], // Display stats for all factions and augs, despite what we already have (kind of a \\\"mock\\\" mode)\\n    ['ignore-player-data', false],\\n    ['u', false], // When displaying total aug stats for a faction, only include augs not given by a faction further up the list\\n    ['unique', false],\\n    ['sort', 'hacking'], // What stat is the table of total faction stats sorted by\\n    ['hide-stat', ['bladeburner', 'hacknet']], // Stats to exclude from the final table (partial matching works)\\n    // Augmentation purchasing-related options. Controls what augmentations are included in cost calculations, and optionally purchased\\n    ['aug-desired', []], // These augs will be marked as \\\"desired\\\" whether or not they match desired-stats\\n    ['omit-aug', []], // Augmentations to exclude from the augmentation summary because we do not wish to purchase this round\\n    ['stat-desired', []], // Augs that give these will be starred (marked as desired and staged for purchase)\\n    ['disable-faction', []], // Factions to omit from all data, stats, and calcs, (e.g.) if you do not want to purchase augs from them, or do not want to see them because they are impractical to join at this time\\n    ['disable-donations', false], // When displaying \\\"obtainable\\\" augs and prices, don't include augs that require a donation to meet their rep requirements\\n    ['purchase', false], // Set to true to pull the trigger on purchasing all desired augs in the order specified\\n    ['neuroflux-disabled', false], // Set to true to skip including as many neuroflux upgrades as we can afford\\n];\\n\\nconst default_desired_stats = ['hacking', 'faction_rep', 'company_rep', 'charisma', 'hacknet']; // If the user does not have own many augmentations, and has not specified stats to prioritize, use these defaults\\n\\nconst stat_multis = [\\\"agility_exp\\\", \\\"agility\\\", \\\"charisma_exp\\\", \\\"charisma\\\", \\\"company_rep\\\", \\\"crime_money\\\", \\\"crime_success\\\", \\\"defense_exp\\\", \\\"defense\\\", \\\"dexterity_exp\\\", \\\"dexterity\\\",\\n    \\\"faction_rep\\\", \\\"hacking_chance\\\", \\\"hacking_exp\\\", \\\"hacking_grow\\\", \\\"hacking_money\\\", \\\"hacking\\\", \\\"hacking_speed\\\", \\\"strength_exp\\\", \\\"strength\\\", \\\"work_money\\\",\\n    \\\"bladeburner_analysis\\\", \\\"bladeburner_max_stamina\\\", \\\"bladeburner_stamina_gain\\\", \\\"bladeburner_success_chance\\\",\\n    \\\"hacknet_node_core_cost\\\", \\\"hacknet_node_level_cost\\\", \\\"hacknet_node_money\\\", \\\"hacknet_node_purchase_cost\\\", \\\"hacknet_node_ram_cost\\\"];\\n\\nconst factions = [\\\"Illuminati\\\", \\\"Daedalus\\\", \\\"The Covenant\\\", \\\"ECorp\\\", \\\"MegaCorp\\\", \\\"Bachman & Associates\\\", \\\"Blade Industries\\\", \\\"NWO\\\", \\\"Clarke Incorporated\\\", \\\"OmniTek Incorporated\\\",\\n    \\\"Four Sigma\\\", \\\"KuaiGong International\\\", \\\"Fulcrum Secret Technologies\\\", \\\"BitRunners\\\", \\\"The Black Hand\\\", \\\"NiteSec\\\", \\\"Aevum\\\", \\\"Chongqing\\\", \\\"Ishima\\\", \\\"New Tokyo\\\", \\\"Sector-12\\\",\\n    \\\"Volhaven\\\", \\\"Speakers for the Dead\\\", \\\"The Dark Army\\\", \\\"The Syndicate\\\", \\\"Silhouette\\\", \\\"Tetrads\\\", \\\"Slum Snakes\\\", \\\"Netburners\\\", \\\"Tian Di Hui\\\", \\\"CyberSec\\\", \\\"Bladeburners\\\", \\\"Church of the Machine God\\\"];\\n\\nconst augmentations = [\\\"ADR-V1 Pheromone Gene\\\", \\\"ADR-V2 Pheromone Gene\\\", \\\"Artificial Bio-neural Network Implant\\\", \\\"Artificial Synaptic Potentiation\\\", \\\"Augmented Targeting I\\\", \\\"Augmented Targeting II\\\", \\\"Augmented Targeting III\\\", \\\"BLADE-51b Tesla Armor\\\", \\\"BLADE-51b Tesla Armor: Energy Shielding Upgrade\\\", \\\"BLADE-51b Tesla Armor: IPU Upgrade\\\", \\\"BLADE-51b Tesla Armor: Omnibeam Upgrade\\\", \\\"BLADE-51b Tesla Armor: Power Cells Upgrade\\\", \\\"BLADE-51b Tesla Armor: Unibeam Upgrade\\\", \\\"Bionic Arms\\\", \\\"Bionic Legs\\\", \\\"Bionic Spine\\\", \\\"BitRunners Neurolink\\\", \\\"BitWire\\\", \\\"Blade's Runners\\\", \\\"BrachiBlades\\\", \\\"CRTX42-AA Gene Modification\\\", \\\"CashRoot Starter Kit\\\", \\\"Combat Rib I\\\", \\\"Combat Rib II\\\", \\\"Combat Rib III\\\", \\\"CordiARC Fusion Reactor\\\", \\\"Cranial Signal Processors - Gen I\\\", \\\"Cranial Signal Processors - Gen II\\\", \\\"Cranial Signal Processors - Gen III\\\", \\\"Cranial Signal Processors - Gen IV\\\", \\\"Cranial Signal Processors - Gen V\\\", \\\"DataJack\\\", \\\"DermaForce Particle Barrier\\\", \\\"ECorp HVMind Implant\\\", \\\"EMS-4 Recombination\\\", \\\"Embedded Netburner Module\\\", \\\"Embedded Netburner Module Analyze Engine\\\", \\\"Embedded Netburner Module Core Implant\\\", \\\"Embedded Netburner Module Core V2 Upgrade\\\", \\\"Embedded Netburner Module Core V3 Upgrade\\\", \\\"Embedded Netburner Module Direct Memory Access Upgrade\\\", \\\"Enhanced Myelin Sheathing\\\", \\\"Enhanced Social Interaction Implant\\\", \\\"EsperTech Bladeburner Eyewear\\\", \\\"FocusWire\\\", \\\"GOLEM Serum\\\", \\\"Graphene Bionic Arms Upgrade\\\", \\\"Graphene Bionic Legs Upgrade\\\", \\\"Graphene Bionic Spine Upgrade\\\", \\\"Graphene Bone Lacings\\\", \\\"Graphene BrachiBlades Upgrade\\\", \\\"Hacknet Node CPU Architecture Neural-Upload\\\", \\\"Hacknet Node Cache Architecture Neural-Upload\\\", \\\"Hacknet Node Core Direct-Neural Interface\\\", \\\"Hacknet Node Kernel Direct-Neural Interface\\\", \\\"Hacknet Node NIC Architecture Neural-Upload\\\", \\\"HemoRecirculator\\\", \\\"Hydroflame Left Arm\\\", \\\"HyperSight Corneal Implant\\\", \\\"Hyperion Plasma Cannon V1\\\", \\\"Hyperion Plasma Cannon V2\\\", \\\"I.N.T.E.R.L.I.N.K.E.D\\\", \\\"INFRARET Enhancement\\\", \\\"LuminCloaking-V1 Skin Implant\\\", \\\"LuminCloaking-V2 Skin Implant\\\", \\\"NEMEAN Subdermal Weave\\\", \\\"Nanofiber Weave\\\", \\\"Neotra\\\", \\\"Neural Accelerator\\\", \\\"Neural-Retention Enhancement\\\", \\\"Neuralstimulator\\\", \\\"Neuregen Gene Modification\\\", \\\"NeuroFlux Governor\\\", \\\"Neuronal Densification\\\", \\\"Neuroreceptor Management Implant\\\", \\\"Neurotrainer I\\\", \\\"Neurotrainer II\\\", \\\"Neurotrainer III\\\", \\\"Nuoptimal Nootropic Injector Implant\\\", \\\"NutriGen Implant\\\", \\\"ORION-MKIV Shoulder\\\", \\\"OmniTek InfoLoad\\\", \\\"PC Direct-Neural Interface\\\", \\\"PC Direct-Neural Interface NeuroNet Injector\\\", \\\"PC Direct-Neural Interface Optimization Submodule\\\", \\\"PCMatrix\\\", \\\"Photosynthetic Cells\\\", \\\"Power Recirculation Core\\\", \\\"SPTN-97 Gene Modification\\\", \\\"SmartJaw\\\", \\\"SmartSonar Implant\\\", \\\"Social Negotiation Assistant (S.N.A)\\\", \\\"Speech Enhancement\\\", \\\"Speech Processor Implant\\\", \\\"Synaptic Enhancement Implant\\\", \\\"Synfibril Muscle\\\", \\\"Synthetic Heart\\\", \\\"TITN-41 Gene-Modification Injection\\\", \\\"The Black Hand\\\", \\\"The Blade's Simulacrum\\\", \\\"The Red Pill\\\", \\\"The Shadow's Simulacrum\\\", \\\"Unstable Circadian Modulator\\\", \\\"Vangelis Virus\\\", \\\"Vangelis Virus 3.0\\\", \\\"Wired Reflexes\\\", \\\"Xanipher\\\", \\\"nextSENS Gene Modification\\\"]\\nconst strNF = \\\"NeuroFlux Governor\\\"\\n\\nexport function autocomplete(data, args) {\\n    data.flags(argsSchema);\\n    const lastFlag = args.length > 1 ? args[args.length - 2] : null;\\n    if (lastFlag == \\\"--sort\\\")\\n        return stat_multis;\\n    if (lastFlag == \\\"--disable-faction\\\" || lastFlag == \\\"--after-faction\\\")\\n        return factions.map(f => f.replaceAll(\\\" \\\", \\\"_\\\")).sort(); // Command line doesn't like spaces\\n    if (lastFlag == \\\"--omit-aug\\\" || lastFlag == \\\"--aug-desired\\\")\\n        return augmentations.map(f => f.replaceAll(\\\" \\\", \\\"_\\\"));\\n    return [];\\n}\\n\\n// Flags -a for all factions, -v to print to terminal\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    options = ns.flags(argsSchema);\\n    const verbose = options.v || options.verbose;\\n    const allFactions = options.a || options.all;\\n    const afterFactions = options['after-faction'].map(f => f.replaceAll(\\\"_\\\", \\\" \\\"));\\n    const omitFactions = options['disable-faction'].map(f => f.replaceAll(\\\"_\\\", \\\" \\\"));\\n    const omitAugs = options['omit-aug'].map(f => f.replaceAll(\\\"_\\\", \\\" \\\"));\\n    const desiredAugs = options['aug-desired'].map(f => f.replaceAll(\\\"_\\\", \\\" \\\"));\\n    const ignorePlayerData = options.i || options['ignore-player-data'];\\n    const sort = unshorten(options.sort); // Support the user leaving off the _mult suffix\\n    playerData = await getNsDataThroughFile(ns, 'ns.getPlayer()', '/Temp/player-info.txt');\\n    const ownedSourceFiles = await getActiveSourceFiles(ns);\\n    const sf4Level = ownedSourceFiles[4] || 0;\\n    if (sf4Level == 0)\\n        log(ns, `WARNING: This script makes heavy use of singularity functions. Without SF4, you're unlikely to get it working.`);\\n    else if (sf4Level < 3)\\n        log(ns, `WARNING: This script makes heavy use of singularity functions, which are quite expensive before you have SF4.3. ` +\\n            `Unless you have a lot of free RAM for temporary scripts, you may get runtime errors.`);\\n    const sf11Level = ownedSourceFiles[11] || 0;\\n    augCountMult = [1.9, 1.824, 1.786, 1.767][sf11Level];\\n    log(ns, `Player has sf11Level ${sf11Level}, so the multiplier after each aug purchased is ${augCountMult}.`);\\n    joinedFactions = ignorePlayerData ? [] : playerData.factions;\\n    log(ns, 'In factions: ' + joinedFactions);\\n    // Get owned augmentations (whether they've been installed or not). Ignore strNF because you can always buy more.\\n    ownedAugmentations = ignorePlayerData ? [] :\\n        (await getNsDataThroughFile(ns, 'ns.getOwnedAugmentations(true)', '/Temp/player-augs-purchased.txt')).filter(a => a != strNF);\\n    if (options['neuroflux-disabled']) omitAugs.push(strNF);\\n    log(ns, 'Getting all faction data...');\\n    await updateFactionData(ns, allFactions, omitFactions);\\n    log(ns, 'Getting all augmentation data...');\\n    await updateAugmentationData(ns, options['stat-desired'], desiredAugs);\\n    //ns.tprint(Object.values(augmentationData).map(a => a.name).sort()); Print a list of all augmentation names\\n    if (!ignorePlayerData) {\\n        log(ns, 'Joining available factions...');\\n        await joinFactions(ns);\\n        if (options['join-only']) return;\\n        displayJoinedFactionSummary(ns, verbose);\\n    }\\n    await manageUnownedAugmentations(ns, omitAugs, verbose);\\n    displayFactionSummary(ns, verbose, sort, options.u || options.unique, afterFactions, options['hide-stat']);\\n    if (options.purchase && purchaseableAugs)\\n        await purchaseDesiredAugs(ns, verbose);\\n}\\n\\nfunction log(ns, log, alsoPrintToTerminal, toastStyle) {\\n    ns.print(log);\\n    if (alsoPrintToTerminal) ns.tprint(log);\\n    if (toastStyle) ns.toast(log, toastStyle);\\n}\\n\\n// Helper function to make multi names shorter for display in a table\\nfunction shorten(mult) {\\n    return mult.replace(\\\"_mult\\\", \\\"\\\").replace(\\\"company\\\", \\\"cmp\\\").replace(\\\"faction\\\", \\\"fac\\\").replace(\\\"money\\\", \\\"$\\\").replace(\\\"crime\\\", \\\"crm\\\")\\n        .replace(\\\"agility\\\", \\\"agi\\\").replace(\\\"strength\\\", \\\"str\\\").replace(\\\"charisma\\\", \\\"cha\\\").replace(\\\"defense\\\", \\\"def\\\").replace(\\\"dexterity\\\", \\\"dex\\\").replace(\\\"hacking\\\", \\\"hack\\\")\\n        .replace(\\\"hacknet_node\\\", \\\"hn\\\").replace(\\\"bladeburner\\\", \\\"bb\\\").replace(\\\"stamina\\\", \\\"stam\\\")\\n        .replace(\\\"success_chance\\\", \\\"success\\\").replace(\\\"success\\\", \\\"prob\\\").replace(\\\"chance\\\", \\\"prob\\\");\\n}\\n\\n// Helper function to take a shortened multi name provided by the user and map it to a real multi\\nfunction unshorten(strMult) {\\n    if (stat_multis.includes(strMult)) return strMult + \\\"_mult\\\"; // They just omitted the \\\"_mult\\\" suffix shared by all\\n    if (stat_multis.includes(strMult.replace(\\\"_mult\\\", \\\"\\\"))) return strMult; // It's fine as is\\n    let match = stat_multis.find(m => shorten(m) == strMult);\\n    if (find !== undefined) return match + \\\"_mult\\\";\\n    throw `The specified stat name '${strMult}' does not match any of the known stat names: ${stat_multis.join(', ')}`;\\n}\\n\\nlet factionSortOrder = (a, b) => factionSortValue(a) - factionSortValue(b);\\nlet factionSortValue = faction => {\\n    let preferredIndex = factionNames.indexOf(faction.name || faction);\\n    return preferredIndex == -1 ? 99 : preferredIndex;\\n};\\n\\n/** @param {NS} ns **/\\nasync function updateFactionData(ns, allFactions, factionsToOmit) {\\n    factionNames = preferredFactionOrder.filter(f => !factionsToOmit.includes(f));\\n    // Add any player joined factions that may not be in the pre-defined list\\n    factionNames.push(...joinedFactions.filter(f => !factionNames.includes(f) && !factionsToOmit.includes(f)));\\n    // Add any factions that the player has earned an invite to\\n    const invitations = await getNsDataThroughFile(ns, 'ns.checkFactionInvitations()', '/Temp/player-faction-invites.txt');\\n    factionNames.push(...invitations.filter(f => !factionNames.includes(f) && !factionsToOmit.includes(f)));\\n    // If specified, get info about *all* factions in the game, not just the ones hard-coded in the preferred faction order list.\\n    if (allFactions)\\n        factionNames.push(...factions.filter(f => !factionNames.includes(f) && !factionsToOmit.includes(f)));\\n\\n    let factionsDictCommand = command => `Object.fromEntries(${JSON.stringify(factionNames)}.map(faction => [faction, ${command}]))`;\\n    let dictFactionAugs = await getNsDataThroughFile(ns, factionsDictCommand('ns.getAugmentationsFromFaction(faction)'), '/Temp/faction-augs.txt');\\n    let dictFactionReps = await getNsDataThroughFile(ns, factionsDictCommand('ns.getFactionRep(faction)'), '/Temp/faction-rep.txt');\\n    let dictFactionFavors = await getNsDataThroughFile(ns, factionsDictCommand('ns.getFactionFavor(faction)'), '/Temp/faction-favor.txt');\\n\\n    // Need information about our gang to work around a TRP bug - gang faction appears to have it available, but it's not    \\n    const gangFaction = await getNsDataThroughFile(ns, 'ns.gang.inGang() ? ns.gang.getGangInformation().faction : false', '/Temp/gang-faction.txt');\\n    if (gangFaction) dictFactionAugs[gangFaction] = dictFactionAugs[gangFaction]?.filter(a => a != \\\"The Red Pill\\\");\\n\\n    factionData = Object.fromEntries(factionNames.map(faction => [faction, {\\n        name: faction,\\n        invited: invitations.includes(faction),\\n        joined: joinedFactions.includes(faction),\\n        reputation: dictFactionReps[faction] || 0,\\n        favor: dictFactionFavors[faction],\\n        donationsUnlocked: dictFactionFavors[faction] >= ns.getFavorToDonate() && faction !== gangFaction, // Can't donate to gang factions for rep\\n        augmentations: dictFactionAugs[faction],\\n        unownedAugmentations: function (includeNf = false) { return this.augmentations.filter(aug => !ownedAugmentations.includes(aug) && (aug != strNF || includeNf)) },\\n        mostExpensiveAugCost: function () { return this.augmentations.map(augName => augmentationData[augName]).reduce((max, aug) => Math.max(max, aug.price), 0) },\\n        totalUnownedMults: function () {\\n            return this.unownedAugmentations().map(augName => augmentationData[augName])\\n                .reduce((arr, aug) => Object.keys(aug.stats).forEach(stat => arr[stat] = ((arr[stat] || 1) * aug.stats[stat])) || arr, new Map);\\n        }\\n    }]));\\n}\\n\\n/** @param {NS} ns **/\\nasync function updateAugmentationData(ns, desiredStatsFilters, desiredAugs) {\\n    const augmentationNames = [...new Set(Object.values(factionData).flatMap(f => f.augmentations))]; // augmentations.slice();\\n    const augsDictCommand = command => `Object.fromEntries(${JSON.stringify(augmentationNames)}.map(aug => [aug, ${command}]))`;\\n    const dictAugRepReqs = await getNsDataThroughFile(ns, augsDictCommand('ns.getAugmentationRepReq(aug)'), '/Temp/aug-repreqs.txt');\\n    const dictAugPrices = await getNsDataThroughFile(ns, augsDictCommand('ns.getAugmentationPrice(aug)'), '/Temp/aug-prices.txt');\\n    const dictAugStats = await getNsDataThroughFile(ns, augsDictCommand('ns.getAugmentationStats(aug)'), '/Temp/aug-stats.txt');\\n    const dictAugPrereqs = await getNsDataThroughFile(ns, augsDictCommand('ns.getAugmentationPrereq(aug)'), '/Temp/aug-prereqs.txt');\\n    if ((desiredStatsFilters?.length ?? 0) == 0 && (desiredAugs?.length ?? 0) == 0) // If the user does has not specified stats or augmentations to prioritize, use sane defaults\\n        desiredStatsFilters = ownedAugmentations.length < 40 ? default_desired_stats : ['_']; // While few augs are installed, use the default priority stats filter, otherwise, treat all augs as desired\\n    augmentationData = Object.fromEntries(augmentationNames.map(aug => [aug, {\\n        name: aug,\\n        owned: ownedAugmentations.includes(aug),\\n        reputation: dictAugRepReqs[aug],\\n        price: dictAugPrices[aug],\\n        stats: dictAugStats[aug],\\n        prereqs: dictAugPrereqs[aug] || [],\\n        // The best augmentations either have no stats (special effect like no Focus penalty, or Red Pill), or stats in the 'stat-desired' command line options\\n        desired: desiredAugs.includes(aug) || Object.keys(dictAugStats[aug]).length == 0 ||\\n            Object.keys(dictAugStats[aug]).some(key => desiredStatsFilters.some(filter => key.includes(filter))),\\n        // Get the name of the \\\"most-early-game\\\" faction from which we can buy this augmentation. Estimate this by cost of the most expensive aug the offer\\n        getFromAny: factionNames.map(f => factionData[f]).sort((a, b) => a.mostExpensiveAugCost - b.mostExpensiveAugCost)\\n            .filter(f => f.augmentations.includes(aug))[0]?.name ?? \\\"(unknown)\\\",\\n        // Get a list of joined factions that have this augmentation\\n        joinedFactionsWithAug: function () { return factionNames.map(f => factionData[f]).filter(f => f.joined && f.augmentations.includes(this.name)); },\\n        // Whether there is some joined faction which already has enough reputation to buy this augmentation\\n        canAfford: function () { return this.joinedFactionsWithAug().some(f => f.reputation >= this.reputation); },\\n        canAffordWithDonation: function () { return this.joinedFactionsWithAug().some(f => f.donationsUnlocked); },\\n        // Get the name of the **joined** faction from which we can buy this augmentation (sorted by which is closest to being able to afford it, then by most preferred)\\n        getFromJoined: function () {\\n            return (this.joinedFactionsWithAug().filter(f => f.reputation >= this.reputation)[0] ||\\n                this.joinedFactionsWithAug().filter(f => f.donationsUnlocked).sort((a, b) => getReqDonationForAug(this, a) - getReqDonationForAug(this, b))[0] ||\\n                this.joinedFactionsWithAug()[0])?.name;\\n        },\\n        toString: function () {\\n            const factionColWidth = 16, augColWidth = 40, statsColWidth = 60;\\n            const statKeys = Object.keys(this.stats);\\n            const statsString = `Stats:${statKeys.length.toFixed(0).padStart(2)}` + (statKeys.length == 0 ? '' : ` { ${statKeys.map(prop => shorten(prop) + ': ' + this.stats[prop]).join(', ')} }`);\\n            const factionName = this.getFromJoined() || this.getFromAny;\\n            const fCreep = Math.max(0, factionName.length - factionColWidth);\\n            const augNameShort = this.name.length <= (augColWidth - fCreep) ? this.name :\\n                `${this.name.slice(0, Math.ceil(augColWidth / 2 - 3 - fCreep))}...${this.name.slice(this.name.length - Math.floor(augColWidth / 2))}`;\\n            return `${this.desired ? '*' : ' '} ${this.canAfford() ? '✓' : this.canAffordWithDonation() ? '$' : '✗'} Price: ${formatMoney(this.price, 4).padEnd(7)}  ` +\\n                `Rep: ${formatNumberShort(this.reputation, 4)}  Faction: ${factionName.padEnd(factionColWidth)}  Aug: ${augNameShort.padEnd(augColWidth - fCreep)}` +\\n                `  ${statsString.length <= statsColWidth ? statsString : (statsString.substring(0, statsColWidth - 4) + '... }')}`;\\n        }\\n    }]));\\n    // Propagate desired status to any dependencies of desired augs. Note when --all-factions mode is not enabled, it's possible some prereqs are not in our list\\n    let propagateDesired = aug => !aug.desired || !aug.prereqs ? null :\\n        aug.prereqs.forEach(p => { let pa = augmentationData[p]; if (!pa) return; pa.desired = true; propagateDesired(pa); });\\n    Object.values(augmentationData).forEach(a => propagateDesired(a));\\n    allAugStats = Object.values(augmentationData).flatMap(aug => Object.keys(aug.stats)).filter((v, i, a) => a.indexOf(v) === i).sort();\\n}\\n\\n/** @param {NS} ns **/\\nasync function joinFactions(ns) {\\n    let manualJoin = [\\\"Sector-12\\\", \\\"Chongqing\\\", \\\"New Tokyo\\\", \\\"Ishima\\\", \\\"Aevum\\\", \\\"Volhaven\\\"];\\n    // If we have already joined one of the \\\"precluding\\\" factions, we are free to join the remainder\\n    if (joinedFactions.some(f => manualJoin.includes(f)))\\n        manualJoin = [];\\n    // Collect the set of augmentations we already have access to given the factions we've joined\\n    const accessibleAugmentations = new Set(joinedFactions.flatMap(fac => factionData[fac]?.augmentations ?? []));\\n    log(ns, `${accessibleAugmentations.size} augmentations are already accessible from our ${joinedFactions.length} joined factions.`);\\n    // Check for faction invitations\\n    const invitations = Object.values(factionData).filter(f => f.invited);\\n    log(ns, `Outstanding invitations from ${invitations.length} factions: ${JSON.stringify(invitations.map(f => f.name))}`);\\n    // Join all factions with remaining augmentations we care about\\n    for (const faction of invitations.sort(factionSortOrder)) {\\n        let unownedAugs = faction.unownedAugmentations(true); // Filter out augmentations we've already purchased\\n        let newAugs = unownedAugs.filter(aug => !accessibleAugmentations.has(aug)); //  Filter out augmentations we can purchase from another faction we've already joined\\n        let desiredAugs = newAugs.filter(aug => augmentationData[aug].desired); //  Filter out augmentations we have no interest in\\n        log(ns, `${faction.name} has ${faction.augmentations.length} augs, ${unownedAugs.length} unowned, ${newAugs.length} not offered by joined factions, ` +\\n            `${desiredAugs.length} with desirable stats` + (desiredAugs.length == 0 ? ' (not joining)' : `: ${JSON.stringify(desiredAugs)}`));\\n        if (desiredAugs.length == 0 && !options['force-join'].includes(faction.name)) continue;\\n        if (manualJoin.includes(faction.name) && !options['force-join'].includes(faction.name))\\n            log(ns, `Faction ${faction.name} must be manually joined.`);\\n        else {\\n            log(ns, `Joining faction ${faction.name} which has ${desiredAugs.length} desired augmentations: ${desiredAugs}`);\\n            let response;\\n            if (response = await getNsDataThroughFile(ns, `ns.joinFaction('${faction.name}')`, '/Temp/join-faction.txt')) {\\n                faction.joined = true;\\n                faction.augmentations.forEach(aug => accessibleAugmentations.add(aug));\\n                joinedFactions.push(faction.name);\\n                log(ns, `Joined faction ${faction.name} (Response: ${response})`, true, 'success')\\n            } else\\n                log(ns, `Error joining faction ${faction.name}. Response: ${response}`, false, 'error')\\n        }\\n    }\\n}\\n\\n/** Compute how much money must be donated to the faction to afford an augmentation. Faction can be either a faction object, or faction name */\\nlet getReqDonationForRep = (rep, faction) => Math.ceil(1e6 * (Math.max(0, rep - (faction.name ? faction : factionData[faction]).reputation)) / (playerData.faction_rep_mult));\\nlet getReqDonationForAug = (aug, faction) => getReqDonationForRep(aug.reputation, faction);\\n\\nlet getTotalCost = (augPurchaseOrder) => augPurchaseOrder.reduce((total, aug, i) => total + aug.price * augCountMult ** i, 0);\\n\\nlet augSortOrder = (a, b) => (b.price - a.price) || (b.reputation - a.reputation) ||\\n    (b.desired != a.desired ? (a.desired ? -1 : 1) : a.name.localeCompare(b.name));\\n\\n// Sort augmentations such that they are in order of price, except when there are prerequisites to worry about\\nfunction sortAugs(ns, augs = []) {\\n    augs.sort(augSortOrder);\\n    // Bubble up prerequisites to the top\\n    for (let i = 0; i < augs.length; i++) {\\n        for (let j = 0; j < augs[i].prereqs.length; j++) {\\n            const prereqIndex = augs.findIndex(a => a.name == augs[i].prereqs[j]);\\n            if (prereqIndex === -1 /* Already bought */ || prereqIndex < i /* Already sorted up */) continue;\\n            augs.splice(i, 0, augs.splice(prereqIndex, 1)[0]);\\n            i -= 1; // Back up i so that we revisit the prerequisites' own prerequisites\\n            break;\\n        }\\n    }\\n    // Since we are no longer most-expensive to least-expensive, the \\\"ideal purchase order\\\" is more complicated.\\n    // So now see if moving each chunk of prereqs down a slot reduces the overall price.\\n    let initialCost = getTotalCost(augs);\\n    let totalMoves = 0;\\n    for (let i = augs.length - 1; i > 0; i--) {\\n        let batchLengh = 1; // Look for a \\\"batch\\\" of prerequisites, evidenced by augs above this one being cheaper instead of more expensive\\n        while (i - batchLengh >= 0 && augs[i].price > augs[i - batchLengh].price) batchLengh++;\\n        if (batchLengh == 1) continue; // Not the start of a batch of prerequisites\\n        log(ns, `Detected a batch of length ${batchLengh} from ${augs[i - batchLengh + 1].name} to ${augs[i].name}`);\\n        let moved = 0, bestCost = initialCost;\\n        while (i + moved + 1 < augs.length) { // See if promoting augs from below the batch to above the batch reduces the overall cost\\n            let testOrder = augs.slice(), moveIndex = i + moved + 1, insertionIndex = i - batchLengh + 1 + moved;\\n            testOrder.splice(insertionIndex, 0, testOrder.splice(moveIndex, 1)[0]); // Try moving it above the batch\\n            let newCost = getTotalCost(testOrder);\\n            //log(ns, `Cost would change by ${((newCost - bestCost) / bestCost * 100).toPrecision(2)}% from ${formatMoney(bestCost)} to ${formatMoney(newCost)} by buying ${augs[moveIndex].name} before ${augs[insertionIndex].name}`);\\n            if (bestCost < newCost) break; // If the cost is worse or the same, stop shifting augs\\n            //log(ns, `Cost reduced by ${formatMoney(bestCost - newCost)} from ${formatMoney(bestCost)} to ${formatMoney(newCost)} by buying ${augs[moveIndex].name} before ${augs[insertionIndex].name}`);\\n            bestCost = newCost;\\n            augs.splice(insertionIndex, 0, augs.splice(moveIndex, 1)[0]); // Found a cheaper sort order - lock in the move!\\n            moved++;\\n        }\\n        i = i - batchLengh + 1; // Decrement i to past the batch so it doesn't try to change the batch's own order\\n        totalMoves += moved;\\n    }\\n    let finalCost = getTotalCost(augs);\\n    if (totalMoves > 0) log(ns, `Cost reduced by ${formatMoney(initialCost - finalCost)} (from ${formatMoney(initialCost)} to ${formatMoney(finalCost)}) by bubbling ${totalMoves} augs up above batches of dependencies.`);\\n    return augs;\\n}\\n\\n/** @param {NS} ns \\n * Display all information about all augmentations, including lists of available / desired / affordable augmentations in their optimal purchase order.  */\\nasync function manageUnownedAugmentations(ns, ignoredAugs, alsoPrintToTerminal) {\\n    const outputRows = [`Currently have ${ownedAugmentations.length}/30 Augmentations required for Daedalus.`];\\n    const unownedAugs = Object.values(augmentationData).filter(aug => (!aug.owned || aug.name == strNF) && !ignoredAugs.includes(aug.name));\\n    if (unownedAugs.length == 0) return log(ns, `All ${Object.keys(augmentationData).length} augmentations are either owned or ignored!`, alsoPrintToTerminal)\\n    let unavailableAugs = unownedAugs.filter(aug => aug.getFromJoined() == null);\\n    let firstListPrinted = unavailableAugs.length > 0;\\n    if (firstListPrinted) await manageFilteredSubset(ns, outputRows, 'Unavailable', unavailableAugs, true);\\n    // We use the return value to \\\"lock in\\\" the new sort order. Going forward, the routine will only re-print the aug list if the sort order changes (or forcePrint == true)\\n    let availableAugs = await manageFilteredSubset(ns, outputRows, 'Available', unownedAugs.filter(aug => aug.getFromJoined() != null), firstListPrinted ? undefined : true);\\n    if (availableAugs?.length > 0) {\\n        let augsWithRep = availableAugs.filter(aug => aug.canAfford() || (aug.canAffordWithDonation() && !options['disable-donations']));\\n        let desiredAugs = availableAugs.filter(aug => aug.desired);\\n        if (augsWithRep.length > desiredAugs.length) {\\n            augsWithRep = await manageFilteredSubset(ns, outputRows, 'Within Rep', augsWithRep)\\n            desiredAugs = await manageFilteredSubset(ns, outputRows, 'Desired', desiredAugs);\\n        } else {\\n            desiredAugs = await manageFilteredSubset(ns, outputRows, 'Desired', desiredAugs);\\n            augsWithRep = await manageFilteredSubset(ns, outputRows, 'Within Rep', augsWithRep);\\n        }\\n        await manageFilteredSubset(ns, outputRows, 'Desired Within Rep', augsWithRep.filter(aug => aug.desired), undefined, true);\\n    }\\n    // Print all rows of output that were prepped\\n    log(ns, outputRows.join(\\\"\\\\n  \\\"), alsoPrintToTerminal);\\n}\\n\\n/** @param {NS} ns \\n * Helper to generate outputs for different subsets of the augmentations, each in optimal sort order */\\nasync function manageFilteredSubset(ns, outputRows, subsetName, subset, printList = undefined /* undefined => automatically print if sort order changed */, purchaseable = false) {\\n    subset = subset.slice(); // Take a copy so we don't mess up the original array sent in.\\n    let subsetLength = subset.length;\\n    if (subsetLength == 0) {\\n        outputRows.push(`There are 0 ${subsetName}`);\\n        return subset;\\n    }\\n    // Remove augs that cannot be purchased because their prerequisites are not owned and have been filtered out\\n    do {\\n        subsetLength = subset.length\\n        for (const aug of subset.slice())\\n            if (aug.prereqs.length > 0 && aug.prereqs.some(prereq => !(ownedAugmentations.includes(prereq) || subset.some(a => a.name === prereq))))\\n                subset.splice(subset.indexOf(aug), 1);\\n    } while (subsetLength !== subset.length);\\n    // Sort the filtered subset into its optimal purchase order\\n    let subsetSorted = sortAugs(ns, subset.slice());\\n    let repCostByFaction = computeAugsRepReqDonationByFaction(ns, subsetSorted);\\n    // Compute the total rep cost for augmentations, including the cost of donating for access\\n    let totalRepCost = Object.values(repCostByFaction).reduce((t, r) => t + r, 0);\\n    let totalAugCost = getTotalCost(subsetSorted);\\n    if (printList === true || printList === undefined && !subset.every((v, i) => v == subsetSorted[i])) // If the purchase order is unchanged after filtering out augmentations, don't bother reprinting the full list\\n        outputRows.push(`${subset.length} ${subsetName} Augmentations in Optimized Purchase Order (*'s are desired augs and/or stats: ${options['stat-desired'].join(\\\", \\\")}):\\\\n  ${subsetSorted.join('\\\\n  ')}`);\\n    outputRows.push(`Total Cost of ${subset.length} ${subsetName}:`.padEnd(37) + ` ${formatMoney(totalRepCost + totalAugCost)}` +\\n        (totalRepCost == 0 ? '' : ` (Augs: ${formatMoney(totalAugCost)} + Rep: ${formatMoney(totalRepCost)})  Donate: ${JSON.stringify(repCostByFaction).replaceAll(\\\",\\\", \\\", \\\")}`));\\n    if (!purchaseable) return subsetSorted; // The remainder of the logic only applies if we are preparing a purchase order\\n\\n    // Hack: Set globals that will be purchased by another method as a final action in the main method\\n    purchaseableAugs = subsetSorted.slice();\\n    purchaseFactionDonations = repCostByFaction;\\n    // Ensure we can afford the purchase order\\n    if (totalAugCost + totalRepCost <= playerData.money && options['neuroflux-disabled']) return subsetSorted;\\n    // Remove the most expensive augmentation until we can afford all that remain\\n    const dropped = [];\\n    while (totalAugCost + totalRepCost > playerData.money) {\\n        const mostExpensiveAug = purchaseableAugs.slice().sort((a, b) => b.price - a.price)[0];\\n        let costBefore = `${formatMoney(totalRepCost + totalAugCost)} (Augs: ${formatMoney(totalAugCost)} + Rep: ${formatMoney(totalRepCost)})`;\\n        purchaseableAugs = sortAugs(ns, purchaseableAugs.filter(aug => aug !== mostExpensiveAug));\\n        purchaseFactionDonations = computeAugsRepReqDonationByFaction(ns, purchaseableAugs);\\n        totalRepCost = Object.values(purchaseFactionDonations).reduce((t, r) => t + r, 0);\\n        totalAugCost = getTotalCost(purchaseableAugs);\\n        let costAfter = `${formatMoney(totalRepCost + totalAugCost)} (Augs: ${formatMoney(totalAugCost)} + Rep: ${formatMoney(totalRepCost)})`;\\n        dropped.unshift({ aug: mostExpensiveAug, costBefore, costAfter });\\n        let dropLog = `Dropping aug from the purchase order: \\\\\\\"${mostExpensiveAug.name}\\\\\\\". New total cost: ${costAfter}`;\\n        log(ns, dropLog);\\n    }\\n    // Recursively call this method one time to display the reduced list of affordable purchases as a separate section\\n    manageFilteredSubset(ns, outputRows, 'Affordable', purchaseableAugs, purchaseableAugs.length < subset.length);\\n    // Let us know how far away we are from being able to get just one more aug:\\n    if (dropped.length > 0)\\n        outputRows.push(`Insufficient funds: had to drop ${dropped.length} augs. Next aug \\\\\\\"${dropped[0].aug.name}\\\\\\\" at: ${dropped[0].costBefore}`);\\n    // Maybe add a bunch of NeuroFlux levels to our purchase?\\n    if (!options['neuroflux-disabled']) {\\n        const augNf = augmentationData[strNF];\\n        // Arrange to purchase NF from the faction with the most reputation, to reduce the chance of having insufficient rep for higher levels TODO: Compute rep / faction donation requirements for these NF levels\\n        augNf.getFromJoined = function () { return this.joinedFactionsWithAug().sort((a, b) => b.reputation - a.reputation)[0]?.name };\\n        if (!augNf.canAfford() && !augNf.canAffordWithDonation()) {\\n            const getFrom = augNf.getFromJoined();\\n            outputRows.push(`Cannot purchase any ${strNF} because the next level requires ${formatNumberShort(augNf.reputation)} reputation, but ` +\\n                (!getFrom ? `it isn't being offered by any of our factions` : `the best faction (${getFrom}) has insufficient rep (${formatNumberShort(factionData[getFrom].reputation)}).`));\\n            const factionsWithAug = Object.values(factionData).filter(f => f.augmentations.includes(augNf.name)).sort((a, b) => b.favor - a.favor);\\n            const factionsWithAugAndInvite = factionsWithAug.filter(f => f.invited || f.joined).sort((a, b) => b.favor - a.favor);\\n            const factionWithMostFavor = factionsWithAugAndInvite[0] ?? factionsWithAug[0];\\n            if (getFrom != factionsWithAug[0].name && factionsWithAug[0] != factionsWithAugAndInvite[0])\\n                outputRows.push(`SUGGESTION: Earn an invitation to faction ${factionsWithAug[0].name} to make it easier to get rep for ${strNF} since it has the most favor (${factionsWithAug[0].favor}).`);\\n            else if (factionsWithAug[0].joined && !factionsWithAug[0].donationsUnlocked)\\n                outputRows.push(`SUGGESTION: Do some work for faction ${factionsWithAug[0].name} to qickly earn rep for ${strNF} since it has the most favor (${factionsWithAug[0].favor}).`);\\n            else if ((!getFrom || factionData[getFrom].favor < factionWithMostFavor.favor) && factionWithMostFavor.invited) {\\n                outputRows.push(`Attempting to join faction ${factionWithMostFavor.name} to make it easier to get rep for ${strNF} since it has the most favor (${factionWithMostFavor.favor}).`);\\n                options['force-join'].push(factionWithMostFavor.name);\\n                await joinFactions(ns);\\n                if (joinedFactions.includes(factionWithMostFavor.name) && factionWithMostFavor.donationsUnlocked)\\n                    augNf.getFromJoined = () => factionWithMostFavor.name;\\n            }\\n            if (!(joinedFactions.includes(factionWithMostFavor.name) && factionWithMostFavor.donationsUnlocked))\\n                return subsetSorted;\\n        }\\n        let nfPurchased = purchaseableAugs.filter(a => a.name === augNf.name).length;\\n        const augNfFaction = factionData[augNf.getFromJoined()];\\n        log(ns, `nfPurchased: ${nfPurchased}, augNfFaction: ${augNfFaction.name} (rep: ${augNfFaction.reputation}), augNf.price: ${augNf.price}, augNf.reputation: ${augNf.reputation}`);\\n        while (nfPurchased < 50) {\\n            const nextNfCost = augNf.price * (augCountMult ** purchaseableAugs.length) * (nfCountMult ** nfPurchased);\\n            const nextNfRep = augNf.reputation * (nfCountMult ** nfPurchased);\\n            let nfMsg = `Cost of NF ${nfPurchased + 1} is ${formatMoney(nextNfCost)} and will require ${formatNumberShort(nextNfRep)} reputation`\\n            if (totalAugCost + totalRepCost + nextNfCost > playerData.money) break;\\n            purchaseableAugs.push(augNf);\\n            totalAugCost += nextNfCost;\\n            if (nextNfRep > augNfFaction.reputation) {\\n                if (augNfFaction.donationsUnlocked) {\\n                    purchaseFactionDonations[augNfFaction.name] = Math.max(purchaseFactionDonations[augNfFaction.name] || 0, getReqDonationForRep(nextNfRep, augNfFaction));\\n                    totalRepCost = Object.values(purchaseFactionDonations).reduce((t, r) => t + r, 0);\\n                    nfMsg += `, which will require a donation of ${formatMoney(purchaseFactionDonations[augNfFaction.name])} to faction ${augNfFaction.name}`\\n                } else {\\n                    outputRows.push(nfMsg + `, but we only have ${formatNumberShort(augNfFaction.reputation)} reputation with faction ${augNfFaction.name}!`);\\n                    break;\\n                }\\n            } else\\n                nfMsg += ` (✓ have ${formatNumberShort(augNfFaction.reputation)} rep with faction ${augNfFaction.name})`\\n            log(ns, nfMsg);\\n            nfPurchased++;\\n        }\\n        log(ns, `Can afford to purchase ${nfPurchased} levels of ${strNF}. New total cost: ${formatMoney(totalRepCost + totalAugCost)}` +\\n            (totalRepCost == 0 ? '' : ` (Augs: ${formatMoney(totalAugCost)} + Rep: ${formatMoney(totalRepCost)})`));\\n        outputRows.push(`Total Cost of ${purchaseableAugs.length} (with +${nfPurchased} NF):`.padEnd(37) + ` ${formatMoney(totalRepCost + totalAugCost)}` +\\n            (totalRepCost == 0 ? '' : ` (Augs: ${formatMoney(totalAugCost)} + Rep: ${formatMoney(totalRepCost)})  Donate: ${JSON.stringify(repCostByFaction).replaceAll(\\\",\\\", \\\", \\\")}`));\\n    }\\n    return subsetSorted;\\n};\\n\\n/** @param {NS} ns \\n * Find out the optimal set of factions and rep-donations required to access them */\\nfunction computeAugsRepReqDonationByFaction(ns, augmentations) {\\n    const repCostByFaction = {};\\n    for (const aug of augmentations) {\\n        let faction = factionData[aug.getFromJoined() || aug.getFromAny];\\n        if (!faction.donationsUnlocked) continue; // getFromJoined() already ensures that we don't resort to faction requiring donations unless we must (and can)\\n        let reqDonation = getReqDonationForAug(aug, faction);\\n        // See if any other faction we're already planning to donate to offers the same augmentation, so we can avoid donating to multiple factions\\n        // Use the alternative faction if we're already planning on donating this much to them, or if they're closer to the donation requirement than this faction currently is\\n        let fDonationsIndex = Object.keys(repCostByFaction).findIndex(f => f == faction.name);\\n        let alternativeFaction = Object.keys(repCostByFaction).find((f, i) => f != faction.name && factionData[f].augmentations.includes(aug.name) && (\\n            (repCostByFaction[f] >= reqDonation && (fDonationsIndex == -1 || i < fDonationsIndex)) || // We're donating the same or more to the other faction, and were planning on donating to it before this one\\n            ((getReqDonationForAug(aug, f) - repCostByFaction[f]) < (reqDonation - (repCostByFaction[faction.name] || 0))))); // The amount we've committed to donating the other faction is closer to this requirement\\n        if (alternativeFaction) {\\n            log(ns, `Using alternative faction \\\"${alternativeFaction}\\\" for \\\"${aug.name}\\\" rather than earlier faction \\\"${faction.name}\\\"`)\\n            aug.getFromJoined = () => alternativeFaction;\\n            reqDonation = getReqDonationForAug(aug, alternativeFaction);\\n            faction = factionData[alternativeFaction];\\n        }\\n        if (reqDonation > 0)\\n            repCostByFaction[faction.name] = Math.max(repCostByFaction[faction.name] || 0, reqDonation);\\n    }\\n    return repCostByFaction;\\n}\\n\\n/** @param {NS} ns \\n * Donate any required rep and purchase the desired augmentations */\\nasync function purchaseDesiredAugs(ns, verbose) {\\n    let totalRepCost = Object.values(purchaseFactionDonations).reduce((t, r) => t + r, 0);\\n    let totalAugCost = getTotalCost(purchaseableAugs);\\n    let money = (await getNsDataThroughFile(ns, 'ns.getPlayer()', '/Temp/player-info.txt')).money;\\n    if (totalAugCost + totalRepCost > money)\\n        return log(ns, `ERROR: Purchase order total cost (${formatMoney(totalRepCost + totalAugCost)}` + (totalRepCost == 0 ? '' : ` (Augs: ${formatMoney(totalAugCost)} + Rep: ${formatMoney(totalRepCost)}))`) +\\n            ` is more than current player money (${formatMoney(money)}).`, verbose, 'error')\\n    // Donate to factions if necessary (using a ram-dodging script of course)\\n    if (Object.keys(purchaseFactionDonations).length > 0 && Object.values(purchaseFactionDonations).some(v => v > 0)) {\\n        if (await getNsDataThroughFile(ns, JSON.stringify(Object.keys(purchaseFactionDonations).map(f => ({ faction: f, repDonation: purchaseFactionDonations[f] }))) +\\n            '.reduce((success, o) => success && ns.donateToFaction(o.faction, o.repDonation), true)', '/Temp/facman-donate.txt'))\\n            log(ns, `SUCCESS: Donated to ${Object.keys(purchaseFactionDonations).length} factions to gain access to desired augmentations.`, verbose, 'success')\\n        else\\n            log(ns, `ERROR: One or more attempts to donate to factions for reputation failed. Go investigate!`, verbose, 'error');\\n    }\\n    // Purchase desired augs (using a ram-dodging script of course)\\n    if (purchaseableAugs.length == 0)\\n        log(ns, `INFO: Cannot afford to buy any augmentations at this time.`, verbose)\\n    else if (await getNsDataThroughFile(ns, JSON.stringify(purchaseableAugs.map(aug => ({ faction: aug.getFromJoined(), augmentation: aug.name }))) +\\n        '.reduce((success, o) => ns.purchaseAugmentation(o.faction, o.augmentation) && success, true)', '/Temp/facman-purchase-augs.txt'))\\n        log(ns, `SUCCESS: Purchased ${purchaseableAugs.length} desired augmentations in optimal order!`, verbose, 'success')\\n    else\\n        log(ns, `ERROR: Failed to purchase one or more augmentations.`, verbose, 'error');\\n}\\n\\n/** @param {NS} ns **/\\nfunction displayJoinedFactionSummary(ns, alsoPrintToTerminal) {\\n    let joinedFactions = Object.values(factionData).filter(f => f.joined);\\n    let summary = `${joinedFactions.length} Joined Factions:`\\n    let noaugs = joinedFactions.filter(f => f.unownedAugmentations().length == 0)\\n    if (noaugs.length > 0)\\n        summary += `\\\\n  ${noaugs.length} joined factions have no unowned augs remaining: \\\"${noaugs.map(f => f.name).join('\\\", \\\"')}\\\"`;\\n    for (const faction of joinedFactions.filter(f => !noaugs.includes(f)))\\n        summary += `\\\\n  ${faction.name}: ${faction.unownedAugmentations().length} augs remaining (${faction.unownedAugmentations().join(\\\", \\\")})`;\\n    log(ns, summary, alsoPrintToTerminal);\\n}\\n\\n/** @param {NS} ns **/\\nfunction displayFactionSummary(ns, alsoPrintToTerminal, sortBy, unique, overrideFinishedFactions, excludedStats) {\\n    let noAugs = Object.values(factionData).filter(f => f.unownedAugmentations().length == 0);\\n    if (noAugs.length > 0)\\n        log(ns, `${noAugs.length} factions have no augmentations to purchase (excluding NF): ${JSON.stringify(noAugs.map(a => a.name))}`, alsoPrintToTerminal);\\n    let summaryFactions = Object.values(factionData).filter(f => f.unownedAugmentations().length > 0 && !overrideFinishedFactions.includes(f.name));\\n    if (summaryFactions.length == 0) return;\\n    // Apply any override faction options\\n    joinedFactions.push(...overrideFinishedFactions.filter(f => !joinedFactions.includes(f)));\\n    for (const faction of overrideFinishedFactions)\\n        ownedAugmentations.push(...factionData[faction].unownedAugmentations());\\n    // Grab disctinct augmentations stats \\n    const relevantAugStats = allAugStats.filter(s => !excludedStats.find(excl => s.includes(excl)) &&\\n        undefined !== summaryFactions.find(f => f.unownedAugmentations().find(aug => 1 != (augmentationData[aug].stats[s] || 1))));\\n    let summary = `${summaryFactions.length} factions with augmentations (sorted by total ${sortBy}):`;\\n    // Creates the table header row\\n    let getHeaderRow = countName => `\\\\n   Faction Name ${countName.padStart(9)} / Total Augs ` + relevantAugStats.map(key => shorten(key).padStart(4)).join(' ');\\n    // Creates the string to display a single faction's stats in the table\\n    let getFactionSummary = faction => {\\n        const totalMults = faction.totalUnownedMults();\\n        return `\\\\n ${faction.joined ? '✓' : faction.invited ? '✉' : '✗'} ${faction.name} `.padEnd(32) + // TODO: Display faction rep / max aug rep\\n            `${String(faction.unownedAugmentations().length).padStart(2)} / ${String(faction.augmentations.length).padEnd(2)} ` +\\n            relevantAugStats.map(key => (totalMults[key] === undefined ? '-' : totalMults[key].toPrecision(3)).padStart(Math.max(shorten(key).length, 4))).join(' ');\\n    };\\n    // Helper to sort the factions in order of most-contributing to the desired multiplier\\n    let sortFunction = (a, b) => {\\n        let aMultiContrib = a.totalUnownedMults()[sortBy] || 1, bMultiContrib = b.totalUnownedMults()[sortBy] || 1;\\n        let sort1 = bMultiContrib - aMultiContrib; // Sort by the total amount of desired multi provided by this faction\\n        let sort2 = (a.joined ? 0 : 1) - (b.joined ? 0 : 1); // If tied, sort by which faction we've joined\\n        if (unique && bMultiContrib > 1 && aMultiContrib > 1 && sort2 != 0) return sort2; // When in \\\"unique\\\" mode it's important to first list contributing factions we've already joined\\n        if (sort1 != 0) return sort1;\\n        if (sort2 != 0) return sort2;\\n        let sort3 = b.reputation - a.reputation; // If tied, sort by which faction we have the most rep with\\n        if (sort3 != 0) return sort3;\\n        let sort4 = a.mostExpensiveAugCost().length - b.mostExpensiveAugCost().length; // If tied, \\\"soonest to unlock\\\", estimated by their most expensive aug cost\\n        if (sort4 != 0) return sort4;\\n        return (a.name).localeCompare(b.name) // If still tied, sort by naeme\\n    };\\n    // Helper to insert a table separator between factions that do and don't contribute to the specified stat\\n    let moreContributors = true;\\n    let getSeparator = faction => (moreContributors && !(moreContributors = faction.totalUnownedMults()[sortBy] !== undefined)) ?\\n        `\\\\n---------------------------  (Factions below offer no augs that contribute to '${sortBy}')` : '';\\n    summary += getHeaderRow(unique ? 'New' : 'Unowned');\\n    if (!unique) // Each faction is summarized based on all the unowned augs it has, regardless of whether a faction higher up the list has the same augs\\n        for (const faction of summaryFactions.sort(sortFunction))\\n            summary += getSeparator(faction) + getFactionSummary(faction);\\n    else { // Each faction's stats computed as though the faction sorted above it was joined and bought out first, so only showing new augs\\n        const actualOwnedAugs = ownedAugmentations;\\n        const actualUnjoinedFactions = summaryFactions;\\n        do {\\n            summaryFactions.sort(sortFunction);\\n            const faction = summaryFactions.shift();\\n            summary += getSeparator(faction) + getFactionSummary(faction);\\n            joinedFactions.push(faction.name);  // Simulate that we've now joined and bought out all this factions augs\\n            ownedAugmentations.push(...faction.unownedAugmentations())\\n        } while (summaryFactions.length > 0)\\n        ownedAugmentations = actualOwnedAugs; // Restore the original lists once the simulation is complete\\n        summaryFactions = actualUnjoinedFactions;\\n    }\\n    log(ns, summary, alsoPrintToTerminal);\\n}\",\"filename\":\"faction-manager.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"helpers.js\",\"url\":\"blob:file:///c2215f83-afdf-4cc2-b7fb-85786ad0d251\",\"moduleSequenceNumber\":125},{\"filename\":\"faction-manager.js\",\"url\":\"blob:file:///a8238b8b-0666-4a7b-9905-ac965a5fe379\",\"moduleSequenceNumber\":272}],\"dependents\":[],\"ramUsage\":2.8,\"server\":\"home\",\"moduleSequenceNumber\":272,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getFavorToDonate\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"run\",\"cost\":1},{\"type\":\"fn\",\"name\":\"isRunning\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { formatMoney, formatDuration, formatNumberShort, disableLogs } from './helpers.js'\\n\\nconst argsSchema = [\\n    ['trips-per-cycle', 1000],\\n    ['money-threshold', 1000000000000]\\n];\\n\\nexport function autocomplete(data, args) {\\n    data.flags(argsSchema);\\n    return [];\\n}\\n\\n/** @param {NS} ns \\n * Script contributed by https://github.com/ShawnPatton\\n * Concept: A small amount of intelligence is granted when you (successfully) travel to a new city. This script converts money into intelligence exp! **/\\nexport async function main(ns) {\\n    disableLogs(ns, [\\\"travelToCity\\\", \\\"sleep\\\"]);\\n    ns.tail();\\n    let options = ns.flags(argsSchema);\\n    let tripsPerCycle = options['trips-per-cycle'];\\n    let moneyThreshold = options['money-threshold'];\\n    ns.print(`trips-per-cycle: ` + tripsPerCycle);\\n    ns.print(`money-threshold: ` + formatMoney(moneyThreshold));\\n    let justStarted = true;\\n    let previousInt = ns.getPlayer().intelligence;\\n    let currentInt = previousInt;\\n    let previousLevelTime = Date.now();\\n    let levelupTime;\\n    let cycles = 0;\\n    let duration = 0;\\n    let tripsPerLevel = 0;\\n    let tripsPerMs = 0;\\n    ns.print(`Starting Script at Int ` + currentInt);\\n    while (true) {\\n        while (ns.getPlayer().money > moneyThreshold) {\\n            for (let i = 0; i < tripsPerCycle; i++) {\\n                ns.travelToCity(\\\"Aevum\\\");\\n                ns.travelToCity(\\\"Sector-12\\\");\\n            }\\n            await ns.sleep(1);\\n            cycles++;\\n            if (previousInt != ns.getPlayer().intelligence) {\\n                currentInt = ns.getPlayer().intelligence;\\n                levelupTime = Date.now();\\n                duration = levelupTime - previousLevelTime;\\n                tripsPerLevel = cycles * tripsPerCycle * 2;\\n                tripsPerMs = Math.floor(tripsPerLevel / duration);\\n                ns.print(`Level Up: Int ` + currentInt + (justStarted ? ` Partial` : ` Full`) + ` Level in `\\n                    + formatDuration(duration) + ` & ` + formatNumberShort(tripsPerLevel) + ` Travels`);\\n                ns.print(`Approximately ` + tripsPerMs + ` Trips/Millisecond`);\\n                previousLevelTime = levelupTime;\\n                previousInt = currentInt;\\n                justStarted = false;\\n                cycles = 0;\\n            }\\n        }\\n        await ns.sleep(10000);\\n        ns.print(`Below money threshold, waiting 10 seconds`);\\n    }\\n}\",\"filename\":\"farm-intelligence.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4.1,\"server\":\"home\",\"moduleSequenceNumber\":121,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"travelToCity\",\"cost\":2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { formatMoney, formatNumberShort, getNsDataThroughFile, getActiveSourceFiles, runCommand, tryGetBitNodeMultipliers } from './helpers.js'\\n\\n// Global constants\\nconst updateInterval = 200;\\nconst maxSpendPerTickTransientEquipment = 0.002;\\nconst maxSpendPerTickPermanentEquipment = 0.2; // Spend up to this percent of non-reserved cash on permanent member upgrades\\nconst wantedPenaltyThreshold = 0.0001; // Don't let the wanted penalty get worse than this\\n\\n// Territory-related variables\\nconst gangsByPower = [\\\"Speakers for the Dead\\\", \\\"The Dark Army\\\", \\\"The Syndicate\\\", \\\"Slum Snakes\\\", \\\"NiteSec\\\", \\\"The Black Hand\\\", /* \\\"NiteSec\\\" Been there, not fun. */]\\nconst territoryEngageThreshold = 0.80; // Minimum average win chance (of gangs with territory) before we engage other clans\\nlet territoryTickDetected = false;\\nlet territoryTickTime = 20000; // Est. milliseconds until territory *ticks*. Can vary if processing offline time\\nlet territoryNextTick = null; // The next time territory will tick\\nlet isReadyForNextTerritoryTick = false;\\nlet warfareFinished = false;\\nlet lastTerritoryPower = 0;\\nlet lastOtherGangInfo = null;\\n\\n// Crime activity-related variables TODO all tasks list to evaluate\\nconst crimes = [\\\"Mug People\\\", \\\"Deal Drugs\\\", \\\"Strongarm Civilians\\\", \\\"Run a Con\\\", \\\"Armed Robbery\\\", \\\"Traffick Illegal Arms\\\", \\\"Threaten & Blackmail\\\", \\\"Human Trafficking\\\", \\\"Terrorism\\\",\\n    \\\"Ransomware\\\", \\\"Phishing\\\", \\\"Identity Theft\\\", \\\"DDoS Attacks\\\", \\\"Plant Virus\\\", \\\"Fraud & Counterfeiting\\\", \\\"Money Laundering\\\", \\\"Cyberterrorism\\\"];\\nlet pctTraining = 0.10;\\nlet multGangSoftcap;\\nlet allTaskNames;\\nlet allTaskStats;\\nlet assignedTasks = {}; // Each member will independently attempt to scale up the crime they perform until they are ineffective or we start generating wanted levels\\nlet lastMemberReset = {}; // Tracks when each member last ascended\\n\\n// Global state\\nlet ownedSourceFiles;\\nlet myGangFaction = \\\"\\\";\\nlet isHackGang = false;\\nlet requiredRep = 0;\\nlet myGangMembers = [];\\nlet equipments = [];\\nlet importantStats = [];\\n\\nlet options;\\nconst argsSchema = [\\n    ['training-percentage', 0.10], // Spend this percent of time training gang members versus doing crime\\n    ['no-training', false], // Don't train unless all other tasks generate no gains\\n    ['no-auto-ascending', false], // Don't ascend members\\n    ['ascend-multi-threshold', 1.1], // Ascend member #12 if a primary stat multi would increase by more than this amount\\n    ['ascend-multi-threshold-spacing', 0], // Members will space their acention multis by this amount to ensure they are ascending at different rates \\n    // Note: given the above two defaults, members would ascend at multis [1.6, 1.55, 1.50, ..., 1.1, 1.05] once you have 12 members.\\n    ['min-training-ticks', 20], // Require this many ticks of training after ascending or recruiting\\n];\\n\\nexport function autocomplete(data, _) {\\n    data.flags(argsSchema);\\n    return [];\\n}\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    ownedSourceFiles = await getActiveSourceFiles(ns);\\n    const sf2Level = ownedSourceFiles[2] || 0;\\n    if (sf2Level == 0)\\n        return log(ns, \\\"ERROR: You have no yet unlocked gangs. Script should not be run...\\\");\\n\\n    await initialize(ns);\\n    log(ns, \\\"Starting main loop...\\\");\\n    while (true) {\\n        try { await mainLoop(ns); }\\n        catch (err) { log(ns, `ERROR: Caught an unhandled error in the main loop: ${String(err)}`, 'error', true); }\\n        await ns.sleep(updateInterval);\\n    }\\n}\\n\\n/** @param {NS} ns \\n * One-time setup actions. **/\\nasync function initialize(ns) {\\n    ns.disableLog('ALL');\\n    options = ns.flags(argsSchema);\\n    pctTraining = options['no-training'] ? 0 : options['training-percentage'];\\n\\n    let loggedWaiting = false;\\n    while (!(await getNsDataThroughFile(ns, 'ns.gang.inGang()', '/Temp/player-gang-joined.txt'))) {\\n        if (!loggedWaiting) {\\n            log(ns, `Waiting to be in a gang. Will create the highest faction gang as soon as it is available...`);\\n            loggedWaiting = true;\\n        }\\n        await runCommand(ns, `${JSON.stringify(gangsByPower)}.forEach(g => ns.gang.createGang(g))`, '/Temp/gang-createGang.js');\\n        await ns.sleep(1000); // Wait for our human to join a gang\\n    }\\n    log(ns, \\\"Collecting gang information...\\\");\\n    const myGangInfo = ns.gang.getGangInformation(); //await getNsDataThroughFile(ns, 'ns.gang.getGangInformation()', '/Temp/gang-info.txt');\\n    myGangFaction = myGangInfo.faction;\\n    if (loggedWaiting) log(ns, `SUCCESS: Created gang ${myGangFaction}`, 'success', true);\\n    isHackGang = myGangInfo.isHacking;\\n    importantStats = isHackGang ? [\\\"hack\\\"] : [\\\"str\\\", \\\"def\\\", \\\"dex\\\", \\\"agi\\\"];\\n    lastTerritoryPower = myGangInfo.power;\\n    territoryNextTick = Date.now() + territoryTickTime; // Expect to miss be \\\"caught unaware\\\" by the first territory tick\\n    territoryTickDetected = isReadyForNextTerritoryTick = warfareFinished = false;\\n    lastOtherGangInfo = null;\\n\\n    // If possible, determine how much rep we would need to get the most expensive unowned augmentation\\n    const sf4Level = ownedSourceFiles[4] || 0;\\n    requiredRep = -1;\\n    if (sf4Level == 0)\\n        log(ns, `INFO: SF4 required to get gang augmentation info. Defaulting to assuming ~2.5 million rep is desired.`);\\n    else {\\n        try {\\n            if (sf4Level < 3)\\n                log(ns, `WARNING: This script makes heavy use of singularity functions, which are quite expensive before you have SF4.3. ` +\\n                    `Unless you have a lot of free RAM for temporary scripts, you may get runtime errors.`);\\n            const augmentationNames = await getNsDataThroughFile(ns, `ns.getAugmentationsFromFaction('${myGangFaction}')`, '/Temp/gang-augs.txt');\\n            const ownedAugmentations = await getNsDataThroughFile(ns, `ns.getOwnedAugmentations(true)`, '/Temp/player-augs-purchased.txt');\\n            const dictAugRepReqs = await getDict(ns, augmentationNames, 'getAugmentationRepReq', '/Temp/aug-repreqs.txt');\\n            // Due to a bug, gangs appear to provide \\\"The Red Pill\\\" even when it's unavailable (outside of BN2), so ignore this one.\\n            requiredRep = augmentationNames.filter(aug => !ownedAugmentations.includes(aug) && aug != \\\"The Red Pill\\\").reduce((max, aug) => Math.max(max, dictAugRepReqs[aug]), -1);\\n            log(ns, `Highest augmentation reputation cost is ${formatNumberShort(requiredRep)}`);\\n        } catch {\\n            log(ns, `WARNING: Failed to get augmentation info despite having SF4.${sf4Level}. This may be due to you having insufficient RAM to launch the temporary scripts. ` +\\n                `Proceeding with the default assumption that ~2.5 million rep is desired.`);\\n        }\\n    }\\n    if (requiredRep == -1)\\n        requiredRep = 2.5e6\\n\\n    // Initialize equipment information\\n    const equipmentNames = await getNsDataThroughFile(ns, 'ns.gang.getEquipmentNames()', '/Temp/gang-equipment-names.txt');\\n    const dictEquipmentTypes = await getGangInfoDict(ns, equipmentNames, 'getEquipmentType');\\n    const dictEquipmentCosts = await getGangInfoDict(ns, equipmentNames, 'getEquipmentCost');\\n    const dictEquipmentStats = await getGangInfoDict(ns, equipmentNames, 'getEquipmentStats');\\n    equipments = equipmentNames.map((equipmentName) => ({\\n        name: equipmentName,\\n        type: dictEquipmentTypes[equipmentName],\\n        cost: dictEquipmentCosts[equipmentName],\\n        stats: dictEquipmentStats[equipmentName],\\n    })).sort((a, b) => a.cost - b.cost);\\n    //log(ns, JSON.stringify(equipments));\\n    // Initialize information about gang members and crimes\\n    allTaskNames = await getNsDataThroughFile(ns, 'ns.gang.getTaskNames()', '/Temp/gang-task-names.txt')\\n    allTaskStats = await getGangInfoDict(ns, allTaskNames, 'getTaskStats');\\n    multGangSoftcap = (await tryGetBitNodeMultipliers(ns))?.GangSoftcap || 1;\\n    myGangMembers = await getNsDataThroughFile(ns, 'ns.gang.getMemberNames()', '/Temp/gang-member-names.txt');\\n    const dictMembers = await getGangInfoDict(ns, myGangMembers, 'getMemberInformation');\\n    for (const member of Object.values(dictMembers)) // Initialize the current activity of each member\\n        assignedTasks[member.name] = (member.task && member.task !== \\\"Unassigned\\\") ? member.task : (\\\"Train \\\" + (isHackGang ? \\\"Hacking\\\" : \\\"Combat\\\"));\\n    while (myGangMembers.length < 3) await doRecruitMember(ns); // We should be able to recruit our first three members immediately (for free)\\n    await optimizeGangCrime(ns, myGangInfo);\\n}\\n\\n/** @param {NS} ns \\n * Executed every `interval` **/\\nasync function mainLoop(ns) {\\n    // Update gang information (specifically monitoring gang power to see when territory ticks)\\n    const myGangInfo = ns.gang.getGangInformation(); //await getNsDataThroughFile(ns, 'ns.gang.getGangInformation()', '/Temp/gang-info.txt');\\n    // If territory is about to tick, quick - set everyone to do \\\"territory warfare\\\"!\\n    if (!isReadyForNextTerritoryTick && territoryTickDetected && (Date.now() + updateInterval >= territoryNextTick)) {\\n        isReadyForNextTerritoryTick = true;\\n        await updateMemberActivities(ns, null, \\\"Territory Warfare\\\");\\n    } else if (!territoryTickDetected) { // Detect the first territory tick by watching for other gang's territory power to update.\\n        const otherGangInfo = await getNsDataThroughFile(ns, 'ns.gang.getOtherGangInformation()', '/Temp/gang-other-gang-info.txt'); // Returns dict of { [gangName]: { \\\"power\\\": Number, \\\"territory\\\": Number } }\\n        if (lastOtherGangInfo != null && Object.keys(otherGangInfo).some(g => otherGangInfo[g].power != lastOtherGangInfo[g].power)) {\\n            territoryNextTick = Date.now() - updateInterval;\\n            territoryTickDetected = true;\\n        }\\n        lastOtherGangInfo = otherGangInfo;\\n    }\\n    // Detect if territory power has been updated in the last tick (or if we have no power, assume it has ticked and we just haven't generated power yet)\\n    if ((isReadyForNextTerritoryTick && myGangInfo.power != lastTerritoryPower) || (Date.now() > territoryNextTick + 5 * updateInterval)) {\\n        await onTerritoryTick(ns, myGangInfo); //Do most things only once per territory tick\\n        lastTerritoryPower = myGangInfo.power;\\n    }\\n}\\n\\n/** @param {NS} ns \\n * Do some things only once per territory tick **/\\nasync function onTerritoryTick(ns, myGangInfo) {\\n    territoryNextTick = Date.now() - updateInterval + territoryTickTime; // Reset the time the next tick will occur\\n    if (lastTerritoryPower != myGangInfo.power)\\n        log(ns, `Territory power updated from ${formatNumberShort(lastTerritoryPower)} to ${formatNumberShort(myGangInfo.power)}.`)\\n    if (!isReadyForNextTerritoryTick) log(ns, `WARNING: Territory tick happend before we were ready!`, 'warning');\\n    if (!warfareFinished) // Once we hit 100% territory, there's no need to keep swapping members to warfare\\n        isReadyForNextTerritoryTick = false;\\n\\n    // Update gang members in case someone died in a clash\\n    myGangMembers = await getNsDataThroughFile(ns, 'ns.gang.getMemberNames()', '/Temp/gang-member-names.txt');\\n    const nextMemberCost = Math.pow(5, myGangMembers.length - (3 /*numFreeMembers*/ - 1));\\n    if (myGangMembers.length < 12 /* Game Max */ && myGangInfo.respect * 0.75 > nextMemberCost) // Don't spend more than 75% of our respect on new members.\\n        await doRecruitMember(ns) // Recruit new members if available\\n    const dictMembers = await getGangInfoDict(ns, myGangMembers, 'getMemberInformation');\\n    if (!options['no-auto-ascending']) await tryAscendMembers(ns); // Ascend members if we deem it a good time\\n    await tryUpgradeMembers(ns, dictMembers); // Upgrade members if possible\\n    await enableOrDisableWarfare(ns, myGangInfo); // Update whether we should be participating in gang warfare\\n    // There's a chance we do training instead of work for this next tick. If training, we primarily train our main stat, with a small chance to train less-important stats\\n    const task = Math.random() >= pctTraining ? null : \\\"Train \\\" + (Math.random() < 0.1 ? \\\"Charisma\\\" : Math.random() < (isHackGang ? 0.1 : 0.9) ? \\\"Combat\\\" : \\\"Hacking\\\")\\n    await updateMemberActivities(ns, dictMembers, task); // Set everyone working on the next activity\\n    if (!task) await optimizeGangCrime(ns, await waitForGameUpdate(ns, myGangInfo));  // Finally, see if we can improve rep gain rates by micro-optimizing individual member crimes\\n}\\n\\n/** @param {NS} ns \\n * Consolidated logic for telling members what to do **/\\nasync function updateMemberActivities(ns, dictMemberInfo = null, forceTask = null) {\\n    const dictMembers = dictMemberInfo || (await getGangInfoDict(ns, myGangMembers, 'getMemberInformation'));\\n    const workOrders = [];\\n    for (const member of Object.values(dictMembers)) { // Set the desired activity of each member\\n        let task = forceTask ? forceTask : assignedTasks[member.name];\\n        if (member.task != task) workOrders.push({ name: member.name, task }); // Only bother with the API call if this isn't their current task\\n    }\\n    if (workOrders.length == 0) return;\\n    // Set the activities in bulk using a ram-dodging script\\n    if (await getNsDataThroughFile(ns, `${JSON.stringify(workOrders)}.reduce((success, m) => success && ns.gang.setMemberTask(m.name, m.task), true)`, '/Temp/gang-set-member-tasks.txt'))\\n        log(ns, `INFO: Assigned ${workOrders.length} gang member tasks! (${workOrders.map(o => o.task).filter((v, i, self) => self.indexOf(v) === i).join(\\\", \\\")})`)\\n    else\\n        log(ns, `ERROR: Failed to set member task of one or more members: ` + JSON.stringify(workOrders), 'error');\\n}\\n\\n/** @param {NS} ns \\n * Logic to assign tasks that maximize rep gain rate without wanted gain getting out of control **/\\nasync function optimizeGangCrime(ns, myGangInfo) {\\n    const dictMembers = await getGangInfoDict(ns, myGangMembers, 'getMemberInformation');\\n    // Tolerate our wanted level increasing, as long as reputation increases several orders of magnitude faster and we do not currently have a penalty more than -0.01%\\n    let currentWantedPenalty = getWantedPenalty(myGangInfo) - 1;\\n    // Note, until we have ~200 respect, the best way to recover from wanted penalty is to focus on gaining respect, rather than doing vigilante work.\\n    let wantedGainTolerance = currentWantedPenalty < -1.1 * wantedPenaltyThreshold && myGangInfo.wantedLevel >= (1.1 + myGangInfo.respect / 1000) &&\\n        myGangInfo.respect > 200 ? -0.01 * myGangInfo.wantedLevel /* Recover from wanted penalty */ :\\n        currentWantedPenalty < -0.9 * wantedPenaltyThreshold && myGangInfo.wantedLevel >= (1.1 + myGangInfo.respect / 10000) ? 0 /* Sustain */ :\\n            Math.max(myGangInfo.respectGainRate / 1000, myGangInfo.wantedLevel / 10) /* Allow wanted to increase at a manageable rate */;\\n    const playerData = await getNsDataThroughFile(ns, 'ns.getPlayer()', '/Temp/player-info.txt');\\n    // Find out how much reputation we need, without SF4, we estimate gang faction rep based on current gang rep\\n    let factionRep = -1;\\n    if (ownedSourceFiles[4] > 0) {\\n        try { factionRep = await getNsDataThroughFile(ns, `ns.getFactionRep('${myGangFaction}')`, `/Temp/gang-faction-rep.txt`); }\\n        catch { log(ns, 'INFO: Error suppressed. Falling back to estimating current gang faction rep.'); }\\n    }\\n    if (factionRep == -1) // Estimate current gang rep based on respect. Game gives 1/75 rep / respect. This is an underestimate, because it doesn't take into account spent/lost respect on ascend/recruit/death. \\n        factionRep = myGangInfo.respect / 75;\\n    const optStat = factionRep > requiredRep ? \\\"money\\\" : (playerData.money > 1E11 || myGangInfo.respect) < 9000 ? \\\"respect\\\" : \\\"both money and respect\\\"; // Change priority based on achieved rep/money\\n    // Pre-compute how every gang member will perform at every task\\n    const memberTaskRates = Object.fromEntries(Object.values(dictMembers).map(m => [m.name, allTaskNames.map(taskName => ({\\n        name: taskName,\\n        respect: computeRepGains(myGangInfo, taskName, m),\\n        money: calculateMoneyGains(myGangInfo, taskName, m),\\n        wanted: computeWantedGains(myGangInfo, taskName, m),\\n    })).filter(task => task.wanted <= 0 || task.money > 0 || task.respect > 0)])); // Completely remove tasks that offer no gains, but would generate wanted levels\\n    // Sort tasks by best gain rate\\n    if (optStat == \\\"both money and respect\\\") {\\n        Object.values(memberTaskRates).flat().forEach(v => v[optStat] = v.money / 1000 + v.respect); // Hack to support a \\\"optimized total\\\" stat when trying to balance both money and wanted\\n        Object.values(memberTaskRates).forEach((tasks, idx) => tasks.sort((a, b) => idx % 2 == 0 ? b.respect - a.respect : b.money - a.money)); // Hack: Even members prioritize respect, odd money\\n    } else {\\n        Object.values(memberTaskRates).forEach(tasks => tasks.sort((a, b) => b[optStat] - a[optStat]));\\n    }\\n    //ns.print(memberTaskRates);\\n\\n    // Run \\\"the algorithm\\\"\\n    const start = Date.now(); // Time the algorithms\\n    let bestTaskAssignments = null, bestWanted = 0;\\n    let bestTotalGain = myGangInfo.wantedLevelGainRate > wantedGainTolerance ? 0 : // Forget our past achievements, we're gaining wanted levels too fast right now\\n        optStat == \\\"respect\\\" ? myGangInfo.respectGainRate : myGangInfo.moneyGainRate; // Must do better than the current gain rate if it's within our wanted threshold\\n    for (let shuffle = 0; shuffle < 1000; shuffle++) { // We can discover more optimal results by greedy-optimizing gang members in a different order. Try a few.\\n        let proposedTasks = {}, totalWanted = 0, totalGain = 0;\\n        shuffleArray(myGangMembers.slice()).forEach((member, index) => {\\n            const taskRates = memberTaskRates[member];\\n            // \\\"Greedy\\\" optimize one member at a time, but as we near the end of the list, we can no longer expect future members to make for wanted increases\\n            const sustainableTasks = (index < myGangMembers.length - 2) ? taskRates : taskRates.filter(c => (totalWanted + c.wanted) <= wantedGainTolerance);\\n            // Find the crime with the best gain (If we can't generate value for any tasks, then we should only be training)\\n            const bestTask = taskRates[0][optStat] == 0 || (Date.now() - (lastMemberReset[member] || 0) < options['min-training-ticks'] * territoryTickTime) ?\\n                taskRates.find(t => t.name === (\\\"Train \\\" + (isHackGang ? \\\"Hacking\\\" : \\\"Combat\\\"))) :\\n                (totalWanted > wantedGainTolerance || sustainableTasks.length == 0) ? taskRates.find(t => t.name === \\\"Vigilante Justice\\\") : sustainableTasks[0];\\n            [proposedTasks[member], totalWanted, totalGain] = [bestTask, totalWanted + bestTask.wanted, totalGain + bestTask[optStat]];\\n        });\\n        // Following the above attempted optimization, if we're above our wanted gain threshold, downgrade the task of the greatest generators of wanted until within our limit\\n        let infiniteLoop = 9999;\\n        while (totalWanted > wantedGainTolerance && Object.values(proposedTasks).some(t => t.name !== \\\"Vigilante Justice\\\")) {\\n            const mostWanted = Object.keys(proposedTasks).reduce((t, c) => proposedTasks[c].name !== \\\"Vigilante Justice\\\" && (t == null || proposedTasks[t].wanted < proposedTasks[c].wanted) ? c : t, null);\\n            const nextBestTask = memberTaskRates[mostWanted].filter(c => c.wanted < proposedTasks[mostWanted].wanted)[0] ?? memberTaskRates[mostWanted].find(t => t.name === \\\"Vigilante Justice\\\");\\n            [proposedTasks[mostWanted], totalWanted, totalGain] = [nextBestTask, totalWanted + nextBestTask.wanted - proposedTasks[mostWanted].wanted, totalGain + nextBestTask[optStat] - proposedTasks[mostWanted][optStat]];\\n            if (infiniteLoop-- <= 0) throw \\\"Infinite Loop!\\\";\\n        }\\n        //log(ns, `Optimal task assignments:. Wanted: ${totalWanted.toPrecision(3)}, Gain: ${formatNumberShort(totalGain)}`);\\n        // Save the new new task assignments only if it's the best gain result we've seen for the value we're trying to optimize, or the closest we've come to meeting our wanted tolerance\\n        if (totalWanted <= wantedGainTolerance && totalGain > bestTotalGain || totalWanted > wantedGainTolerance && totalWanted < bestWanted)\\n            [bestTaskAssignments, bestTotalGain, bestWanted] = [proposedTasks, totalGain, totalWanted];\\n    }\\n    const elapsed = Date.now() - start;\\n    // Determine whether any changes need to be made\\n    if (bestTaskAssignments != null && myGangMembers.some(m => assignedTasks[m] !== bestTaskAssignments[m].name)) {\\n        myGangMembers.forEach(m => assignedTasks[m] = bestTaskAssignments[m].name); // Update work orders for all members\\n        const oldGangInfo = myGangInfo;\\n        await updateMemberActivities(ns, dictMembers);\\n        const [optWanted, optRespect, optMoney] = myGangMembers.map(m => assignedTasks[m]).reduce(([w, r, m], t) => [w + t.wanted, r + t.respect, m + t.money], [0, 0, 0]);\\n        if (optWanted != oldGangInfo.wantedLevelGainRate || optRespect != oldGangInfo.respectGainRate || optMoney != oldGangInfo.moneyGainRate)\\n            myGangInfo = await waitForGameUpdate(ns, oldGangInfo);\\n        log(ns, `SUCCESS: Optimized gang member crimes for ${optStat} with wanted gain tolerance ${wantedGainTolerance.toPrecision(2)} (${elapsed} ms). ` +\\n            `Wanted: ${oldGangInfo.wantedLevelGainRate.toPrecision(3)} -> ${myGangInfo.wantedLevelGainRate.toPrecision(3)}, ` +\\n            `Rep: ${formatNumberShort(oldGangInfo.respectGainRate)} -> ${formatNumberShort(myGangInfo.respectGainRate)}, Money: ${formatMoney(oldGangInfo.moneyGainRate)} -> ${formatMoney(myGangInfo.moneyGainRate)}`);\\n        // Sanity check that our calculations (which we stole from game source code) are about right\\n        if ((Math.abs(myGangInfo.wantedLevelGainRate - optWanted) / optWanted > 0.01) || (Math.abs(myGangInfo.respectGainRate - optRespect) / optRespect > 0.01) || (Math.abs(myGangInfo.moneyGainRate - optMoney) / optMoney > 0.01))\\n            log(ns, `WARNING: Calculated new rates would be Rep:${formatNumberShort(optRespect)} Wanted: ${optWanted.toPrecision(3)} Money: ${formatMoney(optMoney)}` +\\n                `but they are Rep:${formatNumberShort(myGangInfo.respectGainRate)} Wanted: ${myGangInfo.wantedLevelGainRate.toPrecision(3)} Money: ${formatMoney(myGangInfo.moneyGainRate)}`, 'warning');\\n    } else\\n        log(ns, `INFO: Determined all gang member assignments are already optimal for ${optStat} with wanted gain tolerance ${wantedGainTolerance.toPrecision(2)} (${elapsed} ms).`);\\n    // Fail-safe: If we somehow over-shot and are generating wanted levels, start randomly assigning members to vigilante to fix it\\n    if (myGangInfo.wantedLevelGainRate > wantedGainTolerance) await fixWantedGainRate(ns, myGangInfo, wantedGainTolerance);\\n}\\n\\n/** @param {NS} ns \\n * Logic to reduce crime tiers when we're generating a wanted level **/\\nasync function fixWantedGainRate(ns, myGangInfo, wantedGainTolerance = 0) {\\n    // TODO: steal actual wanted level calcs and strategically pick the member(s) who can bridge the gap while losing the least rep/sec\\n    let lastWantedLevelGainRate = myGangInfo.wantedLevelGainRate;\\n    log(ns, `WARNING: Generating wanted levels (${lastWantedLevelGainRate.toPrecision(3)}/sec > ${wantedGainTolerance.toPrecision(3)}/sec), temporarily assigning random members to Vigilante Justice...`, 'warning');\\n    for (const member of shuffleArray(myGangMembers.slice())) {\\n        if (!crimes.includes(assignedTasks[member])) continue; // This member isn't doing crime, so they aren't contributing to wanted\\n        assignedTasks[member] = \\\"Vigilante Justice\\\";\\n        await updateMemberActivities(ns);\\n        const wantedLevelGainRate = (myGangInfo = await waitForGameUpdate(ns, myGangInfo)).wantedLevelGainRate;\\n        if (wantedLevelGainRate < wantedGainTolerance) return;\\n        if (lastWantedLevelGainRate == wantedLevelGainRate)\\n            log(ns, `Warning: Attempt to rollback crime of ${member} to ${assignedTasks[member]} resulted in no change in wanted level gain rate ` +\\n                `(${lastWantedLevelGainRate.toPrecision(3)})`, 'warning');\\n    }\\n}\\n\\n/** @param {NS} ns \\n * Recruit new members if available **/\\nasync function doRecruitMember(ns) {\\n    let i = 0, newMemberName;\\n    do { newMemberName = `Thug ${++i}`; } while (myGangMembers.includes(newMemberName) || myGangMembers.includes(newMemberName + \\\" Understudy\\\"));\\n    if (i < myGangMembers.length) newMemberName += \\\" Understudy\\\"; // Pay our respects to the deceased\\n    if (await getNsDataThroughFile(ns, `ns.gang.canRecruitMember() && ns.gang.recruitMember('${newMemberName}')`, '/Temp/gang-recruit-member.txt')) {\\n        myGangMembers.push(newMemberName);\\n        assignedTasks[newMemberName] = \\\"Train \\\" + (isHackGang ? \\\"Hacking\\\" : \\\"Combat\\\");\\n        lastMemberReset[newMemberName] = Date.now();\\n        log(ns, `SUCCESS: Recruited a new gang member \\\"${newMemberName}\\\"!`, 'success');\\n    } else {\\n        log(ns, `ERROR: Failed to recruit a new gang member \\\"${newMemberName}\\\"!`, 'error');\\n    }\\n}\\n\\n/** @param {NS} ns \\n * Check if any members are deemed worth ascending to increase a stat multiplier **/\\nasync function tryAscendMembers(ns) {\\n    const dictAscensionResults = await getGangInfoDict(ns, myGangMembers, 'getAscensionResult');\\n    for (let i = 0; i < myGangMembers.length; i++) {\\n        const member = myGangMembers[i];\\n        // First members are given the largest threshold, so that early on when they are our only members, they are more stable\\n        const ascMultiThreshold = options['ascend-multi-threshold'] + (11 - i) * options['ascend-multi-threshold-spacing'];\\n        const ascResult = dictAscensionResults[member];\\n        if (!ascResult || !importantStats.some(stat => ascResult[stat] >= ascMultiThreshold))\\n            continue;\\n        if (undefined !== (await getNsDataThroughFile(ns, `ns.gang.ascendMember('${member}')`, '/Temp/gang-ascend-member.txt'))) {\\n            log(ns, `SUCCESS: Ascended member ${member} to increase multis by ${importantStats.map(s => `${s} -> ${ascResult[s].toFixed(2)}x`).join(\\\", \\\")}`, 'success');\\n            lastMemberReset[member] = Date.now();\\n        }\\n        else\\n            log(ns, `ERROR: Attempt to ascended member ${member} failed. Go investigate!`, 'error');\\n    }\\n}\\n\\n/** @param {NS} ns \\n * Upgrade any missing equipment / augmentations of members if we have the budget for it **/\\nasync function tryUpgradeMembers(ns, dictMembers) {\\n    // Update equipment costs to take into account discounts\\n    const dictEquipmentCosts = await getGangInfoDict(ns, equipments.map(e => e.name), 'getEquipmentCost');\\n    equipments.forEach(e => e.cost = dictEquipmentCosts[e.name])\\n    // Upgrade members, spending no more than x% of our money per tick (and respecting the global reseve)\\n    const purchaseOrder = [];\\n    const playerData = await getNsDataThroughFile(ns, 'ns.getPlayer()', '/Temp/player-info.txt');\\n    const homeMoney = playerData.money - (Number.parseFloat(ns.read(\\\"reserve.txt\\\")) || 0);\\n    let budget = maxSpendPerTickTransientEquipment * homeMoney;\\n    let augBudget = maxSpendPerTickPermanentEquipment * homeMoney;\\n    // Hack: Budget is cut by 1/100 if we don't yet own the Stockmarket 4S API (main source of income early BN)\\n    if (!playerData.has4SDataTixApi) budget /= 100, augBudget /= 100;\\n    if (budget <= 0) return;\\n    // Find out what outstanding equipment can be bought within our budget\\n    for (const equip of equipments) {\\n        for (const member of Object.values(dictMembers)) { // Get this equip for each member before considering the next most expensive equip\\n            // Bit of a hack: Inflate the \\\"cost\\\" of equipment that doesn't contribute to our main stats so that we don't purchase them unless we have ample cash\\n            let percievedCost = equip.cost * (Object.keys(equip.stats).some(stat => importantStats.some(i => stat.includes(i))) ? 1 : 50);\\n            if (percievedCost > augBudget) continue;\\n            if (equip.type != \\\"Augmentation\\\" && percievedCost > budget) continue;\\n            if (!member.upgrades.includes(equip.name) && !member.augmentations.includes(equip.name)) {\\n                purchaseOrder.push({ member: member.name, type: equip.type, equipmentName: equip.name, cost: equip.cost });\\n                budget -= equip.cost;\\n                augBudget -= equip.cost;\\n            }\\n        }\\n    }\\n    await doUpgradePurchases(ns, purchaseOrder);\\n}\\n\\n/** @param {NS} ns \\n * Spawn a temporary taask to upgrade members. **/\\nasync function doUpgradePurchases(ns, purchaseOrder) {\\n    if (purchaseOrder.length == 0) return;\\n    const orderSummary = purchaseOrder.map(o => `${o.member} ${o.type}: \\\"${o.equipmentName}\\\"`).join(\\\", \\\");\\n    if (await getNsDataThroughFile(ns, `${JSON.stringify(purchaseOrder)}.reduce((success, o) => success && ns.gang.purchaseEquipment(o.member, o.equipmentName), true)`, '/Temp/gang-upgrade-members.txt'))\\n        log(ns, `SUCCESS: Purchased ${purchaseOrder.length} gang member upgrades for ${formatMoney(purchaseOrder.reduce((t, e) => t + e.cost, 0))}. (${orderSummary})`, 'success')\\n    else\\n        log(ns, `ERROR: Failed to purchase one or more gang member upgrades. (${orderSummary})`, 'error');\\n}\\n\\n/** @param {NS} ns \\n * Helper to wait for the game to update stats (typically 2 seconds per cycle) **/\\nasync function waitForGameUpdate(ns, oldGangInfo) {\\n    if (!myGangMembers.some(member => !assignedTasks[member].includes(\\\"Train\\\")))\\n        return oldGangInfo; // Ganginfo will never change if all members are training, so don't wait for an update\\n    const maxWaitTime = 2500;\\n    const waitInterval = 100;\\n    const start = Date.now()\\n    while (Date.now() < start + maxWaitTime) {\\n        var latestGangInfo = ns.gang.getGangInformation();\\n        if (JSON.stringify(latestGangInfo) != JSON.stringify(oldGangInfo))\\n            return latestGangInfo;\\n        await ns.sleep(Math.min(waitInterval, start + maxWaitTime - Date.now()));\\n    }\\n    log(ns, `WARNING: Max wait time ${maxWaitTime} exceeded while waiting for old gang info to update.\\\\n${JSON.stringify(oldGangInfo)}\\\\n===\\\\n${JSON.stringify(latestGangInfo)}`, 'warning');\\n    territoryTickDetected = false;\\n    return latestGangInfo;\\n}\\n\\n/** @param {NS} ns \\n * Checks whether we should be engaging in warfare based on our gang power and that of other gangs. **/\\nasync function enableOrDisableWarfare(ns, myGangInfo) {\\n    warfareFinished = Math.round(myGangInfo.territory * 2 ** 20) / 2 ** 20 /* Handle API imprecision */ >= 1;\\n    if (warfareFinished && !myGangInfo.territoryWarfareEngaged) return; // No need to engage once we hit 100%\\n    const otherGangs = await getNsDataThroughFile(ns, 'ns.gang.getOtherGangInformation()', '/Temp/gang-other-gang-info.txt'); // Returns dict of { [gangName]: { \\\"power\\\": Number, \\\"territory\\\": Number } }\\n    let lowestWinChance = 1, totalWinChance = 0, totalActiveGangs = 0;\\n    let lowestWinChanceGang = \\\"\\\";\\n    for (const otherGang in otherGangs) {\\n        if (otherGangs[otherGang].territory == 0 || otherGang == myGangFaction) continue; // *New* Don't have to worry about battling a gang if it has 0 territory\\n        const winChance = myGangInfo.power / (myGangInfo.power + otherGangs[otherGang].power)\\n        if (winChance <= lowestWinChance) lowestWinChanceGang = otherGang;\\n        totalActiveGangs++, totalWinChance += winChance, lowestWinChance = Math.min(lowestWinChance, winChance);\\n    }\\n    // Turn on territory warfare only if we have a better than <territoryEngageThreshold>% chance of beating our random opponent\\n    const averageWinChance = totalWinChance / totalActiveGangs;\\n    const shouldEngage = !warfareFinished && territoryEngageThreshold <= averageWinChance;\\n    if (shouldEngage != myGangInfo.territoryWarfareEngaged) {\\n        log(ns, (warfareFinished ? 'SUCCESS' : 'INFO') + `: Toggling participation in territory warfare to ${shouldEngage}. Our power: ${formatNumberShort(myGangInfo.power)}. ` +\\n            (!warfareFinished ? `Lowest win chance is ${(100 * lowestWinChance).toFixed(2)}% with ${lowestWinChanceGang} (power ${formatNumberShort(otherGangs[lowestWinChanceGang]?.power)}). ` +\\n                `Average win chance ${(100 * averageWinChance).toFixed(2)}% across ${totalActiveGangs} active gangs.` :\\n                'We have destroyed all other gangs and earned 100% territory'), warfareFinished ? 'info' : 'success');\\n        await runCommand(ns, `ns.gang.setTerritoryWarfare(${shouldEngage})`, '/Temp/gang-set-warfare.js');\\n    }\\n}\\n\\n// Ram-dodging helper to get gang information for each item in a list\\nconst getGangInfoDict = async (ns, elements, gangFunction) => await getDict(ns, elements, `gang.${gangFunction}`, `/Temp/gang-${gangFunction}.txt`);\\nconst getDict = async (ns, elements, nsFunction, fileName) => await getNsDataThroughFile(ns, `Object.fromEntries(${JSON.stringify(elements)}.map(e => [e, ns.${nsFunction}(e)]))`, fileName);\\n\\n/** Gang calcs shamefully stolen from https://github.com/danielyxie/bitburner/blob/dev/src/Gang/GangMember.ts **/\\nlet getStatWeight = (task, memberInfo) =>\\n    (task.hackWeight / 100) * memberInfo[\\\"hack\\\"] + // Need to quote to avoid paying RAM for ns.hack -_-\\n    (task.strWeight / 100) * memberInfo.str +\\n    (task.defWeight / 100) * memberInfo.def +\\n    (task.dexWeight / 100) * memberInfo.dex +\\n    (task.agiWeight / 100) * memberInfo.agi +\\n    (task.chaWeight / 100) * memberInfo.cha;\\n\\nlet getWantedPenalty = myGangInfo => myGangInfo.respect / (myGangInfo.respect + myGangInfo.wantedLevel);\\nlet getTerritoryPenalty = myGangInfo => (0.2 * myGangInfo.territory + 0.8) * multGangSoftcap;\\n\\nfunction computeRepGains(myGangInfo, currentTask, memberInfo) {\\n    const task = allTaskStats[currentTask];\\n    const statWeight = getStatWeight(task, memberInfo) - 4 * task.difficulty;\\n    if (task.baseRespect === 0 || statWeight <= 0) return 0;\\n    const territoryMult = Math.max(0.005, Math.pow(myGangInfo.territory * 100, task.territory.respect) / 100);\\n    if (isNaN(territoryMult) || territoryMult <= 0) return 0;\\n    const respectMult = getWantedPenalty(myGangInfo);\\n    const territoryPenalty = getTerritoryPenalty(myGangInfo);\\n    //console.log(`statWeight: ${statWeight} task.difficulty: ${task.difficulty} territoryMult: ${territoryMult} territoryPenalty: ${territoryPenalty} myGangInfo.respect ${myGangInfo.respect} myGangInfo.wanted ${myGangInfo.wanted} respectMult: ${respectMult}`);\\n    return Math.pow(11 * task.baseRespect * statWeight * territoryMult * respectMult, territoryPenalty);\\n}\\n\\nfunction computeWantedGains(myGangInfo, currentTask, memberInfo) {\\n    const task = allTaskStats[currentTask];\\n    const statWeight = getStatWeight(task, memberInfo) - 3.5 * task.difficulty;\\n    if (task.baseWanted === 0 || statWeight <= 0) return 0;\\n    const territoryMult = Math.max(0.005, Math.pow(myGangInfo.territory * 100, task.territory.wanted) / 100);\\n    if (isNaN(territoryMult) || territoryMult <= 0) return 0;\\n    return (task.baseWanted < 0) ? 0.4 * task.baseWanted * statWeight * territoryMult :\\n        Math.min(100, (7 * task.baseWanted) / Math.pow(3 * statWeight * territoryMult, 0.8));\\n}\\n\\nfunction calculateMoneyGains(myGangInfo, currentTask, memberInfo) {\\n    const task = allTaskStats[currentTask];\\n    const statWeight = getStatWeight(task, memberInfo) - 3.2 * task.difficulty;\\n    if (task.baseMoney === 0 || statWeight <= 0) return 0;\\n    const territoryMult = Math.max(0.005, Math.pow(myGangInfo.territory * 100, task.territory.money) / 100);\\n    if (isNaN(territoryMult) || territoryMult <= 0) return 0;\\n    const respectMult = getWantedPenalty(myGangInfo);\\n    const territoryPenalty = getTerritoryPenalty(myGangInfo);\\n    return Math.pow(5 * task.baseMoney * statWeight * territoryMult * respectMult, territoryPenalty);\\n}\\n\\n/** @param {NS} ns **/\\nfunction log(ns, message, toastStyle, terminal = undefined) {\\n    ns.print(message);\\n    if (terminal === true || (terminal === undefined && toastStyle === 'error')) ns.tprint(message);\\n    if (toastStyle) ns.toast(message, toastStyle);\\n}\\n\\n/** Helps us not get caught in cycles by reducing gang member crime tiers in a random order */\\nfunction shuffleArray(array) {\\n    for (let i = array.length - 1; i > 0; i--) {\\n        const j = Math.floor(Math.random() * (i + 1));\\n        [array[i], array[j]] = [array[j], array[i]];\\n    }\\n    return array;\\n}\",\"filename\":\"gangs.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"helpers.js\",\"url\":\"blob:file:///9f28a1d7-fbe5-4f2d-931e-533c6037fe70\",\"moduleSequenceNumber\":125},{\"filename\":\"gangs.js\",\"url\":\"blob:file:///629b3b6e-59b7-4816-9ada-eba8e9633699\",\"moduleSequenceNumber\":228}],\"dependents\":[],\"ramUsage\":4.7,\"server\":\"home\",\"moduleSequenceNumber\":228,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"gang.getGangInformation\",\"cost\":2},{\"type\":\"fn\",\"name\":\"run\",\"cost\":1},{\"type\":\"fn\",\"name\":\"isRunning\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"const lists = ['FactionName', 'StockSymbol', 'GangName', 'Crime', 'AugmentName', 'BladeburnerOperations', 'BladeburnerBlackOps', 'CodingContractTypes', 'GangEquipment'].sort();\\nexport function autocomplete() { return lists; }\\n/** @param {NS} ns **/\\nexport async function main(ns) { ns.tprint(await getList(ns.args[0])); }\\nexport async function getList(listName) {\\n    let definitions = await (await fetch('https://raw.githubusercontent.com/danielyxie/bitburner/dev/src/ScriptEditor/NetscriptDefinitions.d.ts')).text();\\n    let listStart = `type ${listName} =\\\\n  | \\\"`;\\n    let listIndex = definitions.indexOf(listStart) + listStart.length;\\n    let list = definitions.slice(listIndex, definitions.indexOf('\\\";', listIndex)).split('\\\"\\\\n  | \\\"');\\n    return list;\\n}\",\"filename\":\"get-list.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"server\":\"home\",\"moduleSequenceNumber\":123,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { disableLogs, formatDuration, formatMoney } from './helpers.js'\\n\\nlet haveHacknetServers = true;\\nlet formulas = true;\\nlet options;\\nconst argsSchema = [\\n    ['max-payoff-time', '1h'], // Controls how far to upgrade hacknets. Can be a number of seconds, or an expression of minutes/hours (e.g. '123m', '4h')\\n    ['time', null], // alias for max-payoff-time\\n    ['c', false], // Set to true to run continuously, otherwise, it runs once\\n    ['continuous', false],\\n    ['interval', 1000], // Rate at which the program purchases upgrades when running continuously\\n    ['max-spend', Number.MAX_VALUE], // The maximum amount of money to spend on upgrades\\n    ['toast', false] // Set to true to toast purchases\\n];\\n\\nexport function autocomplete(data, _) {\\n    data.flags(argsSchema);\\n    return [];\\n}\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    options = ns.flags(argsSchema);\\n    const continuous = options.c || options.continuous;\\n    const interval = options.interval;\\n    let maxSpend = options[\\\"max-spend\\\"];\\n    let maxPayoffTime = options['time'] || options['max-payoff-time'];\\n    // A little string parsing to be more user friendly\\n    if (maxPayoffTime && String(maxPayoffTime).endsWith(\\\"m\\\"))\\n        maxPayoffTime = Number.parseFloat(maxPayoffTime.replace(\\\"m\\\", \\\"\\\")) * 60\\n    else if (maxPayoffTime && String(maxPayoffTime).endsWith(\\\"h\\\"))\\n        maxPayoffTime = Number.parseFloat(maxPayoffTime.replace(\\\"h\\\", \\\"\\\")) * 3600\\n    else\\n        maxPayoffTime = Number.parseFloat(maxPayoffTime);\\n    disableLogs(ns, ['sleep', 'getServerUsedRam']);\\n    let formulas = true;\\n    log(ns, `Starting hacknet-upgrade-manager with purchase payoff time limit of ${formatDuration(maxPayoffTime * 1000)} and ` +\\n        (maxSpend == Number.MAX_VALUE ? 'no spending limit' : `a spend limit of ${formatMoney(maxSpend)}`) +\\n        `. Current fleet: ${ns.hacknet.numNodes()} nodes...`);\\n    do {\\n        var spend = upgradeHacknet(ns, maxSpend, maxPayoffTime);\\n        // Using this method, we cannot know for sure that we don't have hacknet servers until we have purchased one\\n        if (haveHacknetServers && ns.hacknet.numNodes() > 0 && ns.hacknet.hashCapacity() == 0)\\n            haveHacknetServers = false;\\n        if (maxSpend && spend === false) {\\n            log(ns, `Spending limit reached. Breaking...`);\\n            break; // Hack, but we return a non-number (false) when we've bought all we can for the current config\\n        }\\n        maxSpend -= spend;\\n        if (continuous) await ns.sleep(interval);\\n    } while (continuous);\\n}\\n\\nlet lastUpgradeLog = \\\"\\\";\\nfunction log(ns, logMessage) { if (logMessage != lastUpgradeLog) ns.print(lastUpgradeLog = logMessage); }\\n\\n// Will buy the most effective hacknet upgrade, so long as it will pay for itself in the next {payoffTimeSeconds} seconds.\\n/** @param {NS} ns **/\\nexport function upgradeHacknet(ns, maxSpend, maxPayoffTimeSeconds = 3600 /* 3600 sec == 1 hour */) {\\n    const currentHacknetMult = ns.getPlayer().hacknet_node_money_mult;\\n    // Get the lowest cache level, we do not consider upgrading the cache level of servers above this until all have the same cache level\\n    const minCacheLevel = [...Array(ns.hacknet.numNodes()).keys()].reduce((min, i) => Math.min(min, ns.hacknet.getNodeStats(i).cache), Number.MAX_VALUE);\\n    // TODO: Change this all to use https://bitburner.readthedocs.io/en/latest/netscript/formulasapi/hacknetServers/hashGainRate.html\\n    const upgrades = [{ name: \\\"none\\\", cost: 0 }, {\\n        name: \\\"level\\\", upgrade: ns.hacknet.upgradeLevel, cost: i => ns.hacknet.getLevelUpgradeCost(i, 1), nextValue: nodeStats => nodeStats.level + 1,\\n        addedProduction: nodeStats => nodeStats.production * ((nodeStats.level + 1) / nodeStats.level - 1)\\n    }, {\\n        name: \\\"ram\\\", upgrade: ns.hacknet.upgradeRam, cost: i => ns.hacknet.getRamUpgradeCost(i, 1), nextValue: nodeStats => nodeStats.ram * 2,\\n        addedProduction: nodeStats => nodeStats.production * 0.07\\n    }, {\\n        name: \\\"cores\\\", upgrade: ns.hacknet.upgradeCore, cost: i => ns.hacknet.getCoreUpgradeCost(i, 1), nextValue: nodeStats => nodeStats.cores + 1,\\n        addedProduction: nodeStats => nodeStats.production * ((nodeStats.cores + 5) / (nodeStats.cores + 4) - 1)\\n    }, {\\n        name: \\\"cache\\\", upgrade: ns.hacknet.upgradeCache, cost: i => ns.hacknet.getCacheUpgradeCost(i, 1), nextValue: nodeStats => nodeStats.cache + 1,\\n        addedProduction: nodeStats => nodeStats.cache > minCacheLevel || !haveHacknetServers ? 0 : nodeStats.production * 0.01 / nodeStats.cache // Note: Does not actually give production, but it has \\\"worth\\\" to us so we can buy more things\\n    }];\\n    // Find the best upgrade we can make to an existing node\\n    let nodeToUpgrade = -1;\\n    let bestUpgrade;\\n    let bestUpgradePayoff = 0; // Hashes per second per dollar spent. Bigger is better.\\n    let cost = 0;\\n    let upgradedValue = 0;\\n    let worstNodeProduction = Number.MAX_VALUE; // Used to how productive a newly purchased node might be\\n    for (var i = 0; i < ns.hacknet.numNodes(); i++) {\\n        let nodeStats = ns.hacknet.getNodeStats(i);\\n        if (formulas && haveHacknetServers) { // When a hacknet server runs scripts, nodeStats.production lags behind what it should be for current ram usage. Get the \\\"raw\\\" rate\\n            try { nodeStats.production = ns.formulas.hacknetServers.hashGainRate(nodeStats.level, 0, nodeStats.ram, nodeStats.cores, currentHacknetMult); }\\n            catch { formulas = false; }\\n        }\\n        worstNodeProduction = Math.min(worstNodeProduction, nodeStats.production);\\n        for (let up = 1; up < upgrades.length; up++) {\\n            let currentUpgradeCost = upgrades[up].cost(i);\\n            let payoff = upgrades[up].addedProduction(nodeStats) / currentUpgradeCost; // Production (Hashes per second) per dollar spent\\n            if (payoff > bestUpgradePayoff) {\\n                nodeToUpgrade = i;\\n                bestUpgrade = upgrades[up];\\n                bestUpgradePayoff = payoff;\\n                cost = currentUpgradeCost;\\n                upgradedValue = upgrades[up].nextValue(nodeStats);\\n            }\\n        }\\n    }\\n    // Compare this to the cost of adding a new node. This is an imperfect science. We are paying to unlock the ability to buy all the same upgrades our\\n    // other nodes have - all of which have been deemed worthwhile. Not knowing the sum total that will have to be spent to reach that same production,\\n    // the \\\"most optimistic\\\" case is to treat \\\"price\\\" of all that production to be just the cost of this server, but this is **very** optimistic.\\n    // In practice, the cost of new hacknodes scales steeply enough that this should come close to being true (cost of server >> sum of cost of upgrades)\\n    let newNodeCost = ns.hacknet.getPurchaseNodeCost();\\n    let newNodePayoff = ns.hacknet.numNodes() == ns.hacknet.maxNumNodes() ? 0 : worstNodeProduction / newNodeCost;\\n    let shouldBuyNewNode = newNodePayoff > bestUpgradePayoff;\\n    if (newNodePayoff == 0 && bestUpgradePayoff == 0) {\\n        log(ns, `All upgrades have no value (is hashNet income disabled in this BN?)`);\\n        return false; // As long as maxSpend doesn't change, we will never purchase another upgrade\\n    }\\n    // If specified, only buy upgrades that will pay for themselves in {payoffTimeSeconds}.\\n    const hashDollarValue = haveHacknetServers ? 2.5e5 : 1; // Dollar value of one hash-per-second (0.25m dollars per production).\\n    let payoffTimeSeconds = 1 / (hashDollarValue * (shouldBuyNewNode ? newNodePayoff : bestUpgradePayoff));\\n    if (shouldBuyNewNode) cost = newNodeCost;\\n\\n    // Prepare info about the next uprade. Whether we end up purchasing or not, we will display this info.\\n    let strPurchase = (shouldBuyNewNode ? `a new node \\\"hacknet-node-${ns.hacknet.numNodes()}\\\"` :\\n        `hacknet-node-${nodeToUpgrade} ${bestUpgrade.name} ${upgradedValue}`) + ` for ${formatMoney(cost)}`;\\n    let strPayoff = `production ${((shouldBuyNewNode ? newNodePayoff : bestUpgradePayoff) * cost).toPrecision(3)} payoff time: ${formatDuration(1000 * payoffTimeSeconds)}`\\n    if (cost > maxSpend) {\\n        log(ns, `The next best purchase would be ${strPurchase} but the cost ${formatMoney(cost)} exceeds the limit (${formatMoney(maxSpend)})`);\\n        return false; // As long as maxSpend doesn't change, we will never purchase another upgrade\\n    }\\n    if (payoffTimeSeconds > maxPayoffTimeSeconds) {\\n        log(ns, `The next best purchase would be ${strPurchase} but the ${strPayoff} is worse than the limit (${formatDuration(1000 * maxPayoffTimeSeconds)})`);\\n        return false; // As long as maxPayoffTimeSeconds doesn't change, we will never purchase another upgrade\\n    }\\n    let success = shouldBuyNewNode ? ns.hacknet.purchaseNode() !== -1 : bestUpgrade.upgrade(nodeToUpgrade, 1);\\n    if (success && options.toast) ns.toast(`Purchased ${strPurchase}`, 'success');\\n    log(ns, success ? `Purchased ${strPurchase} with ${strPayoff}` : `Insufficient funds to purchase the next best upgrade: ${strPurchase}`);\\n    return success ? cost : 0;\\n}\",\"filename\":\"hacknet-upgrade-manager.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"helpers.js\",\"url\":\"blob:file:///060e1874-0988-4a4a-85d3-7ae732f54a0b\",\"moduleSequenceNumber\":125},{\"filename\":\"hacknet-upgrade-manager.js\",\"url\":\"blob:file:///bd893a49-b18e-46ce-9a48-88fa8394ba77\",\"moduleSequenceNumber\":269}],\"dependents\":[],\"ramUsage\":6.1,\"server\":\"home\",\"moduleSequenceNumber\":269,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"ns\",\"name\":\"hacknet\",\"cost\":4},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Return a formatted representation of the monetary amount using scale sympols (e.g. $6.50M)\\n * @param {number} num - The number to format\\n * @param {number=} maxSignificantFigures - (default: 6) The maximum significant figures you wish to see (e.g. 123, 12.3 and 1.23 all have 3 significant figures)\\n * @param {number=} maxDecimalPlaces - (default: 3) The maximum decimal places you wish to see, regardless of significant figures. (e.g. 12.3, 1.2, 0.1 all have 1 decimal)\\n **/\\nexport function formatMoney(num, maxSignificantFigures = 6, maxDecimalPlaces = 3) {\\n    let numberShort = formatNumberShort(num, maxSignificantFigures, maxDecimalPlaces);\\n    return num >= 0 ? \\\"$\\\" + numberShort : numberShort.replace(\\\"-\\\", \\\"-$\\\");\\n}\\n\\nconst symbols = [\\\"\\\", \\\"k\\\", \\\"m\\\", \\\"b\\\", \\\"t\\\", \\\"q\\\", \\\"Q\\\", \\\"s\\\", \\\"S\\\", \\\"o\\\", \\\"n\\\", \\\"e33\\\", \\\"e36\\\", \\\"e39\\\"];\\n\\n/**\\n * Return a formatted representation of the monetary amount using scale sympols (e.g. 6.50M) \\n * @param {number} num - The number to format\\n * @param {number=} maxSignificantFigures - (default: 6) The maximum significant figures you wish to see (e.g. 123, 12.3 and 1.23 all have 3 significant figures)\\n * @param {number=} maxDecimalPlaces - (default: 3) The maximum decimal places you wish to see, regardless of significant figures. (e.g. 12.3, 1.2, 0.1 all have 1 decimal)\\n **/\\nexport function formatNumberShort(num, maxSignificantFigures = 6, maxDecimalPlaces = 3) {\\n    for (var i = 0, sign = Math.sign(num), num = Math.abs(num); num >= 1000 && i < symbols.length; i++) num /= 1000;\\n    // TODO: A number like 9.999 once rounted to show 3 sig figs, will become 10.00, which is now 4 sig figs.\\n    return ((sign < 0) ? \\\"-\\\" : \\\"\\\") + num.toFixed(Math.max(0, Math.min(maxDecimalPlaces, maxSignificantFigures - Math.floor(1 + Math.log10(num))))) + symbols[i];\\n}\\n\\n/** Convert a shortened number back into a value */\\nexport function parseShortNumber(text = \\\"0\\\") {\\n    let parsed = Number(text);\\n    if (!isNaN(parsed)) return parsed;\\n    for (const sym of symbols.slice(1))\\n        if (text.toLowerCase().endsWith(sym))\\n            return Number.parseFloat(text.slice(0, text.length - sym.length)) * Math.pow(10, 3 * symbols.indexOf(sym));\\n    return Number.NaN;\\n}\\n\\n/**\\n * Return a number formatted with the specified number of significatnt figures or decimal places, whichever is more limiting.\\n * @param {number} num - The number to format\\n * @param {number=} minSignificantFigures - (default: 6) The minimum significant figures you wish to see (e.g. 123, 12.3 and 1.23 all have 3 significant figures)\\n * @param {number=} minDecimalPlaces - (default: 3) The minimum decimal places you wish to see, regardless of significant figures. (e.g. 12.3, 1.2, 0.1 all have 1 decimal)\\n **/\\nexport function formatNumber(num, minSignificantFigures = 3, minDecimalPlaces = 1) {\\n    return num == 0.0 ? num : num.toFixed(Math.max(minDecimalPlaces, Math.max(0, minSignificantFigures - Math.ceil(Math.log10(num)))));\\n}\\n\\n/** Formats some RAM amount as a round number of GB with thousands separators e.g. `1,028 GB` */\\nexport function formatRam(num) { return `${Math.round(num).toLocaleString()} GB`; }\\n\\n/** Return a datatime in ISO format */\\nexport function formatDateTime(datetime) { return datetime.toISOString(); }\\n\\n/** Format a duration (in milliseconds) as e.g. '1h 21m 6s' for big durations or e.g '12.5s' / '23ms' for small durations */\\nexport function formatDuration(duration) {\\n    if (duration < 1000) return `${duration.toFixed(0)}ms`\\n    const portions = [];\\n    const msInHour = 1000 * 60 * 60;\\n    const hours = Math.trunc(duration / msInHour);\\n    if (hours > 0) {\\n        portions.push(hours + 'h');\\n        duration -= (hours * msInHour);\\n    }\\n    const msInMinute = 1000 * 60;\\n    const minutes = Math.trunc(duration / msInMinute);\\n    if (minutes > 0) {\\n        portions.push(minutes + 'm');\\n        duration -= (minutes * msInMinute);\\n    }\\n    let seconds = (duration / 1000.0)\\n    // Include millisecond precision if we're on the order of seconds\\n    seconds = (hours == 0 && minutes == 0) ? seconds.toPrecision(3) : seconds.toFixed(0);\\n    if (seconds > 0) {\\n        portions.push(seconds + 's');\\n        duration -= (minutes * 1000);\\n    }\\n    return portions.join(' ');\\n}\\n\\n/** Generate a hashCode for a string that is pretty unique most of the time */\\nexport function hashCode(s) { return s.split(\\\"\\\").reduce(function (a, b) { a = ((a << 5) - a) + b.charCodeAt(0); return a & a }, 0); }\\n\\n/** @param {NS} ns **/\\nexport function disableLogs(ns, listOfLogs) { ['disableLog'].concat(...listOfLogs).forEach(log => checkNsInstance(ns, '\\\"disableLogs\\\"').disableLog(log)); }\\n\\n/** Joins all arguments as components in a path, e.g. pathJoin(\\\"foo\\\", \\\"bar\\\", \\\"/baz\\\") = \\\"foo/bar/baz\\\" **/\\nexport function pathJoin(...args) {\\n    return args.filter(s => !!s).join('/').replace(/\\\\/\\\\/+/g, '/');\\n}\\n\\n/** Gets the path for the given local file, taking into account optional subfolder relocation via git-pull.js **/\\nexport function getFilePath(file) {\\n    const subfolder = '';  // git-pull.js optionally modifies this when downloading\\n    return pathJoin(subfolder, file);\\n}\\n\\n// FUNCTIONS THAT PROVIDE ALTERNATIVE IMPLEMENTATIONS TO EXPENSIVE NS FUNCTIONS\\n// VARIATIONS ON NS.RUN\\n\\n/** @param {NS} ns\\n *  Use where a function is required to run a script and you have already referenced ns.run in your script **/\\nexport function getFnRunViaNsRun(ns) { return checkNsInstance(ns, '\\\"getFnRunViaNsRun\\\"').run; }\\n\\n/** @param {NS} ns\\n *  Use where a function is required to run a script and you have already referenced ns.exec in your script **/\\nexport function getFnRunViaNsExec(ns, host = \\\"home\\\") {\\n    checkNsInstance(ns, '\\\"getFnRunViaNsExec\\\"');\\n    return function (scriptPath, ...args) { return ns.exec(scriptPath, host, ...args); }\\n}\\n// VARIATIONS ON NS.ISRUNNING\\n\\n/** @param {NS} ns\\n *  Use where a function is required to run a script and you have already referenced ns.run in your script  */\\nexport function getFnIsAliveViaNsIsRunning(ns) { return checkNsInstance(ns, '\\\"getFnIsAliveViaNsIsRunning\\\"').isRunning; }\\n\\n/** @param {NS} ns\\n *  Use where a function is required to run a script and you have already referenced ns.exec in your script  */\\nexport function getFnIsAliveViaNsPs(ns) {\\n    checkNsInstance(ns, '\\\"getFnIsAliveViaNsPs\\\"');\\n    return function (pid, host) { return ns.ps(host).some(process => process.pid === pid); }\\n}\\n\\n/**\\n * Retrieve the result of an ns command by executing it in a temporary .js script, writing the result to a file, then shuting it down\\n * Importing incurs a maximum of 1.1 GB RAM (0 GB for ns.read, 1 GB for ns.run, 0.1 GB for ns.isRunning).\\n * Has the capacity to retry if there is a failure (e.g. due to lack of RAM available). Not recommended for performance-critical code.\\n * @param {NS} ns - The nestcript instance passed to your script's main entry point\\n * @param {string} command - The ns command that should be invoked to get the desired data (e.g. \\\"ns.getServer('home')\\\" )\\n * @param {string=} fName - (default \\\"/Temp/{commandhash}-data.txt\\\") The name of the file to which data will be written to disk by a temporary process\\n * @param {bool=} verbose - (default false) If set to true, pid and result of command are logged.\\n **/\\nexport async function getNsDataThroughFile(ns, command, fName, verbose = false, maxRetries = 5, retryDelayMs = 50) {\\n    checkNsInstance(ns, '\\\"getNsDataThroughFile\\\"');\\n    if (!verbose) disableLogs(ns, ['run', 'isRunning']);\\n    return await getNsDataThroughFile_Custom(ns, ns.run, ns.isRunning, command, fName, verbose, maxRetries, retryDelayMs);\\n}\\n\\n/**\\n * An advanced version of getNsDataThroughFile that lets you pass your own \\\"fnRun\\\" and \\\"fnIsAlive\\\" implementations to reduce RAM requirements\\n * Importing incurs no RAM (now that ns.read is free) plus whatever fnRun / fnIsAlive you provide it\\n * Has the capacity to retry if there is a failure (e.g. due to lack of RAM available). Not recommended for performance-critical code.\\n * @param {NS} ns - The nestcript instance passed to your script's main entry point\\n * @param {function} fnRun - A single-argument function used to start the new sript, e.g. `ns.run` or `(f,...args) => ns.exec(f, \\\"home\\\", ...args)`\\n * @param {function} fnIsAlive - A single-argument function used to start the new sript, e.g. `ns.isRunning` or `pid => ns.ps(\\\"home\\\").some(process => process.pid === pid)`\\n **/\\nexport async function getNsDataThroughFile_Custom(ns, fnRun, fnIsAlive, command, fName, verbose = false, maxRetries = 5, retryDelayMs = 50) {\\n    checkNsInstance(ns, '\\\"getNsDataThroughFile_Custom\\\"');\\n    if (!verbose) disableLogs(ns, ['read']);\\n    const commandHash = hashCode(command);\\n    fName = fName || `/Temp/${commandHash}-data.txt`;\\n    const fNameCommand = (fName || `/Temp/${commandHash}-command`) + '.js'\\n    // Prepare a command that will write out a new file containing the results of the command\\n    // unless it already exists with the same contents (saves time/ram to check first)\\n    // If an error occurs, it will write an empty file to avoid old results being misread.\\n    const commandToFile = `let result = \\\"\\\"; try { result = JSON.stringify(${command}); } catch { }\\n        if (ns.read(\\\"${fName}\\\") != result) await ns.write(\\\"${fName}\\\", result, 'w')`;\\n    // Run the command with auto-retries if it fails\\n    const pid = await runCommand_Custom(ns, fnRun, commandToFile, fNameCommand, false, maxRetries, retryDelayMs);\\n    // Wait for the process to complete\\n    await waitForProcessToComplete_Custom(ns, fnIsAlive, pid, verbose);\\n    if (verbose) ns.print(`Process ${pid} is done. Reading the contents of ${fName}...`);\\n    // Read the file, with auto-retries if it fails\\n    const fileData = await autoRetry(ns, () => ns.read(fName), f => f !== undefined && f !== \\\"\\\",\\n        () => `ns.read('${fName}') somehow returned undefined or an empty string`,\\n        maxRetries, retryDelayMs, undefined, verbose);\\n    if (verbose) ns.print(`Read the following data for command ${command}:\\\\n${fileData}`);\\n    return JSON.parse(fileData); // Deserialize it back into an object/array and return\\n}\\n\\n/** Evaluate an arbitrary ns command by writing it to a new script and then running or executing it.\\n * @param {NS} ns - The nestcript instance passed to your script's main entry point\\n * @param {string} command - The ns command that should be invoked to get the desired data (e.g. \\\"ns.getServer('home')\\\" )\\n * @param {string=} fileName - (default \\\"/Temp/{commandhash}-data.txt\\\") The name of the file to which data will be written to disk by a temporary process\\n * @param {bool=} verbose - (default false) If set to true, the evaluation result of the command is printed to the terminal\\n * @param {...args} args - args to be passed in as arguments to command being run as a new script.\\n */\\nexport async function runCommand(ns, command, fileName, verbose = false, maxRetries = 5, retryDelayMs = 50, ...args) {\\n    checkNsInstance(ns, '\\\"runCommand\\\"');\\n    if (!verbose) disableLogs(ns, ['run', 'sleep']);\\n    return await runCommand_Custom(ns, ns.run, command, fileName, verbose, maxRetries, retryDelayMs, ...args);\\n}\\n\\n/**\\n * An advanced version of runCommand that lets you pass your own \\\"isAlive\\\" test to reduce RAM requirements (e.g. to avoid referencing ns.isRunning)\\n * Importing incurs 0 GB RAM (assuming fnRun, fnWrite are implemented using another ns function you already reference elsewhere like ns.exec)\\n * @param {NS} ns - The nestcript instance passed to your script's main entry point\\n * @param {function} fnRun - A single-argument function used to start the new sript, e.g. `ns.run` or `(f,...args) => ns.exec(f, \\\"home\\\", ...args)`\\n **/\\nexport async function runCommand_Custom(ns, fnRun, command, fileName, verbose = false, maxRetries = 5, retryDelayMs = 50, ...args) {\\n    checkNsInstance(ns, '\\\"runCommand_Custom\\\"');\\n    let script = `import { formatMoney, formatNumberShort, formatDuration, parseShortNumber, scanAllServers } fr` + `om '${getFilePath('helpers.js')}'\\\\n` +\\n        `export async function main(ns) { try { ` +\\n        (verbose ? `let output = ${command}; ns.tprint(output)` : command) +\\n        `; } catch(err) { ns.tprint(String(err)); throw(err); } }`;\\n    fileName = fileName || `/Temp/${hashCode(command)}-command.js`;\\n    // To improve performance and save on garbage collection, we can skip writing this exact same script was previously written (common for repeatedly-queried data)\\n    if (ns.read(fileName) != script) await ns.write(fileName, script, \\\"w\\\");\\n    return await autoRetry(ns, () => fnRun(fileName, ...args), temp_pid => temp_pid !== 0,\\n        () => `Run command returned no pid. Destination: ${fileName} Command: ${command}\\\\nEnsure you have sufficient free RAM to run this temporary script.`,\\n        maxRetries, retryDelayMs, undefined, verbose);\\n}\\n\\n/**\\n * Wait for a process id to complete running\\n * Importing incurs a maximum of 0.1 GB RAM (for ns.isRunning) \\n * @param {NS} ns - The nestcript instance passed to your script's main entry point\\n * @param {int} pid - The process id to monitor\\n * @param {bool=} verbose - (default false) If set to true, pid and result of command are logged.\\n **/\\nexport async function waitForProcessToComplete(ns, pid, verbose) {\\n    checkNsInstance(ns, '\\\"waitForProcessToComplete\\\"');\\n    if (!verbose) disableLogs(ns, ['isRunning']);\\n    return await waitForProcessToComplete_Custom(ns, ns.isRunning, pid, verbose);\\n}\\n/**\\n * An advanced version of waitForProcessToComplete that lets you pass your own \\\"isAlive\\\" test to reduce RAM requirements (e.g. to avoid referencing ns.isRunning)\\n * Importing incurs 0 GB RAM (assuming fnIsAlive is implemented using another ns function you already reference elsewhere like ns.ps) \\n * @param {NS} ns - The nestcript instance passed to your script's main entry point\\n * @param {function} fnIsAlive - A single-argument function used to start the new sript, e.g. `ns.isRunning` or `pid => ns.ps(\\\"home\\\").some(process => process.pid === pid)`\\n **/\\nexport async function waitForProcessToComplete_Custom(ns, fnIsAlive, pid, verbose) {\\n    checkNsInstance(ns, '\\\"waitForProcessToComplete_Custom\\\"');\\n    if (!verbose) disableLogs(ns, ['sleep']);\\n    // Wait for the PID to stop running (cheaper than e.g. deleting (rm) a possibly pre-existing file and waiting for it to be recreated)\\n    for (var retries = 0; retries < 1000; retries++) {\\n        if (!fnIsAlive(pid)) break; // Script is done running\\n        if (verbose && retries % 100 === 0) ns.print(`Waiting for pid ${pid} to complete... (${retries})`);\\n        await ns.sleep(10);\\n    }\\n    // Make sure that the process has shut down and we haven't just stopped retrying\\n    if (fnIsAlive(pid)) {\\n        let errorMessage = `run-command pid ${pid} is running much longer than expected. Max retries exceeded.`;\\n        ns.print(errorMessage);\\n        throw errorMessage;\\n    }\\n}\\n\\n/** Helper to retry something that failed temporarily (can happen when e.g. we temporarily don't have enough RAM to run)\\n * @param {NS} ns - The nestcript instance passed to your script's main entry point */\\nexport async function autoRetry(ns, fnFunctionThatMayFail, fnSuccessCondition, errorContext = \\\"Success condition not met\\\",\\n    maxRetries = 5, initialRetryDelayMs = 50, backoffRate = 3, verbose = false) {\\n    checkNsInstance(ns, '\\\"autoRetry\\\"');\\n    let retryDelayMs = initialRetryDelayMs;\\n    while (maxRetries-- > 0) {\\n        try {\\n            const result = await fnFunctionThatMayFail()\\n            if (!fnSuccessCondition(result)) throw typeof errorContext === 'string' ? errorContext : errorContext();\\n            return result;\\n        }\\n        catch (error) {\\n            const fatal = maxRetries === 0;\\n            const errorLog = `${fatal ? 'FAIL' : 'WARN'}: (${maxRetries} retries remaining): ${String(error)}`\\n            log(ns, errorLog, fatal, !verbose ? undefined : (fatal ? 'error' : 'warning'))\\n            if (fatal) throw error;\\n            await ns.sleep(retryDelayMs);\\n            retryDelayMs *= backoffRate;\\n        }\\n    }\\n}\\n\\n/** Helper to log a message, and optionally also tprint it and toast it\\n * @param {NS} ns - The nestcript instance passed to your script's main entry point */\\nexport function log(ns, message = \\\"\\\", alsoPrintToTerminal = false, toastStyle = \\\"\\\", maxToastLength = 100) {\\n    checkNsInstance(ns, '\\\"log\\\"');\\n    ns.print(message);\\n    if (alsoPrintToTerminal) ns.tprint(message);\\n    if (toastStyle) ns.toast(message.length <= maxToastLength ? message : message.substring(0, maxToastLength - 3) + \\\"...\\\", toastStyle);\\n    return message;\\n}\\n\\n/** Helper to get a list of all hostnames on the network\\n * @param {NS} ns - The nestcript instance passed to your script's main entry point */\\nexport function scanAllServers(ns) {\\n    checkNsInstance(ns, '\\\"scanAllServers\\\"');\\n    let discoveredHosts = []; // Hosts (a.k.a. servers) we have scanned\\n    let hostsToScan = [\\\"home\\\"]; // Hosts we know about, but have no yet scanned\\n    let infiniteLoopProtection = 9999; // In case you mess with this code, this should save you from getting stuck\\n    while (hostsToScan.length > 0 && infiniteLoopProtection-- > 0) { // Loop until the list of hosts to scan is empty\\n        let hostName = hostsToScan.pop(); // Get the next host to be scanned\\n        for (const connectedHost of ns.scan(hostName)) // \\\"scan\\\" (list all hosts connected to this one)\\n            if (!discoveredHosts.includes(connectedHost)) // If we haven't already scanned this host\\n                hostsToScan.push(connectedHost); // Add it to the queue of hosts to be scanned\\n        discoveredHosts.push(hostName); // Mark this host as \\\"scanned\\\"\\n    }\\n    return discoveredHosts; // The list of scanned hosts should now be the set of all hosts in the game!\\n}\\n\\n/** @param {NS} ns \\n * Get a dictionary of active source files, taking into account the current active bitnode as well. **/\\nexport async function getActiveSourceFiles(ns) {\\n    return await getActiveSourceFiles_Custom(ns, getNsDataThroughFile);\\n}\\n\\n/** @param {NS} ns \\n * getActiveSourceFiles Helper that allows the user to pass in their chosen implementation of getNsDataThroughFile to minimize RAM usage **/\\nexport async function getActiveSourceFiles_Custom(ns, fnGetNsDataThroughFile) {\\n    checkNsInstance(ns, '\\\"getActiveSourceFiles\\\"');\\n    let tempFile = '/Temp/owned-source-files.txt';\\n    // Find out what source files the user has unlocked\\n    let dictSourceFiles;\\n    try { await fnGetNsDataThroughFile(ns, `Object.fromEntries(ns.getOwnedSourceFiles().map(sf => [sf.n, sf.lvl]))`, tempFile); } catch { }\\n    if (!dictSourceFiles) { // Bit of a hack, but if RAM is so low that this fails, we can fallback to using an older version of this file, and even assuming we have no source files.\\n        dictSourceFiles = ns.read(tempFile)\\n        dictSourceFiles = dictSourceFiles ? JSON.parse(dictSourceFiles) : {};\\n    }\\n    // If the user is currently in a given bitnode, they will have its features unlocked\\n    dictSourceFiles[(await fnGetNsDataThroughFile(ns, 'ns.getPlayer()', '/Temp/player-info.txt')).bitNodeN] = 3;\\n    return dictSourceFiles;\\n}\\n\\n/** @param {NS} ns \\n * Return bitnode multiplers, or null if they cannot be accessed. **/\\nexport async function tryGetBitNodeMultipliers(ns) {\\n    return await tryGetBitNodeMultipliers_Custom(ns, getNsDataThroughFile);\\n}\\n\\n/** @param {NS} ns\\n * tryGetBitNodeMultipliers Helper that allows the user to pass in their chosen implementation of getNsDataThroughFile to minimize RAM usage **/\\nexport async function tryGetBitNodeMultipliers_Custom(ns, fnGetNsDataThroughFile) {\\n    checkNsInstance(ns, '\\\"tryGetBitNodeMultipliers\\\"');\\n    let canGetBitNodeMultipliers = false;\\n    try { canGetBitNodeMultipliers = 5 in (await getActiveSourceFiles_Custom(ns, fnGetNsDataThroughFile)); } catch { }\\n    if (!canGetBitNodeMultipliers) return null;\\n    try { return await fnGetNsDataThroughFile(ns, 'ns.getBitNodeMultipliers()', '/Temp/bitnode-multipliers.txt'); } catch { }\\n    return null;\\n}\\n\\n/** @param {NS} ns \\n * Returns a helpful error message if we forgot to pass the ns instance to a function */\\nexport function checkNsInstance(ns, fnName = \\\"this function\\\") { if (!ns.print) throw `The first argument to ${fnName} should be a 'ns' instance.`; return ns; }\",\"filename\":\"helpers.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4.4,\"server\":\"home\",\"moduleSequenceNumber\":125,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"run\",\"cost\":1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"isRunning\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"ps\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { formatMoney, formatRam, tryGetBitNodeMultipliers } from './helpers.js'\\n\\n// The purpose of the host manager is to buy the best servers it can\\n// until it thinks RAM is underutilized enough that you don't need to anymore.\\n\\n// the max server ram you can buy (it's a petabyte) as an exponent (power of 2)\\nlet maxPurchasableServerRamExponent = 20;\\n// the max number of servers you can have in your farm\\nlet maxPurchasedServers = 25;\\n// Don't attempt to buy any new servers if we're under this utilization\\nlet utilizationTarget = 0.5;\\n// Keep at least this much money on hand (so we arent blocked from buying necessary things)\\nlet reservedMoneyAmount = 0; //250000000; // Enable if needed (Can also use reserve.txt)\\nlet reservedMoneyPercent = 0.9; // Don't spend more than 1% of our money on temporary RAM\\nlet minRamExponent = 10;\\n// The name to give all purchased servers. Also used to determine which servers were purchased\\nconst purchasedServerName = \\\"daemon\\\";\\n// Use experimental reserve-by-time adjustment.\\nlet varyReservebyTime = false;\\n\\n// Frequency of update\\nconst interval = 10000;\\n\\nlet _ns = null;\\nlet keepRunning = false;\\nlet options;\\nlet bitnodeMults;\\n\\nconst argsSchema = [\\n    ['c', false], // Set to true to run continuously\\n    ['run-continuously', false],\\n    ['absolute-reserve', 0], // Set to reserve money\\n    ['reserve-percent', 0.9], // Set to reserve a percentage of home money\\n    ['utilization-trigger', 0.95], // the percentage utilization that will trigger an attempted purchase\\n    ['min-ram-exponent', 5], // the minimum amount of ram to purchase\\n    ['reserve-by-time', false], // Experimental exponential decay by time in the run. Starts willing to spend lots of money, falls off over time.\\n];\\n\\nexport function autocomplete(data, _) {\\n    data.flags(argsSchema);\\n    return [];\\n}\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    _ns = ns;\\n    ns.disableLog('ALL')\\n    bitnodeMults = (await tryGetBitNodeMultipliers(ns)) ?? { PurchasedServerMaxRam: 1, PurchasedServerLimit: 1 };\\n    maxPurchasableServerRamExponent = Math.round(20 + Math.log2(bitnodeMults.PurchasedServerMaxRam));\\n    maxPurchasedServers = Math.round(25 * bitnodeMults.PurchasedServerLimit);\\n\\n    options = ns.flags(argsSchema);\\n    keepRunning = options.c || options['run-continuously'];\\n    reservedMoneyAmount = options['absolute-reserve'];\\n    reservedMoneyPercent = options['reserve-percent'];\\n    utilizationTarget = options['utilization-trigger'];\\n    minRamExponent = options['min-ram-exponent'];\\n    varyReservebyTime = options['reserve-by-time'];\\n    if (!keepRunning)\\n        ns.print(`host-manager will run once. Run with argument \\\"-c\\\" to run continuously.`)\\n    do {\\n        tryToBuyBestServerPossible(ns);\\n        if (keepRunning)\\n            await ns.sleep(interval);\\n    } while (keepRunning);\\n}\\n\\n// Logging system to only print a log if it is different from the last log printed.\\nlet lastStatus = \\\"\\\";\\n\\nfunction setStatus(log) {\\n    return log != lastStatus ? _ns.print(lastStatus = log) : false;\\n}\\n\\n// Log and print to the terminal when something important happens\\nfunction announce(log, toastStyle = 'info') {\\n    _ns.print(log);\\n    _ns.tprint(log);\\n    _ns.toast(log, toastStyle);\\n}\\n\\n\\n/** @param {NS} ns \\n  * Attempts to buy a server at or better than your home machine. **/\\nfunction tryToBuyBestServerPossible(ns) {\\n    // Scan the set of all servers on the network that we own (or rooted) to get a sense of RAM utilization\\n    let rootedServers = [];\\n    let ignoredServers = [];\\n    let hostsToScan = [\\\"home\\\"];\\n    let utilizationTotal = 0;\\n    let totalMaxRam = 0;\\n    let infLoopProtection = 1000;\\n    while (hostsToScan.length > 0 && infLoopProtection-- > 0) {\\n        let hostName = hostsToScan.pop();\\n        if (rootedServers.includes(hostName) || ignoredServers.includes(hostName))\\n            continue;\\n        ns.scan(hostName).forEach(connectedHost => hostsToScan.push(connectedHost));\\n\\n        let serverMaxRam = ns.getServerMaxRam(hostName);\\n        // Don't count unrooted or useless servers\\n        if (ns.getServerMaxRam(hostName) <= 0 || ns.hasRootAccess(hostName) == false) {\\n            ignoredServers.push(hostName);\\n            continue;\\n        }\\n        rootedServers.push(hostName);\\n        totalMaxRam += serverMaxRam;\\n        utilizationTotal += ns.getServerUsedRam(hostName);\\n    }\\n    if (infLoopProtection <= 0)\\n        return announce('host-manager.js Infinite Loop Detected!', 'error');\\n\\n    // Gether up the list of servers that were previously purchased.\\n    // Note: You can request the official list of purchased servers (cost 2.25 GB RAM), but we have that commented out here.\\n    //let purchasedServers = ns.getPurchasedServers();\\n    // If you're willing to remember to always name manually purchased severs \\\"daemon\\\", then this should work\\n    //let purchasedServers = ns.getPurchasedServers();\\n    let purchasedServers = rootedServers.filter(hostName => hostName.startsWith(purchasedServerName)).sort();\\n\\n    // analyze the utilization rates\\n    let utilizationRate = utilizationTotal / totalMaxRam;\\n    setStatus(`Using ${Math.round(utilizationTotal).toLocaleString()}/${formatRam(totalMaxRam)} (` +\\n        `${(utilizationRate * 100).toFixed(1)}%) across ${rootedServers.length} servers (${purchasedServers.length} bought)`);\\n\\n    // Stop if utilization is below target. We probably don't need another server.\\n    if (utilizationRate < utilizationTarget)\\n        return;\\n\\n    // Check for other reasons not to go ahead with the purchase\\n    let prefix = 'Host-manager wants to buy another server, but ';\\n\\n    const reserve = Number.parseFloat(ns.read('reserve.txt'));\\n    let currentMoney = _ns.getServerMoneyAvailable(\\\"home\\\");\\n    let spendableMoney = currentMoney - reserve;\\n    // Reserve at least enough money to buy the final hack tool, if we do not already have it (once we do, remember and stop checking)\\n    if (!ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\n        prefix += '(reserving an extra 250M for SQLInject) ';\\n        spendableMoney = Math.max(0, spendableMoney - 250000000);\\n    }\\n    // Additional reservations\\n    // Vary reservation by time since augment. \\n    // Decay factor of 0.2 = Starts willing to spend 95% of our money, backing down to ~75% at 1 hour, ~60% at 2 hours, ~25% at 6 hours, and ~10% at 10 hours.\\n    // Decay factor of 0.3 = Starts willing to spend 95% of our money, backing down to ~66% at 1 hour, ~45% at 2 hours, ~23% at 4 hours, ~10% at 6 hours\\n    // Decay factor of 0.5 = Starts willing to spend 95% of our money, then halving every hour (to ~48% at 1 hour, ~24% at 2 hours, ~12% at 3 hours, etc)\\n    let t = ns.getTimeSinceLastAug() / (60 * 60 * 1000); // Time since last aug, in hours.\\n    let decayFactor = 0.5\\n    if (varyReservebyTime) reservedMoneyPercent = 1 - 0.95 * Math.pow(1 - decayFactor, t);\\n\\n    spendableMoney = Math.max(0, Math.min(spendableMoney * (1 - reservedMoneyPercent), spendableMoney - reservedMoneyAmount));\\n    if (spendableMoney == 0)\\n        return setStatus(prefix + 'all cash is currently reserved.');\\n\\n    // Determine the most ram we can buy with this money\\n    let exponentLevel = 1;\\n    for (; exponentLevel < maxPurchasableServerRamExponent; exponentLevel++)\\n        if (ns.getPurchasedServerCost(Math.pow(2, exponentLevel + 1)) > spendableMoney)\\n            break;\\n\\n    let maxRamPossibleToBuy = Math.pow(2, exponentLevel);\\n\\n    // Abort if it would put us below our reserve (shouldn't happen, since we calculated how much to buy based on reserve amount)\\n    let cost = ns.getPurchasedServerCost(maxRamPossibleToBuy);\\n    if (spendableMoney < cost)\\n        return setStatus(prefix + 'spendableMoney (' + formatMoney(spendableMoney) + ') is less than the cost (' + formatMoney(cost) + ')');\\n\\n    if (exponentLevel < minRamExponent)\\n        return setStatus(`${prefix}The highest ram exponent we can afford (2^${exponentLevel} for ${formatMoney(cost)}) on our budget of ${formatMoney(spendableMoney)} ` +\\n            `is less than the minimum ram exponent (2^${minRamExponent} for ${formatMoney(ns.getPurchasedServerCost(Math.pow(2, minRamExponent)))})'`);\\n\\n    // Under some conditions, we consider the new server \\\"not worthwhile\\\". but only if it isn't the biggest possible server we can buy\\n    if (exponentLevel < maxPurchasableServerRamExponent - 1) { // -1 To give a buffer if we don't have SF5, because several bitnodes lower the max exponent by 1\\n        // Abort if our home server is more than 2x bettter (rough guage of how much we 'need' Daemon RAM at the current stage of the game?)\\n        // Unless we're looking at buying the maximum purchasable server size - in which case we can do no better\\n        if (maxRamPossibleToBuy < ns.getServerMaxRam(\\\"home\\\") / 4)\\n            return setStatus(prefix + 'the most RAM we can buy (' + formatRam(maxRamPossibleToBuy) + ') on our budget of ' + formatMoney(spendableMoney) + ' is way less than (<0.25*) home RAM ' + formatRam(ns.getServerMaxRam(\\\"home\\\")));\\n        // Abort if purchasing this server wouldn't improve our total RAM by more than 10% (ensures we buy in meaningful increments)\\n        if (maxRamPossibleToBuy / totalMaxRam < 0.1)\\n            return setStatus(prefix + 'the most RAM we can buy (' + formatRam(maxRamPossibleToBuy) + ') on our budget of ' + formatMoney(spendableMoney) + ' is less than 10% of total available RAM ' + formatRam(totalMaxRam) + ')');\\n    }\\n\\n    let maxPurchasableServerRam = Math.pow(2, maxPurchasableServerRamExponent)\\n    let worstServerName = null;\\n    let worstServerRam = maxPurchasableServerRam;\\n    let bestServerName = null;\\n    let bestServerRam = 0;\\n    for (const server of purchasedServers) {\\n        let ram = ns.getServerMaxRam(server);\\n        if (ram < worstServerRam) {\\n            worstServerName = server;\\n            worstServerRam = ram;\\n        }\\n        if (ram >= bestServerRam) {\\n            bestServerName = server;\\n            bestServerRam = ram;\\n        }\\n    }\\n\\n    // Abort if our worst previously-purchased server is better than the one we're looking to buy (ensures we buy in sane increments of capacity)\\n    if (worstServerName != null && maxRamPossibleToBuy < worstServerRam)\\n        return setStatus(prefix + 'the most RAM we can buy (' + formatRam(maxRamPossibleToBuy) +\\n            ') on our budget of ' + formatMoney(spendableMoney) + ' is less than our worst purchased server ' + worstServerName + '\\\\'s RAM ' + formatRam(worstServerRam));\\n    // Only buy new servers as good as or better than our best bought server (anything less is considered a regression in value)\\n    if (bestServerRam != null && maxRamPossibleToBuy < bestServerRam)\\n        return setStatus(prefix + 'the most RAM we can buy (' + formatRam(maxRamPossibleToBuy) +\\n            ') on our budget of ' + formatMoney(spendableMoney) + ' is less than our previously purchased server ' + bestServerName + \\\" RAM \\\" + formatRam(bestServerRam));\\n\\n    // if we're at capacity, check to see if we can do better better than the current worst purchased server. If so, delete it to make room.\\n    if (purchasedServers.length >= maxPurchasedServers) {\\n        if (worstServerRam == maxPurchasableServerRam) {\\n            keepRunning = false;\\n            return announce('All purchaseable servers are maxed.');\\n        }\\n\\n        // It's only worth deleting our old server if the new server will be 16x bigger or more (or if it's the biggest we can buy)\\n        if (exponentLevel == maxPurchasableServerRamExponent || worstServerRam * 16 <= maxRamPossibleToBuy) {\\n            ns.run(\\\"remove-worst-server.js\\\");\\n            return setStatus(`hostmanager.js requested to delete server ${worstServerName} (${formatRam(worstServerRam)} RAM) ` +\\n                `to make room for a new ${formatRam(maxRamPossibleToBuy)} Server.`);\\n        } else {\\n            return setStatus(`${prefix}the most RAM we can buy (${formatRam(maxRamPossibleToBuy)}) is less than 16x the RAM ` +\\n                `of the server it must delete to make room: ${worstServerName} (${formatRam(worstServerRam)} RAM)`);\\n        }\\n    }\\n\\n    let purchasedServer = ns.purchaseServer(purchasedServerName, maxRamPossibleToBuy);\\n    if (!purchasedServer)\\n        setStatus(prefix + `Could not purchase a server with ${formatRam(maxRamPossibleToBuy)} RAM for ${formatMoney(cost)} ` +\\n            `with a budget of ${formatMoney(spendableMoney)}. This is either a bug, or we in a SF.9`);\\n    else\\n        announce('Purchased a new server ' + purchasedServer + ' with ' + formatRam(maxRamPossibleToBuy) + ' RAM for ' + formatMoney(cost), 'success');\\n}\",\"filename\":\"host-manager.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"helpers.js\",\"url\":\"blob:file:///49330e87-7739-4119-924c-e24cffd6b503\",\"moduleSequenceNumber\":125},{\"filename\":\"host-manager.js\",\"url\":\"blob:file:///01bf8edc-7da1-4b67-a2a9-c998416536f8\",\"moduleSequenceNumber\":275}],\"dependents\":[],\"ramUsage\":5.8,\"server\":\"home\",\"moduleSequenceNumber\":275,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getTimeSinceLastAug\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServerCost\",\"cost\":0.25},{\"type\":\"fn\",\"name\":\"run\",\"cost\":1},{\"type\":\"fn\",\"name\":\"purchaseServer\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"isRunning\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getNsDataThroughFile, runCommand } from './helpers.js'\\n\\n/** @param {NS} ns \\n *  Remove the worst server we own (RAM) **/\\nexport async function main(ns) {\\n    let worstServerName = null;\\n    let worstServerRam = Math.pow(2, 20);\\n    let purchasedServers = await getNsDataThroughFile(ns, 'ns.getPurchasedServers()', '/Temp/purchased-servers.txt');\\n    if (purchasedServers.length == 0) {\\n        ns.tprint(\\\"Nothing to delete - you have purchased no servers.\\\");\\n        return;\\n    }\\n    purchasedServers.forEach(serverName => {\\n        let ram = ns.getServerMaxRam(serverName);\\n        if (ram < worstServerRam) {\\n            worstServerName = serverName;\\n            worstServerRam = ram;\\n        }\\n    });\\n    if (worstServerName == null) {\\n        ns.tprint(\\\"Nothing to delete - all \\\" + purchasedServers.length + \\\" servers have the maximum \\\" + worstServerRam + \\\" GB of RAM\\\");\\n        return;\\n    }\\n    // Flag the server for deletion with a file - daemon should check for this and stop scheduling against it.\\n    await runCommand(ns, `await ns.scp(\\\"/Flags/deleting.txt\\\", \\\"${worstServerName}\\\")`, '/Temp/flag-server-for-deletion.js');\\n    var success = await getNsDataThroughFile(ns, `ns.deleteServer(\\\"${worstServerName}\\\")`, '/Temp/try-delete-server-result.txt');\\n    if (success)\\n        ns.tprint(\\\"Deleted \\\" + worstServerName + \\\" which had only \\\" + worstServerRam + \\\" GB of RAM. \\\" + (purchasedServers.length - 1) + \\\" servers remain.\\\");\\n    else\\n        ns.tprint(\\\"Tried to delete \\\" + worstServerName + \\\" with \\\" + worstServerRam + \\\" GB RAM, but it failed (scripts still running)\\\");\\n}\",\"filename\":\"remove-worst-server.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.75,\"server\":\"home\",\"moduleSequenceNumber\":127,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"run\",\"cost\":1},{\"type\":\"fn\",\"name\":\"isRunning\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { parseShortNumber } from './helpers.js'\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let parsed = parseShortNumber(ns.args[0]);\\n    await ns.write('reserve.txt', parsed, \\\"w\\\");\\n    ns.tprint(`Set to reserve ${parsed.toLocaleString()}`);\\n}\",\"filename\":\"reserve.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"server\":\"home\",\"moduleSequenceNumber\":128,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { runCommand } from './helpers.js'\\n\\n/** @param {NS} ns \\n * The argument can consist of multiple commands to run. The output of the first command will automatically be printed\\n * unless a subsequent command includes '; output = ...' - in which case that result will be printed instead. **/\\nexport async function main(ns) {\\n    let args = ns.args;\\n    if (args.length == 0)\\n        return ns.tprint(\\\"You must run this script with an argument that is the code to test.\\\")\\n    // Special first argument of -s will result in \\\"silent\\\" mode - do not output the result in the success case\\n    let silent = false;\\n    if (args.includes('-s')) {\\n        silent = true;\\n        args = args.slice(args.indexOf('-s'), 1);\\n    }\\n    let firstArg = String(args[0]);\\n    let escaped = firstArg.startsWith('\\\"') && firstArg.endsWith('\\\"') || firstArg.startsWith(\\\"'\\\") && firstArg.endsWith(\\\"'\\\") || firstArg.startsWith(\\\"`\\\") && firstArg.endsWith(\\\"`\\\");\\n    let command = args == escaped ? args[0] : args.join(\\\" \\\"); // If args weren't escaped, join them together\\n    //3.6 return await runCommand(ns.run, ns.write, command, `/Temp/terminal-command.js`, !silent);\\n    return await runCommand(ns, command, `/Temp/terminal-command.js`, !silent, 1, undefined, undefined, ...args.slice(1));\\n}\",\"filename\":\"run-command.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.6,\"server\":\"home\",\"moduleSequenceNumber\":129,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"run\",\"cost\":1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"let factionServers = [\\\"CSEC\\\", \\\"avmnite-02h\\\", \\\"I.I.I.I\\\", \\\"run4theh111z\\\", \\\"w0r1d_d43m0n\\\"];\\nlet css = `<style id=\\\"scanCSS\\\">\\n        .w  {white-space:nowrap}\\n        .sc {white-space:pre; color:#ccc; font:14px monospace; line-height: 16px; }\\n        .sc .s {color:#080; cursor:pointer; text-decoration:underline}\\n        .sc .f {color:#088}\\n        .sc .r {color:#6f3}\\n        .sc .r.f {color:#0ff}\\n        .sc .r::before {color:#6f3}\\n        .sc .hack {display:inline-block; font:12px monospace}\\n        .sc .red {color:red;}\\n        .sc .green {color:green;}\\n        .sc .backdoor {color:#6f3; font:12px monospace}\\n        .sc .backdoor > a {cursor:pointer; text-decoration:underline;}\\n        .sc .cct {color:#0ff;}\\n    </style>`;\\nlet doc = eval(\\\"document\\\");\\nlet tprint = html => doc.getElementById(\\\"terminal\\\").insertAdjacentHTML('beforeend', `<li>${html}</li>`);\\n/** @param {NS} ns **/\\nexport let main = ns => {\\n    let tIn = doc.getElementById(\\\"terminal-input\\\");\\n    let tEv = tIn[Object.keys(tIn)[1]];\\n    let priorCss = doc.getElementById(\\\"scanCSS\\\");\\n    if (priorCss) priorCss.parentNode.removeChild(priorCss); // Remove old CSS to facilitate tweaking css above\\n    doc.head.insertAdjacentHTML('beforeend', css);\\n    let serverInfo = (x) => {\\n        return ns.getServer(x); // Costs 2 GB. If you can't don't need backdoor links, uncomment and use the alternate implementations below\\n        /* return {\\n            requiredHackingSkill: ns.getServerRequiredHackingLevel(x),\\n            hasAdminRights: ns.hasRootAccess(x),\\n            purchasedByPlayer: x.includes('daemon') || x.includes('hacknet'),\\n            backdoorInstalled: true // No way of knowing without ns.getServer\\n        } */\\n    }\\n    let s = [\\\"home\\\"],\\n        p = [\\\"\\\"],\\n        r = { home: \\\"home\\\" },\\n        myHack = ns.getHackingLevel(),\\n        fName = x => {\\n            let server = serverInfo(x); // Costs 2 GB. If you can't don't need backdoor links, uncomment the alternate implementations below\\n            let reqHack = server.requiredHackingSkill; // ns.getServerRequiredHackingLevel(x);\\n            let rooted = server.hasAdminRights; // ns.hasRootAccess(x);\\n            let shouldBackdoor = !server?.backdoorInstalled && reqHack <= myHack && x != 'home' && rooted && !server.purchasedByPlayer;\\n            let contracts = ns.ls(x, \\\".cct\\\"); // Find out whether there are any contracts on the server\\n            return `<span class=\\\"w\\\" id=\\\"${x}\\\">` +\\n                `<a class=\\\"s${factionServers.includes(x) ? \\\" f\\\" : \\\"\\\"}${rooted ? \\\" r\\\" : \\\"\\\"}\\\">${x}</a>\\n                <span class=\\\"hack ${(reqHack <= myHack ? 'green' : 'red')}\\\">(${reqHack})</span>\\n                ${(shouldBackdoor ? '<span class=\\\"backdoor\\\">[<a>backdoor</a>]</span>' : '')}\\n                ${contracts.map(c => `<span class=\\\"cct\\\" title=\\\"${c}\\\">@</span>`)}\\n            </span>`;\\n        };\\n    let tcommand = x => {\\n        tIn.value = x;\\n        tEv.onChange({ target: tIn });\\n        tEv.onKeyDown({ keyCode: \\\"13\\\", preventDefault: () => 0 });\\n    };\\n\\n    let addSc = (x = s[0], p1 = [\\\"\\\\n\\\"], o = p1.join(\\\"\\\") + fName(x)) => {\\n        for (let i = 0; i < s.length; i++) {\\n            if (p[i] != x) continue;\\n            let p2 = p1.slice();\\n            p2[p2.length - 1] = p2[p2.push(p.slice(i + 1).includes(p[i]) ? \\\"├╴\\\" : \\\"└╴\\\") - 2].replace(\\\"├╴\\\", \\\"│ \\\").replace(\\\"└╴\\\", \\\"  \\\");\\n            o += addSc(s[i], p2);\\n        }\\n        return o;\\n    };\\n    let ordering = (a, b) => {\\n        let d = ns.scan(a).length - ns.scan(b).length; // Sort servers with fewer connections towards the top.\\n        d = d != 0 ? d : serverInfo(b).purchasedByPlayer - serverInfo(a).purchasedByPlayer; // Purchased servers to the very top\\n        d = d != 0 ? d : a.slice(0, 2).toLowerCase().localeCompare(b.slice(0, 2).toLowerCase()); // Hack: compare just the first 2 chars to keep purchased servers in order purchased\\n        return d;\\n    }\\n    for (let i = 0, j; i < s.length; i++)\\n        for (j of ns.scan(s[i]).sort(ordering))\\n            if (!s.includes(j)) s.push(j), p.push(s[i]), r[j] = r[s[i]] + \\\";connect \\\" + j;\\n    tprint(`<div class=\\\"sc new\\\">${addSc()}</div>`);\\n    doc.querySelectorAll(\\\".sc.new .s\\\").forEach(q => q.addEventListener('click', tcommand.bind(null, r[q.childNodes[0].nodeValue])));\\n    doc.querySelectorAll(\\\".sc.new .backdoor\\\").forEach(q => q.addEventListener('click', tcommand.bind(null, r[q.parentNode.childNodes[0].childNodes[0].nodeValue] + \\\";backdoor\\\")));\\n    doc.querySelector(\\\".sc.new\\\").classList['remove'](\\\"new\\\");\\n};\\n\",\"filename\":\"scan.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"scan.js\",\"url\":\"blob:file:///d5921012-c9fd-489d-9bb7-aa061993a4f6\",\"moduleSequenceNumber\":795}],\"dependents\":[],\"ramUsage\":4.05,\"server\":\"home\",\"moduleSequenceNumber\":130,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getNsDataThroughFile, formatMoney, formatDuration, disableLogs } from './helpers.js'\\n\\nconst interval = 5000; // Uodate (tick) this often\\nconst minTaskWorkTime = 59000; // Sleeves assigned a new task should stick to it for at least this many milliseconds\\nconst tempFile = '/Temp/sleeve-set-task.txt';\\nconst crimes = ['mug', 'homicide']\\nconst works = ['security', 'field', 'hacking']; // When doing faction work, we prioritize physical work since sleeves tend towards having those stats be highest\\nconst workByFaction = {}\\n\\nlet options;\\nconst argsSchema = [\\n    ['shock-recovery', 0.25], // Set to a number between 0 and 1 to devote that much time to shock recovery\\n    ['crime', ''],\\n    ['aug-budget', 0.1], // Spend up to this much of current cash on augs per tick (Default is high, because these are permanent for the rest of the BN)\\n    ['buy-cooldown', 60 * 1000], // Must wait this may milliseconds before buying more augs for a sleeve\\n    ['min-aug-batch', 20], // Must be able to afford at least this many augs before we pull the trigger (or fewer if buying all remaining augs)\\n];\\n\\nexport function autocomplete(data, _) {\\n    data.flags(argsSchema);\\n    return [];\\n}\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    options = ns.flags(argsSchema);\\n    disableLogs(ns, ['getServerMoneyAvailable']);\\n    if (!crimes.includes(options.crime)) crimes.push(options.crime);\\n    let task = [], lastUpdate = [], lastPurchase = [], availableAugs = [], lastReassign = [];\\n\\n    // Collect info that won't change or that we can track ourselves going forward\\n    let numSleeves;\\n    try {\\n        numSleeves = await getNsDataThroughFile(ns, `ns.sleeve.getNumSleeves()`, '/Temp/sleeve-count.txt');\\n    } catch {\\n        return ns.print(\\\"User does not appear to have access to sleeves. Exiting...\\\");\\n    }\\n    for (let i = 0; i < numSleeves; i++)\\n        availableAugs[i] = null;\\n\\n    while (true) {\\n        let cash = ns.getServerMoneyAvailable(\\\"home\\\") - Number(ns.read(\\\"reserve.txt\\\"));\\n        let budget = cash * options['aug-budget'];\\n        let playerInfo = await getNsDataThroughFile(ns, 'ns.getPlayer()', '/Temp/player-info.txt')\\n        for (let i = 0; i < numSleeves; i++) {\\n            let sleeveStats = ns.sleeve.getSleeveStats(i);\\n            let shock = sleeveStats.shock;\\n            let sync = sleeveStats.sync;\\n            // Manage Augmentations\\n            if (shock == 0 && availableAugs[i] == null) // No augs are available augs until shock is 0\\n                availableAugs[i] = (await getNsDataThroughFile(ns, `ns.sleeve.getSleevePurchasableAugs(${i})`, '/Temp/sleeve-augs.txt')).sort((a, b) => a.cost - b.cost); // list of { name, cost }\\n            if (shock == 0 && availableAugs[i].length > 0) {\\n                const cooldownLeft = Math.max(0, options['buy-cooldown'] - (Date.now() - (lastPurchase[i] || 0)));\\n                const [batchCount, batchCost] = availableAugs[i].reduce(([n, c], aug) => c + aug.cost <= budget ? [n + 1, c + aug.cost] : [n, c], [0, 0]);\\n                const purchaseUpdate = `sleeve ${i} can afford ${batchCount.toFixed(0).padStart(2)}/${availableAugs[i].length.toFixed(0).padEnd(2)} remaining augs (cost ${formatMoney(batchCost)} of ` +\\n                    `${formatMoney(availableAugs[i].reduce((t, aug) => t + aug.cost, 0))}).`;\\n                if (lastUpdate[i] != purchaseUpdate)\\n                    log(ns, `INFO: With budget ${formatMoney(budget)}, ` + (lastUpdate[i] = purchaseUpdate) + ` (Min batch size: ${options['min-aug-batch']}, Cooldown: ${formatDuration(cooldownLeft)})`);\\n                if (cooldownLeft == 0 && batchCount > 0 && ((batchCount >= availableAugs[i].length - 1) || batchCount >= options['min-aug-batch'])) { // Don't require the last aug it's so much more expensive\\n                    let strAction = `Purchase ${batchCount} augmentations for sleeve ${i} at total cost of ${formatMoney(batchCost)}`;\\n                    let toPurchase = availableAugs[i].splice(0, batchCount);\\n                    budget -= batchCost;\\n                    if (await getNsDataThroughFile(ns, JSON.stringify(toPurchase.map(a => a.name)) +\\n                        `.reduce((s, aug) => s && ns.sleeve.purchaseSleeveAug(${i}, aug), true)`, '/Temp/sleeve-purchase.txt'))\\n                        log(ns, `SUCCESS: ${strAction}`, 'success');\\n                    else log(ns, `ERROR: Failed to ${strAction}`, 'error');\\n                    lastPurchase[i] = Date.now();\\n                }\\n            }\\n            // Manage what this sleeve should be doing\\n            let command, designatedTask;\\n            if (sync < 100) { // Synchronize\\n                designatedTask = \\\"synchronize\\\";\\n                command = `ns.sleeve.setToSynchronize(${i})`;\\n                if (task[i] == designatedTask && Date.now() - (lastUpdate[i] ?? 0) > minTaskWorkTime) {\\n                    log(ns, `INFO: Sleeve ${i} is syncing... ${sync.toFixed(2)}%`);\\n                    lastUpdate[i] = Date.now();\\n                }\\n            } else if (shock > 0 && options['shock-recovery'] > 0 && Math.random() < options['shock-recovery']) { // Recover from shock\\n                designatedTask = \\\"recover from shock\\\";\\n                command = `ns.sleeve.setToShockRecovery(${i})`;\\n                if (task[i] == designatedTask && Date.now() - (lastUpdate[i] ?? 0) > minTaskWorkTime) {\\n                    log(ns, `INFO: Sleeve ${i} is recovering from shock... ${shock.toFixed(2)}%`);\\n                    lastUpdate[i] = Date.now();\\n                }\\n            } else if (i == 0 && playerInfo.isWorking && playerInfo.workType == \\\"Working for Faction\\\") { // If player is currently working for faction rep, sleeves 0 shall help him out (only one sleeve can work for a faction)\\n                // TODO: We should be able to borrow logic from work-for-factions.js to have more sleeves work for useful factions / companies\\n                let work = works[workByFaction[playerInfo.currentWorkFactionName] || 0];\\n                designatedTask = `work for faction '${playerInfo.currentWorkFactionName}' (${work})`;\\n                command = `ns.sleeve.setToFactionWork(${i}, '${playerInfo.currentWorkFactionName}', '${work}')`; // TODO: Auto-determine the most productive faction work to do?\\n            } else if (i == 0 && playerInfo.isWorking && playerInfo.workType == \\\"Working for Company\\\") { // If player is currently working for a company rep, sleeves 0 shall help him out (only one sleeve can work for a company)\\n                designatedTask = `work for company '${playerInfo.companyName}'`;\\n                command = `ns.sleeve.setToCompanyWork(${i}, '${playerInfo.companyName}')`;\\n            } else { // Do something productive\\n                let crime = options.crime || (sleeveStats.strength < 100 ? 'mug' : 'homicide');\\n                designatedTask = `commit ${crime}`;\\n                command = `ns.sleeve.setToCommitCrime(${i}, '${crime}')`;\\n            }\\n            // Don't change tasks if we've changed tasks recently\\n            if (Date.now() - (lastReassign[i] || 0) < minTaskWorkTime || task[i] == designatedTask) continue;\\n            // Start doing the specified task\\n            let strAction = `Set sleeve ${i} to ${designatedTask}`;\\n            if (await getNsDataThroughFile(ns, command, tempFile)) {\\n                task[i] = designatedTask;\\n                lastReassign[i] = Date.now();\\n                log(ns, `SUCCESS: ${strAction}`);\\n            } else {\\n                // If working for faction / company, it's possible he current work isn't supported, so try the next one.\\n                if (designatedTask.startsWith('work for faction')) {\\n                    log(ns, `WARN: Failed to ${strAction} - work type may not be supported.`, 'warning');\\n                    workByFaction[playerInfo.currentWorkFactionName] = (workByFaction[playerInfo.currentWorkFactionName] || 0) + 1;\\n                } else\\n                    log(ns, `ERROR: Failed to ${strAction}`, 'error');\\n            }\\n        }\\n        await ns.sleep(interval);\\n    }\\n}\\n\\nfunction log(ns, log, toastStyle, printToTerminal) {\\n    ns.print(log);\\n    if (toastStyle) ns.toast(log, toastStyle);\\n    if (printToTerminal) ns.tprint(log);\\n}\",\"filename\":\"sleeve.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":6.8,\"server\":\"home\",\"moduleSequenceNumber\":131,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"sleeve.getSleeveStats\",\"cost\":4},{\"type\":\"fn\",\"name\":\"run\",\"cost\":1},{\"type\":\"fn\",\"name\":\"isRunning\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { disableLogs, formatDuration } from './helpers.js'\\n\\nconst argsSchema = [\\n    ['v', false], // Verbose\\n    ['verbose', false],\\n    ['l', false], // Turn all hashes into money\\n    ['liquidate', false],\\n    ['interval', 1000], // Rate at which the program runs and spends hashes\\n    ['spend-on', 'Sell for Money'],\\n    ['spend-on-server', undefined],\\n];\\n\\nconst purchaseOptions = ['Sell for Money', 'Sell for Corporation Funds', 'Exchange for Corporation Research', 'Generate Coding Contract', 'Improve Studying', 'Improve Gym Training'];\\n\\nexport function autocomplete(data, args) {\\n    data.flags(argsSchema);\\n    const lastFlag = args.length > 1 ? args[args.length - 2] : null;\\n    if (lastFlag == \\\"--spend-on\\\") // Provide a couple auto-complete options to facilitate these arguments with spaces in them\\n        return purchaseOptions.map(f => f.replaceAll(\\\" \\\", \\\"_\\\")).sort().concat(purchaseOptions.map(f => `'${f}'`).sort());\\n    return [];\\n}\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    const options = ns.flags(argsSchema);\\n    const verbose = options.v || options.verbose;\\n    const liquidate = options.l || options.liquidate;\\n    const interval = options.interval;\\n    const toBuy = options['spend-on'].replaceAll(\\\"_\\\", \\\" \\\");\\n    const spendOnServer = options['spend-on-server']?.replaceAll(\\\"_\\\", \\\" \\\") ?? undefined;\\n    disableLogs(ns, ['sleep']);\\n    ns.print(`Starting spend-hacknet-hashes.js to ensure no hashes go unspent. Will check in every ${formatDuration(interval)}`);\\n    ns.print(liquidate ? `-l --liquidate mode active! Will spend all hashes on money as soon as possible.` :\\n        `Only spending hashes every when near capacity to avoid wasting them.`);\\n    while (true) {\\n        let capacity = ns.hacknet.hashCapacity() || 0;\\n        let startingHashes = ns.hacknet.numHashes() || 0;\\n        let nodes = ns.hacknet.numNodes();\\n        if (capacity == 0 && nodes > 0)\\n            return ns.print('We have hacknet nodes, not hacknet servers, so spending hashes is not applicable.');\\n\\n        let globalProduction = Array.from({ length: nodes }, (_, i) => ns.hacknet.getNodeStats(i))\\n            .reduce((total, node) => total + node.production, 0);\\n        //ns.print(`Current hacknet production: ${globalProduction.toPrecision(3)}...`);\\n        // Spend hashes before we lose them\\n        let reserve = 10 + globalProduction * interval / 1000; // If we are this far from our capacity, start spending\\n        let success = true;\\n        while (success && ns.hacknet.numHashes() > (liquidate ? 4 : capacity - reserve))\\n            success = ns.hacknet.spendHashes(toBuy, spendOnServer);\\n        if (!success)\\n            ns.print(`Weird, failed to spend hashes. (Have: ${ns.hacknet.numHashes()} Capacity: ${ns.hacknet.hashCapacity()}`);\\n        if (verbose && ns.hacknet.numHashes() < startingHashes)\\n            ns.print(`Spent ${(startingHashes - ns.hacknet.numHashes()).toFixed(0)} hashes` +\\n                (liquidate ? '' : ` to avoid reaching capacity (${capacity})`) + ` at ${globalProduction.toPrecision(3)} hashes per second`);\\n        await ns.sleep(interval);\\n    }\\n}\",\"filename\":\"spend-hacknet-hashes.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":5.6,\"server\":\"home\",\"moduleSequenceNumber\":132,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"ns\",\"name\":\"hacknet\",\"cost\":4}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getNsDataThroughFile, disableLogs, formatNumberShort, getFilePath, waitForProcessToComplete } from './helpers.js'\\n\\nconst maxCharges = 10000; // Don't bother adding charges beyond this amount (diminishing returns - num charges is ^0.07 )\\n\\n/** @param {NS} ns \\n * Maximizes charge on staney fragments based on current home RAM.\\n * IMPORTANT: You should have no other scripts running on home while you do this. **/\\nexport async function main(ns) {\\n    disableLogs(ns, ['sleep', 'run', 'getServerMaxRam', 'getServerUsedRam'])\\n    while (true) {\\n        let fragments = await getNsDataThroughFile(ns, 'ns.stanek.activeFragments()', '/Temp/stanek-fragments.txt'); //ns.stanek.activeFragments();\\n        for (const fragment of fragments)\\n            ns.print(`Fragment ${String(fragment.id).padStart(2)} at [${fragment.x},${fragment.y}] ` +\\n                `charge num: ${formatNumberShort(fragment.numCharge)} avg: ${formatNumberShort(fragment.avgCharge)}`);\\n        for (const fragment of fragments) {\\n            const threads = Math.floor((ns.getServerMaxRam('home') - ns.getServerUsedRam('home')) / 2.0);\\n            // Only charge if we will not be bringing down the average\\n            if (threads < fragment.avgCharge || fragment.numCharge > maxCharges) continue;\\n            const pid = ns.run(getFilePath('/stanek.js.charge.js'), threads, fragment.x, fragment.y);\\n            await waitForProcessToComplete(ns, pid);\\n        }\\n        await ns.sleep(1000);\\n    }\\n}\",\"filename\":\"stanek.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.8,\"server\":\"home\",\"moduleSequenceNumber\":133,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"run\",\"cost\":1},{\"type\":\"fn\",\"name\":\"isRunning\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    await ns.stanek.charge(ns.args[0], ns.args[1]);\\n}\",\"filename\":\"stanek.js.charge.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2,\"server\":\"home\",\"moduleSequenceNumber\":134,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"stanek.charge\",\"cost\":0.4}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns \\n * Reset all charges without losing the current placement / positioning of fragments **/\\nexport async function main(ns) {\\n    for (const fragment of ns.stanek.activeFragments()) {\\n        const [id, x, y, r] = [fragment.id, fragment.x, fragment.y, fragment.rotation];\\n        ns.stanek.remove(x, y);\\n        ns.stanek.place(x, y, r, id);\\n    }\\n}\",\"filename\":\"stanek.js.reset.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":11.75,\"server\":\"home\",\"moduleSequenceNumber\":135,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"stanek.activeFragments\",\"cost\":5},{\"type\":\"fn\",\"name\":\"stanek.remove\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"stanek.place\",\"cost\":5}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { formatNumberShort, formatMoney, getNsDataThroughFile, getActiveSourceFiles } from './helpers.js'\\n\\nconst argsSchema = [\\n    ['hide-stocks', false],\\n];\\n\\nexport function autocomplete(data, args) {\\n    data.flags(argsSchema);\\n    return [];\\n}\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    const options = ns.flags(argsSchema);\\n    const doc = eval('document');\\n    const hook0 = doc.getElementById('overview-extra-hook-0');\\n    const hook1 = doc.getElementById('overview-extra-hook-1');\\n    let stkSymbols = null;\\n    let dictSourceFiles = await getActiveSourceFiles(ns); // Find out what source files the user has unlocked\\n    let playerInfo = (await getNsDataThroughFile(ns, 'ns.getPlayer()', '/Temp/player-info.txt'));\\n    if (!options['hide-stocks'] && playerInfo.hasTixApiAccess) // Auto-disabled if we do not have the TSK API\\n        stkSymbols = await getNsDataThroughFile(ns, `ns.stock.getSymbols()`, '/Temp/stock-symbols.txt');\\n    // Main stats update loop\\n    while (true) {\\n        try {\\n            const headers = []\\n            const values = [];\\n\\n            if (9 in dictSourceFiles) { // Section not relevant if you don't have access to hacknet servers\\n                const hashes = await getNsDataThroughFile(ns, '[ns.hacknet.numHashes(), ns.hacknet.hashCapacity()]', '/Temp/hash-stats.txt')\\n                if (hashes[1] > 0) {\\n                    headers.push(\\\"Hashes\\\");\\n                    values.push(`${formatNumberShort(hashes[0], 3, 1)}/${formatNumberShort(hashes[1], 3, 1)}`);\\n                }\\n                // Detect and notify the HUD if we are liquidating\\n                if (ns.ps(\\\"home\\\").some(p => p.filename.includes('spend-hacknet-hashes') && (p.args.includes(\\\"--liquidate\\\") || p.args.includes(\\\"-l\\\")))) {\\n                    headers.splice(1, 0, \\\" \\\");\\n                    values.push(\\\"Liquidating\\\");\\n                }\\n            }\\n\\n            if (stkSymbols && !doc.getElementById(\\\"stock-display-1\\\")) { // Don't add stocks if unavailable or the stockmaster HUD is active\\n                const stkPortfolio = await getNsDataThroughFile(ns, JSON.stringify(stkSymbols) +\\n                    `.map(sym => ({ sym, pos: ns.stock.getPosition(sym), ask: ns.stock.getAskPrice(sym), bid: ns.stock.getBidPrice(sym) }))` +\\n                    `.reduce((total, stk) => total + stk.pos[0] * stk.bid + stk.pos[2] * (stk.pos[3] * 2 - stk.ask) -100000 * (stk.pos[0] + stk.pos[2] > 0 ? 1 : 0), 0)`,\\n                    '/Temp/stock-portfolio-value.txt');\\n                if (stkPortfolio > 0) { // Don't bother showing a section for stock if we aren't holding anything\\n                    headers.push(\\\"Stock\\\");\\n                    values.push(formatMoney(stkPortfolio));\\n                }\\n            }\\n            headers.push(\\\"ScrInc\\\");\\n            values.push(formatMoney(ns.getScriptIncome()[0], 3, 2) + '/sec');\\n\\n            headers.push(\\\"ScrExp\\\");\\n            values.push(formatNumberShort(ns.getScriptExpGain(), 3, 2) + '/sec');\\n\\n            if (2 in dictSourceFiles) { // Gang income is only relevant once gangs are unlocked\\n                const gangInfo = await getNsDataThroughFile(ns, 'ns.gang.inGang() ? ns.gang.getGangInformation() : false', '/Temp/gang-stats.txt');\\n                if (gangInfo !== false) {\\n                    headers.push(\\\"Gang\\\");\\n                    values.push(formatMoney(gangInfo.moneyGainRate * 5, 3, 2) + '/sec');\\n                }\\n            }\\n\\n            const karma = ns.heart.break();\\n            if (karma <= -9) {\\n                headers.push(\\\"Karma\\\");\\n                values.push(formatNumberShort(karma, 3, 2));\\n            }\\n\\n            const sharePower = ns.getSharePower();\\n            if (sharePower > 1) {\\n                headers.push(\\\"Share Pwr\\\");\\n                values.push(formatNumberShort(sharePower, 3, 2));\\n            }\\n\\n            hook0.innerText = headers.join(\\\" \\\\n\\\");\\n            hook1.innerText = values.join(\\\"\\\\n\\\");\\n        } catch (err) { // Might run out of ram from time to time, since we use it dynamically\\n            ns.print(\\\"ERROR: Update Skipped: \\\" + String(err));\\n        }\\n        await ns.sleep(1000);\\n    }\\n}\",\"filename\":\"stats.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"helpers.js\",\"url\":\"blob:file:///fcf8fb28-f2b5-4e57-bdd7-835b65f473c3\",\"moduleSequenceNumber\":125},{\"filename\":\"stats.js\",\"url\":\"blob:file:///9e4cd72e-bdf3-4f36-8f05-e9554ff8f2cc\",\"moduleSequenceNumber\":226}],\"dependents\":[],\"ramUsage\":3.3,\"server\":\"home\",\"moduleSequenceNumber\":226,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"ps\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getScriptIncome\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getScriptExpGain\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getSharePower\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"run\",\"cost\":1},{\"type\":\"fn\",\"name\":\"isRunning\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {\\n    formatMoney, formatNumberShort, formatDuration,\\n    getNsDataThroughFile, runCommand, getActiveSourceFiles, tryGetBitNodeMultipliers\\n} from './helpers.js'\\n\\nlet disableShorts = false;\\nlet commission = 100000; // Buy/sell commission. Expected profit must exceed this to buy anything.\\nlet totalProfit = 0.0; // We can keep track of how much we've earned since start.\\nlet lastLog = \\\"\\\"; // We update faster than the stock-market ticks, but we don't log anything unless there's been a change\\nlet allStockSymbols = []; // Stores the set of all symbols collected at start\\nlet mock = false; // If set to true, will \\\"mock\\\" buy/sell but not actually buy/sell anythingorecast\\nlet noisy = false; // If set to true, tprints and announces each time stocks are bought/sold\\nlet dictSourceFiles; // Populated at init, a dictionary of source-files the user has access to, and their level\\n// Pre-4S configuration (influences how we play the stock market before we have 4S data, after which everything's fool-proof)\\nlet showMarketSummary = false;  // If set to true, will always generate and display the pre-4s forecast table in a separate tail window\\nlet minTickHistory; // This much history must be gathered before we will offer a stock forecast.\\nlet longTermForecastWindowLength; // This much history will be used to determine the historical probability of the stock (so long as no inversions are detected)\\nlet nearTermForecastWindowLength; // This much history will be used to detect recent negative trends and act on them immediately.\\n// The following pre-4s constants are hard-coded (not configurable via command line) but may require tweaking\\nconst marketCycleLength = 75; // Every this many ticks, all stocks have a 45% chance of \\\"reversing\\\" their probability. Something we must detect and act on quick to not lose profits.\\nconst maxTickHistory = 151; // This much history will be kept for purposes of detemining volatility and perhaps one day pinpointing the market cycle tick\\nconst inversionDetectionTolerance = 0.10; // If the near-term forecast is within this distance of (1 - long-term forecast), consider it a potential \\\"inversion\\\"\\nconst inversionLagTolerance = 5; // An inversion is \\\"trusted\\\" up to this many ticks after the normal nearTermForecastWindowLength expected detection time\\n// (Note: 33 total stocks * 45% inversion chance each cycle = ~15 expected inversions per cycle)\\n// The following pre-4s values are set during the lifetime of the program\\nlet marketCycleDetected = false; // We should not make risky purchasing decisions until the stock market cycle is detected. This can take a long time, but we'll be thanked\\nlet detectedCycleTick = 0; // This will be reset to zero once we've detected the market cycle point.\\nlet inversionAgreementThreshold = 6; // If this many stocks are detected as being in an \\\"inversion\\\", consider this the stock market cycle point\\nconst expectedTickTime = 6000;\\nconst catchUpTickTime = 4000;\\nlet lastTick = 0;\\nlet sleepInterval = 1000;\\n\\n\\nconst argsSchema = [\\n    ['l', false], // Stop any other running stockmaster.js instances and sell all stocks\\n    ['liquidate', false],\\n    ['mock', false], // If set to true, will \\\"mock\\\" buy/sell but not actually buy/sell anything\\n    ['noisy', false], // If set to true, tprints and announces each time stocks are bought/soldgetHostnames\\n    ['disable-shorts', false], // If set to true, will \\\"mock\\\" buy/sell but not actually buy/sell anything\\n    ['reserve', 0], // A fixed amount of money to not spend\\n    ['fracB', 0.4], // Fraction of assets to have as liquid before we consider buying more stock\\n    ['fracH', 0.4], // Fraction of assets to retain as cash in hand when buying\\n    ['buy-threshold', 0.0005], // Buy only stocks forecasted to earn better than a 0.01% return (1 Basis Point)\\n    ['sell-threshold', 0], // Sell stocks forecasted to earn less than this return (default 0% - which happens when prob hits 50% or worse)\\n    ['diversification', 0.34], // Before we have 4S data, we will not hold more than this fraction of our portfolio as a single stock\\n    ['disableHud', false], // Disable showing stock value in the HUD panel\\n    // The following settings are related only to tweaking pre-4s stock-market logic\\n    ['show-pre-4s-forecast', false], // If set to true, will always generate and display the pre-4s forecast (if false, it's only shown while we hold no stocks)\\n    ['show-market-summary', false], // Same effect as \\\"show-pre-4s-forecast\\\", this market summary has become so informative, it's valuable even with 4s\\n    ['pre-4s-buy-threshold-probability', 0.15], // Before we have 4S data, only buy stocks whose probability is more than this far away from 0.5, to account for imprecision\\n    ['pre-4s-buy-threshold-return', 0.0015], // Before we have 4S data, Buy only stocks forecasted to earn better than this return (default 0.25% or 25 Basis Points)\\n    ['pre-4s-sell-threshold-return', 0.0005], // Before we have 4S data, Sell stocks forecasted to earn less than this return (default 0.15% or 15 Basis Points)\\n    ['pre-4s-min-tick-history', 21], // This much history must be gathered before we will use pre-4s stock forecasts to make buy/sell decisions. (Default 21)\\n    ['pre-4s-forecast-window', 51], // This much history will be used to determine the historical probability of the stock (so long as no inversions are detected) (Default 76)\\n    ['pre-4s-inversion-detection-window', 10], // This much history will be used to detect recent negative trends and act on them immediately. (Default 10)\\n    ['pre-4s-min-blackout-window', 10], // Do not make any new purchases this many ticks before the detected stock market cycle tick, to avoid buying a position that reverses soon after\\n    ['pre-4s-minimum-hold-time', 10], // A recently bought position must be held for this long before selling, to avoid rash decisions due to noise after a fresh market cycle. (Default 10)\\n];\\n\\nexport function autocomplete(data, args) {\\n    data.flags(argsSchema);\\n    return [];\\n}\\n\\n/** Requires access to the TIX API. Purchases access to the 4S Mkt Data API as soon as it can \\n * @param {NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog(\\\"ALL\\\");\\n    // Extract various options from the args (globals, purchasing decision factors, pre-4s factors)\\n    const options = ns.flags(argsSchema);\\n    mock = options.mock;\\n    noisy = options.noisy;\\n    const fracB = options.fracB;\\n    const fracH = options.fracH;\\n    const diversification = options.diversification;\\n    const disableHud = options.disableHud || options.liquidate || options.mock;\\n    disableShorts = options['disable-shorts'];\\n    const pre4sBuyThresholdProbability = options['pre-4s-buy-threshold-probability'];\\n    const pre4sMinBlackoutWindow = options['pre-4s-min-blackout-window'] || 1;\\n    const pre4sMinHoldTime = options['pre-4s-minimum-hold-time'] || 0;\\n    minTickHistory = options['pre-4s-min-tick-history'] || 21;\\n    nearTermForecastWindowLength = options['pre-4s-inversion-detection-window'] || 10;\\n    longTermForecastWindowLength = options['pre-4s-forecast-window'] || (marketCycleLength + 1);\\n    showMarketSummary = options['show-pre-4s-forecast'] || options['show-market-summary'];\\n    // Other global values must be reset at start lest they be left in memory from a prior run\\n    lastTick = 0, totalProfit = 0, lastLog = \\\"\\\", marketCycleDetected = false, detectedCycleTick = 0, inversionAgreementThreshold = 6;\\n    let corpus = 0, myStocks = [], allStocks = [];\\n\\n    if (!ns.getPlayer().hasTixApiAccess) // You cannot use the stockmaster until you have API access\\n        return log(ns, \\\"ERROR: You have to buy stock market access and API access before you can run this script!\\\", true);\\n\\n    if (options.l || options.liquidate) // If given the \\\"liquidate\\\" command, try to kill the version of ourself trading in stocks\\n        await runCommand(ns, `ns.ps().filter(proc => proc.filename == '${ns.getScriptName()}' && !proc.args.includes('-l') && !proc.args.includes('--liquidate'))` +\\n            `.forEach(proc => ns.kill(proc.pid))`, '/Temp/kill-script.js');\\n\\n    dictSourceFiles = await getActiveSourceFiles(ns); // Find out what source files the user has unlocked\\n    if (!disableShorts && (!(8 in dictSourceFiles) || dictSourceFiles[8] < 2)) {\\n        log(ns, \\\"INFO: Shorting stocks has been disabled (you have not yet unlocked access to shorting)\\\");\\n        disableShorts = true;\\n    }\\n\\n    allStockSymbols = await getNsDataThroughFile(ns, 'ns.stock.getSymbols()', '/Temp/stock-symbols.txt');\\n    allStocks = await initAllStocks(ns, allStockSymbols);\\n\\n    if (options.l || options.liquidate) {\\n        await liquidate(ns, allStockSymbols); // Sell all stocks\\n        return;\\n    } else if (!options.mock) { // If we're not liquidating or in mock mode, we MUST not run two stockmasters at once, or chaos will ensue\\n        let otherStockmasters = (await getNsDataThroughFile(ns, `ns.ps()`, '/Temp/process-list.txt')).filter(p => p.filename == ns.getScriptName()); // TODO: For bonus points, check all servers\\n        otherStockmasters = otherStockmasters.filter(p => JSON.stringify(ns.args) != JSON.stringify(p.args)); // Don't detect ourselves of course.\\n        if (otherStockmasters.some(p => !p.args.includes(\\\"--mock\\\"))) // Exception, feel free to run multiple stockmasters in mock mode\\n            return log(ns, `ERROR: Another version of ${ns.getScriptName()} is already running with different args. Running twice is a bad idea!`, true, 'error');\\n    }\\n\\n    let bitnodeMults;\\n    if (5 in dictSourceFiles) bitnodeMults = await tryGetBitNodeMultipliers(ns);\\n    // Assume bitnode mults are 1 if user doesn't have this API access yet\\n    if (!bitnodeMults) bitnodeMults = { FourSigmaMarketDataCost: 1, FourSigmaMarketDataApiCost: 1 };\\n\\n    if (showMarketSummary) await launchSummaryTail(ns); // Opens a separate script / window to continuously display the Pre4S forecast\\n\\n    let hudElement = null;\\n    if (!disableHud) {\\n        hudElement = initializeHud();\\n        ns.atExit(() => hudElement.parentElement.parentElement.parentElement.removeChild(hudElement.parentElement.parentElement));\\n    }\\n\\n    log(ns, `Welcome! Please note: all stock purchases will initially result in a Net (unrealized) Loss. This is not only due to commission, but because each stock has a 'spread' (difference in buy price and sell price). ` +\\n        `This script is designed to buy stocks that are most likely to surpass that loss and turn a profit, but it will take a few minutes to see the progress.\\\\n\\\\n` +\\n        `If you choose to stop the script, make sure you SELL all your stocks (can go 'run ${ns.getScriptName()} --liquidate') to get your money back.\\\\n\\\\nGood luck!\\\\n~ Insight\\\\n\\\\n`)\\n\\n    while (true) {\\n        const playerStats = ns.getPlayer();\\n        const pre4s = !playerStats.has4SDataTixApi;\\n        corpus = await refresh(ns, playerStats, allStocks, myStocks);\\n        if (pre4s && !mock && await tryGet4SApi(ns, playerStats, bitnodeMults, corpus, allStockSymbols))\\n            continue; // Start the loop over if we just bought 4S API access\\n        // Be more conservative with our decisions if we don't have 4S data\\n        const thresholdToBuy = pre4s ? options['pre-4s-buy-threshold-return'] : options['buy-threshold'];\\n        const thresholdToSell = pre4s ? options['pre-4s-sell-threshold-return'] : options['sell-threshold'];\\n        if (myStocks.length > 0)\\n            doStatusUpdate(ns, allStocks, myStocks, hudElement);\\n        if (pre4s && allStocks[0].priceHistory.length < minTickHistory) {\\n            log(ns, `Building a history of stock prices (${allStocks[0].priceHistory.length}/${minTickHistory})...`);\\n            await ns.sleep(sleepInterval);\\n            continue;\\n        }\\n\\n        // Sell forecasted-to-underperform shares (worse than some expected return threshold)\\n        let sales = 0;\\n        for (let stk of myStocks) {\\n            if (stk.absReturn() <= thresholdToSell || stk.bullish() && stk.sharesShort > 0 || stk.bearish() && stk.sharesLong > 0) {\\n                if (pre4s && stk.ticksHeld < pre4sMinHoldTime) {\\n                    if (!stk.warnedBadPurchase) log(ns, `WARNING: Thinking of selling ${stk.sym} with ER ${formatBP(stk.absReturn())}, but holding out as it was purchased just ${stk.ticksHeld} ticks ago...`);\\n                    stk.warnedBadPurchase = true; // Hack to ensure we don't spam this warning\\n                } else {\\n                    sales += await doSellAll(ns, stk);\\n                    stk.warnedBadPurchase = false;\\n                }\\n            }\\n        }\\n        if (sales > 0) continue; // If we sold anything, loop immediately (no need to sleep) and refresh stats immediately before making purchasing decisions.\\n\\n        let cash = playerStats.money - options['reserve'] - Number(ns.read(\\\"reserve.txt\\\") || 0);\\n        let liquidity = cash / corpus;\\n        // If we haven't gone above a certain liquidity threshold, don't attempt to buy more stock\\n        // Avoids death-by-a-thousand-commissions before we get super-rich, stocks are capped, and this is no longer an issue\\n        // BUT may mean we miss striking while the iron is hot while waiting to build up more funds.\\n        if (liquidity > fracB) {\\n            // If we haven't detected the market cycle (or haven't detected it reliably), assume it might be quite soon and restrict bets to those that can turn a profit in the very-near term.\\n            const estTick = Math.max(detectedCycleTick, marketCycleLength - (!marketCycleDetected ? 5 : inversionAgreementThreshold <= 8 ? 15 : inversionAgreementThreshold <= 10 ? 30 : marketCycleLength));\\n            // Buy shares with cash remaining in hand if exceeding some buy threshold. Prioritize targets whose expected return will cover the ask/bit spread the soonest\\n            for (const stk of allStocks.sort(purchaseOrder)) {\\n                // Do not purchase a stock if it is not forecasted to recover from the ask/bid spread before the next market cycle and potential probability inversion\\n                if (stk.blackoutWindow() >= marketCycleLength - estTick) continue;\\n                if (pre4s && (Math.max(pre4sMinHoldTime, pre4sMinBlackoutWindow) >= marketCycleLength - estTick)) continue;\\n                // Compute the cash we have to spend (such that spending it all on stock would bring us down to a liquidity of fracH)\\n                let budget = cash - (fracH * corpus);\\n                if (budget <= 0) break; // Break if we are out of money (i.e. from prior purchases)\\n                // Skip if we already own all possible shares in this stock, or if the expected return is below our threshold, or if shorts are disabled and stock is bearish\\n                if (stk.ownedShares() == stk.maxShares || stk.absReturn() <= thresholdToBuy || (disableShorts && stk.bearish())) continue;\\n                // If pre-4s, do not purchase any stock whose last inversion was too recent, or whose probability is too close to 0.5\\n                if (pre4s && (stk.lastInversion < minTickHistory || Math.abs(stk.prob - 0.5) < pre4sBuyThresholdProbability)) continue;\\n\\n                // Enforce diversification - don't hold more than x% of our portfolio as a single stock (as corpus increases, this naturally stops being a limiter)\\n                budget = Math.min(budget, (1 - fracH) * corpus * diversification - stk.positionValue())\\n                let purchasePrice = stk.bullish() ? stk.ask_price : stk.bid_price; // Depends on whether we will be buying a long or short position\\n                let affordableShares = Math.floor((budget - commission) / purchasePrice);\\n                let numShares = Math.min(stk.maxShares - stk.ownedShares(), affordableShares);\\n                if (numShares <= 0) continue;\\n                // Don't buy fewer shares than can beat the comission before the next stock market cycle (after covering the spread), lest the position reverse before we break-even.\\n                let ticksBeforeCycleEnd = marketCycleLength - estTick - stk.timeToCoverTheSpread();\\n                if (ticksBeforeCycleEnd < 1) continue; // We're cutting it too close to the market cycle, position might reverse before we break-even on commission\\n                let estEndOfCycleValue = numShares * purchasePrice * ((stk.absReturn() + 1) ** ticksBeforeCycleEnd - 1); // Expected difference in purchase price and value at next market cycle end\\n                if (estEndOfCycleValue <= 2 * commission)\\n                    log(ns, `Despite attractive ER of ${formatBP(stk.absReturn())}, ${stk.sym} was not bought. Budget: ${formatMoney(budget)} can only buy ${numShares} shares @ ${formatMoney(purchasePrice)}. ` +\\n                        `Given an estimated ${marketCycleLength - estTick} ticks left in market cycle, less ${stk.timeToCoverTheSpread().toFixed(1)} ticks to cover the spread (${(stk.spread_pct * 100).toFixed(2)}%), ` +\\n                        `remaining ${ticksBeforeCycleEnd.toFixed(1)} ticks would only generate ${formatMoney(estEndOfCycleValue)}, which is less than 2x commission (${formatMoney(2 * commission, 3)})`);\\n                else\\n                    cash -= await doBuy(ns, stk, numShares);\\n            }\\n        }\\n        await ns.sleep(sleepInterval);\\n    }\\n}\\n\\n/* A sorting function to put stocks in the order we should prioritize investing in them */\\nlet purchaseOrder = (a, b) => (Math.ceil(a.timeToCoverTheSpread()) - Math.ceil(b.timeToCoverTheSpread())) || (b.absReturn() - a.absReturn());\\n\\n/* Generic helper for dodging the hefty RAM requirements of stock functions by spawning a temporary script to collect info for us. */\\nlet getStockInfoDict = async (ns, stockFuncion) => await getNsDataThroughFile(ns,\\n    `Object.fromEntries(${JSON.stringify(allStockSymbols)}.map(sym => [sym, ns.stock.${stockFuncion}(sym)]))`, `/Temp/stock-${stockFuncion}.txt`);\\n\\n/** @param {NS} ns **/\\nasync function initAllStocks(ns, allStockSymbols) {\\n    let dictMaxShares = await getStockInfoDict(ns, 'getMaxShares'); // Only need to get this once, it never changes\\n    return allStockSymbols.map(s => ({\\n        sym: s,\\n        maxShares: dictMaxShares[s], // Value never changes once retrieved\\n        expectedReturn: function () { // How much holdings are expected to appreciate (or depreciate) in the future\\n            // To add conservatism to pre-4s estimates, we reduce the probability by 1 standard deviation without crossing the midpoint\\n            let normalizedProb = (this.prob - 0.5);\\n            let conservativeProb = normalizedProb < 0 ? Math.min(0, normalizedProb + this.probStdDev) : Math.max(0, normalizedProb - this.probStdDev);\\n            return this.vol * conservativeProb;\\n        },\\n        absReturn: function () { return Math.abs(this.expectedReturn()); }, // Appropriate to use when can just as well buy a short position as a long position\\n        bullish: function () { return this.prob > 0.5 },\\n        bearish: function () { return !this.bullish(); },\\n        ownedShares: function () { return this.sharesLong + this.sharesShort; },\\n        owned: function () { return this.ownedShares() > 0; },\\n        positionValueLong: function () { return this.sharesLong * this.bid_price; },\\n        positionValueShort: function () { return this.sharesShort * (2 * this.boughtPriceShort - this.ask_price); }, // Shorts work a bit weird\\n        positionValue: function () { return this.positionValueLong() + this.positionValueShort(); },\\n        // How many stock market ticks must occur at the current expected return before we regain the value lost by the spread between buy and sell prices.\\n        // This can be derived by taking the compound interest formula (future = current * (1 + expected_return) ^ n) and solving for n\\n        timeToCoverTheSpread: function () { return Math.log(this.ask_price / this.bid_price) / Math.log(1 + this.absReturn()); },\\n        // We should not buy this stock within this many ticks of a Market cycle, or we risk being forced to sell due to a probability inversion, and losing money due to the spread\\n        blackoutWindow: function () { return Math.ceil(this.timeToCoverTheSpread()); },\\n        // Pre-4s properties used for forecasting\\n        priceHistory: [],\\n        lastInversion: 0,\\n    }));\\n}\\n\\n/** @param {NS} ns **/\\nasync function refresh(ns, playerStats, allStocks, myStocks) {\\n    const has4s = playerStats.has4SDataTixApi;\\n    let corpus = playerStats.money;\\n\\n    // Dodge hefty RAM requirements by spawning a sequence of temporary scripts to collect info for us one function at a time\\n    const dictAskPrices = await getStockInfoDict(ns, 'getAskPrice');\\n    const dictBidPrices = await getStockInfoDict(ns, 'getBidPrice');\\n    const dictVolatilities = !has4s ? null : await getStockInfoDict(ns, 'getVolatility');\\n    const dictForecasts = !has4s ? null : await getStockInfoDict(ns, 'getForecast');\\n    const dictPositions = mock ? null : await getStockInfoDict(ns, 'getPosition');\\n    const ticked = allStocks.some(stk => stk.ask_price != dictAskPrices[stk.sym]); // If any price has changed since our last update, the stock market has \\\"ticked\\\"\\n\\n    if (ticked) {\\n        if (Date.now() - lastTick < expectedTickTime - sleepInterval) {\\n            if (Date.now() - lastTick < catchUpTickTime - sleepInterval) {\\n                let changedPrices = allStocks.filter(stk => stk.ask_price != dictAskPrices[stk.sym]);\\n                log(ns, `WARNING: Detected a stock market tick after only ${formatDuration(Date.now() - lastTick)}, but expected ~${formatDuration(expectedTickTime)}. ` +\\n                    (changedPrices.length >= 33 ? '(All stocks updated)' : `The following ${changedPrices.length} stock prices changed: ${changedPrices.map(stk =>\\n                        `${stk.sym} ${formatMoney(stk.ask_price)} -> ${formatMoney(dictAskPrices[stk.sym])}`).join(\\\", \\\")}`), false, 'warning');\\n            } else\\n                log(ns, `INFO: Detected a rapid stock market tick (${formatDuration(Date.now() - lastTick)}), likely to make up for lag / offline time.`)\\n        }\\n        lastTick = Date.now()\\n    }\\n\\n    myStocks.length = 0;\\n    for (const stk of allStocks) {\\n        const sym = stk.sym;\\n        stk.ask_price = dictAskPrices[sym]; // The amount we would pay if we bought the stock (higher than 'price')\\n        stk.bid_price = dictBidPrices[sym]; // The amount we would recieve if we sold the stock (lower than 'price')\\n        stk.spread = stk.ask_price - stk.bid_price;\\n        stk.spread_pct = stk.spread / stk.ask_price; // The percentage of value we lose just by buying the stock\\n        stk.price = (stk.ask_price + stk.bid_price) / 2; // = ns.stock.getPrice(sym);\\n        stk.vol = has4s ? dictVolatilities[sym] : stk.vol;\\n        stk.prob = has4s ? dictForecasts[sym] : stk.prob;\\n        stk.probStdDev = has4s ? 0 : stk.probStdDev; // Standard deviation around the est. probability\\n        // Update our current portfolio of owned stock\\n        let [priorLong, priorShort] = [stk.sharesLong, stk.sharesShort];\\n        stk.position = mock ? null : dictPositions[sym];\\n        stk.sharesLong = mock ? (stk.sharesLong || 0) : stk.position[0];\\n        stk.boughtPrice = mock ? (stk.boughtPrice || 0) : stk.position[1];\\n        stk.sharesShort = mock ? (stk.shares_short || 0) : stk.position[2];\\n        stk.boughtPriceShort = mock ? (stk.boughtPrice_short || 0) : stk.position[3];\\n        corpus += stk.positionValue();\\n        if (stk.owned()) myStocks.push(stk); else stk.ticksHeld = 0;\\n        if (ticked) // Increment ticksHeld, or reset it if we have no position in this stock or reversed our position last tick.\\n            stk.ticksHeld = !stk.owned() || (priorLong > 0 && stk.sharesLong == 0) || (priorShort > 0 && stk.sharesShort == 0) ? 0 : 1 + (stk.ticksHeld || 0);\\n    }\\n    if (ticked) await updateForecast(ns, allStocks, has4s); // Logic below only required on market tick\\n    return corpus;\\n}\\n\\n// Historical probability can be inferred from the number of times the stock was recently observed increasing over the total number of observations\\nconst forecast = history => history.reduce((ups, price, idx) => idx == 0 ? 0 : (history[idx - 1] > price ? ups + 1 : ups), 0) / (history.length - 1);\\n// An \\\"inversion\\\" can be detected if two probabilities are far enough apart and are within \\\"tolerance\\\" of p1 being equal to 1-p2\\nconst tol2 = inversionDetectionTolerance / 2;\\nconst detectInversion = (p1, p2) => ((p1 >= 0.5 + tol2) && (p2 <= 0.5 - tol2) && p2 <= (1 - p1) + inversionDetectionTolerance)\\n        /* Reverse Condition: */ || ((p1 <= 0.5 - tol2) && (p2 >= 0.5 + tol2) && p2 >= (1 - p1) - inversionDetectionTolerance);\\n\\n/** @param {NS} ns **/\\nasync function updateForecast(ns, allStocks, has4s) {\\n    const currentHistory = allStocks[0].priceHistory.length;\\n    const prepSummary = showMarketSummary || mock || (!has4s && (currentHistory < minTickHistory || allStocks.filter(stk => stk.owned()).length == 0)); // Decide whether to display the market summary table.\\n    const inversionsDetected = []; // Keep track of individual stocks whose probability has inverted (45% chance of happening each \\\"cycle\\\")\\n    detectedCycleTick = (detectedCycleTick + 1) % marketCycleLength; // Keep track of stock market cycle (which occurs every 75 ticks)\\n    for (const stk of allStocks) {\\n        stk.priceHistory.unshift(stk.price);\\n        if (stk.priceHistory.length > maxTickHistory) // Limit the rolling window size\\n            stk.priceHistory.splice(maxTickHistory, 1);\\n        // Volatility is easy - the largest observed % movement in a single tick\\n        if (!has4s) stk.vol = stk.priceHistory.reduce((max, price, idx) => Math.max(max, idx == 0 ? 0 : Math.abs(stk.priceHistory[idx - 1] - price) / price), 0);\\n        // We want stocks that have the best expected return, averaged over a long window for greater precision, but the game will occasionally invert probabilities\\n        // (45% chance every 75 updates), so we also compute a near-term forecast window to allow for early-detection of inversions so we can ditch our position.\\n        stk.nearTermForecast = forecast(stk.priceHistory.slice(0, nearTermForecastWindowLength));\\n        let preNearTermWindowProb = forecast(stk.priceHistory.slice(nearTermForecastWindowLength)); // Used to detect the probability before the potential inversion event.\\n        // Detect whether it appears as though the probability of this stock has recently undergone an inversion (i.e. prob => 1 - prob)\\n        stk.possibleInversionDetected = has4s ? detectInversion(stk.prob, stk.lastTickProbability || stk.prob) : detectInversion(preNearTermWindowProb, stk.nearTermForecast);\\n        stk.lastTickProbability = stk.prob;\\n        if (stk.possibleInversionDetected) inversionsDetected.push(stk);\\n    }\\n    // Detect whether our auto-detected \\\"stock market cycle\\\" timing should be adjusted based on the number of potential inversions observed\\n    let summary = \\\"\\\";\\n    if (inversionsDetected.length > 0) {\\n        summary += `${inversionsDetected.length} Stocks appear to be reversing their outlook: ${inversionsDetected.map(s => s.sym).join(', ')} (threshold: ${inversionAgreementThreshold})\\\\n`;\\n        if (inversionsDetected.length >= inversionAgreementThreshold && (has4s || currentHistory >= minTickHistory)) { // We believe we have detected the stock market cycle!\\n            const newPredictedCycleTick = has4s ? 0 : nearTermForecastWindowLength; // By the time we've detected it, we're this many ticks past the cycle start\\n            if (detectedCycleTick != newPredictedCycleTick)\\n                log(ns, `Threshold for changing predicted market cycle met (${inversionsDetected.length} >= ${inversionAgreementThreshold}). ` +\\n                    `Changing current market tick from ${detectedCycleTick} to ${newPredictedCycleTick}.`);\\n            marketCycleDetected = true;\\n            detectedCycleTick = newPredictedCycleTick;\\n            // Don't adjust this in the future unless we see another day with as much or even more agreement (capped at 14, it seems sometimes our cycles get out of sync with\\n            // actual cycles and we need to reset our clock even after previously determining the cycle with great certainty.)\\n            inversionAgreementThreshold = Math.max(14, inversionsDetected.length);\\n        }\\n    }\\n    // Act on any inversions (if trusted), compute the probability, and prepare the stock summary\\n    for (const stk of allStocks) {\\n        // Don't \\\"trust\\\" (act on) a detected inversion unless it's near the time when we're capable of detecting market cycle start. Avoids most false-positives.\\n        if (stk.possibleInversionDetected && (has4s && detectedCycleTick == 0 ||\\n            (!has4s && (detectedCycleTick > nearTermForecastWindowLength / 2 - 1) && (detectedCycleTick <= nearTermForecastWindowLength + inversionLagTolerance))))\\n            stk.lastInversion = detectedCycleTick; // If we \\\"trust\\\" a probability inversion has occurred, probability will be calculated based on only history since the last inversion.\\n        else\\n            stk.lastInversion++;\\n        // Only take the stock history since after the last inversion to compute the probability of the stock.\\n        const probWindowLength = Math.min(longTermForecastWindowLength, stk.lastInversion);\\n        stk.longTermForecast = forecast(stk.priceHistory.slice(0, probWindowLength));\\n        if (!has4s) {\\n            stk.prob = stk.longTermForecast;\\n            stk.probStdDev = Math.sqrt((stk.prob * (1 - stk.prob)) / probWindowLength);\\n        }\\n        const signalStrength = 1 + (stk.bullish() ? (stk.nearTermForecast > stk.prob ? 1 : 0) + (stk.prob > 0.8 ? 1 : 0) : (stk.nearTermForecast < stk.prob ? 1 : 0) + (stk.prob < 0.2 ? 1 : 0));\\n        if (prepSummary) { // Example: AERO  ++   Prob: 54% (t51: 54%, t10: 67%) tLast⇄:190 Vol:0.640% ER: 2.778BP Spread:1.784% ttProfit: 65 Pos: 14.7M long  (held 189 ticks)\\n            stk.debugLog = `${stk.sym.padEnd(5, ' ')} ${(stk.bullish() ? '+' : '-').repeat(signalStrength).padEnd(3)} ` +\\n                `Prob:${(stk.prob * 100).toFixed(0).padStart(3)}% (t${probWindowLength.toFixed(0).padStart(2)}:${(stk.longTermForecast * 100).toFixed(0).padStart(3)}%, ` +\\n                `t${Math.min(stk.priceHistory.length, nearTermForecastWindowLength).toFixed(0).padStart(2)}:${(stk.nearTermForecast * 100).toFixed(0).padStart(3)}%) ` +\\n                `tLast⇄:${(stk.lastInversion + 1).toFixed(0).padStart(3)} Vol:${(stk.vol * 100).toFixed(2)}% ER:${formatBP(stk.expectedReturn()).padStart(8)} ` +\\n                `Spread:${(stk.spread_pct * 100).toFixed(2)}% ttProfit:${stk.blackoutWindow().toFixed(0).padStart(3)}`;\\n            if (stk.owned()) stk.debugLog += ` Pos: ${formatNumberShort(stk.ownedShares(), 3, 1)} (${stk.ownedShares() == stk.maxShares ? 'max' :\\n                ((100 * stk.ownedShares() / stk.maxShares).toFixed(0).padStart(2) + '%')}) ${stk.sharesLong > 0 ? 'long ' : 'short'} (held ${stk.ticksHeld} ticks)`;\\n            if (stk.possibleInversionDetected) stk.debugLog += ' ⇄⇄⇄';\\n        }\\n    }\\n    // Print a summary of stocks as of this most recent tick (if enabled)\\n    if (prepSummary) {\\n        summary += `Market day ${detectedCycleTick + 1}${marketCycleDetected ? '' : '?'} of ${marketCycleLength} (${marketCycleDetected ? (100 * inversionAgreementThreshold / 19).toPrecision(2) : '0'}% certain) ` +\\n            `Current Stock Summary and Pre-4S Forecasts (by best payoff-time):\\\\n` + allStocks.sort(purchaseOrder).map(s => s.debugLog).join(\\\"\\\\n\\\")\\n        if (showMarketSummary) await updateForecastFile(ns, summary); else log(ns, summary);\\n    }\\n    // Write out a file of stock probabilities so that other scripts can make use of this (e.g. hack orchestrator can manipulate the stock market)\\n    await ns.write('/Temp/stock-probabilities.txt', JSON.stringify(Object.fromEntries(\\n        allStocks.map(stk => [stk.sym, { prob: stk.prob, sharesLong: stk.sharesLong, sharesShort: stk.sharesShort }]))), \\\"w\\\");\\n}\\n\\n// Helpers to display the stock market summary in a separate window.\\nlet summaryFile = '/Temp/stockmarket-summary.txt';\\nlet updateForecastFile = async (ns, summary) => await ns.write(summaryFile, summary, 'w');\\nlet launchSummaryTail = async ns => {\\n    let summaryTailScript = summaryFile.replace('.txt', '-tail.js');\\n    if (await getNsDataThroughFile(ns, `ns.scriptRunning('${summaryTailScript}', ns.getHostname())`, '/Temp/stockmarket-summary-is-running.txt'))\\n        return;\\n    //await getNsDataThroughFile(ns, `ns.scriptKill('${summaryTailScript}', ns.getHostname())`, summaryTailScript.replace('.js', '-kill.js')); // Only needed if we're changing the script below\\n    await runCommand(ns, `ns.disableLog('sleep'); ns.tail(); let lastRead = '';\\n        while (true) { \\n            let read = ns.read('${summaryFile}');\\n            if (lastRead != read) ns.print(lastRead = read);\\n            await ns.sleep(1000); \\n        }`, summaryTailScript);\\n}\\n\\n// Ram-dodging helpers that spawn temporary scripts to buy/sell rather than pay 2.5GB ram per variant\\nlet buyStockWrapper = async (ns, sym, numShares) => await transactStock(ns, sym, numShares, 'buy'); // ns.stock.buy(sym, numShares);\\nlet buyShortWrapper = async (ns, sym, numShares) => await transactStock(ns, sym, numShares, 'short'); // ns.stock.short(sym, numShares);\\nlet sellStockWrapper = async (ns, sym, numShares) => await transactStock(ns, sym, numShares, 'sell'); // ns.stock.sell(sym, numShares);\\nlet sellShortWrapper = async (ns, sym, numShares) => await transactStock(ns, sym, numShares, 'sellShort'); // ns.stock.sellShort(sym, numShares);\\nlet transactStock = async (ns, sym, numShares, action) => await getNsDataThroughFile(ns, `ns.stock.${action}('${sym}', ${numShares})`, '/Temp/transact-stock.txt'); // ns.stock.sellShort(sym, numShares);\\n\\n/** @param {NS} ns \\n * Automatically buys either a short or long position depending on the outlook of the stock. */\\nasync function doBuy(ns, stk, sharesBought) {\\n    // We include -2*commission in the \\\"holdings value\\\" of our stock, but if we make repeated purchases of the same stock, we have to track\\n    // the additional commission somewhere. So only subtract it from our running profit if this isn't our first purchase of this symbol\\n    if (stk.owned())\\n        totalProfit -= commission;\\n    let long = stk.bullish();\\n    let expectedPrice = long ? stk.ask_price : stk.bid_price; // Depends on whether we will be buying a long or short position\\n    let price;\\n    try {\\n        price = mock ? expectedPrice : Number(await transactStock(ns, stk.sym, sharesBought, long ? 'buy' : 'short'));\\n    } catch (err) {\\n        if (long) throw err;\\n        disableShorts = true;\\n        log(ns, `WARN: Failed to short ${stk.sym} (Shorts not available?). Disabling shorts...`, true, 'warning');\\n        return 0;\\n    }\\n\\n    log(ns, `INFO: ${long ? 'Bought ' : 'Shorted'} ${formatNumberShort(sharesBought, 3, 3).padStart(5)}${stk.maxShares == sharesBought + stk.ownedShares() ? ' (max shares)' : ''} ` +\\n        `${stk.sym.padEnd(5)} @ ${formatMoney(price).padStart(9)} for ${formatMoney(sharesBought * price).padStart(9)} (Spread:${(stk.spread_pct * 100).toFixed(2)}% ` +\\n        `ER:${formatBP(stk.expectedReturn()).padStart(8)}) Ticks to Profit: ${stk.timeToCoverTheSpread().toFixed(2)}`, noisy, 'info');\\n    // The rest of this work is for troubleshooting / mock-mode purposes\\n    if (price == 0) {\\n        log(ns, `ERROR: Failed to ${long ? 'buy' : 'short'} ${stk.sym} @ ${formatMoney(expectedPrice)} - 0 was returned.`, true, 'error');\\n        return 0;\\n    } else if (price != expectedPrice) {\\n        log(ns, `WARNING: ${long ? 'Bought' : 'Shorted'} ${stk.sym} @ ${formatMoney(price)} but expected ${formatMoney(expectedPrice)} (spread: ${formatMoney(stk.spread)})`, false, 'warning');\\n        price = expectedPrice; // Known Bitburner bug for now, short returns \\\"price\\\" instead of \\\"bit_price\\\". Correct this so running profit calcs are correct.\\n    }\\n    if (mock && long) stk.boughtPrice = (stk.boughtPrice * stk.sharesLong + price * sharesBought) / (stk.sharesLong + sharesBought);\\n    if (mock && !long) stk.boughtPriceShort = (stk.boughtPriceShort * stk.sharesShort + price * sharesBought) / (stk.sharesShort + sharesBought);\\n    if (long) stk.sharesLong += sharesBought; else stk.sharesShort += sharesBought; // Maintained for mock mode, otherwise, redundant (overwritten at next refresh)\\n    return sharesBought * price + commission; // Return the amount spent on the transaction so it can be subtracted from our cash on hand\\n}\\n\\n/** @param {NS} ns \\n * Sell our current position in this stock. */\\nasync function doSellAll(ns, stk) {\\n    let long = stk.sharesLong > 0;\\n    if (long && stk.sharesShort > 0) // Detect any issues here - we should always sell one before buying the other.\\n        log(ns, `ERROR: Somehow ended up both ${stk.sharesShort} short and ${stk.sharesLong} long on ${stk.sym}`, true, 'error');\\n    let expectedPrice = long ? stk.bid_price : stk.ask_price; // Depends on whether we will be selling a long or short position\\n    let sharesSold = long ? stk.sharesLong : stk.sharesShort;\\n    let price = mock ? expectedPrice : await transactStock(ns, stk.sym, sharesSold, long ? 'sell' : 'sellShort');\\n    const profit = (long ? stk.sharesLong * (price - stk.boughtPrice) : stk.sharesShort * (stk.boughtPriceShort - price)) - 2 * commission;\\n    log(ns, `${profit > 0 ? 'SUCCESS' : 'WARNING'}: Sold all ${formatNumberShort(sharesSold, 3, 3).padStart(5)} ${stk.sym.padEnd(5)} ${long ? ' long' : 'short'} positions ` +\\n        `@ ${formatMoney(price).padStart(9)} for a ` + (profit > 0 ? `PROFIT of ${formatMoney(profit).padStart(9)}` : ` LOSS  of ${formatMoney(-profit).padStart(9)}`) + ` after ${stk.ticksHeld} ticks`,\\n        noisy, noisy ? (profit > 0 ? 'success' : 'error') : undefined);\\n    if (price == 0) {\\n        log(ns, `ERROR: Failed to sell ${sharesSold} ${stk.sym} ${long ? 'shares' : 'shorts'} @ ${formatMoney(expectedPrice)} - 0 was returned.`, true, 'error');\\n        return 0;\\n    } else if (price != expectedPrice) {\\n        log(ns, `WARNING: Sold ${stk.sym} ${long ? 'shares' : 'shorts'} @ ${formatMoney(price)} but expected ${formatMoney(expectedPrice)} (spread: ${formatMoney(stk.spread)})`, false, 'warning');\\n        price = expectedPrice; // Known Bitburner bug for now, sellSort returns \\\"price\\\" instead of \\\"ask_price\\\". Correct this so running profit calcs are correct.\\n    }\\n    if (long) stk.sharesLong -= sharesSold; else stk.sharesShort -= sharesSold; // Maintained for mock mode, otherwise, redundant (overwritten at next refresh)\\n    totalProfit += profit;\\n    return price * sharesSold - commission; // Return the amount of money recieved from the transaction\\n}\\n\\nlet formatBP = fraction => formatNumberShort(fraction * 100 * 100, 3, 2) + \\\" BP\\\";\\n\\n/** Log / tprint / toast helper.\\n * @param {NS} ns */\\nlet log = (ns, message, tprint = false, toastStyle = \\\"\\\") => {\\n    if (message == lastLog) return;\\n    ns.print(message);\\n    if (tprint) ns.tprint(message);\\n    if (toastStyle) ns.toast(message, toastStyle);\\n    return lastLog = message;\\n}\\n\\nfunction doStatusUpdate(ns, stocks, myStocks, hudElement = null) {\\n    let maxReturnBP = 10000 * Math.max(...myStocks.map(s => s.absReturn())); // The largest return (in basis points) in our portfolio\\n    let minReturnBP = 10000 * Math.min(...myStocks.map(s => s.absReturn())); // The smallest return (in basis points) in our portfolio\\n    let est_holdings_cost = myStocks.reduce((sum, stk) => sum + (stk.owned() ? commission : 0) +\\n        stk.sharesLong * stk.boughtPrice + stk.sharesShort * stk.boughtPriceShort, 0);\\n    let liquidation_value = myStocks.reduce((sum, stk) => sum - (stk.owned() ? commission : 0) + stk.positionValue(), 0);\\n    let status = `Long ${myStocks.filter(s => s.sharesLong > 0).length}, Short ${myStocks.filter(s => s.sharesShort > 0).length} of ${stocks.length} stocks ` +\\n        (myStocks.length == 0 ? '' : `(ER ${minReturnBP.toFixed(1)}-${maxReturnBP.toFixed(1)} BP) `) +\\n        `Profit: ${formatMoney(totalProfit, 3)} Holdings: ${formatMoney(liquidation_value, 3)} (Cost: ${formatMoney(est_holdings_cost, 3)}) ` +\\n        `Net: ${formatMoney(totalProfit + liquidation_value - est_holdings_cost, 3)}`\\n    log(ns, status);\\n    if (hudElement) hudElement.innerText = formatMoney(liquidation_value, 6, 3);\\n}\\n\\n/** @param {NS} ns **/\\nasync function liquidate(ns, allStockSymbols) {\\n    let totalStocks = 0, totalSharesLong = 0, totalSharesShort = 0, totalRevenue = 0;\\n    const dictPositions = mock ? null : await getStockInfoDict(ns, 'getPosition');\\n    for (const sym of allStockSymbols) {\\n        var [sharesLong, , sharesShort, avgShortCost] = dictPositions[sym];\\n        if (sharesLong + sharesShort == 0) continue;\\n        totalStocks++, totalSharesLong += sharesLong, totalSharesShort += sharesShort;\\n        if (sharesLong > 0) totalRevenue += (await sellStockWrapper(ns, sym, sharesLong)) * sharesLong - commission;\\n        if (sharesShort > 0) totalRevenue += (2 * avgShortCost - (await sellShortWrapper(ns, sym, sharesShort))) * sharesShort - commission;\\n    }\\n    log(ns, `Sold ${totalSharesLong.toLocaleString()} long shares and ${totalSharesShort.toLocaleString()} short shares ` +\\n        `in ${totalStocks} stocks for ${formatMoney(totalRevenue, 3)}`, true, 'success');\\n}\\n\\n/** @param {NS} ns **/\\n/** @param {Player} playerStats **/\\nasync function tryGet4SApi(ns, playerStats, bitnodeMults, corpus, allStockSymbols) {\\n    if (playerStats.has4SDataTixApi) return false; // Only return true if we just bought it\\n    const cost4sData = bitnodeMults.FourSigmaMarketDataCost * 5000000000;\\n    const cost4sApi = bitnodeMults.FourSigmaMarketDataApiCost * 25000000000;\\n    const totalCost = (playerStats.has4SData ? 0 : cost4sData) + cost4sApi;\\n    // Liquidate shares if it would allow us to afford 4S API data\\n    if (totalCost > corpus * 0.9 /* Need to reserve some money to invest */) return false;\\n    if (playerStats.money < totalCost)\\n        await liquidate(ns, allStockSymbols);\\n    if (!playerStats.has4SData) {\\n        if (await getNsDataThroughFile(ns, 'ns.stock.purchase4SMarketData()', '/Temp/purchase-4s.txt'))\\n            log(ns, `Purchased 4SMarketData for ${formatMoney(cost4sData)}!`, true, 'success');\\n        else\\n            log(ns, 'ERROR attempting to purchase 4SMarketData!', false, 'error');\\n    }\\n    if (await getNsDataThroughFile(ns, 'ns.stock.purchase4SMarketDataTixApi()', '/Temp/purchase-4s-api.txt')) {\\n        log(ns, `Purchased 4SMarketDataTixApi for ${formatMoney(cost4sApi)}!`, true, 'success');\\n        return true;\\n    } else {\\n        log(ns, 'ERROR attempting to purchase 4SMarketDataTixApi!', false, 'error');\\n        if (!(5 in dictSourceFiles)) { // If we do not have access to bitnode multipliers, assume the cost is double and try again later\\n            log(ns, 'INFO: Bitnode mults are not available (SF5) - assuming everything is twice as expensive in the current bitnode.');\\n            bitnodeMults.FourSigmaMarketDataCost *= 2;\\n            bitnodeMults.FourSigmaMarketDataApiCost *= 2;\\n        }\\n    }\\n    return false;\\n}\\n\\nfunction initializeHud() {\\n    const d = eval(\\\"document\\\");\\n    let htmlDisplay = d.getElementById(\\\"stock-display-1\\\");\\n    if (htmlDisplay !== null) return htmlDisplay;\\n    // Get the custom display elements in HUD.\\n    let customElements = d.getElementById(\\\"overview-extra-hook-0\\\").parentElement.parentElement;\\n    // Make a clone - in case other scripts are using them\\n    let stockValueTracker = customElements.cloneNode(true);\\n    // Clear id since duplicate id's are invalid\\n    stockValueTracker.querySelectorAll(\\\"p\\\").forEach((el, i) => el.id = \\\"stock-display-\\\" + i);\\n    // Get out output element\\n    htmlDisplay = stockValueTracker.querySelector(\\\"#stock-display-1\\\");\\n    // Display label and default value\\n    stockValueTracker.querySelectorAll(\\\"p\\\")[0].innerText = \\\"Stock\\\";\\n    htmlDisplay.innerText = \\\"$0.000\\\"\\n    // Insert our element right after Money\\n    customElements.parentElement.insertBefore(stockValueTracker, customElements.parentElement.childNodes[2]);\\n    return htmlDisplay;\\n}\",\"filename\":\"stockmaster.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"helpers.js\",\"url\":\"blob:file:///8d02896f-38d8-4cdb-a655-a59f42baae19\",\"moduleSequenceNumber\":125},{\"filename\":\"stockmaster.js\",\"url\":\"blob:file:///3652645a-01e5-4d12-a789-483e5c59d53b\",\"moduleSequenceNumber\":227}],\"dependents\":[],\"ramUsage\":3.2,\"server\":\"home\",\"moduleSequenceNumber\":227,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"run\",\"cost\":1},{\"type\":\"fn\",\"name\":\"isRunning\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {\\n    getNsDataThroughFile, runCommand, getActiveSourceFiles, tryGetBitNodeMultipliers,\\n    formatDuration, formatMoney, formatNumberShort, disableLogs\\n} from './helpers.js'\\n\\nconst companySpecificConfigs = [\\n    { name: \\\"NWO\\\", statModifier: 25 },\\n    { name: \\\"MegaCorp\\\", statModifier: 25 },\\n    { name: \\\"Blade Industries\\\", statModifier: 25 },\\n    { name: \\\"Fulcrum Secret Technologies\\\", companyName: \\\"Fulcrum Technologies\\\", repRequiredForFaction: 250000 }, // Special snowflake\\n    { name: \\\"Silhouette\\\", companyName: \\\"TBD\\\", repRequiredForFaction: 999e9 /* Hack to force work until max promotion. */ }\\n]\\nconst jobs = [ // Job stat requirements for a company with a base stat modifier of +224 (modifier of all megacorps except the ones above which are 25 higher)\\n    { name: \\\"it\\\", reqRep: [0, 7E3, 35E3, 175E3], reqHack: [225, 250, 275, 375], reqCha: [0, 0, 275, 300], repMult: [0.9, 1.1, 1.3, 1.4] },\\n    { name: \\\"software\\\", reqRep: [0, 8E3, 40E3, 200E3, 400E3, 800E3, 1.6e6, 3.2e6], reqHack: [225, 275, 475, 625, 725, 725, 825, 975], reqCha: [0, 0, 275, 375, 475, 475, 625, 725], repMult: [0.9, 1.1, 1.3, 1.5, 1.6, 1.6, 1.75, 2] },\\n]\\nconst factionSpecificConfigs = [\\n    { name: \\\"Slum Snakes\\\", forceUnlock: true },\\n]\\nconst factions = [\\\"Illuminati\\\", \\\"Daedalus\\\", \\\"The Covenant\\\", \\\"ECorp\\\", \\\"MegaCorp\\\", \\\"Bachman & Associates\\\", \\\"Blade Industries\\\", \\\"NWO\\\", \\\"Clarke Incorporated\\\", \\\"OmniTek Incorporated\\\",\\n    \\\"Four Sigma\\\", \\\"KuaiGong International\\\", \\\"Fulcrum Secret Technologies\\\", \\\"BitRunners\\\", \\\"The Black Hand\\\", \\\"NiteSec\\\", \\\"Aevum\\\", \\\"Chongqing\\\", \\\"Ishima\\\", \\\"New Tokyo\\\", \\\"Sector-12\\\",\\n    \\\"Volhaven\\\", \\\"Speakers for the Dead\\\", \\\"The Dark Army\\\", \\\"The Syndicate\\\", \\\"Silhouette\\\", \\\"Tetrads\\\", \\\"Slum Snakes\\\", \\\"Netburners\\\", \\\"Tian Di Hui\\\", \\\"CyberSec\\\"]; //TODO: Add Bladeburner Automation at BN7.1\\n// These factions should ideally be completed in this order (TODO: Check for augmentation dependencies)\\nconst preferredEarlyFactionOrder = [\\n    \\\"Slum Snakes\\\", // Unlock Gangs\\n    \\\"Netburners\\\", // Required to set up hash income\\n    \\\"Tian Di Hui\\\", \\\"Aevum\\\", // These give all the company_rep and faction_rep bonuses early game    \\n    \\\"CyberSec\\\", /* Quick, and NightSec aug depends on an aug from here */ \\\"NiteSec\\\", \\\"Tetrads\\\", // Cha augs to speed up earning company promotions\\n    \\\"Bachman & Associates\\\", // Boost company/faction rep for future augs\\n    \\\"Daedalus\\\", // Once we have all faction_rep boosting augs, there's no reason not to work towards Daedalus as soon as it's available/feasible so we can buy Red Pill\\n    \\\"Fulcrum Secret Technologies\\\", // Will be removed if hack level is too low to backdoor their server\\n    \\\"ECorp\\\", // More cmp_rep augs, and some strong hack ones as well\\n    \\\"BitRunners\\\", \\\"The Black Hand\\\", // Fastest sources of hacking augs after the above companies\\n    \\\"The Dark Army\\\", // Unique cmp_rep aug TODO: Can it sensibly be gotten before corps? Requires 300 all combat stats.\\n    \\\"Clarke Incorporated\\\", \\\"OmniTek Incorporated\\\", \\\"NWO\\\", // More hack augs from companies\\n    \\\"Chongqing\\\", // Unique Source of big 1.4x hack exp boost (Can only join if not in e.g. Aevum as well)\\n];\\n// This is an approximate order of most useful augmentations left to offer, assuming all early-game factions have been cleaned out\\nconst preferredCompanyFactionOrder = [\\n    \\\"Bachman & Associates\\\", // Augs boost company_rep by 1.65, faction_rep by 1.50. Lower rep-requirements than ECorp augs, so should be a priority to speed up future resets\\n    \\\"ECorp\\\", // Offers 2.26 multi worth of company_rep and major hacking stat boosts (1.51 hack / 1.54 exp / 1.43 success / 3.0 grow / 2.8 money / 1.25 speed), but high rep reqs\\n    \\\"Clarke Incorporated\\\", // Biggest boost to hacking after above factions (1.38)\\n    \\\"OmniTek Incorporated\\\", // Next big boost to hacking after above factions (1.20) (NWO is bigger, but this has lower Cha reqs.)\\n    \\\"NWO\\\", // Biggest boost to hacking after above factions (1.26)\\n    \\\"Blade Industries\\\", // Mostly redundant after Ecorp - provides remaining hack-related augs (1.10 money, 1.03 speed)\\n    \\\"MegaCorp\\\", // Offers 1 unique aug boosting all physical traits by 1.35\\n    \\\"KuaiGong International\\\", // 1.40 to agility, defense, strength\\n    \\\"Fulcrum Secret Technologies\\\", // Big boosts to company_rep and hacking, but requires high hack level to backdoor their server, so might have to be left until later\\n    \\\"Four Sigma\\\", // No unique augs, but note that if accessible early on, Fulcrum + Four Sigma is a one-two punch to get all company rep boosting augs in just 2 factions\\n]\\n// Order in which to focus on crime factions\\nconst preferredCrimeFactionOrder = [\\\"Netburners\\\", \\\"Slum Snakes\\\", \\\"NiteSec\\\", \\\"Tetrads\\\", \\\"The Black Hand\\\", \\\"The Syndicate\\\", \\\"The Dark Army\\\", \\\"Speakers for the Dead\\\", \\\"Daedalus\\\"]\\n\\nconst loopSleepInterval = 5000; // 5 seconds\\nconst statusUpdateInterval = 60000; // 1 minute (outside of this, minor updates in e.g. stats aren't logged)\\nconst restartWorkInteval = 30000; // Collect e.g. rep earned by stopping and starting work;\\nlet noFocus = false; // Can be set via command line to disable doing work that requires focusing (crime, studying, or focused faction/company work)\\nlet noStudying = false; // Disable studying for Charisma. Useful in longer resets when Cha augs are insufficient to meet promotion requirements (Also disabled with --no-focus)\\nlet noCrime = false; // Disable doing crimes at all. (Also disabled with --no-focus)\\nlet crimeFocus = false; // Useful in crime-focused BNs when you want to focus on crime related factions\\nlet fastCrimesOnly = false; // Can be set via command line argument\\nlet prioritizeInvites = false;\\nlet hasFocusPenaly = true;\\nlet shouldFocusAtWork = false; // Whether we should focus on work or let it be backgrounded (based on whether \\\"Neuroreceptor Management Implant\\\" is owned, or \\\"--no-focus\\\" is specified)\\nlet repToDonate = 150; // Updated after looking at bitnode mults\\nlet lastActionRestart = 0;\\nlet crimeCount = 0; // A simple count of crime commited since last script restart\\nlet ownedAugmentations = [];\\nlet mostExpensiveAugByFaction = [];\\nlet mostExpensiveDesiredAugByFaction = [];\\nlet playerGang = null;\\nlet allGangFactions = [];\\nlet dictFactionFavors;\\n\\nlet options;\\nconst argsSchema = [\\n    ['first', []], // Grind rep with these factions first. Also forces a join of this faction if we normally wouldn't (e.g. no desired augs or all augs owned)\\n    ['skip', []], // Don't work for these factions\\n    ['o', false], // Immediately grind company factions for rep after getting their invite, rather than first getting all company invites we can\\n    ['desired-stats', ['hacking', 'faction_rep', 'company_rep', 'charisma', 'hacknet']], // Factions will be removed from our 'early-faction-order' once all augs with these stats have been bought out\\n    ['no-focus', false], // Disable doing work that requires focusing (crime, studying, or focused faction/company work)\\n    ['no-studying', false], // Disable studying for Charisma. Useful in longer resets when Cha augs are insufficient to meet promotion requirements (Also disabled with --no-focus)\\n    ['no-coding-contracts', false], // Disable purchasing coding contracts for reputation\\n    ['no-crime', false], // Disable doing crimes at all. (Also disabled with --no-focus)\\n    ['crime-focus', false], // Useful in crime-focused BNs when you want to focus on crime related factions\\n    ['fast-crimes-only', false], // Assasination and Heist are so slow, I can see people wanting to disable them just so they can interrupt at will.\\n    ['invites-only', false], // Just work to get invites, don't work for augmentations / faction rep\\n    ['prioritize-invites', false], // Prioritize working for as many invites as is practical before starting to grind for faction reputation\\n];\\n\\nexport function autocomplete(data, args) {\\n    data.flags(argsSchema);\\n    const lastFlag = args.length > 1 ? args[args.length - 2] : null;\\n    if (lastFlag == \\\"--first\\\" || lastFlag == \\\"--skip\\\")\\n        return factions.map(f => f.replaceAll(' ', '_')).sort();\\n    return [];\\n}\\n\\n/** @param {NS} ns */\\nexport async function main(ns) {\\n    disableLogs(ns, ['sleep', 'getServerRequiredHackingLevel'])\\n    ns.tail()\\n    options = ns.flags(argsSchema);\\n    const desiredAugStats = (options['desired-stats'] || []);\\n    const firstFactions = options.first = (options.first || []).map(f => f.replaceAll('_', ' '));\\n    let skipFactionsConfig = options.skip = (options.skip || []).map(f => f.replaceAll('_', ' '));\\n    noFocus = options['no-focus'];\\n    noStudying = options['no-studying'] || noFocus; // Can't study if we aren't allowed to steal focus\\n    noCrime = options['no-crime'] || noFocus; // Can't crime if we aren't allowed to steal focus\\n    crimeFocus = options['crime-focus'];\\n    prioritizeInvites = options['prioritize-invites'];\\n    if (crimeFocus && noFocus)\\n        return ns.tprint(\\\"ERROR: Cannot use --no-focus and --crime-focus at the same time. You need to focus to do crime!\\\");\\n    if (desiredAugStats.length == 0)\\n        desiredAugStats.push(...(crimeFocus ? ['str', 'def', 'dex', 'agi', 'faction_rep', 'hacking', 'hacknet'] : ['hacking', 'faction_rep', 'company_rep', 'charisma', 'hacknet']))\\n    fastCrimesOnly = options['fast-crimes-only'];\\n    // Log command line args used\\n    if (firstFactions.length > 0) ns.print(`--first factions: ${firstFactions.join(\\\", \\\")}`);\\n    if (skipFactionsConfig.length > 0) ns.print(`--skip factions: ${skipFactionsConfig.join(\\\", \\\")}`);\\n    if (desiredAugStats.length > 0) ns.print(`--desired-stats matching: ${desiredAugStats.join(\\\", \\\")}`);\\n    if (fastCrimesOnly) ns.print(`--fast-crimes-only`);\\n\\n\\n    let dictSourceFiles = await getActiveSourceFiles(ns); // Find out what source files the user has unlocked\\n    if (!(4 in dictSourceFiles))\\n        return ns.tprint(\\\"ERROR: You cannot automate working for factions until you have unlocked singularity access (SF4).\\\");\\n    else if (dictSourceFiles[4] < 3)\\n        ns.tprint(`WARNING: Singularity functions are much more expensive with lower levels of SF4 (you have SF4.${dictSourceFiles[4]}). ` +\\n            `You may encounter RAM issues with and have to wait until you have more RAM available to run this script successfully.`);\\n\\n    let bitnodeMults = await tryGetBitNodeMultipliers(ns); // Find out the current bitnode multipliers (if available)\\n    repToDonate = 150 * (bitnodeMults?.RepToDonateToFaction || 1);\\n    crimeCount = 0;\\n\\n    // Get some information about gangs (if unlocked)\\n    if (2 in dictSourceFiles) {\\n        const gangInfo = await getNsDataThroughFile(ns, 'ns.gang.inGang() ? ns.gang.getGangInformation() : false', '/Temp/gang-stats.txt');\\n        if (gangInfo && gangInfo.faction) {\\n            playerGang = gangInfo.faction;\\n            let configGangIndex = preferredEarlyFactionOrder.findIndex(f => f === \\\"Slum Snakes\\\");\\n            if (playerGang && configGangIndex != -1) // If we're in a gang, don't need to earn an invite to slum snakes anymore\\n                preferredEarlyFactionOrder.splice(configGangIndex, 1);\\n            allGangFactions = await getNsDataThroughFile(ns, 'Object.keys(ns.gang.getOtherGangInformation())', '/Temp/gang-names.txt') || [];\\n        }\\n    }\\n\\n    // Get some augmentation information to decide what remains to be purchased\\n    const dictFactionAugs = await getNsDataThroughFile(ns, dictCommand(factions, 'ns.getAugmentationsFromFaction(o)'), '/Temp/faction-augs.txt');\\n    const augmentationNames = [...new Set(Object.values(dictFactionAugs).flat())];\\n    const dictAugRepReqs = await getNsDataThroughFile(ns, dictCommand(augmentationNames, 'ns.getAugmentationRepReq(o)'), '/Temp/aug-repreqs.txt');\\n    const dictAugStats = await getNsDataThroughFile(ns, dictCommand(augmentationNames, 'ns.getAugmentationStats(o)'), '/Temp/aug-stats.txt');\\n    dictFactionFavors = await getNsDataThroughFile(ns, dictCommand(factions, 'ns.getFactionFavor(o)'), '/Temp/faction-favor.txt');\\n\\n    ownedAugmentations = await getNsDataThroughFile(ns, `ns.getOwnedAugmentations(true)`, '/Temp/player-augs-purchased.txt');\\n    let installedAugmentations = await getNsDataThroughFile(ns, `ns.getOwnedAugmentations()`, '/Temp/player-augs-installed.txt');\\n    hasFocusPenaly = !installedAugmentations.includes(\\\"Neuroreceptor Management Implant\\\"); // Check if we have an augmentation that lets us not have to focus at work (always nicer if we can background it)\\n    shouldFocusAtWork = !noFocus && hasFocusPenaly; // Focus at work for the best rate of rep gain, unless focus activities are disabled via command line\\n\\n    mostExpensiveAugByFaction = Object.fromEntries(factions.map(f => [f, dictFactionAugs[f]\\n        .filter(aug => !ownedAugmentations.includes(aug))\\n        .reduce((max, aug) => Math.max(max, dictAugRepReqs[aug]), -1)]));\\n    //ns.print(\\\"Most expensive unowned aug by faction: \\\" + JSON.stringify(mostExpensiveAugByFaction));\\n    // TODO: Detect when the most expensive aug from two factions is the same - only need it from the first one. (Update lists and remove 'afforded' augs?)\\n    mostExpensiveDesiredAugByFaction = Object.fromEntries(factions.map(f => [f, dictFactionAugs[f]\\n        .filter(aug => !ownedAugmentations.includes(aug) && (Object.keys(dictAugStats[aug]).length == 0 || !desiredAugStats ||\\n            Object.keys(dictAugStats[aug]).some(key => desiredAugStats.some(stat => key.includes(stat)))))\\n        .reduce((max, aug) => Math.max(max, dictAugRepReqs[aug]), -1)]));\\n\\n    //ns.print(\\\"Most expensive desired aug by faction: \\\" + JSON.stringify(mostExpensiveDesiredAugByFaction));\\n    let completedFactions = Object.keys(mostExpensiveAugByFaction).filter(fac => mostExpensiveAugByFaction[fac] == -1 && !factionSpecificConfigs.find(c => c.name == fac)?.forceUnlock);\\n    let skipFactions = skipFactionsConfig.concat(completedFactions);\\n    let softCompletedFactions = Object.keys(mostExpensiveDesiredAugByFaction).filter(fac => mostExpensiveDesiredAugByFaction[fac] == -1 &&\\n        !completedFactions.includes(fac) && !factionSpecificConfigs.find(c => c.name == fac)?.forceUnlock);\\n    if (completedFactions.length > 0)\\n        ns.print(`${completedFactions.length} factions are completed (all augs purchased): ${completedFactions.join(\\\", \\\")}`);\\n    if (softCompletedFactions.length > 0)\\n        ns.print(`${softCompletedFactions.length} factions will initially be skipped (all desired augs purchased): ${softCompletedFactions.join(\\\", \\\")}`);\\n\\n    let scope = 0; // Scope increases each time we complete a type of work and haven't progressed enough to unlock more factions\\n    let numJoinedFactions = ns.getPlayer().factions.length;\\n    while (true) { // After each loop, we will repeat all prevous work \\\"strategies\\\" to see if anything new has been unlocked, and add one more \\\"strategy\\\" to the queue\\n        scope++;\\n        ns.print(`INFO: Starting main work loop with scope: ${scope}...`);\\n        const player = ns.getPlayer();\\n        if (player.factions.length > numJoinedFactions) { // If we've recently joined a new faction, reset our work scope\\n            scope = 1; // Back to basics until we've satisfied all highest-priority work\\n            numJoinedFactions = player.factions.length;\\n        }\\n\\n        // Remove Fulcrum from our \\\"EarlyFactionOrder\\\" if hack level is insufficient to backdoor their server\\n        let priorityFactions = crimeFocus ? preferredCrimeFactionOrder.slice() : preferredEarlyFactionOrder.slice();\\n        let fulcrummHackReq = ns.getServerRequiredHackingLevel(\\\"fulcrumassets\\\");\\n        if (player.hacking < fulcrummHackReq - 10) { // Assume that if we're within 10, we'll get there by the time we've earned the invite\\n            priorityFactions.splice(priorityFactions.findIndex(c => c == \\\"Fulcrum Secret Technologies\\\"), 1);\\n            ns.print(`Fulcrum faction server requires ${fulcrummHackReq} hack, so removing from our initial priority list for now.`);\\n        } // TODO: Otherwise, if we get Fulcrum, we have no need for a couple other company factions\\n        // Strategy 1: Tackle a consolidated list of desired faction order, interleaving simple factions and megacorporations\\n        const factionWorkOrder = firstFactions.concat(priorityFactions.filter(f => !firstFactions.includes(f) && !skipFactions.includes(f)))\\n            .filter(f => !softCompletedFactions.includes(f)); // Remove factions from our initial \\\"work order\\\" if we've bought all desired augmentations.        \\n        for (const faction of factionWorkOrder) {\\n            let earnedNewFactionInvite = false;\\n            if (preferredCompanyFactionOrder.includes(faction)) // If this is a company faction, we need to work for the company first\\n                earnedNewFactionInvite = await workForMegacorpFactionInvite(ns, faction, true);\\n            // If new work was done for a company or their faction, restart the main work loop to see if we've since unlocked a higher-priority faction in the list\\n            if (earnedNewFactionInvite || await workForSingleFaction(ns, faction)) {\\n                scope--; // De-increment scope so that effecitve scope doesn't increase on the next loop (i.e. it will be incrementedback to what it is now)\\n                break;\\n            }\\n        }\\n        if (scope <= 1) continue;\\n\\n        // Strategy 2: Grind XP with all priority factions that are joined or can be joined, until every single one has desired REP\\n        for (const faction of factionWorkOrder)\\n            await workForSingleFaction(ns, faction);\\n        if (scope <= 2) continue;\\n\\n        // Strategy 3: Work for any megacorporations not yet completed to earn their faction invites. Once joined, we don't lose these factions on reset.\\n        let megacorpFactions = preferredCompanyFactionOrder.filter(f => !skipFactions.includes(f));\\n        await workForAllMegacorps(ns, megacorpFactions, false);\\n        if (scope <= 3) continue;\\n\\n        // Strategy 4: Work for megacorps again, but this time also work for the company factions once the invite is earned\\n        await workForAllMegacorps(ns, megacorpFactions, true);\\n        if (scope <= 4) continue;\\n\\n        // Strategies 5+ now work towards getting an invite to *all factions in the game* (sorted by least-expensive final aug (correlated to easiest faction-invite requirement))\\n        let joinedFactions = player.factions; // In case our hard-coded list of factions is missing anything, merge it with the list of all factions\\n        let knownFactions = factions.concat(joinedFactions.filter(f => !factions.includes(f)));\\n        let allIncompleteFactions = knownFactions.filter(f => !skipFactions.includes(f) && !completedFactions.includes(f)).sort((a, b) => mostExpensiveAugByFaction[a] - mostExpensiveAugByFaction[b]);\\n        // Strategy 5: For *all factions in the game*, try to earn an invite and work for rep until we can afford the most-expensive *desired* aug (or unlock donations, whichever comes first)\\n        for (const faction of allIncompleteFactions.filter(f => !softCompletedFactions.includes(f)))\\n            await workForSingleFaction(ns, faction);\\n        if (scope <= 5) continue;\\n\\n        // Strategy 6: Revisit all factions until each has enough rep to unlock donations - so if we can't afford all augs this reset, at least we don't need to grind for rep on the next reset\\n        // For this, we reverse the order (ones with augs costing the most-rep to least) since these will take the most time to re-grind rep for if we can't buy them this reset.\\n        for (const faction of allIncompleteFactions.reverse())\\n            await workForSingleFaction(ns, faction, true);\\n        if (scope <= 6) continue;\\n\\n        // Strategy 7:  Next, revisit all factions and grind XP until we can afford the most expensive aug, even if we could just buy the required rep next reset\\n        for (const faction of allIncompleteFactions.reverse()) // Re-reverse the sort order so we start with the easiest (cheapest) faction augs to complete\\n            await workForSingleFaction(ns, faction, true, true);\\n        if (scope <= 7) continue;\\n\\n        // Strategy 8: Busy ourselves for a while longer, then loop to see if there anything more we can do for the above factions\\n        let factionsWeCanWorkFor = knownFactions.filter(f => !skipFactionsConfig.includes(f) && !allGangFactions.includes(f));\\n        if (factionsWeCanWorkFor.length > 0 && !crimeFocus) {\\n            // Do a little work for whatever faction has the most favor (e.g. to earn EXP and enable additional neuroflux purchases)\\n            let mostFavorFaction = factionsWeCanWorkFor.sort((a, b) => dictFactionFavors[b] - dictFactionFavors[a])[0];\\n            let targetRep = 1000 + ns.getFactionRep(mostFavorFaction) * 1.05; // Hack: Grow rep by ~5%, plus 1000 incase it's currently 0\\n            ns.print(`INFO: All useful work complete. Grinding an additional 5% rep (to ${formatNumberShort(targetRep)}) with highest-favor faction: ${mostFavorFaction} (${dictFactionFavors[mostFavorFaction]?.toFixed(2)} favor)`);\\n            await workForSingleFaction(ns, mostFavorFaction, false, false, targetRep);\\n        } else if (!noCrime) { // Otherwise, kill some time by doing crimes for a little while\\n            ns.print(`INFO: Nothing to do. Doing a little crime...`);\\n            await crimeForKillsKarmaStats(ns, 0, -ns.heart.break() + 100 /* Hack: Decrease Karma by 100 */, 0);\\n        } else { // If our hands our tied, twiddle our thumbs a bit\\n            ns.print(`INFO: Nothing to do. Sleeping for 30 seconds to see if magically we join a faction`);\\n            await ns.sleep(30000);\\n        }\\n        if (scope <= 8) scope--; // Cap the 'scope' value from increasing perpetually when we're on our last strategy\\n\\n        await ns.sleep(1); // Infinite loop protection in case somehow we loop without doing any meaningful work\\n    }\\n}\\n\\n// Ram-dodging helper, runs a command for all items in a list and returns a dictionary.\\nconst dictCommand = (list, command) => `Object.fromEntries(${JSON.stringify(list)}.map(o => [o, ${command}]))`;\\n\\n/** @param {NS} ns \\n * Prints a message, and also toasts it! */\\nfunction announce(ns, log, toastVariant = 'info') {\\n    if (!ns.print || !ns.toast) return; // If an error is caught/logged because the script is being killed, ns becomes undefined\\n    ns.print(`${toastVariant}: ${log}`);\\n    ns.toast(log, toastVariant);\\n}\\n\\nconst requiredMoneyByFaction = {\\n    \\\"Tian Di Hui\\\": 1E6, \\\"Sector-12\\\": 15E6, \\\"Chongqing\\\": 20E6, \\\"New Tokyo\\\": 20E6, \\\"Ishima\\\": 30E6, \\\"Aevum\\\": 40E6, \\\"Volhaven\\\": 50E6,\\n    \\\"Slum Snakes\\\": 1E6, \\\"Silhouette\\\": 15E6, \\\"The Syndicate\\\": 10E6, \\\"The Covenant\\\": 75E9, \\\"Daedalus\\\": 100E9, \\\"Illuminati\\\": 150E9\\n};\\nconst requiredBackdoorByFaction = { \\\"CyberSec\\\": \\\"CSEC\\\", \\\"NiteSec\\\": \\\"avmnite-02h\\\", \\\"The Black Hand\\\": \\\"I.I.I.I\\\", \\\"BitRunners\\\": \\\"run4theh111z\\\", \\\"Fulcrum Secret Technologies\\\": \\\"fulcrumassets\\\" };\\nconst requiredHackByFaction = { \\\"Tian Di Hui\\\": 50, \\\"Netburners\\\": 80, \\\"Speakers for the Dead\\\": 100, \\\"The Dark Army\\\": 300, \\\"The Syndicate\\\": 200, \\\"The Covenant\\\": 850, \\\"Daedalus\\\": 2500, \\\"Illuminati\\\": 1500 };\\nconst requiredCombatByFaction = { \\\"Slum Snakes\\\": 30, \\\"Tetrads\\\": 75, \\\"Speakers for the Dead\\\": 300, \\\"The Dark Army\\\": 300, \\\"The Syndicate\\\": 200, \\\"The Covenant\\\": 850, \\\"Daedalus\\\": 1500, \\\"Illuminati\\\": 1200 };\\nconst requiredKarmaByFaction = { \\\"Slum Snakes\\\": 9, \\\"Tetrads\\\": 18, \\\"Silhouette\\\": 22, \\\"Speakers for the Dead\\\": 45, \\\"The Dark Army\\\": 45, \\\"The Syndicate\\\": 90 };\\nconst requiredKillsByFaction = { \\\"Speakers for the Dead\\\": 30, \\\"The Dark Army\\\": 5 };\\nconst reqHackingOrCombat = [\\\"Daedalus\\\"]; // Special case factions that require only hacking or combat stats, not both\\n\\n/** @param {NS} ns */\\nasync function earnFactionInvite(ns, factionName) {\\n    const player = ns.getPlayer();\\n    const joinedFactions = player.factions;\\n    if (joinedFactions.includes(factionName)) return true;\\n    var invitations = await getNsDataThroughFile(ns, 'ns.checkFactionInvitations()', '/Temp/player-faction-invites.txt');\\n    if (invitations.includes(factionName))\\n        return await tryJoinFaction(ns, factionName);\\n\\n    // Can't join certain factions for various reasons\\n    let reasonPrefix = `Cannot join faction \\\"${factionName}\\\" because`;\\n    let precludingFaction;\\n    if ([\\\"Aevum\\\", \\\"Sector-12\\\"].includes(factionName) && (precludingFaction = [\\\"Chongqing\\\", \\\"New Tokyo\\\", \\\"Ishima\\\", \\\"Volhaven\\\"].find(f => joinedFactions.includes(f))) ||\\n        [\\\"Chongqing\\\", \\\"New Tokyo\\\", \\\"Ishima\\\"].includes(factionName) && (precludingFaction = [\\\"Aevum\\\", \\\"Sector-12\\\", \\\"Volhaven\\\"].find(f => joinedFactions.includes(f))) ||\\n        [\\\"Volhaven\\\"].includes(factionName) && (precludingFaction = [\\\"Aevum\\\", \\\"Sector-12\\\", \\\"Chongqing\\\", \\\"New Tokyo\\\", \\\"Ishima\\\"].find(f => joinedFactions.includes(f))))\\n        return ns.print(`${reasonPrefix} precluding faction \\\"${precludingFaction}\\\"\\\" has been joined.`);\\n    let requirement;\\n    // See if we can take action to earn an invite for the next faction under consideration\\n    let workedForInvite = false;\\n    // If committing crimes can help us join a faction - we know how to do that\\n    let doCrime = false;\\n    if ((requirement = requiredKarmaByFaction[factionName]) && -ns.heart.break() < requirement) {\\n        ns.print(`${reasonPrefix} you have insufficient Karma. Need: ${-requirement}, Have: ${ns.heart.break()}`);\\n        doCrime = true;\\n    }\\n    if ((requirement = requiredKillsByFaction[factionName]) && player.numPeopleKilled < requirement) {\\n        ns.print(`${reasonPrefix} you have insufficient kills. Need: ${requirement}, Have: ${player.numPeopleKilled}`);\\n        doCrime = true;\\n    }\\n    let deficientStats;\\n    if ((requirement = requiredCombatByFaction[factionName]) &&\\n        (deficientStats = [{ name: \\\"str\\\", value: player.strength }, { name: \\\"str\\\", value: player.defense }, { name: \\\"str\\\", value: player.dexterity }, { name: \\\"str\\\", value: player.agility }]\\n            .filter(stat => stat.value < requirement)).length > 0\\n        && !(reqHackingOrCombat.includes(factionName) && player.hacking >= requiredHackByFaction[factionName])) { // Some special-case factions (just 'Daedalus' for now) require *either* hacking *or* combat\\n        ns.print(`${reasonPrefix} you have insufficient combat stats. Need: ${requirement} of each, ` +\\n            `Have Str: ${player.strength}, Def: ${player.defense}, Dex: ${player.dexterity}, Agi: ${player.agility}`);\\n        const em = requirement / 50; // Hack: A rough heuristic suggesting we need an additional x1 multi for every ~50 pysical stat points we wish to grind out in a reasonable amount of time. TODO: Be smarter\\n        if (!crimeFocus && (player.strength_exp_mult * player.strength_mult < em || player.defense_exp_mult * player.defense_mult < em ||\\n            player.dexterity_exp_mult * player.dexterity_mult < em || player.agility_exp_mult * player.agility_mult < em))\\n            return ns.print(\\\"Physical mults / exp_mults are too low to increase stats in a reasonable amount of time\\\");\\n        doCrime = true; // TODO: There could be more efficient ways to gain combat stats than homicide, although at least this serves future crime factions\\n    }\\n    if (doCrime && noCrime)\\n        return ns.print(`--no-crime (or --no-focus): Doing crime to meet faction requirements is disabled.`);\\n    if (doCrime)\\n        workedForInvite = await crimeForKillsKarmaStats(ns, requiredKillsByFaction[factionName] || 0, requiredKarmaByFaction[factionName] || 0, requiredCombatByFaction[factionName] || 0);\\n\\n    // Skip factions for which money/hack level requirements aren't met. We do not attempt to \\\"train up\\\" for these things (happens automatically outside this script)\\n    if ((requirement = requiredMoneyByFaction[factionName]) && player.money < requirement)\\n        return ns.print(`${reasonPrefix} you have insufficient money. Need: ${formatMoney(requirement)}, Have: ${formatMoney(player.money)}`);\\n    if ((requirement = requiredHackByFaction[factionName]) && player.hacking < requirement && !reqHackingOrCombat.includes(factionName))\\n        return ns.print(`${reasonPrefix} you have insufficient hack level. Need: ${requirement}, Have: ${player.hacking}`);\\n    // Note: This only complains if we have insuffient hack to backdoor this faction server. If we have sufficient hack, we will \\\"waitForInvite\\\" below assuming an external script is backdooring ASAP \\n    if ((requirement = requiredBackdoorByFaction[factionName]) && player.hacking < ns.getServerRequiredHackingLevel(requirement))\\n        return ns.print(`${reasonPrefix} you must fist backdoor ${requirement}, which needs hack: ${ns.getServerRequiredHackingLevel(requirement)}, Have: ${player.hacking}`);\\n    //await getNsDataThroughFile(ns, `ns.connect('fulcrumassets'); await ns.installBackdoor(); ns.connect(home)`, '/Temp/backdoor-fulcrum.txt') // TODO: Do backdoor if we can but haven't yet?\\n\\n    // If travelling can help us join a faction - we can do that too\\n    if (['Tian Di Hui', 'Tetrads', 'The Dark Army'].includes(factionName))\\n        workedForInvite = await goToCity(ns, 'Chongqing');\\n    else if (['The Syndicate'].includes(factionName))\\n        workedForInvite = await goToCity(ns, 'Sector-12');\\n    else if ([\\\"Aevum\\\", \\\"Chongqing\\\", \\\"Sector-12\\\", \\\"New Tokyo\\\", \\\"Ishima\\\", \\\"Volhaven\\\"].includes(factionName))\\n        workedForInvite = await goToCity(ns, factionName);\\n    // Special case, earn a CEO position to gain an invite to Silhouette\\n    if (\\\"Silhouette\\\" == factionName) {\\n        ns.print(`You must be a CO (e.g. CEO/CTO) of a company to earn an invite to ${factionName}. This may take a while!`);\\n        let factionConfig = companySpecificConfigs.find(f => f.name == factionName); // We set up Silhouette with a \\\"company-specific-config\\\" so that we can work for an invite like any megacorporation faction.\\n        let companyNames = preferredCompanyFactionOrder.map(f => companySpecificConfigs.find(cf => cf.name == f)?.companyName || f);\\n        let favorByCompany = await getNsDataThroughFile(ns, dictCommand(companyNames, 'ns.getCompanyFavor(o)'), '/Temp/company-favors.txt');\\n        // Change the company to work for into whichever company we can get to CEO fastest with. Minimize needed_rep/rep_gain_rate. CEO job is at 3.2e6 rep, so (3.2e6-current_rep)/(100+favor).\\n        factionConfig.companyName = companyNames.sort((a, b) => (3.2e6 - ns.getCompanyRep(a)) / (100 + favorByCompany[a]) - (3.2e6 - ns.getCompanyRep(b)) / (100 + favorByCompany[b]))[0];\\n        // Super-hack. Kick off an external script that just loops until it joins the faction, since we can't have concurrent ns calls in here.\\n        try { await runCommand(ns, `while(true) { if(ns.joinFaction('${factionName}')) return; else await ns.sleep(1000); }`, '/Temp/join-faction-loop.js'); }\\n        catch { ns.print(`WARN: Could not start a temporary script to join ${factionName} when avaialble. (Still running from a previous run?) Proceeding under the assumption something will join for us...`); }\\n        workedForInvite = await workForMegacorpFactionInvite(ns, factionName, false); // Work until CTO and the external script joins this faction, triggering an exit condition.\\n    }\\n\\n    if (workedForInvite) // If we took some action to earn the faction invite, wait for it to come in\\n        return await waitForFactionInvite(ns, factionName);\\n    else\\n        return ns.print(`Noting we can do at this time to earn an invitation to faction \\\"${factionName}\\\"...`);\\n}\\n\\n/** @param {NS} ns */\\nasync function goToCity(ns, cityName) {\\n    if (ns.getPlayer().city == cityName) {\\n        ns.print(`Already in city ${cityName}`);\\n        return true;\\n    }\\n    if (await getNsDataThroughFile(ns, `ns.travelToCity('${cityName}')`, '/Temp/travel.txt')) {\\n        lastActionRestart = Date.now();\\n        announce(ns, `Travelled to ${cityName}`, 'info');\\n        return true;\\n    }\\n    announce(ns, `Failed to travelled to ${cityName} for some reason...`, 'error');\\n    return false;\\n}\\n\\n/** @param {NS} ns \\n *  @param {function} crimeCommand if you want to commit the RAM footprint, you can pass in ns.commitCrime, otherise it will run via ram-dodging getNsDataThroughFile */\\nexport async function crimeForKillsKarmaStats(ns, reqKills, reqKarma, reqStats, crimeCommand = null, doFastCrimesOnly = false) {\\n    const bestCrimesByDifficulty = [\\\"heist\\\", \\\"assassinate\\\", \\\"homicide\\\", \\\"mug\\\"]; // Will change crimes as our success rate improves\\n    const chanceThresholds = [0.75, 0.9, 0.5, 0]; // Will change crimes once we reach this probability of success for better all-round gains\\n    doFastCrimesOnly = doFastCrimesOnly || fastCrimesOnly;\\n    if (!crimeCommand) crimeCommand = async crime => await getNsDataThroughFile(ns, `ns.commitCrime('${crime}')`, '/Temp/crime-time.txt');\\n    let player = ns.getPlayer();\\n    let strRequirements = [];\\n    let forever = reqKills >= Number.MAX_SAFE_INTEGER || reqKarma >= Number.MAX_SAFE_INTEGER || reqStats >= Number.MAX_SAFE_INTEGER;\\n    if (reqKills) strRequirements.push(() => `${reqKills} kills (Have ${player.numPeopleKilled})`);\\n    if (reqKarma) strRequirements.push(() => `-${reqKarma} Karma (Have ${ns.heart.break()})`);\\n    if (reqStats) strRequirements.push(() => `${reqStats} of each combat stat (Have Str: ${player.strength}, Def: ${player.defense}, Dex: ${player.dexterity}, Agi: ${player.agility})`);\\n    let crime, lastCrime, lastStatusUpdateTime;\\n    while (forever || player.strength < reqStats || player.defense < reqStats || player.dexterity < reqStats || player.agility < reqStats || player.numPeopleKilled < reqKills || -ns.heart.break() < reqKarma) {\\n        let crimeChances = await getNsDataThroughFile(ns, `Object.fromEntries(${JSON.stringify(bestCrimesByDifficulty)}.map(c => [c, ns.getCrimeChance(c)]))`, '/Temp/crime-chances.txt');\\n        let needStats = player.strength < reqStats || player.defense < reqStats || player.dexterity < reqStats || player.agility < reqStats;\\n        let karma = -ns.heart.break();\\n        crime = crimeCount < 10 ? (crimeChances[\\\"homicide\\\"] > 0.75 ? \\\"homicide\\\" : \\\"mug\\\") : // Start with a few fast & easy crimes to boost stats if we're just starting\\n            (!needStats && (player.numPeopleKilled < reqKills || karma < reqKarma)) ? \\\"homicide\\\" : // If *all* we need now is kills or Karma, homicide is the fastest way to do that\\n                bestCrimesByDifficulty.find((c, index) => doFastCrimesOnly ? index > 1 : crimeChances[c] >= chanceThresholds[index]); // Otherwise, crime based on success chance vs relative reward (precomputed)\\n        if (lastCrime != crime || (Date.now() - lastStatusUpdateTime) > statusUpdateInterval) {\\n            ns.print(`Committing \\\"${crime}\\\" (${(100 * crimeChances[crime]).toPrecision(3)}% success) ` + (forever ? 'forever...' : `until we reach ${strRequirements.map(r => r()).join(', ')}`));\\n            lastCrime = crime;\\n            lastStatusUpdateTime = Date.now();\\n        }\\n        ns.tail(); // Force a tail window open when auto-criming, or else it's very difficult to stop if it was accidentally closed.\\n        await ns.sleep(await crimeCommand(crime));\\n        while ((player = ns.getPlayer()).crimeType == `commit ${crime}` || player.crimeType == crime) // If we woke up too early, wait a little longer for the crime to finish\\n            await ns.sleep(10);\\n        crimeCount++;\\n    }\\n    ns.print(`Done committing crimes. Reached ${strRequirements.map(r => r()).join(', ')}`);\\n    return true;\\n}\\n\\n/** @param {NS} ns */\\nasync function studyForCharisma(ns) {\\n    await goToCity(ns, 'Volhaven');\\n    if (await getNsDataThroughFile(ns, `ns.universityCourse('ZB Institute Of Technology', 'Leadership')`, '/Temp/study.txt')) {\\n        lastActionRestart = Date.now();\\n        announce(ns, `Started studying 'Leadership' at 'ZB Institute Of Technology`, 'success');\\n        return true;\\n    }\\n    announce(ns, `For some reason, failed to study at university (not in correct city?)`, 'error');\\n    return false;\\n}\\n\\n/** @param {NS} ns */\\nexport async function waitForFactionInvite(ns, factionName, maxWaitTime = 20000) {\\n    ns.print(`Waiting for invite from faction \\\"${factionName}\\\"...`);\\n    let waitTime = maxWaitTime;\\n    do {\\n        var invitations = await getNsDataThroughFile(ns, 'ns.checkFactionInvitations()', '/Temp/player-faction-invites.txt');\\n        var joinedFactions = ns.getPlayer().factions;\\n        if (invitations.includes(factionName) || joinedFactions.includes(factionName))\\n            break;\\n        await ns.sleep(loopSleepInterval);\\n    } while (!invitations.includes(factionName) && !joinedFactions.includes(factionName) && (waitTime -= 1000) > 0);\\n    if (joinedFactions.includes(factionName)) // Another script may have auto-joined this faction before we could\\n        ns.print(`An external script has joined faction \\\"${factionName}\\\" for us.`);\\n    else if (!invitations.includes(factionName))\\n        return announce(ns, `Waited ${formatDuration(maxWaitTime)}, but still have not recieved an invite for faction: \\\"${factionName}\\\" (Requirements not met?)`, 'error');\\n    else if (!(await tryJoinFaction(ns, factionName)))\\n        return announce(ns, `Something went wrong. Earned \\\"${factionName}\\\" faction invite, but failed to join it.`, 'error');\\n    return true;\\n}\\n\\n/** @param {NS} ns */\\nexport async function tryJoinFaction(ns, factionName) {\\n    var joinedFactions = ns.getPlayer().factions;\\n    if (joinedFactions.includes(factionName))\\n        return true;\\n    if (!(await getNsDataThroughFile(ns, `ns.joinFaction('${factionName}')`, '/Temp/join-faction.txt')))\\n        return false;\\n    announce(ns, `Joined faction \\\"${factionName}\\\"`, 'success');\\n    return true;\\n}\\n\\n/** @param {NS} ns */\\nasync function getCurrentFactionFavour(ns, factionName) {\\n    return await getNsDataThroughFile(ns, `ns.getFactionFavor('${factionName}')`, '/Temp/faction-favor.txt');\\n}\\n\\nlet lastFactionWorkStatus = \\\"\\\";\\n/** @param {NS} ns \\n * Checks how much reputation we need with this faction to either buy all augmentations or get 150 favour, then works to that amount.\\n * */\\nexport async function workForSingleFaction(ns, factionName, forceUnlockDonations = false, forceBestAug = false, forceRep = undefined) {\\n    const repToFavour = (rep) => Math.ceil(25500 * 1.02 ** (rep - 1) - 25000);\\n    const factionConfig = factionSpecificConfigs.find(c => c.name == factionName);\\n    const forceUnlock = factionConfig?.forceUnlock || options.first.includes(factionName);\\n    let highestRepAug = forceBestAug ? mostExpensiveAugByFaction[factionName] : mostExpensiveDesiredAugByFaction[factionName];\\n    let startingFavor = dictFactionFavors[factionName];\\n    let favorRepRequired = Math.max(0, repToFavour(repToDonate) - repToFavour(startingFavor));\\n    // When to stop grinding faction rep (usually ~467,000 to get 150 favour) Set this lower if there are no augs requiring that much REP\\n    let factionRepRequired = forceRep ? forceRep : forceUnlockDonations ? favorRepRequired : Math.min(highestRepAug, favorRepRequired);\\n    if (highestRepAug == -1 && !forceUnlock && !forceRep)\\n        return ns.print(`All \\\"${factionName}\\\" augmentations are owned. Skipping unlocking faction...`);\\n    // Ensure we get an invite to location-based factions we might want / need\\n    if (!await earnFactionInvite(ns, factionName))\\n        return ns.print(`We are not yet part of faction \\\"${factionName}\\\". Skipping working for faction...`);\\n    if (startingFavor >= repToDonate && !forceRep) // If we have already unlocked donations via favour - no need to grind for rep\\n        return ns.print(`Donations already unlocked for \\\"${factionName}\\\". You should buy access to augs. Skipping working for faction...`);\\n    // Cannot work for gang factions. Detect if this is our gang faction!\\n    if (factionName === playerGang || allGangFactions.includes(factionName))\\n        return ns.print(`\\\"${factionName}\\\" is an active gang faction. Cannot work for gang factions...`);\\n    if (forceUnlockDonations && mostExpensiveAugByFaction[factionName] < 0.2 * factionRepRequired) { // Special check to avoid pointless donation unlocking\\n        ns.print(`The last \\\"${factionName}\\\" aug is only ${mostExpensiveAugByFaction[factionName].toLocaleString()} rep, ` +\\n            `not worth grinding ${favorRepRequired.toLocaleString()} rep to unlock donations.`);\\n        forceUnlockDonations = false;\\n        factionRepRequired = highestRepAug = mostExpensiveAugByFaction[factionName];\\n    }\\n\\n    if (ns.getPlayer().workRepGained > 0) // If we're currently doing faction work, stop to collect reputation and find out how much is remaining\\n        await getNsDataThroughFile(ns, `ns.stopAction()`, '/Temp/stop-action.txt');\\n    let currentReputation = ns.getFactionRep(factionName);\\n    // If the best faction aug is within 10% of our current rep, grind all the way to it so we can get it immediately, regardless of our current rep target\\n    if (forceBestAug || highestRepAug <= 1.1 * Math.max(currentReputation, factionRepRequired)) {\\n        forceBestAug = true;\\n        factionRepRequired = Math.max(highestRepAug, factionRepRequired);\\n    }\\n\\n    if (currentReputation >= factionRepRequired)\\n        return ns.print(`Faction \\\"${factionName}\\\" required rep of ${Math.round(factionRepRequired).toLocaleString()} has already been attained ` +\\n            `(Current rep: ${Math.round(currentReputation).toLocaleString()}). Skipping working for faction...`)\\n\\n    ns.print(`Faction \\\"${factionName}\\\" Highest Aug Req: ${highestRepAug.toLocaleString()}, Current Favor (` +\\n        `${startingFavor?.toFixed(2)}/${repToDonate?.toFixed(2)}) Req: ${Math.round(favorRepRequired).toLocaleString()}`);\\n    if (options['invites-only'])\\n        return ns.print(`--invites-only Skipping working for faction...`);\\n    if (prioritizeInvites && !forceUnlockDonations && !forceBestAug && !forceRep)\\n        return ns.print(`--prioritize-invites Skipping working for faction for now...`);\\n\\n    let lastStatusUpdateTime = 0, lastRepMeasurement = ns.getFactionRep(factionName), repGainRatePerMs = 0;\\n    while ((currentReputation = ns.getFactionRep(factionName)) < factionRepRequired) {\\n        const factionWork = await detectBestFactionWork(ns, factionName); // Before each loop - determine what work gives the most rep/second for our current stats\\n        if (await getNsDataThroughFile(ns, `ns.workForFaction('${factionName}', '${factionWork}',  ${shouldFocusAtWork})`, '/Temp/work-for-faction.txt')) {\\n            if (shouldFocusAtWork) ns.tail(); // Force a tail window open to help the user kill this script if they accidentally closed the tail window and don't want to keep stealing focus\\n            currentReputation = ns.getFactionRep(factionName); // Update to capture the reputation earned when restarting work\\n            if (currentReputation > factionRepRequired) break;\\n            lastActionRestart = Date.now(); repGainRatePerMs = ns.getPlayer().workRepGainRate; // Note: In order to get an accurate rep gain rate, we must wait for the first game tick (200ms) after starting work\\n            while (repGainRatePerMs === ns.getPlayer().workRepGainRate && (Date.now() - lastActionRestart < 400)) await ns.sleep(1); // TODO: Remove this if/when the game bug is fixed\\n            repGainRatePerMs = ns.getPlayer().workRepGainRate / 200 * (hasFocusPenaly && !shouldFocusAtWork ? 0.8 : 1 /* penalty if we aren't focused but don't have the aug to compensate */);\\n        } else {\\n            announce(ns, `Something went wrong, failed to start \\\"${factionWork}\\\" work for faction \\\"${factionName}\\\" (Is gang faction, or not joined?)`, 'error');\\n            break;\\n        }\\n        let status = `Doing '${factionWork}' work for \\\"${factionName}\\\" until ${Math.round(factionRepRequired).toLocaleString()} rep.`;\\n        if (lastFactionWorkStatus != status || (Date.now() - lastStatusUpdateTime) > statusUpdateInterval) {\\n            // Actually measure how much reputation we've earned since our last update, to give a more accurate ETA including external sources of rep\\n            let measuredRepGainRatePerMs = (ns.getFactionRep(factionName) - lastRepMeasurement) / (Date.now() - lastStatusUpdateTime);\\n            if (currentReputation > lastRepMeasurement + statusUpdateInterval * repGainRatePerMs * 2) // Detect a sudden increase in rep, but don't use it to update the expected rate\\n                ns.print('SUCCESS: Reputation spike! (Perhaps a coding contract was just solved?) ETA reduced.');\\n            else if (lastStatusUpdateTime != 0 && Math.abs(measuredRepGainRatePerMs - repGainRatePerMs) / repGainRatePerMs > 0.05) // Stick to the game-provided rate if we measured something within 5% of that number\\n                repGainRatePerMs = measuredRepGainRatePerMs; // If we measure a significantly different rep gain rate, this could be due to external sources of rep (e.g. sleeves) - account for it in the ETA\\n            lastStatusUpdateTime = Date.now(); lastRepMeasurement = currentReputation;\\n            const eta_milliseconds = (factionRepRequired - currentReputation) / repGainRatePerMs;\\n            ns.print((lastFactionWorkStatus = status) + ` Currently at ${Math.round(currentReputation).toLocaleString()}, earning ${formatNumberShort(repGainRatePerMs * 1000)} rep/sec. ` +\\n                (hasFocusPenaly && !shouldFocusAtWork ? 'after 20% non-focus Penalty ' : '') + `(ETA: ${formatDuration(eta_milliseconds)})`);\\n        }\\n        await tryBuyReputation(ns);\\n        await ns.sleep(restartWorkInteval);\\n        if (!forceBestAug && !forceRep) { // Detect our rep requirement decreasing (e.g. if we exported for our daily +1 faction rep)\\n            let currentFavor = await getCurrentFactionFavour(ns, factionName);\\n            if (currentFavor > startingFavor) {\\n                startingFavor = dictFactionFavors[factionName] = currentFavor;\\n                favorRepRequired = Math.max(0, repToFavour(repToDonate) - repToFavour(startingFavor));\\n                factionRepRequired = forceUnlockDonations ? favorRepRequired : Math.min(highestRepAug, favorRepRequired);\\n            }\\n        }\\n        let workRepGained = ns.getPlayer().workRepGained; // Try to align ourselves to the next game tick so we aren't missing out on a few ms of rep\\n        while (workRepGained === ns.getPlayer().workRepGainRate && (Date.now() - lastActionRestart < 200)) await ns.sleep(1);\\n        // If we explicitly stop working, we immediately get our updated faction rep, otherwise it lags by 1 loop (until after next time we call workForFaction)\\n        if (currentReputation + ns.getPlayer().workRepGained >= factionRepRequired)\\n            await getNsDataThroughFile(ns, `ns.stopAction()`, '/Temp/stop-action.txt'); // We're close - stop working so our current rep is accurate when we check the while loop condition\\n    }\\n    if (currentReputation >= factionRepRequired)\\n        ns.print(`Attained ${Math.round(currentReputation).toLocaleString()} rep with \\\"${factionName}\\\" (needed ${factionRepRequired.toLocaleString()}).`);\\n    return currentReputation >= factionRepRequired;\\n}\\n\\n/** @param {NS} ns \\n * Try all work types and see what gives the best rep gain with this faction! */\\nasync function detectBestFactionWork(ns, factionName) {\\n    let bestWork, bestRepRate = 0;\\n    for (const work of [\\\"security\\\", \\\"field\\\", \\\"hacking\\\"]) {\\n        if (!await getNsDataThroughFile(ns, `ns.workForFaction('${factionName}', '${work}',  ${shouldFocusAtWork})`, '/Temp/work-for-faction.txt')) {\\n            //ns.print(`\\\"${factionName}\\\" work ${work} not supported.`);\\n            continue; // This type of faction work must not be supported\\n        }\\n        const currentRepGainRate = ns.getPlayer().workRepGainRate;\\n        //ns.print(`\\\"${factionName}\\\" work ${work} provides ${formatNumberShort(currentRepGainRate)} rep rate`);\\n        if (currentRepGainRate > bestRepRate) {\\n            bestRepRate = currentRepGainRate;\\n            bestWork = work;\\n        }\\n    }\\n    return bestWork;\\n}\\n\\n/** @param {NS} ns \\n *  @param {Array<string>} megacorpFactionsInPreferredOrder - The list of all corporate factions to work for, sorted in the order they should be worked for\\n *  @param {Array<string>} megacorpFactionsInPreferredOrder - The list of all corporate factions, sorted in the order they should be worked for\\n * */\\nexport async function workForAllMegacorps(ns, megacorpFactionsInPreferredOrder, alsoWorkForCompanyFactions, oneCompanyFactionAtATime) {\\n    let player = ns.getPlayer();\\n    if (player.hacking < 225)\\n        return ns.print(`Hacking Skill ${player.hacking} is to low to work for any megacorps (min req. 225).`);\\n    let joinedCompanyFactions = player.factions.filter(f => megacorpFactionsInPreferredOrder.includes(f)); // Company factions we've already joined\\n    if (joinedCompanyFactions.length > 0)\\n        ns.print(`${joinedCompanyFactions.length} companies' factions have already been joined: ${joinedCompanyFactions.join(\\\", \\\")}`)\\n    let doFactionWork = alsoWorkForCompanyFactions && oneCompanyFactionAtATime;\\n    // Earn each obtainabl megacorp faction invite, and optionally also grind faction rep\\n    for (const factionName of megacorpFactionsInPreferredOrder) {\\n        if ((await workForMegacorpFactionInvite(ns, factionName, doFactionWork)) && doFactionWork)\\n            await workForSingleFaction(ns, factionName);\\n    }\\n    if (alsoWorkForCompanyFactions && !oneCompanyFactionAtATime) { // If configured, start grinding rep with company factions we've joined\\n        ns.print(`Done working for companies, now working for all incomplete company factions...`);\\n        for (const factionName of megacorpFactionsInPreferredOrder)\\n            await workForSingleFaction(ns, factionName);\\n    }\\n}\\n\\n/** If we're wealthy, hashes have relatively little monetary value, spend hacknet-node hashes on contracts to gain rep faster\\n * @param {NS} ns */\\nexport async function tryBuyReputation(ns) {\\n    if (options['no-coding-contracts']) return;\\n    if (ns.getPlayer().money > 100E9) { // If we're wealthy, hashes have relatively little monetary value, spend hacknet-node hashes on contracts to gain rep faster\\n        let spentHashes = await getNsDataThroughFile(ns, 'ns.hacknet.numHashes() + ns.hacknet.spendHashes(\\\"Generate Coding Contract\\\") - ns.hacknet.numHashes()', '/Temp/spend-hacknet-hashes.txt');\\n        if (spentHashes > 0) {\\n            announce(ns, `Generated a new coding contract for ${formatNumberShort(Math.round(spentHashes / 100) * 100)} hashes`, 'success');\\n        }\\n    }\\n}\\n\\n// Used when working for a company to see if their server has been backdoored. If so, we can expect an increase in rep-gain (used for predicting an ETA)\\nconst serverByCompany = { \\\"Bachman & Associates\\\": \\\"b-and-a\\\", \\\"ECorp\\\": \\\"ecorp\\\", \\\"Clarke Incorporated\\\": \\\"clarkinc\\\", \\\"OmniTek Incorporated\\\": \\\"omnitek\\\", \\\"NWO\\\": \\\"nwo\\\", \\\"Blade Industries\\\": \\\"blade\\\", \\\"MegaCorp\\\": \\\"megacorp\\\", \\\"KuaiGong International\\\": \\\"kuai-gong\\\", \\\"Fulcrum Technologies\\\": \\\"fulcrumtech\\\", \\\"Four Sigma\\\": \\\"4sigma\\\" };\\n\\n/** @param {NS} ns */\\nexport async function workForMegacorpFactionInvite(ns, factionName, waitForInvite) {\\n    const companyConfig = companySpecificConfigs.find(c => c.name == factionName); // For anything company-specific\\n    const companyName = companyConfig?.companyName || factionName; // Name of the company that gives the faction (same for all but Fulcrum)\\n    const statModifier = companyConfig?.statModifier || 0; // How much e.g. Hack / Cha is needed for a promotion above the base requirement for the job\\n    const repRequiredForFaction = companyConfig?.repRequiredForFaction || 200000; // Required to unlock the faction\\n\\n    let player = ns.getPlayer();\\n    if (player.factions.includes(factionName))\\n        return false; // Only return true if we did work to earn a new faction invite\\n    if ((await getNsDataThroughFile(ns, 'ns.checkFactionInvitations()', '/Temp/player-faction-invites.txt')).includes(factionName))\\n        return waitForInvite ? await waitForFactionInvite(ns, factionName) : false;\\n    // TODO: In some scenarios, the best career path may require combat stats, this hard-codes the optimal path for hack stats\\n    const itJob = jobs.find(j => j.name == \\\"it\\\");\\n    const softwareJob = jobs.find(j => j.name == \\\"software\\\");\\n    if (itJob.reqHack[0] + statModifier > player.hacking) // We don't qualify to work for this company yet if we can't meet IT qualifications (lowest there are)\\n        return ns.print(`Cannot yet work for \\\"${companyName}\\\": Need Hack ${itJob.reqHack[0] + statModifier} to get hired (current Hack: ${player.hacking});`);\\n    ns.print(`Going to work for Company \\\"${companyName}\\\" next...`)\\n    let currentReputation, currentRole = \\\"\\\", currentJobTier = -1; // TODO: Derive our current position and promotion index based on player.jobs[companyName]\\n    let lastStatus = \\\"\\\", lastStatusUpdateTime = 0, lastRepMeasurement = ns.getCompanyRep(companyName), repGainRatePerMs = 0;\\n    let studying = false, working = false, backdoored = false;\\n    while (((currentReputation = ns.getCompanyRep(companyName)) < repRequiredForFaction) && !player.factions.includes(factionName)) {\\n        player = ns.getPlayer();\\n        // Determine the next promotion we're striving for (the sooner we get promoted, the faster we can earn company rep)\\n        const getTier = job => Math.min(job.reqRep.filter(r => r <= currentReputation).length, job.reqHack.filter(h => h <= player.hacking).length, job.reqCha.filter(c => c <= player.charisma).length) - 1;\\n        // It's generally best to hop back-and-forth between it and software engineer career paths (rep gain is about the same, but better money from software)\\n        const qualifyingItTier = getTier(itJob), qualifyingSoftwareTier = getTier(softwareJob);\\n        const bestJobTier = Math.max(qualifyingItTier, qualifyingSoftwareTier); // Go with whatever job promotes us higher\\n        const bestRoleName = qualifyingItTier > qualifyingSoftwareTier ? \\\"it\\\" : \\\"software\\\"; // If tied for qualifying tier, go for software\\n        if (currentJobTier < bestJobTier || currentRole != bestRoleName) { // We are ready for a promotion, ask for one!\\n            if (await getNsDataThroughFile(ns, `ns.applyToCompany('${companyName}','${bestRoleName}')`, '/Temp/apply-to-company.txt'))\\n                announce(ns, `Successfully applied to \\\"${companyName}\\\" for a '${bestRoleName}' Job or Promotion`, 'success');\\n            else if (currentJobTier !== -1) // Unless we just restarted \\\"work-for-factions\\\" and lost track of our current job, this is an error\\n                announce(ns, `Application to \\\"${companyName}\\\" for a '${bestRoleName}' Job or Promotion failed.`, 'error');\\n            currentJobTier = bestJobTier; // API to apply for a job immediately gives us the highest tier we qualify for\\n            currentRole = bestRoleName;\\n            player = ns.getPlayer();\\n        }\\n        const currentJob = player.jobs[companyName];\\n        const nextJobTier = currentRole == \\\"it\\\" ? currentJobTier : currentJobTier + 1;\\n        const nextJobName = currentRole == \\\"it\\\" || nextJobTier >= itJob.reqRep.length ? \\\"software\\\" : \\\"it\\\";\\n        const nextJob = nextJobName == \\\"it\\\" ? itJob : softwareJob;\\n        const requiredHack = nextJob.reqHack[nextJobTier] === 0 ? 0 : nextJob.reqHack[nextJobTier] + statModifier; // Stat modifier only applies to non-zero reqs\\n        const requiredCha = nextJob.reqCha[nextJobTier] === 0 ? 0 : nextJob.reqCha[nextJobTier] + statModifier; // Stat modifier only applies to non-zero reqs\\n        const requiredRep = nextJob.reqRep[nextJobTier]; // No modifier on rep requirements\\n        let status = `Next promotion ('${nextJobName}' #${nextJobTier}) at Hack:${requiredHack} Cha:${requiredCha} Rep:${requiredRep?.toLocaleString()}` +\\n            (repRequiredForFaction > nextJob.reqRep[nextJobTier] ? '' : `, but we won't need it, because we'll sooner hit ${repRequiredForFaction.toLocaleString()} reputation to unlock company faction \\\"${factionName}\\\"!`);\\n        // We should only study at university if every other requirement is met but Charisma\\n        if (currentReputation >= requiredRep && player.hacking >= requiredHack && player.charisma < requiredCha && !noStudying) {\\n            status = `Studying at ZB university until Cha reaches ${requiredCha}...\\\\n` + status;\\n            if (studying && player.className !== 'taking a Leadership course' && player.className !== 'Leadership' /* In case className is made more intuitive in the future */) {\\n                announce(ns, `Leadership studies were interrupted. player.className=\\\"${player.className}\\\" Restarting in 5 seconds...`, 'warning');\\n                studying = false; // If something external has interrupted our studies, take note\\n                ns.tail(); // Force a tail window open to help the user kill this script if they accidentally closed the tail window and don't want to keep studying\\n            }\\n            if (!studying) { // Study at ZB university if CHA is the limiter.\\n                if (await studyForCharisma(ns))\\n                    working = !(studying = true);\\n            }\\n            if (requiredCha - player.charisma > 10) { // Try to spend hacknet-node hashes on university upgrades while we've got a ways to study to make it go faster\\n                let spentHashes = await getNsDataThroughFile(ns, 'ns.hacknet.numHashes() + ns.hacknet.spendHashes(\\\"Improve Studying\\\") - ns.hacknet.numHashes()', '/Temp/spend-hacknet-hashes.txt');\\n                if (spentHashes > 0) {\\n                    announce(ns, 'Bought a \\\"Improve Studying\\\" upgrade.', 'success');\\n                    await studyForCharisma(ns); // We must restart studying for the upgrade to take effect.\\n                }\\n            }\\n        } else if (studying) { // If we no longer need to study and we currently are, turn off study mode and get back to work!\\n            studying = false;\\n            continue; // Restart the loop so we refresh our promotion index and apply for a promotion before working more\\n        }\\n        await tryBuyReputation(ns);\\n\\n        // Regardless of the earlier promotion logic, always try for a promotion to make sure we don't miss a promotion due to buggy logic \\n        if (await getNsDataThroughFile(ns, `ns.applyToCompany('${companyName}','${currentRole}')`, '/Temp/apply-to-company.txt'))\\n            announce(ns, `Unexpected '${currentRole}' promotion from ${currentJob} to \\\"${ns.getPlayer().jobs[companyName]}. Promotion logic must be off...\\\"`, 'warning');\\n        // TODO: If we ever get rid of the below periodic restart-work, we will need to monitor for interruptions with player.workType == e.g. \\\"Work for Company\\\"\\n        if (!studying && (!working || (Date.now() - lastActionRestart >= restartWorkInteval) /* We must periodically restart work to collect Rep Gains */)) {\\n            // Work for the company (assume daemon is grinding hack XP as fast as it can, so no point in studying for that)\\n            if (await getNsDataThroughFile(ns, `ns.workForCompany('${companyName}',  ${shouldFocusAtWork})`, '/Temp/work-for-company.txt')) {\\n                working = true;\\n                if (shouldFocusAtWork) ns.tail(); // Force a tail window open to help the user kill this script if they accidentally closed the tail window and don't want to keep stealing focus\\n                currentReputation = ns.getCompanyRep(companyName); // Update to capture the reputation earned when restarting work\\n                lastActionRestart = Date.now(); repGainRatePerMs = ns.getPlayer().workRepGainRate; // Note: In order to get an accurate rep gain rate, we must wait for the first game tick (200ms) after starting work\\n                while (repGainRatePerMs === ns.getPlayer().workRepGainRate && (Date.now() - lastActionRestart < 400)) await ns.sleep(1); // TODO: Remove this if/when the game bug is fixed\\n                repGainRatePerMs = ns.getPlayer().workRepGainRate / 200 * (hasFocusPenaly && !shouldFocusAtWork ? 0.8 : 1 /* penalty if we aren't focused but don't have the aug to compensate */);\\n            } else {\\n                announce(ns, `Something went wrong, failed to start working for company \\\"${companyName}\\\".`, 'error');\\n                break;\\n            }\\n        }\\n        if (lastStatus != status || (Date.now() - lastStatusUpdateTime) > statusUpdateInterval) {\\n            if (!backdoored) // Check if an external script has backdoored this company's server yet. If so, it affects our ETA. (Don't need to check again once we discover it is)\\n                backdoored = await getNsDataThroughFile(ns, `ns.getServer('${serverByCompany[companyName]}').backdoorInstalled`, '/Temp/company-is-backdoored.txt');\\n            const cancellationMult = backdoored ? 0.75 : 0.5; // We will lose some of our gained reputation when we stop working early\\n            repGainRatePerMs *= cancellationMult;\\n            // Actually measure how much reputation we've earned since our last update, to give a more accurate ETA including external sources of rep\\n            let measuredRepGainRatePerMs = (ns.getCompanyRep(companyName) - lastRepMeasurement) / (Date.now() - lastStatusUpdateTime);\\n            if (currentReputation > lastRepMeasurement + statusUpdateInterval * repGainRatePerMs * 2) // Detect a sudden increase in rep, but don't use it to update the expected rate\\n                ns.print('SUCCESS: Reputation spike! (Perhaps a coding contract was just solved?) ETA reduced.');\\n            else if (lastStatusUpdateTime != 0 && Math.abs(measuredRepGainRatePerMs - repGainRatePerMs) / repGainRatePerMs > 0.05) // Stick to the game-provided rate if we measured something within 5% of that number\\n                repGainRatePerMs = measuredRepGainRatePerMs; // If we measure a significantly different rep gain rate, this could be due to external sources of rep (e.g. sleeves) - account for it in the ETA\\n            lastStatusUpdateTime = Date.now(); lastRepMeasurement = currentReputation;\\n            const eta_milliseconds = ((requiredRep || repRequiredForFaction) - currentReputation) / repGainRatePerMs;\\n            player = ns.getPlayer();\\n            ns.print(`Currently a \\\"${player.jobs[companyName]}\\\" ('${currentRole}' #${currentJobTier}) for \\\"${companyName}\\\" earning ${formatNumberShort(repGainRatePerMs * 1000)} rep/sec. ` +\\n                `(after ${(100 * (1 - cancellationMult))?.toFixed(0)}% early-quit penalty` + (hasFocusPenaly && !shouldFocusAtWork ? ' and 20% non-focus Penalty' : '') + `)\\\\n` +\\n                `${status}\\\\nCurrent player stats are Hack:${player.hacking} ${player.hacking >= (requiredHack || 0) ? '✓' : '✗'} ` +\\n                `Cha:${player.charisma} ${player.charisma >= (requiredCha || 0) ? '✓' : '✗'} ` +\\n                `Rep:${Math.round(currentReputation).toLocaleString()} ${currentReputation >= (requiredRep || repRequiredForFaction) ? '✓' : `✗ (ETA: ${formatDuration(eta_milliseconds)})`}`);\\n            lastStatus = status;\\n        }\\n        await ns.sleep(loopSleepInterval); // Sleep now and wake up periodically and stop working to check our stats / reputation progress\\n    }\\n    // Return true if we succeeded, false otherwise.\\n    if (currentReputation >= repRequiredForFaction) {\\n        ns.print(`Attained ${repRequiredForFaction.toLocaleString()} rep with \\\"${companyName}\\\".`);\\n        if (!player.factions.includes(factionName) && waitForInvite)\\n            return await waitForFactionInvite(ns, factionName);\\n        return true;\\n    }\\n    ns.print(`Stopped working for \\\"${companyName}\\\" repRequiredForFaction: ${repRequiredForFaction.toLocaleString()} ` +\\n        `currentReputation: ${Math.round(currentReputation).toLocaleString()} inFaction: ${player.factions.includes(factionName)}`);\\n    return false;\\n}\",\"filename\":\"work-for-factions.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"helpers.js\",\"url\":\"blob:file:///795edf7d-e1b0-4bd3-a605-e6f245dfd207\",\"moduleSequenceNumber\":125},{\"filename\":\"work-for-factions.js\",\"url\":\"blob:file:///dd2d08c9-c6c9-4390-b89b-7938a2c88922\",\"moduleSequenceNumber\":270}],\"dependents\":[],\"ramUsage\":5.3,\"server\":\"home\",\"moduleSequenceNumber\":270,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getFactionRep\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getCompanyRep\",\"cost\":1},{\"type\":\"fn\",\"name\":\"run\",\"cost\":1},{\"type\":\"fn\",\"name\":\"isRunning\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns \\n * Wait until an appointed time and then execute a grow. */\\nexport async function main(ns) {\\n    //args[0: target, 1: desired start time, 2: expected end, 3: expected duration, 4: description, 5: manipulate stock, 6: loop]\\n    const sleepDuration = ns.args.length > 1 ? ns.args[1] - Date.now() : 0;\\n    const expectedDuration = ns.args.length > 3 ? ns.args[3] : 0;\\n    const manipulateStock = ns.args.length > 5 && ns.args[5] ? true : false;\\n    const loop = ns.args.length > 6 ? ns.args[6] : false;\\n    const cycleTime = expectedDuration / 3.2 * 4;\\n    if (sleepDuration > 0)\\n        await ns.sleep(sleepDuration);\\n    do {\\n        await ns.grow(ns.args[0], { stock: manipulateStock });\\n        if (loop) await ns.sleep(cycleTime - expectedDuration);\\n    } while (loop);\\n}\",\"filename\":\"/Remote/grow-target.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/Remote/grow-target.js\",\"url\":\"blob:file:///0fd958b5-c18e-4ec2-8450-d47b9b71302e\",\"moduleSequenceNumber\":239}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"home\",\"moduleSequenceNumber\":239,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns \\n * Wait until an appointed time and then execute a hack. */\\nexport async function main(ns) {\\n    //args[0: target, 1: desired start time, 2: expected end, 3: expected duration, 4: description, 5: manipulate stock, 6: disable toast warnings, 7: loop]\\n    const sleepDuration = ns.args.length > 1 ? ns.args[1] - Date.now() : 0;\\n    const expectedDuration = ns.args.length > 3 ? ns.args[3] : 0;\\n    const manipulateStock = ns.args.length > 5 && ns.args[5] ? true : false;\\n    const disableToastWarnings = ns.args.length > 6 ? ns.args[6] : false;\\n    const loop = ns.args.length > 7 ? ns.args[7] : false;\\n    let cycleTime = expectedDuration * 4;\\n    if (cycleTime < 100) cycleTime = Math.max(1, Math.min(5, cycleTime * 2)); // For fast hacking loops, inject a delay on hack in case grow/weaken are running a bit slow.\\n    if (sleepDuration > 0)\\n        await ns.sleep(sleepDuration);\\n    do {\\n        if (!await ns.hack(ns.args[0], { stock: manipulateStock }) && !disableToastWarnings)\\n            ns.toast(`Warning, hack stole 0 money. Might be a misfire. ${JSON.stringify(ns.args)}`, 'warning');\\n        if (loop) await ns.sleep(cycleTime - expectedDuration);\\n    } while (loop);\\n}\",\"filename\":\"/Remote/hack-target.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/Remote/hack-target.js\",\"url\":\"blob:file:///a14b90b2-6ce6-4273-bc2b-d410504aecd3\",\"moduleSequenceNumber\":1437}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"home\",\"moduleSequenceNumber\":140,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns \\n * Wait until an appointed time and then execute a manual hack. */\\nexport async function main(ns) {\\n    //args[0: target, 1: desired start time, 2: expected end, 3: expected duration, 4: description, 5: manipulate stock (N/A ignored), 6: disable toast warnings, 7: loop]\\n    const sleepDuration = ns.args.length > 1 ? ns.args[1] - Date.now() : 0;\\n    const expectedDuration = ns.args.length > 3 ? ns.args[3] : 0;\\n    const manipulateStock = ns.args.length > 5 && ns.args[5] ? true : false;\\n    const disableToastWarnings = ns.args.length > 6 ? ns.args[6] : false;\\n    const loop = ns.args.length > 7 ? ns.args[7] : false;\\n    let cycleTime = expectedDuration * 4;\\n    if (cycleTime < 100) cycleTime = Math.max(1, Math.min(5, cycleTime * 2)); // For fast hacking loops, inject a delay on hack in case grow/weaken are running a bit slow.\\n    if (sleepDuration > 0)\\n        await ns.sleep(sleepDuration);\\n    do {\\n        if (!await ns.manualHack() && !disableToastWarnings)\\n            ns.toast(`Warning, hack stole 0 money. Might be a misfire. ${JSON.stringify(ns.args)}`, 'warning');\\n        if (loop) await ns.sleep(cycleTime - expectedDuration);\\n    } while (loop);\\n}\",\"filename\":\"/Remote/manualhack-target.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.6,\"server\":\"home\",\"moduleSequenceNumber\":141,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"manualHack\",\"cost\":2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tawait ns.share()\\n}\",\"filename\":\"/Remote/share.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/Remote/share.js\",\"url\":\"blob:file:///72cb7546-1639-457d-bdfe-667687928f6a\",\"moduleSequenceNumber\":242}],\"dependents\":[],\"ramUsage\":4,\"server\":\"home\",\"moduleSequenceNumber\":242,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns \\n * Wait until an appointed time and then execute a weaken. */\\nexport async function main(ns) {\\n    //args[0: target, 1: desired start time, 2: expected end, 3: expected duration, 4: description, 5: disable toast warnings, 6: loop]\\n    let sleepDuration = ns.args[1] - Date.now();\\n    const disableToastWarnings = ns.args.length > 5 ? ns.args[5] : false;\\n    const loop = ns.args.length > 6 ? ns.args[6] : false;\\n    if (sleepDuration > 0)\\n        await ns.sleep(sleepDuration);\\n    do {\\n        if (!await ns.weaken(ns.args[0]) && !disableToastWarnings)\\n            ns.toast(`Warning, weaken reduced 0 security. Might be a misfire. ${JSON.stringify(ns.args)}`, 'warning');\\n    } while (loop);\\n}\",\"filename\":\"/Remote/weak-target.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/Remote/weak-target.js\",\"url\":\"blob:file:///9618027a-5945-489c-be0a-23c1d0334adf\",\"moduleSequenceNumber\":241}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"home\",\"moduleSequenceNumber\":241,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getNsDataThroughFile, getFilePath } from 'helpers.js'\\n\\nlet spawnDelay = 50; // Delay to allow time for `installBackdoor` to start running before a background script connects back to 'home'\\n\\n/** @param {NS} ns \\n * Scan all servers, backdoor anything that can be backdoored, and leave a file to indicate it's been done\\n * Requires: SF-4.1 **/\\nexport let main = async ns => {\\n    let anyConnected = false;\\n    try {\\n        let servers = [\\\"home\\\"],\\n            routes = { home: [\\\"home\\\"] },\\n            myHackingLevel = ns.getHackingLevel();\\n        // Scan all servers and keep track of the path to get to them\\n        ns.disableLog(\\\"scan\\\");\\n        for (let i = 0, j; i < servers.length; i++)\\n            for (j of ns.scan(servers[i]))\\n                if (!servers.includes(j)) servers.push(j), routes[j] = routes[servers[i]].slice(), routes[j].push(j);\\n        // Filter out servers that cannot or should not be hacked / backdoored\\n        ns.disableLog(\\\"getServerRequiredHackingLevel\\\");\\n        let hackableServers = servers.filter(s => s != \\\"home\\\" && !s.includes(\\\"hacknet-\\\") && !s.includes(\\\"daemon\\\")) /*or whatever you name your purchased servers*/\\n        ns.print(`${hackableServers.length} not-owned servers on the network.`);\\n        ns.print(`${hackableServers.filter(s => ns.hasRootAccess(s)).length} servers are currently rooted.`);\\n        ns.print(`${hackableServers.filter(s => myHackingLevel > ns.getServerRequiredHackingLevel(s)).length} servers are within our hack level (${myHackingLevel}).`);\\n        ns.print(`${hackableServers.filter(s => myHackingLevel > ns.getServerRequiredHackingLevel(s) && ns.hasRootAccess(s)).length} rooted servers are within our hack level (${myHackingLevel})`);\\n\\n        let toBackdoor = await getNsDataThroughFile(ns, `${JSON.stringify(hackableServers)}.filter(s => !ns.getServer(s).backdoorInstalled)`, '/Temp/servers-to-backdoor.txt');\\n        let count = toBackdoor.length;\\n        ns.print(`${count} servers have yet to be backdoored.`);\\n        if (count == 0) return;\\n\\n        ns.print(`${toBackdoor.filter(s => ns.hasRootAccess(s)).length} of ${count} servers to backdoor are currently rooted.`);\\n        toBackdoor = toBackdoor.filter(s => myHackingLevel > ns.getServerRequiredHackingLevel(s));\\n        ns.print(`${toBackdoor.length} of ${count} servers to backdoor are within our hack level (${myHackingLevel}).`);\\n        toBackdoor = toBackdoor.filter(s => ns.hasRootAccess(s));\\n        ns.print(`${toBackdoor.length} of ${count} servers to be backdoored are rooted and within our hack level (${myHackingLevel})`);\\n\\n        for (const server of toBackdoor) {\\n            ns.print(`Hopping to ${server}`);\\n            anyConnected = true;\\n            for (let hop of routes[server])\\n                ns.connect(hop);\\n            if (server === \\\"w0r1d_d43m0n\\\") {\\n                ns.alert(\\\"Ready to hack w0r1d_d43m0n!\\\");\\n                while (true) await ns.sleep(10000); // Sleep forever so the script isn't run multiple times to create multiple overlapping alerts\\n            }\\n            ns.print(`Installing backdoor on \\\"${server}\\\"...`);\\n            // Kick off a separate script that will run backdoor before we connect to home.\\n            var pid = ns.run(getFilePath('/Tasks/backdoor-all-servers.js.backdoor-one.js'), 1, server);\\n            if (pid === 0)\\n                return ns.print(`Couldn't initiate a new backdoor of \\\"${server}\\\"\\\" (insufficient RAM?). Will try again later.`);\\n            await ns.sleep(spawnDelay); // Wait some time for the external backdoor script to initiate its backdoor of the current connected server\\n            ns.connect(\\\"home\\\");\\n        }\\n    } catch (err) {\\n        ns.tprint(String(err));\\n    } finally {\\n        if (anyConnected)\\n            ns.connect(\\\"home\\\");\\n    }\\n};\",\"filename\":\"/Tasks/backdoor-all-servers.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"helpers.js\",\"url\":\"blob:file:///c27d4ebe-9f90-4ad4-95ee-277c3e7ad7a1\",\"moduleSequenceNumber\":125},{\"filename\":\"/Tasks/backdoor-all-servers.js\",\"url\":\"blob:file:///ef4ca9f4-c418-4862-a226-fa6bb3c28f6f\",\"moduleSequenceNumber\":274}],\"dependents\":[],\"ramUsage\":5.1,\"server\":\"home\",\"moduleSequenceNumber\":274,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"connect\",\"cost\":2},{\"type\":\"fn\",\"name\":\"run\",\"cost\":1},{\"type\":\"fn\",\"name\":\"isRunning\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let target = ns.args.length > 0 ? ns.args[0] : '(unspecified server)';\\n    try {\\n        await ns.installBackdoor();\\n        ns.toast(`Backdoored ${target}`, 'success');\\n    }\\n    catch (err) {\\n        ns.tprint(`Error while running backdoor (intended for ${target}): ${String(err)}`);\\n        throw (err);\\n    }\\n}\",\"filename\":\"/Tasks/backdoor-all-servers.js.backdoor-one.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/Tasks/backdoor-all-servers.js.backdoor-one.js\",\"url\":\"blob:file:///a102db2f-1467-43f2-8ec6-c025da1d3988\",\"moduleSequenceNumber\":700}],\"dependents\":[],\"ramUsage\":3.6,\"server\":\"home\",\"moduleSequenceNumber\":145,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"installBackdoor\",\"cost\":2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getFilePath, getNsDataThroughFile, disableLogs, scanAllServers } from 'helpers.js'\\nconst scriptSolver = getFilePath(\\\"/Tasks/contractor.js.solver.js\\\");\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    disableLogs(ns, [\\\"scan\\\"]);\\n    ns.tprint(\\\"Getting server list...\\\");\\n    const servers = scanAllServers(ns);\\n    ns.tprint(`Got ${servers.length} servers. Searching for contracts on each...`);\\n    // Retrieve all contracts and convert them to objects with the required information to solve\\n    const contractsDb = servers.map(hostname => ({ hostname, contracts: ns.ls(hostname, '.cct') }))\\n        .filter(o => o.contracts.length > 0)\\n        .map(o => o.contracts.map(contract => ({ contract, hostname: o.hostname }))).flat();\\n    if (contractsDb.length == 0)\\n        return ns.tprint(\\\"Found no contracts to solve.\\\");\\n\\n    // Spawn temporary scripts to gather the remainder of contract data required for solving\\n    ns.tprint(`Found ${contractsDb.length} contracts to solve. Gathering contract data via separate scripts...\\\"`);\\n    let contractsDictCommand = command => `Object.fromEntries(${JSON.stringify(contractsDb)}.map(c => [c.contract, ${command}]))`;\\n    let dictContractTypes = await getNsDataThroughFile(ns, contractsDictCommand('ns.codingcontract.getContractType(c.contract, c.hostname)'), '/Temp/contract-types.txt');\\n    let dictContractData = await getNsDataThroughFile(ns, contractsDictCommand('ns.codingcontract.getData(c.contract, c.hostname)'), '/Temp/contract-data.txt');\\n    contractsDb.forEach(c => c.type = dictContractTypes[c.contract]);\\n    contractsDb.forEach(c => c.data = dictContractData[c.contract]);\\n\\n    // Let this script die to free up ram, and start up a new script (after a delay) that will solve all these contracts using the minimum ram footprint of 11.6 GB\\n    ns.run(getFilePath('/Tasks/run-with-delay.js'), 1, scriptSolver, 1, JSON.stringify(contractsDb));\\n}\",\"filename\":\"/Tasks/contractor.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"helpers.js\",\"url\":\"blob:file:///e5b55d2e-e39b-4673-9801-14da67cadac5\",\"moduleSequenceNumber\":125},{\"filename\":\"/Tasks/contractor.js\",\"url\":\"blob:file:///29d86e52-0f11-4880-8790-cf3cd291e5ff\",\"moduleSequenceNumber\":273}],\"dependents\":[],\"ramUsage\":3.1,\"server\":\"home\",\"moduleSequenceNumber\":273,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"run\",\"cost\":1},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"isRunning\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// This contract solver has the bare-minimum footprint of 1.6 GB (base) + 10 GB (ns.codingcontract.attempt)\\n// It does this by requiring all contract information being gathered in advance and passed in as a JSON blob argument.\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    if (ns.args.length < 1)\\n        ns.tprint('Contractor solver was incorrectly invoked without arguments.')\\n    var contractsDb = JSON.parse(ns.args[0]);\\n    for (const contractInfo of contractsDb) {\\n        const answer = findAnswer(contractInfo)\\n        if (answer != null) {\\n            const solvingResult = ns.codingcontract.attempt(answer, contractInfo.contract, contractInfo.hostname, { returnReward: true })\\n            if (solvingResult) {\\n                ns.toast(`Solved ${contractInfo.contract} on ${contractInfo.hostname}`, 'success');\\n                ns.tprint(`Solved ${contractInfo.contract} on ${contractInfo.hostname}. Reward: ${solvingResult}`)\\n            } else {\\n                ns.tprint(`Wrong answer for ${contractInfo.contract} on ${contractInfo.hostname}: ${JSON.stringify(answer)}`)\\n            }\\n        } else {\\n            ns.tprint(`Unable to find the answer for: ${JSON.stringify(contractInfo)}`)\\n        }\\n        await ns.sleep(10)\\n    }\\n}\\n\\nfunction findAnswer(contract) {\\n    const codingContractSolution = codingContractTypesMetadata.find((codingContractTypeMetadata) => codingContractTypeMetadata.name === contract.type)\\n    return codingContractSolution ? codingContractSolution.solver(contract.data) : null;\\n}\\n\\nfunction convert2DArrayToString(arr) {\\n    var components = []\\n    arr.forEach(function (e) {\\n        var s = e.toString()\\n        s = ['[', s, ']'].join('')\\n        components.push(s)\\n    })\\n    return components.join(',').replace(/\\\\s/g, '')\\n}\\n\\n// Based on https://github.com/danielyxie/bitburner/blob/master/src/data/codingcontracttypes.ts\\nconst codingContractTypesMetadata = [{\\n    name: 'Find Largest Prime Factor',\\n    solver: function (data) {\\n        var fac = 2\\n        var n = data\\n        while (n > (fac - 1) * (fac - 1)) {\\n            while (n % fac === 0) {\\n                n = Math.round(n / fac)\\n            }\\n            ++fac\\n        }\\n        return n === 1 ? fac - 1 : n\\n    },\\n},\\n{\\n    name: 'Subarray with Maximum Sum',\\n    solver: function (data) {\\n        var nums = data.slice()\\n        for (var i = 1; i < nums.length; i++) {\\n            nums[i] = Math.max(nums[i], nums[i] + nums[i - 1])\\n        }\\n        return Math.max.apply(Math, nums)\\n    },\\n},\\n{\\n    name: 'Total Ways to Sum',\\n    solver: function (data) {\\n        var ways = [1]\\n        ways.length = data + 1\\n        ways.fill(0, 1)\\n        for (var i = 1; i < data; ++i) {\\n            for (var j = i; j <= data; ++j) {\\n                ways[j] += ways[j - i]\\n            }\\n        }\\n        return ways[data]\\n    },\\n},\\n{\\n    name: 'Spiralize Matrix',\\n    solver: function (data, ans) {\\n        var spiral = []\\n        var m = data.length\\n        var n = data[0].length\\n        var u = 0\\n        var d = m - 1\\n        var l = 0\\n        var r = n - 1\\n        var k = 0\\n        while (true) {\\n            // Up\\n            for (var col = l; col <= r; col++) {\\n                spiral[k] = data[u][col]\\n                ++k\\n            }\\n            if (++u > d) {\\n                break\\n            }\\n            // Right\\n            for (var row = u; row <= d; row++) {\\n                spiral[k] = data[row][r]\\n                ++k\\n            }\\n            if (--r < l) {\\n                break\\n            }\\n            // Down\\n            for (var col = r; col >= l; col--) {\\n                spiral[k] = data[d][col]\\n                ++k\\n            }\\n            if (--d < u) {\\n                break\\n            }\\n            // Left\\n            for (var row = d; row >= u; row--) {\\n                spiral[k] = data[row][l]\\n                ++k\\n            }\\n            if (++l > r) {\\n                break\\n            }\\n        }\\n\\n        return spiral\\n    },\\n},\\n{\\n    name: 'Array Jumping Game',\\n    solver: function (data) {\\n        var n = data.length\\n        var i = 0\\n        for (var reach = 0; i < n && i <= reach; ++i) {\\n            reach = Math.max(i + data[i], reach)\\n        }\\n        var solution = i === n\\n        return solution ? 1 : 0\\n    },\\n},\\n{\\n    name: 'Merge Overlapping Intervals',\\n    solver: function (data) {\\n        var intervals = data.slice()\\n        intervals.sort(function (a, b) {\\n            return a[0] - b[0]\\n        })\\n        var result = []\\n        var start = intervals[0][0]\\n        var end = intervals[0][1]\\n        for (var _i = 0, intervals_1 = intervals; _i < intervals_1.length; _i++) {\\n            var interval = intervals_1[_i]\\n            if (interval[0] <= end) {\\n                end = Math.max(end, interval[1])\\n            } else {\\n                result.push([start, end])\\n                start = interval[0]\\n                end = interval[1]\\n            }\\n        }\\n        result.push([start, end])\\n        var sanitizedResult = convert2DArrayToString(result)\\n        return sanitizedResult\\n    },\\n},\\n{\\n    name: 'Generate IP Addresses',\\n    solver: function (data, ans) {\\n        var ret = []\\n        for (var a = 1; a <= 3; ++a) {\\n            for (var b = 1; b <= 3; ++b) {\\n                for (var c = 1; c <= 3; ++c) {\\n                    for (var d = 1; d <= 3; ++d) {\\n                        if (a + b + c + d === data.length) {\\n                            var A = parseInt(data.substring(0, a), 10)\\n                            var B = parseInt(data.substring(a, a + b), 10)\\n                            var C = parseInt(data.substring(a + b, a + b + c), 10)\\n                            var D = parseInt(data.substring(a + b + c, a + b + c + d), 10)\\n                            if (A <= 255 && B <= 255 && C <= 255 && D <= 255) {\\n                                var ip = [A.toString(), '.', B.toString(), '.', C.toString(), '.', D.toString()].join('')\\n                                if (ip.length === data.length + 3) {\\n                                    ret.push(ip)\\n                                }\\n                            }\\n                        }\\n                    }\\n                }\\n            }\\n        }\\n        return ret\\n    },\\n},\\n{\\n    name: 'Algorithmic Stock Trader I',\\n    solver: function (data) {\\n        var maxCur = 0\\n        var maxSoFar = 0\\n        for (var i = 1; i < data.length; ++i) {\\n            maxCur = Math.max(0, (maxCur += data[i] - data[i - 1]))\\n            maxSoFar = Math.max(maxCur, maxSoFar)\\n        }\\n        return maxSoFar.toString()\\n    },\\n},\\n{\\n    name: 'Algorithmic Stock Trader II',\\n    solver: function (data) {\\n        var profit = 0\\n        for (var p = 1; p < data.length; ++p) {\\n            profit += Math.max(data[p] - data[p - 1], 0)\\n        }\\n        return profit.toString()\\n    },\\n},\\n{\\n    name: 'Algorithmic Stock Trader III',\\n    solver: function (data) {\\n        var hold1 = Number.MIN_SAFE_INTEGER\\n        var hold2 = Number.MIN_SAFE_INTEGER\\n        var release1 = 0\\n        var release2 = 0\\n        for (var _i = 0, data_1 = data; _i < data_1.length; _i++) {\\n            var price = data_1[_i]\\n            release2 = Math.max(release2, hold2 + price)\\n            hold2 = Math.max(hold2, release1 - price)\\n            release1 = Math.max(release1, hold1 + price)\\n            hold1 = Math.max(hold1, price * -1)\\n        }\\n        return release2.toString()\\n    },\\n},\\n{\\n    name: 'Algorithmic Stock Trader IV',\\n    solver: function (data) {\\n        var k = data[0]\\n        var prices = data[1]\\n        var len = prices.length\\n        if (len < 2) {\\n            return 0\\n        }\\n        if (k > len / 2) {\\n            var res = 0\\n            for (var i = 1; i < len; ++i) {\\n                res += Math.max(prices[i] - prices[i - 1], 0)\\n            }\\n            return res\\n        }\\n        var hold = []\\n        var rele = []\\n        hold.length = k + 1\\n        rele.length = k + 1\\n        for (var i = 0; i <= k; ++i) {\\n            hold[i] = Number.MIN_SAFE_INTEGER\\n            rele[i] = 0\\n        }\\n        var cur\\n        for (var i = 0; i < len; ++i) {\\n            cur = prices[i]\\n            for (var j = k; j > 0; --j) {\\n                rele[j] = Math.max(rele[j], hold[j] + cur)\\n                hold[j] = Math.max(hold[j], rele[j - 1] - cur)\\n            }\\n        }\\n        return rele[k]\\n    },\\n},\\n{\\n    name: 'Minimum Path Sum in a Triangle',\\n    solver: function (data) {\\n        var n = data.length\\n        var dp = data[n - 1].slice()\\n        for (var i = n - 2; i > -1; --i) {\\n            for (var j = 0; j < data[i].length; ++j) {\\n                dp[j] = Math.min(dp[j], dp[j + 1]) + data[i][j]\\n            }\\n        }\\n        return dp[0]\\n    },\\n},\\n{\\n    name: 'Unique Paths in a Grid I',\\n    solver: function (data) {\\n        var n = data[0] // Number of rows\\n        var m = data[1] // Number of columns\\n        var currentRow = []\\n        currentRow.length = n\\n        for (var i = 0; i < n; i++) {\\n            currentRow[i] = 1\\n        }\\n        for (var row = 1; row < m; row++) {\\n            for (var i = 1; i < n; i++) {\\n                currentRow[i] += currentRow[i - 1]\\n            }\\n        }\\n        return currentRow[n - 1]\\n    },\\n},\\n{\\n    name: 'Unique Paths in a Grid II',\\n    solver: function (data) {\\n        var obstacleGrid = []\\n        obstacleGrid.length = data.length\\n        for (var i = 0; i < obstacleGrid.length; ++i) {\\n            obstacleGrid[i] = data[i].slice()\\n        }\\n        for (var i = 0; i < obstacleGrid.length; i++) {\\n            for (var j = 0; j < obstacleGrid[0].length; j++) {\\n                if (obstacleGrid[i][j] == 1) {\\n                    obstacleGrid[i][j] = 0\\n                } else if (i == 0 && j == 0) {\\n                    obstacleGrid[0][0] = 1\\n                } else {\\n                    obstacleGrid[i][j] = (i > 0 ? obstacleGrid[i - 1][j] : 0) + (j > 0 ? obstacleGrid[i][j - 1] : 0)\\n                }\\n            }\\n        }\\n        return obstacleGrid[obstacleGrid.length - 1][obstacleGrid[0].length - 1]\\n    },\\n},\\n{\\n    name: 'Sanitize Parentheses in Expression',\\n    solver: function (data) {\\n        var left = 0\\n        var right = 0\\n        var res = []\\n        for (var i = 0; i < data.length; ++i) {\\n            if (data[i] === '(') {\\n                ++left\\n            } else if (data[i] === ')') {\\n                left > 0 ? --left : ++right\\n            }\\n        }\\n\\n        function dfs(pair, index, left, right, s, solution, res) {\\n            if (s.length === index) {\\n                if (left === 0 && right === 0 && pair === 0) {\\n                    for (var i = 0; i < res.length; i++) {\\n                        if (res[i] === solution) {\\n                            return\\n                        }\\n                    }\\n                    res.push(solution)\\n                }\\n                return\\n            }\\n            if (s[index] === '(') {\\n                if (left > 0) {\\n                    dfs(pair, index + 1, left - 1, right, s, solution, res)\\n                }\\n                dfs(pair + 1, index + 1, left, right, s, solution + s[index], res)\\n            } else if (s[index] === ')') {\\n                if (right > 0) dfs(pair, index + 1, left, right - 1, s, solution, res)\\n                if (pair > 0) dfs(pair - 1, index + 1, left, right, s, solution + s[index], res)\\n            } else {\\n                dfs(pair, index + 1, left, right, s, solution + s[index], res)\\n            }\\n        }\\n        dfs(0, 0, left, right, data, '', res)\\n\\n        return res\\n    },\\n},\\n{\\n    name: 'Find All Valid Math Expressions',\\n    solver: function (data) {\\n        var num = data[0]\\n        var target = data[1]\\n\\n        function helper(res, path, num, target, pos, evaluated, multed) {\\n            if (pos === num.length) {\\n                if (target === evaluated) {\\n                    res.push(path)\\n                }\\n                return\\n            }\\n            for (var i = pos; i < num.length; ++i) {\\n                if (i != pos && num[pos] == '0') {\\n                    break\\n                }\\n                var cur = parseInt(num.substring(pos, i + 1))\\n                if (pos === 0) {\\n                    helper(res, path + cur, num, target, i + 1, cur, cur)\\n                } else {\\n                    helper(res, path + '+' + cur, num, target, i + 1, evaluated + cur, cur)\\n                    helper(res, path + '-' + cur, num, target, i + 1, evaluated - cur, -cur)\\n                    helper(res, path + '*' + cur, num, target, i + 1, evaluated - multed + multed * cur, multed * cur)\\n                }\\n            }\\n        }\\n\\n        if (num == null || num.length === 0) {\\n            return []\\n        }\\n        var result = []\\n        helper(result, '', num, target, 0, 0, 0)\\n        return result\\n    },\\n},\\n]\",\"filename\":\"/Tasks/contractor.js.solver.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/Tasks/contractor.js.solver.js\",\"url\":\"blob:file:///77e3f310-98a9-4021-a777-e9588fabddca\",\"moduleSequenceNumber\":2676}],\"dependents\":[],\"ramUsage\":11.6,\"server\":\"home\",\"moduleSequenceNumber\":147,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"codingcontract.attempt\",\"cost\":10}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns \\n * Blindly try to open all ports and crack the specified target, regardless of owned tools. */\\nexport async function main(ns) {\\n    const target = ns.args[0];\\n    try { ns.brutessh(target); } catch { }\\n    try { ns.ftpcrack(target); } catch { }\\n    try { ns.relaysmtp(target); } catch { }\\n    try { ns.httpworm(target); } catch { }\\n    try { ns.sqlinject(target); } catch { }\\n    try { ns.nuke(target); } catch { }\\n}\",\"filename\":\"/Tasks/crack-host.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/Tasks/crack-host.js\",\"url\":\"blob:file:///7fbc67b7-0ba4-481e-acd5-3173e1e7d59d\",\"moduleSequenceNumber\":245}],\"dependents\":[],\"ramUsage\":1.9,\"server\":\"home\",\"moduleSequenceNumber\":148,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns \\n * the purpose of the program-manager is to buy all the programs\\n * from the darkweb we can afford so we don't have to do it manually\\n * or write them ourselves. Like tor-manager, this script dies a natural death\\n * once all programs are bought. **/\\nexport async function main(ns) {\\n    const programNames = [\\\"BruteSSH.exe\\\", \\\"FTPCrack.exe\\\", \\\"relaySMTP.exe\\\", \\\"HTTPWorm.exe\\\", \\\"SQLInject.exe\\\"];\\n    const interval = 2000;\\n\\n    const keepRunning = ns.args.length > 0 && ns.args[0] == \\\"-c\\\";\\n    if (!keepRunning)\\n        ns.print(`program-manager will run once. Run with argument \\\"-c\\\" to run continuously.`)\\n\\n    do {\\n        let foundMissingProgram = false;\\n        for (const prog of programNames) {\\n            if (!ns.fileExists(prog, \\\"home\\\") && ns.purchaseProgram(prog))\\n                ns.toast(`Purchased ${prog}`, 'success');\\n            else if (keepRunning)\\n                foundMissingProgram = true;\\n        }\\n        if (keepRunning && foundMissingProgram)\\n            await ns.sleep(interval);\\n    } while (keepRunning && foundMissingProgram);\\n}\",\"filename\":\"/Tasks/program-manager.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/Tasks/program-manager.js\",\"url\":\"blob:file:///41643fa0-cfe7-4736-b34d-668b7ec5ec2c\",\"moduleSequenceNumber\":229}],\"dependents\":[],\"ramUsage\":3.7,\"server\":\"home\",\"moduleSequenceNumber\":149,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"purchaseProgram\",\"cost\":2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { formatMoney, formatNumberShort } from 'helpers.js'\\n\\nconst max_spend_ratio = 0.1; // Don't spend more than this proportion of money\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    const reserve = Number.parseFloat(ns.read('reserve.txt') || 0);\\n    const money = ns.getServerMoneyAvailable(\\\"home\\\");\\n    const spendable = Math.min(money - reserve, money * max_spend_ratio);\\n    const cost = ns.getUpgradeHomeRamCost();\\n    const currentRam = ns.getServerMaxRam(\\\"home\\\");\\n    if (currentRam >= 2 ** 20)\\n        return ns.print(`We're at max home RAM (2^20 = ${formatNumberShort(currentRam)}GB)`);\\n    const nextRam = currentRam * 2;\\n    const upgradeDesc = `home RAM from ${formatNumberShort(currentRam)}GB to ${formatNumberShort(nextRam)}GB`;\\n    if (spendable < cost)\\n        return ns.print(`Money we're allowed to spend (${formatMoney(spendable)}) is less than the cost (${formatMoney(cost)}) to upgrade ${upgradeDesc}`);\\n    if (ns.upgradeHomeRam()) {\\n        announce(ns, `SUCCESS: Upgraded ${upgradeDesc}`, 'success');\\n        if (nextRam != ns.getServerMaxRam(\\\"home\\\"))\\n            announce(ns, `WARNING: Expected to upgrade ${upgradeDesc}, but new home ram is ${formatNumberShort(ns.getServerMaxRam(\\\"home\\\"))}GB`, 'warning');\\n    } else {\\n        announce(ns, `ERROR: Failed to upgrade ${upgradeDesc} thinking we could afford it (cost: ${formatMoney(cost)} cash: ${formatMoney(money)} budget: ${formatMoney(spendable)})`, 'error');\\n    }\\n}\\n\\nfunction announce(ns, message, toastStyle) {\\n    ns.print(message);\\n    ns.tprint(message);\\n    if (toastStyle) ns.toast(message, toastStyle);\\n}\",\"filename\":\"/Tasks/ram-manager.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"helpers.js\",\"url\":\"blob:file:///69e5ee80-3cef-4620-8ad7-d6e7213ccd50\",\"moduleSequenceNumber\":125},{\"filename\":\"/Tasks/ram-manager.js\",\"url\":\"blob:file:///a45a8061-3afe-4eec-848b-88f591c9428a\",\"moduleSequenceNumber\":271}],\"dependents\":[],\"ramUsage\":6.25,\"server\":\"home\",\"moduleSequenceNumber\":271,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getUpgradeHomeRamCost\",\"cost\":1.5},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"upgradeHomeRam\",\"cost\":3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * @param {NS} ns\\n * Similar to ns.spawn, but can be run for cheaper (1GB for ns.run vs 2GB for ns.spawn), the delay can be shorter,\\n * and you have the option to *not* shut down the current script, but instead continue execution.\\n **/\\nexport async function main(ns) {\\n    var scriptpath = ns.args[0]; // Name of script to run is arg 0\\n    var delay = ns.args[1]; // Delay time is arg 1\\n    // Any additional args are forwarded to the script being run\\n    var forwardedArgs = ns.args.length > 2 ? ns.args.slice(2) : [];\\n    await ns.sleep(delay || 100);\\n    var pid = ns.run(scriptpath, 1, ...forwardedArgs);\\n    if (!pid)\\n        ns.tprint(`Failed to spawn \\\"${scriptpath}\\\" with args: ${forwardedArgs} (bad file name or insufficient RAM?)`);\\n}\",\"filename\":\"/Tasks/run-with-delay.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/Tasks/run-with-delay.js\",\"url\":\"blob:file:///1eb9ba72-b945-4895-b7ef-5d789ed2af1a\",\"moduleSequenceNumber\":2675}],\"dependents\":[],\"ramUsage\":2.6,\"server\":\"home\",\"moduleSequenceNumber\":151,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"run\",\"cost\":1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns \\n * the purpose of tor-manager is to buy the TOR router ASAP\\n * so that another script can buy the port breakers. This script\\n * dies a natural death once tor is bought. **/\\nexport async function main(ns) {\\n    const interval = 2000;\\n\\n    var keepRunning = ns.args.length > 0 && ns.args[0] == \\\"-c\\\";\\n    if (!keepRunning)\\n        ns.print(`tor-manager will run once. Run with argument \\\"-c\\\" to run continuously.`)\\n\\n    let hasTor = () => ns.scan(\\\"home\\\").includes(\\\"darkweb\\\");\\n    if (hasTor())\\n        return ns.print('Player already has Tor');\\n    do {\\n        if (hasTor()) {\\n            ns.toast(`Purchased the Tor router!`, 'success');\\n            break;\\n        }\\n        ns.purchaseTor();\\n        if (keepRunning)\\n            await ns.sleep(interval);\\n    }\\n    while (keepRunning);\\n}\",\"filename\":\"/Tasks/tor-manager.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/Tasks/tor-manager.js\",\"url\":\"blob:file:///8d63d075-5cb5-4cc5-b75a-3fc93c3ff401\",\"moduleSequenceNumber\":228}],\"dependents\":[],\"ramUsage\":3.8,\"server\":\"home\",\"moduleSequenceNumber\":152,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"purchaseTor\",\"cost\":2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns\\n * A way to write a new file from some args data **/\\nexport async function main(ns) {\\n    if (ns.args.length == 0) return ns.tprint(\\\"You must run this script with the arguments to pass to ns.write\\\")\\n    if(ns.args.length == 2) // Default to \\\"w\\\" (overwrite mode)\\n        ns.args.push(\\\"w\\\")\\n    return await ns.write(...ns.args);\\n}\",\"filename\":\"/Tasks/write-file.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"server\":\"home\",\"moduleSequenceNumber\":153,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { formatMoney, formatNumberShort, formatDuration, parseShortNumber, scanAllServers } from 'helpers.js'\\nexport async function main(ns) { try { let result = \\\"\\\"; try { result = JSON.stringify(ns.getPlayer()); } catch { }\\n        if (ns.read(\\\"/Temp/player-info.txt\\\") != result) await ns.write(\\\"/Temp/player-info.txt\\\", result, 'w'); } catch(err) { ns.tprint(String(err)); throw(err); } }\",\"filename\":\"/Temp/player-info.txt.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"helpers.js\",\"url\":\"blob:file:///47547909-8a97-4953-99c7-1f9a135ba217\",\"moduleSequenceNumber\":125},{\"filename\":\"/Temp/player-info.txt.js\",\"url\":\"blob:file:///5e9ae193-0dd8-436d-bb39-89651a461345\",\"moduleSequenceNumber\":244}],\"dependents\":[],\"ramUsage\":2.1,\"server\":\"home\",\"moduleSequenceNumber\":244,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { formatMoney, formatNumberShort, formatDuration, parseShortNumber, scanAllServers } from 'helpers.js'\\nexport async function main(ns) { try { let result = \\\"\\\"; try { result = JSON.stringify(Object.fromEntries(ns.getOwnedSourceFiles().map(sf => [sf.n, sf.lvl]))); } catch { }\\n        if (ns.read(\\\"/Temp/owned-source-files.txt\\\") != result) await ns.write(\\\"/Temp/owned-source-files.txt\\\", result, 'w'); } catch(err) { ns.tprint(String(err)); throw(err); } }\",\"filename\":\"/Temp/owned-source-files.txt.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"helpers.js\",\"url\":\"blob:file:///9ea2ec2e-b9bb-4545-86ba-8598269a4fe1\",\"moduleSequenceNumber\":125},{\"filename\":\"/Temp/owned-source-files.txt.js\",\"url\":\"blob:file:///af508e66-85c7-421f-ae6b-0838dce1fa7c\",\"moduleSequenceNumber\":243}],\"dependents\":[],\"ramUsage\":6.6,\"server\":\"home\",\"moduleSequenceNumber\":243,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getOwnedSourceFiles\",\"cost\":5}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { formatMoney, formatNumberShort, formatDuration, parseShortNumber, scanAllServers } from 'helpers.js'\\nexport async function main(ns) { try { let result = \\\"\\\"; try { result = JSON.stringify(Object.fromEntries([\\\"/Remote/weak-target.js\\\",\\\"/Remote/grow-target.js\\\",\\\"/Remote/hack-target.js\\\",\\\"/Remote/manualhack-target.js\\\",\\\"/Remote/share.js\\\",\\\"stats.js\\\",\\\"hacknet-upgrade-manager.js\\\",\\\"stockmaster.js\\\",\\\"gangs.js\\\",\\\"spend-hacknet-hashes.js\\\",\\\"sleeve.js\\\",\\\"work-for-factions.js\\\",\\\"/Tasks/tor-manager.js\\\",\\\"/Tasks/program-manager.js\\\",\\\"/Tasks/ram-manager.js\\\",\\\"hacknet-upgrade-manager.js\\\",\\\"hacknet-upgrade-manager.js\\\",\\\"faction-manager.js\\\",\\\"/Tasks/contractor.js\\\",\\\"/Tasks/backdoor-all-servers.js\\\",\\\"host-manager.js\\\"].map(s => [s, ns.getScriptRam(s, 'home')]))); } catch { }\\n        if (ns.read(\\\"/Temp/script-costs.txt\\\") != result) await ns.write(\\\"/Temp/script-costs.txt\\\", result, 'w'); } catch(err) { ns.tprint(String(err)); throw(err); } }\",\"filename\":\"/Temp/script-costs.txt.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"helpers.js\",\"url\":\"blob:file:///20d8c73e-39d9-4068-b80d-401426722ea3\",\"moduleSequenceNumber\":125},{\"filename\":\"/Temp/script-costs.txt.js\",\"url\":\"blob:file:///5755b7b1-5b7a-4c04-a5fa-526e35ce98bf\",\"moduleSequenceNumber\":247}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"home\",\"moduleSequenceNumber\":247,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { formatMoney, formatNumberShort, formatDuration, parseShortNumber, scanAllServers } from 'helpers.js'\\nexport async function main(ns) { try { let result = \\\"\\\"; try { result = JSON.stringify(Object.fromEntries([\\\"home\\\",\\\"darkweb\\\",\\\"iron-gym\\\",\\\"harakiri-sushi\\\",\\\"CSEC\\\",\\\"hong-fang-tea\\\",\\\"nectar-net\\\",\\\"omega-net\\\",\\\"avmnite-02h\\\",\\\"syscore\\\",\\\"aevum-police\\\",\\\"global-pharm\\\",\\\"johnson-ortho\\\",\\\"I.I.I.I\\\",\\\"zb-institute\\\",\\\"the-hub\\\",\\\"joesguns\\\",\\\"sigma-cosmetics\\\",\\\"max-hardware\\\",\\\"phantasy\\\",\\\"comptek\\\",\\\"summit-uni\\\",\\\"millenium-fitness\\\",\\\"rho-construction\\\",\\\"snap-fitness\\\",\\\"unitalife\\\",\\\"zeus-med\\\",\\\"nova-med\\\",\\\"microdyne\\\",\\\"aerocorp\\\",\\\"deltaone\\\",\\\"icarus\\\",\\\"defcomm\\\",\\\"taiyang-digital\\\",\\\"run4theh111z\\\",\\\"helios\\\",\\\"kuai-gong\\\",\\\"clarkinc\\\",\\\"applied-energetics\\\",\\\"stormtech\\\",\\\"4sigma\\\",\\\"nwo\\\",\\\"The-Cave\\\",\\\"fulcrumtech\\\",\\\".\\\",\\\"blade\\\",\\\"ecorp\\\",\\\"titan-labs\\\",\\\"vitalife\\\",\\\"omnitek\\\",\\\"powerhouse-fitness\\\",\\\"megacorp\\\",\\\"b-and-a\\\",\\\"fulcrumassets\\\",\\\"omnia\\\",\\\"solaris\\\",\\\"infocomm\\\",\\\"univ-energy\\\",\\\"zb-def\\\",\\\"neo-net\\\",\\\"crush-fitness\\\",\\\"netlink\\\",\\\"catalyst\\\",\\\"alpha-ent\\\",\\\"galactic-cyber\\\",\\\"lexo-corp\\\",\\\"rothman-uni\\\",\\\"foodnstuff\\\",\\\"n00dles\\\",\\\"zer0\\\",\\\"silver-helix\\\"].map(server => [server, ns.getServerRequiredHackingLevel(server)]))); } catch { }\\n        if (ns.read(\\\"/Temp/servers-hack-req.txt\\\") != result) await ns.write(\\\"/Temp/servers-hack-req.txt\\\", result, 'w'); } catch(err) { ns.tprint(String(err)); throw(err); } }\",\"filename\":\"/Temp/servers-hack-req.txt.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"helpers.js\",\"url\":\"blob:file:///d395c913-9459-480e-9533-03181fd86b74\",\"moduleSequenceNumber\":125},{\"filename\":\"/Temp/servers-hack-req.txt.js\",\"url\":\"blob:file:///90f59648-2ce4-4bea-a9b6-0dbe1df0226e\",\"moduleSequenceNumber\":249}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"home\",\"moduleSequenceNumber\":249,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { formatMoney, formatNumberShort, formatDuration, parseShortNumber, scanAllServers } from 'helpers.js'\\nexport async function main(ns) { try { let result = \\\"\\\"; try { result = JSON.stringify(Object.fromEntries([\\\"home\\\",\\\"darkweb\\\",\\\"iron-gym\\\",\\\"harakiri-sushi\\\",\\\"CSEC\\\",\\\"hong-fang-tea\\\",\\\"nectar-net\\\",\\\"omega-net\\\",\\\"avmnite-02h\\\",\\\"syscore\\\",\\\"aevum-police\\\",\\\"global-pharm\\\",\\\"johnson-ortho\\\",\\\"I.I.I.I\\\",\\\"zb-institute\\\",\\\"the-hub\\\",\\\"joesguns\\\",\\\"sigma-cosmetics\\\",\\\"max-hardware\\\",\\\"phantasy\\\",\\\"comptek\\\",\\\"summit-uni\\\",\\\"millenium-fitness\\\",\\\"rho-construction\\\",\\\"snap-fitness\\\",\\\"unitalife\\\",\\\"zeus-med\\\",\\\"nova-med\\\",\\\"microdyne\\\",\\\"aerocorp\\\",\\\"deltaone\\\",\\\"icarus\\\",\\\"defcomm\\\",\\\"taiyang-digital\\\",\\\"run4theh111z\\\",\\\"helios\\\",\\\"kuai-gong\\\",\\\"clarkinc\\\",\\\"applied-energetics\\\",\\\"stormtech\\\",\\\"4sigma\\\",\\\"nwo\\\",\\\"The-Cave\\\",\\\"fulcrumtech\\\",\\\".\\\",\\\"blade\\\",\\\"ecorp\\\",\\\"titan-labs\\\",\\\"vitalife\\\",\\\"omnitek\\\",\\\"powerhouse-fitness\\\",\\\"megacorp\\\",\\\"b-and-a\\\",\\\"fulcrumassets\\\",\\\"omnia\\\",\\\"solaris\\\",\\\"infocomm\\\",\\\"univ-energy\\\",\\\"zb-def\\\",\\\"neo-net\\\",\\\"crush-fitness\\\",\\\"netlink\\\",\\\"catalyst\\\",\\\"alpha-ent\\\",\\\"galactic-cyber\\\",\\\"lexo-corp\\\",\\\"rothman-uni\\\",\\\"foodnstuff\\\",\\\"n00dles\\\",\\\"zer0\\\",\\\"silver-helix\\\"].map(server => [server, ns.getServerNumPortsRequired(server)]))); } catch { }\\n        if (ns.read(\\\"/Temp/servers-num-ports.txt\\\") != result) await ns.write(\\\"/Temp/servers-num-ports.txt\\\", result, 'w'); } catch(err) { ns.tprint(String(err)); throw(err); } }\",\"filename\":\"/Temp/servers-num-ports.txt.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"helpers.js\",\"url\":\"blob:file:///9052dbec-1e17-4c7e-b266-2d8c489f6877\",\"moduleSequenceNumber\":125},{\"filename\":\"/Temp/servers-num-ports.txt.js\",\"url\":\"blob:file:///20567883-46c2-472e-8ed1-8e5e00d2d59b\",\"moduleSequenceNumber\":251}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"home\",\"moduleSequenceNumber\":251,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { formatMoney, formatNumberShort, formatDuration, parseShortNumber, scanAllServers } from 'helpers.js'\\nexport async function main(ns) { try { let result = \\\"\\\"; try { result = JSON.stringify(Object.fromEntries([\\\"home\\\",\\\"darkweb\\\",\\\"iron-gym\\\",\\\"harakiri-sushi\\\",\\\"CSEC\\\",\\\"hong-fang-tea\\\",\\\"nectar-net\\\",\\\"omega-net\\\",\\\"avmnite-02h\\\",\\\"syscore\\\",\\\"aevum-police\\\",\\\"global-pharm\\\",\\\"johnson-ortho\\\",\\\"I.I.I.I\\\",\\\"zb-institute\\\",\\\"the-hub\\\",\\\"joesguns\\\",\\\"sigma-cosmetics\\\",\\\"max-hardware\\\",\\\"phantasy\\\",\\\"comptek\\\",\\\"summit-uni\\\",\\\"millenium-fitness\\\",\\\"rho-construction\\\",\\\"snap-fitness\\\",\\\"unitalife\\\",\\\"zeus-med\\\",\\\"nova-med\\\",\\\"microdyne\\\",\\\"aerocorp\\\",\\\"deltaone\\\",\\\"icarus\\\",\\\"defcomm\\\",\\\"taiyang-digital\\\",\\\"run4theh111z\\\",\\\"helios\\\",\\\"kuai-gong\\\",\\\"clarkinc\\\",\\\"applied-energetics\\\",\\\"stormtech\\\",\\\"4sigma\\\",\\\"nwo\\\",\\\"The-Cave\\\",\\\"fulcrumtech\\\",\\\".\\\",\\\"blade\\\",\\\"ecorp\\\",\\\"titan-labs\\\",\\\"vitalife\\\",\\\"omnitek\\\",\\\"powerhouse-fitness\\\",\\\"megacorp\\\",\\\"b-and-a\\\",\\\"fulcrumassets\\\",\\\"omnia\\\",\\\"solaris\\\",\\\"infocomm\\\",\\\"univ-energy\\\",\\\"zb-def\\\",\\\"neo-net\\\",\\\"crush-fitness\\\",\\\"netlink\\\",\\\"catalyst\\\",\\\"alpha-ent\\\",\\\"galactic-cyber\\\",\\\"lexo-corp\\\",\\\"rothman-uni\\\",\\\"foodnstuff\\\",\\\"n00dles\\\",\\\"zer0\\\",\\\"silver-helix\\\"].map(server => [server, ns.getServerMinSecurityLevel(server)]))); } catch { }\\n        if (ns.read(\\\"/Temp/servers-security.txt\\\") != result) await ns.write(\\\"/Temp/servers-security.txt\\\", result, 'w'); } catch(err) { ns.tprint(String(err)); throw(err); } }\",\"filename\":\"/Temp/servers-security.txt.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"helpers.js\",\"url\":\"blob:file:///1e5ed2a1-2100-4633-b647-4d0e58fb543d\",\"moduleSequenceNumber\":125},{\"filename\":\"/Temp/servers-security.txt.js\",\"url\":\"blob:file:///049993a7-9272-4997-8bcc-9c9e7f595ffe\",\"moduleSequenceNumber\":256}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"home\",\"moduleSequenceNumber\":256,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { formatMoney, formatNumberShort, formatDuration, parseShortNumber, scanAllServers } from 'helpers.js'\\nexport async function main(ns) { try { let result = \\\"\\\"; try { result = JSON.stringify(Object.fromEntries([\\\"home\\\",\\\"darkweb\\\",\\\"iron-gym\\\",\\\"harakiri-sushi\\\",\\\"CSEC\\\",\\\"hong-fang-tea\\\",\\\"nectar-net\\\",\\\"omega-net\\\",\\\"avmnite-02h\\\",\\\"syscore\\\",\\\"aevum-police\\\",\\\"global-pharm\\\",\\\"johnson-ortho\\\",\\\"I.I.I.I\\\",\\\"zb-institute\\\",\\\"the-hub\\\",\\\"joesguns\\\",\\\"sigma-cosmetics\\\",\\\"max-hardware\\\",\\\"phantasy\\\",\\\"comptek\\\",\\\"summit-uni\\\",\\\"millenium-fitness\\\",\\\"rho-construction\\\",\\\"snap-fitness\\\",\\\"unitalife\\\",\\\"zeus-med\\\",\\\"nova-med\\\",\\\"microdyne\\\",\\\"aerocorp\\\",\\\"deltaone\\\",\\\"icarus\\\",\\\"defcomm\\\",\\\"taiyang-digital\\\",\\\"run4theh111z\\\",\\\"helios\\\",\\\"kuai-gong\\\",\\\"clarkinc\\\",\\\"applied-energetics\\\",\\\"stormtech\\\",\\\"4sigma\\\",\\\"nwo\\\",\\\"The-Cave\\\",\\\"fulcrumtech\\\",\\\".\\\",\\\"blade\\\",\\\"ecorp\\\",\\\"titan-labs\\\",\\\"vitalife\\\",\\\"omnitek\\\",\\\"powerhouse-fitness\\\",\\\"megacorp\\\",\\\"b-and-a\\\",\\\"fulcrumassets\\\",\\\"omnia\\\",\\\"solaris\\\",\\\"infocomm\\\",\\\"univ-energy\\\",\\\"zb-def\\\",\\\"neo-net\\\",\\\"crush-fitness\\\",\\\"netlink\\\",\\\"catalyst\\\",\\\"alpha-ent\\\",\\\"galactic-cyber\\\",\\\"lexo-corp\\\",\\\"rothman-uni\\\",\\\"foodnstuff\\\",\\\"n00dles\\\",\\\"zer0\\\",\\\"silver-helix\\\"].map(server => [server, ns.getServerMaxMoney(server)]))); } catch { }\\n        if (ns.read(\\\"/Temp/servers-max-money.txt\\\") != result) await ns.write(\\\"/Temp/servers-max-money.txt\\\", result, 'w'); } catch(err) { ns.tprint(String(err)); throw(err); } }\",\"filename\":\"/Temp/servers-max-money.txt.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"helpers.js\",\"url\":\"blob:file:///aba94a37-f10e-4be3-83d4-c7e9c6fbba17\",\"moduleSequenceNumber\":125},{\"filename\":\"/Temp/servers-max-money.txt.js\",\"url\":\"blob:file:///11cf367c-5741-4f4f-a5fb-a5a13213e673\",\"moduleSequenceNumber\":258}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"home\",\"moduleSequenceNumber\":258,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { formatMoney, formatNumberShort, formatDuration, parseShortNumber, scanAllServers } from 'helpers.js'\\nexport async function main(ns) { try { let result = \\\"\\\"; try { result = JSON.stringify(ns.stock.getSymbols()); } catch { }\\n        if (ns.read(\\\"/Temp/stock-symbols.txt\\\") != result) await ns.write(\\\"/Temp/stock-symbols.txt\\\", result, 'w'); } catch(err) { ns.tprint(String(err)); throw(err); } }\",\"filename\":\"/Temp/stock-symbols.txt.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"helpers.js\",\"url\":\"blob:file:///cced30fe-9607-47a3-9ccc-56dbf77598cd\",\"moduleSequenceNumber\":125},{\"filename\":\"/Temp/stock-symbols.txt.js\",\"url\":\"blob:file:///d6da6fcf-6230-4eb4-828c-9ea5b3dce922\",\"moduleSequenceNumber\":246}],\"dependents\":[],\"ramUsage\":3.6,\"server\":\"home\",\"moduleSequenceNumber\":246,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"stock.getSymbols\",\"cost\":2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { formatMoney, formatNumberShort, formatDuration, parseShortNumber, scanAllServers } from 'helpers.js'\\nexport async function main(ns) { try { let result = \\\"\\\"; try { result = JSON.stringify(ns.gang.inGang()); } catch { }\\n        if (ns.read(\\\"/Temp/player-gang-joined.txt\\\") != result) await ns.write(\\\"/Temp/player-gang-joined.txt\\\", result, 'w'); } catch(err) { ns.tprint(String(err)); throw(err); } }\",\"filename\":\"/Temp/player-gang-joined.txt.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"helpers.js\",\"url\":\"blob:file:///03d83dd6-d4b5-41a6-b468-d13c0525c490\",\"moduleSequenceNumber\":125},{\"filename\":\"/Temp/player-gang-joined.txt.js\",\"url\":\"blob:file:///df84cdd1-e5a0-4182-9e90-9c16b4f5c1ae\",\"moduleSequenceNumber\":245}],\"dependents\":[],\"ramUsage\":2.6,\"server\":\"home\",\"moduleSequenceNumber\":245,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"gang.inGang\",\"cost\":1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { formatMoney, formatNumberShort, formatDuration, parseShortNumber, scanAllServers } from 'helpers.js'\\nexport async function main(ns) { try { let result = \\\"\\\"; try { result = JSON.stringify(Object.fromEntries([{\\\"contract\\\":\\\"contract-173425-ECorp.cct\\\",\\\"hostname\\\":\\\"fulcrumassets\\\"}].map(c => [c.contract, ns.codingcontract.getContractType(c.contract, c.hostname)]))); } catch { }\\n        if (ns.read(\\\"/Temp/contract-types.txt\\\") != result) await ns.write(\\\"/Temp/contract-types.txt\\\", result, 'w'); } catch(err) { ns.tprint(String(err)); throw(err); } }\",\"filename\":\"/Temp/contract-types.txt.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"helpers.js\",\"url\":\"blob:file:///263d3be0-72de-423e-b57f-3dae4a76a27d\",\"moduleSequenceNumber\":119},{\"filename\":\"/Temp/contract-types.txt.js\",\"url\":\"blob:file:///34645434-7574-4a11-a401-2f68bbd6b67a\",\"moduleSequenceNumber\":48615}],\"dependents\":[],\"ramUsage\":6.6,\"server\":\"home\",\"moduleSequenceNumber\":163,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"codingcontract.getContractType\",\"cost\":5}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { formatMoney, formatNumberShort, formatDuration, parseShortNumber, scanAllServers } from 'helpers.js'\\nexport async function main(ns) { try { let result = \\\"\\\"; try { result = JSON.stringify(ns.gang.getEquipmentNames()); } catch { }\\n        if (ns.read(\\\"/Temp/gang-equipment-names.txt\\\") != result) await ns.write(\\\"/Temp/gang-equipment-names.txt\\\", result, 'w'); } catch(err) { ns.tprint(String(err)); throw(err); } }\",\"filename\":\"/Temp/gang-equipment-names.txt.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"helpers.js\",\"url\":\"blob:file:///5a753fbc-01f0-4b09-905a-2e5519a31b40\",\"moduleSequenceNumber\":125},{\"filename\":\"/Temp/gang-equipment-names.txt.js\",\"url\":\"blob:file:///5903255f-1fc7-4a62-bd81-6ad798275478\",\"moduleSequenceNumber\":257}],\"dependents\":[],\"ramUsage\":2.6,\"server\":\"home\",\"moduleSequenceNumber\":257,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"gang.getEquipmentNames\",\"cost\":1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { formatMoney, formatNumberShort, formatDuration, parseShortNumber, scanAllServers } from 'helpers.js'\\nexport async function main(ns) { try { let result = \\\"\\\"; try { result = JSON.stringify(Object.fromEntries([\\\"ECP\\\",\\\"MGCP\\\",\\\"BLD\\\",\\\"CLRK\\\",\\\"OMTK\\\",\\\"FSIG\\\",\\\"KGI\\\",\\\"FLCM\\\",\\\"STM\\\",\\\"DCOMM\\\",\\\"HLS\\\",\\\"VITA\\\",\\\"ICRS\\\",\\\"UNV\\\",\\\"AERO\\\",\\\"OMN\\\",\\\"SLRS\\\",\\\"GPH\\\",\\\"NVMD\\\",\\\"WDS\\\",\\\"LXO\\\",\\\"RHOC\\\",\\\"APHE\\\",\\\"SYSC\\\",\\\"CTK\\\",\\\"NTLK\\\",\\\"OMGA\\\",\\\"FNS\\\",\\\"JGN\\\",\\\"SGC\\\",\\\"CTYS\\\",\\\"MDYN\\\",\\\"TITN\\\"].map(sym => [sym, ns.stock.getMaxShares(sym)]))); } catch { }\\n        if (ns.read(\\\"/Temp/stock-getMaxShares.txt\\\") != result) await ns.write(\\\"/Temp/stock-getMaxShares.txt\\\", result, 'w'); } catch(err) { ns.tprint(String(err)); throw(err); } }\",\"filename\":\"/Temp/stock-getMaxShares.txt.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"helpers.js\",\"url\":\"blob:file:///2b9bc834-8f20-49c9-ae3e-e66419719c5d\",\"moduleSequenceNumber\":125},{\"filename\":\"/Temp/stock-getMaxShares.txt.js\",\"url\":\"blob:file:///7e592f78-aee8-4e4d-a8df-75d7f5399594\",\"moduleSequenceNumber\":266}],\"dependents\":[],\"ramUsage\":3.6,\"server\":\"home\",\"moduleSequenceNumber\":266,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"stock.getMaxShares\",\"cost\":2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { formatMoney, formatNumberShort, formatDuration, parseShortNumber, scanAllServers } from 'helpers.js'\\nexport async function main(ns) { try { let result = \\\"\\\"; try { result = JSON.stringify(Object.fromEntries([{\\\"contract\\\":\\\"contract-173425-ECorp.cct\\\",\\\"hostname\\\":\\\"fulcrumassets\\\"}].map(c => [c.contract, ns.codingcontract.getData(c.contract, c.hostname)]))); } catch { }\\n        if (ns.read(\\\"/Temp/contract-data.txt\\\") != result) await ns.write(\\\"/Temp/contract-data.txt\\\", result, 'w'); } catch(err) { ns.tprint(String(err)); throw(err); } }\",\"filename\":\"/Temp/contract-data.txt.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"helpers.js\",\"url\":\"blob:file:///ced4f691-367c-4434-9262-a4cf2e4b4771\",\"moduleSequenceNumber\":119},{\"filename\":\"/Temp/contract-data.txt.js\",\"url\":\"blob:file:///8bfccd28-4ef8-4789-853e-006ab5e4f3fe\",\"moduleSequenceNumber\":48617}],\"dependents\":[],\"ramUsage\":6.6,\"server\":\"home\",\"moduleSequenceNumber\":166,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"codingcontract.getData\",\"cost\":5}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { formatMoney, formatNumberShort, formatDuration, parseShortNumber, scanAllServers } from 'helpers.js'\\nexport async function main(ns) { try { let result = \\\"\\\"; try { result = JSON.stringify([\\\"ECP\\\",\\\"MGCP\\\",\\\"BLD\\\",\\\"CLRK\\\",\\\"OMTK\\\",\\\"FSIG\\\",\\\"KGI\\\",\\\"FLCM\\\",\\\"STM\\\",\\\"DCOMM\\\",\\\"HLS\\\",\\\"VITA\\\",\\\"ICRS\\\",\\\"UNV\\\",\\\"AERO\\\",\\\"OMN\\\",\\\"SLRS\\\",\\\"GPH\\\",\\\"NVMD\\\",\\\"WDS\\\",\\\"LXO\\\",\\\"RHOC\\\",\\\"APHE\\\",\\\"SYSC\\\",\\\"CTK\\\",\\\"NTLK\\\",\\\"OMGA\\\",\\\"FNS\\\",\\\"JGN\\\",\\\"SGC\\\",\\\"CTYS\\\",\\\"MDYN\\\",\\\"TITN\\\"].map(sym => ({ sym, pos: ns.stock.getPosition(sym), ask: ns.stock.getAskPrice(sym), bid: ns.stock.getBidPrice(sym) })).reduce((total, stk) => total + stk.pos[0] * stk.bid + stk.pos[2] * (stk.pos[3] * 2 - stk.ask) -100000 * (stk.pos[0] + stk.pos[2] > 0 ? 1 : 0), 0)); } catch { }\\n        if (ns.read(\\\"/Temp/stock-portfolio-value.txt\\\") != result) await ns.write(\\\"/Temp/stock-portfolio-value.txt\\\", result, 'w'); } catch(err) { ns.tprint(String(err)); throw(err); } }\",\"filename\":\"/Temp/stock-portfolio-value.txt.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"helpers.js\",\"url\":\"blob:file:///9c15617b-b54f-4d37-9560-b3b40eb8cf4c\",\"moduleSequenceNumber\":125},{\"filename\":\"/Temp/stock-portfolio-value.txt.js\",\"url\":\"blob:file:///aed00904-9a9f-4a47-a648-7afc70392a88\",\"moduleSequenceNumber\":248}],\"dependents\":[],\"ramUsage\":7.6,\"server\":\"home\",\"moduleSequenceNumber\":248,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"stock.getPosition\",\"cost\":2},{\"type\":\"fn\",\"name\":\"stock.getAskPrice\",\"cost\":2},{\"type\":\"fn\",\"name\":\"stock.getBidPrice\",\"cost\":2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { formatMoney, formatNumberShort, formatDuration, parseShortNumber, scanAllServers } from 'helpers.js'\\nexport async function main(ns) { try { let result = \\\"\\\"; try { result = JSON.stringify(ns.gang.inGang() ? ns.gang.getGangInformation() : false); } catch { }\\n        if (ns.read(\\\"/Temp/gang-stats.txt\\\") != result) await ns.write(\\\"/Temp/gang-stats.txt\\\", result, 'w'); } catch(err) { ns.tprint(String(err)); throw(err); } }\",\"filename\":\"/Temp/gang-stats.txt.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"helpers.js\",\"url\":\"blob:file:///e017af15-24a7-4e19-8dd0-a80e9dfed041\",\"moduleSequenceNumber\":125},{\"filename\":\"/Temp/gang-stats.txt.js\",\"url\":\"blob:file:///7ba28980-430d-40b7-9d1d-a301bedd90f2\",\"moduleSequenceNumber\":253}],\"dependents\":[],\"ramUsage\":4.6,\"server\":\"home\",\"moduleSequenceNumber\":253,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"gang.inGang\",\"cost\":1},{\"type\":\"fn\",\"name\":\"gang.getGangInformation\",\"cost\":2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { formatMoney, formatNumberShort, formatDuration, parseShortNumber, scanAllServers } from 'helpers.js'\\nexport async function main(ns) { try { let result = \\\"\\\"; try { result = JSON.stringify(Object.fromEntries([\\\"Baseball Bat\\\",\\\"Katana\\\",\\\"Glock 18C\\\",\\\"P90C\\\",\\\"Steyr AUG\\\",\\\"AK-47\\\",\\\"M15A10 Assault Rifle\\\",\\\"AWM Sniper Rifle\\\",\\\"Bulletproof Vest\\\",\\\"Full Body Armor\\\",\\\"Liquid Body Armor\\\",\\\"Graphene Plating Armor\\\",\\\"Ford Flex V20\\\",\\\"ATX1070 Superbike\\\",\\\"Mercedes-Benz S9001\\\",\\\"White Ferrari\\\",\\\"NUKE Rootkit\\\",\\\"Soulstealer Rootkit\\\",\\\"Demon Rootkit\\\",\\\"Hmap Node\\\",\\\"Jack the Ripper\\\",\\\"Bionic Arms\\\",\\\"Bionic Legs\\\",\\\"Bionic Spine\\\",\\\"BrachiBlades\\\",\\\"Nanofiber Weave\\\",\\\"Synthetic Heart\\\",\\\"Synfibril Muscle\\\",\\\"BitWire\\\",\\\"Neuralstimulator\\\",\\\"DataJack\\\",\\\"Graphene Bone Lacings\\\"].map(e => [e, ns.gang.getEquipmentType(e)]))); } catch { }\\n        if (ns.read(\\\"/Temp/gang-getEquipmentType.txt\\\") != result) await ns.write(\\\"/Temp/gang-getEquipmentType.txt\\\", result, 'w'); } catch(err) { ns.tprint(String(err)); throw(err); } }\",\"filename\":\"/Temp/gang-getEquipmentType.txt.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"helpers.js\",\"url\":\"blob:file:///c8faa57c-267c-47dd-bc3b-361cc1522976\",\"moduleSequenceNumber\":125},{\"filename\":\"/Temp/gang-getEquipmentType.txt.js\",\"url\":\"blob:file:///efb3beb6-f4c2-4fac-835e-1af3c7370823\",\"moduleSequenceNumber\":259}],\"dependents\":[],\"ramUsage\":3.6,\"server\":\"home\",\"moduleSequenceNumber\":259,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"gang.getEquipmentType\",\"cost\":2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { formatMoney, formatNumberShort, formatDuration, parseShortNumber, scanAllServers } from 'helpers.js'\\nexport async function main(ns) { try { let result = \\\"\\\"; try { result = JSON.stringify(ns.ps()); } catch { }\\n        if (ns.read(\\\"/Temp/process-list.txt\\\") != result) await ns.write(\\\"/Temp/process-list.txt\\\", result, 'w'); } catch(err) { ns.tprint(String(err)); throw(err); } }\",\"filename\":\"/Temp/process-list.txt.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"helpers.js\",\"url\":\"blob:file:///2dbb05a6-bfbb-4ba0-999b-a9e4b760b6e3\",\"moduleSequenceNumber\":125},{\"filename\":\"/Temp/process-list.txt.js\",\"url\":\"blob:file:///194956ab-4e0b-4ae9-8efe-888e62f9e830\",\"moduleSequenceNumber\":267}],\"dependents\":[],\"ramUsage\":1.8,\"server\":\"home\",\"moduleSequenceNumber\":267,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"ps\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { formatMoney, formatNumberShort, formatDuration, parseShortNumber, scanAllServers } from 'helpers.js'\\nexport async function main(ns) { try { let result = \\\"\\\"; try { result = JSON.stringify(ns.scriptRunning('/Temp/stockmarket-summary-tail.js', ns.getHostname())); } catch { }\\n        if (ns.read(\\\"/Temp/stockmarket-summary-is-running.txt\\\") != result) await ns.write(\\\"/Temp/stockmarket-summary-is-running.txt\\\", result, 'w'); } catch(err) { ns.tprint(String(err)); throw(err); } }\",\"filename\":\"/Temp/stockmarket-summary-is-running.txt.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"helpers.js\",\"url\":\"blob:file:///958e63db-f97e-4af4-b519-f94a071b3c4e\",\"moduleSequenceNumber\":125},{\"filename\":\"/Temp/stockmarket-summary-is-running.txt.js\",\"url\":\"blob:file:///73e891d4-05ea-4b39-84ef-7fadd7bdf8e4\",\"moduleSequenceNumber\":278}],\"dependents\":[],\"ramUsage\":2.65,\"server\":\"home\",\"moduleSequenceNumber\":278,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scriptRunning\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { formatMoney, formatNumberShort, formatDuration, parseShortNumber, scanAllServers } from 'helpers.js'\\nexport async function main(ns) { try { let result = \\\"\\\"; try { result = JSON.stringify(Object.fromEntries([\\\"Baseball Bat\\\",\\\"Bulletproof Vest\\\",\\\"Ford Flex V20\\\",\\\"Full Body Armor\\\",\\\"NUKE Rootkit\\\",\\\"ATX1070 Superbike\\\",\\\"Katana\\\",\\\"Mercedes-Benz S9001\\\",\\\"Glock 18C\\\",\\\"Liquid Body Armor\\\",\\\"Soulstealer Rootkit\\\",\\\"White Ferrari\\\",\\\"Graphene Plating Armor\\\",\\\"Hmap Node\\\",\\\"P90C\\\",\\\"Steyr AUG\\\",\\\"Demon Rootkit\\\",\\\"Jack the Ripper\\\",\\\"AK-47\\\",\\\"M15A10 Assault Rifle\\\",\\\"AWM Sniper Rifle\\\",\\\"BitWire\\\",\\\"DataJack\\\",\\\"Bionic Arms\\\",\\\"Bionic Legs\\\",\\\"Neuralstimulator\\\",\\\"Nanofiber Weave\\\",\\\"Bionic Spine\\\",\\\"Synfibril Muscle\\\",\\\"BrachiBlades\\\",\\\"Synthetic Heart\\\",\\\"Graphene Bone Lacings\\\"].map(e => [e, ns.gang.getEquipmentCost(e)]))); } catch { }\\n        if (ns.read(\\\"/Temp/gang-getEquipmentCost.txt\\\") != result) await ns.write(\\\"/Temp/gang-getEquipmentCost.txt\\\", result, 'w'); } catch(err) { ns.tprint(String(err)); throw(err); } }\",\"filename\":\"/Temp/gang-getEquipmentCost.txt.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"helpers.js\",\"url\":\"blob:file:///cfd2f82e-b32a-4c3e-a774-29d2214c73e2\",\"moduleSequenceNumber\":125},{\"filename\":\"/Temp/gang-getEquipmentCost.txt.js\",\"url\":\"blob:file:///476f2767-1dc5-4fc9-a40b-27a0846bdc0b\",\"moduleSequenceNumber\":323}],\"dependents\":[],\"ramUsage\":3.6,\"server\":\"home\",\"moduleSequenceNumber\":323,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"gang.getEquipmentCost\",\"cost\":2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { formatMoney, formatNumberShort, formatDuration, parseShortNumber, scanAllServers } from 'helpers.js'\\nexport async function main(ns) { try { let result = \\\"\\\"; try { result = JSON.stringify(Object.fromEntries([\\\"Baseball Bat\\\",\\\"Katana\\\",\\\"Glock 18C\\\",\\\"P90C\\\",\\\"Steyr AUG\\\",\\\"AK-47\\\",\\\"M15A10 Assault Rifle\\\",\\\"AWM Sniper Rifle\\\",\\\"Bulletproof Vest\\\",\\\"Full Body Armor\\\",\\\"Liquid Body Armor\\\",\\\"Graphene Plating Armor\\\",\\\"Ford Flex V20\\\",\\\"ATX1070 Superbike\\\",\\\"Mercedes-Benz S9001\\\",\\\"White Ferrari\\\",\\\"NUKE Rootkit\\\",\\\"Soulstealer Rootkit\\\",\\\"Demon Rootkit\\\",\\\"Hmap Node\\\",\\\"Jack the Ripper\\\",\\\"Bionic Arms\\\",\\\"Bionic Legs\\\",\\\"Bionic Spine\\\",\\\"BrachiBlades\\\",\\\"Nanofiber Weave\\\",\\\"Synthetic Heart\\\",\\\"Synfibril Muscle\\\",\\\"BitWire\\\",\\\"Neuralstimulator\\\",\\\"DataJack\\\",\\\"Graphene Bone Lacings\\\"].map(e => [e, ns.gang.getEquipmentStats(e)]))); } catch { }\\n        if (ns.read(\\\"/Temp/gang-getEquipmentStats.txt\\\") != result) await ns.write(\\\"/Temp/gang-getEquipmentStats.txt\\\", result, 'w'); } catch(err) { ns.tprint(String(err)); throw(err); } }\",\"filename\":\"/Temp/gang-getEquipmentStats.txt.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"helpers.js\",\"url\":\"blob:file:///6a1563e3-4f18-4e72-b8d0-95567423250b\",\"moduleSequenceNumber\":125},{\"filename\":\"/Temp/gang-getEquipmentStats.txt.js\",\"url\":\"blob:file:///74eb8f9b-7943-4b12-a317-99986addf892\",\"moduleSequenceNumber\":263}],\"dependents\":[],\"ramUsage\":3.6,\"server\":\"home\",\"moduleSequenceNumber\":263,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"gang.getEquipmentStats\",\"cost\":2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { formatMoney, formatNumberShort, formatDuration, parseShortNumber, scanAllServers } from 'helpers.js'\\nexport async function main(ns) { try { ns.disableLog('sleep'); ns.tail(); let lastRead = '';\\n        while (true) { \\n            let read = ns.read('/Temp/stockmarket-summary.txt');\\n            if (lastRead != read) ns.print(lastRead = read);\\n            await ns.sleep(1000); \\n        }; } catch(err) { ns.tprint(String(err)); throw(err); } }\",\"filename\":\"/Temp/stockmarket-summary-tail.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"helpers.js\",\"url\":\"blob:file:///44377dcb-8ab1-44bd-9188-c8f158d0a164\",\"moduleSequenceNumber\":125},{\"filename\":\"/Temp/stockmarket-summary-tail.js\",\"url\":\"blob:file:///92b10f3a-62cb-413c-8233-591b3e83cf85\",\"moduleSequenceNumber\":229}],\"dependents\":[],\"ramUsage\":1.6,\"server\":\"home\",\"moduleSequenceNumber\":229,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { formatMoney, formatNumberShort, formatDuration, parseShortNumber, scanAllServers } from 'helpers.js'\\nexport async function main(ns) { try { let result = \\\"\\\"; try { result = JSON.stringify(Object.fromEntries([\\\"ECP\\\",\\\"MGCP\\\",\\\"BLD\\\",\\\"CLRK\\\",\\\"OMTK\\\",\\\"FSIG\\\",\\\"KGI\\\",\\\"FLCM\\\",\\\"STM\\\",\\\"DCOMM\\\",\\\"HLS\\\",\\\"VITA\\\",\\\"ICRS\\\",\\\"UNV\\\",\\\"AERO\\\",\\\"OMN\\\",\\\"SLRS\\\",\\\"GPH\\\",\\\"NVMD\\\",\\\"WDS\\\",\\\"LXO\\\",\\\"RHOC\\\",\\\"APHE\\\",\\\"SYSC\\\",\\\"CTK\\\",\\\"NTLK\\\",\\\"OMGA\\\",\\\"FNS\\\",\\\"JGN\\\",\\\"SGC\\\",\\\"CTYS\\\",\\\"MDYN\\\",\\\"TITN\\\"].map(sym => [sym, ns.stock.getAskPrice(sym)]))); } catch { }\\n        if (ns.read(\\\"/Temp/stock-getAskPrice.txt\\\") != result) await ns.write(\\\"/Temp/stock-getAskPrice.txt\\\", result, 'w'); } catch(err) { ns.tprint(String(err)); throw(err); } }\",\"filename\":\"/Temp/stock-getAskPrice.txt.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"helpers.js\",\"url\":\"blob:file:///0e9c1198-f892-4c64-a2d6-0c03a2ee3f6d\",\"moduleSequenceNumber\":125},{\"filename\":\"/Temp/stock-getAskPrice.txt.js\",\"url\":\"blob:file:///706327f4-9513-4991-bf4b-cc89424af595\",\"moduleSequenceNumber\":281}],\"dependents\":[],\"ramUsage\":3.6,\"server\":\"home\",\"moduleSequenceNumber\":281,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"stock.getAskPrice\",\"cost\":2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { formatMoney, formatNumberShort, formatDuration, parseShortNumber, scanAllServers } from 'helpers.js'\\nexport async function main(ns) { try { let result = \\\"\\\"; try { result = JSON.stringify(Object.fromEntries([\\\"ECP\\\",\\\"MGCP\\\",\\\"BLD\\\",\\\"CLRK\\\",\\\"OMTK\\\",\\\"FSIG\\\",\\\"KGI\\\",\\\"FLCM\\\",\\\"STM\\\",\\\"DCOMM\\\",\\\"HLS\\\",\\\"VITA\\\",\\\"ICRS\\\",\\\"UNV\\\",\\\"AERO\\\",\\\"OMN\\\",\\\"SLRS\\\",\\\"GPH\\\",\\\"NVMD\\\",\\\"WDS\\\",\\\"LXO\\\",\\\"RHOC\\\",\\\"APHE\\\",\\\"SYSC\\\",\\\"CTK\\\",\\\"NTLK\\\",\\\"OMGA\\\",\\\"FNS\\\",\\\"JGN\\\",\\\"SGC\\\",\\\"CTYS\\\",\\\"MDYN\\\",\\\"TITN\\\"].map(sym => [sym, ns.stock.getBidPrice(sym)]))); } catch { }\\n        if (ns.read(\\\"/Temp/stock-getBidPrice.txt\\\") != result) await ns.write(\\\"/Temp/stock-getBidPrice.txt\\\", result, 'w'); } catch(err) { ns.tprint(String(err)); throw(err); } }\",\"filename\":\"/Temp/stock-getBidPrice.txt.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"helpers.js\",\"url\":\"blob:file:///3207cf5d-0aa6-4462-9e96-722898b2ff70\",\"moduleSequenceNumber\":125},{\"filename\":\"/Temp/stock-getBidPrice.txt.js\",\"url\":\"blob:file:///79aee905-ee65-4bed-8cd9-73ffe8ced14a\",\"moduleSequenceNumber\":288}],\"dependents\":[],\"ramUsage\":3.6,\"server\":\"home\",\"moduleSequenceNumber\":288,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"stock.getBidPrice\",\"cost\":2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { formatMoney, formatNumberShort, formatDuration, parseShortNumber, scanAllServers } from 'helpers.js'\\nexport async function main(ns) { try { let result = \\\"\\\"; try { result = JSON.stringify(ns.gang.getTaskNames()); } catch { }\\n        if (ns.read(\\\"/Temp/gang-task-names.txt\\\") != result) await ns.write(\\\"/Temp/gang-task-names.txt\\\", result, 'w'); } catch(err) { ns.tprint(String(err)); throw(err); } }\",\"filename\":\"/Temp/gang-task-names.txt.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"helpers.js\",\"url\":\"blob:file:///22d802fe-58d3-4ec9-8698-db2edfc14414\",\"moduleSequenceNumber\":125},{\"filename\":\"/Temp/gang-task-names.txt.js\",\"url\":\"blob:file:///37624342-fcf2-4fc5-810d-3288f8111be2\",\"moduleSequenceNumber\":264}],\"dependents\":[],\"ramUsage\":2.6,\"server\":\"home\",\"moduleSequenceNumber\":264,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"gang.getTaskNames\",\"cost\":1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { formatMoney, formatNumberShort, formatDuration, parseShortNumber, scanAllServers } from 'helpers.js'\\nexport async function main(ns) { try { let result = \\\"\\\"; try { result = JSON.stringify(Object.fromEntries([\\\"ECP\\\",\\\"MGCP\\\",\\\"BLD\\\",\\\"CLRK\\\",\\\"OMTK\\\",\\\"FSIG\\\",\\\"KGI\\\",\\\"FLCM\\\",\\\"STM\\\",\\\"DCOMM\\\",\\\"HLS\\\",\\\"VITA\\\",\\\"ICRS\\\",\\\"UNV\\\",\\\"AERO\\\",\\\"OMN\\\",\\\"SLRS\\\",\\\"GPH\\\",\\\"NVMD\\\",\\\"WDS\\\",\\\"LXO\\\",\\\"RHOC\\\",\\\"APHE\\\",\\\"SYSC\\\",\\\"CTK\\\",\\\"NTLK\\\",\\\"OMGA\\\",\\\"FNS\\\",\\\"JGN\\\",\\\"SGC\\\",\\\"CTYS\\\",\\\"MDYN\\\",\\\"TITN\\\"].map(sym => [sym, ns.stock.getVolatility(sym)]))); } catch { }\\n        if (ns.read(\\\"/Temp/stock-getVolatility.txt\\\") != result) await ns.write(\\\"/Temp/stock-getVolatility.txt\\\", result, 'w'); } catch(err) { ns.tprint(String(err)); throw(err); } }\",\"filename\":\"/Temp/stock-getVolatility.txt.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"helpers.js\",\"url\":\"blob:file:///24f9c3ad-c474-4a1b-ba1c-2818b302598a\",\"moduleSequenceNumber\":125},{\"filename\":\"/Temp/stock-getVolatility.txt.js\",\"url\":\"blob:file:///da4981ad-f17b-4840-9768-dc90bff28967\",\"moduleSequenceNumber\":292}],\"dependents\":[],\"ramUsage\":4.1,\"server\":\"home\",\"moduleSequenceNumber\":292,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"stock.getVolatility\",\"cost\":2.5}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { formatMoney, formatNumberShort, formatDuration, parseShortNumber, scanAllServers } from 'helpers.js'\\nexport async function main(ns) { try { let result = \\\"\\\"; try { result = JSON.stringify(Object.fromEntries([\\\"Unassigned\\\",\\\"Mug People\\\",\\\"Deal Drugs\\\",\\\"Strongarm Civilians\\\",\\\"Run a Con\\\",\\\"Armed Robbery\\\",\\\"Traffick Illegal Arms\\\",\\\"Threaten & Blackmail\\\",\\\"Human Trafficking\\\",\\\"Terrorism\\\",\\\"Vigilante Justice\\\",\\\"Train Combat\\\",\\\"Train Hacking\\\",\\\"Train Charisma\\\",\\\"Territory Warfare\\\"].map(e => [e, ns.gang.getTaskStats(e)]))); } catch { }\\n        if (ns.read(\\\"/Temp/gang-getTaskStats.txt\\\") != result) await ns.write(\\\"/Temp/gang-getTaskStats.txt\\\", result, 'w'); } catch(err) { ns.tprint(String(err)); throw(err); } }\",\"filename\":\"/Temp/gang-getTaskStats.txt.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"helpers.js\",\"url\":\"blob:file:///e8298db8-642c-4e9d-8aab-0a6b57cd3cb6\",\"moduleSequenceNumber\":125},{\"filename\":\"/Temp/gang-getTaskStats.txt.js\",\"url\":\"blob:file:///ed492e13-a56e-4671-a3bd-20394253532f\",\"moduleSequenceNumber\":268}],\"dependents\":[],\"ramUsage\":2.6,\"server\":\"home\",\"moduleSequenceNumber\":268,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"gang.getTaskStats\",\"cost\":1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { formatMoney, formatNumberShort, formatDuration, parseShortNumber, scanAllServers } from 'helpers.js'\\nexport async function main(ns) { try { let result = \\\"\\\"; try { result = JSON.stringify(Object.fromEntries([\\\"ECP\\\",\\\"MGCP\\\",\\\"BLD\\\",\\\"CLRK\\\",\\\"OMTK\\\",\\\"FSIG\\\",\\\"KGI\\\",\\\"FLCM\\\",\\\"STM\\\",\\\"DCOMM\\\",\\\"HLS\\\",\\\"VITA\\\",\\\"ICRS\\\",\\\"UNV\\\",\\\"AERO\\\",\\\"OMN\\\",\\\"SLRS\\\",\\\"GPH\\\",\\\"NVMD\\\",\\\"WDS\\\",\\\"LXO\\\",\\\"RHOC\\\",\\\"APHE\\\",\\\"SYSC\\\",\\\"CTK\\\",\\\"NTLK\\\",\\\"OMGA\\\",\\\"FNS\\\",\\\"JGN\\\",\\\"SGC\\\",\\\"CTYS\\\",\\\"MDYN\\\",\\\"TITN\\\"].map(sym => [sym, ns.stock.getForecast(sym)]))); } catch { }\\n        if (ns.read(\\\"/Temp/stock-getForecast.txt\\\") != result) await ns.write(\\\"/Temp/stock-getForecast.txt\\\", result, 'w'); } catch(err) { ns.tprint(String(err)); throw(err); } }\",\"filename\":\"/Temp/stock-getForecast.txt.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"helpers.js\",\"url\":\"blob:file:///9073a433-57c0-41ad-8363-0c8f5f909fde\",\"moduleSequenceNumber\":125},{\"filename\":\"/Temp/stock-getForecast.txt.js\",\"url\":\"blob:file:///e3322b8e-6830-483b-b9f4-b483f39b49f7\",\"moduleSequenceNumber\":294}],\"dependents\":[],\"ramUsage\":4.1,\"server\":\"home\",\"moduleSequenceNumber\":294,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"stock.getForecast\",\"cost\":2.5}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { formatMoney, formatNumberShort, formatDuration, parseShortNumber, scanAllServers } from 'helpers.js'\\nexport async function main(ns) { try { let result = \\\"\\\"; try { result = JSON.stringify(Object.fromEntries([\\\"ECP\\\",\\\"MGCP\\\",\\\"BLD\\\",\\\"CLRK\\\",\\\"OMTK\\\",\\\"FSIG\\\",\\\"KGI\\\",\\\"FLCM\\\",\\\"STM\\\",\\\"DCOMM\\\",\\\"HLS\\\",\\\"VITA\\\",\\\"ICRS\\\",\\\"UNV\\\",\\\"AERO\\\",\\\"OMN\\\",\\\"SLRS\\\",\\\"GPH\\\",\\\"NVMD\\\",\\\"WDS\\\",\\\"LXO\\\",\\\"RHOC\\\",\\\"APHE\\\",\\\"SYSC\\\",\\\"CTK\\\",\\\"NTLK\\\",\\\"OMGA\\\",\\\"FNS\\\",\\\"JGN\\\",\\\"SGC\\\",\\\"CTYS\\\",\\\"MDYN\\\",\\\"TITN\\\"].map(sym => [sym, ns.stock.getPosition(sym)]))); } catch { }\\n        if (ns.read(\\\"/Temp/stock-getPosition.txt\\\") != result) await ns.write(\\\"/Temp/stock-getPosition.txt\\\", result, 'w'); } catch(err) { ns.tprint(String(err)); throw(err); } }\",\"filename\":\"/Temp/stock-getPosition.txt.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"helpers.js\",\"url\":\"blob:file:///a9893d6e-474b-4ae8-8541-f94f580dafb0\",\"moduleSequenceNumber\":125},{\"filename\":\"/Temp/stock-getPosition.txt.js\",\"url\":\"blob:file:///7a966e2f-6120-400e-a072-5630c81414fe\",\"moduleSequenceNumber\":304}],\"dependents\":[],\"ramUsage\":3.6,\"server\":\"home\",\"moduleSequenceNumber\":304,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"stock.getPosition\",\"cost\":2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { formatMoney, formatNumberShort, formatDuration, parseShortNumber, scanAllServers } from 'helpers.js'\\nexport async function main(ns) { try { let result = \\\"\\\"; try { result = JSON.stringify(ns.gang.getMemberNames()); } catch { }\\n        if (ns.read(\\\"/Temp/gang-member-names.txt\\\") != result) await ns.write(\\\"/Temp/gang-member-names.txt\\\", result, 'w'); } catch(err) { ns.tprint(String(err)); throw(err); } }\",\"filename\":\"/Temp/gang-member-names.txt.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"helpers.js\",\"url\":\"blob:file:///c43c407c-7358-472e-af1f-ba02c529f211\",\"moduleSequenceNumber\":125},{\"filename\":\"/Temp/gang-member-names.txt.js\",\"url\":\"blob:file:///fe8b0f0f-ecfc-4765-a535-34da3b7437c7\",\"moduleSequenceNumber\":279}],\"dependents\":[],\"ramUsage\":2.6,\"server\":\"home\",\"moduleSequenceNumber\":279,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"gang.getMemberNames\",\"cost\":1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { formatMoney, formatNumberShort, formatDuration, parseShortNumber, scanAllServers } from 'helpers.js'\\nexport async function main(ns) { try { let result = \\\"\\\"; try { result = JSON.stringify(Object.fromEntries([\\\"Thug 1\\\",\\\"Thug 2\\\",\\\"Thug 3\\\",\\\"Thug 4\\\",\\\"Thug 5\\\",\\\"Thug 6\\\",\\\"Thug 7\\\",\\\"Thug 8\\\",\\\"Thug 9\\\",\\\"Thug 10\\\",\\\"Thug 11\\\"].map(e => [e, ns.gang.getMemberInformation(e)]))); } catch { }\\n        if (ns.read(\\\"/Temp/gang-getMemberInformation.txt\\\") != result) await ns.write(\\\"/Temp/gang-getMemberInformation.txt\\\", result, 'w'); } catch(err) { ns.tprint(String(err)); throw(err); } }\",\"filename\":\"/Temp/gang-getMemberInformation.txt.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"helpers.js\",\"url\":\"blob:file:///c1b34ba4-b077-428f-a52d-53c0f5067f52\",\"moduleSequenceNumber\":125},{\"filename\":\"/Temp/gang-getMemberInformation.txt.js\",\"url\":\"blob:file:///7ec8e4bc-4934-421d-84f6-d51672a06dd7\",\"moduleSequenceNumber\":282}],\"dependents\":[],\"ramUsage\":3.6,\"server\":\"home\",\"moduleSequenceNumber\":282,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"gang.getMemberInformation\",\"cost\":2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { formatMoney, formatNumberShort, formatDuration, parseShortNumber, scanAllServers } from 'helpers.js'\\nexport async function main(ns) { try { let result = \\\"\\\"; try { result = JSON.stringify([{\\\"name\\\":\\\"Thug 11\\\",\\\"task\\\":\\\"Train Combat\\\"}].reduce((success, m) => success && ns.gang.setMemberTask(m.name, m.task), true)); } catch { }\\n        if (ns.read(\\\"/Temp/gang-set-member-tasks.txt\\\") != result) await ns.write(\\\"/Temp/gang-set-member-tasks.txt\\\", result, 'w'); } catch(err) { ns.tprint(String(err)); throw(err); } }\",\"filename\":\"/Temp/gang-set-member-tasks.txt.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"helpers.js\",\"url\":\"blob:file:///6a16efac-edb8-4dec-b5ff-ff8a8021de6a\",\"moduleSequenceNumber\":125},{\"filename\":\"/Temp/gang-set-member-tasks.txt.js\",\"url\":\"blob:file:///93e35cf5-982d-4a6a-9ce8-a517b1765d65\",\"moduleSequenceNumber\":329}],\"dependents\":[],\"ramUsage\":3.6,\"server\":\"home\",\"moduleSequenceNumber\":329,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"gang.setMemberTask\",\"cost\":2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { formatMoney, formatNumberShort, formatDuration, parseShortNumber, scanAllServers } from 'helpers.js'\\nexport async function main(ns) { try { let result = \\\"\\\"; try { result = JSON.stringify(ns.gang.getOtherGangInformation()); } catch { }\\n        if (ns.read(\\\"/Temp/gang-other-gang-info.txt\\\") != result) await ns.write(\\\"/Temp/gang-other-gang-info.txt\\\", result, 'w'); } catch(err) { ns.tprint(String(err)); throw(err); } }\",\"filename\":\"/Temp/gang-other-gang-info.txt.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"helpers.js\",\"url\":\"blob:file:///23911548-6e9f-486c-bbc8-57afc135d4eb\",\"moduleSequenceNumber\":125},{\"filename\":\"/Temp/gang-other-gang-info.txt.js\",\"url\":\"blob:file:///c4f42516-2998-42ee-99e6-c05f7cff0682\",\"moduleSequenceNumber\":306}],\"dependents\":[],\"ramUsage\":3.6,\"server\":\"home\",\"moduleSequenceNumber\":306,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"gang.getOtherGangInformation\",\"cost\":2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { formatMoney, formatNumberShort, formatDuration, parseShortNumber, scanAllServers } from 'helpers.js'\\nexport async function main(ns) { try { let result = \\\"\\\"; try { result = JSON.stringify(Object.fromEntries([\\\"Thug 1\\\",\\\"Thug 2\\\",\\\"Thug 3\\\",\\\"Thug 4\\\",\\\"Thug 5\\\",\\\"Thug 6\\\",\\\"Thug 7\\\",\\\"Thug 8\\\",\\\"Thug 9\\\",\\\"Thug 10\\\",\\\"Thug 11\\\"].map(e => [e, ns.gang.getAscensionResult(e)]))); } catch { }\\n        if (ns.read(\\\"/Temp/gang-getAscensionResult.txt\\\") != result) await ns.write(\\\"/Temp/gang-getAscensionResult.txt\\\", result, 'w'); } catch(err) { ns.tprint(String(err)); throw(err); } }\",\"filename\":\"/Temp/gang-getAscensionResult.txt.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"helpers.js\",\"url\":\"blob:file:///9d9a8314-ffbf-42c1-ac17-7f593d915aa8\",\"moduleSequenceNumber\":125},{\"filename\":\"/Temp/gang-getAscensionResult.txt.js\",\"url\":\"blob:file:///cb24b45c-8d42-4294-83d1-b547703b0125\",\"moduleSequenceNumber\":319}],\"dependents\":[],\"ramUsage\":3.6,\"server\":\"home\",\"moduleSequenceNumber\":319,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"gang.getAscensionResult\",\"cost\":2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { formatMoney, formatNumberShort, formatDuration, parseShortNumber, scanAllServers } from 'helpers.js'\\nexport async function main(ns) { try { let result = \\\"\\\"; try { result = JSON.stringify(ns.gang.ascendMember('Thug 11')); } catch { }\\n        if (ns.read(\\\"/Temp/gang-ascend-member.txt\\\") != result) await ns.write(\\\"/Temp/gang-ascend-member.txt\\\", result, 'w'); } catch(err) { ns.tprint(String(err)); throw(err); } }\",\"filename\":\"/Temp/gang-ascend-member.txt.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"helpers.js\",\"url\":\"blob:file:///d540206b-c691-4646-83a2-b867d5a83c8c\",\"moduleSequenceNumber\":125},{\"filename\":\"/Temp/gang-ascend-member.txt.js\",\"url\":\"blob:file:///88bee2ba-4c6e-4fb3-8b4a-ef13eb91c775\",\"moduleSequenceNumber\":321}],\"dependents\":[],\"ramUsage\":5.6,\"server\":\"home\",\"moduleSequenceNumber\":321,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"gang.ascendMember\",\"cost\":4}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { formatMoney, formatNumberShort, formatDuration, parseShortNumber, scanAllServers } from 'helpers.js'\\nexport async function main(ns) { try { let result = \\\"\\\"; try { result = JSON.stringify([{\\\"member\\\":\\\"Thug 8\\\",\\\"type\\\":\\\"Weapon\\\",\\\"equipmentName\\\":\\\"AWM Sniper Rifle\\\",\\\"cost\\\":176927219.46096078}].reduce((success, o) => success && ns.gang.purchaseEquipment(o.member, o.equipmentName), true)); } catch { }\\n        if (ns.read(\\\"/Temp/gang-upgrade-members.txt\\\") != result) await ns.write(\\\"/Temp/gang-upgrade-members.txt\\\", result, 'w'); } catch(err) { ns.tprint(String(err)); throw(err); } }\",\"filename\":\"/Temp/gang-upgrade-members.txt.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"helpers.js\",\"url\":\"blob:file:///3f852ed1-5241-4cc2-a690-159ec2ec247b\",\"moduleSequenceNumber\":125},{\"filename\":\"/Temp/gang-upgrade-members.txt.js\",\"url\":\"blob:file:///9f1983d2-6517-4de6-b2aa-3e9612f551cc\",\"moduleSequenceNumber\":325}],\"dependents\":[],\"ramUsage\":5.6,\"server\":\"home\",\"moduleSequenceNumber\":325,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"gang.purchaseEquipment\",\"cost\":4}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { formatMoney, formatNumberShort, formatDuration, parseShortNumber, scanAllServers } from 'helpers.js'\\nexport async function main(ns) { try { let result = \\\"\\\"; try { result = JSON.stringify(ns.stock.buy('BLD', 101)); } catch { }\\n        if (ns.read(\\\"/Temp/transact-stock.txt\\\") != result) await ns.write(\\\"/Temp/transact-stock.txt\\\", result, 'w'); } catch(err) { ns.tprint(String(err)); throw(err); } }\",\"filename\":\"/Temp/transact-stock.txt.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"helpers.js\",\"url\":\"blob:file:///c3f6198f-4bf9-464a-bbe2-4cb4a8d48f7c\",\"moduleSequenceNumber\":119},{\"filename\":\"/Temp/transact-stock.txt.js\",\"url\":\"blob:file:///e6ecd45d-8d4a-4f4d-95fb-7563dba2d7a5\",\"moduleSequenceNumber\":62163}],\"dependents\":[],\"ramUsage\":4.1,\"server\":\"home\",\"moduleSequenceNumber\":189,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"stock.buy\",\"cost\":2.5}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { formatMoney, formatNumberShort, formatDuration, parseShortNumber, scanAllServers } from 'helpers.js'\\nexport async function main(ns) { try { let result = \\\"\\\"; try { result = JSON.stringify(await ns.scp([\\\"/Remote/share.js\\\"], 'home', 'run4theh111z')); } catch { }\\n        if (ns.read(\\\"/Temp/copy-scripts.txt\\\") != result) await ns.write(\\\"/Temp/copy-scripts.txt\\\", result, 'w'); } catch(err) { ns.tprint(String(err)); throw(err); } }\",\"filename\":\"/Temp/copy-scripts.txt.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"helpers.js\",\"url\":\"blob:file:///e610c290-30f6-4587-9e37-ddafdd361830\",\"moduleSequenceNumber\":125},{\"filename\":\"/Temp/copy-scripts.txt.js\",\"url\":\"blob:file:///e31e8c22-427e-41cc-a68f-97cad0e7adc0\",\"moduleSequenceNumber\":331}],\"dependents\":[],\"ramUsage\":2.2,\"server\":\"home\",\"moduleSequenceNumber\":331,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { formatMoney, formatNumberShort, formatDuration, parseShortNumber, scanAllServers } from 'helpers.js'\\nexport async function main(ns) { try { ns.ps().filter(proc => proc.filename == 'stockmaster.js' && !proc.args.includes('-l') && !proc.args.includes('--liquidate')).forEach(proc => ns.kill(proc.pid)); } catch(err) { ns.tprint(String(err)); throw(err); } }\",\"filename\":\"/Temp/kill-script.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"helpers.js\",\"url\":\"blob:https://danielyxie.github.io/ac818120-5c1f-45c4-8ff0-07f14e951334\",\"moduleSequenceNumber\":494},{\"filename\":\"/Temp/kill-script.js\",\"url\":\"blob:https://danielyxie.github.io/29773456-5eed-4a96-96f7-2e7fd984a4cb\",\"moduleSequenceNumber\":2001}],\"dependents\":[],\"ramUsage\":2.3,\"server\":\"home\",\"moduleSequenceNumber\":191,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"ps\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"kill\",\"cost\":0.5}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { formatMoney, formatNumberShort, formatDuration, parseShortNumber, scanAllServers } from 'helpers.js'\\nexport async function main(ns) { try { [\\\"Speakers for the Dead\\\",\\\"The Dark Army\\\",\\\"The Syndicate\\\",\\\"Slum Snakes\\\",\\\"NiteSec\\\",\\\"The Black Hand\\\"].forEach(g => ns.gang.createGang(g)); } catch(err) { ns.tprint(String(err)); throw(err); } }\",\"filename\":\"/Temp/gang-createGang.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"helpers.js\",\"url\":\"blob:file:///928c1e67-0596-4473-bd30-d109d8befaa6\",\"moduleSequenceNumber\":116},{\"filename\":\"/Temp/gang-createGang.js\",\"url\":\"blob:file:///bd449329-561d-4edf-b532-9a9babcb35e4\",\"moduleSequenceNumber\":240}],\"dependents\":[],\"ramUsage\":2.6,\"server\":\"home\",\"moduleSequenceNumber\":192,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"gang.createGang\",\"cost\":1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { formatMoney, formatNumberShort, formatDuration, parseShortNumber, scanAllServers } from 'helpers.js'\\nexport async function main(ns) { try { let result = \\\"\\\"; try { result = JSON.stringify(Object.fromEntries([\\\"Illuminati\\\",\\\"Daedalus\\\",\\\"The Covenant\\\",\\\"ECorp\\\",\\\"MegaCorp\\\",\\\"Bachman & Associates\\\",\\\"Blade Industries\\\",\\\"NWO\\\",\\\"Clarke Incorporated\\\",\\\"OmniTek Incorporated\\\",\\\"Four Sigma\\\",\\\"KuaiGong International\\\",\\\"Fulcrum Secret Technologies\\\",\\\"BitRunners\\\",\\\"The Black Hand\\\",\\\"NiteSec\\\",\\\"Aevum\\\",\\\"Chongqing\\\",\\\"Ishima\\\",\\\"New Tokyo\\\",\\\"Sector-12\\\",\\\"Volhaven\\\",\\\"Speakers for the Dead\\\",\\\"The Dark Army\\\",\\\"The Syndicate\\\",\\\"Silhouette\\\",\\\"Tetrads\\\",\\\"Slum Snakes\\\",\\\"Netburners\\\",\\\"Tian Di Hui\\\",\\\"CyberSec\\\"].map(o => [o, ns.getAugmentationsFromFaction(o)]))); } catch { }\\n        if (ns.read(\\\"/Temp/faction-augs.txt\\\") != result) await ns.write(\\\"/Temp/faction-augs.txt\\\", result, 'w'); } catch(err) { ns.tprint(String(err)); throw(err); } }\",\"filename\":\"/Temp/faction-augs.txt.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"helpers.js\",\"url\":\"blob:file:///b64d57a1-86a8-4cb9-a194-0d14d203cef8\",\"moduleSequenceNumber\":125},{\"filename\":\"/Temp/faction-augs.txt.js\",\"url\":\"blob:file:///466dbb5d-8a33-42d6-b494-5acfb5b313bc\",\"moduleSequenceNumber\":286}],\"dependents\":[],\"ramUsage\":6.6,\"server\":\"home\",\"moduleSequenceNumber\":286,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getAugmentationsFromFaction\",\"cost\":5}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { formatMoney, formatNumberShort, formatDuration, parseShortNumber, scanAllServers } from 'helpers.js'\\nexport async function main(ns) { try { let result = \\\"\\\"; try { result = JSON.stringify(Object.fromEntries([\\\"Artificial Bio-neural Network Implant\\\",\\\"Enhanced Myelin Sheathing\\\",\\\"DataJack\\\",\\\"Embedded Netburner Module\\\",\\\"Embedded Netburner Module Core Implant\\\",\\\"Embedded Netburner Module Core V2 Upgrade\\\",\\\"Neural Accelerator\\\",\\\"Cranial Signal Processors - Gen III\\\",\\\"Cranial Signal Processors - Gen IV\\\",\\\"Cranial Signal Processors - Gen V\\\",\\\"NeuroFlux Governor\\\",\\\"Neurotrainer II\\\",\\\"BitRunners Neurolink\\\",\\\"Artificial Synaptic Potentiation\\\",\\\"Neuralstimulator\\\",\\\"The Black Hand\\\",\\\"BitWire\\\",\\\"Neural-Retention Enhancement\\\",\\\"Cranial Signal Processors - Gen II\\\",\\\"CRTX42-AA Gene Modification\\\",\\\"Synaptic Enhancement Implant\\\",\\\"Cranial Signal Processors - Gen I\\\",\\\"Neurotrainer I\\\",\\\"Hacknet Node CPU Architecture Neural-Upload\\\",\\\"Hacknet Node Cache Architecture Neural-Upload\\\",\\\"Hacknet Node NIC Architecture Neural-Upload\\\",\\\"Hacknet Node Kernel Direct-Neural Interface\\\",\\\"Hacknet Node Core Direct-Neural Interface\\\",\\\"Nanofiber Weave\\\",\\\"Wired Reflexes\\\",\\\"Speech Processor Implant\\\",\\\"Nuoptimal Nootropic Injector Implant\\\",\\\"Speech Enhancement\\\",\\\"ADR-V1 Pheromone Gene\\\",\\\"Social Negotiation Assistant (S.N.A)\\\",\\\"Neuroreceptor Management Implant\\\",\\\"Augmented Targeting I\\\",\\\"Augmented Targeting II\\\",\\\"CashRoot Starter Kit\\\",\\\"Neuregen Gene Modification\\\",\\\"NutriGen Implant\\\",\\\"Combat Rib I\\\",\\\"INFRARET Enhancement\\\",\\\"PCMatrix\\\",\\\"Combat Rib II\\\",\\\"DermaForce Particle Barrier\\\",\\\"Unstable Circadian Modulator\\\",\\\"HemoRecirculator\\\",\\\"Augmented Targeting III\\\",\\\"Synthetic Heart\\\",\\\"Synfibril Muscle\\\",\\\"Combat Rib III\\\",\\\"NEMEAN Subdermal Weave\\\",\\\"Graphene Bone Lacings\\\",\\\"Bionic Spine\\\",\\\"Graphene Bionic Spine Upgrade\\\",\\\"Bionic Legs\\\",\\\"Graphene Bionic Legs Upgrade\\\",\\\"TITN-41 Gene-Modification Injection\\\",\\\"Enhanced Social Interaction Implant\\\",\\\"Embedded Netburner Module Core V3 Upgrade\\\",\\\"Embedded Netburner Module Analyze Engine\\\",\\\"Embedded Netburner Module Direct Memory Access Upgrade\\\",\\\"Neuronal Densification\\\",\\\"FocusWire\\\",\\\"PC Direct-Neural Interface\\\",\\\"PC Direct-Neural Interface Optimization Submodule\\\",\\\"PC Direct-Neural Interface NeuroNet Injector\\\",\\\"ADR-V2 Pheromone Gene\\\",\\\"The Shadow's Simulacrum\\\",\\\"Neurotrainer III\\\",\\\"HyperSight Corneal Implant\\\",\\\"LuminCloaking-V1 Skin Implant\\\",\\\"LuminCloaking-V2 Skin Implant\\\",\\\"SmartSonar Implant\\\",\\\"Power Recirculation Core\\\",\\\"QLink\\\",\\\"SPTN-97 Gene Modification\\\",\\\"ECorp HVMind Implant\\\",\\\"CordiARC Fusion Reactor\\\",\\\"SmartJaw\\\",\\\"Neotra\\\",\\\"Xanipher\\\",\\\"Hydroflame Left Arm\\\",\\\"nextSENS Gene Modification\\\",\\\"OmniTek InfoLoad\\\",\\\"Photosynthetic Cells\\\",\\\"Graphene BrachiBlades Upgrade\\\",\\\"Graphene Bionic Arms Upgrade\\\",\\\"BrachiBlades\\\",\\\"Bionic Arms\\\"].map(aug => [aug, ns.getAugmentationRepReq(aug)]))); } catch { }\\n        if (ns.read(\\\"/Temp/aug-repreqs.txt\\\") != result) await ns.write(\\\"/Temp/aug-repreqs.txt\\\", result, 'w'); } catch(err) { ns.tprint(String(err)); throw(err); } }\",\"filename\":\"/Temp/aug-repreqs.txt.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"helpers.js\",\"url\":\"blob:file:///9cf77846-9121-4823-852f-95a9dd25ccbd\",\"moduleSequenceNumber\":125},{\"filename\":\"/Temp/aug-repreqs.txt.js\",\"url\":\"blob:file:///f6eef289-b0cc-4e55-b9af-5d0b8040c1dd\",\"moduleSequenceNumber\":303}],\"dependents\":[],\"ramUsage\":4.1,\"server\":\"home\",\"moduleSequenceNumber\":303,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getAugmentationRepReq\",\"cost\":2.5}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { formatMoney, formatNumberShort, formatDuration, parseShortNumber, scanAllServers } from 'helpers.js'\\nexport async function main(ns) { try { let result = \\\"\\\"; try { result = JSON.stringify(Object.fromEntries([\\\"Artificial Bio-neural Network Implant\\\",\\\"Enhanced Myelin Sheathing\\\",\\\"DataJack\\\",\\\"Embedded Netburner Module\\\",\\\"Embedded Netburner Module Core Implant\\\",\\\"Embedded Netburner Module Core V2 Upgrade\\\",\\\"Neural Accelerator\\\",\\\"Cranial Signal Processors - Gen III\\\",\\\"Cranial Signal Processors - Gen IV\\\",\\\"Cranial Signal Processors - Gen V\\\",\\\"NeuroFlux Governor\\\",\\\"Neurotrainer II\\\",\\\"BitRunners Neurolink\\\",\\\"Artificial Synaptic Potentiation\\\",\\\"Neuralstimulator\\\",\\\"The Black Hand\\\",\\\"BitWire\\\",\\\"Neural-Retention Enhancement\\\",\\\"Cranial Signal Processors - Gen II\\\",\\\"CRTX42-AA Gene Modification\\\",\\\"Synaptic Enhancement Implant\\\",\\\"Cranial Signal Processors - Gen I\\\",\\\"Neurotrainer I\\\",\\\"Hacknet Node CPU Architecture Neural-Upload\\\",\\\"Hacknet Node Cache Architecture Neural-Upload\\\",\\\"Hacknet Node NIC Architecture Neural-Upload\\\",\\\"Hacknet Node Kernel Direct-Neural Interface\\\",\\\"Hacknet Node Core Direct-Neural Interface\\\",\\\"Nanofiber Weave\\\",\\\"Wired Reflexes\\\",\\\"Speech Processor Implant\\\",\\\"Nuoptimal Nootropic Injector Implant\\\",\\\"Speech Enhancement\\\",\\\"ADR-V1 Pheromone Gene\\\",\\\"Social Negotiation Assistant (S.N.A)\\\",\\\"Neuroreceptor Management Implant\\\",\\\"Augmented Targeting I\\\",\\\"Augmented Targeting II\\\",\\\"CashRoot Starter Kit\\\",\\\"Neuregen Gene Modification\\\",\\\"NutriGen Implant\\\",\\\"Combat Rib I\\\",\\\"INFRARET Enhancement\\\",\\\"PCMatrix\\\",\\\"Combat Rib II\\\",\\\"DermaForce Particle Barrier\\\",\\\"Unstable Circadian Modulator\\\",\\\"HemoRecirculator\\\",\\\"Augmented Targeting III\\\",\\\"Synthetic Heart\\\",\\\"Synfibril Muscle\\\",\\\"Combat Rib III\\\",\\\"NEMEAN Subdermal Weave\\\",\\\"Graphene Bone Lacings\\\",\\\"Bionic Spine\\\",\\\"Graphene Bionic Spine Upgrade\\\",\\\"Bionic Legs\\\",\\\"Graphene Bionic Legs Upgrade\\\",\\\"TITN-41 Gene-Modification Injection\\\",\\\"Enhanced Social Interaction Implant\\\",\\\"Embedded Netburner Module Core V3 Upgrade\\\",\\\"Embedded Netburner Module Analyze Engine\\\",\\\"Embedded Netburner Module Direct Memory Access Upgrade\\\",\\\"Neuronal Densification\\\",\\\"FocusWire\\\",\\\"PC Direct-Neural Interface\\\",\\\"PC Direct-Neural Interface Optimization Submodule\\\",\\\"PC Direct-Neural Interface NeuroNet Injector\\\",\\\"ADR-V2 Pheromone Gene\\\",\\\"The Shadow's Simulacrum\\\",\\\"Neurotrainer III\\\",\\\"HyperSight Corneal Implant\\\",\\\"LuminCloaking-V1 Skin Implant\\\",\\\"LuminCloaking-V2 Skin Implant\\\",\\\"SmartSonar Implant\\\",\\\"Power Recirculation Core\\\",\\\"QLink\\\",\\\"SPTN-97 Gene Modification\\\",\\\"ECorp HVMind Implant\\\",\\\"CordiARC Fusion Reactor\\\",\\\"SmartJaw\\\",\\\"Neotra\\\",\\\"Xanipher\\\",\\\"Hydroflame Left Arm\\\",\\\"nextSENS Gene Modification\\\",\\\"OmniTek InfoLoad\\\",\\\"Photosynthetic Cells\\\",\\\"Graphene BrachiBlades Upgrade\\\",\\\"Graphene Bionic Arms Upgrade\\\",\\\"BrachiBlades\\\",\\\"Bionic Arms\\\"].map(aug => [aug, ns.getAugmentationStats(aug)]))); } catch { }\\n        if (ns.read(\\\"/Temp/aug-stats.txt\\\") != result) await ns.write(\\\"/Temp/aug-stats.txt\\\", result, 'w'); } catch(err) { ns.tprint(String(err)); throw(err); } }\",\"filename\":\"/Temp/aug-stats.txt.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"helpers.js\",\"url\":\"blob:file:///b18ab37d-3e50-45d8-a315-3eee05077d8f\",\"moduleSequenceNumber\":125},{\"filename\":\"/Temp/aug-stats.txt.js\",\"url\":\"blob:file:///0909b162-9573-4c71-b11f-bb76a877aa4f\",\"moduleSequenceNumber\":308}],\"dependents\":[],\"ramUsage\":6.6,\"server\":\"home\",\"moduleSequenceNumber\":308,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getAugmentationStats\",\"cost\":5}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { formatMoney, formatNumberShort, formatDuration, parseShortNumber, scanAllServers } from 'helpers.js'\\nexport async function main(ns) { try { let result = \\\"\\\"; try { result = JSON.stringify(Object.fromEntries([\\\"Illuminati\\\",\\\"Daedalus\\\",\\\"The Covenant\\\",\\\"ECorp\\\",\\\"MegaCorp\\\",\\\"Bachman & Associates\\\",\\\"Blade Industries\\\",\\\"NWO\\\",\\\"Clarke Incorporated\\\",\\\"OmniTek Incorporated\\\",\\\"Four Sigma\\\",\\\"KuaiGong International\\\",\\\"Fulcrum Secret Technologies\\\",\\\"BitRunners\\\",\\\"The Black Hand\\\",\\\"NiteSec\\\",\\\"Aevum\\\",\\\"Chongqing\\\",\\\"Ishima\\\",\\\"New Tokyo\\\",\\\"Sector-12\\\",\\\"Volhaven\\\",\\\"Speakers for the Dead\\\",\\\"The Dark Army\\\",\\\"The Syndicate\\\",\\\"Silhouette\\\",\\\"Tetrads\\\",\\\"Slum Snakes\\\",\\\"Netburners\\\",\\\"Tian Di Hui\\\",\\\"CyberSec\\\"].map(o => [o, ns.getFactionFavor(o)]))); } catch { }\\n        if (ns.read(\\\"/Temp/faction-favor.txt\\\") != result) await ns.write(\\\"/Temp/faction-favor.txt\\\", result, 'w'); } catch(err) { ns.tprint(String(err)); throw(err); } }\",\"filename\":\"/Temp/faction-favor.txt.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"helpers.js\",\"url\":\"blob:file:///6cc5dc86-27f4-449e-bf53-dec70a4708da\",\"moduleSequenceNumber\":125},{\"filename\":\"/Temp/faction-favor.txt.js\",\"url\":\"blob:file:///67fa1094-bc4a-45e7-996d-4064bdd4a0a1\",\"moduleSequenceNumber\":301}],\"dependents\":[],\"ramUsage\":2.6,\"server\":\"home\",\"moduleSequenceNumber\":301,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getFactionFavor\",\"cost\":1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { formatMoney, formatNumberShort, formatDuration, parseShortNumber, scanAllServers } from 'helpers.js'\\nexport async function main(ns) { try { let result = \\\"\\\"; try { result = JSON.stringify(ns.getOwnedAugmentations(true)); } catch { }\\n        if (ns.read(\\\"/Temp/player-augs-purchased.txt\\\") != result) await ns.write(\\\"/Temp/player-augs-purchased.txt\\\", result, 'w'); } catch(err) { ns.tprint(String(err)); throw(err); } }\",\"filename\":\"/Temp/player-augs-purchased.txt.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"helpers.js\",\"url\":\"blob:file:///43b825c1-1e20-49fb-976d-0b6bd0a8c965\",\"moduleSequenceNumber\":125},{\"filename\":\"/Temp/player-augs-purchased.txt.js\",\"url\":\"blob:file:///a9521640-0e0a-4e67-9541-04fbe518c40a\",\"moduleSequenceNumber\":252}],\"dependents\":[],\"ramUsage\":6.6,\"server\":\"home\",\"moduleSequenceNumber\":252,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getOwnedAugmentations\",\"cost\":5}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { formatMoney, formatNumberShort, formatDuration, parseShortNumber, scanAllServers } from 'helpers.js'\\nexport async function main(ns) { try { let result = \\\"\\\"; try { result = JSON.stringify(ns.getOwnedAugmentations()); } catch { }\\n        if (ns.read(\\\"/Temp/player-augs-installed.txt\\\") != result) await ns.write(\\\"/Temp/player-augs-installed.txt\\\", result, 'w'); } catch(err) { ns.tprint(String(err)); throw(err); } }\",\"filename\":\"/Temp/player-augs-installed.txt.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"helpers.js\",\"url\":\"blob:file:///d934c105-2559-41b7-a321-3a30f4df55d2\",\"moduleSequenceNumber\":125},{\"filename\":\"/Temp/player-augs-installed.txt.js\",\"url\":\"blob:file:///8efb8911-8c13-4bc2-b744-607f185d144e\",\"moduleSequenceNumber\":309}],\"dependents\":[],\"ramUsage\":6.6,\"server\":\"home\",\"moduleSequenceNumber\":309,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getOwnedAugmentations\",\"cost\":5}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { formatMoney, formatNumberShort, formatDuration, parseShortNumber, scanAllServers } from 'helpers.js'\\nexport async function main(ns) { try { let result = \\\"\\\"; try { result = JSON.stringify(ns.checkFactionInvitations()); } catch { }\\n        if (ns.read(\\\"/Temp/player-faction-invites.txt\\\") != result) await ns.write(\\\"/Temp/player-faction-invites.txt\\\", result, 'w'); } catch(err) { ns.tprint(String(err)); throw(err); } }\",\"filename\":\"/Temp/player-faction-invites.txt.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"helpers.js\",\"url\":\"blob:file:///e6fd0876-be1a-4181-9efb-29b74acc9bf0\",\"moduleSequenceNumber\":125},{\"filename\":\"/Temp/player-faction-invites.txt.js\",\"url\":\"blob:file:///547b97be-a2ba-446f-964d-b01c07afddc8\",\"moduleSequenceNumber\":280}],\"dependents\":[],\"ramUsage\":4.6,\"server\":\"home\",\"moduleSequenceNumber\":280,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"checkFactionInvitations\",\"cost\":3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { formatMoney, formatNumberShort, formatDuration, parseShortNumber, scanAllServers } from 'helpers.js'\\nexport async function main(ns) { try { let result = \\\"\\\"; try { result = JSON.stringify(Object.fromEntries([\\\"heist\\\",\\\"assassinate\\\",\\\"homicide\\\",\\\"mug\\\"].map(c => [c, ns.getCrimeChance(c)]))); } catch { }\\n        if (ns.read(\\\"/Temp/crime-chances.txt\\\") != result) await ns.write(\\\"/Temp/crime-chances.txt\\\", result, 'w'); } catch(err) { ns.tprint(String(err)); throw(err); } }\",\"filename\":\"/Temp/crime-chances.txt.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"helpers.js\",\"url\":\"blob:file:///7ed3a9c3-bf94-4bce-83d4-ee10d0d3f688\",\"moduleSequenceNumber\":119},{\"filename\":\"/Temp/crime-chances.txt.js\",\"url\":\"blob:file:///874b1249-c76a-45e9-b5ad-b5ab4cf69b42\",\"moduleSequenceNumber\":12888}],\"dependents\":[],\"ramUsage\":6.6,\"server\":\"home\",\"moduleSequenceNumber\":200,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getCrimeChance\",\"cost\":5}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { formatMoney, formatNumberShort, formatDuration, parseShortNumber, scanAllServers } from 'helpers.js'\\nexport async function main(ns) { try { let result = \\\"\\\"; try { result = JSON.stringify(ns.commitCrime('homicide')); } catch { }\\n        if (ns.read(\\\"/Temp/crime-time.txt\\\") != result) await ns.write(\\\"/Temp/crime-time.txt\\\", result, 'w'); } catch(err) { ns.tprint(String(err)); throw(err); } }\",\"filename\":\"/Temp/crime-time.txt.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"helpers.js\",\"url\":\"blob:file:///b85e3c4f-8958-4d29-804c-07977d719b70\",\"moduleSequenceNumber\":119},{\"filename\":\"/Temp/crime-time.txt.js\",\"url\":\"blob:file:///8954bdee-5886-456d-bd98-4a1cf0a739b2\",\"moduleSequenceNumber\":12889}],\"dependents\":[],\"ramUsage\":6.6,\"server\":\"home\",\"moduleSequenceNumber\":201,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"commitCrime\",\"cost\":5}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { formatMoney, formatNumberShort, formatDuration, parseShortNumber, scanAllServers } from 'helpers.js'\\nexport async function main(ns) { try { let result = \\\"\\\"; try { result = JSON.stringify([\\\"n00dles\\\",\\\"foodnstuff\\\",\\\"sigma-cosmetics\\\",\\\"joesguns\\\",\\\"hong-fang-tea\\\",\\\"harakiri-sushi\\\",\\\"iron-gym\\\",\\\"darkweb\\\",\\\"zer0\\\",\\\"max-hardware\\\",\\\"nectar-net\\\",\\\"CSEC\\\",\\\"silver-helix\\\",\\\"neo-net\\\",\\\"phantasy\\\",\\\"omega-net\\\",\\\"netlink\\\",\\\"crush-fitness\\\",\\\"comptek\\\",\\\"the-hub\\\",\\\"johnson-ortho\\\",\\\"avmnite-02h\\\",\\\"rothman-uni\\\",\\\"catalyst\\\",\\\"summit-uni\\\",\\\"zb-institute\\\",\\\"I.I.I.I\\\",\\\"syscore\\\",\\\"lexo-corp\\\",\\\"alpha-ent\\\",\\\"rho-construction\\\",\\\"millenium-fitness\\\",\\\"aevum-police\\\",\\\"galactic-cyber\\\",\\\"aerocorp\\\",\\\"snap-fitness\\\",\\\"global-pharm\\\",\\\"omnia\\\",\\\"deltaone\\\",\\\"unitalife\\\",\\\"univ-energy\\\",\\\"solaris\\\",\\\"defcomm\\\",\\\"icarus\\\",\\\"zeus-med\\\",\\\"zb-def\\\",\\\"infocomm\\\",\\\"taiyang-digital\\\",\\\"nova-med\\\",\\\"titan-labs\\\",\\\"applied-energetics\\\",\\\"run4theh111z\\\",\\\"microdyne\\\",\\\"vitalife\\\",\\\"fulcrumtech\\\",\\\"stormtech\\\",\\\"helios\\\",\\\"omnitek\\\",\\\".\\\",\\\"4sigma\\\",\\\"kuai-gong\\\",\\\"b-and-a\\\",\\\"powerhouse-fitness\\\",\\\"blade\\\",\\\"nwo\\\",\\\"clarkinc\\\",\\\"fulcrumassets\\\",\\\"megacorp\\\",\\\"ecorp\\\",\\\"The-Cave\\\"].filter(s => !ns.getServer(s).backdoorInstalled)); } catch { }\\n        if (ns.read(\\\"/Temp/servers-to-backdoor.txt\\\") != result) await ns.write(\\\"/Temp/servers-to-backdoor.txt\\\", result, 'w'); } catch(err) { ns.tprint(String(err)); throw(err); } }\",\"filename\":\"/Temp/servers-to-backdoor.txt.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"helpers.js\",\"url\":\"blob:file:///b89682c1-4ff4-4a88-bacc-76b6c14429f9\",\"moduleSequenceNumber\":125},{\"filename\":\"/Temp/servers-to-backdoor.txt.js\",\"url\":\"blob:file:///595012bf-390e-4981-9800-e335e071ad9b\",\"moduleSequenceNumber\":276}],\"dependents\":[],\"ramUsage\":3.6,\"server\":\"home\",\"moduleSequenceNumber\":276,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { formatMoney, formatNumberShort, formatDuration, parseShortNumber, scanAllServers } from 'helpers.js'\\nexport async function main(ns) { try { let result = \\\"\\\"; try { result = JSON.stringify(Object.fromEntries([\\\"BitRunners\\\",\\\"The Black Hand\\\",\\\"NiteSec\\\",\\\"CyberSec\\\",\\\"Netburners\\\",\\\"Tian Di Hui\\\",\\\"Sector-12\\\",\\\"Chongqing\\\",\\\"New Tokyo\\\",\\\"Ishima\\\",\\\"Aevum\\\",\\\"Volhaven\\\",\\\"Slum Snakes\\\",\\\"Tetrads\\\",\\\"Bachman & Associates\\\",\\\"Fulcrum Secret Technologies\\\",\\\"ECorp\\\",\\\"The Dark Army\\\",\\\"Clarke Incorporated\\\",\\\"OmniTek Incorporated\\\",\\\"NWO\\\",\\\"Blade Industries\\\",\\\"MegaCorp\\\",\\\"KuaiGong International\\\",\\\"Four Sigma\\\",\\\"Silhouette\\\",\\\"Speakers for the Dead\\\",\\\"The Syndicate\\\"].map(faction => [faction, ns.getFactionRep(faction)]))); } catch { }\\n        if (ns.read(\\\"/Temp/faction-rep.txt\\\") != result) await ns.write(\\\"/Temp/faction-rep.txt\\\", result, 'w'); } catch(err) { ns.tprint(String(err)); throw(err); } }\",\"filename\":\"/Temp/faction-rep.txt.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"helpers.js\",\"url\":\"blob:file:///7166e6fb-d345-4cdb-8591-c843ea490d48\",\"moduleSequenceNumber\":125},{\"filename\":\"/Temp/faction-rep.txt.js\",\"url\":\"blob:file:///b7881a72-4288-4e37-82c7-0dd38f13b05c\",\"moduleSequenceNumber\":287}],\"dependents\":[],\"ramUsage\":2.6,\"server\":\"home\",\"moduleSequenceNumber\":287,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getFactionRep\",\"cost\":1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { formatMoney, formatNumberShort, formatDuration, parseShortNumber, scanAllServers } from 'helpers.js'\\nexport async function main(ns) { try { let result = \\\"\\\"; try { result = JSON.stringify(ns.gang.inGang() ? ns.gang.getGangInformation().faction : false); } catch { }\\n        if (ns.read(\\\"/Temp/gang-faction.txt\\\") != result) await ns.write(\\\"/Temp/gang-faction.txt\\\", result, 'w'); } catch(err) { ns.tprint(String(err)); throw(err); } }\",\"filename\":\"/Temp/gang-faction.txt.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"helpers.js\",\"url\":\"blob:file:///5b011902-9654-4a71-9003-6b99f6499424\",\"moduleSequenceNumber\":125},{\"filename\":\"/Temp/gang-faction.txt.js\",\"url\":\"blob:file:///cbe64474-be99-4a4e-b82a-1570d8ac23b3\",\"moduleSequenceNumber\":293}],\"dependents\":[],\"ramUsage\":4.6,\"server\":\"home\",\"moduleSequenceNumber\":293,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"gang.inGang\",\"cost\":1},{\"type\":\"fn\",\"name\":\"gang.getGangInformation\",\"cost\":2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { formatMoney, formatNumberShort, formatDuration, parseShortNumber, scanAllServers } from 'helpers.js'\\nexport async function main(ns) { try { let result = \\\"\\\"; try { result = JSON.stringify(Object.fromEntries([\\\"Artificial Bio-neural Network Implant\\\",\\\"Enhanced Myelin Sheathing\\\",\\\"DataJack\\\",\\\"Embedded Netburner Module\\\",\\\"Embedded Netburner Module Core Implant\\\",\\\"Embedded Netburner Module Core V2 Upgrade\\\",\\\"Neural Accelerator\\\",\\\"Cranial Signal Processors - Gen III\\\",\\\"Cranial Signal Processors - Gen IV\\\",\\\"Cranial Signal Processors - Gen V\\\",\\\"NeuroFlux Governor\\\",\\\"Neurotrainer II\\\",\\\"BitRunners Neurolink\\\",\\\"Artificial Synaptic Potentiation\\\",\\\"Neuralstimulator\\\",\\\"The Black Hand\\\",\\\"BitWire\\\",\\\"Neural-Retention Enhancement\\\",\\\"Cranial Signal Processors - Gen II\\\",\\\"CRTX42-AA Gene Modification\\\",\\\"Synaptic Enhancement Implant\\\",\\\"Cranial Signal Processors - Gen I\\\",\\\"Neurotrainer I\\\",\\\"Hacknet Node CPU Architecture Neural-Upload\\\",\\\"Hacknet Node Cache Architecture Neural-Upload\\\",\\\"Hacknet Node NIC Architecture Neural-Upload\\\",\\\"Hacknet Node Kernel Direct-Neural Interface\\\",\\\"Hacknet Node Core Direct-Neural Interface\\\",\\\"Nanofiber Weave\\\",\\\"Wired Reflexes\\\",\\\"Speech Processor Implant\\\",\\\"Nuoptimal Nootropic Injector Implant\\\",\\\"Speech Enhancement\\\",\\\"ADR-V1 Pheromone Gene\\\",\\\"Social Negotiation Assistant (S.N.A)\\\",\\\"Neuroreceptor Management Implant\\\",\\\"Augmented Targeting I\\\",\\\"Augmented Targeting II\\\",\\\"CashRoot Starter Kit\\\",\\\"Neuregen Gene Modification\\\",\\\"NutriGen Implant\\\",\\\"Combat Rib I\\\",\\\"INFRARET Enhancement\\\",\\\"PCMatrix\\\",\\\"Combat Rib II\\\",\\\"DermaForce Particle Barrier\\\",\\\"Unstable Circadian Modulator\\\",\\\"HemoRecirculator\\\",\\\"Augmented Targeting III\\\",\\\"Synthetic Heart\\\",\\\"Synfibril Muscle\\\",\\\"Combat Rib III\\\",\\\"NEMEAN Subdermal Weave\\\",\\\"Graphene Bone Lacings\\\",\\\"Bionic Spine\\\",\\\"Graphene Bionic Spine Upgrade\\\",\\\"Bionic Legs\\\",\\\"Graphene Bionic Legs Upgrade\\\",\\\"TITN-41 Gene-Modification Injection\\\",\\\"Enhanced Social Interaction Implant\\\",\\\"Embedded Netburner Module Core V3 Upgrade\\\",\\\"Embedded Netburner Module Analyze Engine\\\",\\\"Embedded Netburner Module Direct Memory Access Upgrade\\\",\\\"Neuronal Densification\\\",\\\"FocusWire\\\",\\\"PC Direct-Neural Interface\\\",\\\"PC Direct-Neural Interface Optimization Submodule\\\",\\\"PC Direct-Neural Interface NeuroNet Injector\\\",\\\"ADR-V2 Pheromone Gene\\\",\\\"The Shadow's Simulacrum\\\",\\\"Neurotrainer III\\\",\\\"HyperSight Corneal Implant\\\",\\\"LuminCloaking-V1 Skin Implant\\\",\\\"LuminCloaking-V2 Skin Implant\\\",\\\"SmartSonar Implant\\\",\\\"Power Recirculation Core\\\",\\\"QLink\\\",\\\"SPTN-97 Gene Modification\\\",\\\"ECorp HVMind Implant\\\",\\\"CordiARC Fusion Reactor\\\",\\\"SmartJaw\\\",\\\"Neotra\\\",\\\"Xanipher\\\",\\\"Hydroflame Left Arm\\\",\\\"nextSENS Gene Modification\\\",\\\"OmniTek InfoLoad\\\",\\\"Photosynthetic Cells\\\",\\\"Graphene BrachiBlades Upgrade\\\",\\\"Graphene Bionic Arms Upgrade\\\",\\\"BrachiBlades\\\",\\\"Bionic Arms\\\"].map(aug => [aug, ns.getAugmentationPrice(aug)]))); } catch { }\\n        if (ns.read(\\\"/Temp/aug-prices.txt\\\") != result) await ns.write(\\\"/Temp/aug-prices.txt\\\", result, 'w'); } catch(err) { ns.tprint(String(err)); throw(err); } }\",\"filename\":\"/Temp/aug-prices.txt.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"helpers.js\",\"url\":\"blob:file:///8a61d8ef-e9ea-4bbe-85c5-4ac975447d7a\",\"moduleSequenceNumber\":125},{\"filename\":\"/Temp/aug-prices.txt.js\",\"url\":\"blob:file:///1f72400c-4279-482b-a648-cc6ca9773791\",\"moduleSequenceNumber\":305}],\"dependents\":[],\"ramUsage\":4.1,\"server\":\"home\",\"moduleSequenceNumber\":305,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getAugmentationPrice\",\"cost\":2.5}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { formatMoney, formatNumberShort, formatDuration, parseShortNumber, scanAllServers } from 'helpers.js'\\nexport async function main(ns) { try { let result = \\\"\\\"; try { result = JSON.stringify(Object.fromEntries([\\\"Artificial Bio-neural Network Implant\\\",\\\"Enhanced Myelin Sheathing\\\",\\\"DataJack\\\",\\\"Embedded Netburner Module\\\",\\\"Embedded Netburner Module Core Implant\\\",\\\"Embedded Netburner Module Core V2 Upgrade\\\",\\\"Neural Accelerator\\\",\\\"Cranial Signal Processors - Gen III\\\",\\\"Cranial Signal Processors - Gen IV\\\",\\\"Cranial Signal Processors - Gen V\\\",\\\"NeuroFlux Governor\\\",\\\"Neurotrainer II\\\",\\\"BitRunners Neurolink\\\",\\\"Artificial Synaptic Potentiation\\\",\\\"Neuralstimulator\\\",\\\"The Black Hand\\\",\\\"BitWire\\\",\\\"Neural-Retention Enhancement\\\",\\\"Cranial Signal Processors - Gen II\\\",\\\"CRTX42-AA Gene Modification\\\",\\\"Synaptic Enhancement Implant\\\",\\\"Cranial Signal Processors - Gen I\\\",\\\"Neurotrainer I\\\",\\\"Hacknet Node CPU Architecture Neural-Upload\\\",\\\"Hacknet Node Cache Architecture Neural-Upload\\\",\\\"Hacknet Node NIC Architecture Neural-Upload\\\",\\\"Hacknet Node Kernel Direct-Neural Interface\\\",\\\"Hacknet Node Core Direct-Neural Interface\\\",\\\"Nanofiber Weave\\\",\\\"Wired Reflexes\\\",\\\"Speech Processor Implant\\\",\\\"Nuoptimal Nootropic Injector Implant\\\",\\\"Speech Enhancement\\\",\\\"ADR-V1 Pheromone Gene\\\",\\\"Social Negotiation Assistant (S.N.A)\\\",\\\"Neuroreceptor Management Implant\\\",\\\"Augmented Targeting I\\\",\\\"Augmented Targeting II\\\",\\\"CashRoot Starter Kit\\\",\\\"Neuregen Gene Modification\\\",\\\"NutriGen Implant\\\",\\\"Combat Rib I\\\",\\\"INFRARET Enhancement\\\",\\\"PCMatrix\\\",\\\"Combat Rib II\\\",\\\"DermaForce Particle Barrier\\\",\\\"Unstable Circadian Modulator\\\",\\\"HemoRecirculator\\\",\\\"Augmented Targeting III\\\",\\\"Synthetic Heart\\\",\\\"Synfibril Muscle\\\",\\\"Combat Rib III\\\",\\\"NEMEAN Subdermal Weave\\\",\\\"Graphene Bone Lacings\\\",\\\"Bionic Spine\\\",\\\"Graphene Bionic Spine Upgrade\\\",\\\"Bionic Legs\\\",\\\"Graphene Bionic Legs Upgrade\\\",\\\"TITN-41 Gene-Modification Injection\\\",\\\"Enhanced Social Interaction Implant\\\",\\\"Embedded Netburner Module Core V3 Upgrade\\\",\\\"Embedded Netburner Module Analyze Engine\\\",\\\"Embedded Netburner Module Direct Memory Access Upgrade\\\",\\\"Neuronal Densification\\\",\\\"FocusWire\\\",\\\"PC Direct-Neural Interface\\\",\\\"PC Direct-Neural Interface Optimization Submodule\\\",\\\"PC Direct-Neural Interface NeuroNet Injector\\\",\\\"ADR-V2 Pheromone Gene\\\",\\\"The Shadow's Simulacrum\\\",\\\"Neurotrainer III\\\",\\\"HyperSight Corneal Implant\\\",\\\"LuminCloaking-V1 Skin Implant\\\",\\\"LuminCloaking-V2 Skin Implant\\\",\\\"SmartSonar Implant\\\",\\\"Power Recirculation Core\\\",\\\"QLink\\\",\\\"SPTN-97 Gene Modification\\\",\\\"ECorp HVMind Implant\\\",\\\"CordiARC Fusion Reactor\\\",\\\"SmartJaw\\\",\\\"Neotra\\\",\\\"Xanipher\\\",\\\"Hydroflame Left Arm\\\",\\\"nextSENS Gene Modification\\\",\\\"OmniTek InfoLoad\\\",\\\"Photosynthetic Cells\\\",\\\"Graphene BrachiBlades Upgrade\\\",\\\"Graphene Bionic Arms Upgrade\\\",\\\"BrachiBlades\\\",\\\"Bionic Arms\\\"].map(aug => [aug, ns.getAugmentationPrereq(aug)]))); } catch { }\\n        if (ns.read(\\\"/Temp/aug-prereqs.txt\\\") != result) await ns.write(\\\"/Temp/aug-prereqs.txt\\\", result, 'w'); } catch(err) { ns.tprint(String(err)); throw(err); } }\",\"filename\":\"/Temp/aug-prereqs.txt.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"helpers.js\",\"url\":\"blob:file:///85cd1fa9-f9af-44ee-bcc4-be6e88321889\",\"moduleSequenceNumber\":125},{\"filename\":\"/Temp/aug-prereqs.txt.js\",\"url\":\"blob:file:///416ac288-470d-4d5d-be9f-9673ef660b3f\",\"moduleSequenceNumber\":310}],\"dependents\":[],\"ramUsage\":6.6,\"server\":\"home\",\"moduleSequenceNumber\":310,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getAugmentationPrereq\",\"cost\":5}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { formatMoney, formatNumberShort, formatDuration, parseShortNumber, scanAllServers } from 'helpers.js'\\nexport async function main(ns) { try { let result = \\\"\\\"; try { result = JSON.stringify(ns.getBitNodeMultipliers()); } catch { }\\n        if (ns.read(\\\"/Temp/bitnode-multipliers.txt\\\") != result) await ns.write(\\\"/Temp/bitnode-multipliers.txt\\\", result, 'w'); } catch(err) { ns.tprint(String(err)); throw(err); } }\",\"filename\":\"/Temp/bitnode-multipliers.txt.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"helpers.js\",\"url\":\"blob:file:///f58e5013-ab82-4c60-99e0-30e4e18cc820\",\"moduleSequenceNumber\":125},{\"filename\":\"/Temp/bitnode-multipliers.txt.js\",\"url\":\"blob:file:///5b4ed2f0-2c3b-459a-b81a-5633053529ff\",\"moduleSequenceNumber\":265}],\"dependents\":[],\"ramUsage\":5.6,\"server\":\"home\",\"moduleSequenceNumber\":265,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getBitNodeMultipliers\",\"cost\":4}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { formatMoney, formatNumberShort, formatDuration, parseShortNumber, scanAllServers } from 'helpers.js'\\nexport async function main(ns) { try { let result = \\\"\\\"; try { result = JSON.stringify(ns.joinFaction('The Syndicate')); } catch { }\\n        if (ns.read(\\\"/Temp/join-faction.txt\\\") != result) await ns.write(\\\"/Temp/join-faction.txt\\\", result, 'w'); } catch(err) { ns.tprint(String(err)); throw(err); } }\",\"filename\":\"/Temp/join-faction.txt.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"helpers.js\",\"url\":\"blob:file:///1f79a73b-3f4b-4c46-8a05-da6da4c019b3\",\"moduleSequenceNumber\":119},{\"filename\":\"/Temp/join-faction.txt.js\",\"url\":\"blob:file:///8deb4c74-dad5-43f5-aeb3-cc334b3227f3\",\"moduleSequenceNumber\":49779}],\"dependents\":[],\"ramUsage\":4.6,\"server\":\"home\",\"moduleSequenceNumber\":208,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"joinFaction\",\"cost\":3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { formatMoney, formatNumberShort, formatDuration, parseShortNumber, scanAllServers } from 'helpers.js'\\nexport async function main(ns) { try { let result = \\\"\\\"; try { result = JSON.stringify(ns.getAugmentationsFromFaction('Slum Snakes')); } catch { }\\n        if (ns.read(\\\"/Temp/gang-augs.txt\\\") != result) await ns.write(\\\"/Temp/gang-augs.txt\\\", result, 'w'); } catch(err) { ns.tprint(String(err)); throw(err); } }\",\"filename\":\"/Temp/gang-augs.txt.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"helpers.js\",\"url\":\"blob:file:///9a5a5e6d-1486-46d5-9f2a-db467b868bf9\",\"moduleSequenceNumber\":125},{\"filename\":\"/Temp/gang-augs.txt.js\",\"url\":\"blob:file:///6bf31596-d527-47a4-b5e2-d93a36470ee8\",\"moduleSequenceNumber\":250}],\"dependents\":[],\"ramUsage\":6.6,\"server\":\"home\",\"moduleSequenceNumber\":250,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getAugmentationsFromFaction\",\"cost\":5}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { formatMoney, formatNumberShort, formatDuration, parseShortNumber, scanAllServers } from 'helpers.js'\\nexport async function main(ns) { try { let result = \\\"\\\"; try { result = JSON.stringify(ns.gang.canRecruitMember() && ns.gang.recruitMember('Thug 11')); } catch { }\\n        if (ns.read(\\\"/Temp/gang-recruit-member.txt\\\") != result) await ns.write(\\\"/Temp/gang-recruit-member.txt\\\", result, 'w'); } catch(err) { ns.tprint(String(err)); throw(err); } }\",\"filename\":\"/Temp/gang-recruit-member.txt.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"helpers.js\",\"url\":\"blob:file:///8f4e7bfc-64f7-49d1-826f-16b4c6ac3ada\",\"moduleSequenceNumber\":119},{\"filename\":\"/Temp/gang-recruit-member.txt.js\",\"url\":\"blob:file:///c2a6cc1c-e630-4142-b386-2599a9ecf5f4\",\"moduleSequenceNumber\":38941}],\"dependents\":[],\"ramUsage\":4.6,\"server\":\"home\",\"moduleSequenceNumber\":210,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"gang.canRecruitMember\",\"cost\":1},{\"type\":\"fn\",\"name\":\"gang.recruitMember\",\"cost\":2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { formatMoney, formatNumberShort, formatDuration, parseShortNumber, scanAllServers } from 'helpers.js'\\nexport async function main(ns) { try { let result = \\\"\\\"; try { result = JSON.stringify(ns.getFactionRep('Slum Snakes')); } catch { }\\n        if (ns.read(\\\"/Temp/gang-faction-rep.txt\\\") != result) await ns.write(\\\"/Temp/gang-faction-rep.txt\\\", result, 'w'); } catch(err) { ns.tprint(String(err)); throw(err); } }\",\"filename\":\"/Temp/gang-faction-rep.txt.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"helpers.js\",\"url\":\"blob:file:///9d8c54e4-7edf-48be-9ce3-43aa8bf41cce\",\"moduleSequenceNumber\":125},{\"filename\":\"/Temp/gang-faction-rep.txt.js\",\"url\":\"blob:file:///51ba412b-075e-41bd-8f0d-c1336aaf5dbf\",\"moduleSequenceNumber\":295}],\"dependents\":[],\"ramUsage\":2.6,\"server\":\"home\",\"moduleSequenceNumber\":295,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getFactionRep\",\"cost\":1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { formatMoney, formatNumberShort, formatDuration, parseShortNumber, scanAllServers } from 'helpers.js'\\nexport async function main(ns) { try { let result = \\\"\\\"; try { result = JSON.stringify(Object.keys(ns.gang.getOtherGangInformation())); } catch { }\\n        if (ns.read(\\\"/Temp/gang-names.txt\\\") != result) await ns.write(\\\"/Temp/gang-names.txt\\\", result, 'w'); } catch(err) { ns.tprint(String(err)); throw(err); } }\",\"filename\":\"/Temp/gang-names.txt.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"helpers.js\",\"url\":\"blob:file:///9bc1187c-70db-4cba-ad3c-83025ef453c3\",\"moduleSequenceNumber\":125},{\"filename\":\"/Temp/gang-names.txt.js\",\"url\":\"blob:file:///a07b141c-2d0b-4da5-b512-7e1f65737897\",\"moduleSequenceNumber\":283}],\"dependents\":[],\"ramUsage\":3.6,\"server\":\"home\",\"moduleSequenceNumber\":283,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"gang.getOtherGangInformation\",\"cost\":2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { formatMoney, formatNumberShort, formatDuration, parseShortNumber, scanAllServers } from 'helpers.js'\\nexport async function main(ns) { try { let result = \\\"\\\"; try { result = JSON.stringify(ns.travelToCity('Sector-12')); } catch { }\\n        if (ns.read(\\\"/Temp/travel.txt\\\") != result) await ns.write(\\\"/Temp/travel.txt\\\", result, 'w'); } catch(err) { ns.tprint(String(err)); throw(err); } }\",\"filename\":\"/Temp/travel.txt.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"helpers.js\",\"url\":\"blob:file:///dd5a16d2-b2bb-4fc8-b665-302345573fd5\",\"moduleSequenceNumber\":119},{\"filename\":\"/Temp/travel.txt.js\",\"url\":\"blob:file:///f50308c6-66af-4bcb-a20e-d489dcd66d84\",\"moduleSequenceNumber\":49765}],\"dependents\":[],\"ramUsage\":3.6,\"server\":\"home\",\"moduleSequenceNumber\":213,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"travelToCity\",\"cost\":2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { formatMoney, formatNumberShort, formatDuration, parseShortNumber, scanAllServers } from 'helpers.js'\\nexport async function main(ns) { try { let result = \\\"\\\"; try { result = JSON.stringify(ns.workForFaction('KuaiGong International', 'hacking',  true)); } catch { }\\n        if (ns.read(\\\"/Temp/work-for-faction.txt\\\") != result) await ns.write(\\\"/Temp/work-for-faction.txt\\\", result, 'w'); } catch(err) { ns.tprint(String(err)); throw(err); } }\",\"filename\":\"/Temp/work-for-faction.txt.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"helpers.js\",\"url\":\"blob:file:///65cca18a-059f-43d9-8a40-adf2094f3ca3\",\"moduleSequenceNumber\":125},{\"filename\":\"/Temp/work-for-faction.txt.js\",\"url\":\"blob:file:///746c352b-f610-4e06-b050-3f07bfce0b47\",\"moduleSequenceNumber\":316}],\"dependents\":[],\"ramUsage\":4.6,\"server\":\"home\",\"moduleSequenceNumber\":316,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"workForFaction\",\"cost\":3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { formatMoney, formatNumberShort, formatDuration, parseShortNumber, scanAllServers } from 'helpers.js'\\nexport async function main(ns) { try { ns.gang.setTerritoryWarfare(true); } catch(err) { ns.tprint(String(err)); throw(err); } }\",\"filename\":\"/Temp/gang-set-warfare.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"helpers.js\",\"url\":\"blob:file:///30922a35-a2ea-44bc-b488-c7a7d0e9dfa9\",\"moduleSequenceNumber\":119},{\"filename\":\"/Temp/gang-set-warfare.js\",\"url\":\"blob:file:///8accfa30-0c79-4e98-bf63-2e6ec2569679\",\"moduleSequenceNumber\":12211}],\"dependents\":[],\"ramUsage\":3.6,\"server\":\"home\",\"moduleSequenceNumber\":215,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"gang.setTerritoryWarfare\",\"cost\":2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { formatMoney, formatNumberShort, formatDuration, parseShortNumber, scanAllServers } from 'helpers.js'\\nexport async function main(ns) { try { let result = \\\"\\\"; try { result = JSON.stringify(ns.hacknet.numHashes() + ns.hacknet.spendHashes(\\\"Generate Coding Contract\\\") - ns.hacknet.numHashes()); } catch { }\\n        if (ns.read(\\\"/Temp/spend-hacknet-hashes.txt\\\") != result) await ns.write(\\\"/Temp/spend-hacknet-hashes.txt\\\", result, 'w'); } catch(err) { ns.tprint(String(err)); throw(err); } }\",\"filename\":\"/Temp/spend-hacknet-hashes.txt.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"helpers.js\",\"url\":\"blob:file:///ce6786b1-8f44-4fa9-a9e6-4a333cf2f7aa\",\"moduleSequenceNumber\":116},{\"filename\":\"/Temp/spend-hacknet-hashes.txt.js\",\"url\":\"blob:file:///1b06d1bb-ee7b-4cfe-b956-2090bbec0af0\",\"moduleSequenceNumber\":4312}],\"dependents\":[],\"ramUsage\":5.6,\"server\":\"home\",\"moduleSequenceNumber\":216,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"ns\",\"name\":\"hacknet\",\"cost\":4}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { formatMoney, formatNumberShort, formatDuration, parseShortNumber, scanAllServers } from 'helpers.js'\\nexport async function main(ns) { try { let result = \\\"\\\"; try { result = JSON.stringify(ns.stopAction()); } catch { }\\n        if (ns.read(\\\"/Temp/stop-action.txt\\\") != result) await ns.write(\\\"/Temp/stop-action.txt\\\", result, 'w'); } catch(err) { ns.tprint(String(err)); throw(err); } }\",\"filename\":\"/Temp/stop-action.txt.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"helpers.js\",\"url\":\"blob:file:///0556faf1-8e9d-494d-95e7-ef4843be76f0\",\"moduleSequenceNumber\":119},{\"filename\":\"/Temp/stop-action.txt.js\",\"url\":\"blob:file:///a2f40270-3aaf-4c56-97ec-37f9d558b5d8\",\"moduleSequenceNumber\":426}],\"dependents\":[],\"ramUsage\":2.6,\"server\":\"home\",\"moduleSequenceNumber\":217,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"stopAction\",\"cost\":1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { formatMoney, formatNumberShort, formatDuration, parseShortNumber, scanAllServers } from 'helpers.js'\\nexport async function main(ns) { try { let result = \\\"\\\"; try { result = JSON.stringify(ns.applyToCompany('Fulcrum Technologies','software')); } catch { }\\n        if (ns.read(\\\"/Temp/apply-to-company.txt\\\") != result) await ns.write(\\\"/Temp/apply-to-company.txt\\\", result, 'w'); } catch(err) { ns.tprint(String(err)); throw(err); } }\",\"filename\":\"/Temp/apply-to-company.txt.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"helpers.js\",\"url\":\"blob:file:///14619bd6-7cd1-4026-9d96-8a0140adad5c\",\"moduleSequenceNumber\":119},{\"filename\":\"/Temp/apply-to-company.txt.js\",\"url\":\"blob:file:///a58f2458-f750-4fcf-9f7c-15cca3ca0073\",\"moduleSequenceNumber\":35827}],\"dependents\":[],\"ramUsage\":4.6,\"server\":\"home\",\"moduleSequenceNumber\":218,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"applyToCompany\",\"cost\":3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { formatMoney, formatNumberShort, formatDuration, parseShortNumber, scanAllServers } from 'helpers.js'\\nexport async function main(ns) { try { let result = \\\"\\\"; try { result = JSON.stringify(ns.workForCompany('Fulcrum Technologies',  true)); } catch { }\\n        if (ns.read(\\\"/Temp/work-for-company.txt\\\") != result) await ns.write(\\\"/Temp/work-for-company.txt\\\", result, 'w'); } catch(err) { ns.tprint(String(err)); throw(err); } }\",\"filename\":\"/Temp/work-for-company.txt.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"helpers.js\",\"url\":\"blob:file:///742a22d8-b2cc-453a-b395-db1e70384cc5\",\"moduleSequenceNumber\":119},{\"filename\":\"/Temp/work-for-company.txt.js\",\"url\":\"blob:file:///7575295a-3289-4202-8dfb-f594a18de5d8\",\"moduleSequenceNumber\":35829}],\"dependents\":[],\"ramUsage\":4.6,\"server\":\"home\",\"moduleSequenceNumber\":219,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"workForCompany\",\"cost\":3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { formatMoney, formatNumberShort, formatDuration, parseShortNumber, scanAllServers } from 'helpers.js'\\nexport async function main(ns) { try { let result = \\\"\\\"; try { result = JSON.stringify(ns.getServer('fulcrumtech').backdoorInstalled); } catch { }\\n        if (ns.read(\\\"/Temp/company-is-backdoored.txt\\\") != result) await ns.write(\\\"/Temp/company-is-backdoored.txt\\\", result, 'w'); } catch(err) { ns.tprint(String(err)); throw(err); } }\",\"filename\":\"/Temp/company-is-backdoored.txt.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"helpers.js\",\"url\":\"blob:file:///7332220d-c1d4-4a9f-9c2b-5ecdffdac007\",\"moduleSequenceNumber\":119},{\"filename\":\"/Temp/company-is-backdoored.txt.js\",\"url\":\"blob:file:///9b396afe-352f-492b-8f0c-8c6db0e7698d\",\"moduleSequenceNumber\":35831}],\"dependents\":[],\"ramUsage\":3.6,\"server\":\"home\",\"moduleSequenceNumber\":220,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { formatMoney, formatNumberShort, formatDuration, parseShortNumber, scanAllServers } from 'helpers.js'\\nexport async function main(ns) { try { let result = \\\"\\\"; try { result = JSON.stringify(Object.fromEntries([\\\"Bachman & Associates\\\",\\\"ECorp\\\",\\\"Clarke Incorporated\\\",\\\"OmniTek Incorporated\\\",\\\"NWO\\\",\\\"Blade Industries\\\",\\\"MegaCorp\\\",\\\"KuaiGong International\\\",\\\"Fulcrum Technologies\\\",\\\"Four Sigma\\\"].map(o => [o, ns.getCompanyFavor(o)]))); } catch { }\\n        if (ns.read(\\\"/Temp/company-favors.txt\\\") != result) await ns.write(\\\"/Temp/company-favors.txt\\\", result, 'w'); } catch(err) { ns.tprint(String(err)); throw(err); } }\",\"filename\":\"/Temp/company-favors.txt.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"helpers.js\",\"url\":\"blob:file:///3ac93217-bc12-4557-91a4-3de43ffff1cb\",\"moduleSequenceNumber\":119},{\"filename\":\"/Temp/company-favors.txt.js\",\"url\":\"blob:file:///33e16854-11d1-4e8a-977a-3cbe9e5d2410\",\"moduleSequenceNumber\":35821}],\"dependents\":[],\"ramUsage\":2.6,\"server\":\"home\",\"moduleSequenceNumber\":221,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getCompanyFavor\",\"cost\":1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { formatMoney, formatNumberShort, formatDuration, parseShortNumber, scanAllServers } from 'helpers.js'\\nexport async function main(ns) { try { while(true) { if(ns.joinFaction('Silhouette')) return; else await ns.sleep(1000); }; } catch(err) { ns.tprint(String(err)); throw(err); } }\",\"filename\":\"/Temp/join-faction-loop.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"helpers.js\",\"url\":\"blob:file:///f8003436-c782-4679-a2af-75c13ff2f274\",\"moduleSequenceNumber\":119},{\"filename\":\"/Temp/join-faction-loop.js\",\"url\":\"blob:file:///63957129-c85d-44d4-b529-e91253f84a93\",\"moduleSequenceNumber\":35825}],\"dependents\":[],\"ramUsage\":4.6,\"server\":\"home\",\"moduleSequenceNumber\":222,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"joinFaction\",\"cost\":3}]}}],\"serversOnNetwork\":[\"n00dles\",\"foodnstuff\",\"sigma-cosmetics\",\"joesguns\",\"hong-fang-tea\",\"harakiri-sushi\",\"iron-gym\",\"darkweb\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"reserve.txt\",\"text\":\"100000000\"}},{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"/Flags/deleting.txt\",\"text\":\"\"}},{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"/Temp/player-info.txt\",\"text\":\"{\\\"hacking\\\":4470,\\\"hp\\\":293,\\\"max_hp\\\":293,\\\"strength\\\":2834,\\\"defense\\\":2834,\\\"dexterity\\\":3227,\\\"agility\\\":3054,\\\"charisma\\\":7940,\\\"intelligence\\\":990,\\\"hacking_chance_mult\\\":28.90420529936954,\\\"hacking_speed_mult\\\":28.90420529936954,\\\"hacking_money_mult\\\":28.90420529936954,\\\"hacking_grow_mult\\\":28.90420529936954,\\\"hacking_exp\\\":514253789.7744979,\\\"strength_exp\\\":16518.83867994575,\\\"defense_exp\\\":16518.83867994575,\\\"dexterity_exp\\\":27122.336004998993,\\\"agility_exp\\\":21830.91322761489,\\\"charisma_exp\\\":509302.5884135165,\\\"hacking_mult\\\":28.90420529936954,\\\"strength_mult\\\":25.35456605207854,\\\"defense_mult\\\":25.35456605207854,\\\"dexterity_mult\\\":25.35456605207854,\\\"agility_mult\\\":25.35456605207854,\\\"charisma_mult\\\":36.003483793951524,\\\"hacking_exp_mult\\\":28.90420529936954,\\\"strength_exp_mult\\\":25.35456605207854,\\\"defense_exp_mult\\\":25.35456605207854,\\\"dexterity_exp_mult\\\":25.35456605207854,\\\"agility_exp_mult\\\":25.35456605207854,\\\"charisma_exp_mult\\\":25.35456605207854,\\\"company_rep_mult\\\":25.35456605207854,\\\"faction_rep_mult\\\":25.35456605207854,\\\"numPeopleKilled\\\":30,\\\"money\\\":156441793528.42487,\\\"city\\\":\\\"Sector-12\\\",\\\"location\\\":\\\"Travel Agency\\\",\\\"companyName\\\":\\\"Fulcrum Technologies\\\",\\\"crime_money_mult\\\":36.003483793951524,\\\"crime_success_mult\\\":36.003483793951524,\\\"isWorking\\\":true,\\\"workType\\\":\\\"Working for Faction\\\",\\\"currentWorkFactionName\\\":\\\"KuaiGong International\\\",\\\"currentWorkFactionDescription\\\":\\\"carrying out hacking contracts\\\",\\\"workHackExpGainRate\\\":4.3356307949054305,\\\"workStrExpGainRate\\\":0,\\\"workDefExpGainRate\\\":0,\\\"workDexExpGainRate\\\":0,\\\"workAgiExpGainRate\\\":0,\\\"workChaExpGainRate\\\":0,\\\"workRepGainRate\\\":190.80119186894441,\\\"workMoneyGainRate\\\":0,\\\"workMoneyLossRate\\\":0,\\\"workHackExpGained\\\":197.70476424768756,\\\"workStrExpGained\\\":0,\\\"workDefExpGained\\\":0,\\\"workDexExpGained\\\":0,\\\"workAgiExpGained\\\":0,\\\"workChaExpGained\\\":0,\\\"workRepGained\\\":10364.429636415069,\\\"workMoneyGained\\\":0,\\\"createProgramName\\\":\\\"\\\",\\\"createProgramReqLvl\\\":400,\\\"className\\\":\\\"\\\",\\\"crimeType\\\":\\\"\\\",\\\"work_money_mult\\\":25.35456605207854,\\\"hacknet_node_money_mult\\\":25.35456605207854,\\\"hacknet_node_purchase_cost_mult\\\":0.03527413428759442,\\\"hacknet_node_ram_cost_mult\\\":0.03527413428759442,\\\"hacknet_node_core_cost_mult\\\":0.03527413428759442,\\\"hacknet_node_level_cost_mult\\\":0.03527413428759442,\\\"hasWseAccount\\\":true,\\\"hasTixApiAccess\\\":true,\\\"has4SData\\\":true,\\\"has4SDataTixApi\\\":true,\\\"bladeburner_max_stamina_mult\\\":1,\\\"bladeburner_stamina_gain_mult\\\":1,\\\"bladeburner_analysis_mult\\\":1,\\\"bladeburner_success_chance_mult\\\":1,\\\"bitNodeN\\\":6,\\\"totalPlaytime\\\":2407716000,\\\"playtimeSinceLastAug\\\":16269600,\\\"playtimeSinceLastBitnode\\\":16839200,\\\"jobs\\\":{\\\"Bachman & Associates\\\":\\\"Systems Administrator\\\",\\\"Fulcrum Technologies\\\":\\\"Chief Technology Officer\\\",\\\"ECorp\\\":\\\"Systems Administrator\\\",\\\"Clarke Incorporated\\\":\\\"Systems Administrator\\\",\\\"OmniTek Incorporated\\\":\\\"Systems Administrator\\\",\\\"NWO\\\":\\\"Systems Administrator\\\",\\\"Blade Industries\\\":\\\"Systems Administrator\\\",\\\"MegaCorp\\\":\\\"Systems Administrator\\\",\\\"KuaiGong International\\\":\\\"Systems Administrator\\\",\\\"Four Sigma\\\":\\\"Systems Administrator\\\"},\\\"factions\\\":[\\\"Slum Snakes\\\",\\\"CyberSec\\\",\\\"BitRunners\\\",\\\"The Black Hand\\\",\\\"NiteSec\\\",\\\"Netburners\\\",\\\"Tian Di Hui\\\",\\\"Chongqing\\\",\\\"Tetrads\\\",\\\"Bachman & Associates\\\",\\\"Fulcrum Secret Technologies\\\",\\\"ECorp\\\",\\\"The Dark Army\\\",\\\"Clarke Incorporated\\\",\\\"OmniTek Incorporated\\\",\\\"NWO\\\",\\\"Blade Industries\\\",\\\"MegaCorp\\\",\\\"KuaiGong International\\\",\\\"Four Sigma\\\",\\\"Ishima\\\",\\\"Silhouette\\\",\\\"New Tokyo\\\",\\\"Speakers for the Dead\\\",\\\"The Syndicate\\\"],\\\"tor\\\":true,\\\"hasCorporation\\\":false}\"}},{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"/Temp/owned-source-files.txt\",\"text\":\"{\\\"1\\\":3,\\\"2\\\":3,\\\"4\\\":3,\\\"5\\\":3}\"}},{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"/Temp/script-costs.txt\",\"text\":\"{\\\"/Remote/weak-target.js\\\":1.75,\\\"/Remote/grow-target.js\\\":1.75,\\\"/Remote/hack-target.js\\\":1.7,\\\"/Remote/manualhack-target.js\\\":3.6,\\\"/Remote/share.js\\\":4,\\\"stats.js\\\":3.3,\\\"hacknet-upgrade-manager.js\\\":6.1,\\\"stockmaster.js\\\":3.2,\\\"gangs.js\\\":4.7,\\\"spend-hacknet-hashes.js\\\":5.6,\\\"sleeve.js\\\":6.8,\\\"work-for-factions.js\\\":5.3,\\\"/Tasks/tor-manager.js\\\":3.8,\\\"/Tasks/program-manager.js\\\":3.7,\\\"/Tasks/ram-manager.js\\\":6.25,\\\"faction-manager.js\\\":2.8,\\\"/Tasks/contractor.js\\\":3.1,\\\"/Tasks/backdoor-all-servers.js\\\":5.1,\\\"host-manager.js\\\":5.8}\"}},{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"/Temp/servers-hack-req.txt\",\"text\":\"{\\\"home\\\":1,\\\"darkweb\\\":1,\\\"iron-gym\\\":100,\\\"harakiri-sushi\\\":40,\\\"CSEC\\\":60,\\\"hong-fang-tea\\\":30,\\\"nectar-net\\\":20,\\\"omega-net\\\":201,\\\"avmnite-02h\\\":207,\\\"syscore\\\":626,\\\"aevum-police\\\":435,\\\"global-pharm\\\":832,\\\"johnson-ortho\\\":282,\\\"I.I.I.I\\\":363,\\\"zb-institute\\\":758,\\\"the-hub\\\":296,\\\"joesguns\\\":10,\\\"sigma-cosmetics\\\":5,\\\"max-hardware\\\":80,\\\"phantasy\\\":100,\\\"comptek\\\":304,\\\"summit-uni\\\":440,\\\"millenium-fitness\\\":515,\\\"rho-construction\\\":504,\\\"snap-fitness\\\":715,\\\"unitalife\\\":818,\\\"zeus-med\\\":849,\\\"nova-med\\\":801,\\\"microdyne\\\":851,\\\"aerocorp\\\":877,\\\"deltaone\\\":875,\\\"icarus\\\":867,\\\"defcomm\\\":1044,\\\"taiyang-digital\\\":942,\\\"run4theh111z\\\":523,\\\"helios\\\":809,\\\"kuai-gong\\\":979,\\\"clarkinc\\\":1055,\\\"applied-energetics\\\":793,\\\"stormtech\\\":1014,\\\"4sigma\\\":948,\\\"nwo\\\":950,\\\"The-Cave\\\":925,\\\"fulcrumtech\\\":1127,\\\".\\\":507,\\\"blade\\\":1018,\\\"ecorp\\\":1184,\\\"titan-labs\\\":838,\\\"vitalife\\\":828,\\\"omnitek\\\":934,\\\"powerhouse-fitness\\\":1016,\\\"megacorp\\\":1109,\\\"b-and-a\\\":1013,\\\"fulcrumassets\\\":1491,\\\"omnia\\\":898,\\\"solaris\\\":755,\\\"infocomm\\\":937,\\\"univ-energy\\\":818,\\\"zb-def\\\":804,\\\"neo-net\\\":50,\\\"crush-fitness\\\":265,\\\"netlink\\\":404,\\\"catalyst\\\":448,\\\"alpha-ent\\\":506,\\\"galactic-cyber\\\":849,\\\"lexo-corp\\\":718,\\\"rothman-uni\\\":377,\\\"foodnstuff\\\":1,\\\"n00dles\\\":1,\\\"zer0\\\":75,\\\"silver-helix\\\":150}\"}},{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"/Temp/servers-num-ports.txt\",\"text\":\"{\\\"home\\\":5,\\\"darkweb\\\":5,\\\"iron-gym\\\":1,\\\"harakiri-sushi\\\":0,\\\"CSEC\\\":1,\\\"hong-fang-tea\\\":0,\\\"nectar-net\\\":0,\\\"omega-net\\\":2,\\\"avmnite-02h\\\":2,\\\"syscore\\\":4,\\\"aevum-police\\\":4,\\\"global-pharm\\\":4,\\\"johnson-ortho\\\":2,\\\"I.I.I.I\\\":3,\\\"zb-institute\\\":5,\\\"the-hub\\\":2,\\\"joesguns\\\":0,\\\"sigma-cosmetics\\\":0,\\\"max-hardware\\\":1,\\\"phantasy\\\":2,\\\"comptek\\\":3,\\\"summit-uni\\\":3,\\\"millenium-fitness\\\":3,\\\"rho-construction\\\":3,\\\"snap-fitness\\\":4,\\\"unitalife\\\":4,\\\"zeus-med\\\":5,\\\"nova-med\\\":4,\\\"microdyne\\\":5,\\\"aerocorp\\\":5,\\\"deltaone\\\":5,\\\"icarus\\\":5,\\\"defcomm\\\":5,\\\"taiyang-digital\\\":5,\\\"run4theh111z\\\":4,\\\"helios\\\":5,\\\"kuai-gong\\\":5,\\\"clarkinc\\\":5,\\\"applied-energetics\\\":4,\\\"stormtech\\\":5,\\\"4sigma\\\":5,\\\"nwo\\\":5,\\\"The-Cave\\\":5,\\\"fulcrumtech\\\":5,\\\".\\\":4,\\\"blade\\\":5,\\\"ecorp\\\":5,\\\"titan-labs\\\":5,\\\"vitalife\\\":5,\\\"omnitek\\\":5,\\\"powerhouse-fitness\\\":5,\\\"megacorp\\\":5,\\\"b-and-a\\\":5,\\\"fulcrumassets\\\":5,\\\"omnia\\\":5,\\\"solaris\\\":5,\\\"infocomm\\\":5,\\\"univ-energy\\\":4,\\\"zb-def\\\":4,\\\"neo-net\\\":1,\\\"crush-fitness\\\":2,\\\"netlink\\\":3,\\\"catalyst\\\":3,\\\"alpha-ent\\\":4,\\\"galactic-cyber\\\":5,\\\"lexo-corp\\\":4,\\\"rothman-uni\\\":3,\\\"foodnstuff\\\":0,\\\"n00dles\\\":0,\\\"zer0\\\":1,\\\"silver-helix\\\":2}\"}},{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"/Temp/servers-security.txt\",\"text\":\"{\\\"home\\\":1,\\\"darkweb\\\":1,\\\"iron-gym\\\":15,\\\"harakiri-sushi\\\":8,\\\"CSEC\\\":1,\\\"hong-fang-tea\\\":8,\\\"nectar-net\\\":10,\\\"omega-net\\\":15,\\\"avmnite-02h\\\":1,\\\"syscore\\\":37,\\\"aevum-police\\\":37,\\\"global-pharm\\\":41,\\\"johnson-ortho\\\":21,\\\"I.I.I.I\\\":1,\\\"zb-institute\\\":40,\\\"the-hub\\\":18,\\\"joesguns\\\":8,\\\"sigma-cosmetics\\\":5,\\\"max-hardware\\\":8,\\\"phantasy\\\":10,\\\"comptek\\\":33,\\\"summit-uni\\\":30,\\\"millenium-fitness\\\":26,\\\"rho-construction\\\":25,\\\"snap-fitness\\\":21,\\\"unitalife\\\":40,\\\"zeus-med\\\":38,\\\"nova-med\\\":30,\\\"microdyne\\\":36,\\\"aerocorp\\\":42,\\\"deltaone\\\":43,\\\"icarus\\\":48,\\\"defcomm\\\":48,\\\"taiyang-digital\\\":39,\\\"run4theh111z\\\":1,\\\"helios\\\":47,\\\"kuai-gong\\\":49,\\\"clarkinc\\\":32,\\\"applied-energetics\\\":35,\\\"stormtech\\\":44,\\\"4sigma\\\":28,\\\"nwo\\\":50,\\\"The-Cave\\\":1,\\\"fulcrumtech\\\":48,\\\".\\\":1,\\\"blade\\\":48,\\\"ecorp\\\":50,\\\"titan-labs\\\":40,\\\"vitalife\\\":45,\\\"omnitek\\\":49,\\\"powerhouse-fitness\\\":30,\\\"megacorp\\\":50,\\\"b-and-a\\\":41,\\\"fulcrumassets\\\":50,\\\"omnia\\\":47,\\\"solaris\\\":37,\\\"infocomm\\\":39,\\\"univ-energy\\\":42,\\\"zb-def\\\":32,\\\"neo-net\\\":13,\\\"crush-fitness\\\":22,\\\"netlink\\\":33,\\\"catalyst\\\":33,\\\"alpha-ent\\\":28,\\\"galactic-cyber\\\":32,\\\"lexo-corp\\\":35,\\\"rothman-uni\\\":28,\\\"foodnstuff\\\":5,\\\"n00dles\\\":1,\\\"zer0\\\":13,\\\"silver-helix\\\":15}\"}},{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"/Temp/servers-max-money.txt\",\"text\":\"{\\\"home\\\":0,\\\"darkweb\\\":0,\\\"iron-gym\\\":100000000,\\\"harakiri-sushi\\\":20000000,\\\"CSEC\\\":0,\\\"hong-fang-tea\\\":15000000,\\\"nectar-net\\\":13750000,\\\"omega-net\\\":325112575,\\\"avmnite-02h\\\":0,\\\"syscore\\\":2434526570,\\\"aevum-police\\\":1232650550,\\\"global-pharm\\\":8115195940,\\\"johnson-ortho\\\":386358385,\\\"I.I.I.I\\\":0,\\\"zb-institute\\\":4595194635,\\\"the-hub\\\":868116490,\\\"joesguns\\\":12500000,\\\"sigma-cosmetics\\\":11500000,\\\"max-hardware\\\":50000000,\\\"phantasy\\\":120000000,\\\"comptek\\\":1178324405,\\\"summit-uni\\\":1583518900,\\\"millenium-fitness\\\":1250000000,\\\"rho-construction\\\":2563995735,\\\"snap-fitness\\\":2250000000,\\\"unitalife\\\":5406952590,\\\"zeus-med\\\":7357929395,\\\"nova-med\\\":5604411465,\\\"microdyne\\\":2514071610,\\\"aerocorp\\\":5636884100,\\\"deltaone\\\":7537807085,\\\"icarus\\\":4809890755,\\\"defcomm\\\":4074623985,\\\"taiyang-digital\\\":4172372120,\\\"run4theh111z\\\":0,\\\"helios\\\":3306210285,\\\"kuai-gong\\\":111733369385,\\\"clarkinc\\\":119703262715,\\\"applied-energetics\\\":4400850375,\\\"stormtech\\\":5360232680,\\\"4sigma\\\":121911651175,\\\"nwo\\\":155641351355,\\\"The-Cave\\\":0,\\\"fulcrumtech\\\":8107026920,\\\".\\\":0,\\\"blade\\\":145579363805,\\\"ecorp\\\":166796313355,\\\"titan-labs\\\":4368748420,\\\"vitalife\\\":3750085050,\\\"omnitek\\\":81504890820,\\\"powerhouse-fitness\\\":4500000000,\\\"megacorp\\\":281624139440,\\\"b-and-a\\\":77424284440,\\\"fulcrumassets\\\":5000000,\\\"omnia\\\":4570291365,\\\"solaris\\\":4084815810,\\\"infocomm\\\":3611007740,\\\"univ-energy\\\":5602940555,\\\"zb-def\\\":4528802080,\\\"neo-net\\\":25000000,\\\"crush-fitness\\\":218191230,\\\"netlink\\\":1375000000,\\\"catalyst\\\":2150603550,\\\"alpha-ent\\\":3472218850,\\\"galactic-cyber\\\":4021426250,\\\"lexo-corp\\\":3631265185,\\\"rothman-uni\\\":950379520,\\\"foodnstuff\\\":10000000,\\\"n00dles\\\":350000,\\\"zer0\\\":37500000,\\\"silver-helix\\\":225000000}\"}},{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"/Temp/analyze-hack.txt\",\"text\":\"[{\\\"hostname\\\":\\\"joesguns\\\",\\\"gainRate\\\":0.36505550437990614,\\\"expRate\\\":1374.290395788996},{\\\"hostname\\\":\\\"nectar-net\\\",\\\"gainRate\\\":0.4015610548178968,\\\"expRate\\\":1277.8149692573957},{\\\"hostname\\\":\\\"foodnstuff\\\",\\\"gainRate\\\":0.2920444035039249,\\\"expRate\\\":1260.861628970144},{\\\"hostname\\\":\\\"sigma-cosmetics\\\",\\\"gainRate\\\":0.33585106402951365,\\\"expRate\\\":1148.7850397283535},{\\\"hostname\\\":\\\"hong-fang-tea\\\",\\\"gainRate\\\":0.43806660525588736,\\\"expRate\\\":874.5484336839066},{\\\"hostname\\\":\\\"neo-net\\\",\\\"gainRate\\\":0.7301110087598123,\\\"expRate\\\":749.9419583352916},{\\\"hostname\\\":\\\"harakiri-sushi\\\",\\\"gainRate\\\":0.5840888070078498,\\\"expRate\\\":740.0025208094594},{\\\"hostname\\\":\\\"zer0\\\",\\\"gainRate\\\":1.0951665131397184,\\\"expRate\\\":542.5112039021258},{\\\"hostname\\\":\\\"max-hardware\\\",\\\"gainRate\\\":1.4602220175196245,\\\"expRate\\\":458.096798596332},{\\\"hostname\\\":\\\"iron-gym\\\",\\\"gainRate\\\":2.920444035039249,\\\"expRate\\\":449.27961262766894},{\\\"hostname\\\":\\\"phantasy\\\",\\\"gainRate\\\":3.504532842047099,\\\"expRate\\\":425.9383230857985},{\\\"hostname\\\":\\\"silver-helix\\\",\\\"gainRate\\\":6.570999078838311,\\\"expRate\\\":311.74503733348456},{\\\"hostname\\\":\\\"omega-net\\\",\\\"gainRate\\\":9.494730803750006,\\\"expRate\\\":237.5662026336041},{\\\"hostname\\\":\\\"crush-fitness\\\",\\\"gainRate\\\":6.372152761513769,\\\"expRate\\\":185.32080211223018},{\\\"hostname\\\":\\\"johnson-ortho\\\",\\\"gainRate\\\":11.283380408606478,\\\"expRate\\\":174.2820264593159},{\\\"hostname\\\":\\\"comptek\\\",\\\"gainRate\\\":34.41230479923423,\\\"expRate\\\":161.0680296756561},{\\\"hostname\\\":\\\"the-hub\\\",\\\"gainRate\\\":25.352856249397096,\\\"expRate\\\":161.0166458663308},{\\\"hostname\\\":\\\"n00dles\\\",\\\"gainRate\\\":0.010221554122637371,\\\"expRate\\\":154.68763955825176},{\\\"hostname\\\":\\\"rothman-uni\\\",\\\"gainRate\\\":27.75530200207465,\\\"expRate\\\":129.732124012387},{\\\"hostname\\\":\\\"netlink\\\",\\\"gainRate\\\":40.15610548178967,\\\"expRate\\\":123.65600170098443},{\\\"hostname\\\":\\\"aevum-police\\\",\\\"gainRate\\\":35.9988694603535,\\\"expRate\\\":115.09251291985173},{\\\"hostname\\\":\\\"summit-uni\\\",\\\"gainRate\\\":46.24578325876913,\\\"expRate\\\":111.67600502857208},{\\\"hostname\\\":\\\"catalyst\\\",\\\"gainRate\\\":62.80717309331734,\\\"expRate\\\":111.67331920833698},{\\\"hostname\\\":\\\"rho-construction\\\",\\\"gainRate\\\":74.88006050146826,\\\"expRate\\\":99.14641007774958},{\\\"hostname\\\":\\\"alpha-ent\\\",\\\"gainRate\\\":101.40420828833341,\\\"expRate\\\":97.1185082041505},{\\\"hostname\\\":\\\"millenium-fitness\\\",\\\"gainRate\\\":36.505550437990614,\\\"expRate\\\":95.24201503838135},{\\\"hostname\\\":\\\"syscore\\\",\\\"gainRate\\\":71.09898599501062,\\\"expRate\\\":79.19559809316738},{\\\"hostname\\\":\\\"snap-fitness\\\",\\\"gainRate\\\":65.70999078838311,\\\"expRate\\\":70.12517686387984},{\\\"hostname\\\":\\\"lexo-corp\\\",\\\"gainRate\\\":106.04906749178944,\\\"expRate\\\":69.05281567891609},{\\\"hostname\\\":\\\"zb-institute\\\",\\\"gainRate\\\":134.2000876163011,\\\"expRate\\\":66.41618972108228},{\\\"hostname\\\":\\\"solaris\\\",\\\"gainRate\\\":119.29475966548517,\\\"expRate\\\":65.76035410174431},{\\\"hostname\\\":\\\"nova-med\\\",\\\"gainRate\\\":163.6737003286483,\\\"expRate\\\":62.80327704330474},{\\\"hostname\\\":\\\"applied-energetics\\\",\\\"gainRate\\\":128.52437226768993,\\\"expRate\\\":62.56869329804846},{\\\"hostname\\\":\\\"helios\\\",\\\"gainRate\\\":96.55602105413665,\\\"expRate\\\":61.624317038974816},{\\\"hostname\\\":\\\"zb-def\\\",\\\"gainRate\\\":132.26113020409343,\\\"expRate\\\":61.61363039526758},{\\\"hostname\\\":\\\"vitalife\\\",\\\"gainRate\\\":109.51913515162364,\\\"expRate\\\":60.85615227046211},{\\\"hostname\\\":\\\"univ-energy\\\",\\\"gainRate\\\":163.6307432252925,\\\"expRate\\\":60.85243999353672},{\\\"hostname\\\":\\\"unitalife\\\",\\\"gainRate\\\":157.90702439205518,\\\"expRate\\\":60.806718557443},{\\\"hostname\\\":\\\"global-pharm\\\",\\\"gainRate\\\":236.9997557614773,\\\"expRate\\\":60.54884533225249},{\\\"hostname\\\":\\\"titan-labs\\\",\\\"gainRate\\\":127.58685263776144,\\\"expRate\\\":59.364091782651954},{\\\"hostname\\\":\\\"zeus-med\\\",\\\"gainRate\\\":214.884210118677,\\\"expRate\\\":58.55145811734926},{\\\"hostname\\\":\\\"galactic-cyber\\\",\\\"gainRate\\\":117.44350304162757,\\\"expRate\\\":58.37175565947447},{\\\"hostname\\\":\\\"microdyne\\\",\\\"gainRate\\\":73.42205437086022,\\\"expRate\\\":58.36158035736672},{\\\"hostname\\\":\\\"icarus\\\",\\\"gainRate\\\":140.4701676463018,\\\"expRate\\\":57.53769229322625},{\\\"hostname\\\":\\\"aerocorp\\\",\\\"gainRate\\\":164.62204546052587,\\\"expRate\\\":57.462921958013254},{\\\"hostname\\\":\\\"deltaone\\\",\\\"gainRate\\\":220.1374373866484,\\\"expRate\\\":56.92919463765952},{\\\"hostname\\\":\\\"omnia\\\",\\\"gainRate\\\":133.47280155305637,\\\"expRate\\\":56.141376351392296},{\\\"hostname\\\":\\\"omnitek\\\",\\\"gainRate\\\":2380.3047222179425,\\\"expRate\\\":53.99188415487042},{\\\"hostname\\\":\\\"infocomm\\\",\\\"gainRate\\\":105.45746014763559,\\\"expRate\\\":53.792347917552064},{\\\"hostname\\\":\\\"4sigma\\\",\\\"gainRate\\\":3560.361544758144,\\\"expRate\\\":53.120836870088326},{\\\"hostname\\\":\\\"taiyang-digital\\\",\\\"gainRate\\\":121.85179269818066,\\\"expRate\\\":52.82438963014261},{\\\"hostname\\\":\\\"nwo\\\",\\\"gainRate\\\":4545.418561701576,\\\"expRate\\\":52.55882353121972},{\\\"hostname\\\":\\\"kuai-gong\\\",\\\"gainRate\\\":3263.110521352603,\\\"expRate\\\":50.99595216388212},{\\\"hostname\\\":\\\"b-and-a\\\",\\\"gainRate\\\":2261.1328965998014,\\\"expRate\\\":49.78199460954752},{\\\"hostname\\\":\\\"blade\\\",\\\"gainRate\\\":4251.56384649121,\\\"expRate\\\":49.55285089495266},{\\\"hostname\\\":\\\"stormtech\\\",\\\"gainRate\\\":156.54259556728448,\\\"expRate\\\":49.176112502728635},{\\\"hostname\\\":\\\"powerhouse-fitness\\\",\\\"gainRate\\\":131.41998157676622,\\\"expRate\\\":48.77635160961102},{\\\"hostname\\\":\\\"defcomm\\\",\\\"gainRate\\\":118.99711312021104,\\\"expRate\\\":47.821516555365505},{\\\"hostname\\\":\\\"clarkinc\\\",\\\"gainRate\\\":3495.866795707579,\\\"expRate\\\":47.041172228754334},{\\\"hostname\\\":\\\"megacorp\\\",\\\"gainRate\\\":8224.675381506098,\\\"expRate\\\":45.05042016961691},{\\\"hostname\\\":\\\"fulcrumtech\\\",\\\"gainRate\\\":236.76118410416615,\\\"expRate\\\":44.312585474685974},{\\\"hostname\\\":\\\"ecorp\\\",\\\"gainRate\\\":4871.192984041471,\\\"expRate\\\":42.2063279871916},{\\\"hostname\\\":\\\"fulcrumassets\\\",\\\"gainRate\\\":0.025400613956542365,\\\"expRate\\\":33.53920912962116}]\"}},{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"/Temp/stock-symbols.txt\",\"text\":\"[\\\"ECP\\\",\\\"MGCP\\\",\\\"BLD\\\",\\\"CLRK\\\",\\\"OMTK\\\",\\\"FSIG\\\",\\\"KGI\\\",\\\"FLCM\\\",\\\"STM\\\",\\\"DCOMM\\\",\\\"HLS\\\",\\\"VITA\\\",\\\"ICRS\\\",\\\"UNV\\\",\\\"AERO\\\",\\\"OMN\\\",\\\"SLRS\\\",\\\"GPH\\\",\\\"NVMD\\\",\\\"WDS\\\",\\\"LXO\\\",\\\"RHOC\\\",\\\"APHE\\\",\\\"SYSC\\\",\\\"CTK\\\",\\\"NTLK\\\",\\\"OMGA\\\",\\\"FNS\\\",\\\"JGN\\\",\\\"SGC\\\",\\\"CTYS\\\",\\\"MDYN\\\",\\\"TITN\\\"]\"}},{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"/Temp/player-gang-joined.txt\",\"text\":\"true\"}},{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"/Temp/contract-types.txt\",\"text\":\"{\\\"contract-173425-ECorp.cct\\\":\\\"Spiralize Matrix\\\"}\"}},{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"/Temp/gang-equipment-names.txt\",\"text\":\"[\\\"Baseball Bat\\\",\\\"Katana\\\",\\\"Glock 18C\\\",\\\"P90C\\\",\\\"Steyr AUG\\\",\\\"AK-47\\\",\\\"M15A10 Assault Rifle\\\",\\\"AWM Sniper Rifle\\\",\\\"Bulletproof Vest\\\",\\\"Full Body Armor\\\",\\\"Liquid Body Armor\\\",\\\"Graphene Plating Armor\\\",\\\"Ford Flex V20\\\",\\\"ATX1070 Superbike\\\",\\\"Mercedes-Benz S9001\\\",\\\"White Ferrari\\\",\\\"NUKE Rootkit\\\",\\\"Soulstealer Rootkit\\\",\\\"Demon Rootkit\\\",\\\"Hmap Node\\\",\\\"Jack the Ripper\\\",\\\"Bionic Arms\\\",\\\"Bionic Legs\\\",\\\"Bionic Spine\\\",\\\"BrachiBlades\\\",\\\"Nanofiber Weave\\\",\\\"Synthetic Heart\\\",\\\"Synfibril Muscle\\\",\\\"BitWire\\\",\\\"Neuralstimulator\\\",\\\"DataJack\\\",\\\"Graphene Bone Lacings\\\"]\"}},{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"/Temp/stock-getMaxShares.txt\",\"text\":\"{\\\"ECP\\\":19200000,\\\"MGCP\\\":16700000,\\\"BLD\\\":16500000,\\\"CLRK\\\":12900000,\\\"OMTK\\\":8600000,\\\"FSIG\\\":6400000,\\\"KGI\\\":20100000,\\\"FLCM\\\":11700000,\\\"STM\\\":11300000,\\\"DCOMM\\\":14900000,\\\"HLS\\\":11300000,\\\"VITA\\\":19000000,\\\"ICRS\\\":9100000,\\\"UNV\\\":9800000,\\\"AERO\\\":12700000,\\\"OMN\\\":17200000,\\\"SLRS\\\":6000000,\\\"GPH\\\":6100000,\\\"NVMD\\\":4800000,\\\"WDS\\\":13100000,\\\"LXO\\\":9400000,\\\"RHOC\\\":7100000,\\\"APHE\\\":11600000,\\\"SYSC\\\":12200000,\\\"CTK\\\":23600000,\\\"NTLK\\\":4700000,\\\"OMGA\\\":4100000,\\\"FNS\\\":2500000,\\\"JGN\\\":28600000,\\\"SGC\\\":1700000,\\\"CTYS\\\":64900000,\\\"MDYN\\\":2600000,\\\"TITN\\\":5300000}\"}},{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"/Temp/contract-data.txt\",\"text\":\"{\\\"contract-173425-ECorp.cct\\\":[[26],[47],[31],[36],[7]]}\"}},{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"/Temp/stock-portfolio-value.txt\",\"text\":\"256724636691.80386\"}},{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"/Temp/gang-stats.txt\",\"text\":\"{\\\"faction\\\":\\\"Slum Snakes\\\",\\\"isHacking\\\":false,\\\"moneyGainRate\\\":629145.4388067761,\\\"power\\\":11134.708555989175,\\\"respect\\\":274798.50802545395,\\\"respectGainRate\\\":179.6586974019305,\\\"territory\\\":0.3972696517672189,\\\"territoryClashChance\\\":1,\\\"territoryWarfareEngaged\\\":true,\\\"wantedLevel\\\":7.918847560289823,\\\"wantedLevelGainRate\\\":0.0020507996519033038,\\\"wantedPenalty\\\":0.9999711839069763}\"}},{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"/Temp/gang-getEquipmentType.txt\",\"text\":\"{\\\"Baseball Bat\\\":\\\"Weapon\\\",\\\"Katana\\\":\\\"Weapon\\\",\\\"Glock 18C\\\":\\\"Weapon\\\",\\\"P90C\\\":\\\"Weapon\\\",\\\"Steyr AUG\\\":\\\"Weapon\\\",\\\"AK-47\\\":\\\"Weapon\\\",\\\"M15A10 Assault Rifle\\\":\\\"Weapon\\\",\\\"AWM Sniper Rifle\\\":\\\"Weapon\\\",\\\"Bulletproof Vest\\\":\\\"Armor\\\",\\\"Full Body Armor\\\":\\\"Armor\\\",\\\"Liquid Body Armor\\\":\\\"Armor\\\",\\\"Graphene Plating Armor\\\":\\\"Armor\\\",\\\"Ford Flex V20\\\":\\\"Vehicle\\\",\\\"ATX1070 Superbike\\\":\\\"Vehicle\\\",\\\"Mercedes-Benz S9001\\\":\\\"Vehicle\\\",\\\"White Ferrari\\\":\\\"Vehicle\\\",\\\"NUKE Rootkit\\\":\\\"Rootkit\\\",\\\"Soulstealer Rootkit\\\":\\\"Rootkit\\\",\\\"Demon Rootkit\\\":\\\"Rootkit\\\",\\\"Hmap Node\\\":\\\"Rootkit\\\",\\\"Jack the Ripper\\\":\\\"Rootkit\\\",\\\"Bionic Arms\\\":\\\"Augmentation\\\",\\\"Bionic Legs\\\":\\\"Augmentation\\\",\\\"Bionic Spine\\\":\\\"Augmentation\\\",\\\"BrachiBlades\\\":\\\"Augmentation\\\",\\\"Nanofiber Weave\\\":\\\"Augmentation\\\",\\\"Synthetic Heart\\\":\\\"Augmentation\\\",\\\"Synfibril Muscle\\\":\\\"Augmentation\\\",\\\"BitWire\\\":\\\"Augmentation\\\",\\\"Neuralstimulator\\\":\\\"Augmentation\\\",\\\"DataJack\\\":\\\"Augmentation\\\",\\\"Graphene Bone Lacings\\\":\\\"Augmentation\\\"}\"}},{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"/Temp/process-list.txt\",\"text\":\"[{\\\"filename\\\":\\\"daemon.js\\\",\\\"threads\\\":1,\\\"args\\\":[\\\"-s\\\"],\\\"pid\\\":1},{\\\"filename\\\":\\\"stats.js\\\",\\\"threads\\\":1,\\\"args\\\":[],\\\"pid\\\":2},{\\\"filename\\\":\\\"stockmaster.js\\\",\\\"threads\\\":1,\\\"args\\\":[\\\"--show-market-summary\\\"],\\\"pid\\\":3},{\\\"filename\\\":\\\"gangs.js\\\",\\\"threads\\\":1,\\\"args\\\":[],\\\"pid\\\":4},{\\\"filename\\\":\\\"/Temp/stockmarket-summary-tail.js\\\",\\\"threads\\\":1,\\\"args\\\":[],\\\"pid\\\":5},{\\\"filename\\\":\\\"/Remote/weak-target.js\\\",\\\"threads\\\":13,\\\"args\\\":[\\\"iron-gym\\\",1644746478239,1644746478699,460,\\\"Batch 0-weak2\\\",1,0],\\\"pid\\\":6},{\\\"filename\\\":\\\"/Remote/share.js\\\",\\\"threads\\\":7548476,\\\"args\\\":[1644746466258],\\\"pid\\\":8},{\\\"filename\\\":\\\"/Remote/share.js\\\",\\\"threads\\\":1547,\\\"args\\\":[1644746471338],\\\"pid\\\":18},{\\\"filename\\\":\\\"/Temp/process-list.txt.js\\\",\\\"threads\\\":1,\\\"args\\\":[],\\\"pid\\\":52},{\\\"filename\\\":\\\"/Temp/gang-getTaskStats.txt.js\\\",\\\"threads\\\":1,\\\"args\\\":[],\\\"pid\\\":53},{\\\"filename\\\":\\\"hacknet-upgrade-manager.js\\\",\\\"threads\\\":1,\\\"args\\\":[\\\"-c\\\",\\\"--max-payoff-time\\\",\\\"1h\\\"],\\\"pid\\\":54},{\\\"filename\\\":\\\"work-for-factions.js\\\",\\\"threads\\\":1,\\\"args\\\":[\\\"--fast-crimes-only\\\",\\\"--no-coding-contracts\\\"],\\\"pid\\\":55}]\"}},{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"/Temp/stockmarket-summary-is-running.txt\",\"text\":\"true\"}},{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"/Temp/gang-getEquipmentCost.txt\",\"text\":\"{\\\"Baseball Bat\\\":786343.1976042701,\\\"Bulletproof Vest\\\":1572686.3952085401,\\\"Ford Flex V20\\\":2359029.59281281,\\\"Full Body Armor\\\":3931715.9880213505,\\\"NUKE Rootkit\\\":3931715.9880213505,\\\"ATX1070 Superbike\\\":7077088.77843843,\\\"Katana\\\":9436118.37125124,\\\"Mercedes-Benz S9001\\\":14154177.55687686,\\\"Glock 18C\\\":19658579.940106753,\\\"Liquid Body Armor\\\":19658579.940106753,\\\"Soulstealer Rootkit\\\":19658579.940106753,\\\"White Ferrari\\\":23590295.9281281,\\\"Graphene Plating Armor\\\":31453727.904170804,\\\"Hmap Node\\\":31453727.904170804,\\\"P90C\\\":39317159.88021351,\\\"Steyr AUG\\\":47180591.8562562,\\\"Demon Rootkit\\\":58975739.820320256,\\\"Jack the Ripper\\\":58975739.820320256,\\\"AK-47\\\":78634319.76042701,\\\"M15A10 Assault Rifle\\\":117951479.64064051,\\\"AWM Sniper Rifle\\\":176927219.46096078,\\\"BitWire\\\":3931715988.0213504,\\\"DataJack\\\":5897573982.032025,\\\"Bionic Arms\\\":7863431976.042701,\\\"Bionic Legs\\\":7863431976.042701,\\\"Neuralstimulator\\\":7863431976.042701,\\\"Nanofiber Weave\\\":9436118371.25124,\\\"Bionic Spine\\\":11795147964.06405,\\\"Synfibril Muscle\\\":11795147964.06405,\\\"BrachiBlades\\\":15726863952.085402,\\\"Synthetic Heart\\\":19658579940.10675,\\\"Graphene Bone Lacings\\\":39317159880.2135}\"}},{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"/Temp/gang-getEquipmentStats.txt\",\"text\":\"{\\\"Baseball Bat\\\":{\\\"str\\\":1.04,\\\"def\\\":1.04},\\\"Katana\\\":{\\\"str\\\":1.08,\\\"def\\\":1.08,\\\"dex\\\":1.08},\\\"Glock 18C\\\":{\\\"str\\\":1.1,\\\"def\\\":1.1,\\\"dex\\\":1.1,\\\"agi\\\":1.1},\\\"P90C\\\":{\\\"str\\\":1.12,\\\"def\\\":1.1,\\\"agi\\\":1.1},\\\"Steyr AUG\\\":{\\\"str\\\":1.2,\\\"def\\\":1.15},\\\"AK-47\\\":{\\\"str\\\":1.25,\\\"def\\\":1.2},\\\"M15A10 Assault Rifle\\\":{\\\"str\\\":1.3,\\\"def\\\":1.25},\\\"AWM Sniper Rifle\\\":{\\\"str\\\":1.3,\\\"dex\\\":1.25,\\\"agi\\\":1.3},\\\"Bulletproof Vest\\\":{\\\"def\\\":1.04},\\\"Full Body Armor\\\":{\\\"def\\\":1.08},\\\"Liquid Body Armor\\\":{\\\"def\\\":1.15,\\\"agi\\\":1.15},\\\"Graphene Plating Armor\\\":{\\\"def\\\":1.2},\\\"Ford Flex V20\\\":{\\\"agi\\\":1.04,\\\"cha\\\":1.04},\\\"ATX1070 Superbike\\\":{\\\"agi\\\":1.08,\\\"cha\\\":1.08},\\\"Mercedes-Benz S9001\\\":{\\\"agi\\\":1.12,\\\"cha\\\":1.12},\\\"White Ferrari\\\":{\\\"agi\\\":1.16,\\\"cha\\\":1.16},\\\"NUKE Rootkit\\\":{\\\"hack\\\":1.05},\\\"Soulstealer Rootkit\\\":{\\\"hack\\\":1.1},\\\"Demon Rootkit\\\":{\\\"hack\\\":1.15},\\\"Hmap Node\\\":{\\\"hack\\\":1.12},\\\"Jack the Ripper\\\":{\\\"hack\\\":1.15},\\\"Bionic Arms\\\":{\\\"str\\\":1.3,\\\"dex\\\":1.3},\\\"Bionic Legs\\\":{\\\"agi\\\":1.6},\\\"Bionic Spine\\\":{\\\"str\\\":1.15,\\\"def\\\":1.15,\\\"dex\\\":1.15,\\\"agi\\\":1.15},\\\"BrachiBlades\\\":{\\\"str\\\":1.4,\\\"def\\\":1.4},\\\"Nanofiber Weave\\\":{\\\"str\\\":1.2,\\\"def\\\":1.2},\\\"Synthetic Heart\\\":{\\\"str\\\":1.5,\\\"agi\\\":1.5},\\\"Synfibril Muscle\\\":{\\\"str\\\":1.3,\\\"def\\\":1.3},\\\"BitWire\\\":{\\\"hack\\\":1.05},\\\"Neuralstimulator\\\":{\\\"hack\\\":1.15},\\\"DataJack\\\":{\\\"hack\\\":1.1},\\\"Graphene Bone Lacings\\\":{\\\"str\\\":1.7,\\\"def\\\":1.7}}\"}},{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"/Temp/stock-getAskPrice.txt\",\"text\":\"{\\\"ECP\\\":12760.536637574307,\\\"MGCP\\\":92253.40192549989,\\\"BLD\\\":30473.20976234651,\\\"CLRK\\\":23597.411692984886,\\\"OMTK\\\":27132.0381612984,\\\"FSIG\\\":20136.431748491716,\\\"KGI\\\":14548.269869990761,\\\"FLCM\\\":54502.24038094066,\\\"STM\\\":17167.649364623456,\\\"DCOMM\\\":14590.721750440774,\\\"HLS\\\":9801.216587675995,\\\"VITA\\\":20545.19236783869,\\\"ICRS\\\":17175.923384455687,\\\"UNV\\\":17919.60883568009,\\\"AERO\\\":10751.456757775188,\\\"OMN\\\":4657.62930181129,\\\"SLRS\\\":25343.830206446415,\\\"GPH\\\":11183.427755776462,\\\"NVMD\\\":25650.557351422092,\\\"WDS\\\":13092.008460636876,\\\"LXO\\\":7766.560682681656,\\\"RHOC\\\":5152.1032475914035,\\\"APHE\\\":3717.4062304807408,\\\"SYSC\\\":2317.734465966562,\\\"CTK\\\":1382.2069906857855,\\\"NTLK\\\":4820.1747194673735,\\\"OMGA\\\":4787.758586893851,\\\"FNS\\\":2082.503516965877,\\\"JGN\\\":429.41487874184645,\\\"SGC\\\":2081.2759002943712,\\\"CTYS\\\":124.0607230846478,\\\"MDYN\\\":55493.58766013183,\\\"TITN\\\":13795.428628987362}\"}},{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"/Temp/stock-getBidPrice.txt\",\"text\":\"{\\\"ECP\\\":12684.202420400385,\\\"MGCP\\\":91701.5371083982,\\\"BLD\\\":30109.71223039009,\\\"CLRK\\\":23550.26401727463,\\\"OMTK\\\":27023.72663171238,\\\"FSIG\\\":19975.98209312525,\\\"KGI\\\":14490.192944362056,\\\"FLCM\\\":53744.51310652838,\\\"STM\\\":16827.695911858635,\\\"DCOMM\\\":14416.67735580331,\\\"HLS\\\":9626.368323475632,\\\"VITA\\\":20300.12049068753,\\\"ICRS\\\":16937.13199678699,\\\"UNV\\\":17741.304270150937,\\\"AERO\\\":10580.798714000979,\\\"OMN\\\":4611.284731644014,\\\"SLRS\\\":24941.54718729647,\\\"GPH\\\":10983.921611471234,\\\"NVMD\\\":25395.327925039783,\\\"WDS\\\":12884.19880253153,\\\"LXO\\\":7612.767401836475,\\\"RHOC\\\":5090.646747620134,\\\"APHE\\\":3621.9940271317782,\\\"SYSC\\\":2262.7684312005563,\\\"CTK\\\":1349.4273782584546,\\\"NTLK\\\":4631.148259880418,\\\"OMGA\\\":4721.195905447463,\\\"FNS\\\":2057.662520739644,\\\"JGN\\\":421.7543556324776,\\\"SGC\\\":2048.2397748928734,\\\"CTYS\\\":122.33594639826741,\\\"MDYN\\\":54831.636316273405,\\\"TITN\\\":13549.32583877748}\"}},{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"/Temp/gang-task-names.txt\",\"text\":\"[\\\"Unassigned\\\",\\\"Mug People\\\",\\\"Deal Drugs\\\",\\\"Strongarm Civilians\\\",\\\"Run a Con\\\",\\\"Armed Robbery\\\",\\\"Traffick Illegal Arms\\\",\\\"Threaten & Blackmail\\\",\\\"Human Trafficking\\\",\\\"Terrorism\\\",\\\"Vigilante Justice\\\",\\\"Train Combat\\\",\\\"Train Hacking\\\",\\\"Train Charisma\\\",\\\"Territory Warfare\\\"]\"}},{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"/Temp/stock-getVolatility.txt\",\"text\":\"{\\\"ECP\\\":0.005,\\\"MGCP\\\":0.0045000000000000005,\\\"BLD\\\":0.0070999999999999995,\\\"CLRK\\\":0.0075,\\\"OMTK\\\":0.0060999999999999995,\\\"FSIG\\\":0.011000000000000001,\\\"KGI\\\":0.0084,\\\"FLCM\\\":0.0129,\\\"STM\\\":0.008100000000000001,\\\"DCOMM\\\":0.0067,\\\"HLS\\\":0.005699999999999999,\\\"VITA\\\":0.0072,\\\"ICRS\\\":0.006999999999999999,\\\"UNV\\\":0.0055000000000000005,\\\"AERO\\\":0.0062,\\\"OMN\\\":0.0070999999999999995,\\\"SLRS\\\":0.0072,\\\"GPH\\\":0.005699999999999999,\\\"NVMD\\\":0.0079,\\\"WDS\\\":0.0246,\\\"LXO\\\":0.0115,\\\"RHOC\\\":0.0053,\\\"APHE\\\":0.019299999999999998,\\\"SYSC\\\":0.015700000000000002,\\\"CTK\\\":0.0096,\\\"NTLK\\\":0.026699999999999998,\\\"OMGA\\\":0.0102,\\\"FNS\\\":0.0077,\\\"JGN\\\":0.0311,\\\"SGC\\\":0.0137,\\\"CTYS\\\":0.013600000000000001,\\\"MDYN\\\":0.0076,\\\"TITN\\\":0.0055000000000000005}\"}},{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"/Temp/gang-getTaskStats.txt\",\"text\":\"{\\\"Unassigned\\\":{\\\"name\\\":\\\"Unassigned\\\",\\\"desc\\\":\\\"This gang member is currently idle\\\",\\\"isHacking\\\":true,\\\"isCombat\\\":true,\\\"baseRespect\\\":0,\\\"baseWanted\\\":0,\\\"baseMoney\\\":0,\\\"hackWeight\\\":100,\\\"strWeight\\\":0,\\\"defWeight\\\":0,\\\"dexWeight\\\":0,\\\"agiWeight\\\":0,\\\"chaWeight\\\":0,\\\"difficulty\\\":1,\\\"territory\\\":{\\\"money\\\":1,\\\"respect\\\":1,\\\"wanted\\\":1}},\\\"Mug People\\\":{\\\"name\\\":\\\"Mug People\\\",\\\"desc\\\":\\\"Assign this gang member to mug random people on the streets<br><br>Earns money - Slightly increases respect - Very slightly increases wanted level\\\",\\\"isHacking\\\":false,\\\"isCombat\\\":true,\\\"baseRespect\\\":0.00005,\\\"baseWanted\\\":0.00005,\\\"baseMoney\\\":3.6,\\\"hackWeight\\\":0,\\\"strWeight\\\":25,\\\"defWeight\\\":25,\\\"dexWeight\\\":25,\\\"agiWeight\\\":10,\\\"chaWeight\\\":15,\\\"difficulty\\\":1,\\\"territory\\\":{\\\"money\\\":1,\\\"respect\\\":1,\\\"wanted\\\":1}},\\\"Deal Drugs\\\":{\\\"name\\\":\\\"Deal Drugs\\\",\\\"desc\\\":\\\"Assign this gang member to sell drugs<br><br>Earns money - Slightly increases respect - Slightly increases wanted level - Scales slightly with territory\\\",\\\"isHacking\\\":false,\\\"isCombat\\\":true,\\\"baseRespect\\\":0.00006,\\\"baseWanted\\\":0.002,\\\"baseMoney\\\":15,\\\"hackWeight\\\":0,\\\"strWeight\\\":0,\\\"defWeight\\\":0,\\\"dexWeight\\\":20,\\\"agiWeight\\\":20,\\\"chaWeight\\\":60,\\\"difficulty\\\":3.5,\\\"territory\\\":{\\\"money\\\":1.2,\\\"respect\\\":1,\\\"wanted\\\":1.15}},\\\"Strongarm Civilians\\\":{\\\"name\\\":\\\"Strongarm Civilians\\\",\\\"desc\\\":\\\"Assign this gang member to extort civilians in your territory<br><br>Earns money - Slightly increases respect - Increases wanted - Scales heavily with territory\\\",\\\"isHacking\\\":false,\\\"isCombat\\\":true,\\\"baseRespect\\\":0.00004,\\\"baseWanted\\\":0.02,\\\"baseMoney\\\":7.5,\\\"hackWeight\\\":10,\\\"strWeight\\\":25,\\\"defWeight\\\":25,\\\"dexWeight\\\":20,\\\"agiWeight\\\":10,\\\"chaWeight\\\":10,\\\"difficulty\\\":5,\\\"territory\\\":{\\\"money\\\":1.6,\\\"respect\\\":1.1,\\\"wanted\\\":1.5}},\\\"Run a Con\\\":{\\\"name\\\":\\\"Run a Con\\\",\\\"desc\\\":\\\"Assign this gang member to run cons<br><br>Earns money - Increases respect - Increases wanted level\\\",\\\"isHacking\\\":false,\\\"isCombat\\\":true,\\\"baseRespect\\\":0.00012,\\\"baseWanted\\\":0.05,\\\"baseMoney\\\":45,\\\"hackWeight\\\":0,\\\"strWeight\\\":5,\\\"defWeight\\\":5,\\\"dexWeight\\\":25,\\\"agiWeight\\\":25,\\\"chaWeight\\\":40,\\\"difficulty\\\":14,\\\"territory\\\":{\\\"money\\\":1,\\\"respect\\\":1,\\\"wanted\\\":1}},\\\"Armed Robbery\\\":{\\\"name\\\":\\\"Armed Robbery\\\",\\\"desc\\\":\\\"Assign this gang member to commit armed robbery on stores, banks and armored cars<br><br>Earns money - Increases respect - Increases wanted level\\\",\\\"isHacking\\\":false,\\\"isCombat\\\":true,\\\"baseRespect\\\":0.00014,\\\"baseWanted\\\":0.1,\\\"baseMoney\\\":114,\\\"hackWeight\\\":20,\\\"strWeight\\\":15,\\\"defWeight\\\":15,\\\"dexWeight\\\":20,\\\"agiWeight\\\":10,\\\"chaWeight\\\":20,\\\"difficulty\\\":20,\\\"territory\\\":{\\\"money\\\":1,\\\"respect\\\":1,\\\"wanted\\\":1}},\\\"Traffick Illegal Arms\\\":{\\\"name\\\":\\\"Traffick Illegal Arms\\\",\\\"desc\\\":\\\"Assign this gang member to traffick illegal arms<br><br>Earns money - Increases respect - Increases wanted level - Scales heavily with territory\\\",\\\"isHacking\\\":false,\\\"isCombat\\\":true,\\\"baseRespect\\\":0.0002,\\\"baseWanted\\\":0.24,\\\"baseMoney\\\":174,\\\"hackWeight\\\":15,\\\"strWeight\\\":20,\\\"defWeight\\\":20,\\\"dexWeight\\\":20,\\\"agiWeight\\\":0,\\\"chaWeight\\\":25,\\\"difficulty\\\":32,\\\"territory\\\":{\\\"money\\\":1.4,\\\"respect\\\":1.3,\\\"wanted\\\":1.25}},\\\"Threaten & Blackmail\\\":{\\\"name\\\":\\\"Threaten & Blackmail\\\",\\\"desc\\\":\\\"Assign this gang member to threaten and black mail high-profile targets<br><br>Earns money - Slightly increases respect - Slightly increases wanted level\\\",\\\"isHacking\\\":false,\\\"isCombat\\\":true,\\\"baseRespect\\\":0.0002,\\\"baseWanted\\\":0.125,\\\"baseMoney\\\":72,\\\"hackWeight\\\":25,\\\"strWeight\\\":25,\\\"defWeight\\\":0,\\\"dexWeight\\\":25,\\\"agiWeight\\\":0,\\\"chaWeight\\\":25,\\\"difficulty\\\":28,\\\"territory\\\":{\\\"money\\\":1,\\\"respect\\\":1,\\\"wanted\\\":1}},\\\"Human Trafficking\\\":{\\\"name\\\":\\\"Human Trafficking\\\",\\\"desc\\\":\\\"Assign this gang member to engage in human trafficking operations<br><br>Earns money - Increases respect - Increases wanted level - Scales heavily with territory\\\",\\\"isHacking\\\":false,\\\"isCombat\\\":true,\\\"baseRespect\\\":0.004,\\\"baseWanted\\\":1.25,\\\"baseMoney\\\":360,\\\"hackWeight\\\":30,\\\"strWeight\\\":5,\\\"defWeight\\\":5,\\\"dexWeight\\\":30,\\\"agiWeight\\\":0,\\\"chaWeight\\\":30,\\\"difficulty\\\":36,\\\"territory\\\":{\\\"money\\\":1.5,\\\"respect\\\":1.5,\\\"wanted\\\":1.6}},\\\"Terrorism\\\":{\\\"name\\\":\\\"Terrorism\\\",\\\"desc\\\":\\\"Assign this gang member to commit acts of terrorism<br><br>Greatly increases respect - Greatly increases wanted level - Scales heavily with territory\\\",\\\"isHacking\\\":false,\\\"isCombat\\\":true,\\\"baseRespect\\\":0.01,\\\"baseWanted\\\":6,\\\"baseMoney\\\":0,\\\"hackWeight\\\":20,\\\"strWeight\\\":20,\\\"defWeight\\\":20,\\\"dexWeight\\\":20,\\\"agiWeight\\\":0,\\\"chaWeight\\\":20,\\\"difficulty\\\":36,\\\"territory\\\":{\\\"money\\\":1,\\\"respect\\\":2,\\\"wanted\\\":2}},\\\"Vigilante Justice\\\":{\\\"name\\\":\\\"Vigilante Justice\\\",\\\"desc\\\":\\\"Assign this gang member to be a vigilante and protect the city from criminals<br><br>Decreases wanted level\\\",\\\"isHacking\\\":true,\\\"isCombat\\\":true,\\\"baseRespect\\\":0,\\\"baseWanted\\\":-0.001,\\\"baseMoney\\\":0,\\\"hackWeight\\\":20,\\\"strWeight\\\":20,\\\"defWeight\\\":20,\\\"dexWeight\\\":20,\\\"agiWeight\\\":20,\\\"chaWeight\\\":0,\\\"difficulty\\\":1,\\\"territory\\\":{\\\"money\\\":1,\\\"respect\\\":1,\\\"wanted\\\":0.9}},\\\"Train Combat\\\":{\\\"name\\\":\\\"Train Combat\\\",\\\"desc\\\":\\\"Assign this gang member to increase their combat stats (str, def, dex, agi)\\\",\\\"isHacking\\\":true,\\\"isCombat\\\":true,\\\"baseRespect\\\":0,\\\"baseWanted\\\":0,\\\"baseMoney\\\":0,\\\"hackWeight\\\":0,\\\"strWeight\\\":25,\\\"defWeight\\\":25,\\\"dexWeight\\\":25,\\\"agiWeight\\\":25,\\\"chaWeight\\\":0,\\\"difficulty\\\":100,\\\"territory\\\":{\\\"money\\\":1,\\\"respect\\\":1,\\\"wanted\\\":1}},\\\"Train Hacking\\\":{\\\"name\\\":\\\"Train Hacking\\\",\\\"desc\\\":\\\"Assign this gang member to train their hacking skills\\\",\\\"isHacking\\\":true,\\\"isCombat\\\":true,\\\"baseRespect\\\":0,\\\"baseWanted\\\":0,\\\"baseMoney\\\":0,\\\"hackWeight\\\":100,\\\"strWeight\\\":0,\\\"defWeight\\\":0,\\\"dexWeight\\\":0,\\\"agiWeight\\\":0,\\\"chaWeight\\\":0,\\\"difficulty\\\":45,\\\"territory\\\":{\\\"money\\\":1,\\\"respect\\\":1,\\\"wanted\\\":1}},\\\"Train Charisma\\\":{\\\"name\\\":\\\"Train Charisma\\\",\\\"desc\\\":\\\"Assign this gang member to train their charisma\\\",\\\"isHacking\\\":true,\\\"isCombat\\\":true,\\\"baseRespect\\\":0,\\\"baseWanted\\\":0,\\\"baseMoney\\\":0,\\\"hackWeight\\\":0,\\\"strWeight\\\":0,\\\"defWeight\\\":0,\\\"dexWeight\\\":0,\\\"agiWeight\\\":0,\\\"chaWeight\\\":100,\\\"difficulty\\\":8,\\\"territory\\\":{\\\"money\\\":1,\\\"respect\\\":1,\\\"wanted\\\":1}},\\\"Territory Warfare\\\":{\\\"name\\\":\\\"Territory Warfare\\\",\\\"desc\\\":\\\"Assign this gang member to engage in territorial warfare with other gangs. Members assigned to this task will help increase your gang's territory and will defend your territory from being taken.\\\",\\\"isHacking\\\":true,\\\"isCombat\\\":true,\\\"baseRespect\\\":0,\\\"baseWanted\\\":0,\\\"baseMoney\\\":0,\\\"hackWeight\\\":15,\\\"strWeight\\\":20,\\\"defWeight\\\":20,\\\"dexWeight\\\":20,\\\"agiWeight\\\":20,\\\"chaWeight\\\":5,\\\"difficulty\\\":5,\\\"territory\\\":{\\\"money\\\":1,\\\"respect\\\":1,\\\"wanted\\\":1}}}\"}},{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"/Temp/stock-getForecast.txt\",\"text\":\"{\\\"ECP\\\":0.3068384674577897,\\\"MGCP\\\":0.6649474636131449,\\\"BLD\\\":0.6593565984745328,\\\"CLRK\\\":0.3797584824587489,\\\"OMTK\\\":0.38889008565980043,\\\"FSIG\\\":0.7012869845421593,\\\"KGI\\\":0.5544265851605964,\\\"FLCM\\\":0.33635976980872273,\\\"STM\\\":0.5737726411013773,\\\"DCOMM\\\":0.5945505084042653,\\\"HLS\\\":0.4101437937770072,\\\"VITA\\\":0.566973969136014,\\\"ICRS\\\":0.4467571812180479,\\\"UNV\\\":0.38935827715565174,\\\"AERO\\\":0.5543672856610388,\\\"OMN\\\":0.4467008549079206,\\\"SLRS\\\":0.579682034663912,\\\"GPH\\\":0.3926529659174436,\\\"NVMD\\\":0.4463032303535956,\\\"WDS\\\":0.4382178431594793,\\\"LXO\\\":0.5681585020241842,\\\"RHOC\\\":0.4819773787873267,\\\"APHE\\\":0.617631330435543,\\\"SYSC\\\":0.5651318846504731,\\\"CTK\\\":0.5595700168577675,\\\"NTLK\\\":0.5280176248608003,\\\"OMGA\\\":0.5658513679005411,\\\"FNS\\\":0.42548056202397405,\\\"JGN\\\":0.44361291596368213,\\\"SGC\\\":0.4373521938156213,\\\"CTYS\\\":0.5880630453603876,\\\"MDYN\\\":0.5728944205104515,\\\"TITN\\\":0.6272153690734933}\"}},{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"/Temp/stock-getPosition.txt\",\"text\":\"{\\\"ECP\\\":[0,0,0,0],\\\"MGCP\\\":[1124501,68731.24669472108,0,0],\\\"BLD\\\":[943500,28782.025132138297,0,0],\\\"CLRK\\\":[0,0,0,0],\\\"OMTK\\\":[0,0,0,0],\\\"FSIG\\\":[5980659,12791.976772876955,0,0],\\\"KGI\\\":[0,0,0,0],\\\"FLCM\\\":[0,0,0,0],\\\"STM\\\":[0,0,0,0],\\\"DCOMM\\\":[0,0,0,0],\\\"HLS\\\":[0,0,0,0],\\\"VITA\\\":[0,0,0,0],\\\"ICRS\\\":[0,0,0,0],\\\"UNV\\\":[0,0,0,0],\\\"AERO\\\":[0,0,0,0],\\\"OMN\\\":[0,0,0,0],\\\"SLRS\\\":[0,0,0,0],\\\"GPH\\\":[0,0,0,0],\\\"NVMD\\\":[0,0,0,0],\\\"WDS\\\":[0,0,0,0],\\\"LXO\\\":[0,0,0,0],\\\"RHOC\\\":[0,0,0,0],\\\"APHE\\\":[0,0,0,0],\\\"SYSC\\\":[0,0,0,0],\\\"CTK\\\":[0,0,0,0],\\\"NTLK\\\":[0,0,0,0],\\\"OMGA\\\":[0,0,0,0],\\\"FNS\\\":[0,0,0,0],\\\"JGN\\\":[0,0,0,0],\\\"SGC\\\":[0,0,0,0],\\\"CTYS\\\":[64900000,120.35662065922169,0,0],\\\"MDYN\\\":[0,0,0,0],\\\"TITN\\\":[0,0,0,0]}\"}},{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"/Temp/stockmarket-summary.txt\",\"text\":\"Market day 4? of 75 (0% certain) Current Stock Summary and Pre-4S Forecasts (by best payoff-time):\\nCLRK  -   Prob: 38% (t 3: 50%, t 3: 50%) tLast⇄:  4 Vol:0.75% ER:-9.02 BP Spread:0.20% ttProfit:  3\\nFSIG  ++  Prob: 70% (t 3:100%, t 3:100%) tLast⇄:  4 Vol:1.10% ER: 22.1 BP Spread:0.80% ttProfit:  4 Pos: 6.0m (93%) long  (held 3 ticks)\\nOMTK  --  Prob: 39% (t 3:  0%, t 3:  0%) tLast⇄:  4 Vol:0.61% ER:-6.78 BP Spread:0.40% ttProfit:  6\\nFLCM  -   Prob: 34% (t 3: 50%, t 3: 50%) tLast⇄:  4 Vol:1.29% ER:-21.1 BP Spread:1.39% ttProfit:  7\\nECP   --  Prob: 31% (t 3:  0%, t 3:  0%) tLast⇄:  4 Vol:0.50% ER:-9.66 BP Spread:0.60% ttProfit:  7\\nMGCP  ++  Prob: 66% (t 3:100%, t 3:100%) tLast⇄:  4 Vol:0.45% ER: 7.42 BP Spread:0.60% ttProfit:  9 Pos: 1.1m ( 7%) long  (held 3 ticks)\\nKGI   ++  Prob: 55% (t 3:100%, t 3:100%) tLast⇄:  4 Vol:0.84% ER: 4.57 BP Spread:0.40% ttProfit:  9\\nJGN   -   Prob: 44% (t 3: 50%, t 3: 50%) tLast⇄:  4 Vol:3.11% ER:-17.5 BP Spread:1.78% ttProfit: 11\\nWDS   -   Prob: 44% (t 3: 50%, t 3: 50%) tLast⇄:  4 Vol:2.46% ER:-15.2 BP Spread:1.59% ttProfit: 11\\nBLD   +   Prob: 66% (t 3: 50%, t 3: 50%) tLast⇄:  4 Vol:0.71% ER: 11.3 BP Spread:1.19% ttProfit: 11 Pos: 944k ( 6%) long  (held 3 ticks)\\nAPHE  +   Prob: 62% (t 3: 50%, t 3: 50%) tLast⇄:  4 Vol:1.93% ER: 22.7 BP Spread:2.57% ttProfit: 12\\nCTYS  +   Prob: 59% (t 3: 50%, t 3: 50%) tLast⇄:  4 Vol:1.36% ER: 12.0 BP Spread:1.39% ttProfit: 12 Pos: 64.9m (max) long  (held 3 ticks)\\nUNV   -   Prob: 39% (t 3:100%, t 3:100%) tLast⇄:  4 Vol:0.55% ER:-6.09 BP Spread:1.00% ttProfit: 17\\nSGC   -   Prob: 44% (t 3: 50%, t 3: 50%) tLast⇄:  4 Vol:1.37% ER:-8.58 BP Spread:1.59% ttProfit: 19\\nDCOMM +   Prob: 59% (t 3: 50%, t 3: 50%) tLast⇄:  4 Vol:0.67% ER: 6.33 BP Spread:1.19% ttProfit: 19\\nOMGA  +   Prob: 57% (t 3: 50%, t 3: 50%) tLast⇄:  4 Vol:1.02% ER: 6.72 BP Spread:1.39% ttProfit: 21\\nFNS   -   Prob: 43% (t 3: 50%, t 3: 50%) tLast⇄:  4 Vol:0.77% ER:-5.74 BP Spread:1.19% ttProfit: 21\\nMDYN  ++  Prob: 57% (t 3:100%, t 3:100%) tLast⇄:  4 Vol:0.76% ER: 5.54 BP Spread:1.19% ttProfit: 22\\nSYSC  +   Prob: 57% (t 3: 50%, t 3: 50%) tLast⇄:  4 Vol:1.57% ER: 10.2 BP Spread:2.37% ttProfit: 24\\nNVMD  -   Prob: 45% (t 3:100%, t 3:100%) tLast⇄:  4 Vol:0.79% ER:-4.24 BP Spread:1.00% ttProfit: 24\\nVITA  ++  Prob: 57% (t 3:100%, t 3:100%) tLast⇄:  4 Vol:0.72% ER: 4.82 BP Spread:1.19% ttProfit: 25\\nLXO   +   Prob: 57% (t 3: 50%, t 3: 50%) tLast⇄:  4 Vol:1.15% ER: 7.84 BP Spread:1.98% ttProfit: 26\\nTITN  +   Prob: 63% (t 3: 50%, t 3: 50%) tLast⇄:  4 Vol:0.55% ER: 7.00 BP Spread:1.78% ttProfit: 26\\nOMN   -   Prob: 45% (t 3:100%, t 3:100%) tLast⇄:  4 Vol:0.71% ER:-3.78 BP Spread:1.00% ttProfit: 27\\nSLRS  ++  Prob: 58% (t 3:100%, t 3:100%) tLast⇄:  4 Vol:0.72% ER: 5.74 BP Spread:1.59% ttProfit: 28\\nGPH   -   Prob: 39% (t 3:100%, t 3:100%) tLast⇄:  4 Vol:0.57% ER:-6.12 BP Spread:1.78% ttProfit: 30\\nSTM   ++  Prob: 57% (t 3:100%, t 3:100%) tLast⇄:  4 Vol:0.81% ER: 5.98 BP Spread:1.98% ttProfit: 34\\nHLS   -   Prob: 41% (t 3: 50%, t 3: 50%) tLast⇄:  4 Vol:0.57% ER:-5.12 BP Spread:1.78% ttProfit: 36\\nICRS  -   Prob: 45% (t 3: 50%, t 3: 50%) tLast⇄:  4 Vol:0.70% ER:-3.73 BP Spread:1.39% ttProfit: 38\\nCTK   +   Prob: 56% (t 3: 50%, t 3: 50%) tLast⇄:  4 Vol:0.96% ER: 5.72 BP Spread:2.37% ttProfit: 42\\nAERO  +   Prob: 55% (t 3: 50%, t 3: 50%) tLast⇄:  4 Vol:0.62% ER: 3.37 BP Spread:1.59% ttProfit: 48\\nNTLK  +   Prob: 53% (t 3: 50%, t 3: 50%) tLast⇄:  4 Vol:2.67% ER: 7.48 BP Spread:3.92% ttProfit: 54\\nRHOC  -   Prob: 48% (t 3: 50%, t 3: 50%) tLast⇄:  4 Vol:0.53% ER:-0.96 BP Spread:1.19% ttProfit:126\"}},{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"/Temp/stock-probabilities.txt\",\"text\":\"{\\\"CLRK\\\":{\\\"prob\\\":0.3797584824587489,\\\"sharesLong\\\":0,\\\"sharesShort\\\":0},\\\"FSIG\\\":{\\\"prob\\\":0.7012869845421593,\\\"sharesLong\\\":5980659,\\\"sharesShort\\\":0},\\\"OMTK\\\":{\\\"prob\\\":0.38889008565980043,\\\"sharesLong\\\":0,\\\"sharesShort\\\":0},\\\"FLCM\\\":{\\\"prob\\\":0.33635976980872273,\\\"sharesLong\\\":0,\\\"sharesShort\\\":0},\\\"ECP\\\":{\\\"prob\\\":0.3068384674577897,\\\"sharesLong\\\":0,\\\"sharesShort\\\":0},\\\"MGCP\\\":{\\\"prob\\\":0.6649474636131449,\\\"sharesLong\\\":1124501,\\\"sharesShort\\\":0},\\\"KGI\\\":{\\\"prob\\\":0.5544265851605964,\\\"sharesLong\\\":0,\\\"sharesShort\\\":0},\\\"JGN\\\":{\\\"prob\\\":0.44361291596368213,\\\"sharesLong\\\":0,\\\"sharesShort\\\":0},\\\"WDS\\\":{\\\"prob\\\":0.4382178431594793,\\\"sharesLong\\\":0,\\\"sharesShort\\\":0},\\\"BLD\\\":{\\\"prob\\\":0.6593565984745328,\\\"sharesLong\\\":943500,\\\"sharesShort\\\":0},\\\"APHE\\\":{\\\"prob\\\":0.617631330435543,\\\"sharesLong\\\":0,\\\"sharesShort\\\":0},\\\"CTYS\\\":{\\\"prob\\\":0.5880630453603876,\\\"sharesLong\\\":64900000,\\\"sharesShort\\\":0},\\\"UNV\\\":{\\\"prob\\\":0.38935827715565174,\\\"sharesLong\\\":0,\\\"sharesShort\\\":0},\\\"SGC\\\":{\\\"prob\\\":0.4373521938156213,\\\"sharesLong\\\":0,\\\"sharesShort\\\":0},\\\"DCOMM\\\":{\\\"prob\\\":0.5945505084042653,\\\"sharesLong\\\":0,\\\"sharesShort\\\":0},\\\"OMGA\\\":{\\\"prob\\\":0.5658513679005411,\\\"sharesLong\\\":0,\\\"sharesShort\\\":0},\\\"FNS\\\":{\\\"prob\\\":0.42548056202397405,\\\"sharesLong\\\":0,\\\"sharesShort\\\":0},\\\"MDYN\\\":{\\\"prob\\\":0.5728944205104515,\\\"sharesLong\\\":0,\\\"sharesShort\\\":0},\\\"SYSC\\\":{\\\"prob\\\":0.5651318846504731,\\\"sharesLong\\\":0,\\\"sharesShort\\\":0},\\\"NVMD\\\":{\\\"prob\\\":0.4463032303535956,\\\"sharesLong\\\":0,\\\"sharesShort\\\":0},\\\"VITA\\\":{\\\"prob\\\":0.566973969136014,\\\"sharesLong\\\":0,\\\"sharesShort\\\":0},\\\"LXO\\\":{\\\"prob\\\":0.5681585020241842,\\\"sharesLong\\\":0,\\\"sharesShort\\\":0},\\\"TITN\\\":{\\\"prob\\\":0.6272153690734933,\\\"sharesLong\\\":0,\\\"sharesShort\\\":0},\\\"OMN\\\":{\\\"prob\\\":0.4467008549079206,\\\"sharesLong\\\":0,\\\"sharesShort\\\":0},\\\"SLRS\\\":{\\\"prob\\\":0.579682034663912,\\\"sharesLong\\\":0,\\\"sharesShort\\\":0},\\\"GPH\\\":{\\\"prob\\\":0.3926529659174436,\\\"sharesLong\\\":0,\\\"sharesShort\\\":0},\\\"STM\\\":{\\\"prob\\\":0.5737726411013773,\\\"sharesLong\\\":0,\\\"sharesShort\\\":0},\\\"HLS\\\":{\\\"prob\\\":0.4101437937770072,\\\"sharesLong\\\":0,\\\"sharesShort\\\":0},\\\"ICRS\\\":{\\\"prob\\\":0.4467571812180479,\\\"sharesLong\\\":0,\\\"sharesShort\\\":0},\\\"CTK\\\":{\\\"prob\\\":0.5595700168577675,\\\"sharesLong\\\":0,\\\"sharesShort\\\":0},\\\"AERO\\\":{\\\"prob\\\":0.5543672856610388,\\\"sharesLong\\\":0,\\\"sharesShort\\\":0},\\\"NTLK\\\":{\\\"prob\\\":0.5280176248608003,\\\"sharesLong\\\":0,\\\"sharesShort\\\":0},\\\"RHOC\\\":{\\\"prob\\\":0.4819773787873267,\\\"sharesLong\\\":0,\\\"sharesShort\\\":0}}\"}},{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"/Temp/gang-member-names.txt\",\"text\":\"[\\\"Thug 1\\\",\\\"Thug 2\\\",\\\"Thug 3\\\",\\\"Thug 4\\\",\\\"Thug 5\\\",\\\"Thug 6\\\",\\\"Thug 7\\\",\\\"Thug 8\\\",\\\"Thug 9\\\",\\\"Thug 10\\\",\\\"Thug 11\\\"]\"}},{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"/Temp/gang-getMemberInformation.txt\",\"text\":\"{\\\"Thug 1\\\":{\\\"name\\\":\\\"Thug 1\\\",\\\"task\\\":\\\"Traffick Illegal Arms\\\",\\\"earnedRespect\\\":3439.1114211689583,\\\"hack\\\":3,\\\"str\\\":454324,\\\"def\\\":149756,\\\"dex\\\":2487,\\\"agi\\\":28659,\\\"cha\\\":8,\\\"hack_exp\\\":29.99725628098488,\\\"str_exp\\\":510233.5006366789,\\\"def_exp\\\":243546.38440893448,\\\"dex_exp\\\":15626.146397960136,\\\"agi_exp\\\":67757.04218058639,\\\"cha_exp\\\":92.05996527645442,\\\"hack_mult\\\":1.3946625000000001,\\\"str_mult\\\":29.206517322318344,\\\"def_mult\\\":15.515548794797638,\\\"dex_mult\\\":2.2200750000000005,\\\"agi_mult\\\":7.285657510010882,\\\"cha_mult\\\":1.4592614400000004,\\\"hack_asc_mult\\\":1,\\\"str_asc_mult\\\":70.51575798511534,\\\"def_asc_mult\\\":49.0028642187942,\\\"dex_asc_mult\\\":10.17715463272265,\\\"agi_asc_mult\\\":25.1825592898844,\\\"cha_asc_mult\\\":1,\\\"hack_asc_points\\\":203.05497989010132,\\\"str_asc_points\\\":9944944.248430718,\\\"def_asc_points\\\":4802561.403291162,\\\"dex_asc_points\\\":207148.9528366962,\\\"agi_asc_points\\\":1268322.584777086,\\\"cha_asc_points\\\":415.72649541651367,\\\"upgrades\\\":[\\\"Baseball Bat\\\",\\\"Bulletproof Vest\\\",\\\"Ford Flex V20\\\",\\\"Full Body Armor\\\",\\\"NUKE Rootkit\\\",\\\"ATX1070 Superbike\\\",\\\"Katana\\\",\\\"Mercedes-Benz S9001\\\",\\\"Glock 18C\\\",\\\"Liquid Body Armor\\\",\\\"White Ferrari\\\",\\\"Graphene Plating Armor\\\",\\\"P90C\\\",\\\"Steyr AUG\\\",\\\"AK-47\\\",\\\"M15A10 Assault Rifle\\\",\\\"AWM Sniper Rifle\\\"],\\\"augmentations\\\":[\\\"Bionic Arms\\\",\\\"Bionic Legs\\\",\\\"Nanofiber Weave\\\",\\\"Bionic Spine\\\",\\\"Synfibril Muscle\\\",\\\"BrachiBlades\\\",\\\"Synthetic Heart\\\",\\\"BitWire\\\",\\\"Neuralstimulator\\\",\\\"DataJack\\\",\\\"Graphene Bone Lacings\\\"],\\\"respectGain\\\":34.572954724350915,\\\"wantedLevelGain\\\":0.00006033370219223602,\\\"moneyGain\\\":120403.96649966901},\\\"Thug 2\\\":{\\\"name\\\":\\\"Thug 2\\\",\\\"task\\\":\\\"Traffick Illegal Arms\\\",\\\"earnedRespect\\\":81136.35567985442,\\\"hack\\\":35,\\\"str\\\":453846,\\\"def\\\":157050,\\\"dex\\\":2820,\\\"agi\\\":29593,\\\"cha\\\":54,\\\"hack_exp\\\":955.4249828276281,\\\"str_exp\\\":1076888.0561594348,\\\"def_exp\\\":521761.9857554245,\\\"dex_exp\\\":32545.65845964229,\\\"agi_exp\\\":103877.74701541105,\\\"cha_exp\\\":1140.0257970402379,\\\"hack_mult\\\":1.05,\\\"str_mult\\\":29.206517322318344,\\\"def_mult\\\":15.515548794797638,\\\"dex_mult\\\":2.2200750000000005,\\\"agi_mult\\\":7.285657510010882,\\\"cha_mult\\\":1.4592614400000004,\\\"hack_asc_mult\\\":1,\\\"str_asc_mult\\\":63.55961707006381,\\\"def_asc_mult\\\":45.73689749855474,\\\"dex_asc_mult\\\":9.551392930774124,\\\"agi_asc_mult\\\":23.92207268581032,\\\"cha_asc_mult\\\":1,\\\"hack_asc_points\\\":0,\\\"str_asc_points\\\":8079649.844186293,\\\"def_asc_points\\\":4183727.5855866056,\\\"dex_asc_points\\\":182458.21383608383,\\\"agi_asc_points\\\":1144531.1231703844,\\\"cha_asc_points\\\":306.7389869509873,\\\"upgrades\\\":[\\\"Baseball Bat\\\",\\\"Bulletproof Vest\\\",\\\"Ford Flex V20\\\",\\\"Full Body Armor\\\",\\\"ATX1070 Superbike\\\",\\\"Katana\\\",\\\"Mercedes-Benz S9001\\\",\\\"Glock 18C\\\",\\\"Liquid Body Armor\\\",\\\"White Ferrari\\\",\\\"Graphene Plating Armor\\\",\\\"P90C\\\",\\\"Steyr AUG\\\",\\\"AK-47\\\",\\\"NUKE Rootkit\\\",\\\"M15A10 Assault Rifle\\\",\\\"AWM Sniper Rifle\\\"],\\\"augmentations\\\":[\\\"Bionic Arms\\\",\\\"Bionic Legs\\\",\\\"Nanofiber Weave\\\",\\\"Bionic Spine\\\",\\\"Synfibril Muscle\\\",\\\"BrachiBlades\\\",\\\"Synthetic Heart\\\",\\\"Graphene Bone Lacings\\\"],\\\"respectGain\\\":34.8261979779461,\\\"wantedLevelGain\\\":0.00005976393807778701,\\\"moneyGain\\\":121285.72703718995},\\\"Thug 3\\\":{\\\"name\\\":\\\"Thug 3\\\",\\\"task\\\":\\\"Traffick Illegal Arms\\\",\\\"earnedRespect\\\":29303.612255058975,\\\"hack\\\":25,\\\"str\\\":156518,\\\"def\\\":55452,\\\"dex\\\":3150,\\\"agi\\\":30106,\\\"cha\\\":44,\\\"hack_exp\\\":580.208273486204,\\\"str_exp\\\":423446.5054179004,\\\"def_exp\\\":209296.3521158314,\\\"dex_exp\\\":31389.59866010751,\\\"agi_exp\\\":101780.2079573429,\\\"cha_exp\\\":797.5919708519287,\\\"hack_mult\\\":1.05,\\\"str_mult\\\":17.180304307246086,\\\"def_mult\\\":9.126793408704494,\\\"dex_mult\\\":2.2200750000000005,\\\"agi_mult\\\":7.285657510010882,\\\"cha_mult\\\":1.4592614400000004,\\\"hack_asc_mult\\\":1,\\\"str_asc_mult\\\":42.44515505122178,\\\"def_asc_mult\\\":31.623310307728687,\\\"dex_asc_mult\\\":10.762000378330923,\\\"agi_asc_mult\\\":24.430187980149544,\\\"cha_asc_mult\\\":1,\\\"hack_asc_points\\\":185.46776081588519,\\\"str_asc_points\\\":3603182.374644516,\\\"def_asc_points\\\":2000067.509637799,\\\"dex_asc_points\\\":231641.30428638982,\\\"agi_asc_points\\\":1193668.1694908864,\\\"cha_asc_points\\\":883.2258658768717,\\\"upgrades\\\":[\\\"Baseball Bat\\\",\\\"Bulletproof Vest\\\",\\\"Ford Flex V20\\\",\\\"Full Body Armor\\\",\\\"NUKE Rootkit\\\",\\\"ATX1070 Superbike\\\",\\\"Katana\\\",\\\"Mercedes-Benz S9001\\\",\\\"Glock 18C\\\",\\\"Liquid Body Armor\\\",\\\"White Ferrari\\\",\\\"Graphene Plating Armor\\\",\\\"P90C\\\",\\\"Steyr AUG\\\",\\\"AK-47\\\",\\\"M15A10 Assault Rifle\\\",\\\"AWM Sniper Rifle\\\"],\\\"augmentations\\\":[\\\"Bionic Arms\\\",\\\"Bionic Legs\\\",\\\"Nanofiber Weave\\\",\\\"Bionic Spine\\\",\\\"Synfibril Muscle\\\",\\\"BrachiBlades\\\",\\\"Synthetic Heart\\\"],\\\"respectGain\\\":18.25250982691185,\\\"wantedLevelGain\\\":0.00013841740411038537,\\\"moneyGain\\\":63581.359664554686},\\\"Thug 4\\\":{\\\"name\\\":\\\"Thug 4\\\",\\\"task\\\":\\\"Traffick Illegal Arms\\\",\\\"earnedRespect\\\":1602.2041609272924,\\\"hack\\\":2,\\\"str\\\":128041,\\\"def\\\":45533,\\\"dex\\\":2472,\\\"agi\\\":26942,\\\"cha\\\":8,\\\"hack_exp\\\":27.214847193689856,\\\"str_exp\\\":142968.52526910615,\\\"def_exp\\\":76823.06784814064,\\\"dex_exp\\\":12506.798963036235,\\\"agi_exp\\\":50364.18674901313,\\\"cha_exp\\\":91.90178413941985,\\\"hack_mult\\\":1.05,\\\"str_mult\\\":17.180304307246086,\\\"def_mult\\\":9.126793408704494,\\\"dex_mult\\\":2.2200750000000005,\\\"agi_mult\\\":7.285657510010882,\\\"cha_mult\\\":1.4592614400000004,\\\"hack_asc_mult\\\":1,\\\"str_asc_mult\\\":41.41117201712039,\\\"def_asc_mult\\\":31.142833114102288,\\\"dex_asc_mult\\\":10.788246081535126,\\\"agi_asc_mult\\\":25.1908095844805,\\\"cha_asc_mult\\\":1,\\\"hack_asc_points\\\":246.02903498784394,\\\"str_asc_points\\\":3429770.3356630704,\\\"def_asc_points\\\":1939752.1087456518,\\\"dex_asc_points\\\":232772.507031516,\\\"agi_asc_points\\\":1269153.7750431094,\\\"cha_asc_points\\\":754.2101277134102,\\\"upgrades\\\":[\\\"Baseball Bat\\\",\\\"Bulletproof Vest\\\",\\\"Ford Flex V20\\\",\\\"Full Body Armor\\\",\\\"NUKE Rootkit\\\",\\\"ATX1070 Superbike\\\",\\\"Katana\\\",\\\"Mercedes-Benz S9001\\\",\\\"Glock 18C\\\",\\\"Liquid Body Armor\\\",\\\"White Ferrari\\\",\\\"Graphene Plating Armor\\\",\\\"P90C\\\",\\\"Steyr AUG\\\",\\\"AK-47\\\",\\\"M15A10 Assault Rifle\\\",\\\"AWM Sniper Rifle\\\"],\\\"augmentations\\\":[\\\"Bionic Arms\\\",\\\"Bionic Legs\\\",\\\"Nanofiber Weave\\\",\\\"Bionic Spine\\\",\\\"Synfibril Muscle\\\",\\\"BrachiBlades\\\",\\\"Synthetic Heart\\\"],\\\"respectGain\\\":16.125399141529286,\\\"wantedLevelGain\\\":0.0001626044263427648,\\\"moneyGain\\\":56176.31331817478},\\\"Thug 5\\\":{\\\"name\\\":\\\"Thug 5\\\",\\\"task\\\":\\\"Traffick Illegal Arms\\\",\\\"earnedRespect\\\":38853.64496303246,\\\"hack\\\":35,\\\"str\\\":137156,\\\"def\\\":49792,\\\"dex\\\":2818,\\\"agi\\\":27653,\\\"cha\\\":54,\\\"hack_exp\\\":955.4249828276281,\\\"str_exp\\\":399473.2076621069,\\\"def_exp\\\":214101.53044455295,\\\"dex_exp\\\":32374.738181622284,\\\"agi_exp\\\":97339.60806012378,\\\"cha_exp\\\":1140.0257970402379,\\\"hack_mult\\\":1.05,\\\"str_mult\\\":17.180304307246086,\\\"def_mult\\\":9.126793408704494,\\\"dex_mult\\\":2.2200750000000005,\\\"agi_mult\\\":7.285657510010882,\\\"cha_mult\\\":1.4592614400000004,\\\"hack_asc_mult\\\":1,\\\"str_asc_mult\\\":37.52003967021081,\\\"def_asc_mult\\\":28.288979815410357,\\\"dex_asc_mult\\\":9.556942423891316,\\\"agi_asc_mult\\\":22.629934973700276,\\\"cha_asc_mult\\\":1,\\\"hack_asc_points\\\":25.196668529915314,\\\"str_asc_points\\\":2815506.7537083854,\\\"def_asc_points\\\":1600532.7579933892,\\\"dex_asc_points\\\":182670.29698714725,\\\"agi_asc_points\\\":1024227.9138278058,\\\"cha_asc_points\\\":406.7025853845498,\\\"upgrades\\\":[\\\"Baseball Bat\\\",\\\"Bulletproof Vest\\\",\\\"Ford Flex V20\\\",\\\"Full Body Armor\\\",\\\"ATX1070 Superbike\\\",\\\"Katana\\\",\\\"Mercedes-Benz S9001\\\",\\\"Glock 18C\\\",\\\"Liquid Body Armor\\\",\\\"White Ferrari\\\",\\\"Graphene Plating Armor\\\",\\\"P90C\\\",\\\"Steyr AUG\\\",\\\"AK-47\\\",\\\"NUKE Rootkit\\\",\\\"M15A10 Assault Rifle\\\",\\\"AWM Sniper Rifle\\\"],\\\"augmentations\\\":[\\\"Bionic Arms\\\",\\\"Bionic Legs\\\",\\\"Nanofiber Weave\\\",\\\"Bionic Spine\\\",\\\"Synfibril Muscle\\\",\\\"BrachiBlades\\\",\\\"Synthetic Heart\\\"],\\\"respectGain\\\":16.89461791206234,\\\"wantedLevelGain\\\":0.00015304850039538938,\\\"moneyGain\\\":58854.12717735132},\\\"Thug 6\\\":{\\\"name\\\":\\\"Thug 6\\\",\\\"task\\\":\\\"Traffick Illegal Arms\\\",\\\"earnedRespect\\\":1581.4208280731764,\\\"hack\\\":2,\\\"str\\\":122899,\\\"def\\\":46003,\\\"dex\\\":2815,\\\"agi\\\":29062,\\\"cha\\\":12,\\\"hack_exp\\\":31.66614821813076,\\\"str_exp\\\":318534.28686402075,\\\"def_exp\\\":155043.6010014545,\\\"dex_exp\\\":24744.42302299321,\\\"agi_exp\\\":108585.27087075851,\\\"cha_exp\\\":140.2333407846166,\\\"hack_mult\\\":1.05,\\\"str_mult\\\":17.180304307246086,\\\"def_mult\\\":9.126793408704494,\\\"dex_mult\\\":2.2200750000000005,\\\"agi_mult\\\":7.285657510010882,\\\"cha_mult\\\":1.4592614400000004,\\\"hack_asc_mult\\\":1,\\\"str_asc_mult\\\":34.80322245829478,\\\"def_asc_mult\\\":27.610351350837885,\\\"dex_asc_mult\\\":10.1925319613143,\\\"agi_asc_mult\\\":23.29913300658323,\\\"cha_asc_mult\\\":1,\\\"hack_asc_points\\\":111.85655615993232,\\\"str_asc_points\\\":2422528.5869631087,\\\"def_asc_points\\\":1524663.003433431,\\\"dex_asc_points\\\":207775.4155648271,\\\"agi_asc_points\\\":1085699.197716912,\\\"cha_asc_points\\\":415.4176953075005,\\\"upgrades\\\":[\\\"Baseball Bat\\\",\\\"Bulletproof Vest\\\",\\\"Ford Flex V20\\\",\\\"Full Body Armor\\\",\\\"NUKE Rootkit\\\",\\\"ATX1070 Superbike\\\",\\\"Katana\\\",\\\"Mercedes-Benz S9001\\\",\\\"Glock 18C\\\",\\\"Liquid Body Armor\\\",\\\"White Ferrari\\\",\\\"Graphene Plating Armor\\\",\\\"P90C\\\",\\\"Steyr AUG\\\",\\\"AK-47\\\",\\\"M15A10 Assault Rifle\\\",\\\"AWM Sniper Rifle\\\"],\\\"augmentations\\\":[\\\"Bionic Arms\\\",\\\"Bionic Legs\\\",\\\"Nanofiber Weave\\\",\\\"Bionic Spine\\\",\\\"Synfibril Muscle\\\",\\\"BrachiBlades\\\",\\\"Synthetic Heart\\\"],\\\"respectGain\\\":15.87967026141263,\\\"wantedLevelGain\\\":0.0001658822381131659,\\\"moneyGain\\\":55320.89085702528},\\\"Thug 7\\\":{\\\"name\\\":\\\"Thug 7\\\",\\\"task\\\":\\\"Traffick Illegal Arms\\\",\\\"earnedRespect\\\":15227.573070073136,\\\"hack\\\":21,\\\"str\\\":107677,\\\"def\\\":39579,\\\"dex\\\":2294,\\\"agi\\\":25292,\\\"cha\\\":34,\\\"hack_exp\\\":442.4517961799269,\\\"str_exp\\\":292913.81027217297,\\\"def_exp\\\":153804.9355725133,\\\"dex_exp\\\":23049.224018512657,\\\"agi_exp\\\":88803.51270477605,\\\"cha_exp\\\":548.5931957695158,\\\"hack_mult\\\":1.05,\\\"str_mult\\\":17.180304307246086,\\\"def_mult\\\":9.126793408704494,\\\"dex_mult\\\":2.2200750000000005,\\\"agi_mult\\\":7.285657510010882,\\\"cha_mult\\\":1.4592614400000004,\\\"hack_asc_mult\\\":1,\\\"str_asc_mult\\\":30.895137503592437,\\\"def_asc_mult\\\":23.7883717118469,\\\"dex_asc_mult\\\":8.458084345444975,\\\"agi_asc_mult\\\":21.06414735565933,\\\"cha_asc_mult\\\":1,\\\"hack_asc_points\\\":0,\\\"str_asc_points\\\":1909019.042731768,\\\"def_asc_points\\\":1131773.2574019956,\\\"dex_asc_points\\\":143078.38158932273,\\\"agi_asc_points\\\":887396.6076418598,\\\"cha_asc_points\\\":35.13864126616977,\\\"upgrades\\\":[\\\"Baseball Bat\\\",\\\"Bulletproof Vest\\\",\\\"Ford Flex V20\\\",\\\"Full Body Armor\\\",\\\"NUKE Rootkit\\\",\\\"ATX1070 Superbike\\\",\\\"Katana\\\",\\\"Mercedes-Benz S9001\\\",\\\"Glock 18C\\\",\\\"Liquid Body Armor\\\",\\\"White Ferrari\\\",\\\"Graphene Plating Armor\\\",\\\"P90C\\\",\\\"Steyr AUG\\\",\\\"AK-47\\\",\\\"M15A10 Assault Rifle\\\",\\\"AWM Sniper Rifle\\\"],\\\"augmentations\\\":[\\\"Bionic Arms\\\",\\\"Bionic Legs\\\",\\\"Nanofiber Weave\\\",\\\"Bionic Spine\\\",\\\"Synfibril Muscle\\\",\\\"BrachiBlades\\\",\\\"Synthetic Heart\\\"],\\\"respectGain\\\":14.582775980833821,\\\"wantedLevelGain\\\":0.0001853051997283263,\\\"moneyGain\\\":50806.298490580906},\\\"Thug 8\\\":{\\\"name\\\":\\\"Thug 8\\\",\\\"task\\\":\\\"Traffick Illegal Arms\\\",\\\"earnedRespect\\\":895.7677983415269,\\\"hack\\\":2,\\\"str\\\":46618,\\\"def\\\":21530,\\\"dex\\\":622,\\\"agi\\\":10050,\\\"cha\\\":8,\\\"hack_exp\\\":27.220168068205613,\\\"str_exp\\\":75729.4415902414,\\\"def_exp\\\":43908.338595952184,\\\"dex_exp\\\":5585.79932467978,\\\"agi_exp\\\":29415.266868534014,\\\"cha_exp\\\":91.91807528936761,\\\"hack_mult\\\":1.05,\\\"str_mult\\\":17.180304307246086,\\\"def_mult\\\":9.126793408704494,\\\"dex_mult\\\":2.2200750000000005,\\\"agi_mult\\\":7.285657510010882,\\\"cha_mult\\\":1.4592614400000004,\\\"hack_asc_mult\\\":1,\\\"str_asc_mult\\\":22.082725184437255,\\\"def_asc_mult\\\":16.55930671437516,\\\"dex_asc_mult\\\":4.434436184334397,\\\"agi_asc_mult\\\":13.81331055016015,\\\"cha_asc_mult\\\":1,\\\"hack_asc_points\\\":0,\\\"str_asc_points\\\":975293.5031427589,\\\"def_asc_points\\\":548421.2777215005,\\\"dex_asc_points\\\":39328.44854586843,\\\"agi_asc_points\\\":381615.0967103314,\\\"cha_asc_points\\\":0,\\\"upgrades\\\":[\\\"Baseball Bat\\\",\\\"Bulletproof Vest\\\",\\\"Ford Flex V20\\\",\\\"Full Body Armor\\\",\\\"NUKE Rootkit\\\",\\\"ATX1070 Superbike\\\",\\\"Katana\\\",\\\"Mercedes-Benz S9001\\\",\\\"Glock 18C\\\",\\\"Liquid Body Armor\\\",\\\"White Ferrari\\\",\\\"Graphene Plating Armor\\\",\\\"P90C\\\",\\\"Steyr AUG\\\",\\\"AK-47\\\",\\\"M15A10 Assault Rifle\\\",\\\"AWM Sniper Rifle\\\"],\\\"augmentations\\\":[\\\"Bionic Arms\\\",\\\"Bionic Legs\\\",\\\"Nanofiber Weave\\\",\\\"Bionic Spine\\\",\\\"Synfibril Muscle\\\",\\\"BrachiBlades\\\",\\\"Synthetic Heart\\\"],\\\"respectGain\\\":9.012584056618744,\\\"wantedLevelGain\\\":0.00034626779362334335,\\\"moneyGain\\\":31419.454395750312},\\\"Thug 9\\\":{\\\"name\\\":\\\"Thug 9\\\",\\\"task\\\":\\\"Traffick Illegal Arms\\\",\\\"earnedRespect\\\":765.1487934270061,\\\"hack\\\":2,\\\"str\\\":37227,\\\"def\\\":15917,\\\"dex\\\":311,\\\"agi\\\":7826,\\\"cha\\\":8,\\\"hack_exp\\\":26.789177232429463,\\\"str_exp\\\":53943.96208349483,\\\"def_exp\\\":29300.42679950253,\\\"dex_exp\\\":2915.133422073314,\\\"agi_exp\\\":20026.279720783004,\\\"cha_exp\\\":91.75989415233303,\\\"hack_mult\\\":1.05,\\\"str_mult\\\":13.215618697881604,\\\"def_mult\\\":9.126793408704494,\\\"dex_mult\\\":1.7760600000000002,\\\"agi_mult\\\":5.604351930777601,\\\"cha_mult\\\":1.4592614400000004,\\\"hack_asc_mult\\\":1,\\\"str_asc_mult\\\":18.90849943271909,\\\"def_asc_mult\\\":13.4455222956388,\\\"dex_asc_mult\\\":2.892457913637266,\\\"agi_asc_mult\\\":11.854653875696485,\\\"cha_asc_mult\\\":1,\\\"hack_asc_points\\\":0,\\\"str_asc_points\\\":715062.7015942762,\\\"def_asc_points\\\":361564.1396050401,\\\"dex_asc_points\\\":16732.625564325695,\\\"agi_asc_points\\\":281065.63702513144,\\\"cha_asc_points\\\":0,\\\"upgrades\\\":[\\\"Baseball Bat\\\",\\\"Bulletproof Vest\\\",\\\"Ford Flex V20\\\",\\\"Full Body Armor\\\",\\\"NUKE Rootkit\\\",\\\"ATX1070 Superbike\\\",\\\"Katana\\\",\\\"Mercedes-Benz S9001\\\",\\\"Glock 18C\\\",\\\"Liquid Body Armor\\\",\\\"White Ferrari\\\",\\\"Graphene Plating Armor\\\",\\\"P90C\\\",\\\"Steyr AUG\\\",\\\"AK-47\\\",\\\"M15A10 Assault Rifle\\\"],\\\"augmentations\\\":[\\\"Bionic Arms\\\",\\\"Bionic Legs\\\",\\\"Nanofiber Weave\\\",\\\"Bionic Spine\\\",\\\"Synfibril Muscle\\\",\\\"BrachiBlades\\\",\\\"Synthetic Heart\\\"],\\\"respectGain\\\":7.70596244506428,\\\"wantedLevelGain\\\":0.0004243672744138916,\\\"moneyGain\\\":26873.324729242922},\\\"Thug 10\\\":{\\\"name\\\":\\\"Thug 10\\\",\\\"task\\\":\\\"Traffick Illegal Arms\\\",\\\"earnedRespect\\\":706.126887577095,\\\"hack\\\":2,\\\"str\\\":31366,\\\"def\\\":15289,\\\"dex\\\":293,\\\"agi\\\":7366,\\\"cha\\\":8,\\\"hack_exp\\\":27.220168068205613,\\\"str_exp\\\":52283.01095645109,\\\"def_exp\\\":32204.113310318717,\\\"dex_exp\\\":3268.429302081141,\\\"agi_exp\\\":22936.30366138307,\\\"cha_exp\\\":91.91807528936761,\\\"hack_mult\\\":1.05,\\\"str_mult\\\":13.215618697881604,\\\"def_mult\\\":9.126793408704494,\\\"dex_mult\\\":1.7760600000000002,\\\"agi_mult\\\":5.604351930777601,\\\"cha_mult\\\":1.4592614400000004,\\\"hack_asc_mult\\\":1,\\\"str_asc_mult\\\":16.038247069172904,\\\"def_asc_mult\\\":12.625980481690355,\\\"dex_asc_mult\\\":2.5947300145657013,\\\"agi_asc_mult\\\":10.77081118330338,\\\"cha_asc_mult\\\":1,\\\"hack_asc_points\\\":0,\\\"str_asc_points\\\":514450.73810366646,\\\"def_asc_points\\\":318830.76624805166,\\\"dex_asc_points\\\":13465.247696976248,\\\"agi_asc_points\\\":232020.74709274631,\\\"cha_asc_points\\\":0,\\\"upgrades\\\":[\\\"Baseball Bat\\\",\\\"Bulletproof Vest\\\",\\\"Ford Flex V20\\\",\\\"Full Body Armor\\\",\\\"NUKE Rootkit\\\",\\\"ATX1070 Superbike\\\",\\\"Katana\\\",\\\"Mercedes-Benz S9001\\\",\\\"Glock 18C\\\",\\\"Liquid Body Armor\\\",\\\"White Ferrari\\\",\\\"Graphene Plating Armor\\\",\\\"P90C\\\",\\\"Steyr AUG\\\",\\\"AK-47\\\",\\\"M15A10 Assault Rifle\\\"],\\\"augmentations\\\":[\\\"Bionic Arms\\\",\\\"Bionic Legs\\\",\\\"Nanofiber Weave\\\",\\\"Bionic Spine\\\",\\\"Synfibril Muscle\\\",\\\"BrachiBlades\\\",\\\"Synthetic Heart\\\"],\\\"respectGain\\\":7.107277260475457,\\\"wantedLevelGain\\\":0.0004713445289609523,\\\"moneyGain\\\":24790.682711634137},\\\"Thug 11\\\":{\\\"name\\\":\\\"Thug 11\\\",\\\"task\\\":\\\"Traffick Illegal Arms\\\",\\\"earnedRespect\\\":0,\\\"hack\\\":1,\\\"str\\\":74,\\\"def\\\":31,\\\"dex\\\":3,\\\"agi\\\":27,\\\"cha\\\":1,\\\"hack_exp\\\":0,\\\"str_exp\\\":0,\\\"def_exp\\\":0,\\\"dex_exp\\\":0,\\\"agi_exp\\\":0,\\\"cha_exp\\\":0,\\\"hack_mult\\\":1,\\\"str_mult\\\":4.89762,\\\"def_mult\\\":2.5115999999999996,\\\"dex_mult\\\":1.4949999999999999,\\\"agi_mult\\\":2.76,\\\"cha_mult\\\":1,\\\"hack_asc_mult\\\":1,\\\"str_asc_mult\\\":15.19669544736641,\\\"def_asc_mult\\\":12.318602012540385,\\\"dex_asc_mult\\\":2.0531738191083435,\\\"agi_asc_mult\\\":9.85207275606052,\\\"cha_asc_mult\\\":1,\\\"hack_asc_points\\\":0,\\\"str_asc_points\\\":461879.10504001396,\\\"def_asc_points\\\":303495.9110867281,\\\"dex_asc_points\\\":8431.045462943883,\\\"agi_asc_points\\\":194126.67518141988,\\\"cha_asc_points\\\":0,\\\"upgrades\\\":[],\\\"augmentations\\\":[\\\"Bionic Arms\\\",\\\"Bionic Legs\\\",\\\"Nanofiber Weave\\\",\\\"Bionic Spine\\\",\\\"Synfibril Muscle\\\",\\\"BrachiBlades\\\",\\\"Synthetic Heart\\\"],\\\"respectGain\\\":0,\\\"wantedLevelGain\\\":0,\\\"moneyGain\\\":0}}\"}},{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"/Temp/gang-set-member-tasks.txt\",\"text\":\"true\"}},{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"/Temp/gang-other-gang-info.txt\",\"text\":\"{\\\"Slum Snakes\\\":{\\\"power\\\":11134.708555989175,\\\"territory\\\":0.3946745936103332},\\\"Tetrads\\\":{\\\"power\\\":1.8710360252204044,\\\"territory\\\":0.024328157090216417},\\\"The Syndicate\\\":{\\\"power\\\":2.389485199573434,\\\"territory\\\":0.034363345248930824},\\\"The Dark Army\\\":{\\\"power\\\":3.1850821844740187,\\\"territory\\\":0.048356947378978325},\\\"Speakers for the Dead\\\":{\\\"power\\\":96.42467252043976,\\\"territory\\\":0.25512799410551296},\\\"NiteSec\\\":{\\\"power\\\":1.7212774324719888,\\\"territory\\\":0.02621612008131844},\\\"The Black Hand\\\":{\\\"power\\\":71.66310849923607,\\\"territory\\\":0.21693284248470995}}\"}},{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"/Temp/gang-getAscensionResult.txt\",\"text\":\"{\\\"Thug 1\\\":{\\\"respect\\\":3439.1114211689583,\\\"hack\\\":1,\\\"str\\\":1.0252830167791622,\\\"def\\\":1.0249407528057863,\\\"dex\\\":1.0347013602131936,\\\"agi\\\":1.0259795900770639,\\\"cha\\\":1},\\\"Thug 2\\\":{\\\"respect\\\":81136.35567985442,\\\"hack\\\":1,\\\"str\\\":1.0644999920353295,\\\"def\\\":1.0604118096452402,\\\"dex\\\":1.083001620242864,\\\"agi\\\":1.0439762301545374,\\\"cha\\\":1},\\\"Thug 3\\\":{\\\"respect\\\":29303.612255058975,\\\"hack\\\":1,\\\"str\\\":1.0569969772253915,\\\"def\\\":1.050782879891824,\\\"dex\\\":1.063575331789273,\\\"agi\\\":1.0413592071843685,\\\"cha\\\":1},\\\"Thug 4\\\":{\\\"respect\\\":1602.2041609272924,\\\"hack\\\":1,\\\"str\\\":1.0204866545806475,\\\"def\\\":1.019357175062537,\\\"dex\\\":1.0244186978781702,\\\"agi\\\":1.019262162102498,\\\"cha\\\":1},\\\"Thug 5\\\":{\\\"respect\\\":38853.64496303246,\\\"hack\\\":1,\\\"str\\\":1.068423165045934,\\\"def\\\":1.064492425069554,\\\"dex\\\":1.0824768367540667,\\\"agi\\\":1.0459735719443333,\\\"cha\\\":1},\\\"Thug 6\\\":{\\\"respect\\\":1581.4208280731764,\\\"hack\\\":1,\\\"str\\\":1.0635203609850992,\\\"def\\\":1.0493019222912243,\\\"dex\\\":1.05559427385834,\\\"agi\\\":1.0483763989785386,\\\"cha\\\":1},\\\"Thug 7\\\":{\\\"respect\\\":15227.573070073136,\\\"hack\\\":1,\\\"str\\\":1.0737378591872528,\\\"def\\\":1.0653702341490126,\\\"dex\\\":1.0742932135867111,\\\"agi\\\":1.048305805758317,\\\"cha\\\":1},\\\"Thug 8\\\":{\\\"respect\\\":895.7677983415269,\\\"hack\\\":1,\\\"str\\\":1.0376042191169819,\\\"def\\\":1.038383234051644,\\\"dex\\\":1.0566941843522843,\\\"agi\\\":1.036561885186829,\\\"cha\\\":1},\\\"Thug 9\\\":{\\\"respect\\\":765.1487934270061,\\\"hack\\\":1,\\\"str\\\":1.0363594967122483,\\\"def\\\":1.0383988718279713,\\\"dex\\\":1.0556775291754665,\\\"agi\\\":1.0332924892944084,\\\"cha\\\":1},\\\"Thug 10\\\":{\\\"respect\\\":706.126887577095,\\\"hack\\\":1,\\\"str\\\":1.0486586569842078,\\\"def\\\":1.0477931373156382,\\\"dex\\\":1.0809558138499331,\\\"agi\\\":1.0462048452255877,\\\"cha\\\":1},\\\"Thug 11\\\":{\\\"respect\\\":667.2879806361625,\\\"hack\\\":1,\\\"str\\\":1.0649351125956257,\\\"def\\\":1.0620922029936202,\\\"dex\\\":1.122718095884222,\\\"agi\\\":1.0643594695965406,\\\"cha\\\":1}}\"}},{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"/Temp/gang-ascend-member.txt\",\"text\":\"{\\\"respect\\\":667.2879806361625,\\\"hack\\\":1,\\\"str\\\":1.0649351125956257,\\\"def\\\":1.0620922029936202,\\\"dex\\\":1.122718095884222,\\\"agi\\\":1.0643594695965406,\\\"cha\\\":1}\"}},{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"/Temp/gang-upgrade-members.txt\",\"text\":\"true\"}},{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"/Temp/transact-stock.txt\",\"text\":\"28782.025132138293\"}},{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"/Temp/copy-scripts.txt\",\"text\":\"true\"}},{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"/Temp/faction-augs.txt\",\"text\":\"{\\\"Illuminati\\\":[\\\"Synthetic Heart\\\",\\\"Synfibril Muscle\\\",\\\"NEMEAN Subdermal Weave\\\",\\\"Embedded Netburner Module Core V3 Upgrade\\\",\\\"Embedded Netburner Module Analyze Engine\\\",\\\"Embedded Netburner Module Direct Memory Access Upgrade\\\",\\\"NeuroFlux Governor\\\",\\\"QLink\\\"],\\\"Daedalus\\\":[\\\"Synthetic Heart\\\",\\\"Synfibril Muscle\\\",\\\"NEMEAN Subdermal Weave\\\",\\\"Embedded Netburner Module Core V3 Upgrade\\\",\\\"Embedded Netburner Module Analyze Engine\\\",\\\"Embedded Netburner Module Direct Memory Access Upgrade\\\",\\\"NeuroFlux Governor\\\",\\\"The Red Pill\\\"],\\\"The Covenant\\\":[\\\"Augmented Targeting III\\\",\\\"Synthetic Heart\\\",\\\"Synfibril Muscle\\\",\\\"Combat Rib III\\\",\\\"NEMEAN Subdermal Weave\\\",\\\"Graphene Bone Lacings\\\",\\\"Embedded Netburner Module Core V3 Upgrade\\\",\\\"Embedded Netburner Module Analyze Engine\\\",\\\"Embedded Netburner Module Direct Memory Access Upgrade\\\",\\\"NeuroFlux Governor\\\",\\\"SPTN-97 Gene Modification\\\"],\\\"ECorp\\\":[\\\"Graphene Bionic Spine Upgrade\\\",\\\"Graphene Bionic Legs Upgrade\\\",\\\"Embedded Netburner Module\\\",\\\"Embedded Netburner Module Core Implant\\\",\\\"Embedded Netburner Module Core V2 Upgrade\\\",\\\"Embedded Netburner Module Core V3 Upgrade\\\",\\\"Embedded Netburner Module Analyze Engine\\\",\\\"Embedded Netburner Module Direct Memory Access Upgrade\\\",\\\"PC Direct-Neural Interface\\\",\\\"PC Direct-Neural Interface Optimization Submodule\\\",\\\"NeuroFlux Governor\\\",\\\"ECorp HVMind Implant\\\"],\\\"MegaCorp\\\":[\\\"Graphene Bionic Legs Upgrade\\\",\\\"Embedded Netburner Module\\\",\\\"Embedded Netburner Module Core Implant\\\",\\\"Embedded Netburner Module Core V2 Upgrade\\\",\\\"Embedded Netburner Module Core V3 Upgrade\\\",\\\"Embedded Netburner Module Analyze Engine\\\",\\\"Embedded Netburner Module Direct Memory Access Upgrade\\\",\\\"ADR-V1 Pheromone Gene\\\",\\\"NeuroFlux Governor\\\",\\\"CordiARC Fusion Reactor\\\"],\\\"Bachman & Associates\\\":[\\\"Enhanced Social Interaction Implant\\\",\\\"Neuralstimulator\\\",\\\"Nuoptimal Nootropic Injector Implant\\\",\\\"Speech Enhancement\\\",\\\"FocusWire\\\",\\\"ADR-V2 Pheromone Gene\\\",\\\"NeuroFlux Governor\\\",\\\"SmartJaw\\\"],\\\"Blade Industries\\\":[\\\"Augmented Targeting I\\\",\\\"Augmented Targeting II\\\",\\\"Augmented Targeting III\\\",\\\"Synfibril Muscle\\\",\\\"Combat Rib I\\\",\\\"Combat Rib II\\\",\\\"Combat Rib III\\\",\\\"Nanofiber Weave\\\",\\\"Bionic Spine\\\",\\\"Bionic Legs\\\",\\\"Embedded Netburner Module\\\",\\\"Embedded Netburner Module Core Implant\\\",\\\"Embedded Netburner Module Core V2 Upgrade\\\",\\\"PC Direct-Neural Interface\\\",\\\"PC Direct-Neural Interface Optimization Submodule\\\",\\\"NeuroFlux Governor\\\",\\\"HyperSight Corneal Implant\\\",\\\"Neotra\\\"],\\\"NWO\\\":[\\\"Synthetic Heart\\\",\\\"Synfibril Muscle\\\",\\\"Enhanced Social Interaction Implant\\\",\\\"Embedded Netburner Module\\\",\\\"Embedded Netburner Module Core Implant\\\",\\\"Embedded Netburner Module Core V2 Upgrade\\\",\\\"Embedded Netburner Module Core V3 Upgrade\\\",\\\"Embedded Netburner Module Analyze Engine\\\",\\\"Embedded Netburner Module Direct Memory Access Upgrade\\\",\\\"ADR-V1 Pheromone Gene\\\",\\\"NeuroFlux Governor\\\",\\\"Neurotrainer III\\\",\\\"Power Recirculation Core\\\",\\\"Xanipher\\\",\\\"Hydroflame Left Arm\\\"],\\\"Clarke Incorporated\\\":[\\\"Enhanced Social Interaction Implant\\\",\\\"Neuralstimulator\\\",\\\"Neuronal Densification\\\",\\\"Nuoptimal Nootropic Injector Implant\\\",\\\"Speech Enhancement\\\",\\\"FocusWire\\\",\\\"ADR-V2 Pheromone Gene\\\",\\\"NeuroFlux Governor\\\",\\\"nextSENS Gene Modification\\\"],\\\"OmniTek Incorporated\\\":[\\\"Augmented Targeting I\\\",\\\"Augmented Targeting II\\\",\\\"Augmented Targeting III\\\",\\\"Combat Rib I\\\",\\\"Combat Rib II\\\",\\\"Combat Rib III\\\",\\\"Nanofiber Weave\\\",\\\"Bionic Spine\\\",\\\"Bionic Legs\\\",\\\"Enhanced Social Interaction Implant\\\",\\\"Embedded Netburner Module Core V2 Upgrade\\\",\\\"PC Direct-Neural Interface\\\",\\\"NeuroFlux Governor\\\",\\\"OmniTek InfoLoad\\\"],\\\"Four Sigma\\\":[\\\"Enhanced Social Interaction Implant\\\",\\\"Neuralstimulator\\\",\\\"Nuoptimal Nootropic Injector Implant\\\",\\\"Speech Enhancement\\\",\\\"FocusWire\\\",\\\"PC Direct-Neural Interface\\\",\\\"ADR-V1 Pheromone Gene\\\",\\\"ADR-V2 Pheromone Gene\\\",\\\"NeuroFlux Governor\\\",\\\"Neurotrainer III\\\"],\\\"KuaiGong International\\\":[\\\"Augmented Targeting I\\\",\\\"Augmented Targeting II\\\",\\\"Augmented Targeting III\\\",\\\"Synthetic Heart\\\",\\\"Synfibril Muscle\\\",\\\"Combat Rib I\\\",\\\"Combat Rib II\\\",\\\"Combat Rib III\\\",\\\"Bionic Spine\\\",\\\"Bionic Legs\\\",\\\"Embedded Netburner Module Core V2 Upgrade\\\",\\\"Speech Enhancement\\\",\\\"FocusWire\\\",\\\"NeuroFlux Governor\\\",\\\"HyperSight Corneal Implant\\\",\\\"Photosynthetic Cells\\\"],\\\"Fulcrum Secret Technologies\\\":[\\\"Synthetic Heart\\\",\\\"Synfibril Muscle\\\",\\\"Nanofiber Weave\\\",\\\"NEMEAN Subdermal Weave\\\",\\\"Graphene Bone Lacings\\\",\\\"Graphene Bionic Spine Upgrade\\\",\\\"Graphene Bionic Legs Upgrade\\\",\\\"Artificial Bio-neural Network Implant\\\",\\\"Enhanced Myelin Sheathing\\\",\\\"Embedded Netburner Module\\\",\\\"Embedded Netburner Module Core Implant\\\",\\\"Embedded Netburner Module Core V2 Upgrade\\\",\\\"Embedded Netburner Module Core V3 Upgrade\\\",\\\"Embedded Netburner Module Analyze Engine\\\",\\\"Embedded Netburner Module Direct Memory Access Upgrade\\\",\\\"PC Direct-Neural Interface Optimization Submodule\\\",\\\"PC Direct-Neural Interface NeuroNet Injector\\\",\\\"NeuroFlux Governor\\\"],\\\"BitRunners\\\":[\\\"Artificial Bio-neural Network Implant\\\",\\\"Enhanced Myelin Sheathing\\\",\\\"DataJack\\\",\\\"Embedded Netburner Module\\\",\\\"Embedded Netburner Module Core Implant\\\",\\\"Embedded Netburner Module Core V2 Upgrade\\\",\\\"Neural Accelerator\\\",\\\"Cranial Signal Processors - Gen III\\\",\\\"Cranial Signal Processors - Gen IV\\\",\\\"Cranial Signal Processors - Gen V\\\",\\\"NeuroFlux Governor\\\",\\\"Neurotrainer II\\\",\\\"BitRunners Neurolink\\\"],\\\"The Black Hand\\\":[\\\"Artificial Synaptic Potentiation\\\",\\\"Enhanced Myelin Sheathing\\\",\\\"DataJack\\\",\\\"Embedded Netburner Module\\\",\\\"Embedded Netburner Module Core Implant\\\",\\\"Neuralstimulator\\\",\\\"Cranial Signal Processors - Gen III\\\",\\\"Cranial Signal Processors - Gen IV\\\",\\\"NeuroFlux Governor\\\",\\\"The Black Hand\\\"],\\\"NiteSec\\\":[\\\"BitWire\\\",\\\"Artificial Synaptic Potentiation\\\",\\\"Neural-Retention Enhancement\\\",\\\"DataJack\\\",\\\"Embedded Netburner Module\\\",\\\"Cranial Signal Processors - Gen II\\\",\\\"Cranial Signal Processors - Gen III\\\",\\\"NeuroFlux Governor\\\",\\\"Neurotrainer II\\\",\\\"CRTX42-AA Gene Modification\\\"],\\\"Aevum\\\":[\\\"Wired Reflexes\\\",\\\"Speech Processor Implant\\\",\\\"Synaptic Enhancement Implant\\\",\\\"Neuralstimulator\\\",\\\"NeuroFlux Governor\\\",\\\"Neurotrainer I\\\",\\\"PCMatrix\\\"],\\\"Chongqing\\\":[\\\"Speech Processor Implant\\\",\\\"DataJack\\\",\\\"Neuralstimulator\\\",\\\"Nuoptimal Nootropic Injector Implant\\\",\\\"NeuroFlux Governor\\\",\\\"Neuregen Gene Modification\\\"],\\\"Ishima\\\":[\\\"Augmented Targeting I\\\",\\\"Combat Rib I\\\",\\\"Wired Reflexes\\\",\\\"Speech Processor Implant\\\",\\\"Neuralstimulator\\\",\\\"NeuroFlux Governor\\\",\\\"INFRARET Enhancement\\\"],\\\"New Tokyo\\\":[\\\"Speech Processor Implant\\\",\\\"DataJack\\\",\\\"Neuralstimulator\\\",\\\"Nuoptimal Nootropic Injector Implant\\\",\\\"NeuroFlux Governor\\\",\\\"NutriGen Implant\\\"],\\\"Sector-12\\\":[\\\"Augmented Targeting I\\\",\\\"Augmented Targeting II\\\",\\\"Wired Reflexes\\\",\\\"Speech Processor Implant\\\",\\\"Neuralstimulator\\\",\\\"NeuroFlux Governor\\\",\\\"CashRoot Starter Kit\\\"],\\\"Volhaven\\\":[\\\"Combat Rib I\\\",\\\"Combat Rib II\\\",\\\"Wired Reflexes\\\",\\\"Speech Processor Implant\\\",\\\"Neuralstimulator\\\",\\\"Nuoptimal Nootropic Injector Implant\\\",\\\"NeuroFlux Governor\\\",\\\"DermaForce Particle Barrier\\\"],\\\"Speakers for the Dead\\\":[\\\"Unstable Circadian Modulator\\\",\\\"Synthetic Heart\\\",\\\"Synfibril Muscle\\\",\\\"Nanofiber Weave\\\",\\\"Wired Reflexes\\\",\\\"Bionic Spine\\\",\\\"Bionic Legs\\\",\\\"Speech Enhancement\\\",\\\"The Shadow's Simulacrum\\\",\\\"NeuroFlux Governor\\\",\\\"Graphene BrachiBlades Upgrade\\\"],\\\"The Dark Army\\\":[\\\"HemoRecirculator\\\",\\\"Augmented Targeting I\\\",\\\"Augmented Targeting II\\\",\\\"Augmented Targeting III\\\",\\\"Combat Rib I\\\",\\\"Combat Rib II\\\",\\\"Combat Rib III\\\",\\\"Nanofiber Weave\\\",\\\"Wired Reflexes\\\",\\\"The Shadow's Simulacrum\\\",\\\"NeuroFlux Governor\\\",\\\"Power Recirculation Core\\\",\\\"Graphene Bionic Arms Upgrade\\\"],\\\"The Syndicate\\\":[\\\"HemoRecirculator\\\",\\\"Augmented Targeting I\\\",\\\"Augmented Targeting II\\\",\\\"Augmented Targeting III\\\",\\\"Combat Rib I\\\",\\\"Combat Rib II\\\",\\\"Combat Rib III\\\",\\\"Nanofiber Weave\\\",\\\"NEMEAN Subdermal Weave\\\",\\\"Wired Reflexes\\\",\\\"Bionic Spine\\\",\\\"Bionic Legs\\\",\\\"ADR-V1 Pheromone Gene\\\",\\\"The Shadow's Simulacrum\\\",\\\"NeuroFlux Governor\\\",\\\"Power Recirculation Core\\\",\\\"BrachiBlades\\\"],\\\"Silhouette\\\":[\\\"Speech Processor Implant\\\",\\\"TITN-41 Gene-Modification Injection\\\",\\\"ADR-V2 Pheromone Gene\\\",\\\"NeuroFlux Governor\\\"],\\\"Tetrads\\\":[\\\"HemoRecirculator\\\",\\\"NeuroFlux Governor\\\",\\\"LuminCloaking-V1 Skin Implant\\\",\\\"LuminCloaking-V2 Skin Implant\\\",\\\"Power Recirculation Core\\\",\\\"Bionic Arms\\\"],\\\"Slum Snakes\\\":[\\\"Unstable Circadian Modulator\\\",\\\"HemoRecirculator\\\",\\\"Augmented Targeting I\\\",\\\"Augmented Targeting II\\\",\\\"Augmented Targeting III\\\",\\\"Synthetic Heart\\\",\\\"Synfibril Muscle\\\",\\\"Combat Rib I\\\",\\\"Combat Rib II\\\",\\\"Combat Rib III\\\",\\\"Nanofiber Weave\\\",\\\"NEMEAN Subdermal Weave\\\",\\\"Wired Reflexes\\\",\\\"Graphene Bone Lacings\\\",\\\"Bionic Spine\\\",\\\"Graphene Bionic Spine Upgrade\\\",\\\"Bionic Legs\\\",\\\"Graphene Bionic Legs Upgrade\\\",\\\"Speech Processor Implant\\\",\\\"TITN-41 Gene-Modification Injection\\\",\\\"Enhanced Social Interaction Implant\\\",\\\"BitWire\\\",\\\"Artificial Bio-neural Network Implant\\\",\\\"Artificial Synaptic Potentiation\\\",\\\"Enhanced Myelin Sheathing\\\",\\\"Synaptic Enhancement Implant\\\",\\\"Neural-Retention Enhancement\\\",\\\"DataJack\\\",\\\"Embedded Netburner Module\\\",\\\"Embedded Netburner Module Core Implant\\\",\\\"Embedded Netburner Module Core V2 Upgrade\\\",\\\"Embedded Netburner Module Core V3 Upgrade\\\",\\\"Embedded Netburner Module Analyze Engine\\\",\\\"Embedded Netburner Module Direct Memory Access Upgrade\\\",\\\"Neuralstimulator\\\",\\\"Neural Accelerator\\\",\\\"Cranial Signal Processors - Gen I\\\",\\\"Cranial Signal Processors - Gen II\\\",\\\"Cranial Signal Processors - Gen III\\\",\\\"Cranial Signal Processors - Gen IV\\\",\\\"Cranial Signal Processors - Gen V\\\",\\\"Neuronal Densification\\\",\\\"Nuoptimal Nootropic Injector Implant\\\",\\\"Speech Enhancement\\\",\\\"FocusWire\\\",\\\"PC Direct-Neural Interface\\\",\\\"PC Direct-Neural Interface Optimization Submodule\\\",\\\"PC Direct-Neural Interface NeuroNet Injector\\\",\\\"ADR-V1 Pheromone Gene\\\",\\\"ADR-V2 Pheromone Gene\\\",\\\"The Shadow's Simulacrum\\\",\\\"Hacknet Node CPU Architecture Neural-Upload\\\",\\\"Hacknet Node Cache Architecture Neural-Upload\\\",\\\"Hacknet Node NIC Architecture Neural-Upload\\\",\\\"Hacknet Node Kernel Direct-Neural Interface\\\",\\\"Hacknet Node Core Direct-Neural Interface\\\",\\\"Neurotrainer I\\\",\\\"Neurotrainer II\\\",\\\"Neurotrainer III\\\",\\\"HyperSight Corneal Implant\\\",\\\"LuminCloaking-V1 Skin Implant\\\",\\\"LuminCloaking-V2 Skin Implant\\\",\\\"SmartSonar Implant\\\",\\\"Power Recirculation Core\\\",\\\"QLink\\\",\\\"SPTN-97 Gene Modification\\\",\\\"ECorp HVMind Implant\\\",\\\"CordiARC Fusion Reactor\\\",\\\"SmartJaw\\\",\\\"Neotra\\\",\\\"Xanipher\\\",\\\"Hydroflame Left Arm\\\",\\\"nextSENS Gene Modification\\\",\\\"OmniTek InfoLoad\\\",\\\"Photosynthetic Cells\\\",\\\"BitRunners Neurolink\\\",\\\"The Black Hand\\\",\\\"CRTX42-AA Gene Modification\\\",\\\"Neuregen Gene Modification\\\",\\\"CashRoot Starter Kit\\\",\\\"NutriGen Implant\\\",\\\"PCMatrix\\\",\\\"INFRARET Enhancement\\\",\\\"DermaForce Particle Barrier\\\",\\\"Graphene BrachiBlades Upgrade\\\",\\\"Graphene Bionic Arms Upgrade\\\",\\\"BrachiBlades\\\",\\\"Bionic Arms\\\",\\\"Social Negotiation Assistant (S.N.A)\\\",\\\"Neuroreceptor Management Implant\\\"],\\\"Netburners\\\":[\\\"Hacknet Node CPU Architecture Neural-Upload\\\",\\\"Hacknet Node Cache Architecture Neural-Upload\\\",\\\"Hacknet Node NIC Architecture Neural-Upload\\\",\\\"Hacknet Node Kernel Direct-Neural Interface\\\",\\\"Hacknet Node Core Direct-Neural Interface\\\",\\\"NeuroFlux Governor\\\"],\\\"Tian Di Hui\\\":[\\\"Nanofiber Weave\\\",\\\"Wired Reflexes\\\",\\\"Speech Processor Implant\\\",\\\"Nuoptimal Nootropic Injector Implant\\\",\\\"Speech Enhancement\\\",\\\"ADR-V1 Pheromone Gene\\\",\\\"NeuroFlux Governor\\\",\\\"Social Negotiation Assistant (S.N.A)\\\",\\\"Neuroreceptor Management Implant\\\"],\\\"CyberSec\\\":[\\\"BitWire\\\",\\\"Synaptic Enhancement Implant\\\",\\\"Cranial Signal Processors - Gen I\\\",\\\"Cranial Signal Processors - Gen II\\\",\\\"NeuroFlux Governor\\\",\\\"Neurotrainer I\\\"]}\"}},{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"/Temp/aug-repreqs.txt\",\"text\":\"{\\\"Artificial Bio-neural Network Implant\\\":275000,\\\"Enhanced Myelin Sheathing\\\":100000,\\\"DataJack\\\":112500,\\\"Embedded Netburner Module\\\":15000,\\\"Embedded Netburner Module Core Implant\\\":175000,\\\"Embedded Netburner Module Core V2 Upgrade\\\":1000000,\\\"Neural Accelerator\\\":200000,\\\"Cranial Signal Processors - Gen III\\\":50000,\\\"Cranial Signal Processors - Gen IV\\\":125000,\\\"Cranial Signal Processors - Gen V\\\":250000,\\\"NeuroFlux Governor\\\":58942072905622830000,\\\"Neurotrainer II\\\":10000,\\\"BitRunners Neurolink\\\":875000,\\\"Artificial Synaptic Potentiation\\\":6250,\\\"Neuralstimulator\\\":50000,\\\"The Black Hand\\\":100000,\\\"BitWire\\\":3750,\\\"Neural-Retention Enhancement\\\":20000,\\\"Cranial Signal Processors - Gen II\\\":18750,\\\"CRTX42-AA Gene Modification\\\":45000,\\\"Synaptic Enhancement Implant\\\":2000,\\\"Cranial Signal Processors - Gen I\\\":10000,\\\"Neurotrainer I\\\":1000,\\\"Hacknet Node CPU Architecture Neural-Upload\\\":3750,\\\"Hacknet Node Cache Architecture Neural-Upload\\\":2500,\\\"Hacknet Node NIC Architecture Neural-Upload\\\":1875,\\\"Hacknet Node Kernel Direct-Neural Interface\\\":7500,\\\"Hacknet Node Core Direct-Neural Interface\\\":12500,\\\"Nanofiber Weave\\\":37500,\\\"Wired Reflexes\\\":1250,\\\"Speech Processor Implant\\\":7500,\\\"Nuoptimal Nootropic Injector Implant\\\":5000,\\\"Speech Enhancement\\\":2500,\\\"ADR-V1 Pheromone Gene\\\":3750,\\\"Social Negotiation Assistant (S.N.A)\\\":6250,\\\"Neuroreceptor Management Implant\\\":75000,\\\"Augmented Targeting I\\\":5000,\\\"Augmented Targeting II\\\":8750,\\\"CashRoot Starter Kit\\\":12500,\\\"Neuregen Gene Modification\\\":37500,\\\"NutriGen Implant\\\":6250,\\\"Combat Rib I\\\":7500,\\\"INFRARET Enhancement\\\":7500,\\\"PCMatrix\\\":100000,\\\"Combat Rib II\\\":18750,\\\"DermaForce Particle Barrier\\\":15000,\\\"Unstable Circadian Modulator\\\":362500,\\\"HemoRecirculator\\\":10000,\\\"Augmented Targeting III\\\":27500,\\\"Synthetic Heart\\\":750000,\\\"Synfibril Muscle\\\":437500,\\\"Combat Rib III\\\":35000,\\\"NEMEAN Subdermal Weave\\\":875000,\\\"Graphene Bone Lacings\\\":1125000,\\\"Bionic Spine\\\":45000,\\\"Graphene Bionic Spine Upgrade\\\":1625000,\\\"Bionic Legs\\\":150000,\\\"Graphene Bionic Legs Upgrade\\\":750000,\\\"TITN-41 Gene-Modification Injection\\\":25000,\\\"Enhanced Social Interaction Implant\\\":375000,\\\"Embedded Netburner Module Core V3 Upgrade\\\":1750000,\\\"Embedded Netburner Module Analyze Engine\\\":625000,\\\"Embedded Netburner Module Direct Memory Access Upgrade\\\":1000000,\\\"Neuronal Densification\\\":187500,\\\"FocusWire\\\":75000,\\\"PC Direct-Neural Interface\\\":375000,\\\"PC Direct-Neural Interface Optimization Submodule\\\":500000,\\\"PC Direct-Neural Interface NeuroNet Injector\\\":1500000,\\\"ADR-V2 Pheromone Gene\\\":62500,\\\"The Shadow's Simulacrum\\\":37500,\\\"Neurotrainer III\\\":25000,\\\"HyperSight Corneal Implant\\\":150000,\\\"LuminCloaking-V1 Skin Implant\\\":1500,\\\"LuminCloaking-V2 Skin Implant\\\":5000,\\\"SmartSonar Implant\\\":22500,\\\"Power Recirculation Core\\\":25000,\\\"QLink\\\":1875000,\\\"SPTN-97 Gene Modification\\\":1250000,\\\"ECorp HVMind Implant\\\":1500000,\\\"CordiARC Fusion Reactor\\\":1125000,\\\"SmartJaw\\\":375000,\\\"Neotra\\\":562500,\\\"Xanipher\\\":875000,\\\"Hydroflame Left Arm\\\":1250000,\\\"nextSENS Gene Modification\\\":437500,\\\"OmniTek InfoLoad\\\":625000,\\\"Photosynthetic Cells\\\":562500,\\\"Graphene BrachiBlades Upgrade\\\":225000,\\\"Graphene Bionic Arms Upgrade\\\":500000,\\\"BrachiBlades\\\":12500,\\\"Bionic Arms\\\":62500}\"}},{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"/Temp/aug-stats.txt\",\"text\":\"{\\\"Artificial Bio-neural Network Implant\\\":{\\\"hacking_mult\\\":1.12,\\\"hacking_speed_mult\\\":1.03,\\\"hacking_money_mult\\\":1.15},\\\"Enhanced Myelin Sheathing\\\":{\\\"hacking_mult\\\":1.08,\\\"hacking_exp_mult\\\":1.1,\\\"hacking_speed_mult\\\":1.03},\\\"DataJack\\\":{\\\"hacking_money_mult\\\":1.25},\\\"Embedded Netburner Module\\\":{\\\"hacking_mult\\\":1.08},\\\"Embedded Netburner Module Core Implant\\\":{\\\"hacking_mult\\\":1.07,\\\"hacking_exp_mult\\\":1.07,\\\"hacking_chance_mult\\\":1.03,\\\"hacking_speed_mult\\\":1.03,\\\"hacking_money_mult\\\":1.1},\\\"Embedded Netburner Module Core V2 Upgrade\\\":{\\\"hacking_mult\\\":1.08,\\\"hacking_exp_mult\\\":1.15,\\\"hacking_chance_mult\\\":1.05,\\\"hacking_speed_mult\\\":1.05,\\\"hacking_money_mult\\\":1.3},\\\"Neural Accelerator\\\":{\\\"hacking_mult\\\":1.1,\\\"hacking_exp_mult\\\":1.15,\\\"hacking_money_mult\\\":1.2},\\\"Cranial Signal Processors - Gen III\\\":{\\\"hacking_mult\\\":1.09,\\\"hacking_speed_mult\\\":1.02,\\\"hacking_money_mult\\\":1.15},\\\"Cranial Signal Processors - Gen IV\\\":{\\\"hacking_speed_mult\\\":1.02,\\\"hacking_money_mult\\\":1.2,\\\"hacking_grow_mult\\\":1.25},\\\"Cranial Signal Processors - Gen V\\\":{\\\"hacking_mult\\\":1.3,\\\"hacking_money_mult\\\":1.25,\\\"hacking_grow_mult\\\":1.75},\\\"NeuroFlux Governor\\\":{\\\"hacking_mult\\\":1.01,\\\"strength_mult\\\":1.01,\\\"defense_mult\\\":1.01,\\\"dexterity_mult\\\":1.01,\\\"agility_mult\\\":1.01,\\\"charisma_mult\\\":1.01,\\\"hacking_exp_mult\\\":1.01,\\\"strength_exp_mult\\\":1.01,\\\"defense_exp_mult\\\":1.01,\\\"dexterity_exp_mult\\\":1.01,\\\"agility_exp_mult\\\":1.01,\\\"charisma_exp_mult\\\":1.01,\\\"hacking_chance_mult\\\":1.01,\\\"hacking_speed_mult\\\":1.01,\\\"hacking_money_mult\\\":1.01,\\\"hacking_grow_mult\\\":1.01,\\\"company_rep_mult\\\":1.01,\\\"faction_rep_mult\\\":1.01,\\\"crime_money_mult\\\":1.01,\\\"crime_success_mult\\\":1.01,\\\"work_money_mult\\\":1.01,\\\"hacknet_node_money_mult\\\":1.01,\\\"hacknet_node_purchase_cost_mult\\\":0.99,\\\"hacknet_node_ram_cost_mult\\\":0.99,\\\"hacknet_node_core_cost_mult\\\":0.99,\\\"hacknet_node_level_cost_mult\\\":0.99},\\\"Neurotrainer II\\\":{\\\"hacking_exp_mult\\\":1.15,\\\"strength_exp_mult\\\":1.15,\\\"defense_exp_mult\\\":1.15,\\\"dexterity_exp_mult\\\":1.15,\\\"agility_exp_mult\\\":1.15,\\\"charisma_exp_mult\\\":1.15},\\\"BitRunners Neurolink\\\":{\\\"hacking_mult\\\":1.15,\\\"hacking_exp_mult\\\":1.2,\\\"hacking_chance_mult\\\":1.1,\\\"hacking_speed_mult\\\":1.05},\\\"Artificial Synaptic Potentiation\\\":{\\\"hacking_exp_mult\\\":1.05,\\\"hacking_chance_mult\\\":1.05,\\\"hacking_speed_mult\\\":1.02},\\\"Neuralstimulator\\\":{\\\"hacking_exp_mult\\\":1.12,\\\"hacking_chance_mult\\\":1.1,\\\"hacking_speed_mult\\\":1.02},\\\"The Black Hand\\\":{\\\"hacking_mult\\\":1.1,\\\"strength_mult\\\":1.15,\\\"dexterity_mult\\\":1.15,\\\"hacking_speed_mult\\\":1.02,\\\"hacking_money_mult\\\":1.1},\\\"BitWire\\\":{\\\"hacking_mult\\\":1.05},\\\"Neural-Retention Enhancement\\\":{\\\"hacking_exp_mult\\\":1.25},\\\"Cranial Signal Processors - Gen II\\\":{\\\"hacking_mult\\\":1.07,\\\"hacking_chance_mult\\\":1.05,\\\"hacking_speed_mult\\\":1.02},\\\"CRTX42-AA Gene Modification\\\":{\\\"hacking_mult\\\":1.08,\\\"hacking_exp_mult\\\":1.15},\\\"Synaptic Enhancement Implant\\\":{\\\"hacking_speed_mult\\\":1.03},\\\"Cranial Signal Processors - Gen I\\\":{\\\"hacking_mult\\\":1.05,\\\"hacking_speed_mult\\\":1.01},\\\"Neurotrainer I\\\":{\\\"hacking_exp_mult\\\":1.1,\\\"strength_exp_mult\\\":1.1,\\\"defense_exp_mult\\\":1.1,\\\"dexterity_exp_mult\\\":1.1,\\\"agility_exp_mult\\\":1.1,\\\"charisma_exp_mult\\\":1.1},\\\"Hacknet Node CPU Architecture Neural-Upload\\\":{\\\"hacknet_node_money_mult\\\":1.15,\\\"hacknet_node_purchase_cost_mult\\\":0.85},\\\"Hacknet Node Cache Architecture Neural-Upload\\\":{\\\"hacknet_node_money_mult\\\":1.1,\\\"hacknet_node_level_cost_mult\\\":0.85},\\\"Hacknet Node NIC Architecture Neural-Upload\\\":{\\\"hacknet_node_money_mult\\\":1.1,\\\"hacknet_node_purchase_cost_mult\\\":0.9},\\\"Hacknet Node Kernel Direct-Neural Interface\\\":{\\\"hacknet_node_money_mult\\\":1.25},\\\"Hacknet Node Core Direct-Neural Interface\\\":{\\\"hacknet_node_money_mult\\\":1.45},\\\"Nanofiber Weave\\\":{\\\"strength_mult\\\":1.2,\\\"defense_mult\\\":1.2},\\\"Wired Reflexes\\\":{\\\"dexterity_mult\\\":1.05,\\\"agility_mult\\\":1.05},\\\"Speech Processor Implant\\\":{\\\"charisma_mult\\\":1.2},\\\"Nuoptimal Nootropic Injector Implant\\\":{\\\"company_rep_mult\\\":1.2},\\\"Speech Enhancement\\\":{\\\"charisma_mult\\\":1.1,\\\"company_rep_mult\\\":1.1},\\\"ADR-V1 Pheromone Gene\\\":{\\\"company_rep_mult\\\":1.1,\\\"faction_rep_mult\\\":1.1},\\\"Social Negotiation Assistant (S.N.A)\\\":{\\\"company_rep_mult\\\":1.15,\\\"faction_rep_mult\\\":1.15,\\\"work_money_mult\\\":1.1},\\\"Neuroreceptor Management Implant\\\":{},\\\"Augmented Targeting I\\\":{\\\"dexterity_mult\\\":1.1},\\\"Augmented Targeting II\\\":{\\\"dexterity_mult\\\":1.2},\\\"CashRoot Starter Kit\\\":{},\\\"Neuregen Gene Modification\\\":{\\\"hacking_exp_mult\\\":1.4},\\\"NutriGen Implant\\\":{\\\"strength_exp_mult\\\":1.2,\\\"defense_exp_mult\\\":1.2,\\\"dexterity_exp_mult\\\":1.2,\\\"agility_exp_mult\\\":1.2},\\\"Combat Rib I\\\":{\\\"strength_mult\\\":1.1,\\\"defense_mult\\\":1.1},\\\"INFRARET Enhancement\\\":{\\\"dexterity_mult\\\":1.1,\\\"crime_money_mult\\\":1.1,\\\"crime_success_mult\\\":1.25},\\\"PCMatrix\\\":{\\\"charisma_mult\\\":1.0777,\\\"charisma_exp_mult\\\":1.0777,\\\"company_rep_mult\\\":1.0777,\\\"faction_rep_mult\\\":1.0777,\\\"crime_money_mult\\\":1.0777,\\\"crime_success_mult\\\":1.0777,\\\"work_money_mult\\\":1.777},\\\"Combat Rib II\\\":{\\\"strength_mult\\\":1.14,\\\"defense_mult\\\":1.14},\\\"DermaForce Particle Barrier\\\":{\\\"defense_mult\\\":1.4},\\\"Unstable Circadian Modulator\\\":{\\\"company_rep_mult\\\":1.25,\\\"faction_rep_mult\\\":1.15,\\\"work_money_mult\\\":1.7},\\\"HemoRecirculator\\\":{\\\"strength_mult\\\":1.08,\\\"defense_mult\\\":1.08,\\\"dexterity_mult\\\":1.08,\\\"agility_mult\\\":1.08},\\\"Augmented Targeting III\\\":{\\\"dexterity_mult\\\":1.3},\\\"Synthetic Heart\\\":{\\\"strength_mult\\\":1.5,\\\"agility_mult\\\":1.5},\\\"Synfibril Muscle\\\":{\\\"strength_mult\\\":1.3,\\\"defense_mult\\\":1.3},\\\"Combat Rib III\\\":{\\\"strength_mult\\\":1.18,\\\"defense_mult\\\":1.18},\\\"NEMEAN Subdermal Weave\\\":{\\\"defense_mult\\\":2.2},\\\"Graphene Bone Lacings\\\":{\\\"strength_mult\\\":1.7,\\\"defense_mult\\\":1.7},\\\"Bionic Spine\\\":{\\\"strength_mult\\\":1.15,\\\"defense_mult\\\":1.15,\\\"dexterity_mult\\\":1.15,\\\"agility_mult\\\":1.15},\\\"Graphene Bionic Spine Upgrade\\\":{\\\"strength_mult\\\":1.6,\\\"defense_mult\\\":1.6,\\\"dexterity_mult\\\":1.6,\\\"agility_mult\\\":1.6},\\\"Bionic Legs\\\":{\\\"agility_mult\\\":1.6},\\\"Graphene Bionic Legs Upgrade\\\":{\\\"agility_mult\\\":2.5},\\\"TITN-41 Gene-Modification Injection\\\":{\\\"charisma_mult\\\":1.15,\\\"charisma_exp_mult\\\":1.15},\\\"Enhanced Social Interaction Implant\\\":{\\\"charisma_mult\\\":1.6,\\\"charisma_exp_mult\\\":1.6},\\\"Embedded Netburner Module Core V3 Upgrade\\\":{\\\"hacking_mult\\\":1.1,\\\"hacking_exp_mult\\\":1.25,\\\"hacking_chance_mult\\\":1.1,\\\"hacking_speed_mult\\\":1.05,\\\"hacking_money_mult\\\":1.4},\\\"Embedded Netburner Module Analyze Engine\\\":{\\\"hacking_speed_mult\\\":1.1},\\\"Embedded Netburner Module Direct Memory Access Upgrade\\\":{\\\"hacking_chance_mult\\\":1.2,\\\"hacking_money_mult\\\":1.4},\\\"Neuronal Densification\\\":{\\\"hacking_mult\\\":1.15,\\\"hacking_exp_mult\\\":1.1,\\\"hacking_speed_mult\\\":1.03},\\\"FocusWire\\\":{\\\"hacking_exp_mult\\\":1.05,\\\"strength_exp_mult\\\":1.05,\\\"defense_exp_mult\\\":1.05,\\\"dexterity_exp_mult\\\":1.05,\\\"agility_exp_mult\\\":1.05,\\\"charisma_exp_mult\\\":1.05,\\\"company_rep_mult\\\":1.1,\\\"work_money_mult\\\":1.2},\\\"PC Direct-Neural Interface\\\":{\\\"hacking_mult\\\":1.08,\\\"company_rep_mult\\\":1.3},\\\"PC Direct-Neural Interface Optimization Submodule\\\":{\\\"hacking_mult\\\":1.1,\\\"company_rep_mult\\\":1.75},\\\"PC Direct-Neural Interface NeuroNet Injector\\\":{\\\"hacking_mult\\\":1.1,\\\"hacking_speed_mult\\\":1.05,\\\"company_rep_mult\\\":2},\\\"ADR-V2 Pheromone Gene\\\":{\\\"company_rep_mult\\\":1.2,\\\"faction_rep_mult\\\":1.2},\\\"The Shadow's Simulacrum\\\":{\\\"company_rep_mult\\\":1.15,\\\"faction_rep_mult\\\":1.15},\\\"Neurotrainer III\\\":{\\\"hacking_exp_mult\\\":1.2,\\\"strength_exp_mult\\\":1.2,\\\"defense_exp_mult\\\":1.2,\\\"dexterity_exp_mult\\\":1.2,\\\"agility_exp_mult\\\":1.2,\\\"charisma_exp_mult\\\":1.2},\\\"HyperSight Corneal Implant\\\":{\\\"dexterity_mult\\\":1.4,\\\"hacking_speed_mult\\\":1.03,\\\"hacking_money_mult\\\":1.1},\\\"LuminCloaking-V1 Skin Implant\\\":{\\\"agility_mult\\\":1.05,\\\"crime_money_mult\\\":1.1},\\\"LuminCloaking-V2 Skin Implant\\\":{\\\"defense_mult\\\":1.1,\\\"agility_mult\\\":1.1,\\\"crime_money_mult\\\":1.25},\\\"SmartSonar Implant\\\":{\\\"dexterity_mult\\\":1.1,\\\"dexterity_exp_mult\\\":1.15,\\\"crime_money_mult\\\":1.25},\\\"Power Recirculation Core\\\":{\\\"hacking_mult\\\":1.05,\\\"strength_mult\\\":1.05,\\\"defense_mult\\\":1.05,\\\"dexterity_mult\\\":1.05,\\\"agility_mult\\\":1.05,\\\"charisma_mult\\\":1.05,\\\"hacking_exp_mult\\\":1.1,\\\"strength_exp_mult\\\":1.1,\\\"defense_exp_mult\\\":1.1,\\\"dexterity_exp_mult\\\":1.1,\\\"agility_exp_mult\\\":1.1,\\\"charisma_exp_mult\\\":1.1},\\\"QLink\\\":{\\\"hacking_mult\\\":1.75,\\\"hacking_chance_mult\\\":2.5,\\\"hacking_speed_mult\\\":2,\\\"hacking_money_mult\\\":4},\\\"SPTN-97 Gene Modification\\\":{\\\"hacking_mult\\\":1.15,\\\"strength_mult\\\":1.75,\\\"defense_mult\\\":1.75,\\\"dexterity_mult\\\":1.75,\\\"agility_mult\\\":1.75},\\\"ECorp HVMind Implant\\\":{\\\"hacking_grow_mult\\\":3},\\\"CordiARC Fusion Reactor\\\":{\\\"strength_mult\\\":1.35,\\\"defense_mult\\\":1.35,\\\"dexterity_mult\\\":1.35,\\\"agility_mult\\\":1.35,\\\"strength_exp_mult\\\":1.35,\\\"defense_exp_mult\\\":1.35,\\\"dexterity_exp_mult\\\":1.35,\\\"agility_exp_mult\\\":1.35},\\\"SmartJaw\\\":{\\\"charisma_mult\\\":1.5,\\\"charisma_exp_mult\\\":1.5,\\\"company_rep_mult\\\":1.25,\\\"faction_rep_mult\\\":1.25},\\\"Neotra\\\":{\\\"strength_mult\\\":1.55,\\\"defense_mult\\\":1.55},\\\"Xanipher\\\":{\\\"hacking_mult\\\":1.2,\\\"strength_mult\\\":1.2,\\\"defense_mult\\\":1.2,\\\"dexterity_mult\\\":1.2,\\\"agility_mult\\\":1.2,\\\"charisma_mult\\\":1.2,\\\"hacking_exp_mult\\\":1.15,\\\"strength_exp_mult\\\":1.15,\\\"defense_exp_mult\\\":1.15,\\\"dexterity_exp_mult\\\":1.15,\\\"agility_exp_mult\\\":1.15,\\\"charisma_exp_mult\\\":1.15},\\\"Hydroflame Left Arm\\\":{\\\"strength_mult\\\":2.7},\\\"nextSENS Gene Modification\\\":{\\\"hacking_mult\\\":1.2,\\\"strength_mult\\\":1.2,\\\"defense_mult\\\":1.2,\\\"dexterity_mult\\\":1.2,\\\"agility_mult\\\":1.2,\\\"charisma_mult\\\":1.2},\\\"OmniTek InfoLoad\\\":{\\\"hacking_mult\\\":1.2,\\\"hacking_exp_mult\\\":1.25},\\\"Photosynthetic Cells\\\":{\\\"strength_mult\\\":1.4,\\\"defense_mult\\\":1.4,\\\"agility_mult\\\":1.4},\\\"Graphene BrachiBlades Upgrade\\\":{\\\"strength_mult\\\":1.4,\\\"defense_mult\\\":1.4,\\\"crime_money_mult\\\":1.3,\\\"crime_success_mult\\\":1.1},\\\"Graphene Bionic Arms Upgrade\\\":{\\\"strength_mult\\\":1.85,\\\"dexterity_mult\\\":1.85},\\\"BrachiBlades\\\":{\\\"strength_mult\\\":1.15,\\\"defense_mult\\\":1.15,\\\"crime_money_mult\\\":1.15,\\\"crime_success_mult\\\":1.1},\\\"Bionic Arms\\\":{\\\"strength_mult\\\":1.3,\\\"dexterity_mult\\\":1.3}}\"}},{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"/Temp/faction-favor.txt\",\"text\":\"{\\\"Illuminati\\\":0,\\\"Daedalus\\\":0,\\\"The Covenant\\\":0,\\\"ECorp\\\":0,\\\"MegaCorp\\\":0,\\\"Bachman & Associates\\\":0,\\\"Blade Industries\\\":0,\\\"NWO\\\":0,\\\"Clarke Incorporated\\\":0,\\\"OmniTek Incorporated\\\":0,\\\"Four Sigma\\\":0,\\\"KuaiGong International\\\":0,\\\"Fulcrum Secret Technologies\\\":0,\\\"BitRunners\\\":0,\\\"The Black Hand\\\":0,\\\"NiteSec\\\":0,\\\"Aevum\\\":0,\\\"Chongqing\\\":0,\\\"Ishima\\\":0,\\\"New Tokyo\\\":0,\\\"Sector-12\\\":1.8565,\\\"Volhaven\\\":0,\\\"Speakers for the Dead\\\":0,\\\"The Dark Army\\\":0,\\\"The Syndicate\\\":0,\\\"Silhouette\\\":0,\\\"Tetrads\\\":0,\\\"Slum Snakes\\\":0,\\\"Netburners\\\":0,\\\"Tian Di Hui\\\":0,\\\"CyberSec\\\":0}\"}},{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"/Temp/player-augs-purchased.txt\",\"text\":\"[\\\"NeuroFlux Governor\\\",\\\"Neurotrainer I\\\",\\\"Synaptic Enhancement Implant\\\",\\\"BitWire\\\",\\\"Neural Accelerator\\\",\\\"Embedded Netburner Module\\\",\\\"Embedded Netburner Module Core Implant\\\"]\"}},{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"/Temp/player-augs-installed.txt\",\"text\":\"[\\\"NeuroFlux Governor\\\"]\"}},{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"/Temp/player-faction-invites.txt\",\"text\":\"[]\"}},{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"/Temp/crime-chances.txt\",\"text\":\"{\\\"heist\\\":1,\\\"assassinate\\\":1,\\\"homicide\\\":1,\\\"mug\\\":1}\"}},{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"/Temp/crime-time.txt\",\"text\":\"3000\"}},{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"/Temp/servers-to-backdoor.txt\",\"text\":\"[]\"}},{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"/Temp/faction-rep.txt\",\"text\":\"{\\\"BitRunners\\\":497165.0982348614,\\\"The Black Hand\\\":6290.991877501944,\\\"NiteSec\\\":6290.991877501944,\\\"CyberSec\\\":40667.49160633606,\\\"Netburners\\\":44067.926076789685,\\\"Tian Di Hui\\\":103052.73284790502,\\\"Sector-12\\\":0,\\\"Chongqing\\\":492695.68591779587,\\\"New Tokyo\\\":493016.2859706858,\\\"Ishima\\\":75182.74023621084,\\\"Aevum\\\":0,\\\"Volhaven\\\":0,\\\"Slum Snakes\\\":2180120.041175515,\\\"Tetrads\\\":5910.140949473605,\\\"Bachman & Associates\\\":491347.70301441604,\\\"Fulcrum Secret Technologies\\\":491225.93622319284,\\\"ECorp\\\":496731.78089257184,\\\"The Dark Army\\\":5910.140949473605,\\\"Clarke Incorporated\\\":491587.86030319973,\\\"OmniTek Incorporated\\\":1034094.1728949044,\\\"NWO\\\":492166.59727716073,\\\"Blade Industries\\\":1014095.9628758786,\\\"MegaCorp\\\":491899.40930415853,\\\"KuaiGong International\\\":927157.9742440534,\\\"Four Sigma\\\":492575.3548161497,\\\"Silhouette\\\":75354.73669096714,\\\"Speakers for the Dead\\\":5653.140949473605,\\\"The Syndicate\\\":5653.140949473605}\"}},{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"/Temp/gang-faction.txt\",\"text\":\"\\\"Slum Snakes\\\"\"}},{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"/Temp/aug-prices.txt\",\"text\":\"{\\\"Artificial Bio-neural Network Implant\\\":141137642999.99997,\\\"Enhanced Myelin Sheathing\\\":64688086374.999985,\\\"DataJack\\\":21170646449.999992,\\\"Embedded Netburner Module\\\":11761470249.999996,\\\"Embedded Netburner Module Core Implant\\\":117614702499.99997,\\\"Embedded Netburner Module Core V2 Upgrade\\\":211706464499.99994,\\\"Neural Accelerator\\\":82330291749.99998,\\\"Cranial Signal Processors - Gen III\\\":25875234549.999992,\\\"Cranial Signal Processors - Gen IV\\\":51750469099.999985,\\\"Cranial Signal Processors - Gen V\\\":105853232249.99997,\\\"NeuroFlux Governor\\\":4.159472621716883e+24,\\\"Neurotrainer II\\\":2117064644.9999995,\\\"BitRunners Neurolink\\\":205825729374.99994,\\\"Artificial Synaptic Potentiation\\\":3763670479.999999,\\\"Neuralstimulator\\\":141137642999.99997,\\\"The Black Hand\\\":25875234549.999992,\\\"BitWire\\\":470458809.9999999,\\\"Neural-Retention Enhancement\\\":11761470249.999996,\\\"Cranial Signal Processors - Gen II\\\":5880735124.999998,\\\"CRTX42-AA Gene Modification\\\":10585323224.999996,\\\"Synaptic Enhancement Implant\\\":352844107.4999999,\\\"Cranial Signal Processors - Gen I\\\":3293211669.999999,\\\"Neurotrainer I\\\":188183523.99999994,\\\"Hacknet Node CPU Architecture Neural-Upload\\\":517504690.9999999,\\\"Hacknet Node Cache Architecture Neural-Upload\\\":258752345.49999994,\\\"Hacknet Node NIC Architecture Neural-Upload\\\":211706464.49999994,\\\"Hacknet Node Kernel Direct-Neural Interface\\\":1881835239.9999995,\\\"Hacknet Node Core Direct-Neural Interface\\\":2822752859.999999,\\\"Nanofiber Weave\\\":5880735124.999998,\\\"Wired Reflexes\\\":117614702.49999997,\\\"Speech Processor Implant\\\":2352294049.9999995,\\\"Nuoptimal Nootropic Injector Implant\\\":940917619.9999998,\\\"Speech Enhancement\\\":588073512.4999999,\\\"ADR-V1 Pheromone Gene\\\":823302917.4999998,\\\"Social Negotiation Assistant (S.N.A)\\\":1411376429.9999995,\\\"Neuroreceptor Management Implant\\\":25875234549.999992,\\\"Augmented Targeting I\\\":705688214.9999998,\\\"Augmented Targeting II\\\":1999449942.4999995,\\\"CashRoot Starter Kit\\\":5880735124.999998,\\\"Neuregen Gene Modification\\\":17642205374.999996,\\\"NutriGen Implant\\\":117614702.49999997,\\\"Combat Rib I\\\":1117339673.7499998,\\\"INFRARET Enhancement\\\":1411376429.9999995,\\\"PCMatrix\\\":94091761999.99997,\\\"Combat Rib II\\\":3057982264.999999,\\\"DermaForce Particle Barrier\\\":2352294049.9999995,\\\"Unstable Circadian Modulator\\\":235229404999.99994,\\\"HemoRecirculator\\\":2117064644.9999995,\\\"Augmented Targeting III\\\":5410276314.999998,\\\"Synthetic Heart\\\":135256907874.99997,\\\"Synfibril Muscle\\\":52926616124.999985,\\\"Combat Rib III\\\":5645505719.999998,\\\"NEMEAN Subdermal Weave\\\":152899113249.99997,\\\"Graphene Bone Lacings\\\":199944994249.99994,\\\"Bionic Spine\\\":5880735124.999998,\\\"Graphene Bionic Spine Upgrade\\\":282275285999.99994,\\\"Bionic Legs\\\":17642205374.999996,\\\"Graphene Bionic Legs Upgrade\\\":211706464499.99994,\\\"TITN-41 Gene-Modification Injection\\\":8938717389.999998,\\\"Enhanced Social Interaction Implant\\\":64688086374.999985,\\\"Embedded Netburner Module Core V3 Upgrade\\\":352844107499.9999,\\\"Embedded Netburner Module Analyze Engine\\\":282275285999.99994,\\\"Embedded Netburner Module Direct Memory Access Upgrade\\\":329321166999.99994,\\\"Neuronal Densification\\\":64688086374.999985,\\\"FocusWire\\\":42341292899.999985,\\\"PC Direct-Neural Interface\\\":176422053749.99994,\\\"PC Direct-Neural Interface Optimization Submodule\\\":211706464499.99994,\\\"PC Direct-Neural Interface NeuroNet Injector\\\":352844107499.9999,\\\"ADR-V2 Pheromone Gene\\\":25875234549.999992,\\\"The Shadow's Simulacrum\\\":18818352399.999996,\\\"Neurotrainer III\\\":6115964529.999998,\\\"HyperSight Corneal Implant\\\":129376172749.99997,\\\"LuminCloaking-V1 Skin Implant\\\":235229404.99999994,\\\"LuminCloaking-V2 Skin Implant\\\":1411376429.9999995,\\\"SmartSonar Implant\\\":3528441074.999999,\\\"Power Recirculation Core\\\":8468258579.999998,\\\"QLink\\\":1176147024999999.8,\\\"SPTN-97 Gene Modification\\\":229348669874.99994,\\\"ECorp HVMind Implant\\\":258752345499.99994,\\\"CordiARC Fusion Reactor\\\":235229404999.99994,\\\"SmartJaw\\\":129376172749.99997,\\\"Neotra\\\":135256907874.99997,\\\"Xanipher\\\":199944994249.99994,\\\"Hydroflame Left Arm\\\":117614702499999.97,\\\"nextSENS Gene Modification\\\":90563320924.99997,\\\"OmniTek InfoLoad\\\":135256907874.99997,\\\"Photosynthetic Cells\\\":129376172749.99997,\\\"Graphene BrachiBlades Upgrade\\\":117614702499.99997,\\\"Graphene Bionic Arms Upgrade\\\":176422053749.99994,\\\"BrachiBlades\\\":4234129289.999999,\\\"Bionic Arms\\\":12937617274.999996}\"}},{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"/Temp/aug-prereqs.txt\",\"text\":\"{\\\"Artificial Bio-neural Network Implant\\\":[],\\\"Enhanced Myelin Sheathing\\\":[],\\\"DataJack\\\":[],\\\"Embedded Netburner Module\\\":[],\\\"Embedded Netburner Module Core Implant\\\":[\\\"Embedded Netburner Module\\\"],\\\"Embedded Netburner Module Core V2 Upgrade\\\":[\\\"Embedded Netburner Module Core Implant\\\"],\\\"Neural Accelerator\\\":[],\\\"Cranial Signal Processors - Gen III\\\":[\\\"Cranial Signal Processors - Gen II\\\"],\\\"Cranial Signal Processors - Gen IV\\\":[\\\"Cranial Signal Processors - Gen III\\\"],\\\"Cranial Signal Processors - Gen V\\\":[\\\"Cranial Signal Processors - Gen IV\\\"],\\\"NeuroFlux Governor\\\":[],\\\"Neurotrainer II\\\":[],\\\"BitRunners Neurolink\\\":[],\\\"Artificial Synaptic Potentiation\\\":[],\\\"Neuralstimulator\\\":[],\\\"The Black Hand\\\":[],\\\"BitWire\\\":[],\\\"Neural-Retention Enhancement\\\":[],\\\"Cranial Signal Processors - Gen II\\\":[\\\"Cranial Signal Processors - Gen I\\\"],\\\"CRTX42-AA Gene Modification\\\":[],\\\"Synaptic Enhancement Implant\\\":[],\\\"Cranial Signal Processors - Gen I\\\":[],\\\"Neurotrainer I\\\":[],\\\"Hacknet Node CPU Architecture Neural-Upload\\\":[],\\\"Hacknet Node Cache Architecture Neural-Upload\\\":[],\\\"Hacknet Node NIC Architecture Neural-Upload\\\":[],\\\"Hacknet Node Kernel Direct-Neural Interface\\\":[],\\\"Hacknet Node Core Direct-Neural Interface\\\":[],\\\"Nanofiber Weave\\\":[],\\\"Wired Reflexes\\\":[],\\\"Speech Processor Implant\\\":[],\\\"Nuoptimal Nootropic Injector Implant\\\":[],\\\"Speech Enhancement\\\":[],\\\"ADR-V1 Pheromone Gene\\\":[],\\\"Social Negotiation Assistant (S.N.A)\\\":[],\\\"Neuroreceptor Management Implant\\\":[],\\\"Augmented Targeting I\\\":[],\\\"Augmented Targeting II\\\":[\\\"Augmented Targeting I\\\"],\\\"CashRoot Starter Kit\\\":[],\\\"Neuregen Gene Modification\\\":[],\\\"NutriGen Implant\\\":[],\\\"Combat Rib I\\\":[],\\\"INFRARET Enhancement\\\":[],\\\"PCMatrix\\\":[],\\\"Combat Rib II\\\":[\\\"Combat Rib I\\\"],\\\"DermaForce Particle Barrier\\\":[],\\\"Unstable Circadian Modulator\\\":[],\\\"HemoRecirculator\\\":[],\\\"Augmented Targeting III\\\":[\\\"Augmented Targeting II\\\"],\\\"Synthetic Heart\\\":[],\\\"Synfibril Muscle\\\":[],\\\"Combat Rib III\\\":[\\\"Combat Rib II\\\"],\\\"NEMEAN Subdermal Weave\\\":[],\\\"Graphene Bone Lacings\\\":[],\\\"Bionic Spine\\\":[],\\\"Graphene Bionic Spine Upgrade\\\":[\\\"Bionic Spine\\\"],\\\"Bionic Legs\\\":[],\\\"Graphene Bionic Legs Upgrade\\\":[\\\"Bionic Legs\\\"],\\\"TITN-41 Gene-Modification Injection\\\":[],\\\"Enhanced Social Interaction Implant\\\":[],\\\"Embedded Netburner Module Core V3 Upgrade\\\":[\\\"Embedded Netburner Module Core V2 Upgrade\\\"],\\\"Embedded Netburner Module Analyze Engine\\\":[\\\"Embedded Netburner Module\\\"],\\\"Embedded Netburner Module Direct Memory Access Upgrade\\\":[\\\"Embedded Netburner Module\\\"],\\\"Neuronal Densification\\\":[],\\\"FocusWire\\\":[],\\\"PC Direct-Neural Interface\\\":[],\\\"PC Direct-Neural Interface Optimization Submodule\\\":[\\\"PC Direct-Neural Interface\\\"],\\\"PC Direct-Neural Interface NeuroNet Injector\\\":[\\\"PC Direct-Neural Interface\\\"],\\\"ADR-V2 Pheromone Gene\\\":[],\\\"The Shadow's Simulacrum\\\":[],\\\"Neurotrainer III\\\":[],\\\"HyperSight Corneal Implant\\\":[],\\\"LuminCloaking-V1 Skin Implant\\\":[],\\\"LuminCloaking-V2 Skin Implant\\\":[\\\"LuminCloaking-V1 Skin Implant\\\"],\\\"SmartSonar Implant\\\":[],\\\"Power Recirculation Core\\\":[],\\\"QLink\\\":[],\\\"SPTN-97 Gene Modification\\\":[],\\\"ECorp HVMind Implant\\\":[],\\\"CordiARC Fusion Reactor\\\":[],\\\"SmartJaw\\\":[],\\\"Neotra\\\":[],\\\"Xanipher\\\":[],\\\"Hydroflame Left Arm\\\":[],\\\"nextSENS Gene Modification\\\":[],\\\"OmniTek InfoLoad\\\":[],\\\"Photosynthetic Cells\\\":[],\\\"Graphene BrachiBlades Upgrade\\\":[\\\"BrachiBlades\\\"],\\\"Graphene Bionic Arms Upgrade\\\":[\\\"Bionic Arms\\\"],\\\"BrachiBlades\\\":[],\\\"Bionic Arms\\\":[]}\"}},{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"/Temp/bitnode-multipliers.txt\",\"text\":\"{\\\"HackingLevelMultiplier\\\":0.35,\\\"StrengthLevelMultiplier\\\":1,\\\"DefenseLevelMultiplier\\\":1,\\\"DexterityLevelMultiplier\\\":1,\\\"AgilityLevelMultiplier\\\":1,\\\"CharismaLevelMultiplier\\\":1,\\\"ServerGrowthRate\\\":1,\\\"ServerMaxMoney\\\":0.4,\\\"ServerStartingMoney\\\":0.5,\\\"ServerStartingSecurity\\\":1.5,\\\"ServerWeakenRate\\\":1,\\\"HomeComputerRamCost\\\":1,\\\"PurchasedServerCost\\\":1,\\\"PurchasedServerSoftcap\\\":2,\\\"PurchasedServerLimit\\\":1,\\\"PurchasedServerMaxRam\\\":1,\\\"CompanyWorkMoney\\\":0.5,\\\"CrimeMoney\\\":0.75,\\\"HacknetNodeMoney\\\":0.2,\\\"ManualHackMoney\\\":1,\\\"ScriptHackMoney\\\":0.75,\\\"ScriptHackMoneyGain\\\":1,\\\"CodingContractMoney\\\":1,\\\"ClassGymExpGain\\\":1,\\\"CompanyWorkExpGain\\\":1,\\\"CrimeExpGain\\\":1,\\\"FactionWorkExpGain\\\":1,\\\"HackExpGain\\\":0.25,\\\"FactionPassiveRepGain\\\":0,\\\"FactionWorkRepGain\\\":1,\\\"RepToDonateToFaction\\\":1,\\\"AugmentationMoneyCost\\\":1,\\\"AugmentationRepCost\\\":1,\\\"InfiltrationMoney\\\":0.75,\\\"InfiltrationRep\\\":1,\\\"FourSigmaMarketDataCost\\\":1,\\\"FourSigmaMarketDataApiCost\\\":1,\\\"CorporationValuation\\\":0.2,\\\"CorporationSoftCap\\\":0.9,\\\"BladeburnerRank\\\":1,\\\"BladeburnerSkillCost\\\":1,\\\"GangSoftcap\\\":0.7,\\\"DaedalusAugsRequirement\\\":1.166,\\\"StaneksGiftPowerMultiplier\\\":0.5,\\\"StaneksGiftExtraSize\\\":2,\\\"WorldDaemonDifficulty\\\":2}\"}},{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"/Temp/join-faction.txt\",\"text\":\"true\"}},{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"/Temp/gang-augs.txt\",\"text\":\"[\\\"Unstable Circadian Modulator\\\",\\\"HemoRecirculator\\\",\\\"Augmented Targeting I\\\",\\\"Augmented Targeting II\\\",\\\"Augmented Targeting III\\\",\\\"Synthetic Heart\\\",\\\"Synfibril Muscle\\\",\\\"Combat Rib I\\\",\\\"Combat Rib II\\\",\\\"Combat Rib III\\\",\\\"Nanofiber Weave\\\",\\\"NEMEAN Subdermal Weave\\\",\\\"Wired Reflexes\\\",\\\"Graphene Bone Lacings\\\",\\\"Bionic Spine\\\",\\\"Graphene Bionic Spine Upgrade\\\",\\\"Bionic Legs\\\",\\\"Graphene Bionic Legs Upgrade\\\",\\\"Speech Processor Implant\\\",\\\"TITN-41 Gene-Modification Injection\\\",\\\"Enhanced Social Interaction Implant\\\",\\\"BitWire\\\",\\\"Artificial Bio-neural Network Implant\\\",\\\"Artificial Synaptic Potentiation\\\",\\\"Enhanced Myelin Sheathing\\\",\\\"Synaptic Enhancement Implant\\\",\\\"Neural-Retention Enhancement\\\",\\\"DataJack\\\",\\\"Embedded Netburner Module\\\",\\\"Embedded Netburner Module Core Implant\\\",\\\"Embedded Netburner Module Core V2 Upgrade\\\",\\\"Embedded Netburner Module Core V3 Upgrade\\\",\\\"Embedded Netburner Module Analyze Engine\\\",\\\"Embedded Netburner Module Direct Memory Access Upgrade\\\",\\\"Neuralstimulator\\\",\\\"Neural Accelerator\\\",\\\"Cranial Signal Processors - Gen I\\\",\\\"Cranial Signal Processors - Gen II\\\",\\\"Cranial Signal Processors - Gen III\\\",\\\"Cranial Signal Processors - Gen IV\\\",\\\"Cranial Signal Processors - Gen V\\\",\\\"Neuronal Densification\\\",\\\"Nuoptimal Nootropic Injector Implant\\\",\\\"Speech Enhancement\\\",\\\"FocusWire\\\",\\\"PC Direct-Neural Interface\\\",\\\"PC Direct-Neural Interface Optimization Submodule\\\",\\\"PC Direct-Neural Interface NeuroNet Injector\\\",\\\"ADR-V1 Pheromone Gene\\\",\\\"ADR-V2 Pheromone Gene\\\",\\\"The Shadow's Simulacrum\\\",\\\"Hacknet Node CPU Architecture Neural-Upload\\\",\\\"Hacknet Node Cache Architecture Neural-Upload\\\",\\\"Hacknet Node NIC Architecture Neural-Upload\\\",\\\"Hacknet Node Kernel Direct-Neural Interface\\\",\\\"Hacknet Node Core Direct-Neural Interface\\\",\\\"Neurotrainer I\\\",\\\"Neurotrainer II\\\",\\\"Neurotrainer III\\\",\\\"HyperSight Corneal Implant\\\",\\\"LuminCloaking-V1 Skin Implant\\\",\\\"LuminCloaking-V2 Skin Implant\\\",\\\"SmartSonar Implant\\\",\\\"Power Recirculation Core\\\",\\\"QLink\\\",\\\"SPTN-97 Gene Modification\\\",\\\"ECorp HVMind Implant\\\",\\\"CordiARC Fusion Reactor\\\",\\\"SmartJaw\\\",\\\"Neotra\\\",\\\"Xanipher\\\",\\\"Hydroflame Left Arm\\\",\\\"nextSENS Gene Modification\\\",\\\"OmniTek InfoLoad\\\",\\\"Photosynthetic Cells\\\",\\\"BitRunners Neurolink\\\",\\\"The Black Hand\\\",\\\"CRTX42-AA Gene Modification\\\",\\\"Neuregen Gene Modification\\\",\\\"CashRoot Starter Kit\\\",\\\"NutriGen Implant\\\",\\\"PCMatrix\\\",\\\"INFRARET Enhancement\\\",\\\"DermaForce Particle Barrier\\\",\\\"Graphene BrachiBlades Upgrade\\\",\\\"Graphene Bionic Arms Upgrade\\\",\\\"BrachiBlades\\\",\\\"Bionic Arms\\\",\\\"Social Negotiation Assistant (S.N.A)\\\",\\\"Neuroreceptor Management Implant\\\"]\"}},{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"/Temp/gang-recruit-member.txt\",\"text\":\"true\"}},{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"/Temp/gang-faction-rep.txt\",\"text\":\"2187710.617257903\"}},{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"/Temp/gang-names.txt\",\"text\":\"[\\\"Slum Snakes\\\",\\\"Tetrads\\\",\\\"The Syndicate\\\",\\\"The Dark Army\\\",\\\"Speakers for the Dead\\\",\\\"NiteSec\\\",\\\"The Black Hand\\\"]\"}},{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"/Temp/travel.txt\",\"text\":\"true\"}},{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"/Temp/work-for-faction.txt\",\"text\":\"true\"}},{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"/Temp/spend-hacknet-hashes.txt\",\"text\":\"0\"}},{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"/Temp/stop-action.txt\",\"text\":\"true\"}},{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"/Temp/apply-to-company.txt\",\"text\":\"false\"}},{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"/Temp/work-for-company.txt\",\"text\":\"true\"}},{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"/Temp/company-is-backdoored.txt\",\"text\":\"true\"}},{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"/Temp/company-favors.txt\",\"text\":\"{\\\"Bachman & Associates\\\":0.002,\\\"ECorp\\\":0.002,\\\"Clarke Incorporated\\\":0.002,\\\"OmniTek Incorporated\\\":0.002,\\\"NWO\\\":0.002,\\\"Blade Industries\\\":0.002,\\\"MegaCorp\\\":0.002,\\\"KuaiGong International\\\":0.002,\\\"Fulcrum Technologies\\\":0.002,\\\"Four Sigma\\\":0.002}\"}}],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":1,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"ecorp\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"ecorp\",\"httpPortOpen\":true,\"ip\":\"12.5.5.8\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"ECorp\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"blade\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":148.5,\"hackDifficulty\":148.5,\"minDifficulty\":50,\"moneyAvailable\":16679631335.5,\"moneyMax\":166796313355,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1184,\"serverGrowth\":99}},\"megacorp\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"megacorp\",\"httpPortOpen\":true,\"ip\":\"72.6.7.4\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"MegaCorp\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"powerhouse-fitness\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":148.5,\"hackDifficulty\":148.5,\"minDifficulty\":50,\"moneyAvailable\":28162413944,\"moneyMax\":281624139440,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1109,\"serverGrowth\":99}},\"b-and-a\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"b-and-a\",\"httpPortOpen\":true,\"ip\":\"95.1.2.0\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Bachman & Associates\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"omnitek\",\"fulcrumassets\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":123,\"hackDifficulty\":123,\"minDifficulty\":41,\"moneyAvailable\":7742428444,\"moneyMax\":77424284440,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1013,\"serverGrowth\":67}},\"blade\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"blade\",\"httpPortOpen\":true,\"ip\":\"46.7.2.9\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"beyond-man.lit\"],\"organizationName\":\"Blade Industries\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\".\",\"ecorp\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":144,\"hackDifficulty\":144,\"minDifficulty\":48,\"moneyAvailable\":14557936380.5,\"moneyMax\":145579363805,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1018,\"serverGrowth\":83}},\"nwo\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"nwo\",\"httpPortOpen\":true,\"ip\":\"28.3.4.2\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"the-hidden-world.lit\"],\"organizationName\":\"NWO\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"4sigma\",\"The-Cave\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":148.5,\"hackDifficulty\":148.5,\"minDifficulty\":50,\"moneyAvailable\":15564135135.5,\"moneyMax\":155641351355,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":950,\"serverGrowth\":93}},\"clarkinc\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"clarkinc\",\"httpPortOpen\":true,\"ip\":\"13.5.9.7\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"beyond-man.lit\",\"cost-of-immortality.lit\"],\"organizationName\":\"Clarke Incorporated\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"kuai-gong\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":94.5,\"hackDifficulty\":94.5,\"minDifficulty\":32,\"moneyAvailable\":11970326271.5,\"moneyMax\":119703262715,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1055,\"serverGrowth\":48}},\"omnitek\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"omnitek\",\"httpPortOpen\":true,\"ip\":\"6.1.3.1\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[\"coded-intelligence.lit\",\"history-of-synthoids.lit\"],\"organizationName\":\"OmniTek Incorporated\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"vitalife\",\"b-and-a\",\"powerhouse-fitness\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":147,\"hackDifficulty\":147,\"minDifficulty\":49,\"moneyAvailable\":8150489082,\"moneyMax\":81504890820,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":934,\"serverGrowth\":99}},\"4sigma\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"4sigma\",\"httpPortOpen\":true,\"ip\":\"96.1.5.9\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Four Sigma\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"stormtech\",\"nwo\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":84,\"hackDifficulty\":84,\"minDifficulty\":28,\"moneyAvailable\":12191165117.5,\"moneyMax\":121911651175,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":948,\"serverGrowth\":99}},\"kuai-gong\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"kuai-gong\",\"httpPortOpen\":true,\"ip\":\"10.3.3.0\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"KuaiGong International\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"helios\",\"clarkinc\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":145.5,\"hackDifficulty\":145.5,\"minDifficulty\":49,\"moneyAvailable\":11173336938.5,\"moneyMax\":111733369385,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":979,\"serverGrowth\":91}},\"fulcrumtech\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"fulcrumtech\",\"httpPortOpen\":true,\"ip\":\"77.6.1.0\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[\"simulated-reality.lit\"],\"organizationName\":\"Fulcrum Technologies\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"applied-energetics\",\".\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":142.5,\"hackDifficulty\":142.5,\"minDifficulty\":48,\"moneyAvailable\":810702692,\"moneyMax\":8107026920,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1127,\"serverGrowth\":88}},\"fulcrumassets\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"fulcrumassets\",\"httpPortOpen\":true,\"ip\":\"96.3.2.4\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Fulcrum Technologies\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"b-and-a\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":148.5,\"hackDifficulty\":148.5,\"minDifficulty\":50,\"moneyAvailable\":500000,\"moneyMax\":5000000,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1491,\"serverGrowth\":1}},\"stormtech\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"stormtech\",\"httpPortOpen\":true,\"ip\":\"69.1.6.0\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Storm Technologies\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"applied-energetics\",\"4sigma\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":130.5,\"hackDifficulty\":130.5,\"minDifficulty\":44,\"moneyAvailable\":536023268,\"moneyMax\":5360232680,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1014,\"serverGrowth\":87}},\"defcomm\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"defcomm\",\"httpPortOpen\":true,\"ip\":\"4.3.6.8\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"DefComm\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"deltaone\",\"taiyang-digital\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":142.5,\"hackDifficulty\":142.5,\"minDifficulty\":48,\"moneyAvailable\":407462398.5,\"moneyMax\":4074623985,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1044,\"serverGrowth\":59}},\"infocomm\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"infocomm\",\"httpPortOpen\":true,\"ip\":\"14.8.5.9\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"InfoComm\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"solaris\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":117,\"hackDifficulty\":117,\"minDifficulty\":39,\"moneyAvailable\":361100774,\"moneyMax\":3611007740,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":937,\"serverGrowth\":41}},\"helios\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"helios\",\"httpPortOpen\":true,\"ip\":\"69.0.6.6\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"beyond-man.lit\"],\"organizationName\":\"Helios Labs\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"run4theh111z\",\"kuai-gong\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":139.5,\"hackDifficulty\":139.5,\"minDifficulty\":47,\"moneyAvailable\":330621028.5,\"moneyMax\":3306210285,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":809,\"serverGrowth\":74}},\"vitalife\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"vitalife\",\"httpPortOpen\":true,\"ip\":\"33.1.7.6\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"A-Green-Tomorrow.lit\"],\"organizationName\":\"VitaLife\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"titan-labs\",\"omnitek\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":135,\"hackDifficulty\":135,\"minDifficulty\":45,\"moneyAvailable\":375008505,\"moneyMax\":3750085050,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":828,\"serverGrowth\":69}},\"icarus\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"icarus\",\"httpPortOpen\":true,\"ip\":\"24.9.2.4\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Icarus Microsystems\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"deltaone\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":142.5,\"hackDifficulty\":142.5,\"minDifficulty\":48,\"moneyAvailable\":480989075.5,\"moneyMax\":4809890755,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":867,\"serverGrowth\":88}},\"univ-energy\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"univ-energy\",\"httpPortOpen\":true,\"ip\":\"55.2.6.1\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[],\"organizationName\":\"Universal Energy\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"omnia\",\"zb-def\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":124.5,\"hackDifficulty\":124.5,\"minDifficulty\":42,\"moneyAvailable\":560294055.5,\"moneyMax\":5602940555,\"numOpenPortsRequired\":4,\"openPortCount\":5,\"requiredHackingSkill\":818,\"serverGrowth\":90}},\"titan-labs\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"titan-labs\",\"httpPortOpen\":true,\"ip\":\"22.2.2.3\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[\"coded-intelligence.lit\"],\"organizationName\":\"Titan Laboratories\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"taiyang-digital\",\"vitalife\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":118.5,\"hackDifficulty\":118.5,\"minDifficulty\":40,\"moneyAvailable\":436874842,\"moneyMax\":4368748420,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":838,\"serverGrowth\":71}},\"microdyne\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"microdyne\",\"httpPortOpen\":true,\"ip\":\"3.9.2.1\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"synthetic-muscles.lit\"],\"organizationName\":\"Microdyne Technologies\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"nova-med\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":106.5,\"hackDifficulty\":106.5,\"minDifficulty\":36,\"moneyAvailable\":251407161,\"moneyMax\":2514071610,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":851,\"serverGrowth\":70}},\"taiyang-digital\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"taiyang-digital\",\"httpPortOpen\":true,\"ip\":\"5.8.8.6\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"A-Green-Tomorrow.lit\",\"brighter-than-the-sun.lit\"],\"organizationName\":\"Taiyang Digital\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"defcomm\",\"titan-labs\",\"applied-energetics\",\"run4theh111z\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":115.5,\"hackDifficulty\":115.5,\"minDifficulty\":39,\"moneyAvailable\":417237212,\"moneyMax\":4172372120,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":942,\"serverGrowth\":78}},\"galactic-cyber\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"galactic-cyber\",\"httpPortOpen\":true,\"ip\":\"60.8.5.5\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Galactic Cybersystems\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"alpha-ent\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":94.5,\"hackDifficulty\":94.5,\"minDifficulty\":32,\"moneyAvailable\":402142625,\"moneyMax\":4021426250,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":849,\"serverGrowth\":84}},\"aerocorp\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"aerocorp\",\"httpPortOpen\":true,\"ip\":\"7.5.3.7\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"man-and-machine.lit\"],\"organizationName\":\"AeroCorp\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"rho-construction\",\"omnia\",\"deltaone\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":126,\"hackDifficulty\":126,\"minDifficulty\":42,\"moneyAvailable\":563688410,\"moneyMax\":5636884100,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":877,\"serverGrowth\":61}},\"omnia\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"omnia\",\"httpPortOpen\":true,\"ip\":\"17.5.6.7\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"history-of-synthoids.lit\"],\"organizationName\":\"Omnia Cybersystems\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"aerocorp\",\"univ-energy\",\"solaris\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":141,\"hackDifficulty\":141,\"minDifficulty\":47,\"moneyAvailable\":457029136.5,\"moneyMax\":4570291365,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":898,\"serverGrowth\":61}},\"zb-def\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"zb-def\",\"httpPortOpen\":true,\"ip\":\"81.1.5.8\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"synthetic-muscles.lit\"],\"organizationName\":\"ZB Defense Industries\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"univ-energy\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":94.5,\"hackDifficulty\":94.5,\"minDifficulty\":32,\"moneyAvailable\":452880208,\"moneyMax\":4528802080,\"numOpenPortsRequired\":4,\"openPortCount\":5,\"requiredHackingSkill\":804,\"serverGrowth\":70}},\"applied-energetics\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"applied-energetics\",\"httpPortOpen\":true,\"ip\":\"21.2.1.5\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Applied Energetics\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"taiyang-digital\",\"fulcrumtech\",\"stormtech\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":103.5,\"hackDifficulty\":103.5,\"minDifficulty\":35,\"moneyAvailable\":440085037.5,\"moneyMax\":4400850375,\"numOpenPortsRequired\":4,\"openPortCount\":5,\"requiredHackingSkill\":793,\"serverGrowth\":75}},\"solaris\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"solaris\",\"httpPortOpen\":true,\"ip\":\"39.5.2.5\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"A-Green-Tomorrow.lit\",\"the-failed-frontier.lit\"],\"organizationName\":\"Solaris Space Systems\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"omnia\",\"infocomm\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":109.5,\"hackDifficulty\":109.5,\"minDifficulty\":37,\"moneyAvailable\":408481581,\"moneyMax\":4084815810,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":755,\"serverGrowth\":79}},\"deltaone\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"deltaone\",\"httpPortOpen\":true,\"ip\":\"10.5.5.0\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"DeltaOne\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"aerocorp\",\"defcomm\",\"icarus\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":127.5,\"hackDifficulty\":127.5,\"minDifficulty\":43,\"moneyAvailable\":753780708.5,\"moneyMax\":7537807085,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":875,\"serverGrowth\":50}},\"global-pharm\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"global-pharm\",\"httpPortOpen\":true,\"ip\":\"90.9.0.5\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"A-Green-Tomorrow.lit\"],\"organizationName\":\"Global Pharmaceuticals\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"aevum-police\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":123,\"hackDifficulty\":123,\"minDifficulty\":41,\"moneyAvailable\":811519594,\"moneyMax\":8115195940,\"numOpenPortsRequired\":4,\"openPortCount\":5,\"requiredHackingSkill\":832,\"serverGrowth\":84}},\"nova-med\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"nova-med\",\"httpPortOpen\":true,\"ip\":\"84.2.1.6\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Nova Medical\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"zeus-med\",\"microdyne\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":90,\"hackDifficulty\":90,\"minDifficulty\":30,\"moneyAvailable\":560441146.5,\"moneyMax\":5604411465,\"numOpenPortsRequired\":4,\"openPortCount\":5,\"requiredHackingSkill\":801,\"serverGrowth\":80}},\"zeus-med\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"zeus-med\",\"httpPortOpen\":true,\"ip\":\"23.2.3.5\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Zeus Medical\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"unitalife\",\"nova-med\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":112.5,\"hackDifficulty\":112.5,\"minDifficulty\":38,\"moneyAvailable\":735792939.5,\"moneyMax\":7357929395,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":849,\"serverGrowth\":79}},\"unitalife\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"unitalife\",\"httpPortOpen\":true,\"ip\":\"22.0.9.3\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"UnitaLife Group\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"snap-fitness\",\"zeus-med\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":118.5,\"hackDifficulty\":118.5,\"minDifficulty\":40,\"moneyAvailable\":540695259,\"moneyMax\":5406952590,\"numOpenPortsRequired\":4,\"openPortCount\":5,\"requiredHackingSkill\":818,\"serverGrowth\":71}},\"lexo-corp\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"lexo-corp\",\"httpPortOpen\":true,\"ip\":\"24.8.3.1\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"LexoCorp\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"catalyst\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":103.5,\"hackDifficulty\":103.5,\"minDifficulty\":35,\"moneyAvailable\":363126518.5,\"moneyMax\":3631265185,\"numOpenPortsRequired\":4,\"openPortCount\":5,\"requiredHackingSkill\":718,\"serverGrowth\":62}},\"rho-construction\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"rho-construction\",\"httpPortOpen\":true,\"ip\":\"85.4.7.9\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Rho Construction\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"summit-uni\",\"aerocorp\",\"snap-fitness\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":75,\"hackDifficulty\":75,\"minDifficulty\":25,\"moneyAvailable\":256399573.5,\"moneyMax\":2563995735,\"numOpenPortsRequired\":3,\"openPortCount\":5,\"requiredHackingSkill\":504,\"serverGrowth\":55}},\"alpha-ent\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"alpha-ent\",\"httpPortOpen\":true,\"ip\":\"50.3.1.3\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"sector-12-crime.lit\"],\"organizationName\":\"Alpha Enterprises\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"catalyst\",\"galactic-cyber\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":82.5,\"hackDifficulty\":82.5,\"minDifficulty\":28,\"moneyAvailable\":347221885,\"moneyMax\":3472218850,\"numOpenPortsRequired\":4,\"openPortCount\":5,\"requiredHackingSkill\":506,\"serverGrowth\":59}},\"aevum-police\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"aevum-police\",\"httpPortOpen\":true,\"ip\":\"91.9.4.4\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Aevum Police Headquarters\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"syscore\",\"global-pharm\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":111,\"hackDifficulty\":111,\"minDifficulty\":37,\"moneyAvailable\":123265055,\"moneyMax\":1232650550,\"numOpenPortsRequired\":4,\"openPortCount\":5,\"requiredHackingSkill\":435,\"serverGrowth\":39}},\"rothman-uni\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"rothman-uni\",\"httpPortOpen\":true,\"ip\":\"74.4.7.4\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"secret-societies.lit\",\"the-failed-frontier.lit\",\"tensions-in-tech-race.lit\"],\"organizationName\":\"Rothman University\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"netlink\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":82.5,\"hackDifficulty\":82.5,\"minDifficulty\":28,\"moneyAvailable\":95037952,\"moneyMax\":950379520,\"numOpenPortsRequired\":3,\"openPortCount\":5,\"requiredHackingSkill\":377,\"serverGrowth\":40}},\"zb-institute\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"zb-institute\",\"httpPortOpen\":true,\"ip\":\"46.4.3.8\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"ZB Institute of Technology\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"johnson-ortho\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":120,\"hackDifficulty\":120,\"minDifficulty\":40,\"moneyAvailable\":459519463.5,\"moneyMax\":4595194635,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":758,\"serverGrowth\":78}},\"summit-uni\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"summit-uni\",\"httpPortOpen\":true,\"ip\":\"74.5.0.5\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"secret-societies.lit\",\"the-failed-frontier.lit\",\"synthetic-muscles.lit\"],\"organizationName\":\"Summit University\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"comptek\",\"rho-construction\",\"millenium-fitness\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":88.5,\"hackDifficulty\":88.5,\"minDifficulty\":30,\"moneyAvailable\":158351890,\"moneyMax\":1583518900,\"numOpenPortsRequired\":3,\"openPortCount\":5,\"requiredHackingSkill\":440,\"serverGrowth\":56}},\"syscore\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"syscore\",\"httpPortOpen\":true,\"ip\":\"68.8.8.7\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"SysCore Securities\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"avmnite-02h\",\"aevum-police\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":109.5,\"hackDifficulty\":37,\"minDifficulty\":37,\"moneyAvailable\":748687135.4438398,\"moneyMax\":2434526570,\"numOpenPortsRequired\":4,\"openPortCount\":5,\"requiredHackingSkill\":626,\"serverGrowth\":70}},\"catalyst\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"catalyst\",\"httpPortOpen\":true,\"ip\":\"22.6.6.3\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"tensions-in-tech-race.lit\"],\"organizationName\":\"Catalyst Ventures\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"netlink\",\"lexo-corp\",\"alpha-ent\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":99,\"hackDifficulty\":99,\"minDifficulty\":33,\"moneyAvailable\":215060355,\"moneyMax\":2150603550,\"numOpenPortsRequired\":3,\"openPortCount\":5,\"requiredHackingSkill\":448,\"serverGrowth\":54}},\"the-hub\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"the-hub\",\"httpPortOpen\":true,\"ip\":\"94.4.7.4\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[],\"organizationName\":\"The Hub\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"omega-net\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":52.5,\"hackDifficulty\":52.5,\"minDifficulty\":18,\"moneyAvailable\":86811649,\"moneyMax\":868116490,\"numOpenPortsRequired\":2,\"openPortCount\":5,\"requiredHackingSkill\":296,\"serverGrowth\":45}},\"comptek\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"comptek\",\"httpPortOpen\":true,\"ip\":\"69.6.1.2\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"man-and-machine.lit\"],\"organizationName\":\"CompuTek\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"phantasy\",\"summit-uni\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":97.5,\"hackDifficulty\":97.5,\"minDifficulty\":33,\"moneyAvailable\":117832440.5,\"moneyMax\":1178324405,\"numOpenPortsRequired\":3,\"openPortCount\":5,\"requiredHackingSkill\":304,\"serverGrowth\":52}},\"netlink\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"netlink\",\"httpPortOpen\":true,\"ip\":\"59.0.2.6\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[\"simulated-reality.lit\"],\"organizationName\":\"NetLink Technologies\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"neo-net\",\"rothman-uni\",\"catalyst\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":99,\"hackDifficulty\":99,\"minDifficulty\":33,\"moneyAvailable\":137500000,\"moneyMax\":1375000000,\"numOpenPortsRequired\":3,\"openPortCount\":5,\"requiredHackingSkill\":404,\"serverGrowth\":66}},\"johnson-ortho\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"johnson-ortho\",\"httpPortOpen\":true,\"ip\":\"46.5.4.2\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Johnson Orthopedics\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"omega-net\",\"zb-institute\",\"I.I.I.I\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":63,\"hackDifficulty\":63,\"minDifficulty\":21,\"moneyAvailable\":38635838.5,\"moneyMax\":386358385,\"numOpenPortsRequired\":2,\"openPortCount\":5,\"requiredHackingSkill\":282,\"serverGrowth\":43}},\"n00dles\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"n00dles\",\"httpPortOpen\":true,\"ip\":\"57.9.9.6\",\"isConnectedTo\":false,\"maxRam\":4,\"messages\":[],\"organizationName\":\"Noodle Bar\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"home\",\"zer0\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":1.5,\"hackDifficulty\":1.004,\"minDifficulty\":1,\"moneyAvailable\":350000,\"moneyMax\":350000,\"numOpenPortsRequired\":0,\"openPortCount\":5,\"requiredHackingSkill\":1,\"serverGrowth\":3000}},\"foodnstuff\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"foodnstuff\",\"httpPortOpen\":true,\"ip\":\"38.9.3.2\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"sector-12-crime.lit\"],\"organizationName\":\"FoodNStuff\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":15,\"hackDifficulty\":5,\"minDifficulty\":5,\"moneyAvailable\":1419070,\"moneyMax\":10000000,\"numOpenPortsRequired\":0,\"openPortCount\":5,\"requiredHackingSkill\":1,\"serverGrowth\":5}},\"sigma-cosmetics\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"sigma-cosmetics\",\"httpPortOpen\":true,\"ip\":\"38.7.2.5\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Sigma Cosmetics\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"home\",\"max-hardware\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":15,\"hackDifficulty\":5,\"minDifficulty\":5,\"moneyAvailable\":1640810,\"moneyMax\":11500000,\"numOpenPortsRequired\":0,\"openPortCount\":5,\"requiredHackingSkill\":5,\"serverGrowth\":10}},\"joesguns\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"joesguns\",\"httpPortOpen\":false,\"ip\":\"39.9.5.9\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Joe's Guns\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":22.5,\"hackDifficulty\":8,\"minDifficulty\":8,\"moneyAvailable\":4466390.35643312,\"moneyMax\":12500000,\"numOpenPortsRequired\":0,\"openPortCount\":0,\"requiredHackingSkill\":10,\"serverGrowth\":20}},\"zer0\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"zer0\",\"httpPortOpen\":true,\"ip\":\"75.2.5.9\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"ZER0 Nightclub\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"n00dles\",\"silver-helix\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":37.5,\"hackDifficulty\":37.5,\"minDifficulty\":13,\"moneyAvailable\":3750000,\"moneyMax\":37500000,\"numOpenPortsRequired\":1,\"openPortCount\":5,\"requiredHackingSkill\":75,\"serverGrowth\":40}},\"nectar-net\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"nectar-net\",\"httpPortOpen\":true,\"ip\":\"54.3.0.5\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Nectar Nightclub Network\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"hong-fang-tea\",\"omega-net\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":30,\"hackDifficulty\":10.216,\"minDifficulty\":10,\"moneyAvailable\":13750000,\"moneyMax\":13750000,\"numOpenPortsRequired\":0,\"openPortCount\":5,\"requiredHackingSkill\":20,\"serverGrowth\":25}},\"neo-net\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"neo-net\",\"httpPortOpen\":true,\"ip\":\"77.0.0.3\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"the-hidden-world.lit\"],\"organizationName\":\"Neo Nightclub Network\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"max-hardware\",\"netlink\",\"crush-fitness\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":37.5,\"hackDifficulty\":37.5,\"minDifficulty\":13,\"moneyAvailable\":2500000,\"moneyMax\":25000000,\"numOpenPortsRequired\":1,\"openPortCount\":5,\"requiredHackingSkill\":50,\"serverGrowth\":25}},\"silver-helix\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"silver-helix\",\"httpPortOpen\":true,\"ip\":\"98.7.2.6\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"new-triads.lit\"],\"organizationName\":\"Silver Helix\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"zer0\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":45,\"hackDifficulty\":45,\"minDifficulty\":15,\"moneyAvailable\":22500000,\"moneyMax\":225000000,\"numOpenPortsRequired\":2,\"openPortCount\":5,\"requiredHackingSkill\":150,\"serverGrowth\":30}},\"hong-fang-tea\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"hong-fang-tea\",\"httpPortOpen\":true,\"ip\":\"51.5.1.1\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"brighter-than-the-sun.lit\"],\"organizationName\":\"HongFang Teahouse\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"home\",\"nectar-net\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":22.5,\"hackDifficulty\":8.244,\"minDifficulty\":8,\"moneyAvailable\":15000000,\"moneyMax\":15000000,\"numOpenPortsRequired\":0,\"openPortCount\":5,\"requiredHackingSkill\":30,\"serverGrowth\":20}},\"harakiri-sushi\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"harakiri-sushi\",\"httpPortOpen\":true,\"ip\":\"0.4.8.5\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"HaraKiri Sushi Bar Network\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"home\",\"CSEC\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":22.5,\"hackDifficulty\":8.12,\"minDifficulty\":8,\"moneyAvailable\":20000000,\"moneyMax\":20000000,\"numOpenPortsRequired\":0,\"openPortCount\":5,\"requiredHackingSkill\":40,\"serverGrowth\":40}},\"phantasy\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"phantasy\",\"httpPortOpen\":true,\"ip\":\"77.8.9.5\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Phantasy Club\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"max-hardware\",\"comptek\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":30,\"hackDifficulty\":30,\"minDifficulty\":10,\"moneyAvailable\":12000000,\"moneyMax\":120000000,\"numOpenPortsRequired\":2,\"openPortCount\":5,\"requiredHackingSkill\":100,\"serverGrowth\":35}},\"max-hardware\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"max-hardware\",\"httpPortOpen\":true,\"ip\":\"34.3.0.8\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Max Hardware Store\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"sigma-cosmetics\",\"neo-net\",\"phantasy\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":22.5,\"hackDifficulty\":22.5,\"minDifficulty\":8,\"moneyAvailable\":5000000,\"moneyMax\":50000000,\"numOpenPortsRequired\":1,\"openPortCount\":5,\"requiredHackingSkill\":80,\"serverGrowth\":30}},\"omega-net\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"omega-net\",\"httpPortOpen\":true,\"ip\":\"24.3.7.7\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"the-new-god.lit\"],\"organizationName\":\"Omega Software\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"nectar-net\",\"the-hub\",\"johnson-ortho\",\"avmnite-02h\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":45,\"hackDifficulty\":15,\"minDifficulty\":15,\"moneyAvailable\":98744755.01664574,\"moneyMax\":325112575,\"numOpenPortsRequired\":2,\"openPortCount\":5,\"requiredHackingSkill\":201,\"serverGrowth\":34}},\"crush-fitness\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"crush-fitness\",\"httpPortOpen\":true,\"ip\":\"41.5.8.9\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Crush Fitness\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"neo-net\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":66,\"hackDifficulty\":66,\"minDifficulty\":22,\"moneyAvailable\":21819123,\"moneyMax\":218191230,\"numOpenPortsRequired\":2,\"openPortCount\":5,\"requiredHackingSkill\":265,\"serverGrowth\":29}},\"iron-gym\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"iron-gym\",\"httpPortOpen\":true,\"ip\":\"98.5.8.2\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Iron Gym Network\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":45,\"hackDifficulty\":15.424,\"minDifficulty\":15,\"moneyAvailable\":100000000,\"moneyMax\":100000000,\"numOpenPortsRequired\":1,\"openPortCount\":5,\"requiredHackingSkill\":100,\"serverGrowth\":20}},\"millenium-fitness\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"millenium-fitness\",\"httpPortOpen\":true,\"ip\":\"17.9.2.7\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[],\"organizationName\":\"Millenium Fitness Network\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"summit-uni\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":76.5,\"hackDifficulty\":76.5,\"minDifficulty\":26,\"moneyAvailable\":125000000,\"moneyMax\":1250000000,\"numOpenPortsRequired\":3,\"openPortCount\":5,\"requiredHackingSkill\":515,\"serverGrowth\":43}},\"powerhouse-fitness\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"powerhouse-fitness\",\"httpPortOpen\":true,\"ip\":\"77.6.3.9\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Powerhouse Fitness\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"omnitek\",\"megacorp\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":88.5,\"hackDifficulty\":88.5,\"minDifficulty\":30,\"moneyAvailable\":450000000,\"moneyMax\":4500000000,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1016,\"serverGrowth\":56}},\"snap-fitness\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"snap-fitness\",\"httpPortOpen\":true,\"ip\":\"97.1.1.8\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Snap Fitness\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"rho-construction\",\"unitalife\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":63,\"hackDifficulty\":63,\"minDifficulty\":21,\"moneyAvailable\":225000000,\"moneyMax\":2250000000,\"numOpenPortsRequired\":4,\"openPortCount\":5,\"requiredHackingSkill\":715,\"serverGrowth\":56}},\"run4theh111z\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"run4theh111z\",\"httpPortOpen\":true,\"ip\":\"84.9.6.7\",\"isConnectedTo\":false,\"maxRam\":256,\"messages\":[\"simulated-reality.lit\",\"the-new-god.lit\"],\"organizationName\":\"The Runners\",\"programs\":[],\"ramUsed\":180,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[1644746645540],\"dataMap\":{},\"filename\":\"/Remote/share.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1.6099999999999999,\"pid\":229,\"ramUsage\":4,\"server\":\"run4theh111z\",\"threads\":45,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns \\n * Wait until an appointed time and then execute a hack. */\\nexport async function main(ns) {\\n    //args[0: target, 1: desired start time, 2: expected end, 3: expected duration, 4: description, 5: manipulate stock, 6: disable toast warnings, 7: loop]\\n    const sleepDuration = ns.args.length > 1 ? ns.args[1] - Date.now() : 0;\\n    const expectedDuration = ns.args.length > 3 ? ns.args[3] : 0;\\n    const manipulateStock = ns.args.length > 5 && ns.args[5] ? true : false;\\n    const disableToastWarnings = ns.args.length > 6 ? ns.args[6] : false;\\n    const loop = ns.args.length > 7 ? ns.args[7] : false;\\n    let cycleTime = expectedDuration * 4;\\n    if (cycleTime < 100) cycleTime = Math.max(1, Math.min(5, cycleTime * 2)); // For fast hacking loops, inject a delay on hack in case grow/weaken are running a bit slow.\\n    if (sleepDuration > 0)\\n        await ns.sleep(sleepDuration);\\n    do {\\n        if (!await ns.hack(ns.args[0], { stock: manipulateStock }) && !disableToastWarnings)\\n            ns.toast(`Warning, hack stole 0 money. Might be a misfire. ${JSON.stringify(ns.args)}`, 'warning');\\n        if (loop) await ns.sleep(cycleTime - expectedDuration);\\n    } while (loop);\\n}\",\"filename\":\"/Remote/hack-target.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/Remote/hack-target.js\",\"url\":\"blob:file:///c9564927-a16f-413e-90fa-d1c62a78f9f7\",\"moduleSequenceNumber\":277}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"run4theh111z\",\"moduleSequenceNumber\":277,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Return a formatted representation of the monetary amount using scale sympols (e.g. $6.50M)\\n * @param {number} num - The number to format\\n * @param {number=} maxSignificantFigures - (default: 6) The maximum significant figures you wish to see (e.g. 123, 12.3 and 1.23 all have 3 significant figures)\\n * @param {number=} maxDecimalPlaces - (default: 3) The maximum decimal places you wish to see, regardless of significant figures. (e.g. 12.3, 1.2, 0.1 all have 1 decimal)\\n **/\\nexport function formatMoney(num, maxSignificantFigures = 6, maxDecimalPlaces = 3) {\\n    let numberShort = formatNumberShort(num, maxSignificantFigures, maxDecimalPlaces);\\n    return num >= 0 ? \\\"$\\\" + numberShort : numberShort.replace(\\\"-\\\", \\\"-$\\\");\\n}\\n\\nconst symbols = [\\\"\\\", \\\"k\\\", \\\"m\\\", \\\"b\\\", \\\"t\\\", \\\"q\\\", \\\"Q\\\", \\\"s\\\", \\\"S\\\", \\\"o\\\", \\\"n\\\", \\\"e33\\\", \\\"e36\\\", \\\"e39\\\"];\\n\\n/**\\n * Return a formatted representation of the monetary amount using scale sympols (e.g. 6.50M) \\n * @param {number} num - The number to format\\n * @param {number=} maxSignificantFigures - (default: 6) The maximum significant figures you wish to see (e.g. 123, 12.3 and 1.23 all have 3 significant figures)\\n * @param {number=} maxDecimalPlaces - (default: 3) The maximum decimal places you wish to see, regardless of significant figures. (e.g. 12.3, 1.2, 0.1 all have 1 decimal)\\n **/\\nexport function formatNumberShort(num, maxSignificantFigures = 6, maxDecimalPlaces = 3) {\\n    for (var i = 0, sign = Math.sign(num), num = Math.abs(num); num >= 1000 && i < symbols.length; i++) num /= 1000;\\n    // TODO: A number like 9.999 once rounted to show 3 sig figs, will become 10.00, which is now 4 sig figs.\\n    return ((sign < 0) ? \\\"-\\\" : \\\"\\\") + num.toFixed(Math.max(0, Math.min(maxDecimalPlaces, maxSignificantFigures - Math.floor(1 + Math.log10(num))))) + symbols[i];\\n}\\n\\n/** Convert a shortened number back into a value */\\nexport function parseShortNumber(text = \\\"0\\\") {\\n    let parsed = Number(text);\\n    if (!isNaN(parsed)) return parsed;\\n    for (const sym of symbols.slice(1))\\n        if (text.toLowerCase().endsWith(sym))\\n            return Number.parseFloat(text.slice(0, text.length - sym.length)) * Math.pow(10, 3 * symbols.indexOf(sym));\\n    return Number.NaN;\\n}\\n\\n/**\\n * Return a number formatted with the specified number of significatnt figures or decimal places, whichever is more limiting.\\n * @param {number} num - The number to format\\n * @param {number=} minSignificantFigures - (default: 6) The minimum significant figures you wish to see (e.g. 123, 12.3 and 1.23 all have 3 significant figures)\\n * @param {number=} minDecimalPlaces - (default: 3) The minimum decimal places you wish to see, regardless of significant figures. (e.g. 12.3, 1.2, 0.1 all have 1 decimal)\\n **/\\nexport function formatNumber(num, minSignificantFigures = 3, minDecimalPlaces = 1) {\\n    return num == 0.0 ? num : num.toFixed(Math.max(minDecimalPlaces, Math.max(0, minSignificantFigures - Math.ceil(Math.log10(num)))));\\n}\\n\\n/** Formats some RAM amount as a round number of GB with thousands separators e.g. `1,028 GB` */\\nexport function formatRam(num) { return `${Math.round(num).toLocaleString()} GB`; }\\n\\n/** Return a datatime in ISO format */\\nexport function formatDateTime(datetime) { return datetime.toISOString(); }\\n\\n/** Format a duration (in milliseconds) as e.g. '1h 21m 6s' for big durations or e.g '12.5s' / '23ms' for small durations */\\nexport function formatDuration(duration) {\\n    if (duration < 1000) return `${duration.toFixed(0)}ms`\\n    const portions = [];\\n    const msInHour = 1000 * 60 * 60;\\n    const hours = Math.trunc(duration / msInHour);\\n    if (hours > 0) {\\n        portions.push(hours + 'h');\\n        duration -= (hours * msInHour);\\n    }\\n    const msInMinute = 1000 * 60;\\n    const minutes = Math.trunc(duration / msInMinute);\\n    if (minutes > 0) {\\n        portions.push(minutes + 'm');\\n        duration -= (minutes * msInMinute);\\n    }\\n    let seconds = (duration / 1000.0)\\n    // Include millisecond precision if we're on the order of seconds\\n    seconds = (hours == 0 && minutes == 0) ? seconds.toPrecision(3) : seconds.toFixed(0);\\n    if (seconds > 0) {\\n        portions.push(seconds + 's');\\n        duration -= (minutes * 1000);\\n    }\\n    return portions.join(' ');\\n}\\n\\n/** Generate a hashCode for a string that is pretty unique most of the time */\\nexport function hashCode(s) { return s.split(\\\"\\\").reduce(function (a, b) { a = ((a << 5) - a) + b.charCodeAt(0); return a & a }, 0); }\\n\\n/** @param {NS} ns **/\\nexport function disableLogs(ns, listOfLogs) { ['disableLog'].concat(...listOfLogs).forEach(log => checkNsInstance(ns, '\\\"disableLogs\\\"').disableLog(log)); }\\n\\n/** Joins all arguments as components in a path, e.g. pathJoin(\\\"foo\\\", \\\"bar\\\", \\\"/baz\\\") = \\\"foo/bar/baz\\\" **/\\nexport function pathJoin(...args) {\\n    return args.filter(s => !!s).join('/').replace(/\\\\/\\\\/+/g, '/');\\n}\\n\\n/** Gets the path for the given local file, taking into account optional subfolder relocation via git-pull.js **/\\nexport function getFilePath(file) {\\n    const subfolder = '';  // git-pull.js optionally modifies this when downloading\\n    return pathJoin(subfolder, file);\\n}\\n\\n// FUNCTIONS THAT PROVIDE ALTERNATIVE IMPLEMENTATIONS TO EXPENSIVE NS FUNCTIONS\\n// VARIATIONS ON NS.RUN\\n\\n/** @param {NS} ns\\n *  Use where a function is required to run a script and you have already referenced ns.run in your script **/\\nexport function getFnRunViaNsRun(ns) { return checkNsInstance(ns, '\\\"getFnRunViaNsRun\\\"').run; }\\n\\n/** @param {NS} ns\\n *  Use where a function is required to run a script and you have already referenced ns.exec in your script **/\\nexport function getFnRunViaNsExec(ns, host = \\\"home\\\") {\\n    checkNsInstance(ns, '\\\"getFnRunViaNsExec\\\"');\\n    return function (scriptPath, ...args) { return ns.exec(scriptPath, host, ...args); }\\n}\\n// VARIATIONS ON NS.ISRUNNING\\n\\n/** @param {NS} ns\\n *  Use where a function is required to run a script and you have already referenced ns.run in your script  */\\nexport function getFnIsAliveViaNsIsRunning(ns) { return checkNsInstance(ns, '\\\"getFnIsAliveViaNsIsRunning\\\"').isRunning; }\\n\\n/** @param {NS} ns\\n *  Use where a function is required to run a script and you have already referenced ns.exec in your script  */\\nexport function getFnIsAliveViaNsPs(ns) {\\n    checkNsInstance(ns, '\\\"getFnIsAliveViaNsPs\\\"');\\n    return function (pid, host) { return ns.ps(host).some(process => process.pid === pid); }\\n}\\n\\n/**\\n * Retrieve the result of an ns command by executing it in a temporary .js script, writing the result to a file, then shuting it down\\n * Importing incurs a maximum of 1.1 GB RAM (0 GB for ns.read, 1 GB for ns.run, 0.1 GB for ns.isRunning).\\n * Has the capacity to retry if there is a failure (e.g. due to lack of RAM available). Not recommended for performance-critical code.\\n * @param {NS} ns - The nestcript instance passed to your script's main entry point\\n * @param {string} command - The ns command that should be invoked to get the desired data (e.g. \\\"ns.getServer('home')\\\" )\\n * @param {string=} fName - (default \\\"/Temp/{commandhash}-data.txt\\\") The name of the file to which data will be written to disk by a temporary process\\n * @param {bool=} verbose - (default false) If set to true, pid and result of command are logged.\\n **/\\nexport async function getNsDataThroughFile(ns, command, fName, verbose = false, maxRetries = 5, retryDelayMs = 50) {\\n    checkNsInstance(ns, '\\\"getNsDataThroughFile\\\"');\\n    if (!verbose) disableLogs(ns, ['run', 'isRunning']);\\n    return await getNsDataThroughFile_Custom(ns, ns.run, ns.isRunning, command, fName, verbose, maxRetries, retryDelayMs);\\n}\\n\\n/**\\n * An advanced version of getNsDataThroughFile that lets you pass your own \\\"fnRun\\\" and \\\"fnIsAlive\\\" implementations to reduce RAM requirements\\n * Importing incurs no RAM (now that ns.read is free) plus whatever fnRun / fnIsAlive you provide it\\n * Has the capacity to retry if there is a failure (e.g. due to lack of RAM available). Not recommended for performance-critical code.\\n * @param {NS} ns - The nestcript instance passed to your script's main entry point\\n * @param {function} fnRun - A single-argument function used to start the new sript, e.g. `ns.run` or `(f,...args) => ns.exec(f, \\\"home\\\", ...args)`\\n * @param {function} fnIsAlive - A single-argument function used to start the new sript, e.g. `ns.isRunning` or `pid => ns.ps(\\\"home\\\").some(process => process.pid === pid)`\\n **/\\nexport async function getNsDataThroughFile_Custom(ns, fnRun, fnIsAlive, command, fName, verbose = false, maxRetries = 5, retryDelayMs = 50) {\\n    checkNsInstance(ns, '\\\"getNsDataThroughFile_Custom\\\"');\\n    if (!verbose) disableLogs(ns, ['read']);\\n    const commandHash = hashCode(command);\\n    fName = fName || `/Temp/${commandHash}-data.txt`;\\n    const fNameCommand = (fName || `/Temp/${commandHash}-command`) + '.js'\\n    // Prepare a command that will write out a new file containing the results of the command\\n    // unless it already exists with the same contents (saves time/ram to check first)\\n    // If an error occurs, it will write an empty file to avoid old results being misread.\\n    const commandToFile = `let result = \\\"\\\"; try { result = JSON.stringify(${command}); } catch { }\\n        if (ns.read(\\\"${fName}\\\") != result) await ns.write(\\\"${fName}\\\", result, 'w')`;\\n    // Run the command with auto-retries if it fails\\n    const pid = await runCommand_Custom(ns, fnRun, commandToFile, fNameCommand, false, maxRetries, retryDelayMs);\\n    // Wait for the process to complete\\n    await waitForProcessToComplete_Custom(ns, fnIsAlive, pid, verbose);\\n    if (verbose) ns.print(`Process ${pid} is done. Reading the contents of ${fName}...`);\\n    // Read the file, with auto-retries if it fails\\n    const fileData = await autoRetry(ns, () => ns.read(fName), f => f !== undefined && f !== \\\"\\\",\\n        () => `ns.read('${fName}') somehow returned undefined or an empty string`,\\n        maxRetries, retryDelayMs, undefined, verbose);\\n    if (verbose) ns.print(`Read the following data for command ${command}:\\\\n${fileData}`);\\n    return JSON.parse(fileData); // Deserialize it back into an object/array and return\\n}\\n\\n/** Evaluate an arbitrary ns command by writing it to a new script and then running or executing it.\\n * @param {NS} ns - The nestcript instance passed to your script's main entry point\\n * @param {string} command - The ns command that should be invoked to get the desired data (e.g. \\\"ns.getServer('home')\\\" )\\n * @param {string=} fileName - (default \\\"/Temp/{commandhash}-data.txt\\\") The name of the file to which data will be written to disk by a temporary process\\n * @param {bool=} verbose - (default false) If set to true, the evaluation result of the command is printed to the terminal\\n * @param {...args} args - args to be passed in as arguments to command being run as a new script.\\n */\\nexport async function runCommand(ns, command, fileName, verbose = false, maxRetries = 5, retryDelayMs = 50, ...args) {\\n    checkNsInstance(ns, '\\\"runCommand\\\"');\\n    if (!verbose) disableLogs(ns, ['run', 'sleep']);\\n    return await runCommand_Custom(ns, ns.run, command, fileName, verbose, maxRetries, retryDelayMs, ...args);\\n}\\n\\n/**\\n * An advanced version of runCommand that lets you pass your own \\\"isAlive\\\" test to reduce RAM requirements (e.g. to avoid referencing ns.isRunning)\\n * Importing incurs 0 GB RAM (assuming fnRun, fnWrite are implemented using another ns function you already reference elsewhere like ns.exec)\\n * @param {NS} ns - The nestcript instance passed to your script's main entry point\\n * @param {function} fnRun - A single-argument function used to start the new sript, e.g. `ns.run` or `(f,...args) => ns.exec(f, \\\"home\\\", ...args)`\\n **/\\nexport async function runCommand_Custom(ns, fnRun, command, fileName, verbose = false, maxRetries = 5, retryDelayMs = 50, ...args) {\\n    checkNsInstance(ns, '\\\"runCommand_Custom\\\"');\\n    let script = `import { formatMoney, formatNumberShort, formatDuration, parseShortNumber, scanAllServers } fr` + `om '${getFilePath('helpers.js')}'\\\\n` +\\n        `export async function main(ns) { try { ` +\\n        (verbose ? `let output = ${command}; ns.tprint(output)` : command) +\\n        `; } catch(err) { ns.tprint(String(err)); throw(err); } }`;\\n    fileName = fileName || `/Temp/${hashCode(command)}-command.js`;\\n    // To improve performance and save on garbage collection, we can skip writing this exact same script was previously written (common for repeatedly-queried data)\\n    if (ns.read(fileName) != script) await ns.write(fileName, script, \\\"w\\\");\\n    return await autoRetry(ns, () => fnRun(fileName, ...args), temp_pid => temp_pid !== 0,\\n        () => `Run command returned no pid. Destination: ${fileName} Command: ${command}\\\\nEnsure you have sufficient free RAM to run this temporary script.`,\\n        maxRetries, retryDelayMs, undefined, verbose);\\n}\\n\\n/**\\n * Wait for a process id to complete running\\n * Importing incurs a maximum of 0.1 GB RAM (for ns.isRunning) \\n * @param {NS} ns - The nestcript instance passed to your script's main entry point\\n * @param {int} pid - The process id to monitor\\n * @param {bool=} verbose - (default false) If set to true, pid and result of command are logged.\\n **/\\nexport async function waitForProcessToComplete(ns, pid, verbose) {\\n    checkNsInstance(ns, '\\\"waitForProcessToComplete\\\"');\\n    if (!verbose) disableLogs(ns, ['isRunning']);\\n    return await waitForProcessToComplete_Custom(ns, ns.isRunning, pid, verbose);\\n}\\n/**\\n * An advanced version of waitForProcessToComplete that lets you pass your own \\\"isAlive\\\" test to reduce RAM requirements (e.g. to avoid referencing ns.isRunning)\\n * Importing incurs 0 GB RAM (assuming fnIsAlive is implemented using another ns function you already reference elsewhere like ns.ps) \\n * @param {NS} ns - The nestcript instance passed to your script's main entry point\\n * @param {function} fnIsAlive - A single-argument function used to start the new sript, e.g. `ns.isRunning` or `pid => ns.ps(\\\"home\\\").some(process => process.pid === pid)`\\n **/\\nexport async function waitForProcessToComplete_Custom(ns, fnIsAlive, pid, verbose) {\\n    checkNsInstance(ns, '\\\"waitForProcessToComplete_Custom\\\"');\\n    if (!verbose) disableLogs(ns, ['sleep']);\\n    // Wait for the PID to stop running (cheaper than e.g. deleting (rm) a possibly pre-existing file and waiting for it to be recreated)\\n    for (var retries = 0; retries < 1000; retries++) {\\n        if (!fnIsAlive(pid)) break; // Script is done running\\n        if (verbose && retries % 100 === 0) ns.print(`Waiting for pid ${pid} to complete... (${retries})`);\\n        await ns.sleep(10);\\n    }\\n    // Make sure that the process has shut down and we haven't just stopped retrying\\n    if (fnIsAlive(pid)) {\\n        let errorMessage = `run-command pid ${pid} is running much longer than expected. Max retries exceeded.`;\\n        ns.print(errorMessage);\\n        throw errorMessage;\\n    }\\n}\\n\\n/** Helper to retry something that failed temporarily (can happen when e.g. we temporarily don't have enough RAM to run)\\n * @param {NS} ns - The nestcript instance passed to your script's main entry point */\\nexport async function autoRetry(ns, fnFunctionThatMayFail, fnSuccessCondition, errorContext = \\\"Success condition not met\\\",\\n    maxRetries = 5, initialRetryDelayMs = 50, backoffRate = 3, verbose = false) {\\n    checkNsInstance(ns, '\\\"autoRetry\\\"');\\n    let retryDelayMs = initialRetryDelayMs;\\n    while (maxRetries-- > 0) {\\n        try {\\n            const result = await fnFunctionThatMayFail()\\n            if (!fnSuccessCondition(result)) throw typeof errorContext === 'string' ? errorContext : errorContext();\\n            return result;\\n        }\\n        catch (error) {\\n            const fatal = maxRetries === 0;\\n            const errorLog = `${fatal ? 'FAIL' : 'WARN'}: (${maxRetries} retries remaining): ${String(error)}`\\n            log(ns, errorLog, fatal, !verbose ? undefined : (fatal ? 'error' : 'warning'))\\n            if (fatal) throw error;\\n            await ns.sleep(retryDelayMs);\\n            retryDelayMs *= backoffRate;\\n        }\\n    }\\n}\\n\\n/** Helper to log a message, and optionally also tprint it and toast it\\n * @param {NS} ns - The nestcript instance passed to your script's main entry point */\\nexport function log(ns, message = \\\"\\\", alsoPrintToTerminal = false, toastStyle = \\\"\\\", maxToastLength = 100) {\\n    checkNsInstance(ns, '\\\"log\\\"');\\n    ns.print(message);\\n    if (alsoPrintToTerminal) ns.tprint(message);\\n    if (toastStyle) ns.toast(message.length <= maxToastLength ? message : message.substring(0, maxToastLength - 3) + \\\"...\\\", toastStyle);\\n    return message;\\n}\\n\\n/** Helper to get a list of all hostnames on the network\\n * @param {NS} ns - The nestcript instance passed to your script's main entry point */\\nexport function scanAllServers(ns) {\\n    checkNsInstance(ns, '\\\"scanAllServers\\\"');\\n    let discoveredHosts = []; // Hosts (a.k.a. servers) we have scanned\\n    let hostsToScan = [\\\"home\\\"]; // Hosts we know about, but have no yet scanned\\n    let infiniteLoopProtection = 9999; // In case you mess with this code, this should save you from getting stuck\\n    while (hostsToScan.length > 0 && infiniteLoopProtection-- > 0) { // Loop until the list of hosts to scan is empty\\n        let hostName = hostsToScan.pop(); // Get the next host to be scanned\\n        for (const connectedHost of ns.scan(hostName)) // \\\"scan\\\" (list all hosts connected to this one)\\n            if (!discoveredHosts.includes(connectedHost)) // If we haven't already scanned this host\\n                hostsToScan.push(connectedHost); // Add it to the queue of hosts to be scanned\\n        discoveredHosts.push(hostName); // Mark this host as \\\"scanned\\\"\\n    }\\n    return discoveredHosts; // The list of scanned hosts should now be the set of all hosts in the game!\\n}\\n\\n/** @param {NS} ns \\n * Get a dictionary of active source files, taking into account the current active bitnode as well. **/\\nexport async function getActiveSourceFiles(ns) {\\n    return await getActiveSourceFiles_Custom(ns, getNsDataThroughFile);\\n}\\n\\n/** @param {NS} ns \\n * getActiveSourceFiles Helper that allows the user to pass in their chosen implementation of getNsDataThroughFile to minimize RAM usage **/\\nexport async function getActiveSourceFiles_Custom(ns, fnGetNsDataThroughFile) {\\n    checkNsInstance(ns, '\\\"getActiveSourceFiles\\\"');\\n    let tempFile = '/Temp/owned-source-files.txt';\\n    // Find out what source files the user has unlocked\\n    let dictSourceFiles;\\n    try { await fnGetNsDataThroughFile(ns, `Object.fromEntries(ns.getOwnedSourceFiles().map(sf => [sf.n, sf.lvl]))`, tempFile); } catch { }\\n    if (!dictSourceFiles) { // Bit of a hack, but if RAM is so low that this fails, we can fallback to using an older version of this file, and even assuming we have no source files.\\n        dictSourceFiles = ns.read(tempFile)\\n        dictSourceFiles = dictSourceFiles ? JSON.parse(dictSourceFiles) : {};\\n    }\\n    // If the user is currently in a given bitnode, they will have its features unlocked\\n    dictSourceFiles[(await fnGetNsDataThroughFile(ns, 'ns.getPlayer()', '/Temp/player-info.txt')).bitNodeN] = 3;\\n    return dictSourceFiles;\\n}\\n\\n/** @param {NS} ns \\n * Return bitnode multiplers, or null if they cannot be accessed. **/\\nexport async function tryGetBitNodeMultipliers(ns) {\\n    return await tryGetBitNodeMultipliers_Custom(ns, getNsDataThroughFile);\\n}\\n\\n/** @param {NS} ns\\n * tryGetBitNodeMultipliers Helper that allows the user to pass in their chosen implementation of getNsDataThroughFile to minimize RAM usage **/\\nexport async function tryGetBitNodeMultipliers_Custom(ns, fnGetNsDataThroughFile) {\\n    checkNsInstance(ns, '\\\"tryGetBitNodeMultipliers\\\"');\\n    let canGetBitNodeMultipliers = false;\\n    try { canGetBitNodeMultipliers = 5 in (await getActiveSourceFiles_Custom(ns, fnGetNsDataThroughFile)); } catch { }\\n    if (!canGetBitNodeMultipliers) return null;\\n    try { return await fnGetNsDataThroughFile(ns, 'ns.getBitNodeMultipliers()', '/Temp/bitnode-multipliers.txt'); } catch { }\\n    return null;\\n}\\n\\n/** @param {NS} ns \\n * Returns a helpful error message if we forgot to pass the ns instance to a function */\\nexport function checkNsInstance(ns, fnName = \\\"this function\\\") { if (!ns.print) throw `The first argument to ${fnName} should be a 'ns' instance.`; return ns; }\",\"filename\":\"helpers.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4.4,\"server\":\"run4theh111z\",\"moduleSequenceNumber\":224,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"run\",\"cost\":1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"isRunning\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"ps\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tawait ns.share()\\n}\",\"filename\":\"/Remote/share.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/Remote/share.js\",\"url\":\"blob:file:///fb944cca-0a20-440d-b7a6-76a2479b0c00\",\"moduleSequenceNumber\":334}],\"dependents\":[],\"ramUsage\":4,\"server\":\"run4theh111z\",\"moduleSequenceNumber\":334,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"taiyang-digital\",\"helios\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":0,\"hackDifficulty\":0,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":4,\"openPortCount\":5,\"requiredHackingSkill\":523,\"serverGrowth\":0}},\"I.I.I.I\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"I.I.I.I\",\"httpPortOpen\":true,\"ip\":\"54.4.5.7\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"democracy-is-dead.lit\"],\"organizationName\":\"I.I.I.I\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"johnson-ortho\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":0,\"hackDifficulty\":0,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":3,\"openPortCount\":5,\"requiredHackingSkill\":363,\"serverGrowth\":0}},\"avmnite-02h\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"avmnite-02h\",\"httpPortOpen\":true,\"ip\":\"14.2.0.1\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"democracy-is-dead.lit\"],\"organizationName\":\"NiteSec\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"omega-net\",\"syscore\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":0,\"hackDifficulty\":0,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":2,\"openPortCount\":5,\"requiredHackingSkill\":207,\"serverGrowth\":0}},\".\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\".\",\"httpPortOpen\":true,\"ip\":\"68.2.6.9\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\".\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"fulcrumtech\",\"blade\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":0,\"hackDifficulty\":0,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":4,\"openPortCount\":5,\"requiredHackingSkill\":507,\"serverGrowth\":0}},\"CSEC\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"CSEC\",\"httpPortOpen\":true,\"ip\":\"11.6.6.6\",\"isConnectedTo\":false,\"maxRam\":8,\"messages\":[\"democracy-is-dead.lit\"],\"organizationName\":\"CyberSec\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"harakiri-sushi\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":0,\"hackDifficulty\":0,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":1,\"openPortCount\":5,\"requiredHackingSkill\":60,\"serverGrowth\":0}},\"The-Cave\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"The-Cave\",\"httpPortOpen\":true,\"ip\":\"26.6.6.5\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"alpha-omega.lit\"],\"organizationName\":\"Helios\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"nwo\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":0,\"hackDifficulty\":0,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":925,\"serverGrowth\":0}},\"w0r1d_d43m0n\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"w0r1d_d43m0n\",\"httpPortOpen\":false,\"ip\":\"57.1.0.4\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"w0r1d_d43m0n\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":0,\"hackDifficulty\":0,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":6000,\"serverGrowth\":0}},\"darkweb\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"darkweb\",\"httpPortOpen\":true,\"ip\":\"63.8.5.1\",\"isConnectedTo\":false,\"maxRam\":1,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1,\"serverGrowth\":1}}}","CompaniesSave":"{\"ECorp\":{\"ctor\":\"Company\",\"data\":{\"name\":\"ECorp\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":3,\"salaryMultiplier\":3,\"jobStatReqOffset\":249,\"isPlayerEmployed\":false,\"playerReputation\":230139.24108900168,\"favor\":0.002,\"isMegacorp\":false}},\"MegaCorp\":{\"ctor\":\"Company\",\"data\":{\"name\":\"MegaCorp\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":3,\"salaryMultiplier\":3,\"jobStatReqOffset\":249,\"isPlayerEmployed\":false,\"playerReputation\":205251.19399127224,\"favor\":0.002,\"isMegacorp\":false}},\"Bachman & Associates\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Bachman & Associates\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.6,\"salaryMultiplier\":2.6,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":225621.4956860353,\"favor\":0.002,\"isMegacorp\":false}},\"Blade Industries\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Blade Industries\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.75,\"salaryMultiplier\":2.75,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":217707.93614805146,\"favor\":0.002,\"isMegacorp\":false}},\"NWO\":{\"ctor\":\"Company\",\"data\":{\"name\":\"NWO\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.75,\"salaryMultiplier\":2.75,\"jobStatReqOffset\":249,\"isPlayerEmployed\":false,\"playerReputation\":223839.154729035,\"favor\":0.002,\"isMegacorp\":false}},\"Clarke Incorporated\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Clarke Incorporated\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.25,\"salaryMultiplier\":2.25,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":216793.7069104468,\"favor\":0.002,\"isMegacorp\":false}},\"OmniTek Incorporated\":{\"ctor\":\"Company\",\"data\":{\"name\":\"OmniTek Incorporated\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.25,\"salaryMultiplier\":2.25,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":218585.64013503963,\"favor\":0.002,\"isMegacorp\":false}},\"Four Sigma\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Four Sigma\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.5,\"salaryMultiplier\":2.5,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":210978.0263635624,\"favor\":0.002,\"isMegacorp\":false}},\"KuaiGong International\":{\"ctor\":\"Company\",\"data\":{\"name\":\"KuaiGong International\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.2,\"salaryMultiplier\":2.2,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":205925.273531275,\"favor\":0.002,\"isMegacorp\":false}},\"Fulcrum Technologies\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Fulcrum Technologies\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true},\"expMultiplier\":2,\"salaryMultiplier\":2,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":3244092.625236229,\"favor\":0.002,\"isMegacorp\":false}},\"Storm Technologies\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Storm Technologies\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true},\"expMultiplier\":1.8,\"salaryMultiplier\":1.8,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.002,\"isMegacorp\":false}},\"DefComm\":{\"ctor\":\"Company\",\"data\":{\"name\":\"DefComm\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.75,\"salaryMultiplier\":1.75,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.002,\"isMegacorp\":false}},\"Helios Labs\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Helios Labs\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.8,\"salaryMultiplier\":1.8,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.002,\"isMegacorp\":false}},\"VitaLife\":{\"ctor\":\"Company\",\"data\":{\"name\":\"VitaLife\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.8,\"salaryMultiplier\":1.8,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.002,\"isMegacorp\":false}},\"Icarus Microsystems\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Icarus Microsystems\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.9,\"salaryMultiplier\":1.9,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.002,\"isMegacorp\":false}},\"Universal Energy\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Universal Energy\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":2,\"salaryMultiplier\":2,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.002,\"isMegacorp\":false}},\"Galactic Cybersystems\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Galactic Cybersystems\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.9,\"salaryMultiplier\":1.9,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.002,\"isMegacorp\":false}},\"AeroCorp\":{\"ctor\":\"Company\",\"data\":{\"name\":\"AeroCorp\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Operations Manager\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.7,\"salaryMultiplier\":1.7,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.002,\"isMegacorp\":false}},\"Omnia Cybersystems\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Omnia Cybersystems\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Operations Manager\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.7,\"salaryMultiplier\":1.7,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.002,\"isMegacorp\":false}},\"Solaris Space Systems\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Solaris Space Systems\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Operations Manager\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.7,\"salaryMultiplier\":1.7,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.002,\"isMegacorp\":false}},\"DeltaOne\":{\"ctor\":\"Company\",\"data\":{\"name\":\"DeltaOne\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Operations Manager\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.6,\"salaryMultiplier\":1.6,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.002,\"isMegacorp\":false}},\"Global Pharmaceuticals\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Global Pharmaceuticals\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.8,\"salaryMultiplier\":1.8,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.002,\"isMegacorp\":false}},\"Nova Medical\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Nova Medical\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.75,\"salaryMultiplier\":1.75,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.002,\"isMegacorp\":false}},\"Central Intelligence Agency\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Central Intelligence Agency\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true,\"Field Agent\":true,\"Secret Agent\":true,\"Special Operative\":true},\"expMultiplier\":2,\"salaryMultiplier\":2,\"jobStatReqOffset\":149,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.002,\"isMegacorp\":false}},\"National Security Agency\":{\"ctor\":\"Company\",\"data\":{\"name\":\"National Security Agency\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true,\"Field Agent\":true,\"Secret Agent\":true,\"Special Operative\":true},\"expMultiplier\":2,\"salaryMultiplier\":2,\"jobStatReqOffset\":149,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.002,\"isMegacorp\":false}},\"Watchdog Security\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Watchdog Security\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true,\"Field Agent\":true,\"Secret Agent\":true,\"Special Operative\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.5,\"salaryMultiplier\":1.5,\"jobStatReqOffset\":124,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.002,\"isMegacorp\":false}},\"LexoCorp\":{\"ctor\":\"Company\",\"data\":{\"name\":\"LexoCorp\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.4,\"salaryMultiplier\":1.4,\"jobStatReqOffset\":99,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.002,\"isMegacorp\":false}},\"Rho Construction\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Rho Construction\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true},\"expMultiplier\":1.3,\"salaryMultiplier\":1.3,\"jobStatReqOffset\":49,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.002,\"isMegacorp\":false}},\"Alpha Enterprises\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Alpha Enterprises\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.5,\"salaryMultiplier\":1.5,\"jobStatReqOffset\":99,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.002,\"isMegacorp\":false}},\"Aevum Police Headquarters\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Aevum Police Headquarters\",\"info\":\"\",\"companyPositions\":{\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true},\"expMultiplier\":1.3,\"salaryMultiplier\":1.3,\"jobStatReqOffset\":99,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.002,\"isMegacorp\":false}},\"SysCore Securities\":{\"ctor\":\"Company\",\"data\":{\"name\":\"SysCore Securities\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true},\"expMultiplier\":1.3,\"salaryMultiplier\":1.3,\"jobStatReqOffset\":124,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.002,\"isMegacorp\":false}},\"CompuTek\":{\"ctor\":\"Company\",\"data\":{\"name\":\"CompuTek\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true},\"expMultiplier\":1.2,\"salaryMultiplier\":1.2,\"jobStatReqOffset\":74,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.002,\"isMegacorp\":false}},\"NetLink Technologies\":{\"ctor\":\"Company\",\"data\":{\"name\":\"NetLink Technologies\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true},\"expMultiplier\":1.2,\"salaryMultiplier\":1.2,\"jobStatReqOffset\":99,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.002,\"isMegacorp\":false}},\"Carmichael Security\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Carmichael Security\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Field Agent\":true,\"Secret Agent\":true,\"Special Operative\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.2,\"salaryMultiplier\":1.2,\"jobStatReqOffset\":74,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.002,\"isMegacorp\":false}},\"FoodNStuff\":{\"ctor\":\"Company\",\"data\":{\"name\":\"FoodNStuff\",\"info\":\"\",\"companyPositions\":{\"Employee\":true,\"Part-time Employee\":true},\"expMultiplier\":1,\"salaryMultiplier\":1,\"jobStatReqOffset\":0,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.002,\"isMegacorp\":false}},\"Joe's Guns\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Joe's Guns\",\"info\":\"\",\"companyPositions\":{\"Employee\":true,\"Part-time Employee\":true},\"expMultiplier\":1,\"salaryMultiplier\":1,\"jobStatReqOffset\":0,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.002,\"isMegacorp\":false}},\"Omega Software\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Omega Software\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true},\"expMultiplier\":1.1,\"salaryMultiplier\":1.1,\"jobStatReqOffset\":49,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.002,\"isMegacorp\":false}},\"Noodle Bar\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Noodle Bar\",\"info\":\"\",\"companyPositions\":{\"Waiter\":true,\"Part-time Waiter\":true},\"expMultiplier\":1,\"salaryMultiplier\":1,\"jobStatReqOffset\":0,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.002,\"isMegacorp\":false}}}","FactionsSave":"{\"Illuminati\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Synthetic Heart\",\"Synfibril Muscle\",\"NEMEAN Subdermal Weave\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"NeuroFlux Governor\",\"QLink\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Illuminati\",\"playerReputation\":0}},\"Daedalus\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Synthetic Heart\",\"Synfibril Muscle\",\"NEMEAN Subdermal Weave\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"NeuroFlux Governor\",\"The Red Pill\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Daedalus\",\"playerReputation\":0}},\"The Covenant\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Augmented Targeting III\",\"Synthetic Heart\",\"Synfibril Muscle\",\"Combat Rib III\",\"NEMEAN Subdermal Weave\",\"Graphene Bone Lacings\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"NeuroFlux Governor\",\"SPTN-97 Gene Modification\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"The Covenant\",\"playerReputation\":0}},\"ECorp\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"Graphene Bionic Spine Upgrade\",\"Graphene Bionic Legs Upgrade\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"PC Direct-Neural Interface\",\"PC Direct-Neural Interface Optimization Submodule\",\"NeuroFlux Governor\",\"ECorp HVMind Implant\"],\"favor\":0,\"isBanned\":false,\"isMember\":true,\"name\":\"ECorp\",\"playerReputation\":496731.78089257184}},\"MegaCorp\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"Graphene Bionic Legs Upgrade\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"ADR-V1 Pheromone Gene\",\"NeuroFlux Governor\",\"CordiARC Fusion Reactor\"],\"favor\":0,\"isBanned\":false,\"isMember\":true,\"name\":\"MegaCorp\",\"playerReputation\":491899.40930415853}},\"Bachman & Associates\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"Enhanced Social Interaction Implant\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"Speech Enhancement\",\"FocusWire\",\"ADR-V2 Pheromone Gene\",\"NeuroFlux Governor\",\"SmartJaw\"],\"favor\":0,\"isBanned\":false,\"isMember\":true,\"name\":\"Bachman & Associates\",\"playerReputation\":491347.70301441604}},\"Blade Industries\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Synfibril Muscle\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Nanofiber Weave\",\"Bionic Spine\",\"Bionic Legs\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"PC Direct-Neural Interface\",\"PC Direct-Neural Interface Optimization Submodule\",\"NeuroFlux Governor\",\"HyperSight Corneal Implant\",\"Neotra\"],\"favor\":0,\"isBanned\":false,\"isMember\":true,\"name\":\"Blade Industries\",\"playerReputation\":1014095.9628758786}},\"NWO\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"Synthetic Heart\",\"Synfibril Muscle\",\"Enhanced Social Interaction Implant\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"ADR-V1 Pheromone Gene\",\"NeuroFlux Governor\",\"Neurotrainer III\",\"Power Recirculation Core\",\"Xanipher\",\"Hydroflame Left Arm\"],\"favor\":0,\"isBanned\":false,\"isMember\":true,\"name\":\"NWO\",\"playerReputation\":492166.59727716073}},\"Clarke Incorporated\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"Enhanced Social Interaction Implant\",\"Neuralstimulator\",\"Neuronal Densification\",\"Nuoptimal Nootropic Injector Implant\",\"Speech Enhancement\",\"FocusWire\",\"ADR-V2 Pheromone Gene\",\"NeuroFlux Governor\",\"nextSENS Gene Modification\"],\"favor\":0,\"isBanned\":false,\"isMember\":true,\"name\":\"Clarke Incorporated\",\"playerReputation\":491587.86030319973}},\"OmniTek Incorporated\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Nanofiber Weave\",\"Bionic Spine\",\"Bionic Legs\",\"Enhanced Social Interaction Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"PC Direct-Neural Interface\",\"NeuroFlux Governor\",\"OmniTek InfoLoad\"],\"favor\":0,\"isBanned\":false,\"isMember\":true,\"name\":\"OmniTek Incorporated\",\"playerReputation\":1034094.1728949044}},\"Four Sigma\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"Enhanced Social Interaction Implant\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"Speech Enhancement\",\"FocusWire\",\"PC Direct-Neural Interface\",\"ADR-V1 Pheromone Gene\",\"ADR-V2 Pheromone Gene\",\"NeuroFlux Governor\",\"Neurotrainer III\"],\"favor\":0,\"isBanned\":false,\"isMember\":true,\"name\":\"Four Sigma\",\"playerReputation\":492575.3548161497}},\"KuaiGong International\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Synthetic Heart\",\"Synfibril Muscle\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Bionic Spine\",\"Bionic Legs\",\"Embedded Netburner Module Core V2 Upgrade\",\"Speech Enhancement\",\"FocusWire\",\"NeuroFlux Governor\",\"HyperSight Corneal Implant\",\"Photosynthetic Cells\"],\"favor\":0,\"isBanned\":false,\"isMember\":true,\"name\":\"KuaiGong International\",\"playerReputation\":927286.1194664354}},\"Fulcrum Secret Technologies\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"Synthetic Heart\",\"Synfibril Muscle\",\"Nanofiber Weave\",\"NEMEAN Subdermal Weave\",\"Graphene Bone Lacings\",\"Graphene Bionic Spine Upgrade\",\"Graphene Bionic Legs Upgrade\",\"Artificial Bio-neural Network Implant\",\"Enhanced Myelin Sheathing\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"PC Direct-Neural Interface Optimization Submodule\",\"PC Direct-Neural Interface NeuroNet Injector\",\"NeuroFlux Governor\"],\"favor\":0,\"isBanned\":false,\"isMember\":true,\"name\":\"Fulcrum Secret Technologies\",\"playerReputation\":491225.93622319284}},\"BitRunners\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"Artificial Bio-neural Network Implant\",\"Enhanced Myelin Sheathing\",\"DataJack\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Neural Accelerator\",\"Cranial Signal Processors - Gen III\",\"Cranial Signal Processors - Gen IV\",\"Cranial Signal Processors - Gen V\",\"NeuroFlux Governor\",\"Neurotrainer II\",\"BitRunners Neurolink\"],\"favor\":0,\"isBanned\":false,\"isMember\":true,\"name\":\"BitRunners\",\"playerReputation\":497165.0982348614}},\"The Black Hand\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"Artificial Synaptic Potentiation\",\"Enhanced Myelin Sheathing\",\"DataJack\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Neuralstimulator\",\"Cranial Signal Processors - Gen III\",\"Cranial Signal Processors - Gen IV\",\"NeuroFlux Governor\",\"The Black Hand\"],\"favor\":0,\"isBanned\":false,\"isMember\":true,\"name\":\"The Black Hand\",\"playerReputation\":6290.991877501944}},\"NiteSec\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"BitWire\",\"Artificial Synaptic Potentiation\",\"Neural-Retention Enhancement\",\"DataJack\",\"Embedded Netburner Module\",\"Cranial Signal Processors - Gen II\",\"Cranial Signal Processors - Gen III\",\"NeuroFlux Governor\",\"Neurotrainer II\",\"CRTX42-AA Gene Modification\"],\"favor\":0,\"isBanned\":false,\"isMember\":true,\"name\":\"NiteSec\",\"playerReputation\":6290.991877501944}},\"Aevum\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Wired Reflexes\",\"Speech Processor Implant\",\"Synaptic Enhancement Implant\",\"Neuralstimulator\",\"NeuroFlux Governor\",\"Neurotrainer I\",\"PCMatrix\"],\"favor\":0,\"isBanned\":true,\"isMember\":false,\"name\":\"Aevum\",\"playerReputation\":0}},\"Chongqing\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"Speech Processor Implant\",\"DataJack\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"NeuroFlux Governor\",\"Neuregen Gene Modification\"],\"favor\":0,\"isBanned\":false,\"isMember\":true,\"name\":\"Chongqing\",\"playerReputation\":492695.68591779587}},\"Ishima\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"Augmented Targeting I\",\"Combat Rib I\",\"Wired Reflexes\",\"Speech Processor Implant\",\"Neuralstimulator\",\"NeuroFlux Governor\",\"INFRARET Enhancement\"],\"favor\":0,\"isBanned\":false,\"isMember\":true,\"name\":\"Ishima\",\"playerReputation\":75182.74023621084}},\"New Tokyo\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"Speech Processor Implant\",\"DataJack\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"NeuroFlux Governor\",\"NutriGen Implant\"],\"favor\":0,\"isBanned\":false,\"isMember\":true,\"name\":\"New Tokyo\",\"playerReputation\":493016.2859706858}},\"Sector-12\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"Augmented Targeting I\",\"Augmented Targeting II\",\"Wired Reflexes\",\"Speech Processor Implant\",\"Neuralstimulator\",\"NeuroFlux Governor\",\"CashRoot Starter Kit\"],\"favor\":1.8565,\"isBanned\":true,\"isMember\":false,\"name\":\"Sector-12\",\"playerReputation\":0}},\"Volhaven\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Combat Rib I\",\"Combat Rib II\",\"Wired Reflexes\",\"Speech Processor Implant\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"NeuroFlux Governor\",\"DermaForce Particle Barrier\"],\"favor\":0,\"isBanned\":true,\"isMember\":false,\"name\":\"Volhaven\",\"playerReputation\":0}},\"Speakers for the Dead\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"Unstable Circadian Modulator\",\"Synthetic Heart\",\"Synfibril Muscle\",\"Nanofiber Weave\",\"Wired Reflexes\",\"Bionic Spine\",\"Bionic Legs\",\"Speech Enhancement\",\"The Shadow's Simulacrum\",\"NeuroFlux Governor\",\"Graphene BrachiBlades Upgrade\"],\"favor\":0,\"isBanned\":false,\"isMember\":true,\"name\":\"Speakers for the Dead\",\"playerReputation\":5653.140949473605}},\"The Dark Army\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"HemoRecirculator\",\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Nanofiber Weave\",\"Wired Reflexes\",\"The Shadow's Simulacrum\",\"NeuroFlux Governor\",\"Power Recirculation Core\",\"Graphene Bionic Arms Upgrade\"],\"favor\":0,\"isBanned\":false,\"isMember\":true,\"name\":\"The Dark Army\",\"playerReputation\":5910.140949473605}},\"The Syndicate\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"HemoRecirculator\",\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Nanofiber Weave\",\"NEMEAN Subdermal Weave\",\"Wired Reflexes\",\"Bionic Spine\",\"Bionic Legs\",\"ADR-V1 Pheromone Gene\",\"The Shadow's Simulacrum\",\"NeuroFlux Governor\",\"Power Recirculation Core\",\"BrachiBlades\"],\"favor\":0,\"isBanned\":false,\"isMember\":true,\"name\":\"The Syndicate\",\"playerReputation\":5653.140949473605}},\"Silhouette\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"Speech Processor Implant\",\"TITN-41 Gene-Modification Injection\",\"ADR-V2 Pheromone Gene\",\"NeuroFlux Governor\"],\"favor\":0,\"isBanned\":false,\"isMember\":true,\"name\":\"Silhouette\",\"playerReputation\":75354.73669096714}},\"Tetrads\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"HemoRecirculator\",\"NeuroFlux Governor\",\"LuminCloaking-V1 Skin Implant\",\"LuminCloaking-V2 Skin Implant\",\"Power Recirculation Core\",\"Bionic Arms\"],\"favor\":0,\"isBanned\":false,\"isMember\":true,\"name\":\"Tetrads\",\"playerReputation\":5910.140949473605}},\"Slum Snakes\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"Augmented Targeting I\",\"Combat Rib I\",\"Wired Reflexes\",\"NeuroFlux Governor\",\"LuminCloaking-V1 Skin Implant\",\"LuminCloaking-V2 Skin Implant\",\"SmartSonar Implant\"],\"favor\":0,\"isBanned\":false,\"isMember\":true,\"name\":\"Slum Snakes\",\"playerReputation\":2221085.2845765883}},\"Netburners\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"Hacknet Node CPU Architecture Neural-Upload\",\"Hacknet Node Cache Architecture Neural-Upload\",\"Hacknet Node NIC Architecture Neural-Upload\",\"Hacknet Node Kernel Direct-Neural Interface\",\"Hacknet Node Core Direct-Neural Interface\",\"NeuroFlux Governor\"],\"favor\":0,\"isBanned\":false,\"isMember\":true,\"name\":\"Netburners\",\"playerReputation\":44067.926076789685}},\"Tian Di Hui\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"Nanofiber Weave\",\"Wired Reflexes\",\"Speech Processor Implant\",\"Nuoptimal Nootropic Injector Implant\",\"Speech Enhancement\",\"ADR-V1 Pheromone Gene\",\"NeuroFlux Governor\",\"Social Negotiation Assistant (S.N.A)\",\"Neuroreceptor Management Implant\"],\"favor\":0,\"isBanned\":false,\"isMember\":true,\"name\":\"Tian Di Hui\",\"playerReputation\":103052.73284790502}},\"CyberSec\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"BitWire\",\"Synaptic Enhancement Implant\",\"Cranial Signal Processors - Gen I\",\"Cranial Signal Processors - Gen II\",\"NeuroFlux Governor\",\"Neurotrainer I\"],\"favor\":0,\"isBanned\":false,\"isMember\":true,\"name\":\"CyberSec\",\"playerReputation\":40667.49160633606}},\"Bladeburners\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"EsperTech Bladeburner Eyewear\",\"EMS-4 Recombination\",\"ORION-MKIV Shoulder\",\"Hyperion Plasma Cannon V1\",\"Hyperion Plasma Cannon V2\",\"GOLEM Serum\",\"Vangelis Virus\",\"Vangelis Virus 3.0\",\"I.N.T.E.R.L.I.N.K.E.D\",\"Blade's Runners\",\"BLADE-51b Tesla Armor\",\"BLADE-51b Tesla Armor: Power Cells Upgrade\",\"BLADE-51b Tesla Armor: Energy Shielding Upgrade\",\"BLADE-51b Tesla Armor: Unibeam Upgrade\",\"BLADE-51b Tesla Armor: Omnibeam Upgrade\",\"BLADE-51b Tesla Armor: IPU Upgrade\",\"The Blade's Simulacrum\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Bladeburners\",\"playerReputation\":0}},\"Church of the Machine God\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Stanek's Gift - Genesis\",\"Stanek's Gift - Awakening\",\"Stanek's Gift - Serenity\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Church of the Machine God\",\"playerReputation\":0}}}","AliasesSave":"{\"vi\":\"nano\",\"cl\":\"cls\",\"start\":\"run daemon.js -s --tail\"}","GlobalAliasesSave":"{}","MessagesSave":"{\"j0.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"j0.msg\",\"msg\":\"I know you can sense it. I know you're searching for it. It's why you spend night after night at your computer. <br><br>It's real, I've seen it. And I can help you find it. But not right now. You're not ready yet.<br><br>Use this program to track your progress<br><br>The fl1ght.exe program was added to your home computer<br><br>-jump3R\",\"recvd\":true}},\"j1.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"j1.msg\",\"msg\":\"Soon you will be contacted by a hacking group known as CyberSec. They can help you with your search. <br><br>You should join them, garner their favor, and exploit them for their Augmentations. But do not trust them. They are not what they seem. No one is.<br><br>-jump3R\",\"recvd\":true}},\"j2.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"j2.msg\",\"msg\":\"Do not try to save the world. There is no world to save. If you want to find the truth, worry only about yourself. Ethics and morals will get you killed. <br><br>Watch out for a hacking group known as NiteSec.<br><br>-jump3R\",\"recvd\":true}},\"j3.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"j3.msg\",\"msg\":\"You must learn to walk before you can run. And you must run before you can fly. Look for the black hand. <br><br>I.I.I.I <br><br>-jump3R\",\"recvd\":true}},\"j4.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"j4.msg\",\"msg\":\"To find what you are searching for, you must understand the bits. The bits are all around us. The runners will help you.<br><br>-jump3R\",\"recvd\":true}},\"csec-test.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"csec-test.msg\",\"msg\":\"We've been watching you. Your skills are very impressive. But you're wasting your talents. If you join us, you can put your skills to good use and change the world for the better. If you join us, we can unlock your full potential. <br><br>But first, you must pass our test. Find and install the backdoor on our server. <br><br>-CyberSec\",\"recvd\":true}},\"nitesec-test.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"nitesec-test.msg\",\"msg\":\"People say that the corrupted governments and corporations rule the world. Yes, maybe they do. But do you know who everyone really fears? People like us. Because they can't hide from us. Because they can't fight shadows and ideas with bullets. <br><br>Join us, and people will fear you, too. <br><br>Find and install the backdoor on our server. Then, we will contact you again.<br><br>-NiteSec\",\"recvd\":true}},\"19dfj3l1nd.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"19dfj3l1nd.msg\",\"msg\":\"We know what you are doing. We know what drives you. We know what you are looking for. <br><br> We can help you find the answers.<br><br>run4theh111z\",\"recvd\":true}},\"icarus.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"icarus.msg\",\"msg\":\"@)(#V%*N)@(#*)*C)@#%*)*V)@#(*%V@)(#VN%*)@#(*%<br>)@B(*#%)@)M#B*%V)____FIND___#$@)#%(B*)@#(*%B)<br>@_#(%_@#M(BDSPOMB__THE-CAVE_#)$(*@#$)@#BNBEGB<br>DFLSMFVMV)#@($*)@#*$MV)@#(*$V)M#(*$)M@(#*VM$)\",\"recvd\":false}}}","StockMarketSave":"{\"ECorp\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"ECorp\",\"symbol\":\"ECP\",\"price\":12722.369528987347,\"lastPrice\":12765.107525586853,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.5,\"b\":false,\"otlkMag\":19.31615325422103,\"otlkMagForecast\":27.819102580445946,\"cap\":37029808,\"spreadPerc\":0.3,\"shareTxForMovement\":35561,\"shareTxUntilMovement\":34323,\"totalShares\":96000000,\"maxShares\":19200000}},\"MegaCorp\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"MegaCorp\",\"symbol\":\"MGCP\",\"price\":91977.46951694904,\"lastPrice\":91700.22748265203,\"playerShares\":1124501,\"playerAvgPx\":68731.24669472108,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.45,\"b\":true,\"otlkMag\":16.49474636131449,\"otlkMagForecast\":70.41976473681837,\"cap\":595601351,\"spreadPerc\":0.3,\"shareTxForMovement\":70351,\"shareTxUntilMovement\":70351,\"totalShares\":83400000,\"maxShares\":16700000}},\"Blade Industries\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Blade Industries\",\"symbol\":\"BLD\",\"price\":30291.4609963683,\"lastPrice\":30435.956628477732,\"playerShares\":943500,\"playerAvgPx\":28782.025132138297,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.71,\"b\":true,\"otlkMag\":15.935659847453286,\"otlkMagForecast\":65.69463917507025,\"cap\":293057652,\"spreadPerc\":0.6,\"shareTxForMovement\":74504,\"shareTxUntilMovement\":58832,\"totalShares\":82700000,\"maxShares\":16500000}},\"Clarke Incorporated\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Clarke Incorporated\",\"symbol\":\"CLRK\",\"price\":23573.837855129757,\"lastPrice\":23455.64674123598,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.75,\"b\":false,\"otlkMag\":12.024151754125114,\"otlkMagForecast\":35.84523150000921,\"cap\":308768676,\"spreadPerc\":0.1,\"shareTxForMovement\":72206,\"shareTxUntilMovement\":8180,\"totalShares\":64700000,\"maxShares\":12900000}},\"OmniTek Incorporated\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"OmniTek Incorporated\",\"symbol\":\"OMTK\",\"price\":27077.88239650539,\"lastPrice\":27188.856254059145,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.61,\"b\":false,\"otlkMag\":11.11099143401996,\"otlkMagForecast\":38.02118071998304,\"cap\":282456639,\"spreadPerc\":0.2,\"shareTxForMovement\":32394,\"shareTxUntilMovement\":16926,\"totalShares\":43200000,\"maxShares\":8600000}},\"Four Sigma\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Four Sigma\",\"symbol\":\"FSIG\",\"price\":20056.206920808483,\"lastPrice\":19909.07062363664,\"playerShares\":5980659,\"playerAvgPx\":12791.976772876955,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":1.1,\"b\":true,\"otlkMag\":20.128698454215943,\"otlkMagForecast\":69.0145259935156,\"cap\":502568337,\"spreadPerc\":0.4,\"shareTxForMovement\":34368,\"shareTxUntilMovement\":34368,\"totalShares\":32200000,\"maxShares\":6400000}},\"KuaiGong International\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"KuaiGong International\",\"symbol\":\"KGI\",\"price\":14519.231407176409,\"lastPrice\":14437.750665487561,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.84,\"b\":true,\"otlkMag\":5.442658516059638,\"otlkMagForecast\":58.36743233015244,\"cap\":38258038,\"spreadPerc\":0.2,\"shareTxForMovement\":37787,\"shareTxUntilMovement\":23944,\"totalShares\":100500000,\"maxShares\":20100000}},\"Fulcrum Technologies\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Fulcrum Technologies\",\"symbol\":\"FLCM\",\"price\":54123.37674373452,\"lastPrice\":53658.32320072138,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":1.29,\"b\":false,\"otlkMag\":16.364023019127732,\"otlkMagForecast\":28.663704484409156,\"cap\":324860311,\"spreadPerc\":0.7,\"shareTxForMovement\":67246,\"shareTxUntilMovement\":55504,\"totalShares\":58600000,\"maxShares\":11700000}},\"Storm Technologies\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Storm Technologies\",\"symbol\":\"STM\",\"price\":16997.672638241045,\"lastPrice\":16905.67141693313,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.81,\"b\":true,\"otlkMag\":7.377264110137733,\"otlkMagForecast\":58.53716481123283,\"cap\":65201466,\"spreadPerc\":1,\"shareTxForMovement\":98231,\"shareTxUntilMovement\":98231,\"totalShares\":56700000,\"maxShares\":11300000}},\"DefComm\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"DefComm\",\"symbol\":\"DCOMM\",\"price\":14503.699553122042,\"lastPrice\":14568.987009317274,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.67,\"b\":true,\"otlkMag\":9.455050840426528,\"otlkMagForecast\":59.471458192461576,\"cap\":263410678,\"spreadPerc\":0.6,\"shareTxForMovement\":104647,\"shareTxUntilMovement\":103554,\"totalShares\":74700000,\"maxShares\":14900000}},\"Helios Labs\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Helios Labs\",\"symbol\":\"HLS\",\"price\":9713.792455575815,\"lastPrice\":9750.992188841481,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.57,\"b\":false,\"otlkMag\":8.985620622299281,\"otlkMagForecast\":40.38740061608356,\"cap\":335827636,\"spreadPerc\":0.9,\"shareTxForMovement\":38565,\"shareTxUntilMovement\":38565,\"totalShares\":56500000,\"maxShares\":11300000}},\"VitaLife\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"VitaLife\",\"symbol\":\"VITA\",\"price\":20422.65642926311,\"lastPrice\":20324.340225093336,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.72,\"b\":true,\"otlkMag\":6.697396913601399,\"otlkMagForecast\":57.68409825500843,\"cap\":26472659,\"spreadPerc\":0.6,\"shareTxForMovement\":72976,\"shareTxUntilMovement\":72976,\"totalShares\":95000000,\"maxShares\":19000000}},\"Icarus Microsystems\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Icarus Microsystems\",\"symbol\":\"ICRS\",\"price\":17056.52769062134,\"lastPrice\":16976.686479099688,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.7,\"b\":false,\"otlkMag\":5.324281878195212,\"otlkMagForecast\":43.599299552928734,\"cap\":93799315,\"spreadPerc\":0.7,\"shareTxForMovement\":101704,\"shareTxUntilMovement\":101704,\"totalShares\":45300000,\"maxShares\":9100000}},\"Universal Energy\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Universal Energy\",\"symbol\":\"UNV\",\"price\":17830.456552915515,\"lastPrice\":17764.811885462328,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.55,\"b\":false,\"otlkMag\":11.064172284434827,\"otlkMagForecast\":40.37043278944462,\"cap\":409467200,\"spreadPerc\":0.5,\"shareTxForMovement\":74434,\"shareTxUntilMovement\":67696,\"totalShares\":49200000,\"maxShares\":9800000}},\"AeroCorp\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"AeroCorp\",\"symbol\":\"AERO\",\"price\":10666.127735888083,\"lastPrice\":10621.882214132651,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.62,\"b\":true,\"otlkMag\":5.4367285661038816,\"otlkMagForecast\":55.643332651585645,\"cap\":40506086,\"spreadPerc\":0.8,\"shareTxForMovement\":69089,\"shareTxUntilMovement\":69089,\"totalShares\":63600000,\"maxShares\":12700000}},\"Omnia Cybersystems\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Omnia Cybersystems\",\"symbol\":\"OMN\",\"price\":4634.457016727652,\"lastPrice\":4612.454790732578,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.71,\"b\":false,\"otlkMag\":5.3299145092079385,\"otlkMagForecast\":46.23079725314295,\"cap\":28501943,\"spreadPerc\":0.5,\"shareTxForMovement\":65712,\"shareTxUntilMovement\":65712,\"totalShares\":86000000,\"maxShares\":17200000}},\"Solaris Space Systems\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Solaris Space Systems\",\"symbol\":\"SLRS\",\"price\":25142.688696871443,\"lastPrice\":25021.64990234143,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.72,\"b\":true,\"otlkMag\":7.9682034663912,\"otlkMagForecast\":57.93463233060995,\"cap\":268304659,\"spreadPerc\":0.8,\"shareTxForMovement\":63722,\"shareTxUntilMovement\":63722,\"totalShares\":30000000,\"maxShares\":6000000}},\"Global Pharmaceuticals\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Global Pharmaceuticals\",\"symbol\":\"GPH\",\"price\":11083.674683623849,\"lastPrice\":11041.390807906459,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.57,\"b\":false,\"otlkMag\":10.734703408255639,\"otlkMagForecast\":39.48764552783155,\"cap\":301918495,\"spreadPerc\":0.9,\"shareTxForMovement\":51727,\"shareTxUntilMovement\":51727,\"totalShares\":30600000,\"maxShares\":6100000}},\"Nova Medical\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Nova Medical\",\"symbol\":\"NVMD\",\"price\":25522.94263823094,\"lastPrice\":25388.190708490347,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.79,\"b\":false,\"otlkMag\":5.369676964640438,\"otlkMagForecast\":44.525984520738206,\"cap\":302371179,\"spreadPerc\":0.5,\"shareTxForMovement\":70125,\"shareTxUntilMovement\":70125,\"totalShares\":24100000,\"maxShares\":4800000}},\"Watchdog Security\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Watchdog Security\",\"symbol\":\"WDS\",\"price\":12988.103631584203,\"lastPrice\":13202.766536609375,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":2.46,\"b\":false,\"otlkMag\":6.1782156840520726,\"otlkMagForecast\":43.38166177723621,\"cap\":39575960,\"spreadPerc\":0.8,\"shareTxForMovement\":34927,\"shareTxUntilMovement\":34927,\"totalShares\":65500000,\"maxShares\":13100000}},\"LexoCorp\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"LexoCorp\",\"symbol\":\"LXO\",\"price\":7689.664042259065,\"lastPrice\":7749.0770250657215,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":1.15,\"b\":true,\"otlkMag\":6.815850202418419,\"otlkMagForecast\":56.01866178562983,\"cap\":7134424,\"spreadPerc\":1,\"shareTxForMovement\":64150,\"shareTxUntilMovement\":64150,\"totalShares\":46800000,\"maxShares\":9400000}},\"Rho Construction\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Rho Construction\",\"symbol\":\"RHOC\",\"price\":5121.374997605769,\"lastPrice\":5139.611376067957,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.53,\"b\":false,\"otlkMag\":1.8022621212673255,\"otlkMagForecast\":49.498500639675264,\"cap\":41202392,\"spreadPerc\":0.6,\"shareTxForMovement\":112506,\"shareTxUntilMovement\":112506,\"totalShares\":35700000,\"maxShares\":7100000}},\"Alpha Enterprises\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Alpha Enterprises\",\"symbol\":\"APHE\",\"price\":3669.7001288062597,\"lastPrice\":3717.2844672974124,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":1.93,\"b\":true,\"otlkMag\":11.763133043554298,\"otlkMagForecast\":58.94779637370692,\"cap\":55120370,\"spreadPerc\":1.3,\"shareTxForMovement\":33048,\"shareTxUntilMovement\":33048,\"totalShares\":57900000,\"maxShares\":11600000}},\"SysCore Securities\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"SysCore Securities\",\"symbol\":\"SYSC\",\"price\":2290.251448583559,\"lastPrice\":2266.3457211885957,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":1.57,\"b\":true,\"otlkMag\":6.513188465047315,\"otlkMagForecast\":59.18803530870653,\"cap\":20278360,\"spreadPerc\":1.2,\"shareTxForMovement\":84051,\"shareTxUntilMovement\":84051,\"totalShares\":60800000,\"maxShares\":12200000}},\"CompuTek\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"CompuTek\",\"symbol\":\"CTK\",\"price\":1365.81718447212,\"lastPrice\":1357.0643678340825,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.96,\"b\":true,\"otlkMag\":5.957001685776752,\"otlkMagForecast\":54.04469112452447,\"cap\":7362279,\"spreadPerc\":1.2,\"shareTxForMovement\":62569,\"shareTxUntilMovement\":62569,\"totalShares\":117800000,\"maxShares\":23600000}},\"NetLink Technologies\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"NetLink Technologies\",\"symbol\":\"NTLK\",\"price\":4725.661489673896,\"lastPrice\":4642.383840463167,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":2.67,\"b\":true,\"otlkMag\":2.80176248608003,\"otlkMagForecast\":53.8629569952577,\"cap\":60649162,\"spreadPerc\":2,\"shareTxForMovement\":45416,\"shareTxUntilMovement\":45416,\"totalShares\":23600000,\"maxShares\":4700000}},\"Omega Software\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Omega Software\",\"symbol\":\"OMGA\",\"price\":4754.477246170657,\"lastPrice\":4787.0593478860055,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":1.02,\"b\":true,\"otlkMag\":6.585136790054117,\"otlkMagForecast\":56.55157874554448,\"cap\":17111860,\"spreadPerc\":0.7,\"shareTxForMovement\":44358,\"shareTxUntilMovement\":44358,\"totalShares\":20600000,\"maxShares\":4100000}},\"FoodNStuff\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"FoodNStuff\",\"symbol\":\"FNS\",\"price\":2070.0830188527607,\"lastPrice\":2059.428994184576,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.77,\"b\":false,\"otlkMag\":7.451943797602592,\"otlkMagForecast\":42.08056451400888,\"cap\":41407395,\"spreadPerc\":0.6,\"shareTxForMovement\":113363,\"shareTxUntilMovement\":113363,\"totalShares\":12500000,\"maxShares\":2500000}},\"Sigma Cosmetics\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Sigma Cosmetics\",\"symbol\":\"SGC\",\"price\":2064.7578375936223,\"lastPrice\":2045.9262604371525,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":1.37,\"b\":false,\"otlkMag\":6.26478061843787,\"otlkMagForecast\":42.171628271647776,\"cap\":27743360,\"spreadPerc\":0.8,\"shareTxForMovement\":65593,\"shareTxUntilMovement\":65593,\"totalShares\":8600000,\"maxShares\":1700000}},\"Joe's Guns\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Joe's Guns\",\"symbol\":\"JGN\",\"price\":425.58461718716205,\"lastPrice\":434.4770882585286,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":3.11,\"b\":false,\"otlkMag\":5.638708403631791,\"otlkMagForecast\":44.959452238070774,\"cap\":2055822,\"spreadPerc\":0.9,\"shareTxForMovement\":50803,\"shareTxUntilMovement\":43112,\"totalShares\":142900000,\"maxShares\":28600000}},\"Catalyst Ventures\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Catalyst Ventures\",\"symbol\":\"CTYS\",\"price\":123.19833474145761,\"lastPrice\":122.08283451548006,\"playerShares\":64900000,\"playerAvgPx\":120.35662065922169,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":1.36,\"b\":true,\"otlkMag\":8.806304536038748,\"otlkMagForecast\":64.15266155106116,\"cap\":4364836,\"spreadPerc\":0.7,\"shareTxForMovement\":71765,\"shareTxUntilMovement\":29874,\"totalShares\":324700000,\"maxShares\":64900000}},\"Microdyne Technologies\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Microdyne Technologies\",\"symbol\":\"MDYN\",\"price\":55162.61198820262,\"lastPrice\":54882.376808844776,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.76,\"b\":true,\"otlkMag\":7.289442051045147,\"otlkMagForecast\":57.269404645060696,\"cap\":131172071,\"spreadPerc\":0.6,\"shareTxForMovement\":176940,\"shareTxUntilMovement\":176940,\"totalShares\":13100000,\"maxShares\":2600000}},\"Titan Laboratories\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Titan Laboratories\",\"symbol\":\"TITN\",\"price\":13672.377233882422,\"lastPrice\":13722.899505809613,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.55,\"b\":true,\"otlkMag\":12.721536907349332,\"otlkMagForecast\":62.64188518481043,\"cap\":322251388,\"spreadPerc\":0.9,\"shareTxForMovement\":181019,\"shareTxUntilMovement\":181019,\"totalShares\":26300000,\"maxShares\":5300000}},\"Orders\":{\"ECP\":[],\"MGCP\":[],\"BLD\":[],\"CLRK\":[],\"OMTK\":[],\"FSIG\":[],\"KGI\":[],\"FLCM\":[],\"STM\":[],\"DCOMM\":[],\"HLS\":[],\"VITA\":[],\"ICRS\":[],\"UNV\":[],\"AERO\":[],\"OMN\":[],\"SLRS\":[],\"GPH\":[],\"NVMD\":[],\"WDS\":[],\"LXO\":[],\"RHOC\":[],\"APHE\":[],\"SYSC\":[],\"CTK\":[],\"NTLK\":[],\"OMGA\":[],\"FNS\":[],\"SGC\":[],\"JGN\":[],\"CTYS\":[],\"MDYN\":[],\"TITN\":[]},\"storedCycles\":771,\"lastUpdate\":1644746643818,\"ticksUntilCycle\":14}","SettingsSave":"{\"ActiveScriptsServerPageSize\":100,\"ActiveScriptsScriptPageSize\":10,\"AutosaveInterval\":30,\"CodeInstructionRunTime\":5,\"DisableASCIIArt\":false,\"DisableHotkeys\":false,\"DisableTextEffects\":false,\"DisableOverviewProgressBars\":false,\"EnableBashHotkeys\":false,\"TimestampsFormat\":\"\",\"Locale\":\"en\",\"MaxLogCapacity\":500,\"MaxPortCapacity\":50,\"MaxTerminalCapacity\":500,\"OwnedAugmentationsOrder\":0,\"PurchaseAugmentationsOrder\":2,\"SaveGameOnFileSave\":true,\"SuppressBuyAugmentationConfirmation\":true,\"SuppressFactionInvites\":false,\"SuppressMessages\":false,\"SuppressTravelConfirmation\":true,\"SuppressBladeburnerPopup\":false,\"SuppressTIXPopup\":false,\"SuppressSavedGameToast\":true,\"UseIEC60027_2\":true,\"ExcludeRunningScriptsFromSave\":false,\"IsSidebarOpened\":true,\"MonacoTheme\":\"monokai\",\"MonacoInsertSpaces\":true,\"MonacoFontSize\":16,\"MonacoVim\":false,\"MonacoWordWrap\":\"off\",\"theme\":{\"primarylight\":\"#0f0\",\"primary\":\"#0c0\",\"primarydark\":\"#090\",\"successlight\":\"#0f0\",\"success\":\"#0c0\",\"successdark\":\"#090\",\"errorlight\":\"#f00\",\"error\":\"#c00\",\"errordark\":\"#900\",\"secondarylight\":\"#AAA\",\"secondary\":\"#888\",\"secondarydark\":\"#666\",\"warninglight\":\"#ff0\",\"warning\":\"#cc0\",\"warningdark\":\"#990\",\"infolight\":\"#69f\",\"info\":\"#36c\",\"infodark\":\"#039\",\"welllight\":\"#444\",\"well\":\"#222\",\"white\":\"#fff\",\"black\":\"#000\",\"hp\":\"#dd3434\",\"money\":\"#ffd700\",\"hack\":\"#adff2f\",\"combat\":\"#faffdf\",\"cha\":\"#a671d1\",\"int\":\"#6495ed\",\"rep\":\"#faffdf\",\"disabled\":\"#66cfbc\",\"backgroundprimary\":\"#000\",\"backgroundsecondary\":\"#000\",\"button\":\"#333\"},\"styles\":{\"lineHeight\":1.5,\"fontFamily\":\"Lucida Console, Lucida Sans Unicode, Fira Mono, Consolas, Courier New, Courier, monospace, Times New Roman\"},\"overview\":{\"x\":0,\"y\":0,\"opened\":false}}","VersionSave":"10","AllGangsSave":"{\"Slum Snakes\":{\"power\":11134.708555989175,\"territory\":0.3972696517672189},\"Tetrads\":{\"power\":1.7494573759546488,\"territory\":0.022216371759715674},\"The Syndicate\":{\"power\":2.331761133106264,\"territory\":0.03293674433583883},\"The Dark Army\":{\"power\":3.015643236982116,\"territory\":0.04687620479187162},\"Speakers for the Dead\":{\"power\":98.8355273451773,\"territory\":0.25706902560020656},\"NiteSec\":{\"power\":1.7008446961140544,\"territory\":0.025559576629978306},\"The Black Hand\":{\"power\":72.97869695573712,\"territory\":0.21807242511517022}}","LastExportBonus":"1644728204836","StaneksGiftSave":"{\"ctor\":\"StaneksGift\",\"data\":{\"storedCycles\":0,\"fragments\":[]}}","SaveTimestamp":"1644746647094"}}