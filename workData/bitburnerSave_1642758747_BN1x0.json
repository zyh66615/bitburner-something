{"ctor":"BitburnerSaveObject","data":{"PlayerSave":"{\"ctor\":\"PlayerObject\",\"data\":{\"hacking\":1004,\"hp\":11,\"max_hp\":11,\"strength\":15,\"defense\":13,\"dexterity\":13,\"agility\":11,\"charisma\":25,\"intelligence\":0,\"hacking_chance_mult\":1.6674593078885893,\"hacking_speed_mult\":1.6591315227806085,\"hacking_money_mult\":2.608949937512758,\"hacking_grow_mult\":1.7186758481638722,\"hacking_exp\":189177033.53346997,\"strength_exp\":132.43029882815534,\"defense_exp\":132.43029882815534,\"dexterity_exp\":132.43029882815534,\"agility_exp\":132.43029882815534,\"charisma_exp\":264.8605976563107,\"intelligence_exp\":0,\"hacking_mult\":2.449834726152235,\"strength_mult\":1.8974181363729148,\"defense_mult\":1.6499288142373174,\"dexterity_mult\":1.6602408693263007,\"agility_mult\":1.4436877124576528,\"charisma_mult\":1.814921695661049,\"hacking_exp_mult\":4.528041332548393,\"strength_exp_mult\":1.7392999583418387,\"defense_exp_mult\":1.7392999583418387,\"dexterity_exp_mult\":1.7392999583418387,\"agility_exp_mult\":1.7392999583418387,\"charisma_exp_mult\":1.7392999583418387,\"company_rep_mult\":2.295875945011227,\"faction_rep_mult\":1.7392999583418387,\"money\":11252431878.786121,\"city\":\"Aevum\",\"location\":\"ECorp\",\"jobs\":{\"Joe's Guns\":\"Employee\"},\"companyName\":\"Joe's Guns\",\"currentServer\":\"home\",\"purchasedServers\":[\"pserv-8192-6a2ec4b7-cd77-463c-b706-f14e4db58bb4\",\"pserv-8192-f585fd4d-cd21-4165-8346-4739fa8eed69\",\"pserv-8192-bf210329-b7e3-487a-92f9-cc2f05a9249f\",\"pserv-8192-264b93eb-6c27-4c5a-a6d5-67ec403c93c5\",\"pserv-8192-8ee19b38-c518-481b-b469-235e8ac793f2\",\"pserv-8192-7bb3b01d-351a-42cd-9e94-dace9158434d\",\"pserv-8192-64d02404-b527-40f7-a32b-b22012bb4cbf\",\"pserv-8192-2391073f-f29b-4666-ae3b-2a1ffd0357e1\",\"pserv-8192-90adf4af-9d14-4e10-939e-37258056464c\",\"pserv-8192-5ec0c8e4-f77a-4bd9-8600-41a41a156b0f\",\"pserv-8192-37de2a04-ba53-4c37-ba2b-a8a537e74623\",\"pserv-8192-d9f1f107-e555-4eb8-a7ff-173b9575c59c\",\"pserv-8192-269d27ee-5cd8-4369-8210-41ffae2c28ac\",\"pserv-32768-ad4483d0-b7ec-45a2-bcd8-fdb1c87aefe0\",\"pserv-32768-5b1ab526-eaee-457f-82cf-00bc2216a0f3\",\"pserv-32768-a5d5e010-1fc6-448b-a570-1cf9da8380f2\",\"pserv-32768-236215ec-e6db-42d8-b4b8-6bd37aed6422\",\"pserv-32768-e5b0d40d-1184-4fd1-b33f-4e6086d2ed7c\",\"pserv-32768-f7253b5a-1d8c-48a5-8689-2c0789429c0e\",\"pserv-32768-e1674d94-4e57-4470-905c-b4756dd6c41b\",\"pserv-32768-6abd9b59-eb67-4002-a6cf-21954c6e41da\",\"pserv-32768-66fdbc6f-0b98-4b40-bc05-9c3dd1a1adc4\",\"pserv-32768-40bb9d1d-4f20-4e5e-8ca4-09e5b51e35df\",\"pserv-32768-6d5d0c12-35a6-47d0-b72a-9907a5af3536\",\"pserv-32768-9e8143b4-00ff-4bdc-998a-b6449e2b8a0f\"],\"hacknetNodes\":[{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":31803.617602261893,\"onlineTimeSeconds\":10743.200000000908,\"ram\":64,\"totalMoneyGenerated\":244166162.0289258,\"name\":\"hacknet-node-0\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":31803.617602261893,\"onlineTimeSeconds\":10741.600000000908,\"ram\":64,\"totalMoneyGenerated\":244141164.91739973,\"name\":\"hacknet-node-1\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":31803.617602261893,\"onlineTimeSeconds\":10740.600000000908,\"ram\":64,\"totalMoneyGenerated\":244120152.45215693,\"name\":\"hacknet-node-2\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":31803.617602261893,\"onlineTimeSeconds\":9914.400000001457,\"ram\":64,\"totalMoneyGenerated\":243627642.65799454,\"name\":\"hacknet-node-3\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":31803.617602261893,\"onlineTimeSeconds\":9914.20000000146,\"ram\":64,\"totalMoneyGenerated\":243630526.58727166,\"name\":\"hacknet-node-4\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":31803.617602261893,\"onlineTimeSeconds\":9914.000000001459,\"ram\":64,\"totalMoneyGenerated\":243635075.21276292,\"name\":\"hacknet-node-5\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":31803.617602261893,\"onlineTimeSeconds\":8558.399999999476,\"ram\":64,\"totalMoneyGenerated\":211537383.37065747,\"name\":\"hacknet-node-6\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":31803.617602261893,\"onlineTimeSeconds\":8558.199999999477,\"ram\":64,\"totalMoneyGenerated\":211528659.60668334,\"name\":\"hacknet-node-7\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":31803.617602261893,\"onlineTimeSeconds\":8557.999999999476,\"ram\":64,\"totalMoneyGenerated\":211518836.4719244,\"name\":\"hacknet-node-8\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":31803.617602261893,\"onlineTimeSeconds\":1903.8000000001002,\"ram\":64,\"totalMoneyGenerated\":60410665.58720413,\"name\":\"hacknet-node-9\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":31803.617602261893,\"onlineTimeSeconds\":1903.8000000001002,\"ram\":64,\"totalMoneyGenerated\":60371886.417677954,\"name\":\"hacknet-node-10\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":31803.617602261893,\"onlineTimeSeconds\":1903.6000000001,\"ram\":64,\"totalMoneyGenerated\":60310104.854600996,\"name\":\"hacknet-node-11\"}}],\"hashManager\":{\"ctor\":\"HashManager\",\"data\":{\"capacity\":0,\"hashes\":0,\"upgrades\":{\"Sell for Money\":0,\"Sell for Corporation Funds\":0,\"Reduce Minimum Security\":0,\"Increase Maximum Money\":0,\"Improve Studying\":0,\"Improve Gym Training\":0,\"Exchange for Corporation Research\":0,\"Exchange for Bladeburner Rank\":0,\"Exchange for Bladeburner SP\":0,\"Generate Coding Contract\":0}}},\"factions\":[\"Volhaven\",\"The Black Hand\",\"BitRunners\",\"Netburners\"],\"factionInvitations\":[],\"queuedAugmentations\":[],\"augmentations\":[{\"level\":32,\"name\":\"NeuroFlux Governor\"},{\"level\":1,\"name\":\"Neurotrainer I\"},{\"level\":1,\"name\":\"Hacknet Node NIC Architecture Neural-Upload\"},{\"level\":1,\"name\":\"Synaptic Enhancement Implant\"},{\"level\":1,\"name\":\"BitWire\"},{\"level\":1,\"name\":\"Cranial Signal Processors - Gen I\"},{\"level\":1,\"name\":\"CashRoot Starter Kit\"},{\"level\":1,\"name\":\"Wired Reflexes\"},{\"level\":1,\"name\":\"Social Negotiation Assistant (S.N.A)\"},{\"level\":1,\"name\":\"ADR-V1 Pheromone Gene\"},{\"level\":1,\"name\":\"Nuoptimal Nootropic Injector Implant\"},{\"level\":1,\"name\":\"Speech Enhancement\"},{\"level\":1,\"name\":\"Artificial Synaptic Potentiation\"},{\"level\":1,\"name\":\"Cranial Signal Processors - Gen II\"},{\"level\":1,\"name\":\"Hacknet Node Core Direct-Neural Interface\"},{\"level\":1,\"name\":\"Hacknet Node Kernel Direct-Neural Interface\"},{\"level\":1,\"name\":\"Hacknet Node CPU Architecture Neural-Upload\"},{\"level\":1,\"name\":\"Hacknet Node Cache Architecture Neural-Upload\"},{\"level\":1,\"name\":\"Neuroreceptor Management Implant\"},{\"level\":1,\"name\":\"Speech Processor Implant\"},{\"level\":1,\"name\":\"Nanofiber Weave\"},{\"level\":1,\"name\":\"Neurotrainer II\"},{\"level\":1,\"name\":\"Cranial Signal Processors - Gen III\"},{\"level\":1,\"name\":\"DataJack\"},{\"level\":1,\"name\":\"CRTX42-AA Gene Modification\"},{\"level\":1,\"name\":\"Neural-Retention Enhancement\"},{\"level\":1,\"name\":\"Embedded Netburner Module\"},{\"level\":1,\"name\":\"Neuregen Gene Modification\"},{\"level\":1,\"name\":\"Neuralstimulator\"},{\"level\":1,\"name\":\"Cranial Signal Processors - Gen IV\"},{\"level\":1,\"name\":\"Enhanced Myelin Sheathing\"},{\"level\":1,\"name\":\"The Black Hand\"}],\"sourceFiles\":[],\"numPeopleKilled\":0,\"karma\":0,\"crime_money_mult\":1.3749406785310978,\"crime_success_mult\":1.3749406785310978,\"isWorking\":true,\"focus\":false,\"workType\":\"Working for Faction\",\"workCostMult\":3,\"workExpMult\":2,\"currentWorkFactionName\":\"The Black Hand\",\"currentWorkFactionDescription\":\"carrying out hacking contracts\",\"workHackExpGainRate\":0.6792061998822589,\"workStrExpGainRate\":0,\"workDefExpGainRate\":0,\"workDexExpGainRate\":0,\"workAgiExpGainRate\":0,\"workChaExpGainRate\":0,\"workRepGainRate\":4.19196642710135,\"workMoneyGainRate\":0,\"workMoneyLossRate\":0,\"workHackExpGained\":6479.627146876535,\"workStrExpGained\":0,\"workDefExpGained\":0,\"workDexExpGained\":0,\"workAgiExpGained\":0,\"workChaExpGained\":0,\"workRepGained\":39193.094904554055,\"workMoneyGained\":0,\"createProgramName\":\"\",\"createProgramReqLvl\":100,\"className\":\"\",\"crimeType\":\"\",\"timeWorked\":1908000,\"timeWorkedCreateProgram\":0,\"timeNeededToCompleteWork\":72000000,\"work_money_mult\":1.5124347463842076,\"hacknet_node_money_mult\":3.467729291944041,\"hacknet_node_purchase_cost_mult\":0.5546099570077578,\"hacknet_node_ram_cost_mult\":0.7249803359578534,\"hacknet_node_core_cost_mult\":0.7249803359578534,\"hacknet_node_level_cost_mult\":0.6162332855641753,\"hasWseAccount\":true,\"hasTixApiAccess\":true,\"has4SData\":false,\"has4SDataTixApi\":false,\"gang\":null,\"corporation\":null,\"bladeburner\":null,\"bladeburner_max_stamina_mult\":1,\"bladeburner_stamina_gain_mult\":1,\"bladeburner_analysis_mult\":1,\"bladeburner_success_chance_mult\":1,\"sleeves\":[],\"resleeves\":[],\"sleevesFromCovenant\":0,\"bitNodeN\":1,\"lastUpdate\":1642758746950,\"totalPlaytime\":419821600,\"playtimeSinceLastAug\":10750800,\"playtimeSinceLastBitnode\":419821600,\"moneySourceA\":{\"ctor\":\"MoneySourceTracker\",\"data\":{\"bladeburner\":0,\"casino\":0,\"class\":0,\"codingcontract\":0,\"corporation\":0,\"crime\":0,\"gang\":0,\"hacking\":52797485472.04353,\"hacknet\":2278998260.166914,\"hacknet_expenses\":-3519198525.934815,\"hospitalization\":0,\"infiltration\":0,\"sleeves\":0,\"stock\":0,\"total\":11251431878.786121,\"work\":126672.45974866129,\"servers\":-40018880000,\"other\":-287100000,\"augmentations\":0}},\"moneySourceB\":{\"ctor\":\"MoneySourceTracker\",\"data\":{\"bladeburner\":0,\"casino\":0,\"class\":-9772800,\"codingcontract\":1762500000,\"corporation\":0,\"crime\":0,\"gang\":0,\"hacking\":331450264202.13324,\"hacknet\":29909559628.630814,\"hacknet_expenses\":-17844847284.106495,\"hospitalization\":0,\"infiltration\":0,\"sleeves\":0,\"stock\":-5273618049.684852,\"total\":21242933796.631363,\"work\":16337226.610703673,\"servers\":-237924600676.05194,\"other\":-1780597710.1395245,\"augmentations\":-79062290740.92627}},\"scriptProdSinceLastAug\":52797485472.04353,\"exploits\":[],\"achievements\":[{\"ID\":\"FIRST_HACKNET_NODE\",\"unlockedOn\":1642339414658},{\"ID\":\"NS2\",\"unlockedOn\":1642343740615},{\"ID\":\"WORKOUT\",\"unlockedOn\":1642344940610},{\"ID\":\"HACKNET_NODE_10M\",\"unlockedOn\":1642420708995},{\"ID\":\"BRUTESSH.EXE\",\"unlockedOn\":1642422808996},{\"ID\":\"CYBERSEC\",\"unlockedOn\":1642423769004},{\"ID\":\"TOR\",\"unlockedOn\":1642424428998},{\"ID\":\"FTPCRACK.EXE\",\"unlockedOn\":1642426645652},{\"ID\":\"RELAYSMTP.EXE\",\"unlockedOn\":1642428623734},{\"ID\":\"FROZE\",\"unlockedOn\":1642430134063},{\"ID\":\"TRAVEL\",\"unlockedOn\":1642430580714},{\"ID\":\"INSTALL_1\",\"unlockedOn\":1642431300713},{\"ID\":\"SCRIPT_32GB\",\"unlockedOn\":1642433585396},{\"ID\":\"DRAIN_SERVER\",\"unlockedOn\":1642557549229},{\"ID\":\"HTTPWORM.EXE\",\"unlockedOn\":1642585735077},{\"ID\":\"SQLINJECT.EXE\",\"unlockedOn\":1642601629939},{\"ID\":\"THE_BLACK_HAND\",\"unlockedOn\":1642605709947},{\"ID\":\"NITESEC\",\"unlockedOn\":1642642847233},{\"ID\":\"MAX_HACKNET_NODE\",\"unlockedOn\":1642667396271},{\"ID\":\"BITRUNNERS\",\"unlockedOn\":1642729355958}],\"factionWorkType\":\"Faction Hacking Work\",\"committingCrimeThruSingFn\":false,\"singFnCrimeWorkerScript\":null}}","AllServersSave":"{\"home\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":2,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"home\",\"httpPortOpen\":false,\"ip\":\"67.3.0.0\",\"isConnectedTo\":true,\"maxRam\":8192,\"messages\":[\"hackers-starting-handbook.lit\",\"j0.msg\",\"j1.msg\",\"csec-test.msg\",\"j2.msg\",\"nitesec-test.msg\",\"j3.msg\",\"j4.msg\",\"19dfj3l1nd.msg\"],\"organizationName\":\"Home PC\",\"programs\":[\"NUKE.exe\",\"BruteSSH.exe\",\"fl1ght.exe\",\"FTPCrack.exe\",\"relaySMTP.exe\",\"HTTPWorm.exe\",\"SQLInject.exe\"],\"ramUsed\":8186.05,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{},\"filename\":\"mainHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":51828644.21529754,\"onlineMoneyMade\":3516754020,\"onlineRunningTime\":580.2100000000007,\"pid\":2202,\"ramUsage\":7.65,\"server\":\"home\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{},\"filename\":\"playerServers.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":577.2100000000007,\"pid\":2273,\"ramUsage\":9.9,\"server\":\"home\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omega-net\",4805,21326.47421523505,\"be276f79-3b2b-4d1f-b531-2c2eb9134535\"],\"dataMap\":{},\"filename\":\"hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":4.210000000000002,\"pid\":2507,\"ramUsage\":1.7,\"server\":\"home\",\"threads\":4805,\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:https://danielyxie.github.io/32f1b225-7273-4808-8028-7c6e7a8cf577\",\"moduleSequenceNumber\":38540}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/export async function main(ns) {\\n    if (ns.getHostname() !== \\\"home\\\") {\\n      throw new Exception(\\\"Run the script from home\\\");\\n    }\\n  \\n    await ns.wget(\\n      `https://raw.githubusercontent.com/zyh66615/bitburner-something/main/scripts/initHacking.js?ts=${new Date().getTime()}`,\\n      \\\"initHacking.js\\\"\\n    );\\n    ns.spawn(\\\"initHacking.js\\\", 1);\\n  }\",\"filename\":\"start.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"start.js\",\"url\":\"blob:https://danielyxie.github.io/e6627de1-2e1f-422c-ab8d-adda00758359\",\"moduleSequenceNumber\":37614}],\"dependents\":[],\"ramUsage\":3.65,\"server\":\"home\",\"moduleSequenceNumber\":37614,\"_hash\":\"48eac7256f279284cc060fcb82118e1875322fb79a28d5c5f89ecb56c63e97d3\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"spawn\",\"cost\":2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"const baseUrl = 'https://raw.githubusercontent.com/zyh66615/bitburner-something/main/scripts/'\\r\\nconst filesToDownload = [\\r\\n  'common.js',\\r\\n  'mainHack.js',\\r\\n  'spider.js',\\r\\n  'grow.js',\\r\\n  'hack.js',\\r\\n  'weaken.js',\\r\\n  'playerServers.js',\\r\\n  'killAll.js',\\r\\n  'runHacking.js',\\r\\n  'find.js',\\r\\n  'contracter.js',\\r\\n  'seeAllStock.js',\\r\\n  'rmfile.js',\\r\\n  'commitCrime.js',\\r\\n  'getCrimeData.js',\\r\\n  'getCrimeData2.js'\\r\\n]\\r\\nconst valuesToRemove = ['BB_SERVER_MAP']\\r\\n\\r\\nfunction localeHHMMSS(ms = 0) {\\r\\n  if (!ms) {\\r\\n    ms = new Date().getTime()\\r\\n  }\\r\\n\\r\\n  return new Date(ms).toLocaleTimeString()\\r\\n}\\r\\n\\r\\n/** @param {NS} ns **/export async function main(ns) {\\r\\n  ns.tprint(`[${localeHHMMSS()}] Starting initHacking.js`)\\r\\n\\r\\n  let hostname = ns.getHostname()\\r\\n\\r\\n  if (hostname !== 'home') {\\r\\n    throw new Exception('Run the script from home')\\r\\n  }\\r\\n\\r\\n  for (let i = 0; i < filesToDownload.length; i++) {\\r\\n    const filename = filesToDownload[i]\\r\\n    const path = baseUrl + filename\\r\\n    await ns.scriptKill(filename, 'home')\\r\\n    await ns.rm(filename)\\r\\n    await ns.sleep(200)\\r\\n    ns.tprint(`[${localeHHMMSS()}] Trying to download ${path}`)\\r\\n    await ns.wget(path + '?ts=' + new Date().getTime(), filename)\\r\\n  }\\r\\n\\r\\n  valuesToRemove.map((value) => localStorage.removeItem(value))\\r\\n\\r\\n  ns.tprint(`[${localeHHMMSS()}] Spawning killAll.js`)\\r\\n  ns.spawn('killAll.js', 1, 'runHacking.js')\\r\\n}\\r\\n\",\"filename\":\"initHacking.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"initHacking.js\",\"url\":\"blob:https://danielyxie.github.io/43f4af12-a6b9-497a-a8c2-c8985ea5b2ba\",\"moduleSequenceNumber\":37620}],\"dependents\":[],\"ramUsage\":5.65,\"server\":\"home\",\"moduleSequenceNumber\":37620,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scriptKill\",\"cost\":1},{\"type\":\"fn\",\"name\":\"rm\",\"cost\":1},{\"type\":\"fn\",\"name\":\"spawn\",\"cost\":2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export function settings() {\\r\\n    return {\\r\\n      minSecurityLevelOffset: 2,\\r\\n      maxMoneyMultiplayer: 0.9,\\r\\n      minSecurityWeight: 100,\\r\\n      mapRefreshInterval: 1 * 60 * 60 * 1000,\\r\\n      keys: {\\r\\n        serverMap: 'BB_SERVER_MAP',\\r\\n        hackTarget: 'BB_HACK_TARGET',\\r\\n        action: 'BB_ACTION',\\r\\n      },\\r\\n    }\\r\\n  }\\r\\n  \\r\\n  export function getItem(key) {\\r\\n    let item = localStorage.getItem(key)\\r\\n  \\r\\n    return item ? JSON.parse(item) : undefined\\r\\n  }\\r\\n  \\r\\n  export function setItem(key, value) {\\r\\n    localStorage.setItem(key, JSON.stringify(value))\\r\\n  }\\r\\n  \\r\\n/** @param {NS} ns **/export async function main(ns) {\\r\\n    return {\\r\\n      settings,\\r\\n      getItem,\\r\\n      setItem,\\r\\n    }\\r\\n  }\\r\\n  \",\"filename\":\"common.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"server\":\"home\",\"moduleSequenceNumber\":37622,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"const settings = {\\r\\n    homeRamReserved: 12,\\r\\n    homeRamReservedBase: 12,\\r\\n    homeRamExtraRamReserved: 10,\\r\\n    homeRamBigMode: 64,\\r\\n    minSecurityLevelOffset: 1,\\r\\n    maxMoneyMultiplayer: 0.8,\\r\\n    minSecurityWeight: 100,\\r\\n    mapRefreshInterval: 2 * 60 * 60 * 1000,\\r\\n    maxWeakenTime: 10 * 60 * 1000,\\r\\n    keys: {\\r\\n      serverMap: 'BB_SERVER_MAP',\\r\\n    },\\r\\n    changes: {\\r\\n      hack: 0.002,\\r\\n      grow: 0.004,\\r\\n      weaken: 0.05,\\r\\n    },\\r\\n  }\\r\\n  \\r\\n  function getItem(key) {\\r\\n    let item = localStorage.getItem(key)\\r\\n  \\r\\n    return item ? JSON.parse(item) : undefined\\r\\n  }\\r\\n  \\r\\n  function setItem(key, value) {\\r\\n    localStorage.setItem(key, JSON.stringify(value))\\r\\n  }\\r\\n  \\r\\n  const hackPrograms = ['BruteSSH.exe', 'FTPCrack.exe', 'relaySMTP.exe', 'HTTPWorm.exe', 'SQLInject.exe']\\r\\n  const hackScripts = ['hack.js', 'grow.js', 'weaken.js']\\r\\n  \\r\\n  function getPlayerDetails(ns) {\\r\\n    let portHacks = 0\\r\\n  \\r\\n    hackPrograms.forEach((hackProgram) => {\\r\\n      if (ns.fileExists(hackProgram, 'home')) {\\r\\n        portHacks += 1\\r\\n      }\\r\\n    })\\r\\n  \\r\\n    return {\\r\\n      hackingLevel: ns.getHackingLevel(),\\r\\n      portHacks,\\r\\n    }\\r\\n  }\\r\\n  \\r\\n  function convertMSToHHMMSS(ms = 0) {\\r\\n    if (ms <= 0) {\\r\\n      return '00:00:00'\\r\\n    }\\r\\n  \\r\\n    if (!ms) {\\r\\n      ms = new Date().getTime()\\r\\n    }\\r\\n  \\r\\n    return new Date(ms).toISOString().substr(11, 8)\\r\\n  }\\r\\n  \\r\\n  function localeHHMMSS(ms = 0) {\\r\\n    if (!ms) {\\r\\n      ms = new Date().getTime()\\r\\n    }\\r\\n  \\r\\n    return new Date(ms).toLocaleTimeString()\\r\\n  }\\r\\n  \\r\\n  function numberWithCommas(x) {\\r\\n    return x.toString().replace(/\\\\B(?<!\\\\.\\\\d*)(?=(\\\\d{3})+(?!\\\\d))/g, ',')\\r\\n  }\\r\\n  \\r\\n  function createUUID() {\\r\\n    var dt = new Date().getTime()\\r\\n    var uuid = 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {\\r\\n      var r = (dt + Math.random() * 16) % 16 | 0\\r\\n      dt = Math.floor(dt / 16)\\r\\n      return (c == 'x' ? r : (r & 0x3) | 0x8).toString(16)\\r\\n    })\\r\\n    return uuid\\r\\n  }\\r\\n  \\r\\n  function weakenCyclesForGrow(growCycles) {\\r\\n    return Math.max(0, Math.ceil(growCycles * (settings.changes.grow / settings.changes.weaken)))\\r\\n  }\\r\\n  \\r\\n  function weakenCyclesForHack(hackCycles) {\\r\\n    return Math.max(0, Math.ceil(hackCycles * (settings.changes.hack / settings.changes.weaken)))\\r\\n  }\\r\\n  \\r\\n  async function getHackableServers(ns, servers) {\\r\\n    const playerDetails = getPlayerDetails(ns)\\r\\n  \\r\\n    const hackableServers = Object.keys(servers)\\r\\n      .filter((hostname) => ns.serverExists(hostname))\\r\\n      .filter((hostname) => servers[hostname].ports <= playerDetails.portHacks || ns.hasRootAccess(hostname))\\r\\n      .filter((hostname) => servers[hostname].ram >= 2)\\r\\n  \\r\\n    for (const hostname of hackableServers) {\\r\\n      if (hostname === 'home') continue;\\r\\n      if (!ns.hasRootAccess(hostname)) {\\r\\n        hackPrograms.forEach((hackProgram) => {\\r\\n          if (ns.fileExists(hackProgram, 'home')) {\\r\\n            ns[hackProgram.split('.').shift().toLocaleLowerCase()](hostname)\\r\\n          }\\r\\n        })\\r\\n        ns.nuke(hostname)\\r\\n      }\\r\\n  \\r\\n      await ns.scp(hackScripts, hostname)\\r\\n  \\r\\n    }\\r\\n  \\r\\n    hackableServers.sort((a, b) => servers[a].ram - servers[b].ram)\\r\\n    return hackableServers\\r\\n  }\\r\\n  \\r\\n  function findTargetServer(ns, serversList, servers, serverExtraData) {\\r\\n    const playerDetails = getPlayerDetails(ns)\\r\\n  \\r\\n    serversList = serversList\\r\\n      .filter((hostname) => servers[hostname].hackingLevel <= playerDetails.hackingLevel)\\r\\n      .filter((hostname) => servers[hostname].maxMoney)\\r\\n      .filter((hostname) => hostname !== 'home')\\r\\n      .filter((hostname) => ns.getWeakenTime(hostname) < settings.maxWeakenTime)\\r\\n  \\r\\n    let weightedServers = serversList.map((hostname) => {\\r\\n      const fullHackCycles = Math.ceil(100 / Math.max(0.00000001, ns.hackAnalyze(hostname)))\\r\\n  \\r\\n      serverExtraData[hostname] = {\\r\\n        fullHackCycles,\\r\\n      }\\r\\n  \\r\\n      const serverValue = servers[hostname].maxMoney * (settings.minSecurityWeight / (servers[hostname].minSecurityLevel + ns.getServerSecurityLevel(hostname)))\\r\\n  \\r\\n      return {\\r\\n        hostname,\\r\\n        serverValue,\\r\\n        minSecurityLevel: servers[hostname].minSecurityLevel,\\r\\n        securityLevel: ns.getServerSecurityLevel(hostname),\\r\\n        maxMoney: servers[hostname].maxMoney,\\r\\n      }\\r\\n    })\\r\\n  \\r\\n    weightedServers.sort((a, b) => b.serverValue - a.serverValue)\\r\\n    ns.print(JSON.stringify(weightedServers, null, 2))\\r\\n  \\r\\n    return weightedServers.map((server) => server.hostname)\\r\\n  }\\r\\n  \\r\\n  /** @param {NS} ns **/ export async function main(ns) {\\r\\n    ns.tprint(`[${localeHHMMSS()}] Starting mainHack.js`)\\r\\n  \\r\\n    let hostname = ns.getHostname()\\r\\n  \\r\\n    if (hostname !== 'home') {\\r\\n      throw new Exception('Run the script from home')\\r\\n    }\\r\\n  \\r\\n    while (true) {\\r\\n      const serverExtraData = {}\\r\\n      const serverMap = getItem(settings.keys.serverMap)\\r\\n      if (serverMap.servers.home.ram >= settings.homeRamBigMode) {\\r\\n        settings.homeRamReserved = settings.homeRamReservedBase + settings.homeRamExtraRamReserved\\r\\n      }\\r\\n  \\r\\n      if (!serverMap || serverMap.lastUpdate < new Date().getTime() - settings.mapRefreshInterval) {\\r\\n        ns.tprint(`[${localeHHMMSS()}] Spawning spider.js`)\\r\\n        ns.spawn('spider.js', 1, 'mainHack.js')\\r\\n        ns.exit()\\r\\n        return\\r\\n      }\\r\\n      serverMap.servers.home.ram = Math.max(0, serverMap.servers.home.ram - settings.homeRamReserved)\\r\\n  \\r\\n      const hackableServers = await getHackableServers(ns, serverMap.servers)\\r\\n  \\r\\n      const targetServers = findTargetServer(ns, hackableServers, serverMap.servers, serverExtraData)\\r\\n      const bestTarget = targetServers.shift()\\r\\n      const hackTime = ns.getHackTime(bestTarget)\\r\\n      const growTime = ns.getGrowTime(bestTarget)\\r\\n      const weakenTime = ns.getWeakenTime(bestTarget)\\r\\n  \\r\\n      const growDelay = Math.max(0, weakenTime - growTime - 15 * 1000 )\\r\\n      const hackDelay = Math.max(0, growTime + growDelay - hackTime - 15 * 1000)\\r\\n  \\r\\n      const securityLevel = ns.getServerSecurityLevel(bestTarget)\\r\\n      const money = ns.getServerMoneyAvailable(bestTarget)\\r\\n  \\r\\n      let action = 'weaken'\\r\\n      if (securityLevel > serverMap.servers[bestTarget].minSecurityLevel + settings.minSecurityLevelOffset) {\\r\\n        action = 'weaken'\\r\\n      } else if (money < serverMap.servers[bestTarget].maxMoney * settings.maxMoneyMultiplayer) {\\r\\n        action = 'grow'\\r\\n      } else {\\r\\n        action = 'hack'\\r\\n      }\\r\\n  \\r\\n      let hackCycles = 0\\r\\n      let growCycles = 0\\r\\n      let weakenCycles = 0\\r\\n  \\r\\n      for (let i = 0; i < hackableServers.length; i++) {\\r\\n        const server = serverMap.servers[hackableServers[i]]\\r\\n        hackCycles += Math.floor(server.ram / 1.7)\\r\\n        growCycles += Math.floor(server.ram / 1.75)\\r\\n      }\\r\\n      weakenCycles = growCycles\\r\\n  \\r\\n      ns.tprint(\\r\\n        `[${localeHHMMSS()}] Selected ${bestTarget} for a target. Planning to ${action} the server. Will wake up around ${localeHHMMSS(\\r\\n          new Date().getTime() + weakenTime + 300\\r\\n        )}`\\r\\n      )\\r\\n      ns.tprint(\\r\\n        `[${localeHHMMSS()}] Stock values: baseSecurity: ${serverMap.servers[bestTarget].baseSecurityLevel}; minSecurity: ${serverMap.servers[bestTarget].minSecurityLevel\\r\\n        }; maxMoney: $${numberWithCommas(parseInt(serverMap.servers[bestTarget].maxMoney, 10))}`\\r\\n      )\\r\\n      ns.tprint(`[${localeHHMMSS()}] Current values: security: ${Math.floor(securityLevel * 1000) / 1000}; money: $${numberWithCommas(parseInt(money, 10))}`)\\r\\n      ns.tprint(\\r\\n        `[${localeHHMMSS()}] Time to: hack: ${convertMSToHHMMSS(hackTime)}; grow: ${convertMSToHHMMSS(growTime)}; weaken: ${convertMSToHHMMSS(weakenTime)}`\\r\\n      )\\r\\n      ns.tprint(`[${localeHHMMSS()}] Delays: ${convertMSToHHMMSS(hackDelay)} for hacks, ${convertMSToHHMMSS(growDelay)} for grows`)\\r\\n  \\r\\n      if (action === 'weaken') {\\r\\n        if (settings.changes.weaken * weakenCycles > securityLevel - serverMap.servers[bestTarget].minSecurityLevel) {\\r\\n          weakenCycles = Math.ceil((securityLevel - serverMap.servers[bestTarget].minSecurityLevel) / settings.changes.weaken)\\r\\n          growCycles -= weakenCycles\\r\\n          growCycles = Math.max(0, growCycles)\\r\\n  \\r\\n          weakenCycles += weakenCyclesForGrow(growCycles)\\r\\n          growCycles -= weakenCyclesForGrow(growCycles)\\r\\n          growCycles = Math.max(0, growCycles)\\r\\n        } else {\\r\\n          growCycles = 0\\r\\n        }\\r\\n  \\r\\n        ns.tprint(\\r\\n          `[${localeHHMMSS()}] Cycles ratio: ${growCycles} grow cycles; ${weakenCycles} weaken cycles; expected security reduction: ${Math.floor(settings.changes.weaken * weakenCycles * 1000) / 1000\\r\\n          }`\\r\\n        )\\r\\n  \\r\\n        for (let i = 0; i < hackableServers.length; i++) {\\r\\n          const server = serverMap.servers[hackableServers[i]]\\r\\n          let cyclesFittable = Math.max(0, Math.floor(server.ram / 1.75))\\r\\n          const cyclesToRun = Math.max(0, Math.min(cyclesFittable, growCycles))\\r\\n  \\r\\n          if (growCycles) {\\r\\n            await ns.exec('grow.js', server.host, cyclesToRun, bestTarget, cyclesToRun, growDelay, createUUID())\\r\\n            growCycles -= cyclesToRun\\r\\n            cyclesFittable -= cyclesToRun\\r\\n          }\\r\\n  \\r\\n          if (cyclesFittable) {\\r\\n            await ns.exec('weaken.js', server.host, cyclesFittable, bestTarget, cyclesFittable, 0, createUUID())\\r\\n            weakenCycles -= cyclesFittable\\r\\n          }\\r\\n        }\\r\\n      } else if (action === 'grow') {\\r\\n        weakenCycles = weakenCyclesForGrow(growCycles)\\r\\n        growCycles -= weakenCycles\\r\\n  \\r\\n        ns.tprint(`[${localeHHMMSS()}] Cycles ratio: ${growCycles} grow cycles; ${weakenCycles} weaken cycles`)\\r\\n  \\r\\n        for (let i = 0; i < hackableServers.length; i++) {\\r\\n          const server = serverMap.servers[hackableServers[i]]\\r\\n          let cyclesFittable = Math.max(0, Math.floor(server.ram / 1.75))\\r\\n          const cyclesToRun = Math.max(0, Math.min(cyclesFittable, growCycles))\\r\\n  \\r\\n          if (growCycles) {\\r\\n            await ns.exec('grow.js', server.host, cyclesToRun, bestTarget, cyclesToRun, growDelay, createUUID())\\r\\n            growCycles -= cyclesToRun\\r\\n            cyclesFittable -= cyclesToRun\\r\\n          }\\r\\n  \\r\\n          if (cyclesFittable) {\\r\\n            await ns.exec('weaken.js', server.host, cyclesFittable, bestTarget, cyclesFittable, 0, createUUID())\\r\\n            weakenCycles -= cyclesFittable\\r\\n          }\\r\\n        }\\r\\n      } else {\\r\\n        if (hackCycles > serverExtraData[bestTarget].fullHackCycles) {\\r\\n          hackCycles = serverExtraData[bestTarget].fullHackCycles\\r\\n  \\r\\n          if (hackCycles * 100 < growCycles) {\\r\\n            hackCycles *= 10\\r\\n          }\\r\\n  \\r\\n          growCycles = Math.max(0, growCycles - Math.ceil((hackCycles * 1.7) / 1.75))\\r\\n  \\r\\n          weakenCycles = weakenCyclesForGrow(growCycles) + weakenCyclesForHack(hackCycles)\\r\\n          growCycles -= weakenCycles\\r\\n          hackCycles -= Math.ceil((weakenCyclesForHack(hackCycles) * 1.75) / 1.7)\\r\\n  \\r\\n          growCycles = Math.max(0, growCycles)\\r\\n        } else {\\r\\n          growCycles = 0\\r\\n          weakenCycles = weakenCyclesForHack(hackCycles)\\r\\n          hackCycles -= Math.ceil((weakenCycles * 1.75) / 1.7)\\r\\n        }\\r\\n  \\r\\n        ns.tprint(`[${localeHHMMSS()}] Cycles ratio: ${hackCycles} hack cycles; ${growCycles} grow cycles; ${weakenCycles} weaken cycles`)\\r\\n  \\r\\n        for (let i = 0; i < hackableServers.length; i++) {\\r\\n          const server = serverMap.servers[hackableServers[i]]\\r\\n          let cyclesFittable = Math.max(0, Math.floor(server.ram / 1.7))\\r\\n          const cyclesToRun = Math.max(0, Math.min(cyclesFittable, hackCycles))\\r\\n  \\r\\n          if (hackCycles) {\\r\\n            await ns.exec('hack.js', server.host, cyclesToRun, bestTarget, cyclesToRun, hackDelay, createUUID())\\r\\n            hackCycles -= cyclesToRun\\r\\n            cyclesFittable -= cyclesToRun\\r\\n          }\\r\\n  \\r\\n          const freeRam = server.ram - cyclesToRun * 1.7\\r\\n          cyclesFittable = Math.max(0, Math.floor(freeRam / 1.75))\\r\\n  \\r\\n          if (cyclesFittable && growCycles) {\\r\\n            const growCyclesToRun = Math.min(growCycles, cyclesFittable)\\r\\n  \\r\\n            await ns.exec('grow.js', server.host, growCyclesToRun, bestTarget, growCyclesToRun, growDelay, createUUID())\\r\\n            growCycles -= growCyclesToRun\\r\\n            cyclesFittable -= growCyclesToRun\\r\\n          }\\r\\n  \\r\\n          if (cyclesFittable) {\\r\\n            await ns.exec('weaken.js', server.host, cyclesFittable, bestTarget, cyclesFittable, 0, createUUID())\\r\\n            weakenCycles -= cyclesFittable\\r\\n          }\\r\\n        }\\r\\n      }\\r\\n  \\r\\n      await ns.sleep(weakenTime + 300)\\r\\n    }\\r\\n  }\",\"filename\":\"mainHack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"mainHack.js\",\"url\":\"blob:https://danielyxie.github.io/87612a86-397b-4cc5-8048-0a13e7115612\",\"moduleSequenceNumber\":37945}],\"dependents\":[],\"ramUsage\":7.65,\"server\":\"home\",\"moduleSequenceNumber\":37945,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"serverExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hackAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"spawn\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { settings, setItem } from 'common.js'\\r\\n\\r\\nconst hackPrograms = ['BruteSSH.exe', 'FTPCrack.exe', 'relaySMTP.exe', 'HTTPWorm.exe', 'SQLInject.exe']\\r\\n\\r\\nexport function getPlayerDetails(ns) {\\r\\n  let portHacks = 0\\r\\n\\r\\n  hackPrograms.forEach((hackProgram) => {\\r\\n    if (ns.fileExists(hackProgram, 'home')) {\\r\\n      portHacks += 1\\r\\n    }\\r\\n  })\\r\\n\\r\\n  return {\\r\\n    hackingLevel: ns.getHackingLevel(),\\r\\n    portHacks,\\r\\n  }\\r\\n}\\r\\n\\r\\nfunction allHacks(host) {\\r\\n  ns.brutessh(host)\\r\\n  ns.ftpcrack(host)\\r\\n  ns.relaysmtp(host)\\r\\n  ns.httpworm(host)\\r\\n  ns.sqlinject(host)\\r\\n}\\r\\n\\r\\nfunction localeHHMMSS(ms = 0) {\\r\\n  if (!ms) {\\r\\n    ms = new Date().getTime()\\r\\n  }\\r\\n\\r\\n  return new Date(ms).toLocaleTimeString()\\r\\n}\\r\\n\\r\\n/** @param {NS} ns **/export async function main(ns) {\\r\\n  ns.tprint(`[${localeHHMMSS()}] Starting spider.js`)\\r\\n\\r\\n  const scriptToRunAfter = ns.args[0]\\r\\n\\r\\n  let hostname = ns.getHostname()\\r\\n\\r\\n  if (hostname !== 'home') {\\r\\n    throw new Exception('Run the script from home')\\r\\n  }\\r\\n\\r\\n  const serverMap = { servers: {}, lastUpdate: new Date().getTime() }\\r\\n  const scanArray = ['home']\\r\\n\\r\\n  while (scanArray.length) {\\r\\n    const host = scanArray.shift()\\r\\n\\r\\n    serverMap.servers[host] = {\\r\\n      host,\\r\\n      ports: ns.getServerNumPortsRequired(host),\\r\\n      hackingLevel: ns.getServerRequiredHackingLevel(host),\\r\\n      maxMoney: ns.getServerMaxMoney(host),\\r\\n      growth: ns.getServerGrowth(host),\\r\\n      minSecurityLevel: ns.getServerMinSecurityLevel(host),\\r\\n      baseSecurityLevel: ns.getServerBaseSecurityLevel(host),\\r\\n      ram: ns.getServerRam(host)[0],\\r\\n      files: ns.ls(host),\\r\\n    }\\r\\n\\r\\n    const playerDetails = getPlayerDetails(ns)\\r\\n    if (!ns.hasRootAccess(host)) {\\r\\n      if (serverMap.servers[host].ports <= playerDetails.portHacks && serverMap.servers[host].hackingLevel <= playerDetails.hackingLevel) {\\r\\n        hackPrograms.forEach((hackProgram) => {\\r\\n          if (ns.fileExists(hackProgram, 'home')) {\\r\\n            ns[hackProgram.split('.').shift().toLocaleLowerCase()](host)\\r\\n          }\\r\\n        })\\r\\n        ns.nuke(host)\\r\\n      }\\r\\n    }\\r\\n\\r\\n    const connections = ns.scan(host) || ['home']\\r\\n    serverMap.servers[host].connections = connections\\r\\n\\r\\n    connections.filter((hostname) => !serverMap.servers[hostname]).forEach((hostname) => scanArray.push(hostname))\\r\\n  }\\r\\n\\r\\n  let hasAllParents = false\\r\\n\\r\\n  while (!hasAllParents) {\\r\\n    hasAllParents = true\\r\\n\\r\\n    Object.keys(serverMap.servers).forEach((hostname) => {\\r\\n      const server = serverMap.servers[hostname]\\r\\n\\r\\n      if (!server.parent) hasAllParents = false\\r\\n\\r\\n      if (hostname === 'home') {\\r\\n        server.parent = 'home'\\r\\n        server.children = server.children ? server.children : []\\r\\n      }\\r\\n\\r\\n      if (hostname.includes('pserv-')) {\\r\\n        server.parent = 'home'\\r\\n        server.children = []\\r\\n\\r\\n        if (serverMap.servers[server.parent].children) {\\r\\n          serverMap.servers[server.parent].children.push(hostname)\\r\\n        } else {\\r\\n          serverMap.servers[server.parent].children = [hostname]\\r\\n        }\\r\\n      }\\r\\n\\r\\n      if (!server.parent) {\\r\\n        if (server.connections.length === 1) {\\r\\n          server.parent = server.connections[0]\\r\\n          server.children = []\\r\\n\\r\\n          if (serverMap.servers[server.parent].children) {\\r\\n            serverMap.servers[server.parent].children.push(hostname)\\r\\n          } else {\\r\\n            serverMap.servers[server.parent].children = [hostname]\\r\\n          }\\r\\n        } else {\\r\\n          if (!server.children) {\\r\\n            server.children = []\\r\\n          }\\r\\n\\r\\n          if (server.children.length) {\\r\\n            const parent = server.connections.filter((hostname) => !server.children.includes(hostname))\\r\\n\\r\\n            if (parent.length === 1) {\\r\\n              server.parent = parent.shift()\\r\\n\\r\\n              if (serverMap.servers[server.parent].children) {\\r\\n                serverMap.servers[server.parent].children.push(hostname)\\r\\n              } else {\\r\\n                serverMap.servers[server.parent].children = [hostname]\\r\\n              }\\r\\n            }\\r\\n          }\\r\\n        }\\r\\n      }\\r\\n    })\\r\\n  }\\r\\n\\r\\n  setItem(settings().keys.serverMap, serverMap)\\r\\n\\r\\n  if (!scriptToRunAfter) {\\r\\n    ns.tprint(`[${localeHHMMSS()}] Spawning mainHack.js`)\\r\\n    ns.spawn('mainHack.js', 1)\\r\\n  } else {\\r\\n    ns.tprint(`[${localeHHMMSS()}] Spawning ${scriptToRunAfter}`)\\r\\n    ns.spawn(scriptToRunAfter, 1)\\r\\n  }\\r\\n}\\r\\n\",\"filename\":\"spider.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"common.js\",\"url\":\"blob:https://danielyxie.github.io/a4e24bd6-5689-4047-b3dd-0073124f0808\",\"moduleSequenceNumber\":37622},{\"filename\":\"spider.js\",\"url\":\"blob:https://danielyxie.github.io/5c891186-c523-4dd3-8c36-12113508b89c\",\"moduleSequenceNumber\":37654}],\"dependents\":[],\"ramUsage\":5.25,\"server\":\"home\",\"moduleSequenceNumber\":37654,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerGrowth\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerBaseSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"spawn\",\"cost\":2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/export async function main(ns) {\\r\\n    const target = ns.args[0]\\r\\n    const threads = ns.args[1]\\r\\n    const delay = ns.args[2]\\r\\n  \\r\\n    if (delay && delay > 0) {\\r\\n      await ns.sleep(delay)\\r\\n    }\\r\\n  \\r\\n    ns.print(`Starting operation: grow on ${target} in ${threads} threads`)\\r\\n    await ns.grow(target, { threads, stock: true })\\r\\n    ns.exit()\\r\\n  }\\r\\n  \",\"filename\":\"grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:https://danielyxie.github.io/a46201c9-cd29-49c9-b56a-c41efbe9409a\",\"moduleSequenceNumber\":38397}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"home\",\"moduleSequenceNumber\":38397,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/export async function main(ns) {\\r\\n    const target = ns.args[0]\\r\\n    const threads = ns.args[1]\\r\\n    const delay = ns.args[2]\\r\\n  \\r\\n    if (delay && delay > 0) {\\r\\n      await ns.sleep(delay)\\r\\n    }\\r\\n  \\r\\n    ns.print(`Starting operation: hack on ${target} in ${threads} threads`)\\r\\n    await ns.hack(target, { threads, stock: true })\\r\\n    ns.exit()\\r\\n  }\\r\\n  \",\"filename\":\"hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:https://danielyxie.github.io/32f1b225-7273-4808-8028-7c6e7a8cf577\",\"moduleSequenceNumber\":38540}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"home\",\"moduleSequenceNumber\":38540,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/export async function main(ns) {\\r\\n    const target = ns.args[0]\\r\\n    const threads = ns.args[1]\\r\\n    const delay = ns.args[2]\\r\\n  \\r\\n    if (delay && delay > 0) {\\r\\n      await ns.sleep(delay)\\r\\n    }\\r\\n  \\r\\n    ns.print(`Starting operation: weaken on ${target} in ${threads} threads`)\\r\\n    await ns.weaken(target, { threads, stock: true })\\r\\n    ns.exit()\\r\\n  }\\r\\n  \",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"home\",\"moduleSequenceNumber\":37632,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"const settings = {\\r\\n    maxPlayerServers: 25,\\r\\n    gbRamCost: 55000,\\r\\n    maxGbRam: 1048576,\\r\\n    minGbRam: 64,\\r\\n    totalMoneyAllocation: 0.2,\\r\\n    actions: {\\r\\n      BUY: 'buy',\\r\\n      UPGRADE: 'upgrade',\\r\\n    },\\r\\n    keys: {\\r\\n      serverMap: 'BB_SERVER_MAP',\\r\\n    },\\r\\n  }\\r\\n  \\r\\n  function getItem(key) {\\r\\n    let item = localStorage.getItem(key)\\r\\n  \\r\\n    return item ? JSON.parse(item) : undefined\\r\\n  }\\r\\n  \\r\\n  function setItem(key, value) {\\r\\n    localStorage.setItem(key, JSON.stringify(value))\\r\\n  }\\r\\n  \\r\\n  function localeHHMMSS(ms = 0) {\\r\\n    if (!ms) {\\r\\n      ms = new Date().getTime()\\r\\n    }\\r\\n  \\r\\n    return new Date(ms).toLocaleTimeString()\\r\\n  }\\r\\n  \\r\\n  function createUUID() {\\r\\n    var dt = new Date().getTime()\\r\\n    var uuid = 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {\\r\\n      var r = (dt + Math.random() * 16) % 16 | 0\\r\\n      dt = Math.floor(dt / 16)\\r\\n      return (c == 'x' ? r : (r & 0x3) | 0x8).toString(16)\\r\\n    })\\r\\n    return uuid\\r\\n  }\\r\\n  \\r\\n  function updateServer(ns, serverMap, host) {\\r\\n    serverMap.servers[host] = {\\r\\n      host,\\r\\n      ports: ns.getServerNumPortsRequired(host),\\r\\n      hackingLevel: ns.getServerRequiredHackingLevel(host),\\r\\n      maxMoney: ns.getServerMaxMoney(host),\\r\\n      growth: ns.getServerGrowth(host),\\r\\n      minSecurityLevel: ns.getServerMinSecurityLevel(host),\\r\\n      baseSecurityLevel: ns.getServerBaseSecurityLevel(host),\\r\\n      ram: ns.getServerRam(host)[0],\\r\\n      connections: ['home'],\\r\\n      parent: 'home',\\r\\n      children: [],\\r\\n    }\\r\\n  \\r\\n    Object.keys(serverMap.servers).map((hostname) => {\\r\\n      if (!ns.serverExists(hostname)) {\\r\\n        delete serverMap.servers[hostname]\\r\\n      }\\r\\n    })\\r\\n  \\r\\n    setItem(settings.keys.serverMap, serverMap)\\r\\n  }\\r\\n  \\r\\n  function getPurchasedServers(ns) {\\r\\n    let purchasedServers = ns.getPurchasedServers()\\r\\n    if (purchasedServers.length) {\\r\\n      purchasedServers.sort((a, b) => {\\r\\n        const totalRamA = ns.getServerRam(a).shift()\\r\\n        const totalRamB = ns.getServerRam(b).shift()\\r\\n  \\r\\n        if (totalRamA === totalRamB) {\\r\\n          return ns.getServerRam(a).shift() - ns.getServerRam(b).shift()\\r\\n        } else {\\r\\n          return totalRamA - totalRamB\\r\\n        }\\r\\n      })\\r\\n    }\\r\\n  \\r\\n    return purchasedServers\\r\\n  }\\r\\n  \\r\\n /** @param {NS} ns **/export async function main(ns) {\\r\\n    ns.tprint(`[${localeHHMMSS()}] Starting playerServers.js`)\\r\\n  \\r\\n    settings.maxGbRam = ns.getPurchasedServerMaxRam()\\r\\n    settings.maxPlayerServers = ns.getPurchasedServerLimit()\\r\\n    let hostname = ns.getHostname()\\r\\n  \\r\\n    if (hostname !== 'home') {\\r\\n      throw new Exception('Run the script from home')\\r\\n    }\\r\\n  \\r\\n    while (true) {\\r\\n      let didChange = false\\r\\n  \\r\\n      const serverMap = getItem(settings.keys.serverMap)\\r\\n      let purchasedServers = getPurchasedServers(ns)\\r\\n  \\r\\n      let action = purchasedServers.length < settings.maxPlayerServers ? settings.actions.BUY : settings.actions.UPGRADE\\r\\n  \\r\\n      if (action == settings.actions.BUY) {\\r\\n        let smallestCurrentServer = purchasedServers.length ? ns.getServerRam(purchasedServers[0]).shift() : 0\\r\\n        let targetRam = Math.max(settings.minGbRam, smallestCurrentServer)\\r\\n  \\r\\n        if (targetRam === settings.minGbRam) {\\r\\n          while (ns.getServerMoneyAvailable('home') * settings.totalMoneyAllocation >= targetRam * settings.gbRamCost * settings.maxPlayerServers) {\\r\\n            targetRam *= 2\\r\\n          }\\r\\n  \\r\\n          targetRam /= 2\\r\\n        }\\r\\n  \\r\\n        targetRam = Math.max(settings.minGbRam, targetRam)\\r\\n        targetRam = Math.min(targetRam, settings.maxGbRam)\\r\\n  \\r\\n        if (ns.getServerMoneyAvailable('home') * settings.totalMoneyAllocation >= targetRam * settings.gbRamCost) {\\r\\n          let hostname = `pserv-${targetRam}-${createUUID()}`\\r\\n          hostname = ns.purchaseServer(hostname, targetRam)\\r\\n  \\r\\n          if (hostname) {\\r\\n            ns.tprint(`[${localeHHMMSS()}] Bought new server: ${hostname} (${targetRam} GB)`)\\r\\n  \\r\\n            updateServer(ns, serverMap, hostname)\\r\\n            didChange = true\\r\\n          }\\r\\n        }\\r\\n      } else {\\r\\n        let smallestCurrentServer = Math.max(ns.getServerRam(purchasedServers[0]).shift(), settings.minGbRam)\\r\\n        let biggestCurrentServer = ns.getServerRam(purchasedServers[purchasedServers.length - 1]).shift()\\r\\n        let targetRam = biggestCurrentServer\\r\\n  \\r\\n        if (smallestCurrentServer === settings.maxGbRam) {\\r\\n          ns.tprint(`[${localeHHMMSS()}] All servers maxxed. Exiting.`)\\r\\n          ns.exit()\\r\\n          return\\r\\n        }\\r\\n  \\r\\n        if (smallestCurrentServer === biggestCurrentServer) {\\r\\n          while (ns.getServerMoneyAvailable('home') * settings.totalMoneyAllocation >= targetRam * settings.gbRamCost) {\\r\\n            targetRam *= 4\\r\\n          }\\r\\n  \\r\\n          targetRam /= 4\\r\\n        }\\r\\n  \\r\\n        targetRam = Math.min(targetRam, settings.maxGbRam)\\r\\n  \\r\\n        purchasedServers = getPurchasedServers(ns)\\r\\n        if (targetRam > ns.getServerRam(purchasedServers[0]).shift()) {\\r\\n          didChange = true\\r\\n          while (didChange) {\\r\\n            didChange = false\\r\\n            purchasedServers = getPurchasedServers(ns)\\r\\n  \\r\\n            if (targetRam > ns.getServerRam(purchasedServers[0]).shift()) {\\r\\n              if (ns.getServerMoneyAvailable('home') * settings.totalMoneyAllocation >= targetRam * settings.gbRamCost) {\\r\\n                let hostname = `pserv-${targetRam}-${createUUID()}`\\r\\n  \\r\\n                await ns.killall(purchasedServers[0])\\r\\n                await ns.sleep(10)\\r\\n                const serverDeleted = await ns.deleteServer(purchasedServers[0])\\r\\n                if (serverDeleted) {\\r\\n                  hostname = await ns.purchaseServer(hostname, targetRam)\\r\\n  \\r\\n                  if (hostname) {\\r\\n                    ns.tprint(`[${localeHHMMSS()}] Upgraded: ${purchasedServers[0]} into server: ${hostname} (${targetRam} GB)`)\\r\\n  \\r\\n                    updateServer(ns, serverMap, hostname)\\r\\n                    didChange = true\\r\\n                  }\\r\\n                }\\r\\n              }\\r\\n            }\\r\\n          }\\r\\n        }\\r\\n      }\\r\\n  \\r\\n      if (!didChange) {\\r\\n        await ns.sleep(5123)\\r\\n      }\\r\\n    }\\r\\n  }\\r\\n  \",\"filename\":\"playerServers.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"playerServers.js\",\"url\":\"blob:https://danielyxie.github.io/984f5bed-b2ec-4d6e-bc3e-1438e2130f80\",\"moduleSequenceNumber\":38424}],\"dependents\":[],\"ramUsage\":9.9,\"server\":\"home\",\"moduleSequenceNumber\":38424,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerGrowth\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerBaseSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"serverExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getPurchasedServers\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"getPurchasedServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServerLimit\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"purchaseServer\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"deleteServer\",\"cost\":2.25}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"const settings = {\\r\\n    mapRefreshInterval: 1 * 60 * 60 * 1000,\\r\\n    keys: {\\r\\n      serverMap: 'BB_SERVER_MAP',\\r\\n    },\\r\\n  }\\r\\n  const scriptsToKill = [\\r\\n    'mainHack.js',\\r\\n    'spider.js',\\r\\n    'grow.js',\\r\\n    'hack.js',\\r\\n    'weaken.js',\\r\\n    'playerServers.js',\\r\\n    'runHacking.js',\\r\\n    'initHacking.js',\\r\\n    'start.js',\\r\\n    'find.js',\\r\\n  ]\\r\\n  \\r\\n  function getItem(key) {\\r\\n    let item = localStorage.getItem(key)\\r\\n  \\r\\n    return item ? JSON.parse(item) : undefined\\r\\n  }\\r\\n  \\r\\n  function localeHHMMSS(ms = 0) {\\r\\n    if (!ms) {\\r\\n      ms = new Date().getTime()\\r\\n    }\\r\\n  \\r\\n    return new Date(ms).toLocaleTimeString()\\r\\n  }\\r\\n  \\r\\n/** @param {NS} ns **/export async function main(ns) {\\r\\n    ns.tprint(`[${localeHHMMSS()}] Starting killAll.js`)\\r\\n  \\r\\n    const scriptToRunAfter = ns.args[0]\\r\\n  \\r\\n    let hostname = ns.getHostname()\\r\\n  \\r\\n    if (hostname !== 'home') {\\r\\n      throw new Exception('Run the script from home')\\r\\n    }\\r\\n  \\r\\n    const serverMap = getItem(settings.keys.serverMap)\\r\\n  \\r\\n    if (!serverMap || serverMap.lastUpdate < new Date().getTime() - settings.mapRefreshInterval) {\\r\\n      ns.tprint(`[${localeHHMMSS()}] Spawning spider.js`)\\r\\n      ns.spawn('spider.js', 1, 'killAll.js')\\r\\n      ns.exit()\\r\\n      return\\r\\n    }\\r\\n  \\r\\n    for (let i = 0; i < scriptsToKill.length; i++) {\\r\\n      await ns.scriptKill(scriptsToKill[i], 'home')\\r\\n    }\\r\\n  \\r\\n    const killAbleServers = Object.keys(serverMap.servers)\\r\\n      .filter((hostname) => ns.serverExists(hostname))\\r\\n      .filter((hostname) => hostname !== 'home')\\r\\n  \\r\\n    for (let i = 0; i < killAbleServers.length; i++) {\\r\\n      await ns.killall(killAbleServers[i])\\r\\n    }\\r\\n  \\r\\n    ns.tprint(`[${localeHHMMSS()}] All processes killed`)\\r\\n  \\r\\n    if (scriptToRunAfter) {\\r\\n      ns.tprint(`[${localeHHMMSS()}] Spawning ${scriptToRunAfter}`)\\r\\n      ns.spawn(scriptToRunAfter, 1)\\r\\n    } else {\\r\\n      ns.tprint(`[${localeHHMMSS()}] You can run runHacking.js to start hack`)\\r\\n    }\\r\\n  }\\r\\n  \",\"filename\":\"killAll.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"killAll.js\",\"url\":\"blob:https://danielyxie.github.io/8b140b6f-2ad8-4659-b1ca-48d1175570b0\",\"moduleSequenceNumber\":37653}],\"dependents\":[],\"ramUsage\":5.25,\"server\":\"home\",\"moduleSequenceNumber\":37653,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"spawn\",\"cost\":2},{\"type\":\"fn\",\"name\":\"scriptKill\",\"cost\":1},{\"type\":\"fn\",\"name\":\"serverExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"function localeHHMMSS(ms = 0) {\\r\\n    if (!ms) {\\r\\n      ms = new Date().getTime()\\r\\n    }\\r\\n  \\r\\n    return new Date(ms).toLocaleTimeString()\\r\\n  }\\r\\n  \\r\\n  /** @param {NS} ns **/export async function main(ns) {\\r\\n    ns.tprint(`[${localeHHMMSS()}] Starting runHacking.js`)\\r\\n  \\r\\n    let hostname = ns.getHostname()\\r\\n  \\r\\n    if (hostname !== 'home') {\\r\\n      throw new Exception('Run the script from home')\\r\\n    }\\r\\n  \\r\\n    const homeRam = ns.getServerRam('home').shift()\\r\\n  \\r\\n    if (homeRam >= 64) {\\r\\n      ns.tprint(`[${localeHHMMSS()}] Spawning spider.js`)\\r\\n      await ns.run('spider.js', 1, 'mainHack.js')\\r\\n      await ns.sleep(3000)\\r\\n      ns.tprint(`[${localeHHMMSS()}] Spawning playerServers.js`)\\r\\n      ns.spawn('playerServers.js', 1)\\r\\n    } else {\\r\\n      ns.tprint(`[${localeHHMMSS()}] Spawning spider.js`)\\r\\n      ns.spawn('spider.js', 1, 'mainHack.js')\\r\\n    }\\r\\n  }\\r\\n  \",\"filename\":\"runHacking.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"runHacking.js\",\"url\":\"blob:https://danielyxie.github.io/a9809bfa-196d-4106-a8e0-2ed11de493e3\",\"moduleSequenceNumber\":37926}],\"dependents\":[],\"ramUsage\":4.75,\"server\":\"home\",\"moduleSequenceNumber\":37926,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"run\",\"cost\":1},{\"type\":\"fn\",\"name\":\"spawn\",\"cost\":2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getPlayerDetails } from 'spider.js'\\r\\nconst settings = {\\r\\n  keys: {\\r\\n    serverMap: 'BB_SERVER_MAP',\\r\\n  },\\r\\n}\\r\\n\\r\\nfunction getItem(key) {\\r\\n  let item = localStorage.getItem(key)\\r\\n\\r\\n  return item ? JSON.parse(item) : undefined\\r\\n}\\r\\n\\r\\nfunction localeHHMMSS(ms = 0) {\\r\\n  if (!ms) {\\r\\n    ms = new Date().getTime()\\r\\n  }\\r\\n\\r\\n  return new Date(ms).toLocaleTimeString()\\r\\n}\\r\\n\\r\\nfunction printPathToServer(servers, serverToFind) {\\r\\n  if (serverToFind === 'home') return 'home'\\r\\n  if (!servers[serverToFind]) return `-- Unable to locate ${serverToFind} --`\\r\\n\\r\\n  const jumps = []\\r\\n\\r\\n  let isParentHome = servers.parent === 'home'\\r\\n  let currentServer = serverToFind\\r\\n\\r\\n  while (!isParentHome) {\\r\\n    jumps.push(servers[currentServer].parent)\\r\\n\\r\\n    if (servers[currentServer].parent !== 'home') {\\r\\n      currentServer = servers[currentServer].parent\\r\\n    } else {\\r\\n      isParentHome = true\\r\\n    }\\r\\n  }\\r\\n\\r\\n  jumps.unshift(serverToFind)\\r\\n\\r\\n  return jumps.reverse().join('; connect ')\\r\\n}\\r\\n\\r\\n/** @param {NS} ns **/ export async function main(ns) {\\r\\n  ns.tprint(`[${localeHHMMSS()}] Starting find.js`)\\r\\n\\r\\n  const serverToFind = ns.args[0]\\r\\n\\r\\n  let hostname = ns.getHostname()\\r\\n\\r\\n  if (hostname !== 'home') {\\r\\n    throw new Exception('Run the script from home')\\r\\n  }\\r\\n\\r\\n  const serverMap = getItem(settings.keys.serverMap)\\r\\n\\r\\n  if (serverToFind) {\\r\\n    if (Object.keys(serverMap.servers).includes(serverToFind)) {\\r\\n      ns.tprint(`[${localeHHMMSS()}] Path to ${serverToFind} found:`)\\r\\n      ns.tprint(printPathToServer(serverMap.servers, serverToFind))\\r\\n    } else {\\r\\n      ns.tprint(`[${localeHHMMSS()}] Unable to find the path to ${serverToFind}`)\\r\\n    }\\r\\n  } else {\\r\\n    ns.tprint(`[${localeHHMMSS()}] Common servers:`)\\r\\n\\r\\n    const playerDetials = getPlayerDetails(ns)\\r\\n    var currentLevels = playerDetials.hackingLevel\\r\\n    var currentPorts = playerDetials.portHacks\\r\\n\\r\\n    ns.tprint('now hackinglevels: ' + currentLevels + ' portHacks: ' + currentPorts)\\r\\n\\r\\n    var currentHost = 'CSEC'\\r\\n    var requiredLevels = ns.getServerRequiredHackingLevel(currentHost)\\r\\n    var requiredPorts = ns.getServerNumPortsRequired(currentHost)\\r\\n    var flag = currentLevels >= requiredLevels && currentPorts >= requiredPorts ? '√' : '×'\\r\\n    var rootAccess = ns.hasRootAccess(currentHost)\\r\\n\\r\\n    ns.tprint(`* CSEC (CyberSec faction)` + ' access: ' + rootAccess + ' hacking levels:' + requiredLevels + ' ports:' + requiredPorts + ' hackable:' + flag)\\r\\n    ns.tprint(printPathToServer(serverMap.servers, 'CSEC') + '; backdoor;')\\r\\n    ns.tprint('')\\r\\n\\r\\n    currentHost = 'avmnite-02h'\\r\\n    requiredLevels = ns.getServerRequiredHackingLevel(currentHost)\\r\\n    requiredPorts = ns.getServerNumPortsRequired(currentHost)\\r\\n    flag = currentLevels >= requiredLevels && currentPorts >= requiredPorts ? '√' : '×'\\r\\n    rootAccess = ns.hasRootAccess(currentHost)\\r\\n\\r\\n    ns.tprint(`* avmnite-02h (NiteSec faction)` + ' access: ' + rootAccess + ' hacking levels:' + requiredLevels + ' ports:' + requiredPorts + ' hackable:' + flag)\\r\\n    ns.tprint(printPathToServer(serverMap.servers, 'avmnite-02h') + '; backdoor;')\\r\\n    ns.tprint('')\\r\\n\\r\\n    currentHost = 'I.I.I.I'\\r\\n    requiredLevels = ns.getServerRequiredHackingLevel(currentHost)\\r\\n    requiredPorts = ns.getServerNumPortsRequired(currentHost)\\r\\n    flag = currentLevels >= requiredLevels && currentPorts >= requiredPorts ? '√' : '×'\\r\\n    rootAccess = ns.hasRootAccess(currentHost)\\r\\n\\r\\n    ns.tprint(`* I.I.I.I (The Black Hand faction)` + ' access: ' + rootAccess + ' hacking levels:' + requiredLevels + ' ports:' + requiredPorts + ' hackable:' + flag)\\r\\n    ns.tprint(printPathToServer(serverMap.servers, 'I.I.I.I') + '; backdoor;')\\r\\n    ns.tprint('')\\r\\n\\r\\n    currentHost = 'run4theh111z'\\r\\n    requiredLevels = ns.getServerRequiredHackingLevel(currentHost)\\r\\n    requiredPorts = ns.getServerNumPortsRequired(currentHost)\\r\\n    flag = currentLevels >= requiredLevels && currentPorts >= requiredPorts ? '√' : '×'\\r\\n    rootAccess = ns.hasRootAccess(currentHost)\\r\\n\\r\\n    ns.tprint(`* run4theh111z (Bitrunners faction)` + ' access: ' + rootAccess + ' hacking levels:' + requiredLevels + ' ports:' + requiredPorts + ' hackable:' + flag)\\r\\n    ns.tprint(printPathToServer(serverMap.servers, 'run4theh111z') + '; backdoor;')\\r\\n    ns.tprint('')\\r\\n    ns.tprint(`[${localeHHMMSS()}] Looking for servers with coding contracts:`)\\r\\n    Object.keys(serverMap.servers).forEach((hostname) => {\\r\\n      const files = ns.ls(hostname)\\r\\n      if (files && files.length) {\\r\\n        const contract = files.find((file) => file.includes('.cct'))\\r\\n\\r\\n        if (!!contract) {\\r\\n          ns.tprint('')\\r\\n          ns.tprint(`* ${hostname} has a coding contract(s)! Connect using:`)\\r\\n          ns.tprint(printPathToServer(serverMap.servers, hostname) + `; run ${contract};`)\\r\\n        }\\r\\n      }\\r\\n    })\\r\\n    ns.tprint('')\\r\\n    ns.tprint('Buy all hacks command:')\\r\\n    ns.tprint('home; connect darkweb; buy BruteSSH.exe; buy FTPCrack.exe; buy relaySMTP.exe; buy HTTPWorm.exe; buy SQLInject.exe; home;')\\r\\n    ns.tprint('')\\r\\n  }\\r\\n}\\r\\n\",\"filename\":\"find.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.25,\"server\":\"home\",\"moduleSequenceNumber\":37640,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"const settings = {\\r\\n  keys: {\\r\\n    serverMap: 'BB_SERVER_MAP',\\r\\n  },\\r\\n}\\r\\n\\r\\nfunction getItem(key) {\\r\\n  let item = localStorage.getItem(key)\\r\\n\\r\\n  return item ? JSON.parse(item) : undefined\\r\\n}\\r\\n\\r\\nfunction localeHHMMSS(ms = 0) {\\r\\n  if (!ms) {\\r\\n    ms = new Date().getTime()\\r\\n  }\\r\\n\\r\\n  return new Date(ms).toLocaleTimeString()\\r\\n}\\r\\n\\r\\nfunction convert2DArrayToString(arr) {\\r\\n  var components = []\\r\\n  arr.forEach(function (e) {\\r\\n    var s = e.toString()\\r\\n    s = ['[', s, ']'].join('')\\r\\n    components.push(s)\\r\\n  })\\r\\n  return components.join(',').replace(/\\\\s/g, '')\\r\\n}\\r\\n\\r\\nconst codingContractTypesMetadata = [\\r\\n  {\\r\\n    name: 'Find Largest Prime Factor',\\r\\n    solver: function (data) {\\r\\n      var fac = 2\\r\\n      var n = data\\r\\n      while (n > (fac - 1) * (fac - 1)) {\\r\\n        while (n % fac === 0) {\\r\\n          n = Math.round(n / fac)\\r\\n        }\\r\\n        ++fac\\r\\n      }\\r\\n      return n === 1 ? fac - 1 : n\\r\\n    },\\r\\n  },\\r\\n  {\\r\\n    name: 'Subarray with Maximum Sum',\\r\\n    solver: function (data) {\\r\\n      var nums = data.slice()\\r\\n      for (var i = 1; i < nums.length; i++) {\\r\\n        nums[i] = Math.max(nums[i], nums[i] + nums[i - 1])\\r\\n      }\\r\\n      return Math.max.apply(Math, nums)\\r\\n    },\\r\\n  },\\r\\n  {\\r\\n    name: 'Total Ways to Sum',\\r\\n    solver: function (data) {\\r\\n      var ways = [1]\\r\\n      ways.length = data + 1\\r\\n      ways.fill(0, 1)\\r\\n      for (var i = 1; i < data; ++i) {\\r\\n        for (var j = i; j <= data; ++j) {\\r\\n          ways[j] += ways[j - i]\\r\\n        }\\r\\n      }\\r\\n      return ways[data]\\r\\n    },\\r\\n  },\\r\\n  {\\r\\n    name: 'Spiralize Matrix',\\r\\n    solver: function (data, ans) {\\r\\n      var spiral = []\\r\\n      var m = data.length\\r\\n      var n = data[0].length\\r\\n      var u = 0\\r\\n      var d = m - 1\\r\\n      var l = 0\\r\\n      var r = n - 1\\r\\n      var k = 0\\r\\n      while (true) {\\r\\n        // Up\\r\\n        for (var col = l; col <= r; col++) {\\r\\n          spiral[k] = data[u][col]\\r\\n          ++k\\r\\n        }\\r\\n        if (++u > d) {\\r\\n          break\\r\\n        }\\r\\n        // Right\\r\\n        for (var row = u; row <= d; row++) {\\r\\n          spiral[k] = data[row][r]\\r\\n          ++k\\r\\n        }\\r\\n        if (--r < l) {\\r\\n          break\\r\\n        }\\r\\n        // Down\\r\\n        for (var col = r; col >= l; col--) {\\r\\n          spiral[k] = data[d][col]\\r\\n          ++k\\r\\n        }\\r\\n        if (--d < u) {\\r\\n          break\\r\\n        }\\r\\n        // Left\\r\\n        for (var row = d; row >= u; row--) {\\r\\n          spiral[k] = data[row][l]\\r\\n          ++k\\r\\n        }\\r\\n        if (++l > r) {\\r\\n          break\\r\\n        }\\r\\n      }\\r\\n\\r\\n      return spiral\\r\\n    },\\r\\n  },\\r\\n  {\\r\\n    name: 'Array Jumping Game',\\r\\n    solver: function (data) {\\r\\n      var n = data.length\\r\\n      var i = 0\\r\\n      for (var reach = 0; i < n && i <= reach; ++i) {\\r\\n        reach = Math.max(i + data[i], reach)\\r\\n      }\\r\\n      var solution = i === n\\r\\n      return solution ? 1 : 0\\r\\n    },\\r\\n  },\\r\\n  {\\r\\n    name: 'Merge Overlapping Intervals',\\r\\n    solver: function (data) {\\r\\n      var intervals = data.slice()\\r\\n      intervals.sort(function (a, b) {\\r\\n        return a[0] - b[0]\\r\\n      })\\r\\n      var result = []\\r\\n      var start = intervals[0][0]\\r\\n      var end = intervals[0][1]\\r\\n      for (var _i = 0, intervals_1 = intervals; _i < intervals_1.length; _i++) {\\r\\n        var interval = intervals_1[_i]\\r\\n        if (interval[0] <= end) {\\r\\n          end = Math.max(end, interval[1])\\r\\n        } else {\\r\\n          result.push([start, end])\\r\\n          start = interval[0]\\r\\n          end = interval[1]\\r\\n        }\\r\\n      }\\r\\n      result.push([start, end])\\r\\n      var sanitizedResult = convert2DArrayToString(result)\\r\\n      return sanitizedResult\\r\\n    },\\r\\n  },\\r\\n  {\\r\\n    name: 'Generate IP Addresses',\\r\\n    solver: function (data, ans) {\\r\\n      var ret = []\\r\\n      for (var a = 1; a <= 3; ++a) {\\r\\n        for (var b = 1; b <= 3; ++b) {\\r\\n          for (var c = 1; c <= 3; ++c) {\\r\\n            for (var d = 1; d <= 3; ++d) {\\r\\n              if (a + b + c + d === data.length) {\\r\\n                var A = parseInt(data.substring(0, a), 10)\\r\\n                var B = parseInt(data.substring(a, a + b), 10)\\r\\n                var C = parseInt(data.substring(a + b, a + b + c), 10)\\r\\n                var D = parseInt(data.substring(a + b + c, a + b + c + d), 10)\\r\\n                if (A <= 255 && B <= 255 && C <= 255 && D <= 255) {\\r\\n                  var ip = [A.toString(), '.', B.toString(), '.', C.toString(), '.', D.toString()].join('')\\r\\n                  if (ip.length === data.length + 3) {\\r\\n                    ret.push(ip)\\r\\n                  }\\r\\n                }\\r\\n              }\\r\\n            }\\r\\n          }\\r\\n        }\\r\\n      }\\r\\n      return ret\\r\\n    },\\r\\n  },\\r\\n  {\\r\\n    name: 'Algorithmic Stock Trader I',\\r\\n    solver: function (data) {\\r\\n      var maxCur = 0\\r\\n      var maxSoFar = 0\\r\\n      for (var i = 1; i < data.length; ++i) {\\r\\n        maxCur = Math.max(0, (maxCur += data[i] - data[i - 1]))\\r\\n        maxSoFar = Math.max(maxCur, maxSoFar)\\r\\n      }\\r\\n      return maxSoFar.toString()\\r\\n    },\\r\\n  },\\r\\n  {\\r\\n    name: 'Algorithmic Stock Trader II',\\r\\n    solver: function (data) {\\r\\n      var profit = 0\\r\\n      for (var p = 1; p < data.length; ++p) {\\r\\n        profit += Math.max(data[p] - data[p - 1], 0)\\r\\n      }\\r\\n      return profit.toString()\\r\\n    },\\r\\n  },\\r\\n  {\\r\\n    name: 'Algorithmic Stock Trader III',\\r\\n    solver: function (data) {\\r\\n      var hold1 = Number.MIN_SAFE_INTEGER\\r\\n      var hold2 = Number.MIN_SAFE_INTEGER\\r\\n      var release1 = 0\\r\\n      var release2 = 0\\r\\n      for (var _i = 0, data_1 = data; _i < data_1.length; _i++) {\\r\\n        var price = data_1[_i]\\r\\n        release2 = Math.max(release2, hold2 + price)\\r\\n        hold2 = Math.max(hold2, release1 - price)\\r\\n        release1 = Math.max(release1, hold1 + price)\\r\\n        hold1 = Math.max(hold1, price * -1)\\r\\n      }\\r\\n      return release2.toString()\\r\\n    },\\r\\n  },\\r\\n  {\\r\\n    name: 'Algorithmic Stock Trader IV',\\r\\n    solver: function (data) {\\r\\n      var k = data[0]\\r\\n      var prices = data[1]\\r\\n      var len = prices.length\\r\\n      if (len < 2) {\\r\\n        return 0\\r\\n      }\\r\\n      if (k > len / 2) {\\r\\n        var res = 0\\r\\n        for (var i = 1; i < len; ++i) {\\r\\n          res += Math.max(prices[i] - prices[i - 1], 0)\\r\\n        }\\r\\n        return res\\r\\n      }\\r\\n      var hold = []\\r\\n      var rele = []\\r\\n      hold.length = k + 1\\r\\n      rele.length = k + 1\\r\\n      for (var i = 0; i <= k; ++i) {\\r\\n        hold[i] = Number.MIN_SAFE_INTEGER\\r\\n        rele[i] = 0\\r\\n      }\\r\\n      var cur\\r\\n      for (var i = 0; i < len; ++i) {\\r\\n        cur = prices[i]\\r\\n        for (var j = k; j > 0; --j) {\\r\\n          rele[j] = Math.max(rele[j], hold[j] + cur)\\r\\n          hold[j] = Math.max(hold[j], rele[j - 1] - cur)\\r\\n        }\\r\\n      }\\r\\n      return rele[k]\\r\\n    },\\r\\n  },\\r\\n  {\\r\\n    name: 'Minimum Path Sum in a Triangle',\\r\\n    solver: function (data) {\\r\\n      var n = data.length\\r\\n      var dp = data[n - 1].slice()\\r\\n      for (var i = n - 2; i > -1; --i) {\\r\\n        for (var j = 0; j < data[i].length; ++j) {\\r\\n          dp[j] = Math.min(dp[j], dp[j + 1]) + data[i][j]\\r\\n        }\\r\\n      }\\r\\n      return dp[0]\\r\\n    },\\r\\n  },\\r\\n  {\\r\\n    name: 'Unique Paths in a Grid I',\\r\\n    solver: function (data) {\\r\\n      var n = data[0] // Number of rows\\r\\n      var m = data[1] // Number of columns\\r\\n      var currentRow = []\\r\\n      currentRow.length = n\\r\\n      for (var i = 0; i < n; i++) {\\r\\n        currentRow[i] = 1\\r\\n      }\\r\\n      for (var row = 1; row < m; row++) {\\r\\n        for (var i = 1; i < n; i++) {\\r\\n          currentRow[i] += currentRow[i - 1]\\r\\n        }\\r\\n      }\\r\\n      return currentRow[n - 1]\\r\\n    },\\r\\n  },\\r\\n  {\\r\\n    name: 'Unique Paths in a Grid II',\\r\\n    solver: function (data) {\\r\\n      var obstacleGrid = []\\r\\n      obstacleGrid.length = data.length\\r\\n      for (var i = 0; i < obstacleGrid.length; ++i) {\\r\\n        obstacleGrid[i] = data[i].slice()\\r\\n      }\\r\\n      for (var i = 0; i < obstacleGrid.length; i++) {\\r\\n        for (var j = 0; j < obstacleGrid[0].length; j++) {\\r\\n          if (obstacleGrid[i][j] == 1) {\\r\\n            obstacleGrid[i][j] = 0\\r\\n          } else if (i == 0 && j == 0) {\\r\\n            obstacleGrid[0][0] = 1\\r\\n          } else {\\r\\n            obstacleGrid[i][j] = (i > 0 ? obstacleGrid[i - 1][j] : 0) + (j > 0 ? obstacleGrid[i][j - 1] : 0)\\r\\n          }\\r\\n        }\\r\\n      }\\r\\n      return obstacleGrid[obstacleGrid.length - 1][obstacleGrid[0].length - 1]\\r\\n    },\\r\\n  },\\r\\n  {\\r\\n    name: 'Sanitize Parentheses in Expression',\\r\\n    solver: function (data) {\\r\\n      var left = 0\\r\\n      var right = 0\\r\\n      var res = []\\r\\n      for (var i = 0; i < data.length; ++i) {\\r\\n        if (data[i] === '(') {\\r\\n          ++left\\r\\n        } else if (data[i] === ')') {\\r\\n          left > 0 ? --left : ++right\\r\\n        }\\r\\n      }\\r\\n      function dfs(pair, index, left, right, s, solution, res) {\\r\\n        if (s.length === index) {\\r\\n          if (left === 0 && right === 0 && pair === 0) {\\r\\n            for (var i = 0; i < res.length; i++) {\\r\\n              if (res[i] === solution) {\\r\\n                return\\r\\n              }\\r\\n            }\\r\\n            res.push(solution)\\r\\n          }\\r\\n          return\\r\\n        }\\r\\n        if (s[index] === '(') {\\r\\n          if (left > 0) {\\r\\n            dfs(pair, index + 1, left - 1, right, s, solution, res)\\r\\n          }\\r\\n          dfs(pair + 1, index + 1, left, right, s, solution + s[index], res)\\r\\n        } else if (s[index] === ')') {\\r\\n          if (right > 0) dfs(pair, index + 1, left, right - 1, s, solution, res)\\r\\n          if (pair > 0) dfs(pair - 1, index + 1, left, right, s, solution + s[index], res)\\r\\n        } else {\\r\\n          dfs(pair, index + 1, left, right, s, solution + s[index], res)\\r\\n        }\\r\\n      }\\r\\n      dfs(0, 0, left, right, data, '', res)\\r\\n\\r\\n      return res\\r\\n    },\\r\\n  },\\r\\n  {\\r\\n    name: 'Find All Valid Math Expressions',\\r\\n    solver: function (data) {\\r\\n      var num = data[0]\\r\\n      var target = data[1]\\r\\n      function helper(res, path, num, target, pos, evaluated, multed) {\\r\\n        if (pos === num.length) {\\r\\n          if (target === evaluated) {\\r\\n            res.push(path)\\r\\n          }\\r\\n          return\\r\\n        }\\r\\n        for (var i = pos; i < num.length; ++i) {\\r\\n          if (i != pos && num[pos] == '0') {\\r\\n            break\\r\\n          }\\r\\n          var cur = parseInt(num.substring(pos, i + 1))\\r\\n          if (pos === 0) {\\r\\n            helper(res, path + cur, num, target, i + 1, cur, cur)\\r\\n          } else {\\r\\n            helper(res, path + '+' + cur, num, target, i + 1, evaluated + cur, cur)\\r\\n            helper(res, path + '-' + cur, num, target, i + 1, evaluated - cur, -cur)\\r\\n            helper(res, path + '*' + cur, num, target, i + 1, evaluated - multed + multed * cur, multed * cur)\\r\\n          }\\r\\n        }\\r\\n      }\\r\\n\\r\\n      if (num == null || num.length === 0) {\\r\\n        return []\\r\\n      }\\r\\n      var result = []\\r\\n      helper(result, '', num, target, 0, 0, 0)\\r\\n      return result\\r\\n    },\\r\\n  },\\r\\n]\\r\\n\\r\\nfunction findAnswer(contract) {\\r\\n  let answer\\r\\n\\r\\n  const codingContractSolution = codingContractTypesMetadata.find((codingContractTypeMetadata) => codingContractTypeMetadata.name === contract.type)\\r\\n\\r\\n  if (codingContractSolution) {\\r\\n    answer = codingContractSolution.solver(contract.data)\\r\\n  } else {\\r\\n    console.error('Unable to find answer for', contract)\\r\\n  }\\r\\n\\r\\n  return answer\\r\\n}\\r\\n\\r\\nexport async function main(ns) {\\r\\n  ns.tprint(`[${localeHHMMSS()}] Starting contracter.js`)\\r\\n\\r\\n  let hostname = ns.getHostname()\\r\\n\\r\\n  if (hostname !== 'home') {\\r\\n    throw new Exception('Run the script from home')\\r\\n  }\\r\\n\\r\\n  const serverMap = getItem(settings.keys.serverMap)\\r\\n  const contractsDb = []\\r\\n\\r\\n  Object.keys(serverMap.servers).forEach((hostname) => {\\r\\n    const files = ns.ls(hostname)\\r\\n    if (files && files.length) {\\r\\n      const contracts = files.filter((file) => file.includes('.cct'))\\r\\n\\r\\n      if (contracts.length) {\\r\\n        contracts.forEach((contract) => {\\r\\n          const contractData = {\\r\\n            contract,\\r\\n            hostname,\\r\\n            type: ns.codingcontract.getContractType(contract, hostname),\\r\\n            data: ns.codingcontract.getData(contract, hostname),\\r\\n          }\\r\\n\\r\\n          contractsDb.push(contractData)\\r\\n        })\\r\\n      }\\r\\n    }\\r\\n  })\\r\\n\\r\\n  if (contractsDb.length) {\\r\\n    for (let i = 0; i < contractsDb.length; i++) {\\r\\n      const contract = contractsDb[i]\\r\\n      const answer = findAnswer(contract)\\r\\n\\r\\n      if (answer != null) {\\r\\n        const solvingResult = ns.codingcontract.attempt(answer, contract.contract, contract.hostname, { returnReward: true })\\r\\n\\r\\n        if (solvingResult) {\\r\\n          ns.tprint(`[${localeHHMMSS()}] Solved ${contract.contract} on ${contract.hostname}. ${solvingResult}`)\\r\\n        } else {\\r\\n          ns.tprint(`[${localeHHMMSS()}] Wrong answer for ${contract.contract} on ${contract.hostname}`)\\r\\n        }\\r\\n      } else {\\r\\n        ns.tprint(`[${localeHHMMSS()}] Unable to find the answer for: ${JSON.stringify(contract)}`)\\r\\n      }\\r\\n\\r\\n      await ns.sleep(10)\\r\\n    }\\r\\n  }\\r\\n  ns.tprint(`[${localeHHMMSS()}] contracter.js finished`)\\r\\n}\",\"filename\":\"contracter.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":21.85,\"server\":\"home\",\"moduleSequenceNumber\":37642,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"codingcontract.getContractType\",\"cost\":5},{\"type\":\"fn\",\"name\":\"codingcontract.getData\",\"cost\":5},{\"type\":\"fn\",\"name\":\"codingcontract.attempt\",\"cost\":10}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"const commission = 100000\\r\\nlet stockSymbols\\r\\n\\r\\nfunction localeHHMMSS(ms = 0) {\\r\\n  if (!ms) {\\r\\n    ms = new Date().getTime()\\r\\n  }\\r\\n\\r\\n  return new Date(ms).toLocaleTimeString()\\r\\n}\\r\\n\\r\\nfunction sellShorts(ns, stockSymbol) {\\r\\n  const stockInfo = getStockInfo(ns, stockSymbol)\\r\\n  const shortSellValue = ns.stock.sell(stockSymbol, stockInfo.sharesShort)\\r\\n\\r\\n  if (shortSellValue) {\\r\\n    ns.print(\\r\\n      `[${localeHHMMSS()}][${stockSymbol}] Sold ${stockInfo.sharesShort} shorts for ${ns.nFormat(shortSellValue, '$0.000a')}. Profit: ${ns.nFormat(\\r\\n        stockInfo.sharesLong * (stockInfo.avgPriceShort - shortSellValue) - 2 * commission,\\r\\n        '$0.000a'\\r\\n      )}`\\r\\n    )\\r\\n  }\\r\\n}\\r\\n/** @param {NS} ns **/\\r\\nfunction sellLongs(ns, stockSymbol) {\\r\\n  const stockInfo = getStockInfo(ns, stockSymbol)\\r\\n  const longSellValue = ns.stock.sell(stockSymbol, stockInfo.sharesLong)\\r\\n\\r\\n  if (longSellValue) {\\r\\n    ns.print(\\r\\n      `[${localeHHMMSS()}][${stockSymbol}] Sold ${stockInfo.sharesLong} longs for ${ns.nFormat(longSellValue, '$0.000a')}. Profit: ${ns.nFormat(\\r\\n        stockInfo.sharesLong * (longSellValue - stockInfo.avgPriceLong) - 2 * commission,\\r\\n        '$0.000a'\\r\\n      )}`\\r\\n    )\\r\\n  }\\r\\n}\\r\\n/** @param {NS} ns **/\\r\\nfunction getStockInfo(ns, stockSymbol) {\\r\\n  const [sharesLong, avgPriceLong, sharesShort, avgPriceShort] = ns.stock.getPosition(stockSymbol)\\r\\n\\r\\n  const stockAskPrice = ns.stock.getAskPrice(stockSymbol)\\r\\n  const stockBidPrice = ns.stock.getBidPrice(stockSymbol)\\r\\n\\r\\n  return {\\r\\n    stockSymbol,\\r\\n    sharesLong,\\r\\n    avgPriceLong,\\r\\n    stockAskPrice,\\r\\n    sharesShort,\\r\\n    avgPriceShort,\\r\\n    stockBidPrice,\\r\\n  }\\r\\n}\\r\\n\\r\\n/** @param {NS} ns **/export async function main(ns) {\\r\\n  ns.disableLog('ALL')\\r\\n\\r\\n  stockSymbols = ns.stock.getSymbols()\\r\\n  stockSymbols.forEach((stockSymbol) => {\\r\\n    sellLongs(ns, stockSymbol)\\r\\n    sellShorts(ns, stockSymbol)\\r\\n  })\\r\\n}\",\"filename\":\"seeAllStock.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":12.1,\"server\":\"home\",\"moduleSequenceNumber\":37644,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"stock.sell\",\"cost\":2.5},{\"type\":\"fn\",\"name\":\"stock.getPosition\",\"cost\":2},{\"type\":\"fn\",\"name\":\"stock.getAskPrice\",\"cost\":2},{\"type\":\"fn\",\"name\":\"stock.getBidPrice\",\"cost\":2},{\"type\":\"fn\",\"name\":\"stock.getSymbols\",\"cost\":2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"const settings = {\\r\\n    keys: {\\r\\n        serverMap: 'BB_SERVER_MAP',\\r\\n    },\\r\\n}\\r\\nfunction getItem(key) {\\r\\n    let item = localStorage.getItem(key)\\r\\n\\r\\n    return item ? JSON.parse(item) : undefined\\r\\n}\\r\\n\\r\\nconst excluedFiles = ['start.js', 'rmfile.js']\\r\\n/** @param {NS} ns **/\\r\\nexport async function main(ns) {\\r\\n    const servers = getItem(settings.keys.serverMap).servers;\\r\\n    ns.exec('killAll.js', 'home', 1)\\r\\n    Object.keys(servers).forEach((server) => {\\r\\n        const files = ns.ls(server)\\r\\n        for (const file of files){\\r\\n            if (file.endsWith('js') && !excluedFiles.includes(file)){\\r\\n                ns.rm(file, server)\\r\\n            }\\r\\n        }\\r\\n    })\\r\\n\\r\\n}\",\"filename\":\"rmfile.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4.1,\"server\":\"home\",\"moduleSequenceNumber\":37646,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"rm\",\"cost\":1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"const settings = {\\r\\n  keys: {\\r\\n    crimes: 'BB_CRIMES',\\r\\n    crimesStop: 'BB_CRIMES_STOP',\\r\\n  },\\r\\n  intervalToRecheck: 10 * 60 * 1000,\\r\\n}\\r\\n\\r\\nfunction getItem(key) {\\r\\n  let item = localStorage.getItem(key)\\r\\n\\r\\n  return item ? JSON.parse(item) : undefined\\r\\n}\\r\\n\\r\\nfunction setItem(key, value) {\\r\\n  localStorage.setItem(key, JSON.stringify(value))\\r\\n}\\r\\n\\r\\nfunction localeHHMMSS(ms = 0) {\\r\\n  if (!ms) {\\r\\n    ms = new Date().getTime()\\r\\n  }\\r\\n\\r\\n  return new Date(ms).toLocaleTimeString()\\r\\n}\\r\\n\\r\\nfunction getCrimesData(ns) {\\r\\n  ns.tprint(`[${localeHHMMSS()}] Spawning getCrimesData.js`)\\r\\n  ns.spawn('getCrimesData.js', 1)\\r\\n}\\r\\n\\r\\nfunction selectCrime(crimes) {\\r\\n  const crimesList = Object.keys(crimes)\\r\\n  crimesList.sort((a, b) => crimes[b].chance - crimes[a].chance)\\r\\n  const solidChanceCrimes = crimesList.filter((crime) => crimes[crime].chance >= 0.8)\\r\\n  const topCrimesList = solidChanceCrimes.length > 3 ? solidChanceCrimes : crimesList.slice(0, 2)\\r\\n\\r\\n  let bestCrime = 'shoplift'\\r\\n  let bestCrimeWeight = 0\\r\\n\\r\\n  topCrimesList.forEach((crime) => {\\r\\n    const crimeWeight =\\r\\n      crimes[crime].chance *\\r\\n      (crimes[crime].stats.money / crimes[crime].stats.time) *\\r\\n      ((crimes[crime].stats.intelligence_exp * 0.1 + 1) / (crimes[crime].stats.intelligence_exp * 0.1 + 2))\\r\\n\\r\\n    if (crimeWeight > bestCrimeWeight) {\\r\\n      bestCrime = crime\\r\\n      bestCrimeWeight = crimeWeight\\r\\n    }\\r\\n  })\\r\\n\\r\\n  return bestCrime\\r\\n}\\r\\n/** @param {NS} ns **/\\r\\nexport async function main(ns) {\\r\\n  ns.tprint(`[${localeHHMMSS()}] Starting commitCrime.js`)\\r\\n\\r\\n  let hostname = ns.getHostname()\\r\\n\\r\\n  if (hostname !== 'home') {\\r\\n    throw new Exception('Run the script from home')\\r\\n  }\\r\\n\\r\\n  let continueCommitingCrime = true\\r\\n  const crimes = getItem(settings.keys.crimes)\\r\\n\\r\\n  if (!crimes) {\\r\\n    getCrimesData(ns)\\r\\n    return\\r\\n  }\\r\\n\\r\\n  const crimeToCommit = selectCrime(crimes)\\r\\n  const endTime = new Date().getTime() + settings.intervalToRecheck\\r\\n\\r\\n  while (continueCommitingCrime) {\\r\\n    const crimesStop = getItem(settings.keys.crimesStop)\\r\\n\\r\\n    if (crimesStop || new Date().getTime() > endTime) {\\r\\n      continueCommitingCrime = false\\r\\n    } else {\\r\\n      while (ns.isBusy()) {\\r\\n        await ns.sleep(1000)\\r\\n      }\\r\\n\\r\\n      ns.tprint(`[${localeHHMMSS()}] Commiting crime: ${crimeToCommit}`)\\r\\n      ns.commitCrime(crimeToCommit)\\r\\n      await ns.sleep(crimes[crimeToCommit].stats.time + 5)\\r\\n    }\\r\\n  }\\r\\n\\r\\n  const crimesStop = getItem(settings.keys.crimesStop)\\r\\n  if (!crimesStop) {\\r\\n    getCrimesData(ns)\\r\\n  } else {\\r\\n    setItem(settings.keys.crimesStop, false)\\r\\n  }\\r\\n}\",\"filename\":\"commitCrime.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"commitCrime.js\",\"url\":\"blob:https://danielyxie.github.io/3446c4b8-60dd-4935-8e54-16b7f99f9b9e\",\"moduleSequenceNumber\":37673}],\"dependents\":[],\"ramUsage\":91.65,\"server\":\"home\",\"moduleSequenceNumber\":37673,\"ramUsageEntries\":[{\"type\":\"fn\",\"name\":\"commitCrime\",\"cost\":80},{\"type\":\"fn\",\"name\":\"isBusy\",\"cost\":8},{\"type\":\"fn\",\"name\":\"spawn\",\"cost\":2},{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"const settings = {\\r\\n    keys: {\\r\\n        crimes: 'BB_CRIMES',\\r\\n    },\\r\\n    crimes: [\\r\\n        'shoplift',\\r\\n        'rob store',\\r\\n        'mug',\\r\\n        'larceny',\\r\\n        'deal drugs',\\r\\n        'bond forgery',\\r\\n        'traffick arms',\\r\\n        'homicide',\\r\\n        'grand theft auto',\\r\\n        'kidnap',\\r\\n        'assassinate',\\r\\n        'heist',\\r\\n    ],\\r\\n}\\r\\n\\r\\nfunction getItem(key) {\\r\\n    let item = localStorage.getItem(key)\\r\\n\\r\\n    return item ? JSON.parse(item) : undefined\\r\\n}\\r\\n\\r\\nfunction setItem(key, value) {\\r\\n    localStorage.setItem(key, JSON.stringify(value))\\r\\n}\\r\\n\\r\\nfunction localeHHMMSS(ms = 0) {\\r\\n    if (!ms) {\\r\\n        ms = new Date().getTime()\\r\\n    }\\r\\n\\r\\n    return new Date(ms).toLocaleTimeString()\\r\\n}\\r\\n/** @param {NS} ns **/\\r\\nexport async function main(ns) {\\r\\n    ns.tprint(`[${localeHHMMSS()}] Starting getCrimesData.js`)\\r\\n\\r\\n    const scriptToRunAfter = ns.args[0] || 'getCrimesData2.js'\\r\\n\\r\\n    let hostname = ns.getHostname()\\r\\n\\r\\n    if (hostname !== 'home') {\\r\\n        throw new Exception('Run the script from home')\\r\\n    }\\r\\n\\r\\n    const crimesCache = getItem(settings.keys.crimes) || {}\\r\\n    const crimes = {}\\r\\n\\r\\n    settings.crimes.map((crime) => {\\r\\n        const chance = ns.getCrimeChance(crime)\\r\\n\\r\\n        crimes[crime] = { ...crimesCache[crime], chance }\\r\\n    })\\r\\n\\r\\n    setItem(settings.keys.crimes, crimes)\\r\\n\\r\\n    if (scriptToRunAfter) {\\r\\n        ns.tprint(`[${localeHHMMSS()}] Spawning ${scriptToRunAfter}`)\\r\\n        ns.spawn(scriptToRunAfter, 1)\\r\\n    }\\r\\n}\",\"filename\":\"getCrimeData.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":83.65,\"server\":\"home\",\"moduleSequenceNumber\":37650,\"ramUsageEntries\":[{\"type\":\"fn\",\"name\":\"getCrimeChance\",\"cost\":80},{\"type\":\"fn\",\"name\":\"spawn\",\"cost\":2},{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"const settings = {\\r\\n    keys: {\\r\\n        crimes: 'BB_CRIMES',\\r\\n    },\\r\\n    crimes: [\\r\\n        'shoplift',\\r\\n        'rob store',\\r\\n        'mug',\\r\\n        'larceny',\\r\\n        'deal drugs',\\r\\n        'bond forgery',\\r\\n        'traffick arms',\\r\\n        'homicide',\\r\\n        'grand theft auto',\\r\\n        'kidnap',\\r\\n        'assassinate',\\r\\n        'heist',\\r\\n    ],\\r\\n}\\r\\n\\r\\nfunction getItem(key) {\\r\\n    let item = localStorage.getItem(key)\\r\\n\\r\\n    return item ? JSON.parse(item) : undefined\\r\\n}\\r\\n\\r\\nfunction setItem(key, value) {\\r\\n    localStorage.setItem(key, JSON.stringify(value))\\r\\n}\\r\\n\\r\\nfunction localeHHMMSS(ms = 0) {\\r\\n    if (!ms) {\\r\\n        ms = new Date().getTime()\\r\\n    }\\r\\n\\r\\n    return new Date(ms).toLocaleTimeString()\\r\\n}\\r\\n/** @param {NS} ns **/\\r\\nexport async function main(ns) {\\r\\n    ns.tprint(`[${localeHHMMSS()}] Starting getCrimesData2.ns`)\\r\\n\\r\\n    const scriptToRunAfter = ns.args[0] || 'commitCrime.ns'\\r\\n\\r\\n    let hostname = ns.getHostname()\\r\\n\\r\\n    if (hostname !== 'home') {\\r\\n        throw new Exception('Run the script from home')\\r\\n    }\\r\\n\\r\\n    const crimesCache = getItem(settings.keys.crimes) || {}\\r\\n    const crimes = {}\\r\\n\\r\\n    settings.crimes.map((crime) => {\\r\\n        const stats = ns.getCrimeStats(crime)\\r\\n\\r\\n        crimes[crime] = { ...crimesCache[crime], stats }\\r\\n    })\\r\\n\\r\\n    setItem(settings.keys.crimes, crimes)\\r\\n\\r\\n    if (scriptToRunAfter) {\\r\\n        ns.tprint(`[${localeHHMMSS()}] Spawning ${scriptToRunAfter}`)\\r\\n        ns.spawn(scriptToRunAfter, 1)\\r\\n    }\\r\\n}\",\"filename\":\"getCrimeData2.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":83.65,\"server\":\"home\",\"moduleSequenceNumber\":37652,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getCrimeStats\",\"cost\":80},{\"type\":\"fn\",\"name\":\"spawn\",\"cost\":2}]}}],\"serversOnNetwork\":[\"n00dles\",\"foodnstuff\",\"sigma-cosmetics\",\"joesguns\",\"hong-fang-tea\",\"harakiri-sushi\",\"iron-gym\",\"darkweb\",\"pserv-8192-6a2ec4b7-cd77-463c-b706-f14e4db58bb4\",\"pserv-8192-f585fd4d-cd21-4165-8346-4739fa8eed69\",\"pserv-8192-bf210329-b7e3-487a-92f9-cc2f05a9249f\",\"pserv-8192-264b93eb-6c27-4c5a-a6d5-67ec403c93c5\",\"pserv-8192-8ee19b38-c518-481b-b469-235e8ac793f2\",\"pserv-8192-7bb3b01d-351a-42cd-9e94-dace9158434d\",\"pserv-8192-64d02404-b527-40f7-a32b-b22012bb4cbf\",\"pserv-8192-2391073f-f29b-4666-ae3b-2a1ffd0357e1\",\"pserv-8192-90adf4af-9d14-4e10-939e-37258056464c\",\"pserv-8192-5ec0c8e4-f77a-4bd9-8600-41a41a156b0f\",\"pserv-8192-37de2a04-ba53-4c37-ba2b-a8a537e74623\",\"pserv-8192-d9f1f107-e555-4eb8-a7ff-173b9575c59c\",\"pserv-8192-269d27ee-5cd8-4369-8210-41ffae2c28ac\",\"pserv-32768-ad4483d0-b7ec-45a2-bcd8-fdb1c87aefe0\",\"pserv-32768-5b1ab526-eaee-457f-82cf-00bc2216a0f3\",\"pserv-32768-a5d5e010-1fc6-448b-a570-1cf9da8380f2\",\"pserv-32768-236215ec-e6db-42d8-b4b8-6bd37aed6422\",\"pserv-32768-e5b0d40d-1184-4fd1-b33f-4e6086d2ed7c\",\"pserv-32768-f7253b5a-1d8c-48a5-8689-2c0789429c0e\",\"pserv-32768-e1674d94-4e57-4470-905c-b4756dd6c41b\",\"pserv-32768-6abd9b59-eb67-4002-a6cf-21954c6e41da\",\"pserv-32768-66fdbc6f-0b98-4b40-bc05-9c3dd1a1adc4\",\"pserv-32768-40bb9d1d-4f20-4e5e-8ca4-09e5b51e35df\",\"pserv-32768-6d5d0c12-35a6-47d0-b72a-9907a5af3536\",\"pserv-32768-9e8143b4-00ff-4bdc-998a-b6449e2b8a0f\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":1,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"ecorp\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"ecorp\",\"httpPortOpen\":false,\"ip\":\"85.3.3.5\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"ECorp\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"blade\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":99,\"hackDifficulty\":99,\"minDifficulty\":33,\"moneyAvailable\":63056006838,\"moneyMax\":1576400170950,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1122,\"serverGrowth\":99}},\"megacorp\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"megacorp\",\"httpPortOpen\":false,\"ip\":\"17.3.5.1\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"MegaCorp\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"blade\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":99,\"hackDifficulty\":99,\"minDifficulty\":33,\"moneyAvailable\":43310992120,\"moneyMax\":1082774803000,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1168,\"serverGrowth\":99}},\"b-and-a\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"b-and-a\",\"httpPortOpen\":false,\"ip\":\"13.0.6.2\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Bachman & Associates\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\".\",\"fulcrumassets\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":87,\"hackDifficulty\":87,\"minDifficulty\":29,\"moneyAvailable\":20075318004,\"moneyMax\":501882950100,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1108,\"serverGrowth\":71}},\"blade\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"blade\",\"httpPortOpen\":true,\"ip\":\"23.8.6.5\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"beyond-man.lit\"],\"organizationName\":\"Blade Industries\",\"programs\":[],\"ramUsed\":62.9,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omega-net\",37,21326.47421523505,\"2f23a455-02a6-4c22-abcd-0de46c7e83e8\"],\"dataMap\":{},\"filename\":\"hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":4.210000000000002,\"pid\":2497,\"ramUsage\":1.7,\"server\":\"blade\",\"threads\":37,\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:https://danielyxie.github.io/d4972d9f-ae63-47ca-b619-60ae5e15a0b5\",\"moduleSequenceNumber\":38530}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/export async function main(ns) {\\r\\n    const target = ns.args[0]\\r\\n    const threads = ns.args[1]\\r\\n    const delay = ns.args[2]\\r\\n  \\r\\n    if (delay && delay > 0) {\\r\\n      await ns.sleep(delay)\\r\\n    }\\r\\n  \\r\\n    ns.print(`Starting operation: hack on ${target} in ${threads} threads`)\\r\\n    await ns.hack(target, { threads, stock: true })\\r\\n    ns.exit()\\r\\n  }\\r\\n  \",\"filename\":\"hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:https://danielyxie.github.io/d4972d9f-ae63-47ca-b619-60ae5e15a0b5\",\"moduleSequenceNumber\":38530}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"blade\",\"moduleSequenceNumber\":38530,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/export async function main(ns) {\\r\\n    const target = ns.args[0]\\r\\n    const threads = ns.args[1]\\r\\n    const delay = ns.args[2]\\r\\n  \\r\\n    if (delay && delay > 0) {\\r\\n      await ns.sleep(delay)\\r\\n    }\\r\\n  \\r\\n    ns.print(`Starting operation: grow on ${target} in ${threads} threads`)\\r\\n    await ns.grow(target, { threads, stock: true })\\r\\n    ns.exit()\\r\\n  }\\r\\n  \",\"filename\":\"grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:https://danielyxie.github.io/f1a5197d-1699-4337-826a-d5c6efcb7c5f\",\"moduleSequenceNumber\":38387}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"blade\",\"moduleSequenceNumber\":38387,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/export async function main(ns) {\\r\\n    const target = ns.args[0]\\r\\n    const threads = ns.args[1]\\r\\n    const delay = ns.args[2]\\r\\n  \\r\\n    if (delay && delay > 0) {\\r\\n      await ns.sleep(delay)\\r\\n    }\\r\\n  \\r\\n    ns.print(`Starting operation: weaken on ${target} in ${threads} threads`)\\r\\n    await ns.weaken(target, { threads, stock: true })\\r\\n    ns.exit()\\r\\n  }\\r\\n  \",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"blade\",\"moduleSequenceNumber\":38347,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"omnitek\",\"ecorp\",\"megacorp\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":94,\"hackDifficulty\":94,\"minDifficulty\":31,\"moneyAvailable\":28028907806,\"moneyMax\":700722695150,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1034,\"serverGrowth\":70}},\"nwo\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"nwo\",\"httpPortOpen\":false,\"ip\":\"78.6.8.3\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"the-hidden-world.lit\"],\"organizationName\":\"NWO\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"kuai-gong\",\"The-Cave\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":99,\"hackDifficulty\":99,\"minDifficulty\":33,\"moneyAvailable\":26125027703,\"moneyMax\":653125692575,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":995,\"serverGrowth\":83}},\"clarkinc\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"clarkinc\",\"httpPortOpen\":false,\"ip\":\"49.4.2.7\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"beyond-man.lit\",\"cost-of-immortality.lit\"],\"organizationName\":\"Clarke Incorporated\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"omnitek\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":53,\"hackDifficulty\":53,\"minDifficulty\":18,\"moneyAvailable\":16542223168,\"moneyMax\":413555579200,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1094,\"serverGrowth\":62}},\"omnitek\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"omnitek\",\"httpPortOpen\":true,\"ip\":\"53.2.4.1\",\"isConnectedTo\":false,\"maxRam\":512,\"messages\":[\"coded-intelligence.lit\",\"history-of-synthoids.lit\"],\"organizationName\":\"OmniTek Incorporated\",\"programs\":[],\"ramUsed\":511.7,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omega-net\",301,21326.47421523505,\"2b54a744-21f3-44e4-a108-4dc11e49723b\"],\"dataMap\":{},\"filename\":\"hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":4.210000000000002,\"pid\":2505,\"ramUsage\":1.7,\"server\":\"omnitek\",\"threads\":301,\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:https://danielyxie.github.io/a2c9c4dc-35ac-4192-a1d0-c36db6f07f57\",\"moduleSequenceNumber\":38538}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/export async function main(ns) {\\r\\n    const target = ns.args[0]\\r\\n    const threads = ns.args[1]\\r\\n    const delay = ns.args[2]\\r\\n  \\r\\n    if (delay && delay > 0) {\\r\\n      await ns.sleep(delay)\\r\\n    }\\r\\n  \\r\\n    ns.print(`Starting operation: hack on ${target} in ${threads} threads`)\\r\\n    await ns.hack(target, { threads, stock: true })\\r\\n    ns.exit()\\r\\n  }\\r\\n  \",\"filename\":\"hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:https://danielyxie.github.io/a2c9c4dc-35ac-4192-a1d0-c36db6f07f57\",\"moduleSequenceNumber\":38538}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"omnitek\",\"moduleSequenceNumber\":38538,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/export async function main(ns) {\\r\\n    const target = ns.args[0]\\r\\n    const threads = ns.args[1]\\r\\n    const delay = ns.args[2]\\r\\n  \\r\\n    if (delay && delay > 0) {\\r\\n      await ns.sleep(delay)\\r\\n    }\\r\\n  \\r\\n    ns.print(`Starting operation: grow on ${target} in ${threads} threads`)\\r\\n    await ns.grow(target, { threads, stock: true })\\r\\n    ns.exit()\\r\\n  }\\r\\n  \",\"filename\":\"grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:https://danielyxie.github.io/e4991840-6bc7-47de-bc60-9556c81d221d\",\"moduleSequenceNumber\":38395}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"omnitek\",\"moduleSequenceNumber\":38395,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/export async function main(ns) {\\r\\n    const target = ns.args[0]\\r\\n    const threads = ns.args[1]\\r\\n    const delay = ns.args[2]\\r\\n  \\r\\n    if (delay && delay > 0) {\\r\\n      await ns.sleep(delay)\\r\\n    }\\r\\n  \\r\\n    ns.print(`Starting operation: weaken on ${target} in ${threads} threads`)\\r\\n    await ns.weaken(target, { threads, stock: true })\\r\\n    ns.exit()\\r\\n  }\\r\\n  \",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"omnitek\",\"moduleSequenceNumber\":38335,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"vitalife\",\"blade\",\"clarkinc\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":95,\"hackDifficulty\":95,\"minDifficulty\":32,\"moneyAvailable\":15143237798,\"moneyMax\":378580944950,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":901,\"serverGrowth\":95}},\"4sigma\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"4sigma\",\"httpPortOpen\":false,\"ip\":\"6.8.2.8\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Four Sigma\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"helios\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":70,\"hackDifficulty\":70,\"minDifficulty\":23,\"moneyAvailable\":22265587632,\"moneyMax\":556639690800,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1099,\"serverGrowth\":80}},\"kuai-gong\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"kuai-gong\",\"httpPortOpen\":false,\"ip\":\"50.4.8.3\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"KuaiGong International\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"vitalife\",\"nwo\",\"powerhouse-fitness\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":99,\"hackDifficulty\":99,\"minDifficulty\":33,\"moneyAvailable\":28270030499,\"moneyMax\":706750762475,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1075,\"serverGrowth\":90}},\"fulcrumtech\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"fulcrumtech\",\"httpPortOpen\":true,\"ip\":\"26.7.8.9\",\"isConnectedTo\":false,\"maxRam\":2048,\"messages\":[\"simulated-reality.lit\"],\"organizationName\":\"Fulcrum Technologies\",\"programs\":[],\"ramUsed\":2046.8,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omega-net\",1204,21326.47421523505,\"54e6917d-716b-4000-85e5-f229c6329df8\"],\"dataMap\":{},\"filename\":\"hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":4.210000000000002,\"pid\":2506,\"ramUsage\":1.7,\"server\":\"fulcrumtech\",\"threads\":1204,\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:https://danielyxie.github.io/daa844b7-c390-4406-a757-5f77c1a01a3b\",\"moduleSequenceNumber\":38539}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/export async function main(ns) {\\r\\n    const target = ns.args[0]\\r\\n    const threads = ns.args[1]\\r\\n    const delay = ns.args[2]\\r\\n  \\r\\n    if (delay && delay > 0) {\\r\\n      await ns.sleep(delay)\\r\\n    }\\r\\n  \\r\\n    ns.print(`Starting operation: hack on ${target} in ${threads} threads`)\\r\\n    await ns.hack(target, { threads, stock: true })\\r\\n    ns.exit()\\r\\n  }\\r\\n  \",\"filename\":\"hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:https://danielyxie.github.io/daa844b7-c390-4406-a757-5f77c1a01a3b\",\"moduleSequenceNumber\":38539}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"fulcrumtech\",\"moduleSequenceNumber\":38539,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/export async function main(ns) {\\r\\n    const target = ns.args[0]\\r\\n    const threads = ns.args[1]\\r\\n    const delay = ns.args[2]\\r\\n  \\r\\n    if (delay && delay > 0) {\\r\\n      await ns.sleep(delay)\\r\\n    }\\r\\n  \\r\\n    ns.print(`Starting operation: grow on ${target} in ${threads} threads`)\\r\\n    await ns.grow(target, { threads, stock: true })\\r\\n    ns.exit()\\r\\n  }\\r\\n  \",\"filename\":\"grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:https://danielyxie.github.io/4f3b3dcb-1381-49f3-bc15-a533d8b7f3ea\",\"moduleSequenceNumber\":38396}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"fulcrumtech\",\"moduleSequenceNumber\":38396,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/export async function main(ns) {\\r\\n    const target = ns.args[0]\\r\\n    const threads = ns.args[1]\\r\\n    const delay = ns.args[2]\\r\\n  \\r\\n    if (delay && delay > 0) {\\r\\n      await ns.sleep(delay)\\r\\n    }\\r\\n  \\r\\n    ns.print(`Starting operation: weaken on ${target} in ${threads} threads`)\\r\\n    await ns.weaken(target, { threads, stock: true })\\r\\n    ns.exit()\\r\\n  }\\r\\n  \",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"fulcrumtech\",\"moduleSequenceNumber\":38329,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"run4theh111z\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":88,\"hackDifficulty\":88,\"minDifficulty\":29,\"moneyAvailable\":1402964187,\"moneyMax\":35074104675,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1190,\"serverGrowth\":98}},\"fulcrumassets\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"fulcrumassets\",\"httpPortOpen\":false,\"ip\":\"1.8.4.0\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Fulcrum Technologies\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"b-and-a\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":99,\"hackDifficulty\":99,\"minDifficulty\":33,\"moneyAvailable\":1000000,\"moneyMax\":25000000,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1289,\"serverGrowth\":1}},\"stormtech\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"stormtech\",\"httpPortOpen\":true,\"ip\":\"23.5.7.6\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Storm Technologies\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"titan-labs\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":80,\"hackDifficulty\":80,\"minDifficulty\":27,\"moneyAvailable\":1036155215,\"moneyMax\":25903880375,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":890,\"serverGrowth\":92}},\"defcomm\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"defcomm\",\"httpPortOpen\":false,\"ip\":\"62.7.1.0\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"DefComm\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"deltaone\",\"taiyang-digital\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":91,\"hackDifficulty\":91,\"minDifficulty\":30,\"moneyAvailable\":864832531,\"moneyMax\":21620813275,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1021,\"serverGrowth\":52}},\"infocomm\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"infocomm\",\"httpPortOpen\":true,\"ip\":\"37.8.5.0\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"InfoComm\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"zeus-med\",\"run4theh111z\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":75,\"hackDifficulty\":75,\"minDifficulty\":25,\"moneyAvailable\":649034961,\"moneyMax\":16225874025,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":950,\"serverGrowth\":60}},\"helios\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"helios\",\"httpPortOpen\":true,\"ip\":\"91.0.5.8\",\"isConnectedTo\":false,\"maxRam\":256,\"messages\":[\"beyond-man.lit\"],\"organizationName\":\"Helios Labs\",\"programs\":[],\"ramUsed\":255,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omega-net\",150,21326.47421523505,\"55d11aeb-51f1-40a9-95a3-d26ae99290c7\"],\"dataMap\":{},\"filename\":\"hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":4.210000000000002,\"pid\":2504,\"ramUsage\":1.7,\"server\":\"helios\",\"threads\":150,\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:https://danielyxie.github.io/e51d6dff-0c21-456d-8cdd-be59a37e1476\",\"moduleSequenceNumber\":38537}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/export async function main(ns) {\\r\\n    const target = ns.args[0]\\r\\n    const threads = ns.args[1]\\r\\n    const delay = ns.args[2]\\r\\n  \\r\\n    if (delay && delay > 0) {\\r\\n      await ns.sleep(delay)\\r\\n    }\\r\\n  \\r\\n    ns.print(`Starting operation: hack on ${target} in ${threads} threads`)\\r\\n    await ns.hack(target, { threads, stock: true })\\r\\n    ns.exit()\\r\\n  }\\r\\n  \",\"filename\":\"hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:https://danielyxie.github.io/e51d6dff-0c21-456d-8cdd-be59a37e1476\",\"moduleSequenceNumber\":38537}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"helios\",\"moduleSequenceNumber\":38537,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/export async function main(ns) {\\r\\n    const target = ns.args[0]\\r\\n    const threads = ns.args[1]\\r\\n    const delay = ns.args[2]\\r\\n  \\r\\n    if (delay && delay > 0) {\\r\\n      await ns.sleep(delay)\\r\\n    }\\r\\n  \\r\\n    ns.print(`Starting operation: grow on ${target} in ${threads} threads`)\\r\\n    await ns.grow(target, { threads, stock: true })\\r\\n    ns.exit()\\r\\n  }\\r\\n  \",\"filename\":\"grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:https://danielyxie.github.io/2c4617b3-d32f-47be-8db2-1d5ecb45fcac\",\"moduleSequenceNumber\":38394}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"helios\",\"moduleSequenceNumber\":38394,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/export async function main(ns) {\\r\\n    const target = ns.args[0]\\r\\n    const threads = ns.args[1]\\r\\n    const delay = ns.args[2]\\r\\n  \\r\\n    if (delay && delay > 0) {\\r\\n      await ns.sleep(delay)\\r\\n    }\\r\\n  \\r\\n    ns.print(`Starting operation: weaken on ${target} in ${threads} threads`)\\r\\n    await ns.weaken(target, { threads, stock: true })\\r\\n    ns.exit()\\r\\n  }\\r\\n  \",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"helios\",\"moduleSequenceNumber\":38317,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"microdyne\",\"4sigma\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":91,\"hackDifficulty\":91,\"minDifficulty\":30,\"moneyAvailable\":734935680,\"moneyMax\":18373392000,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":872,\"serverGrowth\":75}},\"vitalife\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"vitalife\",\"httpPortOpen\":true,\"ip\":\"3.9.4.5\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[\"A-Green-Tomorrow.lit\"],\"organizationName\":\"VitaLife\",\"programs\":[],\"ramUsed\":127.5,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omega-net\",75,21326.47421523505,\"81d61d4a-44cb-4d19-a9ec-5adc1b1976c3\"],\"dataMap\":{},\"filename\":\"hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":4.210000000000002,\"pid\":2503,\"ramUsage\":1.7,\"server\":\"vitalife\",\"threads\":75,\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:https://danielyxie.github.io/8592be30-c61f-45f7-a82a-d0ec910f6586\",\"moduleSequenceNumber\":38536}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/export async function main(ns) {\\r\\n    const target = ns.args[0]\\r\\n    const threads = ns.args[1]\\r\\n    const delay = ns.args[2]\\r\\n  \\r\\n    if (delay && delay > 0) {\\r\\n      await ns.sleep(delay)\\r\\n    }\\r\\n  \\r\\n    ns.print(`Starting operation: hack on ${target} in ${threads} threads`)\\r\\n    await ns.hack(target, { threads, stock: true })\\r\\n    ns.exit()\\r\\n  }\\r\\n  \",\"filename\":\"hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:https://danielyxie.github.io/8592be30-c61f-45f7-a82a-d0ec910f6586\",\"moduleSequenceNumber\":38536}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"vitalife\",\"moduleSequenceNumber\":38536,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/export async function main(ns) {\\r\\n    const target = ns.args[0]\\r\\n    const threads = ns.args[1]\\r\\n    const delay = ns.args[2]\\r\\n  \\r\\n    if (delay && delay > 0) {\\r\\n      await ns.sleep(delay)\\r\\n    }\\r\\n  \\r\\n    ns.print(`Starting operation: grow on ${target} in ${threads} threads`)\\r\\n    await ns.grow(target, { threads, stock: true })\\r\\n    ns.exit()\\r\\n  }\\r\\n  \",\"filename\":\"grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:https://danielyxie.github.io/086acdf5-21dd-4138-9780-118578e4f312\",\"moduleSequenceNumber\":38393}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"vitalife\",\"moduleSequenceNumber\":38393,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/export async function main(ns) {\\r\\n    const target = ns.args[0]\\r\\n    const threads = ns.args[1]\\r\\n    const delay = ns.args[2]\\r\\n  \\r\\n    if (delay && delay > 0) {\\r\\n      await ns.sleep(delay)\\r\\n    }\\r\\n  \\r\\n    ns.print(`Starting operation: weaken on ${target} in ${threads} threads`)\\r\\n    await ns.weaken(target, { threads, stock: true })\\r\\n    ns.exit()\\r\\n  }\\r\\n  \",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"vitalife\",\"moduleSequenceNumber\":38323,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"microdyne\",\"omnitek\",\"kuai-gong\",\".\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":80,\"hackDifficulty\":80,\"minDifficulty\":27,\"moneyAvailable\":773015839,\"moneyMax\":19325395975,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":838,\"serverGrowth\":79}},\"icarus\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"icarus\",\"httpPortOpen\":true,\"ip\":\"41.5.5.3\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Icarus Microsystems\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"deltaone\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":85,\"hackDifficulty\":85,\"minDifficulty\":28,\"moneyAvailable\":924909406,\"moneyMax\":23122735150,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":886,\"serverGrowth\":94}},\"univ-energy\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"univ-energy\",\"httpPortOpen\":true,\"ip\":\"26.9.1.9\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[],\"organizationName\":\"Universal Energy\",\"programs\":[],\"ramUsed\":62.9,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omega-net\",37,21326.47421523505,\"a4a0daf2-386c-4d75-b414-eeccc6b50a91\"],\"dataMap\":{},\"filename\":\"hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":4.210000000000002,\"pid\":2495,\"ramUsage\":1.7,\"server\":\"univ-energy\",\"threads\":37,\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:https://danielyxie.github.io/1cfdfca8-aee4-438f-bb97-92e371060f48\",\"moduleSequenceNumber\":38528}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/export async function main(ns) {\\r\\n    const target = ns.args[0]\\r\\n    const threads = ns.args[1]\\r\\n    const delay = ns.args[2]\\r\\n  \\r\\n    if (delay && delay > 0) {\\r\\n      await ns.sleep(delay)\\r\\n    }\\r\\n  \\r\\n    ns.print(`Starting operation: hack on ${target} in ${threads} threads`)\\r\\n    await ns.hack(target, { threads, stock: true })\\r\\n    ns.exit()\\r\\n  }\\r\\n  \",\"filename\":\"hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:https://danielyxie.github.io/1cfdfca8-aee4-438f-bb97-92e371060f48\",\"moduleSequenceNumber\":38528}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"univ-energy\",\"moduleSequenceNumber\":38528,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/export async function main(ns) {\\r\\n    const target = ns.args[0]\\r\\n    const threads = ns.args[1]\\r\\n    const delay = ns.args[2]\\r\\n  \\r\\n    if (delay && delay > 0) {\\r\\n      await ns.sleep(delay)\\r\\n    }\\r\\n  \\r\\n    ns.print(`Starting operation: grow on ${target} in ${threads} threads`)\\r\\n    await ns.grow(target, { threads, stock: true })\\r\\n    ns.exit()\\r\\n  }\\r\\n  \",\"filename\":\"grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:https://danielyxie.github.io/9ad3c928-d23b-4c49-a5bd-2e436f3afd76\",\"moduleSequenceNumber\":38385}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"univ-energy\",\"moduleSequenceNumber\":38385,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/export async function main(ns) {\\r\\n    const target = ns.args[0]\\r\\n    const threads = ns.args[1]\\r\\n    const delay = ns.args[2]\\r\\n  \\r\\n    if (delay && delay > 0) {\\r\\n      await ns.sleep(delay)\\r\\n    }\\r\\n  \\r\\n    ns.print(`Starting operation: weaken on ${target} in ${threads} threads`)\\r\\n    await ns.weaken(target, { threads, stock: true })\\r\\n    ns.exit()\\r\\n  }\\r\\n  \",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"univ-energy\",\"moduleSequenceNumber\":38287,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"omnia\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":84,\"hackDifficulty\":84,\"minDifficulty\":28,\"moneyAvailable\":1143163496,\"moneyMax\":28579087400,\"numOpenPortsRequired\":4,\"openPortCount\":4,\"requiredHackingSkill\":839,\"serverGrowth\":88}},\"titan-labs\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"titan-labs\",\"httpPortOpen\":true,\"ip\":\"57.2.9.1\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"coded-intelligence.lit\"],\"organizationName\":\"Titan Laboratories\",\"programs\":[],\"ramUsed\":30.6,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omega-net\",18,21326.47421523505,\"855a9f4c-0781-4377-8ae1-9775cf7b99b8\"],\"dataMap\":{},\"filename\":\"hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":4.210000000000002,\"pid\":2485,\"ramUsage\":1.7,\"server\":\"titan-labs\",\"threads\":18,\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:https://danielyxie.github.io/d33227c2-abf2-4958-b71d-e13e1e383b25\",\"moduleSequenceNumber\":38518}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/export async function main(ns) {\\r\\n    const target = ns.args[0]\\r\\n    const threads = ns.args[1]\\r\\n    const delay = ns.args[2]\\r\\n  \\r\\n    if (delay && delay > 0) {\\r\\n      await ns.sleep(delay)\\r\\n    }\\r\\n  \\r\\n    ns.print(`Starting operation: hack on ${target} in ${threads} threads`)\\r\\n    await ns.hack(target, { threads, stock: true })\\r\\n    ns.exit()\\r\\n  }\\r\\n  \",\"filename\":\"hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:https://danielyxie.github.io/d33227c2-abf2-4958-b71d-e13e1e383b25\",\"moduleSequenceNumber\":38518}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"titan-labs\",\"moduleSequenceNumber\":38518,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/export async function main(ns) {\\r\\n    const target = ns.args[0]\\r\\n    const threads = ns.args[1]\\r\\n    const delay = ns.args[2]\\r\\n  \\r\\n    if (delay && delay > 0) {\\r\\n      await ns.sleep(delay)\\r\\n    }\\r\\n  \\r\\n    ns.print(`Starting operation: grow on ${target} in ${threads} threads`)\\r\\n    await ns.grow(target, { threads, stock: true })\\r\\n    ns.exit()\\r\\n  }\\r\\n  \",\"filename\":\"grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:https://danielyxie.github.io/5d0e4adf-ee4d-4aa0-bc31-49a3fa2535a9\",\"moduleSequenceNumber\":38375}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"titan-labs\",\"moduleSequenceNumber\":38375,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/export async function main(ns) {\\r\\n    const target = ns.args[0]\\r\\n    const threads = ns.args[1]\\r\\n    const delay = ns.args[2]\\r\\n  \\r\\n    if (delay && delay > 0) {\\r\\n      await ns.sleep(delay)\\r\\n    }\\r\\n  \\r\\n    ns.print(`Starting operation: weaken on ${target} in ${threads} threads`)\\r\\n    await ns.weaken(target, { threads, stock: true })\\r\\n    ns.exit()\\r\\n  }\\r\\n  \",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"titan-labs\",\"moduleSequenceNumber\":38299,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"zb-def\",\"stormtech\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":71,\"hackDifficulty\":71,\"minDifficulty\":24,\"moneyAvailable\":819460187,\"moneyMax\":20486504675,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":867,\"serverGrowth\":69}},\"microdyne\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"microdyne\",\"httpPortOpen\":true,\"ip\":\"5.0.4.3\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"synthetic-muscles.lit\"],\"organizationName\":\"Microdyne Technologies\",\"programs\":[],\"ramUsed\":30.6,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omega-net\",18,21326.47421523505,\"1dc87ec0-8a0c-4e2c-b70e-ba5baa7c6152\"],\"dataMap\":{},\"filename\":\"hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":4.210000000000002,\"pid\":2486,\"ramUsage\":1.7,\"server\":\"microdyne\",\"threads\":18,\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:https://danielyxie.github.io/8ec4b4ba-ea8f-42eb-8a45-149c468005b9\",\"moduleSequenceNumber\":38519}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/export async function main(ns) {\\r\\n    const target = ns.args[0]\\r\\n    const threads = ns.args[1]\\r\\n    const delay = ns.args[2]\\r\\n  \\r\\n    if (delay && delay > 0) {\\r\\n      await ns.sleep(delay)\\r\\n    }\\r\\n  \\r\\n    ns.print(`Starting operation: hack on ${target} in ${threads} threads`)\\r\\n    await ns.hack(target, { threads, stock: true })\\r\\n    ns.exit()\\r\\n  }\\r\\n  \",\"filename\":\"hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:https://danielyxie.github.io/8ec4b4ba-ea8f-42eb-8a45-149c468005b9\",\"moduleSequenceNumber\":38519}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"microdyne\",\"moduleSequenceNumber\":38519,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/export async function main(ns) {\\r\\n    const target = ns.args[0]\\r\\n    const threads = ns.args[1]\\r\\n    const delay = ns.args[2]\\r\\n  \\r\\n    if (delay && delay > 0) {\\r\\n      await ns.sleep(delay)\\r\\n    }\\r\\n  \\r\\n    ns.print(`Starting operation: grow on ${target} in ${threads} threads`)\\r\\n    await ns.grow(target, { threads, stock: true })\\r\\n    ns.exit()\\r\\n  }\\r\\n  \",\"filename\":\"grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:https://danielyxie.github.io/14ce4d9a-b052-47be-867c-6dc685efe7ba\",\"moduleSequenceNumber\":38376}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"microdyne\",\"moduleSequenceNumber\":38376,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/export async function main(ns) {\\r\\n    const target = ns.args[0]\\r\\n    const threads = ns.args[1]\\r\\n    const delay = ns.args[2]\\r\\n  \\r\\n    if (delay && delay > 0) {\\r\\n      await ns.sleep(delay)\\r\\n    }\\r\\n  \\r\\n    ns.print(`Starting operation: weaken on ${target} in ${threads} threads`)\\r\\n    await ns.weaken(target, { threads, stock: true })\\r\\n    ns.exit()\\r\\n  }\\r\\n  \",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"microdyne\",\"moduleSequenceNumber\":38305,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"zb-def\",\"helios\",\"vitalife\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":72,\"hackDifficulty\":72,\"minDifficulty\":24,\"moneyAvailable\":574156749,\"moneyMax\":14353918725,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":835,\"serverGrowth\":72}},\"taiyang-digital\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"taiyang-digital\",\"httpPortOpen\":true,\"ip\":\"32.2.6.3\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"A-Green-Tomorrow.lit\",\"brighter-than-the-sun.lit\"],\"organizationName\":\"Taiyang Digital\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"defcomm\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":71,\"hackDifficulty\":71,\"minDifficulty\":24,\"moneyAvailable\":807694260,\"moneyMax\":20192356500,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":911,\"serverGrowth\":78}},\"galactic-cyber\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"galactic-cyber\",\"httpPortOpen\":true,\"ip\":\"36.9.6.4\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Galactic Cybersystems\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"rho-construction\",\"omnia\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":63,\"hackDifficulty\":63,\"minDifficulty\":21,\"moneyAvailable\":849203804,\"moneyMax\":21230095100,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":862,\"serverGrowth\":75}},\"aerocorp\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"aerocorp\",\"httpPortOpen\":true,\"ip\":\"74.4.2.6\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"man-and-machine.lit\"],\"organizationName\":\"AeroCorp\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"rho-construction\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":81,\"hackDifficulty\":81,\"minDifficulty\":27,\"moneyAvailable\":1007898748,\"moneyMax\":25197468700,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":925,\"serverGrowth\":55}},\"omnia\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"omnia\",\"httpPortOpen\":true,\"ip\":\"61.4.3.0\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"history-of-synthoids.lit\"],\"organizationName\":\"Omnia Cybersystems\",\"programs\":[],\"ramUsed\":62.9,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omega-net\",37,21326.47421523505,\"052c35d2-88ae-4510-9bb4-9ea717af9032\"],\"dataMap\":{},\"filename\":\"hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":4.210000000000002,\"pid\":2493,\"ramUsage\":1.7,\"server\":\"omnia\",\"threads\":37,\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:https://danielyxie.github.io/615079a6-d614-4882-991b-258c5a85b4aa\",\"moduleSequenceNumber\":38526}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/export async function main(ns) {\\r\\n    const target = ns.args[0]\\r\\n    const threads = ns.args[1]\\r\\n    const delay = ns.args[2]\\r\\n  \\r\\n    if (delay && delay > 0) {\\r\\n      await ns.sleep(delay)\\r\\n    }\\r\\n  \\r\\n    ns.print(`Starting operation: hack on ${target} in ${threads} threads`)\\r\\n    await ns.hack(target, { threads, stock: true })\\r\\n    ns.exit()\\r\\n  }\\r\\n  \",\"filename\":\"hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:https://danielyxie.github.io/615079a6-d614-4882-991b-258c5a85b4aa\",\"moduleSequenceNumber\":38526}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"omnia\",\"moduleSequenceNumber\":38526,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/export async function main(ns) {\\r\\n    const target = ns.args[0]\\r\\n    const threads = ns.args[1]\\r\\n    const delay = ns.args[2]\\r\\n  \\r\\n    if (delay && delay > 0) {\\r\\n      await ns.sleep(delay)\\r\\n    }\\r\\n  \\r\\n    ns.print(`Starting operation: grow on ${target} in ${threads} threads`)\\r\\n    await ns.grow(target, { threads, stock: true })\\r\\n    ns.exit()\\r\\n  }\\r\\n  \",\"filename\":\"grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:https://danielyxie.github.io/24275f52-edab-44b4-aafd-e4c1ff54c8ee\",\"moduleSequenceNumber\":38383}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"omnia\",\"moduleSequenceNumber\":38383,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/export async function main(ns) {\\r\\n    const target = ns.args[0]\\r\\n    const threads = ns.args[1]\\r\\n    const delay = ns.args[2]\\r\\n  \\r\\n    if (delay && delay > 0) {\\r\\n      await ns.sleep(delay)\\r\\n    }\\r\\n  \\r\\n    ns.print(`Starting operation: weaken on ${target} in ${threads} threads`)\\r\\n    await ns.weaken(target, { threads, stock: true })\\r\\n    ns.exit()\\r\\n  }\\r\\n  \",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"omnia\",\"moduleSequenceNumber\":38275,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"galactic-cyber\",\"univ-energy\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":94,\"hackDifficulty\":94,\"minDifficulty\":31,\"moneyAvailable\":985587752,\"moneyMax\":24639693800,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":865,\"serverGrowth\":68}},\"zb-def\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"zb-def\",\"httpPortOpen\":true,\"ip\":\"56.7.3.5\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"synthetic-muscles.lit\"],\"organizationName\":\"ZB Defense Industries\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"solaris\",\"titan-labs\",\"microdyne\",\"applied-energetics\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":63,\"hackDifficulty\":63,\"minDifficulty\":21,\"moneyAvailable\":911891992,\"moneyMax\":22797299800,\"numOpenPortsRequired\":4,\"openPortCount\":5,\"requiredHackingSkill\":791,\"serverGrowth\":73}},\"applied-energetics\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"applied-energetics\",\"httpPortOpen\":true,\"ip\":\"29.2.2.1\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Applied Energetics\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"zb-def\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":70,\"hackDifficulty\":70,\"minDifficulty\":23,\"moneyAvailable\":937449583,\"moneyMax\":23436239575,\"numOpenPortsRequired\":4,\"openPortCount\":5,\"requiredHackingSkill\":836,\"serverGrowth\":75}},\"solaris\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"solaris\",\"httpPortOpen\":true,\"ip\":\"7.4.2.8\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"A-Green-Tomorrow.lit\",\"the-failed-frontier.lit\"],\"organizationName\":\"Solaris Space Systems\",\"programs\":[],\"ramUsed\":62.9,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omega-net\",37,21326.47421523505,\"1f527fba-0978-4ebb-8741-8962c797677a\"],\"dataMap\":{},\"filename\":\"hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":4.210000000000002,\"pid\":2496,\"ramUsage\":1.7,\"server\":\"solaris\",\"threads\":37,\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:https://danielyxie.github.io/27068b8d-e781-4e4c-a9f8-687f7886a540\",\"moduleSequenceNumber\":38529}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/export async function main(ns) {\\r\\n    const target = ns.args[0]\\r\\n    const threads = ns.args[1]\\r\\n    const delay = ns.args[2]\\r\\n  \\r\\n    if (delay && delay > 0) {\\r\\n      await ns.sleep(delay)\\r\\n    }\\r\\n  \\r\\n    ns.print(`Starting operation: hack on ${target} in ${threads} threads`)\\r\\n    await ns.hack(target, { threads, stock: true })\\r\\n    ns.exit()\\r\\n  }\\r\\n  \",\"filename\":\"hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:https://danielyxie.github.io/27068b8d-e781-4e4c-a9f8-687f7886a540\",\"moduleSequenceNumber\":38529}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"solaris\",\"moduleSequenceNumber\":38529,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/export async function main(ns) {\\r\\n    const target = ns.args[0]\\r\\n    const threads = ns.args[1]\\r\\n    const delay = ns.args[2]\\r\\n  \\r\\n    if (delay && delay > 0) {\\r\\n      await ns.sleep(delay)\\r\\n    }\\r\\n  \\r\\n    ns.print(`Starting operation: grow on ${target} in ${threads} threads`)\\r\\n    await ns.grow(target, { threads, stock: true })\\r\\n    ns.exit()\\r\\n  }\\r\\n  \",\"filename\":\"grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:https://danielyxie.github.io/5f2068ff-2297-4a58-abeb-ce1c084a7b83\",\"moduleSequenceNumber\":38386}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"solaris\",\"moduleSequenceNumber\":38386,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/export async function main(ns) {\\r\\n    const target = ns.args[0]\\r\\n    const threads = ns.args[1]\\r\\n    const delay = ns.args[2]\\r\\n  \\r\\n    if (delay && delay > 0) {\\r\\n      await ns.sleep(delay)\\r\\n    }\\r\\n  \\r\\n    ns.print(`Starting operation: weaken on ${target} in ${threads} threads`)\\r\\n    await ns.weaken(target, { threads, stock: true })\\r\\n    ns.exit()\\r\\n  }\\r\\n  \",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"solaris\",\"moduleSequenceNumber\":38293,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"deltaone\",\"zb-def\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":73,\"hackDifficulty\":73,\"minDifficulty\":24,\"moneyAvailable\":812435801,\"moneyMax\":20310895025,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":789,\"serverGrowth\":72}},\"deltaone\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"deltaone\",\"httpPortOpen\":true,\"ip\":\"50.2.5.7\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"DeltaOne\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"global-pharm\",\"defcomm\",\"icarus\",\"solaris\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":78,\"hackDifficulty\":78,\"minDifficulty\":26,\"moneyAvailable\":1673963217,\"moneyMax\":41849080425,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":871,\"serverGrowth\":66}},\"global-pharm\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"global-pharm\",\"httpPortOpen\":true,\"ip\":\"74.0.2.1\",\"isConnectedTo\":false,\"maxRam\":8,\"messages\":[\"A-Green-Tomorrow.lit\"],\"organizationName\":\"Global Pharmaceuticals\",\"programs\":[],\"ramUsed\":6.8,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omega-net\",4,21326.47421523505,\"a0f35db9-a102-44e7-b88e-19432b315891\"],\"dataMap\":{},\"filename\":\"hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":4.210000000000002,\"pid\":2466,\"ramUsage\":1.7,\"server\":\"global-pharm\",\"threads\":4,\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:https://danielyxie.github.io/2df1eee2-ea4d-4b00-a6e0-680bc6b59d7e\",\"moduleSequenceNumber\":38499}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/export async function main(ns) {\\r\\n    const target = ns.args[0]\\r\\n    const threads = ns.args[1]\\r\\n    const delay = ns.args[2]\\r\\n  \\r\\n    if (delay && delay > 0) {\\r\\n      await ns.sleep(delay)\\r\\n    }\\r\\n  \\r\\n    ns.print(`Starting operation: hack on ${target} in ${threads} threads`)\\r\\n    await ns.hack(target, { threads, stock: true })\\r\\n    ns.exit()\\r\\n  }\\r\\n  \",\"filename\":\"hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:https://danielyxie.github.io/2df1eee2-ea4d-4b00-a6e0-680bc6b59d7e\",\"moduleSequenceNumber\":38499}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"global-pharm\",\"moduleSequenceNumber\":38499,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/export async function main(ns) {\\r\\n    const target = ns.args[0]\\r\\n    const threads = ns.args[1]\\r\\n    const delay = ns.args[2]\\r\\n  \\r\\n    if (delay && delay > 0) {\\r\\n      await ns.sleep(delay)\\r\\n    }\\r\\n  \\r\\n    ns.print(`Starting operation: grow on ${target} in ${threads} threads`)\\r\\n    await ns.grow(target, { threads, stock: true })\\r\\n    ns.exit()\\r\\n  }\\r\\n  \",\"filename\":\"grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:https://danielyxie.github.io/4f088ba5-2c8a-4905-83c5-bc9f7857b4d1\",\"moduleSequenceNumber\":38356}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"global-pharm\",\"moduleSequenceNumber\":38356,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/export async function main(ns) {\\r\\n    const target = ns.args[0]\\r\\n    const threads = ns.args[1]\\r\\n    const delay = ns.args[2]\\r\\n  \\r\\n    if (delay && delay > 0) {\\r\\n      await ns.sleep(delay)\\r\\n    }\\r\\n  \\r\\n    ns.print(`Starting operation: weaken on ${target} in ${threads} threads`)\\r\\n    await ns.weaken(target, { threads, stock: true })\\r\\n    ns.exit()\\r\\n  }\\r\\n  \",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"global-pharm\",\"moduleSequenceNumber\":38269,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"millenium-fitness\",\"deltaone\",\"unitalife\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":85,\"hackDifficulty\":85,\"minDifficulty\":28,\"moneyAvailable\":1579869660,\"moneyMax\":39496741500,\"numOpenPortsRequired\":4,\"openPortCount\":4,\"requiredHackingSkill\":808,\"serverGrowth\":83}},\"nova-med\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"nova-med\",\"httpPortOpen\":true,\"ip\":\"87.1.0.7\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Nova Medical\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"zeus-med\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":77,\"hackDifficulty\":77,\"minDifficulty\":26,\"moneyAvailable\":1107900811,\"moneyMax\":27697520275,\"numOpenPortsRequired\":4,\"openPortCount\":5,\"requiredHackingSkill\":801,\"serverGrowth\":67}},\"zeus-med\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"zeus-med\",\"httpPortOpen\":true,\"ip\":\"36.2.2.8\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Zeus Medical\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"unitalife\",\"infocomm\",\"nova-med\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":86,\"hackDifficulty\":86,\"minDifficulty\":29,\"moneyAvailable\":1358608874,\"moneyMax\":33965221850,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":840,\"serverGrowth\":79}},\"unitalife\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"unitalife\",\"httpPortOpen\":true,\"ip\":\"30.4.4.4\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[],\"organizationName\":\"UnitaLife Group\",\"programs\":[],\"ramUsed\":62.9,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omega-net\",37,21326.47421523505,\"bfb15289-0af0-4fb3-9b69-a81d70548899\"],\"dataMap\":{},\"filename\":\"hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":4.210000000000002,\"pid\":2494,\"ramUsage\":1.7,\"server\":\"unitalife\",\"threads\":37,\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:https://danielyxie.github.io/7c46066d-415c-4524-9fd9-9c91bc47f59d\",\"moduleSequenceNumber\":38527}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/export async function main(ns) {\\r\\n    const target = ns.args[0]\\r\\n    const threads = ns.args[1]\\r\\n    const delay = ns.args[2]\\r\\n  \\r\\n    if (delay && delay > 0) {\\r\\n      await ns.sleep(delay)\\r\\n    }\\r\\n  \\r\\n    ns.print(`Starting operation: hack on ${target} in ${threads} threads`)\\r\\n    await ns.hack(target, { threads, stock: true })\\r\\n    ns.exit()\\r\\n  }\\r\\n  \",\"filename\":\"hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:https://danielyxie.github.io/7c46066d-415c-4524-9fd9-9c91bc47f59d\",\"moduleSequenceNumber\":38527}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"unitalife\",\"moduleSequenceNumber\":38527,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/export async function main(ns) {\\r\\n    const target = ns.args[0]\\r\\n    const threads = ns.args[1]\\r\\n    const delay = ns.args[2]\\r\\n  \\r\\n    if (delay && delay > 0) {\\r\\n      await ns.sleep(delay)\\r\\n    }\\r\\n  \\r\\n    ns.print(`Starting operation: grow on ${target} in ${threads} threads`)\\r\\n    await ns.grow(target, { threads, stock: true })\\r\\n    ns.exit()\\r\\n  }\\r\\n  \",\"filename\":\"grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:https://danielyxie.github.io/151bf2a5-416b-4135-92b9-033fa62cd3d1\",\"moduleSequenceNumber\":38384}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"unitalife\",\"moduleSequenceNumber\":38384,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/export async function main(ns) {\\r\\n    const target = ns.args[0]\\r\\n    const threads = ns.args[1]\\r\\n    const delay = ns.args[2]\\r\\n  \\r\\n    if (delay && delay > 0) {\\r\\n      await ns.sleep(delay)\\r\\n    }\\r\\n  \\r\\n    ns.print(`Starting operation: weaken on ${target} in ${threads} threads`)\\r\\n    await ns.weaken(target, { threads, stock: true })\\r\\n    ns.exit()\\r\\n  }\\r\\n  \",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"unitalife\",\"moduleSequenceNumber\":38281,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"global-pharm\",\"zeus-med\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":70,\"hackDifficulty\":70,\"minDifficulty\":23,\"moneyAvailable\":1085288602,\"moneyMax\":27132215050,\"numOpenPortsRequired\":4,\"openPortCount\":4,\"requiredHackingSkill\":779,\"serverGrowth\":70}},\"lexo-corp\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"lexo-corp\",\"httpPortOpen\":true,\"ip\":\"46.1.5.4\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[],\"organizationName\":\"LexoCorp\",\"programs\":[],\"ramUsed\":62.9,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omega-net\",37,21326.47421523505,\"825c210e-116b-40d9-95f8-957626813cf2\"],\"dataMap\":{},\"filename\":\"hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":4.210000000000002,\"pid\":2491,\"ramUsage\":1.7,\"server\":\"lexo-corp\",\"threads\":37,\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:https://danielyxie.github.io/2e1a4da9-253d-414b-b55c-22b5391e8bd9\",\"moduleSequenceNumber\":38524}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/export async function main(ns) {\\r\\n    const target = ns.args[0]\\r\\n    const threads = ns.args[1]\\r\\n    const delay = ns.args[2]\\r\\n  \\r\\n    if (delay && delay > 0) {\\r\\n      await ns.sleep(delay)\\r\\n    }\\r\\n  \\r\\n    ns.print(`Starting operation: hack on ${target} in ${threads} threads`)\\r\\n    await ns.hack(target, { threads, stock: true })\\r\\n    ns.exit()\\r\\n  }\\r\\n  \",\"filename\":\"hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:https://danielyxie.github.io/2e1a4da9-253d-414b-b55c-22b5391e8bd9\",\"moduleSequenceNumber\":38524}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"lexo-corp\",\"moduleSequenceNumber\":38524,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/export async function main(ns) {\\r\\n    const target = ns.args[0]\\r\\n    const threads = ns.args[1]\\r\\n    const delay = ns.args[2]\\r\\n  \\r\\n    if (delay && delay > 0) {\\r\\n      await ns.sleep(delay)\\r\\n    }\\r\\n  \\r\\n    ns.print(`Starting operation: grow on ${target} in ${threads} threads`)\\r\\n    await ns.grow(target, { threads, stock: true })\\r\\n    ns.exit()\\r\\n  }\\r\\n  \",\"filename\":\"grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:https://danielyxie.github.io/21171b3e-62c5-4e67-a939-7dda49a778ec\",\"moduleSequenceNumber\":38381}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"lexo-corp\",\"moduleSequenceNumber\":38381,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/export async function main(ns) {\\r\\n    const target = ns.args[0]\\r\\n    const threads = ns.args[1]\\r\\n    const delay = ns.args[2]\\r\\n  \\r\\n    if (delay && delay > 0) {\\r\\n      await ns.sleep(delay)\\r\\n    }\\r\\n  \\r\\n    ns.print(`Starting operation: weaken on ${target} in ${threads} threads`)\\r\\n    await ns.weaken(target, { threads, stock: true })\\r\\n    ns.exit()\\r\\n  }\\r\\n  \",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"lexo-corp\",\"moduleSequenceNumber\":38239,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"summit-uni\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":78,\"hackDifficulty\":78,\"minDifficulty\":26,\"moneyAvailable\":742817987,\"moneyMax\":18570449675,\"numOpenPortsRequired\":4,\"openPortCount\":4,\"requiredHackingSkill\":721,\"serverGrowth\":61}},\"rho-construction\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"rho-construction\",\"httpPortOpen\":true,\"ip\":\"66.6.8.0\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[],\"organizationName\":\"Rho Construction\",\"programs\":[],\"ramUsed\":62.9,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omega-net\",37,21326.47421523505,\"233b55f7-7d7f-432a-b69d-1c2fe3056040\"],\"dataMap\":{},\"filename\":\"hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":4.210000000000002,\"pid\":2492,\"ramUsage\":1.7,\"server\":\"rho-construction\",\"threads\":37,\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:https://danielyxie.github.io/d2a9f3e9-109a-4508-8ba2-c7caee499962\",\"moduleSequenceNumber\":38525}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/export async function main(ns) {\\r\\n    const target = ns.args[0]\\r\\n    const threads = ns.args[1]\\r\\n    const delay = ns.args[2]\\r\\n  \\r\\n    if (delay && delay > 0) {\\r\\n      await ns.sleep(delay)\\r\\n    }\\r\\n  \\r\\n    ns.print(`Starting operation: hack on ${target} in ${threads} threads`)\\r\\n    await ns.hack(target, { threads, stock: true })\\r\\n    ns.exit()\\r\\n  }\\r\\n  \",\"filename\":\"hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:https://danielyxie.github.io/d2a9f3e9-109a-4508-8ba2-c7caee499962\",\"moduleSequenceNumber\":38525}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"rho-construction\",\"moduleSequenceNumber\":38525,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/export async function main(ns) {\\r\\n    const target = ns.args[0]\\r\\n    const threads = ns.args[1]\\r\\n    const delay = ns.args[2]\\r\\n  \\r\\n    if (delay && delay > 0) {\\r\\n      await ns.sleep(delay)\\r\\n    }\\r\\n  \\r\\n    ns.print(`Starting operation: grow on ${target} in ${threads} threads`)\\r\\n    await ns.grow(target, { threads, stock: true })\\r\\n    ns.exit()\\r\\n  }\\r\\n  \",\"filename\":\"grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:https://danielyxie.github.io/86288428-da6e-4d1e-8751-675d05ac4540\",\"moduleSequenceNumber\":38382}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"rho-construction\",\"moduleSequenceNumber\":38382,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/export async function main(ns) {\\r\\n    const target = ns.args[0]\\r\\n    const threads = ns.args[1]\\r\\n    const delay = ns.args[2]\\r\\n  \\r\\n    if (delay && delay > 0) {\\r\\n      await ns.sleep(delay)\\r\\n    }\\r\\n  \\r\\n    ns.print(`Starting operation: weaken on ${target} in ${threads} threads`)\\r\\n    await ns.weaken(target, { threads, stock: true })\\r\\n    ns.exit()\\r\\n  }\\r\\n  \",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"rho-construction\",\"moduleSequenceNumber\":38245,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"syscore\",\"galactic-cyber\",\"aerocorp\",\"snap-fitness\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":53,\"hackDifficulty\":53,\"minDifficulty\":18,\"moneyAvailable\":645453831,\"moneyMax\":16136345775,\"numOpenPortsRequired\":3,\"openPortCount\":4,\"requiredHackingSkill\":496,\"serverGrowth\":49}},\"alpha-ent\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"alpha-ent\",\"httpPortOpen\":true,\"ip\":\"25.6.3.3\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[\"sector-12-crime.lit\"],\"organizationName\":\"Alpha Enterprises\",\"programs\":[],\"ramUsed\":127.5,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omega-net\",75,21326.47421523505,\"bf9a8953-d61c-46aa-8ef0-a38bb30a4eb5\"],\"dataMap\":{},\"filename\":\"hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":4.210000000000002,\"pid\":2501,\"ramUsage\":1.7,\"server\":\"alpha-ent\",\"threads\":75,\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:https://danielyxie.github.io/16203abd-b15b-4b2d-88e5-6dc815dfe906\",\"moduleSequenceNumber\":38534}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/export async function main(ns) {\\r\\n    const target = ns.args[0]\\r\\n    const threads = ns.args[1]\\r\\n    const delay = ns.args[2]\\r\\n  \\r\\n    if (delay && delay > 0) {\\r\\n      await ns.sleep(delay)\\r\\n    }\\r\\n  \\r\\n    ns.print(`Starting operation: hack on ${target} in ${threads} threads`)\\r\\n    await ns.hack(target, { threads, stock: true })\\r\\n    ns.exit()\\r\\n  }\\r\\n  \",\"filename\":\"hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:https://danielyxie.github.io/16203abd-b15b-4b2d-88e5-6dc815dfe906\",\"moduleSequenceNumber\":38534}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"alpha-ent\",\"moduleSequenceNumber\":38534,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/export async function main(ns) {\\r\\n    const target = ns.args[0]\\r\\n    const threads = ns.args[1]\\r\\n    const delay = ns.args[2]\\r\\n  \\r\\n    if (delay && delay > 0) {\\r\\n      await ns.sleep(delay)\\r\\n    }\\r\\n  \\r\\n    ns.print(`Starting operation: grow on ${target} in ${threads} threads`)\\r\\n    await ns.grow(target, { threads, stock: true })\\r\\n    ns.exit()\\r\\n  }\\r\\n  \",\"filename\":\"grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:https://danielyxie.github.io/c6465ebd-450f-421b-b2bf-06539540b420\",\"moduleSequenceNumber\":38391}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"alpha-ent\",\"moduleSequenceNumber\":38391,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/export async function main(ns) {\\r\\n    const target = ns.args[0]\\r\\n    const threads = ns.args[1]\\r\\n    const delay = ns.args[2]\\r\\n  \\r\\n    if (delay && delay > 0) {\\r\\n      await ns.sleep(delay)\\r\\n    }\\r\\n  \\r\\n    ns.print(`Starting operation: weaken on ${target} in ${threads} threads`)\\r\\n    await ns.weaken(target, { threads, stock: true })\\r\\n    ns.exit()\\r\\n  }\\r\\n  \",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"alpha-ent\",\"moduleSequenceNumber\":38263,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"catalyst\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":57,\"hackDifficulty\":57,\"minDifficulty\":19,\"moneyAvailable\":741894624,\"moneyMax\":18547365600,\"numOpenPortsRequired\":4,\"openPortCount\":4,\"requiredHackingSkill\":574,\"serverGrowth\":51}},\"aevum-police\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"aevum-police\",\"httpPortOpen\":true,\"ip\":\"54.9.1.5\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Aevum Police Headquarters\",\"programs\":[],\"ramUsed\":30.6,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omega-net\",18,21326.47421523505,\"7fd32ccc-e88a-4e75-967d-5183ee0aa76e\"],\"dataMap\":{},\"filename\":\"hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":4.210000000000002,\"pid\":2484,\"ramUsage\":1.7,\"server\":\"aevum-police\",\"threads\":18,\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:https://danielyxie.github.io/0145e973-ac5e-4587-9339-b796633a2a87\",\"moduleSequenceNumber\":38517}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/export async function main(ns) {\\r\\n    const target = ns.args[0]\\r\\n    const threads = ns.args[1]\\r\\n    const delay = ns.args[2]\\r\\n  \\r\\n    if (delay && delay > 0) {\\r\\n      await ns.sleep(delay)\\r\\n    }\\r\\n  \\r\\n    ns.print(`Starting operation: hack on ${target} in ${threads} threads`)\\r\\n    await ns.hack(target, { threads, stock: true })\\r\\n    ns.exit()\\r\\n  }\\r\\n  \",\"filename\":\"hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:https://danielyxie.github.io/0145e973-ac5e-4587-9339-b796633a2a87\",\"moduleSequenceNumber\":38517}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"aevum-police\",\"moduleSequenceNumber\":38517,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/export async function main(ns) {\\r\\n    const target = ns.args[0]\\r\\n    const threads = ns.args[1]\\r\\n    const delay = ns.args[2]\\r\\n  \\r\\n    if (delay && delay > 0) {\\r\\n      await ns.sleep(delay)\\r\\n    }\\r\\n  \\r\\n    ns.print(`Starting operation: grow on ${target} in ${threads} threads`)\\r\\n    await ns.grow(target, { threads, stock: true })\\r\\n    ns.exit()\\r\\n  }\\r\\n  \",\"filename\":\"grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:https://danielyxie.github.io/2cfee399-b923-4746-8e8f-6f98d09f25d1\",\"moduleSequenceNumber\":38374}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"aevum-police\",\"moduleSequenceNumber\":38374,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/export async function main(ns) {\\r\\n    const target = ns.args[0]\\r\\n    const threads = ns.args[1]\\r\\n    const delay = ns.args[2]\\r\\n  \\r\\n    if (delay && delay > 0) {\\r\\n      await ns.sleep(delay)\\r\\n    }\\r\\n  \\r\\n    ns.print(`Starting operation: weaken on ${target} in ${threads} threads`)\\r\\n    await ns.weaken(target, { threads, stock: true })\\r\\n    ns.exit()\\r\\n  }\\r\\n  \",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"aevum-police\",\"moduleSequenceNumber\":38251,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"I.I.I.I\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":76,\"hackDifficulty\":76,\"minDifficulty\":25,\"moneyAvailable\":321361170,\"moneyMax\":8034029250,\"numOpenPortsRequired\":4,\"openPortCount\":4,\"requiredHackingSkill\":426,\"serverGrowth\":47}},\"rothman-uni\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"rothman-uni\",\"httpPortOpen\":true,\"ip\":\"44.8.8.8\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"secret-societies.lit\",\"the-failed-frontier.lit\",\"tensions-in-tech-race.lit\"],\"organizationName\":\"Rothman University\",\"programs\":[],\"ramUsed\":62.9,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omega-net\",37,21326.47421523505,\"34e78920-20b2-45dd-ba99-1a2ced7f7835\"],\"dataMap\":{},\"filename\":\"hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":4.210000000000002,\"pid\":2490,\"ramUsage\":1.7,\"server\":\"rothman-uni\",\"threads\":37,\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:https://danielyxie.github.io/117dc4d1-a91f-4b4c-8486-d9efea94f12b\",\"moduleSequenceNumber\":38523}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/export async function main(ns) {\\r\\n    const target = ns.args[0]\\r\\n    const threads = ns.args[1]\\r\\n    const delay = ns.args[2]\\r\\n  \\r\\n    if (delay && delay > 0) {\\r\\n      await ns.sleep(delay)\\r\\n    }\\r\\n  \\r\\n    ns.print(`Starting operation: hack on ${target} in ${threads} threads`)\\r\\n    await ns.hack(target, { threads, stock: true })\\r\\n    ns.exit()\\r\\n  }\\r\\n  \",\"filename\":\"hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:https://danielyxie.github.io/117dc4d1-a91f-4b4c-8486-d9efea94f12b\",\"moduleSequenceNumber\":38523}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"rothman-uni\",\"moduleSequenceNumber\":38523,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/export async function main(ns) {\\r\\n    const target = ns.args[0]\\r\\n    const threads = ns.args[1]\\r\\n    const delay = ns.args[2]\\r\\n  \\r\\n    if (delay && delay > 0) {\\r\\n      await ns.sleep(delay)\\r\\n    }\\r\\n  \\r\\n    ns.print(`Starting operation: grow on ${target} in ${threads} threads`)\\r\\n    await ns.grow(target, { threads, stock: true })\\r\\n    ns.exit()\\r\\n  }\\r\\n  \",\"filename\":\"grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:https://danielyxie.github.io/2c7375b3-d8e4-4a48-868c-8afd8669df66\",\"moduleSequenceNumber\":38380}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"rothman-uni\",\"moduleSequenceNumber\":38380,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/export async function main(ns) {\\r\\n    const target = ns.args[0]\\r\\n    const threads = ns.args[1]\\r\\n    const delay = ns.args[2]\\r\\n  \\r\\n    if (delay && delay > 0) {\\r\\n      await ns.sleep(delay)\\r\\n    }\\r\\n  \\r\\n    ns.print(`Starting operation: weaken on ${target} in ${threads} threads`)\\r\\n    await ns.weaken(target, { threads, stock: true })\\r\\n    ns.exit()\\r\\n  }\\r\\n  \",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"rothman-uni\",\"moduleSequenceNumber\":38221,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"comptek\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":50,\"hackDifficulty\":50,\"minDifficulty\":17,\"moneyAvailable\":198308069,\"moneyMax\":4957701725,\"numOpenPortsRequired\":3,\"openPortCount\":4,\"requiredHackingSkill\":388,\"serverGrowth\":45}},\"zb-institute\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"zb-institute\",\"httpPortOpen\":true,\"ip\":\"70.7.9.9\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"ZB Institute of Technology\",\"programs\":[],\"ramUsed\":30.6,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omega-net\",18,21326.47421523505,\"2e8cdc6f-625b-4d06-a292-584723bab552\"],\"dataMap\":{},\"filename\":\"hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":4.210000000000002,\"pid\":2483,\"ramUsage\":1.7,\"server\":\"zb-institute\",\"threads\":18,\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:https://danielyxie.github.io/5282fd24-3e29-4a6e-be77-20dfb83e5912\",\"moduleSequenceNumber\":38516}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/export async function main(ns) {\\r\\n    const target = ns.args[0]\\r\\n    const threads = ns.args[1]\\r\\n    const delay = ns.args[2]\\r\\n  \\r\\n    if (delay && delay > 0) {\\r\\n      await ns.sleep(delay)\\r\\n    }\\r\\n  \\r\\n    ns.print(`Starting operation: hack on ${target} in ${threads} threads`)\\r\\n    await ns.hack(target, { threads, stock: true })\\r\\n    ns.exit()\\r\\n  }\\r\\n  \",\"filename\":\"hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:https://danielyxie.github.io/5282fd24-3e29-4a6e-be77-20dfb83e5912\",\"moduleSequenceNumber\":38516}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"zb-institute\",\"moduleSequenceNumber\":38516,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/export async function main(ns) {\\r\\n    const target = ns.args[0]\\r\\n    const threads = ns.args[1]\\r\\n    const delay = ns.args[2]\\r\\n  \\r\\n    if (delay && delay > 0) {\\r\\n      await ns.sleep(delay)\\r\\n    }\\r\\n  \\r\\n    ns.print(`Starting operation: grow on ${target} in ${threads} threads`)\\r\\n    await ns.grow(target, { threads, stock: true })\\r\\n    ns.exit()\\r\\n  }\\r\\n  \",\"filename\":\"grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:https://danielyxie.github.io/e0101caf-99d1-4333-aa6b-0e6f050619cc\",\"moduleSequenceNumber\":38373}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"zb-institute\",\"moduleSequenceNumber\":38373,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/export async function main(ns) {\\r\\n    const target = ns.args[0]\\r\\n    const threads = ns.args[1]\\r\\n    const delay = ns.args[2]\\r\\n  \\r\\n    if (delay && delay > 0) {\\r\\n      await ns.sleep(delay)\\r\\n    }\\r\\n  \\r\\n    ns.print(`Starting operation: weaken on ${target} in ${threads} threads`)\\r\\n    await ns.weaken(target, { threads, stock: true })\\r\\n    ns.exit()\\r\\n  }\\r\\n  \",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"zb-institute\",\"moduleSequenceNumber\":38227,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"comptek\",\"millenium-fitness\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":65,\"hackDifficulty\":65,\"minDifficulty\":22,\"moneyAvailable\":812686040,\"moneyMax\":20317151000,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":725,\"serverGrowth\":78}},\"summit-uni\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"summit-uni\",\"httpPortOpen\":true,\"ip\":\"78.3.3.7\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"secret-societies.lit\",\"the-failed-frontier.lit\",\"synthetic-muscles.lit\"],\"organizationName\":\"Summit University\",\"programs\":[],\"ramUsed\":62.9,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omega-net\",37,21326.47421523505,\"c9bc433a-75ea-4fc1-908c-a462d68c07e0\"],\"dataMap\":{},\"filename\":\"hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":4.210000000000002,\"pid\":2489,\"ramUsage\":1.7,\"server\":\"summit-uni\",\"threads\":37,\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:https://danielyxie.github.io/64167a98-a82f-4ad6-901b-ec6c2f1025f3\",\"moduleSequenceNumber\":38522}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/export async function main(ns) {\\r\\n    const target = ns.args[0]\\r\\n    const threads = ns.args[1]\\r\\n    const delay = ns.args[2]\\r\\n  \\r\\n    if (delay && delay > 0) {\\r\\n      await ns.sleep(delay)\\r\\n    }\\r\\n  \\r\\n    ns.print(`Starting operation: hack on ${target} in ${threads} threads`)\\r\\n    await ns.hack(target, { threads, stock: true })\\r\\n    ns.exit()\\r\\n  }\\r\\n  \",\"filename\":\"hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:https://danielyxie.github.io/64167a98-a82f-4ad6-901b-ec6c2f1025f3\",\"moduleSequenceNumber\":38522}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"summit-uni\",\"moduleSequenceNumber\":38522,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/export async function main(ns) {\\r\\n    const target = ns.args[0]\\r\\n    const threads = ns.args[1]\\r\\n    const delay = ns.args[2]\\r\\n  \\r\\n    if (delay && delay > 0) {\\r\\n      await ns.sleep(delay)\\r\\n    }\\r\\n  \\r\\n    ns.print(`Starting operation: grow on ${target} in ${threads} threads`)\\r\\n    await ns.grow(target, { threads, stock: true })\\r\\n    ns.exit()\\r\\n  }\\r\\n  \",\"filename\":\"grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:https://danielyxie.github.io/e0d6fe3b-2827-4a38-b710-6b48967c9cdc\",\"moduleSequenceNumber\":38379}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"summit-uni\",\"moduleSequenceNumber\":38379,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/export async function main(ns) {\\r\\n    const target = ns.args[0]\\r\\n    const threads = ns.args[1]\\r\\n    const delay = ns.args[2]\\r\\n  \\r\\n    if (delay && delay > 0) {\\r\\n      await ns.sleep(delay)\\r\\n    }\\r\\n  \\r\\n    ns.print(`Starting operation: weaken on ${target} in ${threads} threads`)\\r\\n    await ns.weaken(target, { threads, stock: true })\\r\\n    ns.exit()\\r\\n  }\\r\\n  \",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"summit-uni\",\"moduleSequenceNumber\":38209,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"avmnite-02h\",\"lexo-corp\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":47,\"hackDifficulty\":47,\"minDifficulty\":16,\"moneyAvailable\":341354634,\"moneyMax\":8533865850,\"numOpenPortsRequired\":3,\"openPortCount\":4,\"requiredHackingSkill\":444,\"serverGrowth\":58}},\"syscore\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"syscore\",\"httpPortOpen\":true,\"ip\":\"66.6.5.1\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"SysCore Securities\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"avmnite-02h\",\"rho-construction\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":62,\"hackDifficulty\":62,\"minDifficulty\":21,\"moneyAvailable\":461850511,\"moneyMax\":11546262775,\"numOpenPortsRequired\":4,\"openPortCount\":5,\"requiredHackingSkill\":619,\"serverGrowth\":60}},\"catalyst\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"catalyst\",\"httpPortOpen\":true,\"ip\":\"80.3.1.1\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"tensions-in-tech-race.lit\"],\"organizationName\":\"Catalyst Ventures\",\"programs\":[],\"ramUsed\":15.3,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omega-net\",9,21326.47421523505,\"837c21e0-4881-4ef5-8da5-894e86210bd0\"],\"dataMap\":{},\"filename\":\"hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":4.210000000000002,\"pid\":2473,\"ramUsage\":1.7,\"server\":\"catalyst\",\"threads\":9,\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:https://danielyxie.github.io/449cea64-4fa9-4382-81f8-80d03f0f3e77\",\"moduleSequenceNumber\":38506}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/export async function main(ns) {\\r\\n    const target = ns.args[0]\\r\\n    const threads = ns.args[1]\\r\\n    const delay = ns.args[2]\\r\\n  \\r\\n    if (delay && delay > 0) {\\r\\n      await ns.sleep(delay)\\r\\n    }\\r\\n  \\r\\n    ns.print(`Starting operation: hack on ${target} in ${threads} threads`)\\r\\n    await ns.hack(target, { threads, stock: true })\\r\\n    ns.exit()\\r\\n  }\\r\\n  \",\"filename\":\"hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:https://danielyxie.github.io/449cea64-4fa9-4382-81f8-80d03f0f3e77\",\"moduleSequenceNumber\":38506}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"catalyst\",\"moduleSequenceNumber\":38506,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/export async function main(ns) {\\r\\n    const target = ns.args[0]\\r\\n    const threads = ns.args[1]\\r\\n    const delay = ns.args[2]\\r\\n  \\r\\n    if (delay && delay > 0) {\\r\\n      await ns.sleep(delay)\\r\\n    }\\r\\n  \\r\\n    ns.print(`Starting operation: grow on ${target} in ${threads} threads`)\\r\\n    await ns.grow(target, { threads, stock: true })\\r\\n    ns.exit()\\r\\n  }\\r\\n  \",\"filename\":\"grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:https://danielyxie.github.io/7c69f86d-4d93-4860-99cb-6105a6df3273\",\"moduleSequenceNumber\":38363}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"catalyst\",\"moduleSequenceNumber\":38363,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/export async function main(ns) {\\r\\n    const target = ns.args[0]\\r\\n    const threads = ns.args[1]\\r\\n    const delay = ns.args[2]\\r\\n  \\r\\n    if (delay && delay > 0) {\\r\\n      await ns.sleep(delay)\\r\\n    }\\r\\n  \\r\\n    ns.print(`Starting operation: weaken on ${target} in ${threads} threads`)\\r\\n    await ns.weaken(target, { threads, stock: true })\\r\\n    ns.exit()\\r\\n  }\\r\\n  \",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"catalyst\",\"moduleSequenceNumber\":38233,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"netlink\",\"alpha-ent\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":67,\"hackDifficulty\":67,\"minDifficulty\":22,\"moneyAvailable\":409001302,\"moneyMax\":10225032550,\"numOpenPortsRequired\":3,\"openPortCount\":4,\"requiredHackingSkill\":426,\"serverGrowth\":53}},\"the-hub\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"the-hub\",\"httpPortOpen\":true,\"ip\":\"29.9.4.5\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"The Hub\",\"programs\":[],\"ramUsed\":30.6,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omega-net\",18,21326.47421523505,\"c0e9ee21-a42c-4a12-b43c-d443b33af025\"],\"dataMap\":{},\"filename\":\"hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":4.210000000000002,\"pid\":2482,\"ramUsage\":1.7,\"server\":\"the-hub\",\"threads\":18,\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:https://danielyxie.github.io/00e1058d-34c3-4ac3-8b04-cfc7625cdb9a\",\"moduleSequenceNumber\":38515}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/export async function main(ns) {\\r\\n    const target = ns.args[0]\\r\\n    const threads = ns.args[1]\\r\\n    const delay = ns.args[2]\\r\\n  \\r\\n    if (delay && delay > 0) {\\r\\n      await ns.sleep(delay)\\r\\n    }\\r\\n  \\r\\n    ns.print(`Starting operation: hack on ${target} in ${threads} threads`)\\r\\n    await ns.hack(target, { threads, stock: true })\\r\\n    ns.exit()\\r\\n  }\\r\\n  \",\"filename\":\"hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:https://danielyxie.github.io/00e1058d-34c3-4ac3-8b04-cfc7625cdb9a\",\"moduleSequenceNumber\":38515}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"the-hub\",\"moduleSequenceNumber\":38515,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/export async function main(ns) {\\r\\n    const target = ns.args[0]\\r\\n    const threads = ns.args[1]\\r\\n    const delay = ns.args[2]\\r\\n  \\r\\n    if (delay && delay > 0) {\\r\\n      await ns.sleep(delay)\\r\\n    }\\r\\n  \\r\\n    ns.print(`Starting operation: grow on ${target} in ${threads} threads`)\\r\\n    await ns.grow(target, { threads, stock: true })\\r\\n    ns.exit()\\r\\n  }\\r\\n  \",\"filename\":\"grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:https://danielyxie.github.io/d94d045b-e245-4b26-a163-0351ef0e29ff\",\"moduleSequenceNumber\":38372}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"the-hub\",\"moduleSequenceNumber\":38372,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/export async function main(ns) {\\r\\n    const target = ns.args[0]\\r\\n    const threads = ns.args[1]\\r\\n    const delay = ns.args[2]\\r\\n  \\r\\n    if (delay && delay > 0) {\\r\\n      await ns.sleep(delay)\\r\\n    }\\r\\n  \\r\\n    ns.print(`Starting operation: weaken on ${target} in ${threads} threads`)\\r\\n    await ns.weaken(target, { threads, stock: true })\\r\\n    ns.exit()\\r\\n  }\\r\\n  \",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"the-hub\",\"moduleSequenceNumber\":38191,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"neo-net\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":40,\"hackDifficulty\":97.52800000000002,\"minDifficulty\":13,\"moneyAvailable\":4136115100,\"moneyMax\":4136115100,\"numOpenPortsRequired\":2,\"openPortCount\":4,\"requiredHackingSkill\":300,\"serverGrowth\":47}},\"comptek\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"comptek\",\"httpPortOpen\":true,\"ip\":\"74.0.8.2\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"man-and-machine.lit\"],\"organizationName\":\"CompuTek\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"silver-helix\",\"rothman-uni\",\"zb-institute\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":58,\"hackDifficulty\":58,\"minDifficulty\":19,\"moneyAvailable\":225381964,\"moneyMax\":5634549100,\"numOpenPortsRequired\":3,\"openPortCount\":5,\"requiredHackingSkill\":324,\"serverGrowth\":46}},\"netlink\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"netlink\",\"httpPortOpen\":true,\"ip\":\"19.4.1.2\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[\"simulated-reality.lit\"],\"organizationName\":\"NetLink Technologies\",\"programs\":[],\"ramUsed\":127.5,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omega-net\",75,21326.47421523505,\"72de2e39-2f48-435b-99d3-fc880300e403\"],\"dataMap\":{},\"filename\":\"hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":4.210000000000002,\"pid\":2498,\"ramUsage\":1.7,\"server\":\"netlink\",\"threads\":75,\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:https://danielyxie.github.io/6d130dff-4b2a-4efd-8950-83bd455a2018\",\"moduleSequenceNumber\":38531}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/export async function main(ns) {\\r\\n    const target = ns.args[0]\\r\\n    const threads = ns.args[1]\\r\\n    const delay = ns.args[2]\\r\\n  \\r\\n    if (delay && delay > 0) {\\r\\n      await ns.sleep(delay)\\r\\n    }\\r\\n  \\r\\n    ns.print(`Starting operation: hack on ${target} in ${threads} threads`)\\r\\n    await ns.hack(target, { threads, stock: true })\\r\\n    ns.exit()\\r\\n  }\\r\\n  \",\"filename\":\"hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:https://danielyxie.github.io/6d130dff-4b2a-4efd-8950-83bd455a2018\",\"moduleSequenceNumber\":38531}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"netlink\",\"moduleSequenceNumber\":38531,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/export async function main(ns) {\\r\\n    const target = ns.args[0]\\r\\n    const threads = ns.args[1]\\r\\n    const delay = ns.args[2]\\r\\n  \\r\\n    if (delay && delay > 0) {\\r\\n      await ns.sleep(delay)\\r\\n    }\\r\\n  \\r\\n    ns.print(`Starting operation: grow on ${target} in ${threads} threads`)\\r\\n    await ns.grow(target, { threads, stock: true })\\r\\n    ns.exit()\\r\\n  }\\r\\n  \",\"filename\":\"grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:https://danielyxie.github.io/e00535fb-9f13-46f1-8502-1fe586a87623\",\"moduleSequenceNumber\":38388}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"netlink\",\"moduleSequenceNumber\":38388,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/export async function main(ns) {\\r\\n    const target = ns.args[0]\\r\\n    const threads = ns.args[1]\\r\\n    const delay = ns.args[2]\\r\\n  \\r\\n    if (delay && delay > 0) {\\r\\n      await ns.sleep(delay)\\r\\n    }\\r\\n  \\r\\n    ns.print(`Starting operation: weaken on ${target} in ${threads} threads`)\\r\\n    await ns.weaken(target, { threads, stock: true })\\r\\n    ns.exit()\\r\\n  }\\r\\n  \",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"netlink\",\"moduleSequenceNumber\":38203,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"silver-helix\",\"catalyst\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":60,\"hackDifficulty\":60,\"minDifficulty\":20,\"moneyAvailable\":275000000,\"moneyMax\":6875000000,\"numOpenPortsRequired\":3,\"openPortCount\":4,\"requiredHackingSkill\":402,\"serverGrowth\":58}},\"johnson-ortho\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"johnson-ortho\",\"httpPortOpen\":true,\"ip\":\"80.4.2.5\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Johnson Orthopedics\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"neo-net\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":47,\"hackDifficulty\":47,\"minDifficulty\":16,\"moneyAvailable\":76750896,\"moneyMax\":1918772400,\"numOpenPortsRequired\":2,\"openPortCount\":5,\"requiredHackingSkill\":284,\"serverGrowth\":59}},\"n00dles\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"n00dles\",\"httpPortOpen\":false,\"ip\":\"97.1.8.5\",\"isConnectedTo\":false,\"maxRam\":4,\"messages\":[],\"organizationName\":\"Noodle Bar\",\"programs\":[],\"ramUsed\":3.4,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omega-net\",2,21326.47421523505,\"c63e5d27-c244-4731-9507-6186d3d19e8e\"],\"dataMap\":{},\"filename\":\"hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":4.210000000000002,\"pid\":2464,\"ramUsage\":1.7,\"server\":\"n00dles\",\"threads\":2,\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:https://danielyxie.github.io/4936e335-fe64-42a9-8238-5ae0179c80d4\",\"moduleSequenceNumber\":38497}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/export async function main(ns) {\\r\\n    const target = ns.args[0]\\r\\n    const threads = ns.args[1]\\r\\n    const delay = ns.args[2]\\r\\n  \\r\\n    if (delay && delay > 0) {\\r\\n      await ns.sleep(delay)\\r\\n    }\\r\\n  \\r\\n    ns.print(`Starting operation: hack on ${target} in ${threads} threads`)\\r\\n    await ns.hack(target, { threads, stock: true })\\r\\n    ns.exit()\\r\\n  }\\r\\n  \",\"filename\":\"hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:https://danielyxie.github.io/4936e335-fe64-42a9-8238-5ae0179c80d4\",\"moduleSequenceNumber\":38497}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"n00dles\",\"moduleSequenceNumber\":38497,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/export async function main(ns) {\\r\\n    const target = ns.args[0]\\r\\n    const threads = ns.args[1]\\r\\n    const delay = ns.args[2]\\r\\n  \\r\\n    if (delay && delay > 0) {\\r\\n      await ns.sleep(delay)\\r\\n    }\\r\\n  \\r\\n    ns.print(`Starting operation: grow on ${target} in ${threads} threads`)\\r\\n    await ns.grow(target, { threads, stock: true })\\r\\n    ns.exit()\\r\\n  }\\r\\n  \",\"filename\":\"grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:https://danielyxie.github.io/9a70a854-ff87-4dd1-9b89-f6a93b58c348\",\"moduleSequenceNumber\":38354}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"n00dles\",\"moduleSequenceNumber\":38354,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/export async function main(ns) {\\r\\n    const target = ns.args[0]\\r\\n    const threads = ns.args[1]\\r\\n    const delay = ns.args[2]\\r\\n  \\r\\n    if (delay && delay > 0) {\\r\\n      await ns.sleep(delay)\\r\\n    }\\r\\n  \\r\\n    ns.print(`Starting operation: weaken on ${target} in ${threads} threads`)\\r\\n    await ns.weaken(target, { threads, stock: true })\\r\\n    ns.exit()\\r\\n  }\\r\\n  \",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"n00dles\",\"moduleSequenceNumber\":37951,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":70000,\"moneyMax\":1750000,\"numOpenPortsRequired\":0,\"openPortCount\":1,\"requiredHackingSkill\":1,\"serverGrowth\":3000}},\"foodnstuff\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"foodnstuff\",\"httpPortOpen\":false,\"ip\":\"17.2.6.7\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"sector-12-crime.lit\"],\"organizationName\":\"FoodNStuff\",\"programs\":[],\"ramUsed\":15.3,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omega-net\",9,21326.47421523505,\"bd969e3b-0bca-454f-a9ed-4b738d15c6aa\"],\"dataMap\":{},\"filename\":\"hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":4.210000000000002,\"pid\":2467,\"ramUsage\":1.7,\"server\":\"foodnstuff\",\"threads\":9,\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:https://danielyxie.github.io/554a74fe-b2dc-4743-9d86-7988856554e6\",\"moduleSequenceNumber\":38500}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/export async function main(ns) {\\r\\n    const target = ns.args[0]\\r\\n    const threads = ns.args[1]\\r\\n    const delay = ns.args[2]\\r\\n  \\r\\n    if (delay && delay > 0) {\\r\\n      await ns.sleep(delay)\\r\\n    }\\r\\n  \\r\\n    ns.print(`Starting operation: hack on ${target} in ${threads} threads`)\\r\\n    await ns.hack(target, { threads, stock: true })\\r\\n    ns.exit()\\r\\n  }\\r\\n  \",\"filename\":\"hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:https://danielyxie.github.io/554a74fe-b2dc-4743-9d86-7988856554e6\",\"moduleSequenceNumber\":38500}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"foodnstuff\",\"moduleSequenceNumber\":38500,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/export async function main(ns) {\\r\\n    const target = ns.args[0]\\r\\n    const threads = ns.args[1]\\r\\n    const delay = ns.args[2]\\r\\n  \\r\\n    if (delay && delay > 0) {\\r\\n      await ns.sleep(delay)\\r\\n    }\\r\\n  \\r\\n    ns.print(`Starting operation: grow on ${target} in ${threads} threads`)\\r\\n    await ns.grow(target, { threads, stock: true })\\r\\n    ns.exit()\\r\\n  }\\r\\n  \",\"filename\":\"grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:https://danielyxie.github.io/22d7eb8f-f1a9-4758-b631-cfa2151caa6d\",\"moduleSequenceNumber\":38357}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"foodnstuff\",\"moduleSequenceNumber\":38357,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/export async function main(ns) {\\r\\n    const target = ns.args[0]\\r\\n    const threads = ns.args[1]\\r\\n    const delay = ns.args[2]\\r\\n  \\r\\n    if (delay && delay > 0) {\\r\\n      await ns.sleep(delay)\\r\\n    }\\r\\n  \\r\\n    ns.print(`Starting operation: weaken on ${target} in ${threads} threads`)\\r\\n    await ns.weaken(target, { threads, stock: true })\\r\\n    ns.exit()\\r\\n  }\\r\\n  \",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"foodnstuff\",\"moduleSequenceNumber\":37957,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"home\",\"max-hardware\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":10,\"hackDifficulty\":3,\"minDifficulty\":3,\"moneyAvailable\":6097733.201461373,\"moneyMax\":50000000,\"numOpenPortsRequired\":0,\"openPortCount\":1,\"requiredHackingSkill\":1,\"serverGrowth\":5}},\"sigma-cosmetics\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"sigma-cosmetics\",\"httpPortOpen\":false,\"ip\":\"18.4.7.3\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Sigma Cosmetics\",\"programs\":[],\"ramUsed\":15.3,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omega-net\",9,21326.47421523505,\"74c68937-8075-46ea-ade0-699651d59ccf\"],\"dataMap\":{},\"filename\":\"hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":4.210000000000002,\"pid\":2468,\"ramUsage\":1.7,\"server\":\"sigma-cosmetics\",\"threads\":9,\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:https://danielyxie.github.io/fa564021-76b7-4e26-a78d-4002f54c430f\",\"moduleSequenceNumber\":38501}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/export async function main(ns) {\\r\\n    const target = ns.args[0]\\r\\n    const threads = ns.args[1]\\r\\n    const delay = ns.args[2]\\r\\n  \\r\\n    if (delay && delay > 0) {\\r\\n      await ns.sleep(delay)\\r\\n    }\\r\\n  \\r\\n    ns.print(`Starting operation: hack on ${target} in ${threads} threads`)\\r\\n    await ns.hack(target, { threads, stock: true })\\r\\n    ns.exit()\\r\\n  }\\r\\n  \",\"filename\":\"hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:https://danielyxie.github.io/fa564021-76b7-4e26-a78d-4002f54c430f\",\"moduleSequenceNumber\":38501}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"sigma-cosmetics\",\"moduleSequenceNumber\":38501,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/export async function main(ns) {\\r\\n    const target = ns.args[0]\\r\\n    const threads = ns.args[1]\\r\\n    const delay = ns.args[2]\\r\\n  \\r\\n    if (delay && delay > 0) {\\r\\n      await ns.sleep(delay)\\r\\n    }\\r\\n  \\r\\n    ns.print(`Starting operation: grow on ${target} in ${threads} threads`)\\r\\n    await ns.grow(target, { threads, stock: true })\\r\\n    ns.exit()\\r\\n  }\\r\\n  \",\"filename\":\"grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:https://danielyxie.github.io/ab85f7a2-21c6-40a3-8bbb-46f143414cc0\",\"moduleSequenceNumber\":38358}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"sigma-cosmetics\",\"moduleSequenceNumber\":38358,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/export async function main(ns) {\\r\\n    const target = ns.args[0]\\r\\n    const threads = ns.args[1]\\r\\n    const delay = ns.args[2]\\r\\n  \\r\\n    if (delay && delay > 0) {\\r\\n      await ns.sleep(delay)\\r\\n    }\\r\\n  \\r\\n    ns.print(`Starting operation: weaken on ${target} in ${threads} threads`)\\r\\n    await ns.weaken(target, { threads, stock: true })\\r\\n    ns.exit()\\r\\n  }\\r\\n  \",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"sigma-cosmetics\",\"moduleSequenceNumber\":37963,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":10,\"hackDifficulty\":10,\"minDifficulty\":3,\"moneyAvailable\":2300000,\"moneyMax\":57500000,\"numOpenPortsRequired\":0,\"openPortCount\":1,\"requiredHackingSkill\":5,\"serverGrowth\":10}},\"joesguns\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"joesguns\",\"httpPortOpen\":false,\"ip\":\"23.4.5.9\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Joe's Guns\",\"programs\":[],\"ramUsed\":15.3,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omega-net\",9,21326.47421523505,\"c00c0321-67ed-4099-af8c-e55df0697f33\"],\"dataMap\":{},\"filename\":\"hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":4.210000000000002,\"pid\":2469,\"ramUsage\":1.7,\"server\":\"joesguns\",\"threads\":9,\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:https://danielyxie.github.io/856c5d59-bb0c-4700-91ea-c37719b18b16\",\"moduleSequenceNumber\":38502}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/export async function main(ns) {\\r\\n    const target = ns.args[0]\\r\\n    const threads = ns.args[1]\\r\\n    const delay = ns.args[2]\\r\\n  \\r\\n    if (delay && delay > 0) {\\r\\n      await ns.sleep(delay)\\r\\n    }\\r\\n  \\r\\n    ns.print(`Starting operation: hack on ${target} in ${threads} threads`)\\r\\n    await ns.hack(target, { threads, stock: true })\\r\\n    ns.exit()\\r\\n  }\\r\\n  \",\"filename\":\"hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:https://danielyxie.github.io/856c5d59-bb0c-4700-91ea-c37719b18b16\",\"moduleSequenceNumber\":38502}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"joesguns\",\"moduleSequenceNumber\":38502,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/export async function main(ns) {\\r\\n    const target = ns.args[0]\\r\\n    const threads = ns.args[1]\\r\\n    const delay = ns.args[2]\\r\\n  \\r\\n    if (delay && delay > 0) {\\r\\n      await ns.sleep(delay)\\r\\n    }\\r\\n  \\r\\n    ns.print(`Starting operation: grow on ${target} in ${threads} threads`)\\r\\n    await ns.grow(target, { threads, stock: true })\\r\\n    ns.exit()\\r\\n  }\\r\\n  \",\"filename\":\"grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:https://danielyxie.github.io/6a71cf70-b625-47cd-98ec-eeb1d233c3f0\",\"moduleSequenceNumber\":38359}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"joesguns\",\"moduleSequenceNumber\":38359,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/export async function main(ns) {\\r\\n    const target = ns.args[0]\\r\\n    const threads = ns.args[1]\\r\\n    const delay = ns.args[2]\\r\\n  \\r\\n    if (delay && delay > 0) {\\r\\n      await ns.sleep(delay)\\r\\n    }\\r\\n  \\r\\n    ns.print(`Starting operation: weaken on ${target} in ${threads} threads`)\\r\\n    await ns.weaken(target, { threads, stock: true })\\r\\n    ns.exit()\\r\\n  }\\r\\n  \",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"joesguns\",\"moduleSequenceNumber\":37969,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"home\",\"CSEC\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":15,\"hackDifficulty\":15,\"minDifficulty\":5,\"moneyAvailable\":2500000,\"moneyMax\":62500000,\"numOpenPortsRequired\":0,\"openPortCount\":1,\"requiredHackingSkill\":10,\"serverGrowth\":20}},\"zer0\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"zer0\",\"httpPortOpen\":false,\"ip\":\"98.7.5.0\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"ZER0 Nightclub\",\"programs\":[],\"ramUsed\":30.6,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omega-net\",18,21326.47421523505,\"94447864-996d-4c3e-ab49-16b2a211d0b6\"],\"dataMap\":{},\"filename\":\"hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":4.210000000000002,\"pid\":2478,\"ramUsage\":1.7,\"server\":\"zer0\",\"threads\":18,\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:https://danielyxie.github.io/86849126-1363-4ca4-9621-d87d4722b6c0\",\"moduleSequenceNumber\":38511}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/export async function main(ns) {\\r\\n    const target = ns.args[0]\\r\\n    const threads = ns.args[1]\\r\\n    const delay = ns.args[2]\\r\\n  \\r\\n    if (delay && delay > 0) {\\r\\n      await ns.sleep(delay)\\r\\n    }\\r\\n  \\r\\n    ns.print(`Starting operation: hack on ${target} in ${threads} threads`)\\r\\n    await ns.hack(target, { threads, stock: true })\\r\\n    ns.exit()\\r\\n  }\\r\\n  \",\"filename\":\"hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:https://danielyxie.github.io/86849126-1363-4ca4-9621-d87d4722b6c0\",\"moduleSequenceNumber\":38511}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"zer0\",\"moduleSequenceNumber\":38511,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/export async function main(ns) {\\r\\n    const target = ns.args[0]\\r\\n    const threads = ns.args[1]\\r\\n    const delay = ns.args[2]\\r\\n  \\r\\n    if (delay && delay > 0) {\\r\\n      await ns.sleep(delay)\\r\\n    }\\r\\n  \\r\\n    ns.print(`Starting operation: grow on ${target} in ${threads} threads`)\\r\\n    await ns.grow(target, { threads, stock: true })\\r\\n    ns.exit()\\r\\n  }\\r\\n  \",\"filename\":\"grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:https://danielyxie.github.io/6d369e8a-84dd-4bc3-94e2-b0119aab03e0\",\"moduleSequenceNumber\":38368}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"zer0\",\"moduleSequenceNumber\":38368,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/export async function main(ns) {\\r\\n    const target = ns.args[0]\\r\\n    const threads = ns.args[1]\\r\\n    const delay = ns.args[2]\\r\\n  \\r\\n    if (delay && delay > 0) {\\r\\n      await ns.sleep(delay)\\r\\n    }\\r\\n  \\r\\n    ns.print(`Starting operation: weaken on ${target} in ${threads} threads`)\\r\\n    await ns.weaken(target, { threads, stock: true })\\r\\n    ns.exit()\\r\\n  }\\r\\n  \",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"zer0\",\"moduleSequenceNumber\":38161,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"iron-gym\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":25,\"hackDifficulty\":25,\"minDifficulty\":8,\"moneyAvailable\":7500000,\"moneyMax\":187500000,\"numOpenPortsRequired\":1,\"openPortCount\":1,\"requiredHackingSkill\":75,\"serverGrowth\":40}},\"nectar-net\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"nectar-net\",\"httpPortOpen\":false,\"ip\":\"98.4.2.3\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Nectar Nightclub Network\",\"programs\":[],\"ramUsed\":15.3,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omega-net\",9,21326.47421523505,\"a44ca38a-34ff-4309-b98b-0325f1d3c58f\"],\"dataMap\":{},\"filename\":\"hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":4.210000000000002,\"pid\":2472,\"ramUsage\":1.7,\"server\":\"nectar-net\",\"threads\":9,\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:https://danielyxie.github.io/31153f58-5c5d-4c3b-a906-632e0816621b\",\"moduleSequenceNumber\":38505}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/export async function main(ns) {\\r\\n    const target = ns.args[0]\\r\\n    const threads = ns.args[1]\\r\\n    const delay = ns.args[2]\\r\\n  \\r\\n    if (delay && delay > 0) {\\r\\n      await ns.sleep(delay)\\r\\n    }\\r\\n  \\r\\n    ns.print(`Starting operation: hack on ${target} in ${threads} threads`)\\r\\n    await ns.hack(target, { threads, stock: true })\\r\\n    ns.exit()\\r\\n  }\\r\\n  \",\"filename\":\"hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:https://danielyxie.github.io/31153f58-5c5d-4c3b-a906-632e0816621b\",\"moduleSequenceNumber\":38505}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"nectar-net\",\"moduleSequenceNumber\":38505,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/export async function main(ns) {\\r\\n    const target = ns.args[0]\\r\\n    const threads = ns.args[1]\\r\\n    const delay = ns.args[2]\\r\\n  \\r\\n    if (delay && delay > 0) {\\r\\n      await ns.sleep(delay)\\r\\n    }\\r\\n  \\r\\n    ns.print(`Starting operation: grow on ${target} in ${threads} threads`)\\r\\n    await ns.grow(target, { threads, stock: true })\\r\\n    ns.exit()\\r\\n  }\\r\\n  \",\"filename\":\"grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:https://danielyxie.github.io/aee172eb-330f-4d81-a9d5-c05b6062a3c0\",\"moduleSequenceNumber\":38362}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"nectar-net\",\"moduleSequenceNumber\":38362,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/export async function main(ns) {\\r\\n    const target = ns.args[0]\\r\\n    const threads = ns.args[1]\\r\\n    const delay = ns.args[2]\\r\\n  \\r\\n    if (delay && delay > 0) {\\r\\n      await ns.sleep(delay)\\r\\n    }\\r\\n  \\r\\n    ns.print(`Starting operation: weaken on ${target} in ${threads} threads`)\\r\\n    await ns.weaken(target, { threads, stock: true })\\r\\n    ns.exit()\\r\\n  }\\r\\n  \",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"nectar-net\",\"moduleSequenceNumber\":38155,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"harakiri-sushi\",\"neo-net\",\"silver-helix\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":20,\"hackDifficulty\":20,\"minDifficulty\":7,\"moneyAvailable\":2750000,\"moneyMax\":68750000,\"numOpenPortsRequired\":0,\"openPortCount\":1,\"requiredHackingSkill\":20,\"serverGrowth\":25}},\"neo-net\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"neo-net\",\"httpPortOpen\":false,\"ip\":\"60.0.5.9\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"the-hidden-world.lit\"],\"organizationName\":\"Neo Nightclub Network\",\"programs\":[],\"ramUsed\":30.6,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omega-net\",18,21326.47421523505,\"97ab1452-6a46-4cd6-a830-e368f3818fca\"],\"dataMap\":{},\"filename\":\"hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":4.210000000000002,\"pid\":2481,\"ramUsage\":1.7,\"server\":\"neo-net\",\"threads\":18,\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:https://danielyxie.github.io/2766934e-7d2d-4a5b-8ff9-7315f57b3e3e\",\"moduleSequenceNumber\":38514}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/export async function main(ns) {\\r\\n    const target = ns.args[0]\\r\\n    const threads = ns.args[1]\\r\\n    const delay = ns.args[2]\\r\\n  \\r\\n    if (delay && delay > 0) {\\r\\n      await ns.sleep(delay)\\r\\n    }\\r\\n  \\r\\n    ns.print(`Starting operation: hack on ${target} in ${threads} threads`)\\r\\n    await ns.hack(target, { threads, stock: true })\\r\\n    ns.exit()\\r\\n  }\\r\\n  \",\"filename\":\"hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:https://danielyxie.github.io/2766934e-7d2d-4a5b-8ff9-7315f57b3e3e\",\"moduleSequenceNumber\":38514}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"neo-net\",\"moduleSequenceNumber\":38514,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/export async function main(ns) {\\r\\n    const target = ns.args[0]\\r\\n    const threads = ns.args[1]\\r\\n    const delay = ns.args[2]\\r\\n  \\r\\n    if (delay && delay > 0) {\\r\\n      await ns.sleep(delay)\\r\\n    }\\r\\n  \\r\\n    ns.print(`Starting operation: grow on ${target} in ${threads} threads`)\\r\\n    await ns.grow(target, { threads, stock: true })\\r\\n    ns.exit()\\r\\n  }\\r\\n  \",\"filename\":\"grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:https://danielyxie.github.io/8fd96295-7457-496c-acb1-aef30829e321\",\"moduleSequenceNumber\":38371}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"neo-net\",\"moduleSequenceNumber\":38371,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/export async function main(ns) {\\r\\n    const target = ns.args[0]\\r\\n    const threads = ns.args[1]\\r\\n    const delay = ns.args[2]\\r\\n  \\r\\n    if (delay && delay > 0) {\\r\\n      await ns.sleep(delay)\\r\\n    }\\r\\n  \\r\\n    ns.print(`Starting operation: weaken on ${target} in ${threads} threads`)\\r\\n    await ns.weaken(target, { threads, stock: true })\\r\\n    ns.exit()\\r\\n  }\\r\\n  \",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"neo-net\",\"moduleSequenceNumber\":38179,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"nectar-net\",\"the-hub\",\"johnson-ortho\",\"crush-fitness\",\"avmnite-02h\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":25,\"hackDifficulty\":25,\"minDifficulty\":8,\"moneyAvailable\":5000000,\"moneyMax\":125000000,\"numOpenPortsRequired\":1,\"openPortCount\":1,\"requiredHackingSkill\":50,\"serverGrowth\":25}},\"silver-helix\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"silver-helix\",\"httpPortOpen\":true,\"ip\":\"46.8.0.9\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"new-triads.lit\"],\"organizationName\":\"Silver Helix\",\"programs\":[],\"ramUsed\":62.9,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omega-net\",37,21326.47421523505,\"77432043-b393-4ae3-8316-7cebedacd9ae\"],\"dataMap\":{},\"filename\":\"hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":4.210000000000002,\"pid\":2487,\"ramUsage\":1.7,\"server\":\"silver-helix\",\"threads\":37,\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:https://danielyxie.github.io/6b77a890-4c49-44a9-9d20-8f9918d4aa7e\",\"moduleSequenceNumber\":38520}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/export async function main(ns) {\\r\\n    const target = ns.args[0]\\r\\n    const threads = ns.args[1]\\r\\n    const delay = ns.args[2]\\r\\n  \\r\\n    if (delay && delay > 0) {\\r\\n      await ns.sleep(delay)\\r\\n    }\\r\\n  \\r\\n    ns.print(`Starting operation: hack on ${target} in ${threads} threads`)\\r\\n    await ns.hack(target, { threads, stock: true })\\r\\n    ns.exit()\\r\\n  }\\r\\n  \",\"filename\":\"hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:https://danielyxie.github.io/6b77a890-4c49-44a9-9d20-8f9918d4aa7e\",\"moduleSequenceNumber\":38520}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"silver-helix\",\"moduleSequenceNumber\":38520,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/export async function main(ns) {\\r\\n    const target = ns.args[0]\\r\\n    const threads = ns.args[1]\\r\\n    const delay = ns.args[2]\\r\\n  \\r\\n    if (delay && delay > 0) {\\r\\n      await ns.sleep(delay)\\r\\n    }\\r\\n  \\r\\n    ns.print(`Starting operation: grow on ${target} in ${threads} threads`)\\r\\n    await ns.grow(target, { threads, stock: true })\\r\\n    ns.exit()\\r\\n  }\\r\\n  \",\"filename\":\"grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:https://danielyxie.github.io/83987f3e-abff-4399-a19b-6f441a75b9c8\",\"moduleSequenceNumber\":38377}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"silver-helix\",\"moduleSequenceNumber\":38377,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/export async function main(ns) {\\r\\n    const target = ns.args[0]\\r\\n    const threads = ns.args[1]\\r\\n    const delay = ns.args[2]\\r\\n  \\r\\n    if (delay && delay > 0) {\\r\\n      await ns.sleep(delay)\\r\\n    }\\r\\n  \\r\\n    ns.print(`Starting operation: weaken on ${target} in ${threads} threads`)\\r\\n    await ns.weaken(target, { threads, stock: true })\\r\\n    ns.exit()\\r\\n  }\\r\\n  \",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"silver-helix\",\"moduleSequenceNumber\":38185,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"nectar-net\",\"comptek\",\"netlink\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":30,\"hackDifficulty\":30,\"minDifficulty\":10,\"moneyAvailable\":45000000,\"moneyMax\":1125000000,\"numOpenPortsRequired\":2,\"openPortCount\":4,\"requiredHackingSkill\":150,\"serverGrowth\":30}},\"hong-fang-tea\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"hong-fang-tea\",\"httpPortOpen\":false,\"ip\":\"99.0.2.4\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"brighter-than-the-sun.lit\"],\"organizationName\":\"HongFang Teahouse\",\"programs\":[],\"ramUsed\":15.3,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omega-net\",9,21326.47421523505,\"a7b92a78-69de-402a-83b8-0627fa33bf15\"],\"dataMap\":{},\"filename\":\"hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":4.210000000000002,\"pid\":2470,\"ramUsage\":1.7,\"server\":\"hong-fang-tea\",\"threads\":9,\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:https://danielyxie.github.io/f1361edb-24ea-4532-b227-93e1b46cbee7\",\"moduleSequenceNumber\":38503}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/export async function main(ns) {\\r\\n    const target = ns.args[0]\\r\\n    const threads = ns.args[1]\\r\\n    const delay = ns.args[2]\\r\\n  \\r\\n    if (delay && delay > 0) {\\r\\n      await ns.sleep(delay)\\r\\n    }\\r\\n  \\r\\n    ns.print(`Starting operation: hack on ${target} in ${threads} threads`)\\r\\n    await ns.hack(target, { threads, stock: true })\\r\\n    ns.exit()\\r\\n  }\\r\\n  \",\"filename\":\"hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:https://danielyxie.github.io/f1361edb-24ea-4532-b227-93e1b46cbee7\",\"moduleSequenceNumber\":38503}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"hong-fang-tea\",\"moduleSequenceNumber\":38503,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/export async function main(ns) {\\r\\n    const target = ns.args[0]\\r\\n    const threads = ns.args[1]\\r\\n    const delay = ns.args[2]\\r\\n  \\r\\n    if (delay && delay > 0) {\\r\\n      await ns.sleep(delay)\\r\\n    }\\r\\n  \\r\\n    ns.print(`Starting operation: grow on ${target} in ${threads} threads`)\\r\\n    await ns.grow(target, { threads, stock: true })\\r\\n    ns.exit()\\r\\n  }\\r\\n  \",\"filename\":\"grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:https://danielyxie.github.io/ed57f334-d0c1-4aba-ab60-0ca454b30524\",\"moduleSequenceNumber\":38360}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"hong-fang-tea\",\"moduleSequenceNumber\":38360,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/export async function main(ns) {\\r\\n    const target = ns.args[0]\\r\\n    const threads = ns.args[1]\\r\\n    const delay = ns.args[2]\\r\\n  \\r\\n    if (delay && delay > 0) {\\r\\n      await ns.sleep(delay)\\r\\n    }\\r\\n  \\r\\n    ns.print(`Starting operation: weaken on ${target} in ${threads} threads`)\\r\\n    await ns.weaken(target, { threads, stock: true })\\r\\n    ns.exit()\\r\\n  }\\r\\n  \",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"hong-fang-tea\",\"moduleSequenceNumber\":37975,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":15,\"hackDifficulty\":15,\"minDifficulty\":5,\"moneyAvailable\":3000000,\"moneyMax\":75000000,\"numOpenPortsRequired\":0,\"openPortCount\":1,\"requiredHackingSkill\":30,\"serverGrowth\":20}},\"harakiri-sushi\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"harakiri-sushi\",\"httpPortOpen\":false,\"ip\":\"46.1.5.6\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"HaraKiri Sushi Bar Network\",\"programs\":[],\"ramUsed\":15.3,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omega-net\",9,21326.47421523505,\"79285bac-1341-4464-9372-dc1fffaf5e27\"],\"dataMap\":{},\"filename\":\"hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":4.210000000000002,\"pid\":2471,\"ramUsage\":1.7,\"server\":\"harakiri-sushi\",\"threads\":9,\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:https://danielyxie.github.io/cae98354-6e31-4c29-84d8-3595070dd0f9\",\"moduleSequenceNumber\":38504}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/export async function main(ns) {\\r\\n    const target = ns.args[0]\\r\\n    const threads = ns.args[1]\\r\\n    const delay = ns.args[2]\\r\\n  \\r\\n    if (delay && delay > 0) {\\r\\n      await ns.sleep(delay)\\r\\n    }\\r\\n  \\r\\n    ns.print(`Starting operation: hack on ${target} in ${threads} threads`)\\r\\n    await ns.hack(target, { threads, stock: true })\\r\\n    ns.exit()\\r\\n  }\\r\\n  \",\"filename\":\"hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:https://danielyxie.github.io/cae98354-6e31-4c29-84d8-3595070dd0f9\",\"moduleSequenceNumber\":38504}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"harakiri-sushi\",\"moduleSequenceNumber\":38504,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/export async function main(ns) {\\r\\n    const target = ns.args[0]\\r\\n    const threads = ns.args[1]\\r\\n    const delay = ns.args[2]\\r\\n  \\r\\n    if (delay && delay > 0) {\\r\\n      await ns.sleep(delay)\\r\\n    }\\r\\n  \\r\\n    ns.print(`Starting operation: grow on ${target} in ${threads} threads`)\\r\\n    await ns.grow(target, { threads, stock: true })\\r\\n    ns.exit()\\r\\n  }\\r\\n  \",\"filename\":\"grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:https://danielyxie.github.io/72c32123-9ac6-414a-ae7f-bb53f3557bdc\",\"moduleSequenceNumber\":38361}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"harakiri-sushi\",\"moduleSequenceNumber\":38361,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/export async function main(ns) {\\r\\n    const target = ns.args[0]\\r\\n    const threads = ns.args[1]\\r\\n    const delay = ns.args[2]\\r\\n  \\r\\n    if (delay && delay > 0) {\\r\\n      await ns.sleep(delay)\\r\\n    }\\r\\n  \\r\\n    ns.print(`Starting operation: weaken on ${target} in ${threads} threads`)\\r\\n    await ns.weaken(target, { threads, stock: true })\\r\\n    ns.exit()\\r\\n  }\\r\\n  \",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"harakiri-sushi\",\"moduleSequenceNumber\":37981,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"home\",\"nectar-net\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":15,\"hackDifficulty\":15,\"minDifficulty\":5,\"moneyAvailable\":4000000,\"moneyMax\":100000000,\"numOpenPortsRequired\":0,\"openPortCount\":1,\"requiredHackingSkill\":40,\"serverGrowth\":40}},\"phantasy\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"phantasy\",\"httpPortOpen\":true,\"ip\":\"96.5.3.8\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Phantasy Club\",\"programs\":[],\"ramUsed\":30.6,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omega-net\",18,21326.47421523505,\"e0925cf8-78ff-4a45-89c6-d2fb0b23c1e3\"],\"dataMap\":{},\"filename\":\"hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":4.210000000000002,\"pid\":2479,\"ramUsage\":1.7,\"server\":\"phantasy\",\"threads\":18,\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:https://danielyxie.github.io/c1b47245-971d-42d7-8f6c-7eacd02bdd0a\",\"moduleSequenceNumber\":38512}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/export async function main(ns) {\\r\\n    const target = ns.args[0]\\r\\n    const threads = ns.args[1]\\r\\n    const delay = ns.args[2]\\r\\n  \\r\\n    if (delay && delay > 0) {\\r\\n      await ns.sleep(delay)\\r\\n    }\\r\\n  \\r\\n    ns.print(`Starting operation: hack on ${target} in ${threads} threads`)\\r\\n    await ns.hack(target, { threads, stock: true })\\r\\n    ns.exit()\\r\\n  }\\r\\n  \",\"filename\":\"hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:https://danielyxie.github.io/c1b47245-971d-42d7-8f6c-7eacd02bdd0a\",\"moduleSequenceNumber\":38512}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"phantasy\",\"moduleSequenceNumber\":38512,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/export async function main(ns) {\\r\\n    const target = ns.args[0]\\r\\n    const threads = ns.args[1]\\r\\n    const delay = ns.args[2]\\r\\n  \\r\\n    if (delay && delay > 0) {\\r\\n      await ns.sleep(delay)\\r\\n    }\\r\\n  \\r\\n    ns.print(`Starting operation: grow on ${target} in ${threads} threads`)\\r\\n    await ns.grow(target, { threads, stock: true })\\r\\n    ns.exit()\\r\\n  }\\r\\n  \",\"filename\":\"grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:https://danielyxie.github.io/afc10012-cda5-4da1-9b36-bec3e9783e24\",\"moduleSequenceNumber\":38369}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"phantasy\",\"moduleSequenceNumber\":38369,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/export async function main(ns) {\\r\\n    const target = ns.args[0]\\r\\n    const threads = ns.args[1]\\r\\n    const delay = ns.args[2]\\r\\n  \\r\\n    if (delay && delay > 0) {\\r\\n      await ns.sleep(delay)\\r\\n    }\\r\\n  \\r\\n    ns.print(`Starting operation: weaken on ${target} in ${threads} threads`)\\r\\n    await ns.weaken(target, { threads, stock: true })\\r\\n    ns.exit()\\r\\n  }\\r\\n  \",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"phantasy\",\"moduleSequenceNumber\":38167,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"max-hardware\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":20,\"hackDifficulty\":20,\"minDifficulty\":7,\"moneyAvailable\":24000000,\"moneyMax\":600000000,\"numOpenPortsRequired\":2,\"openPortCount\":4,\"requiredHackingSkill\":100,\"serverGrowth\":35}},\"max-hardware\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"max-hardware\",\"httpPortOpen\":false,\"ip\":\"96.5.2.0\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Max Hardware Store\",\"programs\":[],\"ramUsed\":30.6,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omega-net\",18,21326.47421523505,\"effa753f-cc43-4f41-840b-8cdc22d57842\"],\"dataMap\":{},\"filename\":\"hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":4.210000000000002,\"pid\":2477,\"ramUsage\":1.7,\"server\":\"max-hardware\",\"threads\":18,\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:https://danielyxie.github.io/9bda2ac5-18d1-4a49-8d01-2fa22118f8c5\",\"moduleSequenceNumber\":38510}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/export async function main(ns) {\\r\\n    const target = ns.args[0]\\r\\n    const threads = ns.args[1]\\r\\n    const delay = ns.args[2]\\r\\n  \\r\\n    if (delay && delay > 0) {\\r\\n      await ns.sleep(delay)\\r\\n    }\\r\\n  \\r\\n    ns.print(`Starting operation: hack on ${target} in ${threads} threads`)\\r\\n    await ns.hack(target, { threads, stock: true })\\r\\n    ns.exit()\\r\\n  }\\r\\n  \",\"filename\":\"hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:https://danielyxie.github.io/9bda2ac5-18d1-4a49-8d01-2fa22118f8c5\",\"moduleSequenceNumber\":38510}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"max-hardware\",\"moduleSequenceNumber\":38510,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/export async function main(ns) {\\r\\n    const target = ns.args[0]\\r\\n    const threads = ns.args[1]\\r\\n    const delay = ns.args[2]\\r\\n  \\r\\n    if (delay && delay > 0) {\\r\\n      await ns.sleep(delay)\\r\\n    }\\r\\n  \\r\\n    ns.print(`Starting operation: grow on ${target} in ${threads} threads`)\\r\\n    await ns.grow(target, { threads, stock: true })\\r\\n    ns.exit()\\r\\n  }\\r\\n  \",\"filename\":\"grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:https://danielyxie.github.io/6b6b286e-721e-42b1-83fb-39aa66e4bc7c\",\"moduleSequenceNumber\":38367}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"max-hardware\",\"moduleSequenceNumber\":38367,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/export async function main(ns) {\\r\\n    const target = ns.args[0]\\r\\n    const threads = ns.args[1]\\r\\n    const delay = ns.args[2]\\r\\n  \\r\\n    if (delay && delay > 0) {\\r\\n      await ns.sleep(delay)\\r\\n    }\\r\\n  \\r\\n    ns.print(`Starting operation: weaken on ${target} in ${threads} threads`)\\r\\n    await ns.weaken(target, { threads, stock: true })\\r\\n    ns.exit()\\r\\n  }\\r\\n  \",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"max-hardware\",\"moduleSequenceNumber\":38143,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"foodnstuff\",\"phantasy\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":15,\"hackDifficulty\":15,\"minDifficulty\":5,\"moneyAvailable\":10000000,\"moneyMax\":250000000,\"numOpenPortsRequired\":1,\"openPortCount\":1,\"requiredHackingSkill\":80,\"serverGrowth\":30}},\"omega-net\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"omega-net\",\"httpPortOpen\":true,\"ip\":\"17.7.7.0\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"the-new-god.lit\"],\"organizationName\":\"Omega Software\",\"programs\":[],\"ramUsed\":30.6,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omega-net\",18,21326.47421523505,\"19256415-07d6-4004-bba4-41a12db9cd72\"],\"dataMap\":{},\"filename\":\"hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":4.210000000000002,\"pid\":2480,\"ramUsage\":1.7,\"server\":\"omega-net\",\"threads\":18,\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:https://danielyxie.github.io/49230ee9-5dd1-4e3b-a92d-415d582f1297\",\"moduleSequenceNumber\":38513}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/export async function main(ns) {\\r\\n    const target = ns.args[0]\\r\\n    const threads = ns.args[1]\\r\\n    const delay = ns.args[2]\\r\\n  \\r\\n    if (delay && delay > 0) {\\r\\n      await ns.sleep(delay)\\r\\n    }\\r\\n  \\r\\n    ns.print(`Starting operation: hack on ${target} in ${threads} threads`)\\r\\n    await ns.hack(target, { threads, stock: true })\\r\\n    ns.exit()\\r\\n  }\\r\\n  \",\"filename\":\"hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:https://danielyxie.github.io/49230ee9-5dd1-4e3b-a92d-415d582f1297\",\"moduleSequenceNumber\":38513}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"omega-net\",\"moduleSequenceNumber\":38513,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/export async function main(ns) {\\r\\n    const target = ns.args[0]\\r\\n    const threads = ns.args[1]\\r\\n    const delay = ns.args[2]\\r\\n  \\r\\n    if (delay && delay > 0) {\\r\\n      await ns.sleep(delay)\\r\\n    }\\r\\n  \\r\\n    ns.print(`Starting operation: grow on ${target} in ${threads} threads`)\\r\\n    await ns.grow(target, { threads, stock: true })\\r\\n    ns.exit()\\r\\n  }\\r\\n  \",\"filename\":\"grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:https://danielyxie.github.io/c23295c0-44e7-4076-ba6f-f8f5e1ccc2a6\",\"moduleSequenceNumber\":38370}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"omega-net\",\"moduleSequenceNumber\":38370,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/export async function main(ns) {\\r\\n    const target = ns.args[0]\\r\\n    const threads = ns.args[1]\\r\\n    const delay = ns.args[2]\\r\\n  \\r\\n    if (delay && delay > 0) {\\r\\n      await ns.sleep(delay)\\r\\n    }\\r\\n  \\r\\n    ns.print(`Starting operation: weaken on ${target} in ${threads} threads`)\\r\\n    await ns.weaken(target, { threads, stock: true })\\r\\n    ns.exit()\\r\\n  }\\r\\n  \",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"omega-net\",\"moduleSequenceNumber\":38173,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"CSEC\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":30,\"hackDifficulty\":10,\"minDifficulty\":10,\"moneyAvailable\":1609388850,\"moneyMax\":1609388850,\"numOpenPortsRequired\":2,\"openPortCount\":4,\"requiredHackingSkill\":211,\"serverGrowth\":35}},\"crush-fitness\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"crush-fitness\",\"httpPortOpen\":true,\"ip\":\"71.9.8.8\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Crush Fitness\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"neo-net\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":41,\"hackDifficulty\":41,\"minDifficulty\":14,\"moneyAvailable\":43877500,\"moneyMax\":1096937500,\"numOpenPortsRequired\":2,\"openPortCount\":5,\"requiredHackingSkill\":273,\"serverGrowth\":29}},\"iron-gym\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"iron-gym\",\"httpPortOpen\":false,\"ip\":\"22.5.3.5\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Iron Gym Network\",\"programs\":[],\"ramUsed\":30.6,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omega-net\",18,21326.47421523505,\"c7daa3a4-798a-4190-8a5a-7386f4b7ea4b\"],\"dataMap\":{},\"filename\":\"hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":4.210000000000002,\"pid\":2476,\"ramUsage\":1.7,\"server\":\"iron-gym\",\"threads\":18,\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:https://danielyxie.github.io/8bebdf81-a3e5-457d-8ba3-e5cb2abad6bd\",\"moduleSequenceNumber\":38509}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/export async function main(ns) {\\r\\n    const target = ns.args[0]\\r\\n    const threads = ns.args[1]\\r\\n    const delay = ns.args[2]\\r\\n  \\r\\n    if (delay && delay > 0) {\\r\\n      await ns.sleep(delay)\\r\\n    }\\r\\n  \\r\\n    ns.print(`Starting operation: hack on ${target} in ${threads} threads`)\\r\\n    await ns.hack(target, { threads, stock: true })\\r\\n    ns.exit()\\r\\n  }\\r\\n  \",\"filename\":\"hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:https://danielyxie.github.io/8bebdf81-a3e5-457d-8ba3-e5cb2abad6bd\",\"moduleSequenceNumber\":38509}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"iron-gym\",\"moduleSequenceNumber\":38509,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/export async function main(ns) {\\r\\n    const target = ns.args[0]\\r\\n    const threads = ns.args[1]\\r\\n    const delay = ns.args[2]\\r\\n  \\r\\n    if (delay && delay > 0) {\\r\\n      await ns.sleep(delay)\\r\\n    }\\r\\n  \\r\\n    ns.print(`Starting operation: grow on ${target} in ${threads} threads`)\\r\\n    await ns.grow(target, { threads, stock: true })\\r\\n    ns.exit()\\r\\n  }\\r\\n  \",\"filename\":\"grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:https://danielyxie.github.io/aa6dfdb8-066b-4cb2-8558-0bd1a34277de\",\"moduleSequenceNumber\":38366}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"iron-gym\",\"moduleSequenceNumber\":38366,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/export async function main(ns) {\\r\\n    const target = ns.args[0]\\r\\n    const threads = ns.args[1]\\r\\n    const delay = ns.args[2]\\r\\n  \\r\\n    if (delay && delay > 0) {\\r\\n      await ns.sleep(delay)\\r\\n    }\\r\\n  \\r\\n    ns.print(`Starting operation: weaken on ${target} in ${threads} threads`)\\r\\n    await ns.weaken(target, { threads, stock: true })\\r\\n    ns.exit()\\r\\n  }\\r\\n  \",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"iron-gym\",\"moduleSequenceNumber\":37987,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"home\",\"zer0\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":30,\"hackDifficulty\":10,\"minDifficulty\":10,\"moneyAvailable\":71061685.65766968,\"moneyMax\":500000000,\"numOpenPortsRequired\":1,\"openPortCount\":1,\"requiredHackingSkill\":100,\"serverGrowth\":20}},\"millenium-fitness\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"millenium-fitness\",\"httpPortOpen\":true,\"ip\":\"86.2.2.6\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[],\"organizationName\":\"Millenium Fitness Network\",\"programs\":[],\"ramUsed\":127.5,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omega-net\",75,21326.47421523505,\"3b785972-45c5-4587-af7b-55d964b6b3c8\"],\"dataMap\":{},\"filename\":\"hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":4.210000000000002,\"pid\":2500,\"ramUsage\":1.7,\"server\":\"millenium-fitness\",\"threads\":75,\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:https://danielyxie.github.io/df870db8-6bc9-432e-af89-87e03c6153c6\",\"moduleSequenceNumber\":38533}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/export async function main(ns) {\\r\\n    const target = ns.args[0]\\r\\n    const threads = ns.args[1]\\r\\n    const delay = ns.args[2]\\r\\n  \\r\\n    if (delay && delay > 0) {\\r\\n      await ns.sleep(delay)\\r\\n    }\\r\\n  \\r\\n    ns.print(`Starting operation: hack on ${target} in ${threads} threads`)\\r\\n    await ns.hack(target, { threads, stock: true })\\r\\n    ns.exit()\\r\\n  }\\r\\n  \",\"filename\":\"hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:https://danielyxie.github.io/df870db8-6bc9-432e-af89-87e03c6153c6\",\"moduleSequenceNumber\":38533}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"millenium-fitness\",\"moduleSequenceNumber\":38533,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/export async function main(ns) {\\r\\n    const target = ns.args[0]\\r\\n    const threads = ns.args[1]\\r\\n    const delay = ns.args[2]\\r\\n  \\r\\n    if (delay && delay > 0) {\\r\\n      await ns.sleep(delay)\\r\\n    }\\r\\n  \\r\\n    ns.print(`Starting operation: grow on ${target} in ${threads} threads`)\\r\\n    await ns.grow(target, { threads, stock: true })\\r\\n    ns.exit()\\r\\n  }\\r\\n  \",\"filename\":\"grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:https://danielyxie.github.io/ce6135b3-c5bb-49bc-a001-5198a2872c60\",\"moduleSequenceNumber\":38390}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"millenium-fitness\",\"moduleSequenceNumber\":38390,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/export async function main(ns) {\\r\\n    const target = ns.args[0]\\r\\n    const threads = ns.args[1]\\r\\n    const delay = ns.args[2]\\r\\n  \\r\\n    if (delay && delay > 0) {\\r\\n      await ns.sleep(delay)\\r\\n    }\\r\\n  \\r\\n    ns.print(`Starting operation: weaken on ${target} in ${threads} threads`)\\r\\n    await ns.weaken(target, { threads, stock: true })\\r\\n    ns.exit()\\r\\n  }\\r\\n  \",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"millenium-fitness\",\"moduleSequenceNumber\":38257,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"zb-institute\",\"global-pharm\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":48,\"hackDifficulty\":48,\"minDifficulty\":16,\"moneyAvailable\":250000000,\"moneyMax\":6250000000,\"numOpenPortsRequired\":3,\"openPortCount\":4,\"requiredHackingSkill\":520,\"serverGrowth\":44}},\"powerhouse-fitness\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"powerhouse-fitness\",\"httpPortOpen\":true,\"ip\":\"4.4.5.1\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Powerhouse Fitness\",\"programs\":[],\"ramUsed\":15.3,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omega-net\",9,21326.47421523505,\"a757a677-245c-456d-83f7-8bd90e645655\"],\"dataMap\":{},\"filename\":\"hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":4.210000000000002,\"pid\":2475,\"ramUsage\":1.7,\"server\":\"powerhouse-fitness\",\"threads\":9,\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:https://danielyxie.github.io/620ca192-8900-46fc-b1a0-2e5235f1162b\",\"moduleSequenceNumber\":38508}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/export async function main(ns) {\\r\\n    const target = ns.args[0]\\r\\n    const threads = ns.args[1]\\r\\n    const delay = ns.args[2]\\r\\n  \\r\\n    if (delay && delay > 0) {\\r\\n      await ns.sleep(delay)\\r\\n    }\\r\\n  \\r\\n    ns.print(`Starting operation: hack on ${target} in ${threads} threads`)\\r\\n    await ns.hack(target, { threads, stock: true })\\r\\n    ns.exit()\\r\\n  }\\r\\n  \",\"filename\":\"hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:https://danielyxie.github.io/620ca192-8900-46fc-b1a0-2e5235f1162b\",\"moduleSequenceNumber\":38508}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"powerhouse-fitness\",\"moduleSequenceNumber\":38508,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/export async function main(ns) {\\r\\n    const target = ns.args[0]\\r\\n    const threads = ns.args[1]\\r\\n    const delay = ns.args[2]\\r\\n  \\r\\n    if (delay && delay > 0) {\\r\\n      await ns.sleep(delay)\\r\\n    }\\r\\n  \\r\\n    ns.print(`Starting operation: grow on ${target} in ${threads} threads`)\\r\\n    await ns.grow(target, { threads, stock: true })\\r\\n    ns.exit()\\r\\n  }\\r\\n  \",\"filename\":\"grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:https://danielyxie.github.io/dbfc54c2-3329-44d6-a9f3-4429a0d8bd74\",\"moduleSequenceNumber\":38365}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"powerhouse-fitness\",\"moduleSequenceNumber\":38365,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/export async function main(ns) {\\r\\n    const target = ns.args[0]\\r\\n    const threads = ns.args[1]\\r\\n    const delay = ns.args[2]\\r\\n  \\r\\n    if (delay && delay > 0) {\\r\\n      await ns.sleep(delay)\\r\\n    }\\r\\n  \\r\\n    ns.print(`Starting operation: weaken on ${target} in ${threads} threads`)\\r\\n    await ns.weaken(target, { threads, stock: true })\\r\\n    ns.exit()\\r\\n  }\\r\\n  \",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"powerhouse-fitness\",\"moduleSequenceNumber\":38353,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"kuai-gong\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":60,\"hackDifficulty\":60,\"minDifficulty\":20,\"moneyAvailable\":900000000,\"moneyMax\":22500000000,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":980,\"serverGrowth\":51}},\"snap-fitness\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"snap-fitness\",\"httpPortOpen\":true,\"ip\":\"91.8.7.6\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Snap Fitness\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"rho-construction\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":49,\"hackDifficulty\":49,\"minDifficulty\":16,\"moneyAvailable\":450000000,\"moneyMax\":11250000000,\"numOpenPortsRequired\":4,\"openPortCount\":5,\"requiredHackingSkill\":738,\"serverGrowth\":43}},\"run4theh111z\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"run4theh111z\",\"httpPortOpen\":true,\"ip\":\"55.5.8.3\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[\"simulated-reality.lit\",\"the-new-god.lit\"],\"organizationName\":\"The Runners\",\"programs\":[],\"ramUsed\":127.5,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omega-net\",75,21326.47421523505,\"11df8183-40ab-43c9-8bbb-96c4b6da8b42\"],\"dataMap\":{},\"filename\":\"hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":4.210000000000002,\"pid\":2502,\"ramUsage\":1.7,\"server\":\"run4theh111z\",\"threads\":75,\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:https://danielyxie.github.io/33e98b38-5b22-415e-b087-25d84e3ac64e\",\"moduleSequenceNumber\":38535}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/export async function main(ns) {\\r\\n    const target = ns.args[0]\\r\\n    const threads = ns.args[1]\\r\\n    const delay = ns.args[2]\\r\\n  \\r\\n    if (delay && delay > 0) {\\r\\n      await ns.sleep(delay)\\r\\n    }\\r\\n  \\r\\n    ns.print(`Starting operation: hack on ${target} in ${threads} threads`)\\r\\n    await ns.hack(target, { threads, stock: true })\\r\\n    ns.exit()\\r\\n  }\\r\\n  \",\"filename\":\"hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:https://danielyxie.github.io/33e98b38-5b22-415e-b087-25d84e3ac64e\",\"moduleSequenceNumber\":38535}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"run4theh111z\",\"moduleSequenceNumber\":38535,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/export async function main(ns) {\\r\\n    const target = ns.args[0]\\r\\n    const threads = ns.args[1]\\r\\n    const delay = ns.args[2]\\r\\n  \\r\\n    if (delay && delay > 0) {\\r\\n      await ns.sleep(delay)\\r\\n    }\\r\\n  \\r\\n    ns.print(`Starting operation: grow on ${target} in ${threads} threads`)\\r\\n    await ns.grow(target, { threads, stock: true })\\r\\n    ns.exit()\\r\\n  }\\r\\n  \",\"filename\":\"grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:https://danielyxie.github.io/381ba424-2c23-4aa3-b3a1-925a58e7fa5d\",\"moduleSequenceNumber\":38392}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"run4theh111z\",\"moduleSequenceNumber\":38392,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/export async function main(ns) {\\r\\n    const target = ns.args[0]\\r\\n    const threads = ns.args[1]\\r\\n    const delay = ns.args[2]\\r\\n  \\r\\n    if (delay && delay > 0) {\\r\\n      await ns.sleep(delay)\\r\\n    }\\r\\n  \\r\\n    ns.print(`Starting operation: weaken on ${target} in ${threads} threads`)\\r\\n    await ns.weaken(target, { threads, stock: true })\\r\\n    ns.exit()\\r\\n  }\\r\\n  \",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"run4theh111z\",\"moduleSequenceNumber\":38311,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"infocomm\",\"fulcrumtech\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":0,\"hackDifficulty\":0,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":4,\"openPortCount\":4,\"requiredHackingSkill\":527,\"serverGrowth\":0}},\"I.I.I.I\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"I.I.I.I\",\"httpPortOpen\":true,\"ip\":\"56.1.5.6\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[\"democracy-is-dead.lit\"],\"organizationName\":\"I.I.I.I\",\"programs\":[],\"ramUsed\":127.5,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omega-net\",75,21326.47421523505,\"72bcfdce-be88-4783-a51b-494e48019db3\"],\"dataMap\":{},\"filename\":\"hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":4.210000000000002,\"pid\":2499,\"ramUsage\":1.7,\"server\":\"I.I.I.I\",\"threads\":75,\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:https://danielyxie.github.io/bce84b36-1b3b-4ebf-b331-b3b741434760\",\"moduleSequenceNumber\":38532}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/export async function main(ns) {\\r\\n    const target = ns.args[0]\\r\\n    const threads = ns.args[1]\\r\\n    const delay = ns.args[2]\\r\\n  \\r\\n    if (delay && delay > 0) {\\r\\n      await ns.sleep(delay)\\r\\n    }\\r\\n  \\r\\n    ns.print(`Starting operation: hack on ${target} in ${threads} threads`)\\r\\n    await ns.hack(target, { threads, stock: true })\\r\\n    ns.exit()\\r\\n  }\\r\\n  \",\"filename\":\"hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:https://danielyxie.github.io/bce84b36-1b3b-4ebf-b331-b3b741434760\",\"moduleSequenceNumber\":38532}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"I.I.I.I\",\"moduleSequenceNumber\":38532,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/export async function main(ns) {\\r\\n    const target = ns.args[0]\\r\\n    const threads = ns.args[1]\\r\\n    const delay = ns.args[2]\\r\\n  \\r\\n    if (delay && delay > 0) {\\r\\n      await ns.sleep(delay)\\r\\n    }\\r\\n  \\r\\n    ns.print(`Starting operation: grow on ${target} in ${threads} threads`)\\r\\n    await ns.grow(target, { threads, stock: true })\\r\\n    ns.exit()\\r\\n  }\\r\\n  \",\"filename\":\"grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:https://danielyxie.github.io/642a4d9d-c052-4de7-8eb8-3716aa679c90\",\"moduleSequenceNumber\":38389}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"I.I.I.I\",\"moduleSequenceNumber\":38389,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/export async function main(ns) {\\r\\n    const target = ns.args[0]\\r\\n    const threads = ns.args[1]\\r\\n    const delay = ns.args[2]\\r\\n  \\r\\n    if (delay && delay > 0) {\\r\\n      await ns.sleep(delay)\\r\\n    }\\r\\n  \\r\\n    ns.print(`Starting operation: weaken on ${target} in ${threads} threads`)\\r\\n    await ns.weaken(target, { threads, stock: true })\\r\\n    ns.exit()\\r\\n  }\\r\\n  \",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"I.I.I.I\",\"moduleSequenceNumber\":38215,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"avmnite-02h\",\"aevum-police\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":0,\"hackDifficulty\":0,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":3,\"openPortCount\":4,\"requiredHackingSkill\":356,\"serverGrowth\":0}},\"avmnite-02h\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"avmnite-02h\",\"httpPortOpen\":true,\"ip\":\"2.4.4.7\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"democracy-is-dead.lit\"],\"organizationName\":\"NiteSec\",\"programs\":[],\"ramUsed\":62.9,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omega-net\",37,21326.47421523505,\"bfcb59e2-1cc6-4501-abc6-5d0e45ad4090\"],\"dataMap\":{},\"filename\":\"hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":4.210000000000002,\"pid\":2488,\"ramUsage\":1.7,\"server\":\"avmnite-02h\",\"threads\":37,\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:https://danielyxie.github.io/299fcf40-ac09-4b38-868d-b88bf536328a\",\"moduleSequenceNumber\":38521}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/export async function main(ns) {\\r\\n    const target = ns.args[0]\\r\\n    const threads = ns.args[1]\\r\\n    const delay = ns.args[2]\\r\\n  \\r\\n    if (delay && delay > 0) {\\r\\n      await ns.sleep(delay)\\r\\n    }\\r\\n  \\r\\n    ns.print(`Starting operation: hack on ${target} in ${threads} threads`)\\r\\n    await ns.hack(target, { threads, stock: true })\\r\\n    ns.exit()\\r\\n  }\\r\\n  \",\"filename\":\"hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:https://danielyxie.github.io/299fcf40-ac09-4b38-868d-b88bf536328a\",\"moduleSequenceNumber\":38521}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"avmnite-02h\",\"moduleSequenceNumber\":38521,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/export async function main(ns) {\\r\\n    const target = ns.args[0]\\r\\n    const threads = ns.args[1]\\r\\n    const delay = ns.args[2]\\r\\n  \\r\\n    if (delay && delay > 0) {\\r\\n      await ns.sleep(delay)\\r\\n    }\\r\\n  \\r\\n    ns.print(`Starting operation: grow on ${target} in ${threads} threads`)\\r\\n    await ns.grow(target, { threads, stock: true })\\r\\n    ns.exit()\\r\\n  }\\r\\n  \",\"filename\":\"grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:https://danielyxie.github.io/6eeaa37c-a3d8-4573-9056-32c53f4ba1fd\",\"moduleSequenceNumber\":38378}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"avmnite-02h\",\"moduleSequenceNumber\":38378,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/export async function main(ns) {\\r\\n    const target = ns.args[0]\\r\\n    const threads = ns.args[1]\\r\\n    const delay = ns.args[2]\\r\\n  \\r\\n    if (delay && delay > 0) {\\r\\n      await ns.sleep(delay)\\r\\n    }\\r\\n  \\r\\n    ns.print(`Starting operation: weaken on ${target} in ${threads} threads`)\\r\\n    await ns.weaken(target, { threads, stock: true })\\r\\n    ns.exit()\\r\\n  }\\r\\n  \",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"avmnite-02h\",\"moduleSequenceNumber\":38197,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"neo-net\",\"summit-uni\",\"syscore\",\"I.I.I.I\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":0,\"hackDifficulty\":0,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":2,\"openPortCount\":4,\"requiredHackingSkill\":215,\"serverGrowth\":0}},\".\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\".\",\"httpPortOpen\":true,\"ip\":\"91.3.1.2\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\".\",\"programs\":[],\"ramUsed\":15.3,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omega-net\",9,21326.47421523505,\"e61a6472-28c5-4354-8eac-32a13a5df1e0\"],\"dataMap\":{},\"filename\":\"hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":4.210000000000002,\"pid\":2474,\"ramUsage\":1.7,\"server\":\".\",\"threads\":9,\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:https://danielyxie.github.io/33d78c51-4c00-4aa6-94fd-14593c03e7c8\",\"moduleSequenceNumber\":38507}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/export async function main(ns) {\\r\\n    const target = ns.args[0]\\r\\n    const threads = ns.args[1]\\r\\n    const delay = ns.args[2]\\r\\n  \\r\\n    if (delay && delay > 0) {\\r\\n      await ns.sleep(delay)\\r\\n    }\\r\\n  \\r\\n    ns.print(`Starting operation: hack on ${target} in ${threads} threads`)\\r\\n    await ns.hack(target, { threads, stock: true })\\r\\n    ns.exit()\\r\\n  }\\r\\n  \",\"filename\":\"hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:https://danielyxie.github.io/33d78c51-4c00-4aa6-94fd-14593c03e7c8\",\"moduleSequenceNumber\":38507}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\".\",\"moduleSequenceNumber\":38507,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/export async function main(ns) {\\r\\n    const target = ns.args[0]\\r\\n    const threads = ns.args[1]\\r\\n    const delay = ns.args[2]\\r\\n  \\r\\n    if (delay && delay > 0) {\\r\\n      await ns.sleep(delay)\\r\\n    }\\r\\n  \\r\\n    ns.print(`Starting operation: grow on ${target} in ${threads} threads`)\\r\\n    await ns.grow(target, { threads, stock: true })\\r\\n    ns.exit()\\r\\n  }\\r\\n  \",\"filename\":\"grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:https://danielyxie.github.io/bd724503-c3a1-4c8a-b081-d05bae590556\",\"moduleSequenceNumber\":38364}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\".\",\"moduleSequenceNumber\":38364,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/export async function main(ns) {\\r\\n    const target = ns.args[0]\\r\\n    const threads = ns.args[1]\\r\\n    const delay = ns.args[2]\\r\\n  \\r\\n    if (delay && delay > 0) {\\r\\n      await ns.sleep(delay)\\r\\n    }\\r\\n  \\r\\n    ns.print(`Starting operation: weaken on ${target} in ${threads} threads`)\\r\\n    await ns.weaken(target, { threads, stock: true })\\r\\n    ns.exit()\\r\\n  }\\r\\n  \",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\".\",\"moduleSequenceNumber\":38341,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"vitalife\",\"b-and-a\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":0,\"hackDifficulty\":0,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":4,\"openPortCount\":4,\"requiredHackingSkill\":508,\"serverGrowth\":0}},\"CSEC\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"CSEC\",\"httpPortOpen\":false,\"ip\":\"9.7.1.1\",\"isConnectedTo\":false,\"maxRam\":8,\"messages\":[\"democracy-is-dead.lit\"],\"organizationName\":\"CyberSec\",\"programs\":[],\"ramUsed\":6.8,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omega-net\",4,21326.47421523505,\"9e6bbcd0-d75c-4c39-96ac-77e881daa2d8\"],\"dataMap\":{},\"filename\":\"hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":4.210000000000002,\"pid\":2465,\"ramUsage\":1.7,\"server\":\"CSEC\",\"threads\":4,\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:https://danielyxie.github.io/7ebd5a69-ad4c-4c47-a2d3-a9925b255bfe\",\"moduleSequenceNumber\":38498}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/export async function main(ns) {\\r\\n    const target = ns.args[0]\\r\\n    const threads = ns.args[1]\\r\\n    const delay = ns.args[2]\\r\\n  \\r\\n    if (delay && delay > 0) {\\r\\n      await ns.sleep(delay)\\r\\n    }\\r\\n  \\r\\n    ns.print(`Starting operation: hack on ${target} in ${threads} threads`)\\r\\n    await ns.hack(target, { threads, stock: true })\\r\\n    ns.exit()\\r\\n  }\\r\\n  \",\"filename\":\"hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:https://danielyxie.github.io/7ebd5a69-ad4c-4c47-a2d3-a9925b255bfe\",\"moduleSequenceNumber\":38498}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"CSEC\",\"moduleSequenceNumber\":38498,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/export async function main(ns) {\\r\\n    const target = ns.args[0]\\r\\n    const threads = ns.args[1]\\r\\n    const delay = ns.args[2]\\r\\n  \\r\\n    if (delay && delay > 0) {\\r\\n      await ns.sleep(delay)\\r\\n    }\\r\\n  \\r\\n    ns.print(`Starting operation: grow on ${target} in ${threads} threads`)\\r\\n    await ns.grow(target, { threads, stock: true })\\r\\n    ns.exit()\\r\\n  }\\r\\n  \",\"filename\":\"grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:https://danielyxie.github.io/6aab6b9d-ee77-4ae3-a8ed-ccf9f26fb47f\",\"moduleSequenceNumber\":38355}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"CSEC\",\"moduleSequenceNumber\":38355,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/export async function main(ns) {\\r\\n    const target = ns.args[0]\\r\\n    const threads = ns.args[1]\\r\\n    const delay = ns.args[2]\\r\\n  \\r\\n    if (delay && delay > 0) {\\r\\n      await ns.sleep(delay)\\r\\n    }\\r\\n  \\r\\n    ns.print(`Starting operation: weaken on ${target} in ${threads} threads`)\\r\\n    await ns.weaken(target, { threads, stock: true })\\r\\n    ns.exit()\\r\\n  }\\r\\n  \",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"CSEC\",\"moduleSequenceNumber\":38149,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"joesguns\",\"omega-net\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":0,\"hackDifficulty\":0,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":1,\"openPortCount\":1,\"requiredHackingSkill\":54,\"serverGrowth\":0}},\"The-Cave\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"The-Cave\",\"httpPortOpen\":true,\"ip\":\"93.9.4.8\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"alpha-omega.lit\"],\"organizationName\":\"Helios\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"nwo\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":0,\"hackDifficulty\":0,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":925,\"serverGrowth\":0}},\"w0r1d_d43m0n\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"w0r1d_d43m0n\",\"httpPortOpen\":false,\"ip\":\"83.2.7.2\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"w0r1d_d43m0n\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":0,\"hackDifficulty\":0,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":3000,\"serverGrowth\":0}},\"darkweb\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"darkweb\",\"httpPortOpen\":true,\"ip\":\"43.1.5.2\",\"isConnectedTo\":false,\"maxRam\":1,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-8192-6a2ec4b7-cd77-463c-b706-f14e4db58bb4\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-8192-6a2ec4b7-cd77-463c-b706-f14e4db58bb4\",\"httpPortOpen\":false,\"ip\":\"70.2.2.1\",\"isConnectedTo\":false,\"maxRam\":8192,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":8190.45,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omega-net\",4786,21326.47421523505,\"e10b36b8-f7ab-45d5-b5bd-4bcb1cfbf117\"],\"dataMap\":{},\"filename\":\"hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":4.210000000000002,\"pid\":2508,\"ramUsage\":1.7,\"server\":\"pserv-8192-6a2ec4b7-cd77-463c-b706-f14e4db58bb4\",\"threads\":4786,\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:https://danielyxie.github.io/cb559779-ce7d-46a0-a556-16eb51e499b7\",\"moduleSequenceNumber\":38541}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omega-net\",31,0,\"c58b1366-1823-44c8-9bb2-53ca8e3b0dac\"],\"dataMap\":{},\"filename\":\"grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":4.210000000000002,\"pid\":2509,\"ramUsage\":1.75,\"server\":\"pserv-8192-6a2ec4b7-cd77-463c-b706-f14e4db58bb4\",\"threads\":31,\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:https://danielyxie.github.io/994c1fb1-463b-4a22-b564-f4a954368ef0\",\"moduleSequenceNumber\":38410}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/export async function main(ns) {\\r\\n    const target = ns.args[0]\\r\\n    const threads = ns.args[1]\\r\\n    const delay = ns.args[2]\\r\\n  \\r\\n    if (delay && delay > 0) {\\r\\n      await ns.sleep(delay)\\r\\n    }\\r\\n  \\r\\n    ns.print(`Starting operation: hack on ${target} in ${threads} threads`)\\r\\n    await ns.hack(target, { threads, stock: true })\\r\\n    ns.exit()\\r\\n  }\\r\\n  \",\"filename\":\"hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:https://danielyxie.github.io/cb559779-ce7d-46a0-a556-16eb51e499b7\",\"moduleSequenceNumber\":38541}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"pserv-8192-6a2ec4b7-cd77-463c-b706-f14e4db58bb4\",\"moduleSequenceNumber\":38541,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/export async function main(ns) {\\r\\n    const target = ns.args[0]\\r\\n    const threads = ns.args[1]\\r\\n    const delay = ns.args[2]\\r\\n  \\r\\n    if (delay && delay > 0) {\\r\\n      await ns.sleep(delay)\\r\\n    }\\r\\n  \\r\\n    ns.print(`Starting operation: grow on ${target} in ${threads} threads`)\\r\\n    await ns.grow(target, { threads, stock: true })\\r\\n    ns.exit()\\r\\n  }\\r\\n  \",\"filename\":\"grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:https://danielyxie.github.io/994c1fb1-463b-4a22-b564-f4a954368ef0\",\"moduleSequenceNumber\":38410}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"pserv-8192-6a2ec4b7-cd77-463c-b706-f14e4db58bb4\",\"moduleSequenceNumber\":38410,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/export async function main(ns) {\\r\\n    const target = ns.args[0]\\r\\n    const threads = ns.args[1]\\r\\n    const delay = ns.args[2]\\r\\n  \\r\\n    if (delay && delay > 0) {\\r\\n      await ns.sleep(delay)\\r\\n    }\\r\\n  \\r\\n    ns.print(`Starting operation: weaken on ${target} in ${threads} threads`)\\r\\n    await ns.weaken(target, { threads, stock: true })\\r\\n    ns.exit()\\r\\n  }\\r\\n  \",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"pserv-8192-6a2ec4b7-cd77-463c-b706-f14e4db58bb4\",\"moduleSequenceNumber\":38065,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-8192-f585fd4d-cd21-4165-8346-4739fa8eed69\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-8192-f585fd4d-cd21-4165-8346-4739fa8eed69\",\"httpPortOpen\":false,\"ip\":\"89.2.7.1\",\"isConnectedTo\":false,\"maxRam\":8192,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":8191.75,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omega-net\",4681,0,\"dad31e4d-1cf8-4b30-863b-904ed1acb5c7\"],\"dataMap\":{},\"filename\":\"grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":4.210000000000002,\"pid\":2510,\"ramUsage\":1.75,\"server\":\"pserv-8192-f585fd4d-cd21-4165-8346-4739fa8eed69\",\"threads\":4681,\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:https://danielyxie.github.io/750c3837-66be-4c22-a425-ec01b5ae2f2b\",\"moduleSequenceNumber\":38411}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/export async function main(ns) {\\r\\n    const target = ns.args[0]\\r\\n    const threads = ns.args[1]\\r\\n    const delay = ns.args[2]\\r\\n  \\r\\n    if (delay && delay > 0) {\\r\\n      await ns.sleep(delay)\\r\\n    }\\r\\n  \\r\\n    ns.print(`Starting operation: hack on ${target} in ${threads} threads`)\\r\\n    await ns.hack(target, { threads, stock: true })\\r\\n    ns.exit()\\r\\n  }\\r\\n  \",\"filename\":\"hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:https://danielyxie.github.io/cc7f1f07-32fa-4027-b130-91174d0ff919\",\"moduleSequenceNumber\":38542}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"pserv-8192-f585fd4d-cd21-4165-8346-4739fa8eed69\",\"moduleSequenceNumber\":38542,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/export async function main(ns) {\\r\\n    const target = ns.args[0]\\r\\n    const threads = ns.args[1]\\r\\n    const delay = ns.args[2]\\r\\n  \\r\\n    if (delay && delay > 0) {\\r\\n      await ns.sleep(delay)\\r\\n    }\\r\\n  \\r\\n    ns.print(`Starting operation: grow on ${target} in ${threads} threads`)\\r\\n    await ns.grow(target, { threads, stock: true })\\r\\n    ns.exit()\\r\\n  }\\r\\n  \",\"filename\":\"grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:https://danielyxie.github.io/750c3837-66be-4c22-a425-ec01b5ae2f2b\",\"moduleSequenceNumber\":38411}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"pserv-8192-f585fd4d-cd21-4165-8346-4739fa8eed69\",\"moduleSequenceNumber\":38411,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/export async function main(ns) {\\r\\n    const target = ns.args[0]\\r\\n    const threads = ns.args[1]\\r\\n    const delay = ns.args[2]\\r\\n  \\r\\n    if (delay && delay > 0) {\\r\\n      await ns.sleep(delay)\\r\\n    }\\r\\n  \\r\\n    ns.print(`Starting operation: weaken on ${target} in ${threads} threads`)\\r\\n    await ns.weaken(target, { threads, stock: true })\\r\\n    ns.exit()\\r\\n  }\\r\\n  \",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"pserv-8192-f585fd4d-cd21-4165-8346-4739fa8eed69\",\"moduleSequenceNumber\":38071,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-8192-bf210329-b7e3-487a-92f9-cc2f05a9249f\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-8192-bf210329-b7e3-487a-92f9-cc2f05a9249f\",\"httpPortOpen\":false,\"ip\":\"41.4.9.5\",\"isConnectedTo\":false,\"maxRam\":8192,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":8191.75,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omega-net\",4681,0,\"6ad00633-5080-410a-9b6a-f3b6940987a4\"],\"dataMap\":{},\"filename\":\"grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":4.210000000000002,\"pid\":2511,\"ramUsage\":1.75,\"server\":\"pserv-8192-bf210329-b7e3-487a-92f9-cc2f05a9249f\",\"threads\":4681,\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:https://danielyxie.github.io/454580f7-c07e-4232-9097-9336d59d4cb2\",\"moduleSequenceNumber\":38412}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/export async function main(ns) {\\r\\n    const target = ns.args[0]\\r\\n    const threads = ns.args[1]\\r\\n    const delay = ns.args[2]\\r\\n  \\r\\n    if (delay && delay > 0) {\\r\\n      await ns.sleep(delay)\\r\\n    }\\r\\n  \\r\\n    ns.print(`Starting operation: hack on ${target} in ${threads} threads`)\\r\\n    await ns.hack(target, { threads, stock: true })\\r\\n    ns.exit()\\r\\n  }\\r\\n  \",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"pserv-8192-bf210329-b7e3-487a-92f9-cc2f05a9249f\",\"moduleSequenceNumber\":38075,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/export async function main(ns) {\\r\\n    const target = ns.args[0]\\r\\n    const threads = ns.args[1]\\r\\n    const delay = ns.args[2]\\r\\n  \\r\\n    if (delay && delay > 0) {\\r\\n      await ns.sleep(delay)\\r\\n    }\\r\\n  \\r\\n    ns.print(`Starting operation: grow on ${target} in ${threads} threads`)\\r\\n    await ns.grow(target, { threads, stock: true })\\r\\n    ns.exit()\\r\\n  }\\r\\n  \",\"filename\":\"grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:https://danielyxie.github.io/454580f7-c07e-4232-9097-9336d59d4cb2\",\"moduleSequenceNumber\":38412}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"pserv-8192-bf210329-b7e3-487a-92f9-cc2f05a9249f\",\"moduleSequenceNumber\":38412,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/export async function main(ns) {\\r\\n    const target = ns.args[0]\\r\\n    const threads = ns.args[1]\\r\\n    const delay = ns.args[2]\\r\\n  \\r\\n    if (delay && delay > 0) {\\r\\n      await ns.sleep(delay)\\r\\n    }\\r\\n  \\r\\n    ns.print(`Starting operation: weaken on ${target} in ${threads} threads`)\\r\\n    await ns.weaken(target, { threads, stock: true })\\r\\n    ns.exit()\\r\\n  }\\r\\n  \",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"pserv-8192-bf210329-b7e3-487a-92f9-cc2f05a9249f\",\"moduleSequenceNumber\":38077,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-8192-264b93eb-6c27-4c5a-a6d5-67ec403c93c5\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-8192-264b93eb-6c27-4c5a-a6d5-67ec403c93c5\",\"httpPortOpen\":false,\"ip\":\"64.3.6.2\",\"isConnectedTo\":false,\"maxRam\":8192,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":8191.75,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omega-net\",4681,0,\"41896941-1b40-4dbb-9468-2703fd61cc8a\"],\"dataMap\":{},\"filename\":\"grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":4.210000000000002,\"pid\":2512,\"ramUsage\":1.75,\"server\":\"pserv-8192-264b93eb-6c27-4c5a-a6d5-67ec403c93c5\",\"threads\":4681,\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:https://danielyxie.github.io/33bff7bc-a41c-4aa4-b0bb-0a9437b2ba16\",\"moduleSequenceNumber\":38413}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/export async function main(ns) {\\r\\n    const target = ns.args[0]\\r\\n    const threads = ns.args[1]\\r\\n    const delay = ns.args[2]\\r\\n  \\r\\n    if (delay && delay > 0) {\\r\\n      await ns.sleep(delay)\\r\\n    }\\r\\n  \\r\\n    ns.print(`Starting operation: hack on ${target} in ${threads} threads`)\\r\\n    await ns.hack(target, { threads, stock: true })\\r\\n    ns.exit()\\r\\n  }\\r\\n  \",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"pserv-8192-264b93eb-6c27-4c5a-a6d5-67ec403c93c5\",\"moduleSequenceNumber\":38081,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/export async function main(ns) {\\r\\n    const target = ns.args[0]\\r\\n    const threads = ns.args[1]\\r\\n    const delay = ns.args[2]\\r\\n  \\r\\n    if (delay && delay > 0) {\\r\\n      await ns.sleep(delay)\\r\\n    }\\r\\n  \\r\\n    ns.print(`Starting operation: grow on ${target} in ${threads} threads`)\\r\\n    await ns.grow(target, { threads, stock: true })\\r\\n    ns.exit()\\r\\n  }\\r\\n  \",\"filename\":\"grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:https://danielyxie.github.io/33bff7bc-a41c-4aa4-b0bb-0a9437b2ba16\",\"moduleSequenceNumber\":38413}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"pserv-8192-264b93eb-6c27-4c5a-a6d5-67ec403c93c5\",\"moduleSequenceNumber\":38413,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/export async function main(ns) {\\r\\n    const target = ns.args[0]\\r\\n    const threads = ns.args[1]\\r\\n    const delay = ns.args[2]\\r\\n  \\r\\n    if (delay && delay > 0) {\\r\\n      await ns.sleep(delay)\\r\\n    }\\r\\n  \\r\\n    ns.print(`Starting operation: weaken on ${target} in ${threads} threads`)\\r\\n    await ns.weaken(target, { threads, stock: true })\\r\\n    ns.exit()\\r\\n  }\\r\\n  \",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"pserv-8192-264b93eb-6c27-4c5a-a6d5-67ec403c93c5\",\"moduleSequenceNumber\":38083,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-8192-8ee19b38-c518-481b-b469-235e8ac793f2\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-8192-8ee19b38-c518-481b-b469-235e8ac793f2\",\"httpPortOpen\":false,\"ip\":\"83.9.4.7\",\"isConnectedTo\":false,\"maxRam\":8192,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":8191.75,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omega-net\",4681,0,\"8b3e2923-3c16-4090-86c8-b663267697a3\"],\"dataMap\":{},\"filename\":\"grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":4.210000000000002,\"pid\":2513,\"ramUsage\":1.75,\"server\":\"pserv-8192-8ee19b38-c518-481b-b469-235e8ac793f2\",\"threads\":4681,\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:https://danielyxie.github.io/8e62b83f-9636-40d7-a18c-3e2918d9ab85\",\"moduleSequenceNumber\":38414}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/export async function main(ns) {\\r\\n    const target = ns.args[0]\\r\\n    const threads = ns.args[1]\\r\\n    const delay = ns.args[2]\\r\\n  \\r\\n    if (delay && delay > 0) {\\r\\n      await ns.sleep(delay)\\r\\n    }\\r\\n  \\r\\n    ns.print(`Starting operation: hack on ${target} in ${threads} threads`)\\r\\n    await ns.hack(target, { threads, stock: true })\\r\\n    ns.exit()\\r\\n  }\\r\\n  \",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"pserv-8192-8ee19b38-c518-481b-b469-235e8ac793f2\",\"moduleSequenceNumber\":38087,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/export async function main(ns) {\\r\\n    const target = ns.args[0]\\r\\n    const threads = ns.args[1]\\r\\n    const delay = ns.args[2]\\r\\n  \\r\\n    if (delay && delay > 0) {\\r\\n      await ns.sleep(delay)\\r\\n    }\\r\\n  \\r\\n    ns.print(`Starting operation: grow on ${target} in ${threads} threads`)\\r\\n    await ns.grow(target, { threads, stock: true })\\r\\n    ns.exit()\\r\\n  }\\r\\n  \",\"filename\":\"grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:https://danielyxie.github.io/8e62b83f-9636-40d7-a18c-3e2918d9ab85\",\"moduleSequenceNumber\":38414}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"pserv-8192-8ee19b38-c518-481b-b469-235e8ac793f2\",\"moduleSequenceNumber\":38414,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/export async function main(ns) {\\r\\n    const target = ns.args[0]\\r\\n    const threads = ns.args[1]\\r\\n    const delay = ns.args[2]\\r\\n  \\r\\n    if (delay && delay > 0) {\\r\\n      await ns.sleep(delay)\\r\\n    }\\r\\n  \\r\\n    ns.print(`Starting operation: weaken on ${target} in ${threads} threads`)\\r\\n    await ns.weaken(target, { threads, stock: true })\\r\\n    ns.exit()\\r\\n  }\\r\\n  \",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"pserv-8192-8ee19b38-c518-481b-b469-235e8ac793f2\",\"moduleSequenceNumber\":38089,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-8192-7bb3b01d-351a-42cd-9e94-dace9158434d\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-8192-7bb3b01d-351a-42cd-9e94-dace9158434d\",\"httpPortOpen\":false,\"ip\":\"42.6.3.2\",\"isConnectedTo\":false,\"maxRam\":8192,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":8191.75,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omega-net\",4681,0,\"a8dfc812-4d3f-4f70-9922-3e2b78dacdcd\"],\"dataMap\":{},\"filename\":\"grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":4.210000000000002,\"pid\":2514,\"ramUsage\":1.75,\"server\":\"pserv-8192-7bb3b01d-351a-42cd-9e94-dace9158434d\",\"threads\":4681,\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:https://danielyxie.github.io/294341d4-d6ea-4b35-8af0-dbfe87b2beab\",\"moduleSequenceNumber\":38415}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/export async function main(ns) {\\r\\n    const target = ns.args[0]\\r\\n    const threads = ns.args[1]\\r\\n    const delay = ns.args[2]\\r\\n  \\r\\n    if (delay && delay > 0) {\\r\\n      await ns.sleep(delay)\\r\\n    }\\r\\n  \\r\\n    ns.print(`Starting operation: hack on ${target} in ${threads} threads`)\\r\\n    await ns.hack(target, { threads, stock: true })\\r\\n    ns.exit()\\r\\n  }\\r\\n  \",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"pserv-8192-7bb3b01d-351a-42cd-9e94-dace9158434d\",\"moduleSequenceNumber\":38093,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/export async function main(ns) {\\r\\n    const target = ns.args[0]\\r\\n    const threads = ns.args[1]\\r\\n    const delay = ns.args[2]\\r\\n  \\r\\n    if (delay && delay > 0) {\\r\\n      await ns.sleep(delay)\\r\\n    }\\r\\n  \\r\\n    ns.print(`Starting operation: grow on ${target} in ${threads} threads`)\\r\\n    await ns.grow(target, { threads, stock: true })\\r\\n    ns.exit()\\r\\n  }\\r\\n  \",\"filename\":\"grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:https://danielyxie.github.io/294341d4-d6ea-4b35-8af0-dbfe87b2beab\",\"moduleSequenceNumber\":38415}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"pserv-8192-7bb3b01d-351a-42cd-9e94-dace9158434d\",\"moduleSequenceNumber\":38415,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/export async function main(ns) {\\r\\n    const target = ns.args[0]\\r\\n    const threads = ns.args[1]\\r\\n    const delay = ns.args[2]\\r\\n  \\r\\n    if (delay && delay > 0) {\\r\\n      await ns.sleep(delay)\\r\\n    }\\r\\n  \\r\\n    ns.print(`Starting operation: weaken on ${target} in ${threads} threads`)\\r\\n    await ns.weaken(target, { threads, stock: true })\\r\\n    ns.exit()\\r\\n  }\\r\\n  \",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"pserv-8192-7bb3b01d-351a-42cd-9e94-dace9158434d\",\"moduleSequenceNumber\":38095,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-8192-64d02404-b527-40f7-a32b-b22012bb4cbf\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-8192-64d02404-b527-40f7-a32b-b22012bb4cbf\",\"httpPortOpen\":false,\"ip\":\"87.7.8.2\",\"isConnectedTo\":false,\"maxRam\":8192,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":8191.75,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omega-net\",4681,0,\"34e45295-20c4-4dae-a9e7-f1b92f442098\"],\"dataMap\":{},\"filename\":\"grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":4.210000000000002,\"pid\":2515,\"ramUsage\":1.75,\"server\":\"pserv-8192-64d02404-b527-40f7-a32b-b22012bb4cbf\",\"threads\":4681,\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:https://danielyxie.github.io/e084d14e-4c1b-4a62-a89b-d03918a6d462\",\"moduleSequenceNumber\":38416}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/export async function main(ns) {\\r\\n    const target = ns.args[0]\\r\\n    const threads = ns.args[1]\\r\\n    const delay = ns.args[2]\\r\\n  \\r\\n    if (delay && delay > 0) {\\r\\n      await ns.sleep(delay)\\r\\n    }\\r\\n  \\r\\n    ns.print(`Starting operation: hack on ${target} in ${threads} threads`)\\r\\n    await ns.hack(target, { threads, stock: true })\\r\\n    ns.exit()\\r\\n  }\\r\\n  \",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"pserv-8192-64d02404-b527-40f7-a32b-b22012bb4cbf\",\"moduleSequenceNumber\":38099,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/export async function main(ns) {\\r\\n    const target = ns.args[0]\\r\\n    const threads = ns.args[1]\\r\\n    const delay = ns.args[2]\\r\\n  \\r\\n    if (delay && delay > 0) {\\r\\n      await ns.sleep(delay)\\r\\n    }\\r\\n  \\r\\n    ns.print(`Starting operation: grow on ${target} in ${threads} threads`)\\r\\n    await ns.grow(target, { threads, stock: true })\\r\\n    ns.exit()\\r\\n  }\\r\\n  \",\"filename\":\"grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:https://danielyxie.github.io/e084d14e-4c1b-4a62-a89b-d03918a6d462\",\"moduleSequenceNumber\":38416}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"pserv-8192-64d02404-b527-40f7-a32b-b22012bb4cbf\",\"moduleSequenceNumber\":38416,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/export async function main(ns) {\\r\\n    const target = ns.args[0]\\r\\n    const threads = ns.args[1]\\r\\n    const delay = ns.args[2]\\r\\n  \\r\\n    if (delay && delay > 0) {\\r\\n      await ns.sleep(delay)\\r\\n    }\\r\\n  \\r\\n    ns.print(`Starting operation: weaken on ${target} in ${threads} threads`)\\r\\n    await ns.weaken(target, { threads, stock: true })\\r\\n    ns.exit()\\r\\n  }\\r\\n  \",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"pserv-8192-64d02404-b527-40f7-a32b-b22012bb4cbf\",\"moduleSequenceNumber\":38101,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-8192-2391073f-f29b-4666-ae3b-2a1ffd0357e1\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-8192-2391073f-f29b-4666-ae3b-2a1ffd0357e1\",\"httpPortOpen\":false,\"ip\":\"41.2.3.4\",\"isConnectedTo\":false,\"maxRam\":8192,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":8191.75,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omega-net\",4681,0,\"3826cbd7-f29e-459b-9f3e-ce30edc1da10\"],\"dataMap\":{},\"filename\":\"grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":4.210000000000002,\"pid\":2516,\"ramUsage\":1.75,\"server\":\"pserv-8192-2391073f-f29b-4666-ae3b-2a1ffd0357e1\",\"threads\":4681,\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:https://danielyxie.github.io/f9d73f1c-9a31-49c0-b228-a38769b43f1f\",\"moduleSequenceNumber\":38417}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/export async function main(ns) {\\r\\n    const target = ns.args[0]\\r\\n    const threads = ns.args[1]\\r\\n    const delay = ns.args[2]\\r\\n  \\r\\n    if (delay && delay > 0) {\\r\\n      await ns.sleep(delay)\\r\\n    }\\r\\n  \\r\\n    ns.print(`Starting operation: hack on ${target} in ${threads} threads`)\\r\\n    await ns.hack(target, { threads, stock: true })\\r\\n    ns.exit()\\r\\n  }\\r\\n  \",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"pserv-8192-2391073f-f29b-4666-ae3b-2a1ffd0357e1\",\"moduleSequenceNumber\":38105,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/export async function main(ns) {\\r\\n    const target = ns.args[0]\\r\\n    const threads = ns.args[1]\\r\\n    const delay = ns.args[2]\\r\\n  \\r\\n    if (delay && delay > 0) {\\r\\n      await ns.sleep(delay)\\r\\n    }\\r\\n  \\r\\n    ns.print(`Starting operation: grow on ${target} in ${threads} threads`)\\r\\n    await ns.grow(target, { threads, stock: true })\\r\\n    ns.exit()\\r\\n  }\\r\\n  \",\"filename\":\"grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:https://danielyxie.github.io/f9d73f1c-9a31-49c0-b228-a38769b43f1f\",\"moduleSequenceNumber\":38417}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"pserv-8192-2391073f-f29b-4666-ae3b-2a1ffd0357e1\",\"moduleSequenceNumber\":38417,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/export async function main(ns) {\\r\\n    const target = ns.args[0]\\r\\n    const threads = ns.args[1]\\r\\n    const delay = ns.args[2]\\r\\n  \\r\\n    if (delay && delay > 0) {\\r\\n      await ns.sleep(delay)\\r\\n    }\\r\\n  \\r\\n    ns.print(`Starting operation: weaken on ${target} in ${threads} threads`)\\r\\n    await ns.weaken(target, { threads, stock: true })\\r\\n    ns.exit()\\r\\n  }\\r\\n  \",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"pserv-8192-2391073f-f29b-4666-ae3b-2a1ffd0357e1\",\"moduleSequenceNumber\":38107,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-8192-90adf4af-9d14-4e10-939e-37258056464c\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-8192-90adf4af-9d14-4e10-939e-37258056464c\",\"httpPortOpen\":false,\"ip\":\"69.8.0.1\",\"isConnectedTo\":false,\"maxRam\":8192,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":8191.75,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omega-net\",4681,0,\"eda042ff-c6ba-43fc-9876-1584e1ee030d\"],\"dataMap\":{},\"filename\":\"grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":4.210000000000002,\"pid\":2517,\"ramUsage\":1.75,\"server\":\"pserv-8192-90adf4af-9d14-4e10-939e-37258056464c\",\"threads\":4681,\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:https://danielyxie.github.io/e7220059-c762-420c-9a82-0a30bab33fd3\",\"moduleSequenceNumber\":38418}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/export async function main(ns) {\\r\\n    const target = ns.args[0]\\r\\n    const threads = ns.args[1]\\r\\n    const delay = ns.args[2]\\r\\n  \\r\\n    if (delay && delay > 0) {\\r\\n      await ns.sleep(delay)\\r\\n    }\\r\\n  \\r\\n    ns.print(`Starting operation: hack on ${target} in ${threads} threads`)\\r\\n    await ns.hack(target, { threads, stock: true })\\r\\n    ns.exit()\\r\\n  }\\r\\n  \",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"pserv-8192-90adf4af-9d14-4e10-939e-37258056464c\",\"moduleSequenceNumber\":38111,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/export async function main(ns) {\\r\\n    const target = ns.args[0]\\r\\n    const threads = ns.args[1]\\r\\n    const delay = ns.args[2]\\r\\n  \\r\\n    if (delay && delay > 0) {\\r\\n      await ns.sleep(delay)\\r\\n    }\\r\\n  \\r\\n    ns.print(`Starting operation: grow on ${target} in ${threads} threads`)\\r\\n    await ns.grow(target, { threads, stock: true })\\r\\n    ns.exit()\\r\\n  }\\r\\n  \",\"filename\":\"grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:https://danielyxie.github.io/e7220059-c762-420c-9a82-0a30bab33fd3\",\"moduleSequenceNumber\":38418}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"pserv-8192-90adf4af-9d14-4e10-939e-37258056464c\",\"moduleSequenceNumber\":38418,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/export async function main(ns) {\\r\\n    const target = ns.args[0]\\r\\n    const threads = ns.args[1]\\r\\n    const delay = ns.args[2]\\r\\n  \\r\\n    if (delay && delay > 0) {\\r\\n      await ns.sleep(delay)\\r\\n    }\\r\\n  \\r\\n    ns.print(`Starting operation: weaken on ${target} in ${threads} threads`)\\r\\n    await ns.weaken(target, { threads, stock: true })\\r\\n    ns.exit()\\r\\n  }\\r\\n  \",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"pserv-8192-90adf4af-9d14-4e10-939e-37258056464c\",\"moduleSequenceNumber\":38113,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-8192-5ec0c8e4-f77a-4bd9-8600-41a41a156b0f\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-8192-5ec0c8e4-f77a-4bd9-8600-41a41a156b0f\",\"httpPortOpen\":false,\"ip\":\"38.3.4.7\",\"isConnectedTo\":false,\"maxRam\":8192,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":8191.75,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omega-net\",4681,0,\"4f2cf417-1068-4a73-a497-355aa544aa41\"],\"dataMap\":{},\"filename\":\"grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":4.210000000000002,\"pid\":2518,\"ramUsage\":1.75,\"server\":\"pserv-8192-5ec0c8e4-f77a-4bd9-8600-41a41a156b0f\",\"threads\":4681,\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:https://danielyxie.github.io/a7aae651-d434-4e0f-b557-610f390a9d39\",\"moduleSequenceNumber\":38419}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/export async function main(ns) {\\r\\n    const target = ns.args[0]\\r\\n    const threads = ns.args[1]\\r\\n    const delay = ns.args[2]\\r\\n  \\r\\n    if (delay && delay > 0) {\\r\\n      await ns.sleep(delay)\\r\\n    }\\r\\n  \\r\\n    ns.print(`Starting operation: hack on ${target} in ${threads} threads`)\\r\\n    await ns.hack(target, { threads, stock: true })\\r\\n    ns.exit()\\r\\n  }\\r\\n  \",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"pserv-8192-5ec0c8e4-f77a-4bd9-8600-41a41a156b0f\",\"moduleSequenceNumber\":38117,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/export async function main(ns) {\\r\\n    const target = ns.args[0]\\r\\n    const threads = ns.args[1]\\r\\n    const delay = ns.args[2]\\r\\n  \\r\\n    if (delay && delay > 0) {\\r\\n      await ns.sleep(delay)\\r\\n    }\\r\\n  \\r\\n    ns.print(`Starting operation: grow on ${target} in ${threads} threads`)\\r\\n    await ns.grow(target, { threads, stock: true })\\r\\n    ns.exit()\\r\\n  }\\r\\n  \",\"filename\":\"grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:https://danielyxie.github.io/a7aae651-d434-4e0f-b557-610f390a9d39\",\"moduleSequenceNumber\":38419}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"pserv-8192-5ec0c8e4-f77a-4bd9-8600-41a41a156b0f\",\"moduleSequenceNumber\":38419,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/export async function main(ns) {\\r\\n    const target = ns.args[0]\\r\\n    const threads = ns.args[1]\\r\\n    const delay = ns.args[2]\\r\\n  \\r\\n    if (delay && delay > 0) {\\r\\n      await ns.sleep(delay)\\r\\n    }\\r\\n  \\r\\n    ns.print(`Starting operation: weaken on ${target} in ${threads} threads`)\\r\\n    await ns.weaken(target, { threads, stock: true })\\r\\n    ns.exit()\\r\\n  }\\r\\n  \",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"pserv-8192-5ec0c8e4-f77a-4bd9-8600-41a41a156b0f\",\"moduleSequenceNumber\":38119,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-8192-37de2a04-ba53-4c37-ba2b-a8a537e74623\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-8192-37de2a04-ba53-4c37-ba2b-a8a537e74623\",\"httpPortOpen\":false,\"ip\":\"22.7.5.1\",\"isConnectedTo\":false,\"maxRam\":8192,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":8191.75,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omega-net\",4681,0,\"a2a40290-afc2-4bea-91f2-e0f6234d46ac\"],\"dataMap\":{},\"filename\":\"grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":4.210000000000002,\"pid\":2519,\"ramUsage\":1.75,\"server\":\"pserv-8192-37de2a04-ba53-4c37-ba2b-a8a537e74623\",\"threads\":4681,\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:https://danielyxie.github.io/fee68590-5550-405f-b9bb-e346268badc3\",\"moduleSequenceNumber\":38420}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/export async function main(ns) {\\r\\n    const target = ns.args[0]\\r\\n    const threads = ns.args[1]\\r\\n    const delay = ns.args[2]\\r\\n  \\r\\n    if (delay && delay > 0) {\\r\\n      await ns.sleep(delay)\\r\\n    }\\r\\n  \\r\\n    ns.print(`Starting operation: hack on ${target} in ${threads} threads`)\\r\\n    await ns.hack(target, { threads, stock: true })\\r\\n    ns.exit()\\r\\n  }\\r\\n  \",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"pserv-8192-37de2a04-ba53-4c37-ba2b-a8a537e74623\",\"moduleSequenceNumber\":38123,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/export async function main(ns) {\\r\\n    const target = ns.args[0]\\r\\n    const threads = ns.args[1]\\r\\n    const delay = ns.args[2]\\r\\n  \\r\\n    if (delay && delay > 0) {\\r\\n      await ns.sleep(delay)\\r\\n    }\\r\\n  \\r\\n    ns.print(`Starting operation: grow on ${target} in ${threads} threads`)\\r\\n    await ns.grow(target, { threads, stock: true })\\r\\n    ns.exit()\\r\\n  }\\r\\n  \",\"filename\":\"grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:https://danielyxie.github.io/fee68590-5550-405f-b9bb-e346268badc3\",\"moduleSequenceNumber\":38420}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"pserv-8192-37de2a04-ba53-4c37-ba2b-a8a537e74623\",\"moduleSequenceNumber\":38420,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/export async function main(ns) {\\r\\n    const target = ns.args[0]\\r\\n    const threads = ns.args[1]\\r\\n    const delay = ns.args[2]\\r\\n  \\r\\n    if (delay && delay > 0) {\\r\\n      await ns.sleep(delay)\\r\\n    }\\r\\n  \\r\\n    ns.print(`Starting operation: weaken on ${target} in ${threads} threads`)\\r\\n    await ns.weaken(target, { threads, stock: true })\\r\\n    ns.exit()\\r\\n  }\\r\\n  \",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:https://danielyxie.github.io/b38009b8-1283-4d70-9b75-2e1f68c83bef\",\"moduleSequenceNumber\":38421}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"pserv-8192-37de2a04-ba53-4c37-ba2b-a8a537e74623\",\"moduleSequenceNumber\":38421,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-8192-d9f1f107-e555-4eb8-a7ff-173b9575c59c\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-8192-d9f1f107-e555-4eb8-a7ff-173b9575c59c\",\"httpPortOpen\":false,\"ip\":\"90.8.2.6\",\"isConnectedTo\":false,\"maxRam\":8192,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":8191.75,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omega-net\",4681,0,\"30406b40-b030-4308-8155-c9a5dd24e752\"],\"dataMap\":{},\"filename\":\"grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":4.210000000000002,\"pid\":2520,\"ramUsage\":1.75,\"server\":\"pserv-8192-d9f1f107-e555-4eb8-a7ff-173b9575c59c\",\"threads\":4681,\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:https://danielyxie.github.io/59c948b2-eba4-435b-ad95-4aeadc2eba01\",\"moduleSequenceNumber\":38543}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/export async function main(ns) {\\r\\n    const target = ns.args[0]\\r\\n    const threads = ns.args[1]\\r\\n    const delay = ns.args[2]\\r\\n  \\r\\n    if (delay && delay > 0) {\\r\\n      await ns.sleep(delay)\\r\\n    }\\r\\n  \\r\\n    ns.print(`Starting operation: hack on ${target} in ${threads} threads`)\\r\\n    await ns.hack(target, { threads, stock: true })\\r\\n    ns.exit()\\r\\n  }\\r\\n  \",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"pserv-8192-d9f1f107-e555-4eb8-a7ff-173b9575c59c\",\"moduleSequenceNumber\":38129,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/export async function main(ns) {\\r\\n    const target = ns.args[0]\\r\\n    const threads = ns.args[1]\\r\\n    const delay = ns.args[2]\\r\\n  \\r\\n    if (delay && delay > 0) {\\r\\n      await ns.sleep(delay)\\r\\n    }\\r\\n  \\r\\n    ns.print(`Starting operation: grow on ${target} in ${threads} threads`)\\r\\n    await ns.grow(target, { threads, stock: true })\\r\\n    ns.exit()\\r\\n  }\\r\\n  \",\"filename\":\"grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:https://danielyxie.github.io/59c948b2-eba4-435b-ad95-4aeadc2eba01\",\"moduleSequenceNumber\":38543}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"pserv-8192-d9f1f107-e555-4eb8-a7ff-173b9575c59c\",\"moduleSequenceNumber\":38543,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/export async function main(ns) {\\r\\n    const target = ns.args[0]\\r\\n    const threads = ns.args[1]\\r\\n    const delay = ns.args[2]\\r\\n  \\r\\n    if (delay && delay > 0) {\\r\\n      await ns.sleep(delay)\\r\\n    }\\r\\n  \\r\\n    ns.print(`Starting operation: weaken on ${target} in ${threads} threads`)\\r\\n    await ns.weaken(target, { threads, stock: true })\\r\\n    ns.exit()\\r\\n  }\\r\\n  \",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:https://danielyxie.github.io/71582a84-f48c-443e-b50e-b99700415ada\",\"moduleSequenceNumber\":38422}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"pserv-8192-d9f1f107-e555-4eb8-a7ff-173b9575c59c\",\"moduleSequenceNumber\":38422,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-8192-269d27ee-5cd8-4369-8210-41ffae2c28ac\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-8192-269d27ee-5cd8-4369-8210-41ffae2c28ac\",\"httpPortOpen\":false,\"ip\":\"7.5.2.4\",\"isConnectedTo\":false,\"maxRam\":8192,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":8191.75,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omega-net\",4681,0,\"ab989e5f-92f5-4776-b238-cc31fce13f92\"],\"dataMap\":{},\"filename\":\"grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":4.210000000000002,\"pid\":2521,\"ramUsage\":1.75,\"server\":\"pserv-8192-269d27ee-5cd8-4369-8210-41ffae2c28ac\",\"threads\":4681,\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:https://danielyxie.github.io/cb81ed7f-84b7-494e-a360-2b6e03690154\",\"moduleSequenceNumber\":38544}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/export async function main(ns) {\\r\\n    const target = ns.args[0]\\r\\n    const threads = ns.args[1]\\r\\n    const delay = ns.args[2]\\r\\n  \\r\\n    if (delay && delay > 0) {\\r\\n      await ns.sleep(delay)\\r\\n    }\\r\\n  \\r\\n    ns.print(`Starting operation: hack on ${target} in ${threads} threads`)\\r\\n    await ns.hack(target, { threads, stock: true })\\r\\n    ns.exit()\\r\\n  }\\r\\n  \",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"pserv-8192-269d27ee-5cd8-4369-8210-41ffae2c28ac\",\"moduleSequenceNumber\":38135,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/export async function main(ns) {\\r\\n    const target = ns.args[0]\\r\\n    const threads = ns.args[1]\\r\\n    const delay = ns.args[2]\\r\\n  \\r\\n    if (delay && delay > 0) {\\r\\n      await ns.sleep(delay)\\r\\n    }\\r\\n  \\r\\n    ns.print(`Starting operation: grow on ${target} in ${threads} threads`)\\r\\n    await ns.grow(target, { threads, stock: true })\\r\\n    ns.exit()\\r\\n  }\\r\\n  \",\"filename\":\"grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:https://danielyxie.github.io/cb81ed7f-84b7-494e-a360-2b6e03690154\",\"moduleSequenceNumber\":38544}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"pserv-8192-269d27ee-5cd8-4369-8210-41ffae2c28ac\",\"moduleSequenceNumber\":38544,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/export async function main(ns) {\\r\\n    const target = ns.args[0]\\r\\n    const threads = ns.args[1]\\r\\n    const delay = ns.args[2]\\r\\n  \\r\\n    if (delay && delay > 0) {\\r\\n      await ns.sleep(delay)\\r\\n    }\\r\\n  \\r\\n    ns.print(`Starting operation: weaken on ${target} in ${threads} threads`)\\r\\n    await ns.weaken(target, { threads, stock: true })\\r\\n    ns.exit()\\r\\n  }\\r\\n  \",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:https://danielyxie.github.io/40896608-23bf-43c5-b55a-35f66bc678f5\",\"moduleSequenceNumber\":38423}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"pserv-8192-269d27ee-5cd8-4369-8210-41ffae2c28ac\",\"moduleSequenceNumber\":38423,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-32768-ad4483d0-b7ec-45a2-bcd8-fdb1c87aefe0\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-32768-ad4483d0-b7ec-45a2-bcd8-fdb1c87aefe0\",\"httpPortOpen\":false,\"ip\":\"45.7.3.4\",\"isConnectedTo\":false,\"maxRam\":32768,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":32767,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omega-net\",18724,0,\"d5029167-4058-4994-ab05-6ecac46ecc59\"],\"dataMap\":{},\"filename\":\"grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":4.210000000000002,\"pid\":2522,\"ramUsage\":1.75,\"server\":\"pserv-32768-ad4483d0-b7ec-45a2-bcd8-fdb1c87aefe0\",\"threads\":18724,\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:https://danielyxie.github.io/257486c8-4c69-48a5-8e60-27a803f7b3bf\",\"moduleSequenceNumber\":38545}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/export async function main(ns) {\\r\\n    const target = ns.args[0]\\r\\n    const threads = ns.args[1]\\r\\n    const delay = ns.args[2]\\r\\n  \\r\\n    if (delay && delay > 0) {\\r\\n      await ns.sleep(delay)\\r\\n    }\\r\\n  \\r\\n    ns.print(`Starting operation: hack on ${target} in ${threads} threads`)\\r\\n    await ns.hack(target, { threads, stock: true })\\r\\n    ns.exit()\\r\\n  }\\r\\n  \",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"pserv-32768-ad4483d0-b7ec-45a2-bcd8-fdb1c87aefe0\",\"moduleSequenceNumber\":38428,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/export async function main(ns) {\\r\\n    const target = ns.args[0]\\r\\n    const threads = ns.args[1]\\r\\n    const delay = ns.args[2]\\r\\n  \\r\\n    if (delay && delay > 0) {\\r\\n      await ns.sleep(delay)\\r\\n    }\\r\\n  \\r\\n    ns.print(`Starting operation: grow on ${target} in ${threads} threads`)\\r\\n    await ns.grow(target, { threads, stock: true })\\r\\n    ns.exit()\\r\\n  }\\r\\n  \",\"filename\":\"grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:https://danielyxie.github.io/257486c8-4c69-48a5-8e60-27a803f7b3bf\",\"moduleSequenceNumber\":38545}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"pserv-32768-ad4483d0-b7ec-45a2-bcd8-fdb1c87aefe0\",\"moduleSequenceNumber\":38545,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/export async function main(ns) {\\r\\n    const target = ns.args[0]\\r\\n    const threads = ns.args[1]\\r\\n    const delay = ns.args[2]\\r\\n  \\r\\n    if (delay && delay > 0) {\\r\\n      await ns.sleep(delay)\\r\\n    }\\r\\n  \\r\\n    ns.print(`Starting operation: weaken on ${target} in ${threads} threads`)\\r\\n    await ns.weaken(target, { threads, stock: true })\\r\\n    ns.exit()\\r\\n  }\\r\\n  \",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"pserv-32768-ad4483d0-b7ec-45a2-bcd8-fdb1c87aefe0\",\"moduleSequenceNumber\":38430,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-32768-5b1ab526-eaee-457f-82cf-00bc2216a0f3\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-32768-5b1ab526-eaee-457f-82cf-00bc2216a0f3\",\"httpPortOpen\":false,\"ip\":\"26.5.0.0\",\"isConnectedTo\":false,\"maxRam\":32768,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":32767,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omega-net\",18724,0,\"36c13387-fc1c-4bc3-9e6b-b0731e554539\"],\"dataMap\":{},\"filename\":\"grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":4.210000000000002,\"pid\":2523,\"ramUsage\":1.75,\"server\":\"pserv-32768-5b1ab526-eaee-457f-82cf-00bc2216a0f3\",\"threads\":18724,\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:https://danielyxie.github.io/cef5d458-f8d6-48dd-8859-dd9f4913e20b\",\"moduleSequenceNumber\":38546}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/export async function main(ns) {\\r\\n    const target = ns.args[0]\\r\\n    const threads = ns.args[1]\\r\\n    const delay = ns.args[2]\\r\\n  \\r\\n    if (delay && delay > 0) {\\r\\n      await ns.sleep(delay)\\r\\n    }\\r\\n  \\r\\n    ns.print(`Starting operation: hack on ${target} in ${threads} threads`)\\r\\n    await ns.hack(target, { threads, stock: true })\\r\\n    ns.exit()\\r\\n  }\\r\\n  \",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"pserv-32768-5b1ab526-eaee-457f-82cf-00bc2216a0f3\",\"moduleSequenceNumber\":38434,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/export async function main(ns) {\\r\\n    const target = ns.args[0]\\r\\n    const threads = ns.args[1]\\r\\n    const delay = ns.args[2]\\r\\n  \\r\\n    if (delay && delay > 0) {\\r\\n      await ns.sleep(delay)\\r\\n    }\\r\\n  \\r\\n    ns.print(`Starting operation: grow on ${target} in ${threads} threads`)\\r\\n    await ns.grow(target, { threads, stock: true })\\r\\n    ns.exit()\\r\\n  }\\r\\n  \",\"filename\":\"grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:https://danielyxie.github.io/cef5d458-f8d6-48dd-8859-dd9f4913e20b\",\"moduleSequenceNumber\":38546}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"pserv-32768-5b1ab526-eaee-457f-82cf-00bc2216a0f3\",\"moduleSequenceNumber\":38546,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/export async function main(ns) {\\r\\n    const target = ns.args[0]\\r\\n    const threads = ns.args[1]\\r\\n    const delay = ns.args[2]\\r\\n  \\r\\n    if (delay && delay > 0) {\\r\\n      await ns.sleep(delay)\\r\\n    }\\r\\n  \\r\\n    ns.print(`Starting operation: weaken on ${target} in ${threads} threads`)\\r\\n    await ns.weaken(target, { threads, stock: true })\\r\\n    ns.exit()\\r\\n  }\\r\\n  \",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"pserv-32768-5b1ab526-eaee-457f-82cf-00bc2216a0f3\",\"moduleSequenceNumber\":38436,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-32768-a5d5e010-1fc6-448b-a570-1cf9da8380f2\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-32768-a5d5e010-1fc6-448b-a570-1cf9da8380f2\",\"httpPortOpen\":false,\"ip\":\"75.8.4.6\",\"isConnectedTo\":false,\"maxRam\":32768,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":32767,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omega-net\",18724,0,\"5d91f375-dbd9-4a6f-9bb5-fc33f4ae7449\"],\"dataMap\":{},\"filename\":\"grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":4.210000000000002,\"pid\":2524,\"ramUsage\":1.75,\"server\":\"pserv-32768-a5d5e010-1fc6-448b-a570-1cf9da8380f2\",\"threads\":18724,\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:https://danielyxie.github.io/a242d863-a6d0-45e5-b867-1ebff7248ceb\",\"moduleSequenceNumber\":38547}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/export async function main(ns) {\\r\\n    const target = ns.args[0]\\r\\n    const threads = ns.args[1]\\r\\n    const delay = ns.args[2]\\r\\n  \\r\\n    if (delay && delay > 0) {\\r\\n      await ns.sleep(delay)\\r\\n    }\\r\\n  \\r\\n    ns.print(`Starting operation: hack on ${target} in ${threads} threads`)\\r\\n    await ns.hack(target, { threads, stock: true })\\r\\n    ns.exit()\\r\\n  }\\r\\n  \",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"pserv-32768-a5d5e010-1fc6-448b-a570-1cf9da8380f2\",\"moduleSequenceNumber\":38440,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/export async function main(ns) {\\r\\n    const target = ns.args[0]\\r\\n    const threads = ns.args[1]\\r\\n    const delay = ns.args[2]\\r\\n  \\r\\n    if (delay && delay > 0) {\\r\\n      await ns.sleep(delay)\\r\\n    }\\r\\n  \\r\\n    ns.print(`Starting operation: grow on ${target} in ${threads} threads`)\\r\\n    await ns.grow(target, { threads, stock: true })\\r\\n    ns.exit()\\r\\n  }\\r\\n  \",\"filename\":\"grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:https://danielyxie.github.io/a242d863-a6d0-45e5-b867-1ebff7248ceb\",\"moduleSequenceNumber\":38547}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"pserv-32768-a5d5e010-1fc6-448b-a570-1cf9da8380f2\",\"moduleSequenceNumber\":38547,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/export async function main(ns) {\\r\\n    const target = ns.args[0]\\r\\n    const threads = ns.args[1]\\r\\n    const delay = ns.args[2]\\r\\n  \\r\\n    if (delay && delay > 0) {\\r\\n      await ns.sleep(delay)\\r\\n    }\\r\\n  \\r\\n    ns.print(`Starting operation: weaken on ${target} in ${threads} threads`)\\r\\n    await ns.weaken(target, { threads, stock: true })\\r\\n    ns.exit()\\r\\n  }\\r\\n  \",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"pserv-32768-a5d5e010-1fc6-448b-a570-1cf9da8380f2\",\"moduleSequenceNumber\":38442,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-32768-236215ec-e6db-42d8-b4b8-6bd37aed6422\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-32768-236215ec-e6db-42d8-b4b8-6bd37aed6422\",\"httpPortOpen\":false,\"ip\":\"24.7.9.1\",\"isConnectedTo\":false,\"maxRam\":32768,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":32767,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omega-net\",18724,0,\"2a7c0ca3-20db-4a18-a4a5-b8aa74f7c8d3\"],\"dataMap\":{},\"filename\":\"grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":4.210000000000002,\"pid\":2525,\"ramUsage\":1.75,\"server\":\"pserv-32768-236215ec-e6db-42d8-b4b8-6bd37aed6422\",\"threads\":18724,\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:https://danielyxie.github.io/50e195ae-2374-4eb4-aa18-8df4cf90b2f8\",\"moduleSequenceNumber\":38548}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/export async function main(ns) {\\r\\n    const target = ns.args[0]\\r\\n    const threads = ns.args[1]\\r\\n    const delay = ns.args[2]\\r\\n  \\r\\n    if (delay && delay > 0) {\\r\\n      await ns.sleep(delay)\\r\\n    }\\r\\n  \\r\\n    ns.print(`Starting operation: hack on ${target} in ${threads} threads`)\\r\\n    await ns.hack(target, { threads, stock: true })\\r\\n    ns.exit()\\r\\n  }\\r\\n  \",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"pserv-32768-236215ec-e6db-42d8-b4b8-6bd37aed6422\",\"moduleSequenceNumber\":38446,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/export async function main(ns) {\\r\\n    const target = ns.args[0]\\r\\n    const threads = ns.args[1]\\r\\n    const delay = ns.args[2]\\r\\n  \\r\\n    if (delay && delay > 0) {\\r\\n      await ns.sleep(delay)\\r\\n    }\\r\\n  \\r\\n    ns.print(`Starting operation: grow on ${target} in ${threads} threads`)\\r\\n    await ns.grow(target, { threads, stock: true })\\r\\n    ns.exit()\\r\\n  }\\r\\n  \",\"filename\":\"grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:https://danielyxie.github.io/50e195ae-2374-4eb4-aa18-8df4cf90b2f8\",\"moduleSequenceNumber\":38548}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"pserv-32768-236215ec-e6db-42d8-b4b8-6bd37aed6422\",\"moduleSequenceNumber\":38548,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/export async function main(ns) {\\r\\n    const target = ns.args[0]\\r\\n    const threads = ns.args[1]\\r\\n    const delay = ns.args[2]\\r\\n  \\r\\n    if (delay && delay > 0) {\\r\\n      await ns.sleep(delay)\\r\\n    }\\r\\n  \\r\\n    ns.print(`Starting operation: weaken on ${target} in ${threads} threads`)\\r\\n    await ns.weaken(target, { threads, stock: true })\\r\\n    ns.exit()\\r\\n  }\\r\\n  \",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"pserv-32768-236215ec-e6db-42d8-b4b8-6bd37aed6422\",\"moduleSequenceNumber\":38448,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-32768-e5b0d40d-1184-4fd1-b33f-4e6086d2ed7c\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-32768-e5b0d40d-1184-4fd1-b33f-4e6086d2ed7c\",\"httpPortOpen\":false,\"ip\":\"61.1.2.1\",\"isConnectedTo\":false,\"maxRam\":32768,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":32767,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omega-net\",18724,0,\"57318458-7dd6-4c48-acc5-3d77a008881b\"],\"dataMap\":{},\"filename\":\"grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":4.210000000000002,\"pid\":2526,\"ramUsage\":1.75,\"server\":\"pserv-32768-e5b0d40d-1184-4fd1-b33f-4e6086d2ed7c\",\"threads\":18724,\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:https://danielyxie.github.io/19a76a1c-db62-4443-acf5-bf16bbab0bb3\",\"moduleSequenceNumber\":38549}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/export async function main(ns) {\\r\\n    const target = ns.args[0]\\r\\n    const threads = ns.args[1]\\r\\n    const delay = ns.args[2]\\r\\n  \\r\\n    if (delay && delay > 0) {\\r\\n      await ns.sleep(delay)\\r\\n    }\\r\\n  \\r\\n    ns.print(`Starting operation: hack on ${target} in ${threads} threads`)\\r\\n    await ns.hack(target, { threads, stock: true })\\r\\n    ns.exit()\\r\\n  }\\r\\n  \",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"pserv-32768-e5b0d40d-1184-4fd1-b33f-4e6086d2ed7c\",\"moduleSequenceNumber\":38452,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/export async function main(ns) {\\r\\n    const target = ns.args[0]\\r\\n    const threads = ns.args[1]\\r\\n    const delay = ns.args[2]\\r\\n  \\r\\n    if (delay && delay > 0) {\\r\\n      await ns.sleep(delay)\\r\\n    }\\r\\n  \\r\\n    ns.print(`Starting operation: grow on ${target} in ${threads} threads`)\\r\\n    await ns.grow(target, { threads, stock: true })\\r\\n    ns.exit()\\r\\n  }\\r\\n  \",\"filename\":\"grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:https://danielyxie.github.io/19a76a1c-db62-4443-acf5-bf16bbab0bb3\",\"moduleSequenceNumber\":38549}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"pserv-32768-e5b0d40d-1184-4fd1-b33f-4e6086d2ed7c\",\"moduleSequenceNumber\":38549,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/export async function main(ns) {\\r\\n    const target = ns.args[0]\\r\\n    const threads = ns.args[1]\\r\\n    const delay = ns.args[2]\\r\\n  \\r\\n    if (delay && delay > 0) {\\r\\n      await ns.sleep(delay)\\r\\n    }\\r\\n  \\r\\n    ns.print(`Starting operation: weaken on ${target} in ${threads} threads`)\\r\\n    await ns.weaken(target, { threads, stock: true })\\r\\n    ns.exit()\\r\\n  }\\r\\n  \",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"pserv-32768-e5b0d40d-1184-4fd1-b33f-4e6086d2ed7c\",\"moduleSequenceNumber\":38454,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-32768-f7253b5a-1d8c-48a5-8689-2c0789429c0e\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-32768-f7253b5a-1d8c-48a5-8689-2c0789429c0e\",\"httpPortOpen\":false,\"ip\":\"9.7.2.9\",\"isConnectedTo\":false,\"maxRam\":32768,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":32767,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omega-net\",18724,0,\"5a73e519-1be3-40ff-84a2-612699a7fb9b\"],\"dataMap\":{},\"filename\":\"grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":4.210000000000002,\"pid\":2527,\"ramUsage\":1.75,\"server\":\"pserv-32768-f7253b5a-1d8c-48a5-8689-2c0789429c0e\",\"threads\":18724,\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:https://danielyxie.github.io/8b913ce4-418a-42ad-8e3c-3824e0ccdac0\",\"moduleSequenceNumber\":38550}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/export async function main(ns) {\\r\\n    const target = ns.args[0]\\r\\n    const threads = ns.args[1]\\r\\n    const delay = ns.args[2]\\r\\n  \\r\\n    if (delay && delay > 0) {\\r\\n      await ns.sleep(delay)\\r\\n    }\\r\\n  \\r\\n    ns.print(`Starting operation: hack on ${target} in ${threads} threads`)\\r\\n    await ns.hack(target, { threads, stock: true })\\r\\n    ns.exit()\\r\\n  }\\r\\n  \",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"pserv-32768-f7253b5a-1d8c-48a5-8689-2c0789429c0e\",\"moduleSequenceNumber\":38458,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/export async function main(ns) {\\r\\n    const target = ns.args[0]\\r\\n    const threads = ns.args[1]\\r\\n    const delay = ns.args[2]\\r\\n  \\r\\n    if (delay && delay > 0) {\\r\\n      await ns.sleep(delay)\\r\\n    }\\r\\n  \\r\\n    ns.print(`Starting operation: grow on ${target} in ${threads} threads`)\\r\\n    await ns.grow(target, { threads, stock: true })\\r\\n    ns.exit()\\r\\n  }\\r\\n  \",\"filename\":\"grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:https://danielyxie.github.io/8b913ce4-418a-42ad-8e3c-3824e0ccdac0\",\"moduleSequenceNumber\":38550}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"pserv-32768-f7253b5a-1d8c-48a5-8689-2c0789429c0e\",\"moduleSequenceNumber\":38550,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/export async function main(ns) {\\r\\n    const target = ns.args[0]\\r\\n    const threads = ns.args[1]\\r\\n    const delay = ns.args[2]\\r\\n  \\r\\n    if (delay && delay > 0) {\\r\\n      await ns.sleep(delay)\\r\\n    }\\r\\n  \\r\\n    ns.print(`Starting operation: weaken on ${target} in ${threads} threads`)\\r\\n    await ns.weaken(target, { threads, stock: true })\\r\\n    ns.exit()\\r\\n  }\\r\\n  \",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"pserv-32768-f7253b5a-1d8c-48a5-8689-2c0789429c0e\",\"moduleSequenceNumber\":38460,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-32768-e1674d94-4e57-4470-905c-b4756dd6c41b\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-32768-e1674d94-4e57-4470-905c-b4756dd6c41b\",\"httpPortOpen\":false,\"ip\":\"53.8.0.2\",\"isConnectedTo\":false,\"maxRam\":32768,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":32767,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omega-net\",18724,0,\"19baef95-49d5-4e38-bd6d-7d43d74ad0e2\"],\"dataMap\":{},\"filename\":\"grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":4.210000000000002,\"pid\":2528,\"ramUsage\":1.75,\"server\":\"pserv-32768-e1674d94-4e57-4470-905c-b4756dd6c41b\",\"threads\":18724,\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:https://danielyxie.github.io/035dc4c1-dffc-4406-b96e-451cff2a4b02\",\"moduleSequenceNumber\":38551}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/export async function main(ns) {\\r\\n    const target = ns.args[0]\\r\\n    const threads = ns.args[1]\\r\\n    const delay = ns.args[2]\\r\\n  \\r\\n    if (delay && delay > 0) {\\r\\n      await ns.sleep(delay)\\r\\n    }\\r\\n  \\r\\n    ns.print(`Starting operation: hack on ${target} in ${threads} threads`)\\r\\n    await ns.hack(target, { threads, stock: true })\\r\\n    ns.exit()\\r\\n  }\\r\\n  \",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"pserv-32768-e1674d94-4e57-4470-905c-b4756dd6c41b\",\"moduleSequenceNumber\":38464,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/export async function main(ns) {\\r\\n    const target = ns.args[0]\\r\\n    const threads = ns.args[1]\\r\\n    const delay = ns.args[2]\\r\\n  \\r\\n    if (delay && delay > 0) {\\r\\n      await ns.sleep(delay)\\r\\n    }\\r\\n  \\r\\n    ns.print(`Starting operation: grow on ${target} in ${threads} threads`)\\r\\n    await ns.grow(target, { threads, stock: true })\\r\\n    ns.exit()\\r\\n  }\\r\\n  \",\"filename\":\"grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:https://danielyxie.github.io/035dc4c1-dffc-4406-b96e-451cff2a4b02\",\"moduleSequenceNumber\":38551}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"pserv-32768-e1674d94-4e57-4470-905c-b4756dd6c41b\",\"moduleSequenceNumber\":38551,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/export async function main(ns) {\\r\\n    const target = ns.args[0]\\r\\n    const threads = ns.args[1]\\r\\n    const delay = ns.args[2]\\r\\n  \\r\\n    if (delay && delay > 0) {\\r\\n      await ns.sleep(delay)\\r\\n    }\\r\\n  \\r\\n    ns.print(`Starting operation: weaken on ${target} in ${threads} threads`)\\r\\n    await ns.weaken(target, { threads, stock: true })\\r\\n    ns.exit()\\r\\n  }\\r\\n  \",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"pserv-32768-e1674d94-4e57-4470-905c-b4756dd6c41b\",\"moduleSequenceNumber\":38466,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-32768-6abd9b59-eb67-4002-a6cf-21954c6e41da\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-32768-6abd9b59-eb67-4002-a6cf-21954c6e41da\",\"httpPortOpen\":false,\"ip\":\"90.2.3.8\",\"isConnectedTo\":false,\"maxRam\":32768,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":32767,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omega-net\",18724,0,\"e43873f4-cfd4-4321-940b-c77c0e2a7528\"],\"dataMap\":{},\"filename\":\"grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":4.210000000000002,\"pid\":2529,\"ramUsage\":1.75,\"server\":\"pserv-32768-6abd9b59-eb67-4002-a6cf-21954c6e41da\",\"threads\":18724,\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:https://danielyxie.github.io/a2c671eb-087a-4d3d-9c65-a7d17536f7b4\",\"moduleSequenceNumber\":38552}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/export async function main(ns) {\\r\\n    const target = ns.args[0]\\r\\n    const threads = ns.args[1]\\r\\n    const delay = ns.args[2]\\r\\n  \\r\\n    if (delay && delay > 0) {\\r\\n      await ns.sleep(delay)\\r\\n    }\\r\\n  \\r\\n    ns.print(`Starting operation: hack on ${target} in ${threads} threads`)\\r\\n    await ns.hack(target, { threads, stock: true })\\r\\n    ns.exit()\\r\\n  }\\r\\n  \",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"pserv-32768-6abd9b59-eb67-4002-a6cf-21954c6e41da\",\"moduleSequenceNumber\":38470,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/export async function main(ns) {\\r\\n    const target = ns.args[0]\\r\\n    const threads = ns.args[1]\\r\\n    const delay = ns.args[2]\\r\\n  \\r\\n    if (delay && delay > 0) {\\r\\n      await ns.sleep(delay)\\r\\n    }\\r\\n  \\r\\n    ns.print(`Starting operation: grow on ${target} in ${threads} threads`)\\r\\n    await ns.grow(target, { threads, stock: true })\\r\\n    ns.exit()\\r\\n  }\\r\\n  \",\"filename\":\"grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:https://danielyxie.github.io/a2c671eb-087a-4d3d-9c65-a7d17536f7b4\",\"moduleSequenceNumber\":38552}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"pserv-32768-6abd9b59-eb67-4002-a6cf-21954c6e41da\",\"moduleSequenceNumber\":38552,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/export async function main(ns) {\\r\\n    const target = ns.args[0]\\r\\n    const threads = ns.args[1]\\r\\n    const delay = ns.args[2]\\r\\n  \\r\\n    if (delay && delay > 0) {\\r\\n      await ns.sleep(delay)\\r\\n    }\\r\\n  \\r\\n    ns.print(`Starting operation: weaken on ${target} in ${threads} threads`)\\r\\n    await ns.weaken(target, { threads, stock: true })\\r\\n    ns.exit()\\r\\n  }\\r\\n  \",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"pserv-32768-6abd9b59-eb67-4002-a6cf-21954c6e41da\",\"moduleSequenceNumber\":38472,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-32768-66fdbc6f-0b98-4b40-bc05-9c3dd1a1adc4\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-32768-66fdbc6f-0b98-4b40-bc05-9c3dd1a1adc4\",\"httpPortOpen\":false,\"ip\":\"76.8.0.4\",\"isConnectedTo\":false,\"maxRam\":32768,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":32767,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omega-net\",18724,0,\"ab6781ca-7bd9-4134-8e00-8466459d7c5f\"],\"dataMap\":{},\"filename\":\"grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":4.210000000000002,\"pid\":2530,\"ramUsage\":1.75,\"server\":\"pserv-32768-66fdbc6f-0b98-4b40-bc05-9c3dd1a1adc4\",\"threads\":18724,\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:https://danielyxie.github.io/a0c6c98c-d0ce-44b1-9480-82d4354f9599\",\"moduleSequenceNumber\":38553}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/export async function main(ns) {\\r\\n    const target = ns.args[0]\\r\\n    const threads = ns.args[1]\\r\\n    const delay = ns.args[2]\\r\\n  \\r\\n    if (delay && delay > 0) {\\r\\n      await ns.sleep(delay)\\r\\n    }\\r\\n  \\r\\n    ns.print(`Starting operation: hack on ${target} in ${threads} threads`)\\r\\n    await ns.hack(target, { threads, stock: true })\\r\\n    ns.exit()\\r\\n  }\\r\\n  \",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"pserv-32768-66fdbc6f-0b98-4b40-bc05-9c3dd1a1adc4\",\"moduleSequenceNumber\":38476,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/export async function main(ns) {\\r\\n    const target = ns.args[0]\\r\\n    const threads = ns.args[1]\\r\\n    const delay = ns.args[2]\\r\\n  \\r\\n    if (delay && delay > 0) {\\r\\n      await ns.sleep(delay)\\r\\n    }\\r\\n  \\r\\n    ns.print(`Starting operation: grow on ${target} in ${threads} threads`)\\r\\n    await ns.grow(target, { threads, stock: true })\\r\\n    ns.exit()\\r\\n  }\\r\\n  \",\"filename\":\"grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:https://danielyxie.github.io/a0c6c98c-d0ce-44b1-9480-82d4354f9599\",\"moduleSequenceNumber\":38553}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"pserv-32768-66fdbc6f-0b98-4b40-bc05-9c3dd1a1adc4\",\"moduleSequenceNumber\":38553,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/export async function main(ns) {\\r\\n    const target = ns.args[0]\\r\\n    const threads = ns.args[1]\\r\\n    const delay = ns.args[2]\\r\\n  \\r\\n    if (delay && delay > 0) {\\r\\n      await ns.sleep(delay)\\r\\n    }\\r\\n  \\r\\n    ns.print(`Starting operation: weaken on ${target} in ${threads} threads`)\\r\\n    await ns.weaken(target, { threads, stock: true })\\r\\n    ns.exit()\\r\\n  }\\r\\n  \",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"pserv-32768-66fdbc6f-0b98-4b40-bc05-9c3dd1a1adc4\",\"moduleSequenceNumber\":38478,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-32768-40bb9d1d-4f20-4e5e-8ca4-09e5b51e35df\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-32768-40bb9d1d-4f20-4e5e-8ca4-09e5b51e35df\",\"httpPortOpen\":false,\"ip\":\"28.5.7.4\",\"isConnectedTo\":false,\"maxRam\":32768,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":32767,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omega-net\",18724,0,\"56b9bf1b-b54d-4977-9a17-394ba127e689\"],\"dataMap\":{},\"filename\":\"grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":4.210000000000002,\"pid\":2531,\"ramUsage\":1.75,\"server\":\"pserv-32768-40bb9d1d-4f20-4e5e-8ca4-09e5b51e35df\",\"threads\":18724,\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:https://danielyxie.github.io/409b3ba1-e03f-4c38-9fbf-067b23580352\",\"moduleSequenceNumber\":38554}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/export async function main(ns) {\\r\\n    const target = ns.args[0]\\r\\n    const threads = ns.args[1]\\r\\n    const delay = ns.args[2]\\r\\n  \\r\\n    if (delay && delay > 0) {\\r\\n      await ns.sleep(delay)\\r\\n    }\\r\\n  \\r\\n    ns.print(`Starting operation: hack on ${target} in ${threads} threads`)\\r\\n    await ns.hack(target, { threads, stock: true })\\r\\n    ns.exit()\\r\\n  }\\r\\n  \",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"pserv-32768-40bb9d1d-4f20-4e5e-8ca4-09e5b51e35df\",\"moduleSequenceNumber\":38482,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/export async function main(ns) {\\r\\n    const target = ns.args[0]\\r\\n    const threads = ns.args[1]\\r\\n    const delay = ns.args[2]\\r\\n  \\r\\n    if (delay && delay > 0) {\\r\\n      await ns.sleep(delay)\\r\\n    }\\r\\n  \\r\\n    ns.print(`Starting operation: grow on ${target} in ${threads} threads`)\\r\\n    await ns.grow(target, { threads, stock: true })\\r\\n    ns.exit()\\r\\n  }\\r\\n  \",\"filename\":\"grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:https://danielyxie.github.io/409b3ba1-e03f-4c38-9fbf-067b23580352\",\"moduleSequenceNumber\":38554}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"pserv-32768-40bb9d1d-4f20-4e5e-8ca4-09e5b51e35df\",\"moduleSequenceNumber\":38554,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/export async function main(ns) {\\r\\n    const target = ns.args[0]\\r\\n    const threads = ns.args[1]\\r\\n    const delay = ns.args[2]\\r\\n  \\r\\n    if (delay && delay > 0) {\\r\\n      await ns.sleep(delay)\\r\\n    }\\r\\n  \\r\\n    ns.print(`Starting operation: weaken on ${target} in ${threads} threads`)\\r\\n    await ns.weaken(target, { threads, stock: true })\\r\\n    ns.exit()\\r\\n  }\\r\\n  \",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"pserv-32768-40bb9d1d-4f20-4e5e-8ca4-09e5b51e35df\",\"moduleSequenceNumber\":38484,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-32768-6d5d0c12-35a6-47d0-b72a-9907a5af3536\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-32768-6d5d0c12-35a6-47d0-b72a-9907a5af3536\",\"httpPortOpen\":false,\"ip\":\"57.7.8.9\",\"isConnectedTo\":false,\"maxRam\":32768,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":32767,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omega-net\",13993,0,\"2b32e6b8-523b-4c13-8d11-318904122fe2\"],\"dataMap\":{},\"filename\":\"grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":4.210000000000002,\"pid\":2532,\"ramUsage\":1.75,\"server\":\"pserv-32768-6d5d0c12-35a6-47d0-b72a-9907a5af3536\",\"threads\":13993,\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:https://danielyxie.github.io/4d2d8712-5c6d-466e-a7f0-83208404b5d0\",\"moduleSequenceNumber\":38555}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omega-net\",4731,0,\"503bbae0-48a0-42b5-98aa-c9a74c14affa\"],\"dataMap\":{},\"filename\":\"weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":4.210000000000002,\"pid\":2533,\"ramUsage\":1.75,\"server\":\"pserv-32768-6d5d0c12-35a6-47d0-b72a-9907a5af3536\",\"threads\":4731,\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:https://danielyxie.github.io/003b617d-0c91-41eb-a41e-c618a979be33\",\"moduleSequenceNumber\":38556}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/export async function main(ns) {\\r\\n    const target = ns.args[0]\\r\\n    const threads = ns.args[1]\\r\\n    const delay = ns.args[2]\\r\\n  \\r\\n    if (delay && delay > 0) {\\r\\n      await ns.sleep(delay)\\r\\n    }\\r\\n  \\r\\n    ns.print(`Starting operation: hack on ${target} in ${threads} threads`)\\r\\n    await ns.hack(target, { threads, stock: true })\\r\\n    ns.exit()\\r\\n  }\\r\\n  \",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"pserv-32768-6d5d0c12-35a6-47d0-b72a-9907a5af3536\",\"moduleSequenceNumber\":38488,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/export async function main(ns) {\\r\\n    const target = ns.args[0]\\r\\n    const threads = ns.args[1]\\r\\n    const delay = ns.args[2]\\r\\n  \\r\\n    if (delay && delay > 0) {\\r\\n      await ns.sleep(delay)\\r\\n    }\\r\\n  \\r\\n    ns.print(`Starting operation: grow on ${target} in ${threads} threads`)\\r\\n    await ns.grow(target, { threads, stock: true })\\r\\n    ns.exit()\\r\\n  }\\r\\n  \",\"filename\":\"grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:https://danielyxie.github.io/4d2d8712-5c6d-466e-a7f0-83208404b5d0\",\"moduleSequenceNumber\":38555}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"pserv-32768-6d5d0c12-35a6-47d0-b72a-9907a5af3536\",\"moduleSequenceNumber\":38555,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/export async function main(ns) {\\r\\n    const target = ns.args[0]\\r\\n    const threads = ns.args[1]\\r\\n    const delay = ns.args[2]\\r\\n  \\r\\n    if (delay && delay > 0) {\\r\\n      await ns.sleep(delay)\\r\\n    }\\r\\n  \\r\\n    ns.print(`Starting operation: weaken on ${target} in ${threads} threads`)\\r\\n    await ns.weaken(target, { threads, stock: true })\\r\\n    ns.exit()\\r\\n  }\\r\\n  \",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:https://danielyxie.github.io/003b617d-0c91-41eb-a41e-c618a979be33\",\"moduleSequenceNumber\":38556}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"pserv-32768-6d5d0c12-35a6-47d0-b72a-9907a5af3536\",\"moduleSequenceNumber\":38556,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-32768-9e8143b4-00ff-4bdc-998a-b6449e2b8a0f\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-32768-9e8143b4-00ff-4bdc-998a-b6449e2b8a0f\",\"httpPortOpen\":false,\"ip\":\"40.6.9.4\",\"isConnectedTo\":false,\"maxRam\":32768,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":32767,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omega-net\",18724,0,\"35bb4829-0ec1-4262-a965-e00698b5ec26\"],\"dataMap\":{},\"filename\":\"weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":4.210000000000002,\"pid\":2534,\"ramUsage\":1.75,\"server\":\"pserv-32768-9e8143b4-00ff-4bdc-998a-b6449e2b8a0f\",\"threads\":18724,\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:https://danielyxie.github.io/1ca418e6-9d97-4378-bfa9-3db2f597ac2f\",\"moduleSequenceNumber\":38557}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/export async function main(ns) {\\r\\n    const target = ns.args[0]\\r\\n    const threads = ns.args[1]\\r\\n    const delay = ns.args[2]\\r\\n  \\r\\n    if (delay && delay > 0) {\\r\\n      await ns.sleep(delay)\\r\\n    }\\r\\n  \\r\\n    ns.print(`Starting operation: hack on ${target} in ${threads} threads`)\\r\\n    await ns.hack(target, { threads, stock: true })\\r\\n    ns.exit()\\r\\n  }\\r\\n  \",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"pserv-32768-9e8143b4-00ff-4bdc-998a-b6449e2b8a0f\",\"moduleSequenceNumber\":38494,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/export async function main(ns) {\\r\\n    const target = ns.args[0]\\r\\n    const threads = ns.args[1]\\r\\n    const delay = ns.args[2]\\r\\n  \\r\\n    if (delay && delay > 0) {\\r\\n      await ns.sleep(delay)\\r\\n    }\\r\\n  \\r\\n    ns.print(`Starting operation: grow on ${target} in ${threads} threads`)\\r\\n    await ns.grow(target, { threads, stock: true })\\r\\n    ns.exit()\\r\\n  }\\r\\n  \",\"filename\":\"grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"pserv-32768-9e8143b4-00ff-4bdc-998a-b6449e2b8a0f\",\"moduleSequenceNumber\":38495,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/export async function main(ns) {\\r\\n    const target = ns.args[0]\\r\\n    const threads = ns.args[1]\\r\\n    const delay = ns.args[2]\\r\\n  \\r\\n    if (delay && delay > 0) {\\r\\n      await ns.sleep(delay)\\r\\n    }\\r\\n  \\r\\n    ns.print(`Starting operation: weaken on ${target} in ${threads} threads`)\\r\\n    await ns.weaken(target, { threads, stock: true })\\r\\n    ns.exit()\\r\\n  }\\r\\n  \",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:https://danielyxie.github.io/1ca418e6-9d97-4378-bfa9-3db2f597ac2f\",\"moduleSequenceNumber\":38557}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"pserv-32768-9e8143b4-00ff-4bdc-998a-b6449e2b8a0f\",\"moduleSequenceNumber\":38557,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}}}","CompaniesSave":"{\"ECorp\":{\"ctor\":\"Company\",\"data\":{\"name\":\"ECorp\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":3,\"salaryMultiplier\":3,\"jobStatReqOffset\":249,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.018,\"isMegacorp\":false}},\"MegaCorp\":{\"ctor\":\"Company\",\"data\":{\"name\":\"MegaCorp\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":3,\"salaryMultiplier\":3,\"jobStatReqOffset\":249,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":1.9157,\"isMegacorp\":false}},\"Bachman & Associates\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Bachman & Associates\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.6,\"salaryMultiplier\":2.6,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.018,\"isMegacorp\":false}},\"Blade Industries\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Blade Industries\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.75,\"salaryMultiplier\":2.75,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.018,\"isMegacorp\":false}},\"NWO\":{\"ctor\":\"Company\",\"data\":{\"name\":\"NWO\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.75,\"salaryMultiplier\":2.75,\"jobStatReqOffset\":249,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.018,\"isMegacorp\":false}},\"Clarke Incorporated\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Clarke Incorporated\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.25,\"salaryMultiplier\":2.25,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.018,\"isMegacorp\":false}},\"OmniTek Incorporated\":{\"ctor\":\"Company\",\"data\":{\"name\":\"OmniTek Incorporated\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.25,\"salaryMultiplier\":2.25,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.4566,\"isMegacorp\":false}},\"Four Sigma\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Four Sigma\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.5,\"salaryMultiplier\":2.5,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.018,\"isMegacorp\":false}},\"KuaiGong International\":{\"ctor\":\"Company\",\"data\":{\"name\":\"KuaiGong International\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.2,\"salaryMultiplier\":2.2,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.6973,\"isMegacorp\":false}},\"Fulcrum Technologies\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Fulcrum Technologies\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true},\"expMultiplier\":2,\"salaryMultiplier\":2,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.018,\"isMegacorp\":false}},\"Storm Technologies\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Storm Technologies\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true},\"expMultiplier\":1.8,\"salaryMultiplier\":1.8,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.018,\"isMegacorp\":false}},\"DefComm\":{\"ctor\":\"Company\",\"data\":{\"name\":\"DefComm\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.75,\"salaryMultiplier\":1.75,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.018,\"isMegacorp\":false}},\"Helios Labs\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Helios Labs\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.8,\"salaryMultiplier\":1.8,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.018,\"isMegacorp\":false}},\"VitaLife\":{\"ctor\":\"Company\",\"data\":{\"name\":\"VitaLife\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.8,\"salaryMultiplier\":1.8,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.018,\"isMegacorp\":false}},\"Icarus Microsystems\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Icarus Microsystems\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.9,\"salaryMultiplier\":1.9,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.018,\"isMegacorp\":false}},\"Universal Energy\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Universal Energy\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":2,\"salaryMultiplier\":2,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":19.6689,\"isMegacorp\":false}},\"Galactic Cybersystems\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Galactic Cybersystems\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.9,\"salaryMultiplier\":1.9,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.018,\"isMegacorp\":false}},\"AeroCorp\":{\"ctor\":\"Company\",\"data\":{\"name\":\"AeroCorp\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Operations Manager\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.7,\"salaryMultiplier\":1.7,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.018,\"isMegacorp\":false}},\"Omnia Cybersystems\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Omnia Cybersystems\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Operations Manager\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.7,\"salaryMultiplier\":1.7,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.23,\"isMegacorp\":false}},\"Solaris Space Systems\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Solaris Space Systems\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Operations Manager\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.7,\"salaryMultiplier\":1.7,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.0847,\"isMegacorp\":false}},\"DeltaOne\":{\"ctor\":\"Company\",\"data\":{\"name\":\"DeltaOne\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Operations Manager\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.6,\"salaryMultiplier\":1.6,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.0303,\"isMegacorp\":false}},\"Global Pharmaceuticals\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Global Pharmaceuticals\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.8,\"salaryMultiplier\":1.8,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.018,\"isMegacorp\":false}},\"Nova Medical\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Nova Medical\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.75,\"salaryMultiplier\":1.75,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":8.8562,\"isMegacorp\":false}},\"Central Intelligence Agency\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Central Intelligence Agency\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true,\"Field Agent\":true,\"Secret Agent\":true,\"Special Operative\":true},\"expMultiplier\":2,\"salaryMultiplier\":2,\"jobStatReqOffset\":149,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":3.5443,\"isMegacorp\":false}},\"National Security Agency\":{\"ctor\":\"Company\",\"data\":{\"name\":\"National Security Agency\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true,\"Field Agent\":true,\"Secret Agent\":true,\"Special Operative\":true},\"expMultiplier\":2,\"salaryMultiplier\":2,\"jobStatReqOffset\":149,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":30.1299,\"isMegacorp\":false}},\"Watchdog Security\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Watchdog Security\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true,\"Field Agent\":true,\"Secret Agent\":true,\"Special Operative\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.5,\"salaryMultiplier\":1.5,\"jobStatReqOffset\":124,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.018,\"isMegacorp\":false}},\"LexoCorp\":{\"ctor\":\"Company\",\"data\":{\"name\":\"LexoCorp\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.4,\"salaryMultiplier\":1.4,\"jobStatReqOffset\":99,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.018,\"isMegacorp\":false}},\"Rho Construction\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Rho Construction\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true},\"expMultiplier\":1.3,\"salaryMultiplier\":1.3,\"jobStatReqOffset\":49,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.018,\"isMegacorp\":false}},\"Alpha Enterprises\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Alpha Enterprises\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.5,\"salaryMultiplier\":1.5,\"jobStatReqOffset\":99,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.8437,\"isMegacorp\":false}},\"Aevum Police Headquarters\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Aevum Police Headquarters\",\"info\":\"\",\"companyPositions\":{\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true},\"expMultiplier\":1.3,\"salaryMultiplier\":1.3,\"jobStatReqOffset\":99,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.018,\"isMegacorp\":false}},\"SysCore Securities\":{\"ctor\":\"Company\",\"data\":{\"name\":\"SysCore Securities\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true},\"expMultiplier\":1.3,\"salaryMultiplier\":1.3,\"jobStatReqOffset\":124,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.018,\"isMegacorp\":false}},\"CompuTek\":{\"ctor\":\"Company\",\"data\":{\"name\":\"CompuTek\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true},\"expMultiplier\":1.2,\"salaryMultiplier\":1.2,\"jobStatReqOffset\":74,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.018,\"isMegacorp\":false}},\"NetLink Technologies\":{\"ctor\":\"Company\",\"data\":{\"name\":\"NetLink Technologies\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true},\"expMultiplier\":1.2,\"salaryMultiplier\":1.2,\"jobStatReqOffset\":99,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.018,\"isMegacorp\":false}},\"Carmichael Security\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Carmichael Security\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Field Agent\":true,\"Secret Agent\":true,\"Special Operative\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.2,\"salaryMultiplier\":1.2,\"jobStatReqOffset\":74,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.2257,\"isMegacorp\":false}},\"FoodNStuff\":{\"ctor\":\"Company\",\"data\":{\"name\":\"FoodNStuff\",\"info\":\"\",\"companyPositions\":{\"Employee\":true,\"Part-time Employee\":true},\"expMultiplier\":1,\"salaryMultiplier\":1,\"jobStatReqOffset\":0,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":2.8355,\"isMegacorp\":false}},\"Joe's Guns\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Joe's Guns\",\"info\":\"\",\"companyPositions\":{\"Employee\":true,\"Part-time Employee\":true},\"expMultiplier\":1,\"salaryMultiplier\":1,\"jobStatReqOffset\":0,\"isPlayerEmployed\":false,\"playerReputation\":55.56595374211235,\"favor\":66.382,\"isMegacorp\":false}},\"Omega Software\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Omega Software\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true},\"expMultiplier\":1.1,\"salaryMultiplier\":1.1,\"jobStatReqOffset\":49,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.018,\"isMegacorp\":false}},\"Noodle Bar\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Noodle Bar\",\"info\":\"\",\"companyPositions\":{\"Waiter\":true,\"Part-time Waiter\":true},\"expMultiplier\":1,\"salaryMultiplier\":1,\"jobStatReqOffset\":0,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.018,\"isMegacorp\":false}}}","FactionsSave":"{\"Illuminati\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Synthetic Heart\",\"Synfibril Muscle\",\"NEMEAN Subdermal Weave\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"NeuroFlux Governor\",\"QLink\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Illuminati\",\"playerReputation\":0}},\"Daedalus\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Synthetic Heart\",\"Synfibril Muscle\",\"NEMEAN Subdermal Weave\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"NeuroFlux Governor\",\"The Red Pill\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Daedalus\",\"playerReputation\":0}},\"The Covenant\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Augmented Targeting III\",\"Synthetic Heart\",\"Synfibril Muscle\",\"Combat Rib III\",\"NEMEAN Subdermal Weave\",\"Graphene Bone Lacings\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"NeuroFlux Governor\",\"SPTN-97 Gene Modification\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"The Covenant\",\"playerReputation\":0}},\"ECorp\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Graphene Bionic Spine Upgrade\",\"Graphene Bionic Legs Upgrade\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"PC Direct-Neural Interface\",\"PC Direct-Neural Interface Optimization Submodule\",\"NeuroFlux Governor\",\"ECorp HVMind Implant\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"ECorp\",\"playerReputation\":0}},\"MegaCorp\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Graphene Bionic Legs Upgrade\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"ADR-V1 Pheromone Gene\",\"NeuroFlux Governor\",\"CordiARC Fusion Reactor\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"MegaCorp\",\"playerReputation\":0}},\"Bachman & Associates\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Enhanced Social Interaction Implant\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"Speech Enhancement\",\"FocusWire\",\"ADR-V2 Pheromone Gene\",\"NeuroFlux Governor\",\"SmartJaw\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Bachman & Associates\",\"playerReputation\":0}},\"Blade Industries\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Synfibril Muscle\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Nanofiber Weave\",\"Bionic Spine\",\"Bionic Legs\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"PC Direct-Neural Interface\",\"PC Direct-Neural Interface Optimization Submodule\",\"NeuroFlux Governor\",\"HyperSight Corneal Implant\",\"Neotra\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Blade Industries\",\"playerReputation\":0}},\"NWO\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Synthetic Heart\",\"Synfibril Muscle\",\"Enhanced Social Interaction Implant\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"ADR-V1 Pheromone Gene\",\"NeuroFlux Governor\",\"Neurotrainer III\",\"Power Recirculation Core\",\"Xanipher\",\"Hydroflame Left Arm\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"NWO\",\"playerReputation\":0}},\"Clarke Incorporated\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Enhanced Social Interaction Implant\",\"Neuralstimulator\",\"Neuronal Densification\",\"Nuoptimal Nootropic Injector Implant\",\"Speech Enhancement\",\"FocusWire\",\"ADR-V2 Pheromone Gene\",\"NeuroFlux Governor\",\"nextSENS Gene Modification\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Clarke Incorporated\",\"playerReputation\":0}},\"OmniTek Incorporated\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Nanofiber Weave\",\"Bionic Spine\",\"Bionic Legs\",\"Enhanced Social Interaction Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"PC Direct-Neural Interface\",\"NeuroFlux Governor\",\"OmniTek InfoLoad\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"OmniTek Incorporated\",\"playerReputation\":0}},\"Four Sigma\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Enhanced Social Interaction Implant\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"Speech Enhancement\",\"FocusWire\",\"PC Direct-Neural Interface\",\"ADR-V1 Pheromone Gene\",\"ADR-V2 Pheromone Gene\",\"NeuroFlux Governor\",\"Neurotrainer III\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Four Sigma\",\"playerReputation\":0}},\"KuaiGong International\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Synthetic Heart\",\"Synfibril Muscle\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Bionic Spine\",\"Bionic Legs\",\"Embedded Netburner Module Core V2 Upgrade\",\"Speech Enhancement\",\"FocusWire\",\"NeuroFlux Governor\",\"HyperSight Corneal Implant\",\"Photosynthetic Cells\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"KuaiGong International\",\"playerReputation\":0}},\"Fulcrum Secret Technologies\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Synthetic Heart\",\"Synfibril Muscle\",\"Nanofiber Weave\",\"NEMEAN Subdermal Weave\",\"Graphene Bone Lacings\",\"Graphene Bionic Spine Upgrade\",\"Graphene Bionic Legs Upgrade\",\"Artificial Bio-neural Network Implant\",\"Enhanced Myelin Sheathing\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"PC Direct-Neural Interface Optimization Submodule\",\"PC Direct-Neural Interface NeuroNet Injector\",\"NeuroFlux Governor\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Fulcrum Secret Technologies\",\"playerReputation\":0}},\"BitRunners\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"Artificial Bio-neural Network Implant\",\"Enhanced Myelin Sheathing\",\"DataJack\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Neural Accelerator\",\"Cranial Signal Processors - Gen III\",\"Cranial Signal Processors - Gen IV\",\"Cranial Signal Processors - Gen V\",\"NeuroFlux Governor\",\"Neurotrainer II\",\"BitRunners Neurolink\"],\"favor\":4.6186,\"isBanned\":false,\"isMember\":true,\"name\":\"BitRunners\",\"playerReputation\":1876.0331387122733}},\"The Black Hand\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"Artificial Synaptic Potentiation\",\"Enhanced Myelin Sheathing\",\"DataJack\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Neuralstimulator\",\"Cranial Signal Processors - Gen III\",\"Cranial Signal Processors - Gen IV\",\"NeuroFlux Governor\",\"The Black Hand\"],\"favor\":135.053,\"isBanned\":false,\"isMember\":true,\"name\":\"The Black Hand\",\"playerReputation\":139710.46792917402}},\"NiteSec\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"BitWire\",\"Artificial Synaptic Potentiation\",\"Neural-Retention Enhancement\",\"DataJack\",\"Embedded Netburner Module\",\"Cranial Signal Processors - Gen II\",\"Cranial Signal Processors - Gen III\",\"NeuroFlux Governor\",\"Neurotrainer II\",\"CRTX42-AA Gene Modification\"],\"favor\":123.6745,\"isBanned\":false,\"isMember\":false,\"name\":\"NiteSec\",\"playerReputation\":0}},\"Aevum\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Wired Reflexes\",\"Speech Processor Implant\",\"Synaptic Enhancement Implant\",\"Neuralstimulator\",\"NeuroFlux Governor\",\"Neurotrainer I\",\"PCMatrix\"],\"favor\":0,\"isBanned\":true,\"isMember\":false,\"name\":\"Aevum\",\"playerReputation\":0}},\"Chongqing\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Speech Processor Implant\",\"DataJack\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"NeuroFlux Governor\",\"Neuregen Gene Modification\"],\"favor\":74.3981,\"isBanned\":true,\"isMember\":false,\"name\":\"Chongqing\",\"playerReputation\":0}},\"Ishima\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Augmented Targeting I\",\"Combat Rib I\",\"Wired Reflexes\",\"Speech Processor Implant\",\"Neuralstimulator\",\"NeuroFlux Governor\",\"INFRARET Enhancement\"],\"favor\":8.0862,\"isBanned\":true,\"isMember\":false,\"name\":\"Ishima\",\"playerReputation\":0}},\"New Tokyo\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Speech Processor Implant\",\"DataJack\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"NeuroFlux Governor\",\"NutriGen Implant\"],\"favor\":8.0888,\"isBanned\":true,\"isMember\":false,\"name\":\"New Tokyo\",\"playerReputation\":0}},\"Sector-12\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"Augmented Targeting I\",\"Augmented Targeting II\",\"Wired Reflexes\",\"Speech Processor Implant\",\"Neuralstimulator\",\"NeuroFlux Governor\",\"CashRoot Starter Kit\"],\"favor\":38.5722,\"isBanned\":true,\"isMember\":false,\"name\":\"Sector-12\",\"playerReputation\":0}},\"Volhaven\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"Combat Rib I\",\"Combat Rib II\",\"Wired Reflexes\",\"Speech Processor Implant\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"NeuroFlux Governor\",\"DermaForce Particle Barrier\"],\"favor\":1,\"isBanned\":false,\"isMember\":true,\"name\":\"Volhaven\",\"playerReputation\":1349.6572771265862}},\"Speakers for the Dead\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Unstable Circadian Modulator\",\"Synthetic Heart\",\"Synfibril Muscle\",\"Nanofiber Weave\",\"Wired Reflexes\",\"Bionic Spine\",\"Bionic Legs\",\"Speech Enhancement\",\"The Shadow's Simulacrum\",\"NeuroFlux Governor\",\"Graphene BrachiBlades Upgrade\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Speakers for the Dead\",\"playerReputation\":0}},\"The Dark Army\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"HemoRecirculator\",\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Nanofiber Weave\",\"Wired Reflexes\",\"The Shadow's Simulacrum\",\"NeuroFlux Governor\",\"Power Recirculation Core\",\"Graphene Bionic Arms Upgrade\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"The Dark Army\",\"playerReputation\":0}},\"The Syndicate\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"HemoRecirculator\",\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Nanofiber Weave\",\"NEMEAN Subdermal Weave\",\"Wired Reflexes\",\"Bionic Spine\",\"Bionic Legs\",\"ADR-V1 Pheromone Gene\",\"The Shadow's Simulacrum\",\"NeuroFlux Governor\",\"Power Recirculation Core\",\"BrachiBlades\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"The Syndicate\",\"playerReputation\":0}},\"Silhouette\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Speech Processor Implant\",\"TITN-41 Gene-Modification Injection\",\"ADR-V2 Pheromone Gene\",\"NeuroFlux Governor\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Silhouette\",\"playerReputation\":0}},\"Tetrads\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"HemoRecirculator\",\"NeuroFlux Governor\",\"LuminCloaking-V1 Skin Implant\",\"LuminCloaking-V2 Skin Implant\",\"Power Recirculation Core\",\"Bionic Arms\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Tetrads\",\"playerReputation\":0}},\"Slum Snakes\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Augmented Targeting I\",\"Combat Rib I\",\"Wired Reflexes\",\"NeuroFlux Governor\",\"LuminCloaking-V1 Skin Implant\",\"LuminCloaking-V2 Skin Implant\",\"SmartSonar Implant\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Slum Snakes\",\"playerReputation\":0}},\"Netburners\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"Hacknet Node CPU Architecture Neural-Upload\",\"Hacknet Node Cache Architecture Neural-Upload\",\"Hacknet Node NIC Architecture Neural-Upload\",\"Hacknet Node Kernel Direct-Neural Interface\",\"Hacknet Node Core Direct-Neural Interface\",\"NeuroFlux Governor\"],\"favor\":91.6858,\"isBanned\":false,\"isMember\":true,\"name\":\"Netburners\",\"playerReputation\":25276.63973603098}},\"Tian Di Hui\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Nanofiber Weave\",\"Wired Reflexes\",\"Speech Processor Implant\",\"Nuoptimal Nootropic Injector Implant\",\"Speech Enhancement\",\"ADR-V1 Pheromone Gene\",\"NeuroFlux Governor\",\"Social Negotiation Assistant (S.N.A)\",\"Neuroreceptor Management Implant\"],\"favor\":94.4288,\"isBanned\":false,\"isMember\":false,\"name\":\"Tian Di Hui\",\"playerReputation\":0}},\"CyberSec\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"BitWire\",\"Synaptic Enhancement Implant\",\"Cranial Signal Processors - Gen I\",\"Cranial Signal Processors - Gen II\",\"NeuroFlux Governor\",\"Neurotrainer I\"],\"favor\":112.6372,\"isBanned\":false,\"isMember\":false,\"name\":\"CyberSec\",\"playerReputation\":0}},\"Bladeburners\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"EsperTech Bladeburner Eyewear\",\"EMS-4 Recombination\",\"ORION-MKIV Shoulder\",\"Hyperion Plasma Cannon V1\",\"Hyperion Plasma Cannon V2\",\"GOLEM Serum\",\"Vangelis Virus\",\"Vangelis Virus 3.0\",\"I.N.T.E.R.L.I.N.K.E.D\",\"Blade's Runners\",\"BLADE-51b Tesla Armor\",\"BLADE-51b Tesla Armor: Power Cells Upgrade\",\"BLADE-51b Tesla Armor: Energy Shielding Upgrade\",\"BLADE-51b Tesla Armor: Unibeam Upgrade\",\"BLADE-51b Tesla Armor: Omnibeam Upgrade\",\"BLADE-51b Tesla Armor: IPU Upgrade\",\"The Blade's Simulacrum\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Bladeburners\",\"playerReputation\":0}},\"Church of the Machine God\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Stanek's Gift - Genesis\",\"Stanek's Gift - Awakening\",\"Stanek's Gift - Serenity\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Church of the Machine God\",\"playerReputation\":0}}}","AliasesSave":"{\"vi\":\"nano\",\"cl\":\"cls\"}","GlobalAliasesSave":"{}","MessagesSave":"{\"j0.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"j0.msg\",\"msg\":\"I know you can sense it. I know you're searching for it. It's why you spend night after night at your computer. <br><br>It's real, I've seen it. And I can help you find it. But not right now. You're not ready yet.<br><br>Use this program to track your progress<br><br>The fl1ght.exe program was added to your home computer<br><br>-jump3R\",\"recvd\":true}},\"j1.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"j1.msg\",\"msg\":\"Soon you will be contacted by a hacking group known as CyberSec. They can help you with your search. <br><br>You should join them, garner their favor, and exploit them for their Augmentations. But do not trust them. They are not what they seem. No one is.<br><br>-jump3R\",\"recvd\":true}},\"j2.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"j2.msg\",\"msg\":\"Do not try to save the world. There is no world to save. If you want to find the truth, worry only about yourself. Ethics and morals will get you killed. <br><br>Watch out for a hacking group known as NiteSec.<br><br>-jump3R\",\"recvd\":true}},\"j3.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"j3.msg\",\"msg\":\"You must learn to walk before you can run. And you must run before you can fly. Look for the black hand. <br><br>I.I.I.I <br><br>-jump3R\",\"recvd\":true}},\"j4.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"j4.msg\",\"msg\":\"To find what you are searching for, you must understand the bits. The bits are all around us. The runners will help you.<br><br>-jump3R\",\"recvd\":true}},\"csec-test.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"csec-test.msg\",\"msg\":\"We've been watching you. Your skills are very impressive. But you're wasting your talents. If you join us, you can put your skills to good use and change the world for the better. If you join us, we can unlock your full potential. <br><br>But first, you must pass our test. Find and install the backdoor on our server. <br><br>-CyberSec\",\"recvd\":true}},\"nitesec-test.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"nitesec-test.msg\",\"msg\":\"People say that the corrupted governments and corporations rule the world. Yes, maybe they do. But do you know who everyone really fears? People like us. Because they can't hide from us. Because they can't fight shadows and ideas with bullets. <br><br>Join us, and people will fear you, too. <br><br>Find and install the backdoor on our server. Then, we will contact you again.<br><br>-NiteSec\",\"recvd\":true}},\"19dfj3l1nd.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"19dfj3l1nd.msg\",\"msg\":\"We know what you are doing. We know what drives you. We know what you are looking for. <br><br> We can help you find the answers.<br><br>run4theh111z\",\"recvd\":true}},\"icarus.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"icarus.msg\",\"msg\":\"@)(#V%*N)@(#*)*C)@#%*)*V)@#(*%V@)(#VN%*)@#(*%<br>)@B(*#%)@)M#B*%V)____FIND___#$@)#%(B*)@#(*%B)<br>@_#(%_@#M(BDSPOMB__THE-CAVE_#)$(*@#$)@#BNBEGB<br>DFLSMFVMV)#@($*)@#*$MV)@#(*$V)M#(*$)M@(#*VM$)\",\"recvd\":false}}}","StockMarketSave":"{\"ECorp\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"ECorp\",\"symbol\":\"ECP\",\"price\":30128.80094166424,\"lastPrice\":30236.98235744444,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.42,\"b\":true,\"otlkMag\":19.837144770229163,\"otlkMagForecast\":68.91463228760382,\"cap\":342801022,\"spreadPerc\":0.5,\"shareTxForMovement\":34576,\"shareTxUntilMovement\":34576,\"totalShares\":95200000,\"maxShares\":19000000}},\"MegaCorp\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"MegaCorp\",\"symbol\":\"MGCP\",\"price\":42043.812293590694,\"lastPrice\":42194.77612210562,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.42,\"b\":false,\"otlkMag\":18.84814030117582,\"otlkMagForecast\":30.42669160487231,\"cap\":565495604,\"spreadPerc\":0.5,\"shareTxForMovement\":62024,\"shareTxUntilMovement\":62024,\"totalShares\":72400000,\"maxShares\":14500000}},\"Blade Industries\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Blade Industries\",\"symbol\":\"BLD\",\"price\":32744.02793090558,\"lastPrice\":32942.780143970114,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.71,\"b\":false,\"otlkMag\":12.786271850309978,\"otlkMagForecast\":36.949598898009434,\"cap\":208407785,\"spreadPerc\":0.3,\"shareTxForMovement\":35743,\"shareTxUntilMovement\":35743,\"totalShares\":65500000,\"maxShares\":13100000}},\"Clarke Incorporated\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Clarke Incorporated\",\"symbol\":\"CLRK\",\"price\":20527.514335135056,\"lastPrice\":20396.73370918282,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.75,\"b\":false,\"otlkMag\":12.889171821050297,\"otlkMagForecast\":38.343106131986325,\"cap\":235084831,\"spreadPerc\":0.2,\"shareTxForMovement\":64602,\"shareTxUntilMovement\":64602,\"totalShares\":90600000,\"maxShares\":18100000}},\"OmniTek Incorporated\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"OmniTek Incorporated\",\"symbol\":\"OMTK\",\"price\":36215.446138022686,\"lastPrice\":36432.173328942576,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.7,\"b\":false,\"otlkMag\":12.525188526281935,\"otlkMagForecast\":38.69208375945433,\"cap\":505836128,\"spreadPerc\":0.3,\"shareTxForMovement\":70836,\"shareTxUntilMovement\":70836,\"totalShares\":45900000,\"maxShares\":9200000}},\"Four Sigma\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Four Sigma\",\"symbol\":\"FSIG\",\"price\":50571.62960066866,\"lastPrice\":50134.451936084566,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":1.02,\"b\":true,\"otlkMag\":19.06035489093196,\"otlkMagForecast\":66.74989379389099,\"cap\":1239012974,\"spreadPerc\":0.7,\"shareTxForMovement\":67485,\"shareTxUntilMovement\":67485,\"totalShares\":32700000,\"maxShares\":6500000}},\"KuaiGong International\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"KuaiGong International\",\"symbol\":\"KGI\",\"price\":21610.027018937988,\"lastPrice\":21757.82442745393,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.8,\"b\":false,\"otlkMag\":9.138741275527309,\"otlkMagForecast\":39.73781387176188,\"cap\":357820012,\"spreadPerc\":0.2,\"shareTxForMovement\":33294,\"shareTxUntilMovement\":33294,\"totalShares\":71500000,\"maxShares\":14300000}},\"Fulcrum Technologies\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Fulcrum Technologies\",\"symbol\":\"FLCM\",\"price\":40435.69577467528,\"lastPrice\":40860.894108613764,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":1.23,\"b\":true,\"otlkMag\":14.122024286133497,\"otlkMagForecast\":66.10579723687619,\"cap\":172294409,\"spreadPerc\":0.1,\"shareTxForMovement\":79837,\"shareTxUntilMovement\":79837,\"totalShares\":66600000,\"maxShares\":13300000}},\"Storm Technologies\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Storm Technologies\",\"symbol\":\"STM\",\"price\":24838.437738594625,\"lastPrice\":25027.42642462549,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.89,\"b\":false,\"otlkMag\":6.662779079842126,\"otlkMagForecast\":43.59643361585525,\"cap\":313692105,\"spreadPerc\":0.7,\"shareTxForMovement\":98118,\"shareTxUntilMovement\":98118,\"totalShares\":55600000,\"maxShares\":11100000}},\"DefComm\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"DefComm\",\"symbol\":\"DCOMM\",\"price\":21148.91126437007,\"lastPrice\":21035.614560196467,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.63,\"b\":false,\"otlkMag\":10.362565817298588,\"otlkMagForecast\":39.499519343175116,\"cap\":420394456,\"spreadPerc\":0.6,\"shareTxForMovement\":48329,\"shareTxUntilMovement\":48329,\"totalShares\":49500000,\"maxShares\":9900000}},\"Helios Labs\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Helios Labs\",\"symbol\":\"HLS\",\"price\":18542.604188651436,\"lastPrice\":18441.70155871529,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.64,\"b\":true,\"otlkMag\":9.065544973294227,\"otlkMagForecast\":59.411277456526015,\"cap\":396783227,\"spreadPerc\":0.9,\"shareTxForMovement\":50077,\"shareTxUntilMovement\":50077,\"totalShares\":47600000,\"maxShares\":9500000}},\"VitaLife\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"VitaLife\",\"symbol\":\"VITA\",\"price\":9053.87815434396,\"lastPrice\":9111.930187046986,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.75,\"b\":false,\"otlkMag\":6.884332611748839,\"otlkMagForecast\":42.5065331730901,\"cap\":30709549,\"spreadPerc\":0.4,\"shareTxForMovement\":99014,\"shareTxUntilMovement\":99014,\"totalShares\":86700000,\"maxShares\":17300000}},\"Icarus Microsystems\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Icarus Microsystems\",\"symbol\":\"ICRS\",\"price\":28170.250775686538,\"lastPrice\":28334.015797798987,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.68,\"b\":true,\"otlkMag\":8.526615502349333,\"otlkMagForecast\":57.703937802043484,\"cap\":386213164,\"spreadPerc\":0.6,\"shareTxForMovement\":53568,\"shareTxUntilMovement\":53568,\"totalShares\":34100000,\"maxShares\":6800000}},\"Universal Energy\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Universal Energy\",\"symbol\":\"UNV\",\"price\":26362.082411847077,\"lastPrice\":26495.052282817316,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.59,\"b\":true,\"otlkMag\":9.418420833382168,\"otlkMagForecast\":60.44015817156197,\"cap\":76811927,\"spreadPerc\":0.3,\"shareTxForMovement\":51315,\"shareTxUntilMovement\":51315,\"totalShares\":41100000,\"maxShares\":8200000}},\"AeroCorp\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"AeroCorp\",\"symbol\":\"AERO\",\"price\":16354.6930112155,\"lastPrice\":16268.462744596038,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.62,\"b\":true,\"otlkMag\":5.238439205149166,\"otlkMagForecast\":56.13164686966475,\"cap\":202960393,\"spreadPerc\":0.6,\"shareTxForMovement\":62687,\"shareTxUntilMovement\":62687,\"totalShares\":51400000,\"maxShares\":10300000}},\"Omnia Cybersystems\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Omnia Cybersystems\",\"symbol\":\"OMN\",\"price\":13036.247709448206,\"lastPrice\":13118.719580239916,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.74,\"b\":true,\"otlkMag\":5.201950869398066,\"otlkMagForecast\":54.32989949359364,\"cap\":217530384,\"spreadPerc\":1,\"shareTxForMovement\":98914,\"shareTxUntilMovement\":98914,\"totalShares\":49100000,\"maxShares\":9800000}},\"Solaris Space Systems\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Solaris Space Systems\",\"symbol\":\"SLRS\",\"price\":18123.495940294913,\"lastPrice\":18233.503326502883,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.71,\"b\":false,\"otlkMag\":9.72995664916346,\"otlkMagForecast\":41.5123719351803,\"cap\":220925452,\"spreadPerc\":1.1,\"shareTxForMovement\":54396,\"shareTxUntilMovement\":54396,\"totalShares\":39600000,\"maxShares\":7900000}},\"Global Pharmaceuticals\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Global Pharmaceuticals\",\"symbol\":\"GPH\",\"price\":18676.503938952294,\"lastPrice\":18777.094598460404,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.63,\"b\":false,\"otlkMag\":10.752861757508025,\"otlkMagForecast\":39.78139356643139,\"cap\":69712413,\"spreadPerc\":0.7,\"shareTxForMovement\":54349,\"shareTxUntilMovement\":54349,\"totalShares\":30500000,\"maxShares\":6100000}},\"Nova Medical\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Nova Medical\",\"symbol\":\"NVMD\",\"price\":17192.983429889362,\"lastPrice\":17301.75226733069,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.74,\"b\":true,\"otlkMag\":5.823778262625697,\"otlkMagForecast\":55.14616548831796,\"cap\":20037563,\"spreadPerc\":1.1,\"shareTxForMovement\":96730,\"shareTxUntilMovement\":96730,\"totalShares\":35500000,\"maxShares\":7100000}},\"Watchdog Security\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Watchdog Security\",\"symbol\":\"WDS\",\"price\":9365.888561631065,\"lastPrice\":9162.233033278837,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":2.6,\"b\":true,\"otlkMag\":7.189246973636266,\"otlkMagForecast\":53.790670931071084,\"cap\":75012640,\"spreadPerc\":1.1,\"shareTxForMovement\":43677,\"shareTxUntilMovement\":43677,\"totalShares\":98900000,\"maxShares\":19800000}},\"LexoCorp\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"LexoCorp\",\"symbol\":\"LXO\",\"price\":7107.798500042299,\"lastPrice\":7036.215871977813,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":1.19,\"b\":true,\"otlkMag\":6.9092483284836215,\"otlkMagForecast\":56.011574049789914,\"cap\":67956429,\"spreadPerc\":0.7,\"shareTxForMovement\":84228,\"shareTxUntilMovement\":84228,\"totalShares\":40600000,\"maxShares\":8100000}},\"Rho Construction\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Rho Construction\",\"symbol\":\"RHOC\",\"price\":4549.893551544858,\"lastPrice\":4570.898253244809,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.54,\"b\":true,\"otlkMag\":2.172394441466141,\"otlkMagForecast\":50.91894002956293,\"cap\":40254718,\"spreadPerc\":0.5,\"shareTxForMovement\":67296,\"shareTxUntilMovement\":67296,\"totalShares\":35000000,\"maxShares\":7000000}},\"Alpha Enterprises\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Alpha Enterprises\",\"symbol\":\"APHE\",\"price\":5203.586916350075,\"lastPrice\":5120.845115883142,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":1.89,\"b\":false,\"otlkMag\":9.387397001867088,\"otlkMagForecast\":40.63903876988031,\"cap\":38427364,\"spreadPerc\":0.8,\"shareTxForMovement\":55766,\"shareTxUntilMovement\":55766,\"totalShares\":59400000,\"maxShares\":11900000}},\"SysCore Securities\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"SysCore Securities\",\"symbol\":\"SYSC\",\"price\":7016.076822416106,\"lastPrice\":7111.447085865746,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":1.59,\"b\":true,\"otlkMag\":5.592549997307872,\"otlkMagForecast\":54.477682889610975,\"cap\":175591544,\"spreadPerc\":0.9,\"shareTxForMovement\":44504,\"shareTxUntilMovement\":44504,\"totalShares\":26700000,\"maxShares\":5300000}},\"CompuTek\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"CompuTek\",\"symbol\":\"CTK\",\"price\":4174.031204535053,\"lastPrice\":4139.70211010218,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.97,\"b\":false,\"otlkMag\":1.8735570072692864,\"otlkMagForecast\":45.46206149930392,\"cap\":45860571,\"spreadPerc\":1.2,\"shareTxForMovement\":66392,\"shareTxUntilMovement\":66392,\"totalShares\":50800000,\"maxShares\":10200000}},\"NetLink Technologies\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"NetLink Technologies\",\"symbol\":\"NTLK\",\"price\":2362.0845930783335,\"lastPrice\":2292.6986090451355,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":3.54,\"b\":false,\"otlkMag\":1.3626872243606605,\"otlkMagForecast\":49.59624620221889,\"cap\":9235222,\"spreadPerc\":1.3,\"shareTxForMovement\":42106,\"shareTxUntilMovement\":42106,\"totalShares\":51700000,\"maxShares\":10300000}},\"Omega Software\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Omega Software\",\"symbol\":\"OMGA\",\"price\":6798.480692131413,\"lastPrice\":6856.60173400136,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":1,\"b\":false,\"otlkMag\":2.260372966249324,\"otlkMagForecast\":48.309696748184756,\"cap\":110112191,\"spreadPerc\":1.3,\"shareTxForMovement\":52565,\"shareTxUntilMovement\":52565,\"totalShares\":9700000,\"maxShares\":1900000}},\"FoodNStuff\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"FoodNStuff\",\"symbol\":\"FNS\",\"price\":3631.4521964026135,\"lastPrice\":3606.784324595513,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.8,\"b\":true,\"otlkMag\":2.814425366812505,\"otlkMagForecast\":52.20415379826966,\"cap\":74272017,\"spreadPerc\":1,\"shareTxForMovement\":83049,\"shareTxUntilMovement\":83049,\"totalShares\":12400000,\"maxShares\":2500000}},\"Sigma Cosmetics\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Sigma Cosmetics\",\"symbol\":\"SGC\",\"price\":2190.6930945813256,\"lastPrice\":2164.78329899011,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":1.4,\"b\":false,\"otlkMag\":5.289892765765928,\"otlkMagForecast\":51.74905075670423,\"cap\":34220918,\"spreadPerc\":0.8,\"shareTxForMovement\":40706,\"shareTxUntilMovement\":40706,\"totalShares\":10100000,\"maxShares\":2000000}},\"Joe's Guns\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Joe's Guns\",\"symbol\":\"JGN\",\"price\":498.6993716663769,\"lastPrice\":484.8950983393544,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":3.33,\"b\":true,\"otlkMag\":6.608380795165116,\"otlkMagForecast\":51.0143137743725,\"cap\":8190091,\"spreadPerc\":0.8,\"shareTxForMovement\":30079,\"shareTxUntilMovement\":30079,\"totalShares\":87100000,\"maxShares\":17400000}},\"Catalyst Ventures\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Catalyst Ventures\",\"symbol\":\"CTYS\",\"price\":1909.434596564758,\"lastPrice\":1934.5735405534494,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":1.54,\"b\":true,\"otlkMag\":15.017755809449016,\"otlkMagForecast\":64.10462314154151,\"cap\":11891338,\"spreadPerc\":1.2,\"shareTxForMovement\":45586,\"shareTxUntilMovement\":45586,\"totalShares\":77900000,\"maxShares\":15600000}},\"Microdyne Technologies\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Microdyne Technologies\",\"symbol\":\"MDYN\",\"price\":30110.52688806559,\"lastPrice\":30316.461745953813,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.8,\"b\":false,\"otlkMag\":7.789580965728466,\"otlkMagForecast\":41.7809066396367,\"cap\":364279961,\"spreadPerc\":0.9,\"shareTxForMovement\":190580,\"shareTxUntilMovement\":190580,\"totalShares\":13400000,\"maxShares\":2700000}},\"Titan Laboratories\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Titan Laboratories\",\"symbol\":\"TITN\",\"price\":19099.774305821105,\"lastPrice\":18986.15384197642,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.7,\"b\":true,\"otlkMag\":12.474119481962987,\"otlkMagForecast\":61.88902852574672,\"cap\":468510955,\"spreadPerc\":0.2,\"shareTxForMovement\":176116,\"shareTxUntilMovement\":176116,\"totalShares\":20900000,\"maxShares\":4200000}},\"Orders\":{\"ECP\":[],\"MGCP\":[],\"BLD\":[],\"CLRK\":[],\"OMTK\":[],\"FSIG\":[],\"KGI\":[],\"FLCM\":[],\"STM\":[],\"DCOMM\":[],\"HLS\":[],\"VITA\":[],\"ICRS\":[],\"UNV\":[],\"AERO\":[],\"OMN\":[],\"SLRS\":[],\"GPH\":[],\"NVMD\":[],\"WDS\":[],\"LXO\":[],\"RHOC\":[],\"APHE\":[],\"SYSC\":[],\"CTK\":[],\"NTLK\":[],\"OMGA\":[],\"FNS\":[],\"SGC\":[],\"JGN\":[],\"CTYS\":[],\"MDYN\":[],\"TITN\":[]},\"storedCycles\":38064,\"lastUpdate\":1642758746962,\"ticksUntilCycle\":2}","SettingsSave":"{\"ActiveScriptsServerPageSize\":100,\"ActiveScriptsScriptPageSize\":10,\"AutosaveInterval\":30,\"CodeInstructionRunTime\":5,\"DisableASCIIArt\":false,\"DisableHotkeys\":false,\"DisableTextEffects\":false,\"DisableOverviewProgressBars\":false,\"EnableBashHotkeys\":false,\"TimestampsFormat\":\"\",\"Locale\":\"en\",\"MaxLogCapacity\":500,\"MaxPortCapacity\":50,\"MaxTerminalCapacity\":500,\"OwnedAugmentationsOrder\":1,\"PurchaseAugmentationsOrder\":2,\"SaveGameOnFileSave\":true,\"SuppressBuyAugmentationConfirmation\":false,\"SuppressFactionInvites\":false,\"SuppressMessages\":false,\"SuppressTravelConfirmation\":false,\"SuppressBladeburnerPopup\":false,\"SuppressTIXPopup\":false,\"SuppressSavedGameToast\":false,\"UseIEC60027_2\":false,\"ExcludeRunningScriptsFromSave\":false,\"IsSidebarOpened\":true,\"MonacoTheme\":\"monokai\",\"MonacoInsertSpaces\":true,\"MonacoFontSize\":16,\"MonacoVim\":false,\"MonacoWordWrap\":\"off\",\"theme\":{\"primarylight\":\"#0f0\",\"primary\":\"#0c0\",\"primarydark\":\"#090\",\"successlight\":\"#0f0\",\"success\":\"#0c0\",\"successdark\":\"#090\",\"errorlight\":\"#f00\",\"error\":\"#c00\",\"errordark\":\"#900\",\"secondarylight\":\"#AAA\",\"secondary\":\"#888\",\"secondarydark\":\"#666\",\"warninglight\":\"#ff0\",\"warning\":\"#cc0\",\"warningdark\":\"#990\",\"infolight\":\"#69f\",\"info\":\"#36c\",\"infodark\":\"#039\",\"welllight\":\"#444\",\"well\":\"#222\",\"white\":\"#fff\",\"black\":\"#000\",\"hp\":\"#dd3434\",\"money\":\"#ffd700\",\"hack\":\"#adff2f\",\"combat\":\"#faffdf\",\"cha\":\"#a671d1\",\"int\":\"#6495ed\",\"rep\":\"#faffdf\",\"disabled\":\"#66cfbc\",\"backgroundprimary\":\"#000\",\"backgroundsecondary\":\"#000\",\"button\":\"#333\"},\"styles\":{\"lineHeight\":1.5,\"fontFamily\":\"Lucida Console, Lucida Sans Unicode, Fira Mono, Consolas, Courier New, Courier, monospace, Times New Roman\"},\"overview\":{\"x\":0,\"y\":1,\"opened\":true}}","VersionSave":"10","AllGangsSave":"","LastExportBonus":"1642758747091","StaneksGiftSave":"{\"ctor\":\"StaneksGift\",\"data\":{\"storedCycles\":0,\"fragments\":[]}}","SaveTimestamp":"1642758747117"}}