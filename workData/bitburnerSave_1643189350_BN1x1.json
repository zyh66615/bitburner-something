{"ctor":"BitburnerSaveObject","data":{"PlayerSave":"{\"ctor\":\"PlayerObject\",\"data\":{\"hacking\":2765,\"hp\":10,\"max_hp\":10,\"strength\":2,\"defense\":1,\"dexterity\":2,\"agility\":1,\"charisma\":1,\"intelligence\":0,\"hacking_chance_mult\":2.1789277118290906,\"hacking_speed_mult\":2.2330868672576503,\"hacking_money_mult\":6.280552979558883,\"hacking_grow_mult\":3.815771641219914,\"hacking_exp\":5757332981.118169,\"strength_exp\":0,\"defense_exp\":0,\"dexterity_exp\":0,\"agility_exp\":0,\"charisma_exp\":0,\"intelligence_exp\":0,\"hacking_mult\":5.326292070005863,\"strength_mult\":2.0060056628127545,\"defense_mult\":1.7443527502719607,\"dexterity_mult\":2.7803238486584783,\"agility_mult\":1.8315703877855587,\"charisma_mult\":1.7443527502719607,\"hacking_exp_mult\":7.068745630352244,\"strength_exp_mult\":2.2066062290940303,\"defense_exp_mult\":2.2066062290940303,\"dexterity_exp_mult\":2.2066062290940303,\"agility_exp_mult\":2.2066062290940303,\"charisma_exp_mult\":2.2066062290940303,\"company_rep_mult\":2.2066062290940303,\"faction_rep_mult\":2.2066062290940303,\"money\":67172725700,\"city\":\"Sector-12\",\"location\":\"Alpha Enterprises\",\"jobs\":{},\"companyName\":\"\",\"currentServer\":\"home\",\"purchasedServers\":[\"pserv-131072-238277d6-550d-4dd3-86d4-72bc5d87ace3\",\"pserv-131072-8e97625d-2e55-460a-b07a-f82cb9817786\",\"pserv-131072-68549598-cb26-4b2e-bf8b-f48c237534dd\",\"pserv-131072-14516993-eeaf-4a2c-bfaa-05ce8645cc0d\",\"pserv-131072-555b1405-868c-409a-b969-738b8179a246\",\"pserv-131072-e6bcce5a-62ab-4bba-9620-1cfc5c3fa092\",\"pserv-131072-900f4642-58af-41ce-96d1-7be15c9e7d3e\",\"pserv-131072-70ff92b9-cb95-4b3a-bc94-2885a60aedd6\",\"pserv-131072-65c9cecc-0476-452a-8909-70bb5acc0279\",\"pserv-131072-8871ac41-1781-4029-89ef-7b85fd7af779\",\"pserv-131072-e00825b2-a07b-4294-99fc-5412b5e45220\",\"pserv-131072-29297cc7-5dd7-40c5-9aec-4ad42bde272c\",\"pserv-131072-fcffe25e-59ae-4dfa-b83b-a0a18d68d200\",\"pserv-131072-33574fa9-038a-4898-822b-c8cbe485ac05\",\"pserv-131072-3d114e03-3ac5-4249-b509-2b0adee0c50b\",\"pserv-131072-e7c32ade-b5bb-4c65-8cc4-04cd9bd29299\",\"pserv-131072-594fe177-d75e-4c37-8e3a-2062b1828721\",\"pserv-524288-b391dd6c-b134-4a45-8dba-51d4f32ab5b7\",\"pserv-524288-4c0bd995-0657-436b-a37b-32ddb633b69e\",\"pserv-524288-c0754e39-1133-463e-b893-742a702ddcb6\",\"pserv-524288-4336de14-bafc-406a-be8f-f81ce3afa464\",\"pserv-524288-3ce61c35-038f-4256-a468-9a4a6a24e857\",\"pserv-524288-e0a8d2e3-0a55-43c6-848b-28d0996cf354\",\"pserv-524288-505a64da-6899-4d70-82c6-aeaa6b0690f9\",\"pserv-524288-39398935-c499-4146-b19c-29244d0bf1c2\"],\"hacknetNodes\":[],\"hashManager\":{\"ctor\":\"HashManager\",\"data\":{\"capacity\":0,\"hashes\":0,\"upgrades\":{\"Sell for Money\":0,\"Sell for Corporation Funds\":0,\"Reduce Minimum Security\":0,\"Increase Maximum Money\":0,\"Improve Studying\":0,\"Improve Gym Training\":0,\"Exchange for Corporation Research\":0,\"Exchange for Bladeburner Rank\":0,\"Exchange for Bladeburner SP\":0,\"Generate Coding Contract\":0}}},\"factions\":[\"Daedalus\"],\"factionInvitations\":[\"Sector-12\"],\"queuedAugmentations\":[],\"augmentations\":[{\"level\":1,\"name\":\"Neurotrainer I\"},{\"level\":1,\"name\":\"Cranial Signal Processors - Gen I\"},{\"level\":1,\"name\":\"BitWire\"},{\"level\":1,\"name\":\"Synaptic Enhancement Implant\"},{\"level\":41,\"name\":\"NeuroFlux Governor\"},{\"level\":1,\"name\":\"CashRoot Starter Kit\"},{\"level\":1,\"name\":\"Neuralstimulator\"},{\"level\":1,\"name\":\"Cranial Signal Processors - Gen II\"},{\"level\":1,\"name\":\"Social Negotiation Assistant (S.N.A)\"},{\"level\":1,\"name\":\"ADR-V1 Pheromone Gene\"},{\"level\":1,\"name\":\"Artificial Synaptic Potentiation\"},{\"level\":1,\"name\":\"Neural-Retention Enhancement\"},{\"level\":1,\"name\":\"Neurotrainer II\"},{\"level\":1,\"name\":\"CRTX42-AA Gene Modification\"},{\"level\":1,\"name\":\"DataJack\"},{\"level\":1,\"name\":\"Cranial Signal Processors - Gen III\"},{\"level\":1,\"name\":\"Embedded Netburner Module\"},{\"level\":1,\"name\":\"Neuregen Gene Modification\"},{\"level\":1,\"name\":\"Embedded Netburner Module Core Implant\"},{\"level\":1,\"name\":\"Cranial Signal Processors - Gen IV\"},{\"level\":1,\"name\":\"The Black Hand\"},{\"level\":1,\"name\":\"Enhanced Myelin Sheathing\"},{\"level\":1,\"name\":\"Hacknet Node Core Direct-Neural Interface\"},{\"level\":1,\"name\":\"Hacknet Node Kernel Direct-Neural Interface\"},{\"level\":1,\"name\":\"Hacknet Node CPU Architecture Neural-Upload\"},{\"level\":1,\"name\":\"Hacknet Node Cache Architecture Neural-Upload\"},{\"level\":1,\"name\":\"Hacknet Node NIC Architecture Neural-Upload\"},{\"level\":1,\"name\":\"Wired Reflexes\"},{\"level\":1,\"name\":\"Augmented Targeting I\"},{\"level\":1,\"name\":\"Augmented Targeting II\"},{\"level\":1,\"name\":\"Artificial Bio-neural Network Implant\"},{\"level\":1,\"name\":\"Cranial Signal Processors - Gen V\"},{\"level\":1,\"name\":\"Neural Accelerator\"}],\"sourceFiles\":[{\"lvl\":1,\"n\":1}],\"numPeopleKilled\":0,\"karma\":0,\"crime_money_mult\":1.7443527502719607,\"crime_success_mult\":1.7443527502719607,\"isWorking\":true,\"focus\":false,\"workType\":\"Working for Faction\",\"workCostMult\":3,\"workExpMult\":2,\"currentWorkFactionName\":\"Daedalus\",\"currentWorkFactionDescription\":\"carrying out hacking contracts\",\"workHackExpGainRate\":1.0603118445528366,\"workStrExpGainRate\":0,\"workDefExpGainRate\":0,\"workDexExpGainRate\":0,\"workAgiExpGainRate\":0,\"workChaExpGainRate\":0,\"workRepGainRate\":6.257708947123071,\"workMoneyGainRate\":0,\"workMoneyLossRate\":0,\"workHackExpGained\":8686.922880052563,\"workStrExpGained\":0,\"workDefExpGained\":0,\"workDexExpGained\":0,\"workAgiExpGained\":0,\"workChaExpGained\":0,\"workRepGained\":50776.704333194866,\"workMoneyGained\":0,\"createProgramName\":\"\",\"createProgramReqLvl\":750,\"className\":\"\",\"crimeType\":\"\",\"timeWorked\":2048000,\"timeWorkedCreateProgram\":0,\"timeNeededToCompleteWork\":72000000,\"work_money_mult\":1.9187880252991567,\"hacknet_node_money_mult\":4.399421169256223,\"hacknet_node_purchase_cost_mult\":0.4255824395363077,\"hacknet_node_ram_cost_mult\":0.5563169144265461,\"hacknet_node_core_cost_mult\":0.5563169144265461,\"hacknet_node_level_cost_mult\":0.4728693772625642,\"hasWseAccount\":false,\"hasTixApiAccess\":false,\"has4SData\":false,\"has4SDataTixApi\":false,\"gang\":null,\"corporation\":null,\"bladeburner\":null,\"bladeburner_max_stamina_mult\":1,\"bladeburner_stamina_gain_mult\":1,\"bladeburner_analysis_mult\":1,\"bladeburner_success_chance_mult\":1,\"sleeves\":[],\"resleeves\":[],\"sleevesFromCovenant\":0,\"bitNodeN\":1,\"lastUpdate\":1643189349862,\"totalPlaytime\":850424200,\"playtimeSinceLastAug\":8931600,\"playtimeSinceLastBitnode\":258283600,\"moneySourceA\":{\"ctor\":\"MoneySourceTracker\",\"data\":{\"bladeburner\":0,\"casino\":0,\"class\":0,\"codingcontract\":0,\"corporation\":0,\"crime\":0,\"gang\":0,\"hacking\":481111145700,\"hacknet\":0,\"hacknet_expenses\":0,\"hospitalization\":0,\"infiltration\":0,\"sleeves\":0,\"stock\":0,\"total\":67171725700,\"work\":0,\"servers\":-413902720000,\"other\":-36700000,\"augmentations\":0}},\"moneySourceB\":{\"ctor\":\"MoneySourceTracker\",\"data\":{\"bladeburner\":0,\"casino\":0,\"class\":0,\"codingcontract\":1800000000,\"corporation\":0,\"crime\":0,\"gang\":0,\"hacking\":10273049215801.826,\"hacknet\":9728782099.531275,\"hacknet_expenses\":-8702141477.34459,\"hospitalization\":0,\"infiltration\":0,\"sleeves\":0,\"stock\":0,\"total\":1536700063884.0208,\"work\":2105695.236157822,\"servers\":-6446016855959.326,\"other\":-1794400000,\"augmentations\":-2291366642275.914}},\"scriptProdSinceLastAug\":481111145700,\"exploits\":[],\"achievements\":[{\"ID\":\"FIRST_HACKNET_NODE\",\"unlockedOn\":1642339414658},{\"ID\":\"NS2\",\"unlockedOn\":1642343740615},{\"ID\":\"WORKOUT\",\"unlockedOn\":1642344940610},{\"ID\":\"HACKNET_NODE_10M\",\"unlockedOn\":1642420708995},{\"ID\":\"BRUTESSH.EXE\",\"unlockedOn\":1642422808996},{\"ID\":\"CYBERSEC\",\"unlockedOn\":1642423769004},{\"ID\":\"TOR\",\"unlockedOn\":1642424428998},{\"ID\":\"FTPCRACK.EXE\",\"unlockedOn\":1642426645652},{\"ID\":\"RELAYSMTP.EXE\",\"unlockedOn\":1642428623734},{\"ID\":\"FROZE\",\"unlockedOn\":1642430134063},{\"ID\":\"TRAVEL\",\"unlockedOn\":1642430580714},{\"ID\":\"INSTALL_1\",\"unlockedOn\":1642431300713},{\"ID\":\"SCRIPT_32GB\",\"unlockedOn\":1642433585396},{\"ID\":\"DRAIN_SERVER\",\"unlockedOn\":1642557549229},{\"ID\":\"HTTPWORM.EXE\",\"unlockedOn\":1642585735077},{\"ID\":\"SQLINJECT.EXE\",\"unlockedOn\":1642601629939},{\"ID\":\"THE_BLACK_HAND\",\"unlockedOn\":1642605709947},{\"ID\":\"NITESEC\",\"unlockedOn\":1642642847233},{\"ID\":\"MAX_HACKNET_NODE\",\"unlockedOn\":1642667396271},{\"ID\":\"BITRUNNERS\",\"unlockedOn\":1642729355958},{\"ID\":\"4S\",\"unlockedOn\":1642831049312},{\"ID\":\"DONATION\",\"unlockedOn\":1642852540310},{\"ID\":\"DAEDALUS\",\"unlockedOn\":1642858720310},{\"ID\":\"FORMULAS.EXE\",\"unlockedOn\":1642930710404},{\"ID\":\"SF1.1\",\"unlockedOn\":1642931070401}],\"factionWorkType\":\"Faction Hacking Work\",\"committingCrimeThruSingFn\":false,\"singFnCrimeWorkerScript\":null}}","AllServersSave":"{\"home\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"home\",\"httpPortOpen\":false,\"ip\":\"67.3.0.0\",\"isConnectedTo\":true,\"maxRam\":131072,\"messages\":[\"hackers-starting-handbook.lit\",\"j0.msg\",\"j1.msg\",\"csec-test.msg\",\"j2.msg\",\"nitesec-test.msg\",\"j3.msg\",\"j4.msg\",\"19dfj3l1nd.msg\"],\"organizationName\":\"Home PC\",\"programs\":[\"NUKE.exe\",\"BruteSSH.exe\",\"fl1ght.exe\",\"FTPCrack.exe\",\"relaySMTP.exe\",\"HTTPWorm.exe\",\"SQLInject.exe-23.74%-INC\"],\"ramUsed\":131066.35,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{},\"filename\":\"playerServers.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":8886.60999999998,\"pid\":23,\"ramUsage\":9.95,\"server\":\"home\",\"threads\":1,\"dependencies\":[{\"filename\":\"playerServers.js\",\"url\":\"blob:https://danielyxie.github.io/d495490e-eab0-4381-8cdf-7325be7dbc84\",\"moduleSequenceNumber\":80229}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{},\"filename\":\"mainHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":625137189.9941337,\"onlineMoneyMade\":39842595475,\"onlineRunningTime\":740.6100000000025,\"pid\":1158,\"ramUsage\":7.65,\"server\":\"home\",\"threads\":1,\"dependencies\":[{\"filename\":\"mainHack.js\",\"url\":\"blob:https://danielyxie.github.io/37094472-1b95-4127-a89b-f19b2e772ce8\",\"moduleSequenceNumber\":83928}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"global-pharm\",74885,52231.129359065264,\"c17437f7-64ea-43ea-b4aa-3bf69acc5ed1\"],\"dataMap\":{},\"filename\":\"grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":740.6100000000025,\"pid\":1252,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":74885,\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:https://danielyxie.github.io/6f32cc0f-cbf4-4ecf-9b90-0a7ea57cc033\",\"moduleSequenceNumber\":84013}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/export async function main(ns) {\\n    if (ns.getHostname() !== \\\"home\\\") {\\n      throw new Exception(\\\"Run the script from home\\\");\\n    }\\n  \\n    await ns.wget(\\n      `https://raw.githubusercontent.com/zyh66615/bitburner-something/main/scripts/initHacking.js?ts=${new Date().getTime()}`,\\n      \\\"initHacking.js\\\"\\n    );\\n    ns.spawn(\\\"initHacking.js\\\", 1);\\n  }\",\"filename\":\"start.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"start.js\",\"url\":\"blob:file:///57b9b882-5256-4273-be4a-c00a1e5d0c6c\",\"moduleSequenceNumber\":199939}],\"dependents\":[],\"ramUsage\":3.65,\"server\":\"home\",\"moduleSequenceNumber\":83882,\"_hash\":\"48eac7256f279284cc060fcb82118e1875322fb79a28d5c5f89ecb56c63e97d3\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"spawn\",\"cost\":2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"const baseUrl = 'https://raw.githubusercontent.com/zyh66615/bitburner-something/main/scripts/'\\r\\nconst filesToDownload = [\\r\\n  'common.js',\\r\\n  'mainHack.js',\\r\\n  'spider.js',\\r\\n  'grow.js',\\r\\n  'hack.js',\\r\\n  'weaken.js',\\r\\n  'playerServers.js',\\r\\n  'killAll.js',\\r\\n  'runHacking.js',\\r\\n  'find.js',\\r\\n  'contracter.js',\\r\\n  'seeAllStock.js',\\r\\n  'rmfile.js',\\r\\n  'commitCrime.js',\\r\\n  'getCrimeData.js',\\r\\n  'getCrimeData2.js',\\r\\n  'stock.js',\\r\\n  'stockMaster4s.js',\\r\\n]\\r\\nconst valuesToRemove = ['BB_SERVER_MAP']\\r\\n\\r\\nfunction localeHHMMSS(ms = 0) {\\r\\n  if (!ms) {\\r\\n    ms = new Date().getTime()\\r\\n  }\\r\\n\\r\\n  return new Date(ms).toLocaleTimeString()\\r\\n}\\r\\n\\r\\n/** @param {NS} ns **/export async function main(ns) {\\r\\n  ns.tprint(`[${localeHHMMSS()}] Starting initHacking.js`)\\r\\n\\r\\n  let hostname = ns.getHostname()\\r\\n\\r\\n  if (hostname !== 'home') {\\r\\n    throw new Exception('Run the script from home')\\r\\n  }\\r\\n\\r\\n  for (let i = 0; i < filesToDownload.length; i++) {\\r\\n    const filename = filesToDownload[i]\\r\\n    const path = baseUrl + filename\\r\\n    await ns.scriptKill(filename, 'home')\\r\\n    await ns.rm(filename)\\r\\n    await ns.sleep(200)\\r\\n    ns.tprint(`[${localeHHMMSS()}] Trying to download ${path}`)\\r\\n    await ns.wget(path + '?ts=' + new Date().getTime(), filename)\\r\\n  }\\r\\n\\r\\n  valuesToRemove.map((value) => localStorage.removeItem(value))\\r\\n\\r\\n  ns.tprint(`[${localeHHMMSS()}] Spawning killAll.js`)\\r\\n  ns.spawn('killAll.js', 1, 'runHacking.js')\\r\\n}\\r\\n\",\"filename\":\"initHacking.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"initHacking.js\",\"url\":\"blob:https://danielyxie.github.io/43f4af12-a6b9-497a-a8c2-c8985ea5b2ba\",\"moduleSequenceNumber\":37620}],\"dependents\":[],\"ramUsage\":5.65,\"server\":\"home\",\"moduleSequenceNumber\":83883,\"_hash\":\"886635683c1009845549927cc18e8b60e74e8c7dbbe2c103f3cf1940e2d7dc11\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scriptKill\",\"cost\":1},{\"type\":\"fn\",\"name\":\"rm\",\"cost\":1},{\"type\":\"fn\",\"name\":\"spawn\",\"cost\":2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export function settings() {\\r\\n    return {\\r\\n      minSecurityLevelOffset: 2,\\r\\n      maxMoneyMultiplayer: 0.9,\\r\\n      minSecurityWeight: 100,\\r\\n      mapRefreshInterval: 1 * 60 * 60 * 1000,\\r\\n      keys: {\\r\\n        serverMap: 'BB_SERVER_MAP',\\r\\n        hackTarget: 'BB_HACK_TARGET',\\r\\n        action: 'BB_ACTION',\\r\\n      },\\r\\n    }\\r\\n  }\\r\\n  \\r\\n  export function getItem(key) {\\r\\n    let item = localStorage.getItem(key)\\r\\n  \\r\\n    return item ? JSON.parse(item) : undefined\\r\\n  }\\r\\n  \\r\\n  export function setItem(key, value) {\\r\\n    localStorage.setItem(key, JSON.stringify(value))\\r\\n  }\\r\\n  \\r\\n/** @param {NS} ns **/export async function main(ns) {\\r\\n    return {\\r\\n      settings,\\r\\n      getItem,\\r\\n      setItem,\\r\\n    }\\r\\n  }\\r\\n  \",\"filename\":\"common.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"server\":\"home\",\"moduleSequenceNumber\":83884,\"_hash\":\"62e95182508a38746dd0e7f9968f8f9a923e5d64df00cc6bf959ebcd1a23a23c\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"const settings = {\\r\\n    homeRamReserved: 12,\\r\\n    homeRamReservedBase: 12,\\r\\n    homeRamExtraRamReserved: 10,\\r\\n    homeRamBigMode: 64,\\r\\n    minSecurityLevelOffset: 1,\\r\\n    maxMoneyMultiplayer: 0.7,\\r\\n    minSecurityWeight: 100,\\r\\n    mapRefreshInterval: 10 * 60 * 1000,\\r\\n    maxWeakenTime: 30 * 60 * 1000,\\r\\n    keys: {\\r\\n      serverMap: 'BB_SERVER_MAP',\\r\\n    },\\r\\n    changes: {\\r\\n      hack: 0.002,\\r\\n      grow: 0.004,\\r\\n      weaken: 0.05,\\r\\n    },\\r\\n  }\\r\\n  \\r\\n  function getItem(key) {\\r\\n    let item = localStorage.getItem(key)\\r\\n  \\r\\n    return item ? JSON.parse(item) : undefined\\r\\n  }\\r\\n  \\r\\n  function setItem(key, value) {\\r\\n    localStorage.setItem(key, JSON.stringify(value))\\r\\n  }\\r\\n  \\r\\n  const hackPrograms = ['BruteSSH.exe', 'FTPCrack.exe', 'relaySMTP.exe', 'HTTPWorm.exe', 'SQLInject.exe']\\r\\n  const hackScripts = ['hack.js', 'grow.js', 'weaken.js']\\r\\n  \\r\\n  function getPlayerDetails(ns) {\\r\\n    let portHacks = 0\\r\\n  \\r\\n    hackPrograms.forEach((hackProgram) => {\\r\\n      if (ns.fileExists(hackProgram, 'home')) {\\r\\n        portHacks += 1\\r\\n      }\\r\\n    })\\r\\n  \\r\\n    return {\\r\\n      hackingLevel: ns.getHackingLevel(),\\r\\n      portHacks,\\r\\n    }\\r\\n  }\\r\\n  \\r\\n  function convertMSToHHMMSS(ms = 0) {\\r\\n    if (ms <= 0) {\\r\\n      return '00:00:00'\\r\\n    }\\r\\n  \\r\\n    if (!ms) {\\r\\n      ms = new Date().getTime()\\r\\n    }\\r\\n  \\r\\n    return new Date(ms).toISOString().substr(11, 8)\\r\\n  }\\r\\n  \\r\\n  function localeHHMMSS(ms = 0) {\\r\\n    if (!ms) {\\r\\n      ms = new Date().getTime()\\r\\n    }\\r\\n  \\r\\n    return new Date(ms).toLocaleTimeString()\\r\\n  }\\r\\n  \\r\\n  function numberWithCommas(x) {\\r\\n    return x.toString().replace(/\\\\B(?<!\\\\.\\\\d*)(?=(\\\\d{3})+(?!\\\\d))/g, ',')\\r\\n  }\\r\\n  \\r\\n  function createUUID() {\\r\\n    var dt = new Date().getTime()\\r\\n    var uuid = 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {\\r\\n      var r = (dt + Math.random() * 16) % 16 | 0\\r\\n      dt = Math.floor(dt / 16)\\r\\n      return (c == 'x' ? r : (r & 0x3) | 0x8).toString(16)\\r\\n    })\\r\\n    return uuid\\r\\n  }\\r\\n  \\r\\n  function weakenCyclesForGrow(growCycles) {\\r\\n    return Math.max(0, Math.ceil(growCycles * (settings.changes.grow / settings.changes.weaken)))\\r\\n  }\\r\\n  \\r\\n  function weakenCyclesForHack(hackCycles) {\\r\\n    return Math.max(0, Math.ceil(hackCycles * (settings.changes.hack / settings.changes.weaken)))\\r\\n  }\\r\\n  \\r\\n  async function getHackableServers(ns, servers) {\\r\\n    const playerDetails = getPlayerDetails(ns)\\r\\n  \\r\\n    const hackableServers = Object.keys(servers)\\r\\n      .filter((hostname) => ns.serverExists(hostname))\\r\\n      .filter((hostname) => servers[hostname].ports <= playerDetails.portHacks || ns.hasRootAccess(hostname))\\r\\n      .filter((hostname) => servers[hostname].ram >= 2)\\r\\n  \\r\\n    for (const hostname of hackableServers) {\\r\\n      if (hostname === 'home') continue;\\r\\n      if (!ns.hasRootAccess(hostname)) {\\r\\n        hackPrograms.forEach((hackProgram) => {\\r\\n          if (ns.fileExists(hackProgram, 'home')) {\\r\\n            ns[hackProgram.split('.').shift().toLocaleLowerCase()](hostname)\\r\\n          }\\r\\n        })\\r\\n        ns.nuke(hostname)\\r\\n      }\\r\\n  \\r\\n      await ns.scp(hackScripts, hostname)\\r\\n  \\r\\n    }\\r\\n  \\r\\n    hackableServers.sort((a, b) => servers[a].ram - servers[b].ram)\\r\\n    return hackableServers\\r\\n  }\\r\\n  \\r\\n  function findTargetServer(ns, serversList, servers, serverExtraData) {\\r\\n    const playerDetails = getPlayerDetails(ns)\\r\\n  \\r\\n    serversList = serversList\\r\\n      .filter((hostname) => servers[hostname].hackingLevel <= playerDetails.hackingLevel)\\r\\n      .filter((hostname) => servers[hostname].maxMoney)\\r\\n      .filter((hostname) => hostname !== 'home')\\r\\n      .filter((hostname) => ns.getWeakenTime(hostname) < settings.maxWeakenTime)\\r\\n  \\r\\n    let weightedServers = serversList.map((hostname) => {\\r\\n      const fullHackCycles = Math.ceil(100 / Math.max(0.00000001, ns.hackAnalyze(hostname)))\\r\\n  \\r\\n      serverExtraData[hostname] = {\\r\\n        fullHackCycles,\\r\\n      }\\r\\n  \\r\\n      const serverValue = servers[hostname].maxMoney * (settings.minSecurityWeight / (servers[hostname].minSecurityLevel + ns.getServerSecurityLevel(hostname)))\\r\\n  \\r\\n      return {\\r\\n        hostname,\\r\\n        serverValue,\\r\\n        minSecurityLevel: servers[hostname].minSecurityLevel,\\r\\n        securityLevel: ns.getServerSecurityLevel(hostname),\\r\\n        maxMoney: servers[hostname].maxMoney,\\r\\n      }\\r\\n    })\\r\\n  \\r\\n    weightedServers.sort((a, b) => b.serverValue - a.serverValue)\\r\\n    ns.print(JSON.stringify(weightedServers, null, 2))\\r\\n  \\r\\n    return weightedServers.map((server) => server.hostname)\\r\\n  }\\r\\n  \\r\\n  /** @param {NS} ns **/ export async function main(ns) {\\r\\n    ns.tprint(`[${localeHHMMSS()}] Starting mainHack.js`)\\r\\n  \\r\\n    let hostname = ns.getHostname()\\r\\n  \\r\\n    if (hostname !== 'home') {\\r\\n      throw new Exception('Run the script from home')\\r\\n    }\\r\\n  \\r\\n    while (true) {\\r\\n      const serverExtraData = {}\\r\\n      const serverMap = getItem(settings.keys.serverMap)\\r\\n      if (serverMap.servers.home.ram >= settings.homeRamBigMode) {\\r\\n        settings.homeRamReserved = settings.homeRamReservedBase + settings.homeRamExtraRamReserved\\r\\n      }\\r\\n  \\r\\n      if (!serverMap || serverMap.lastUpdate < new Date().getTime() - settings.mapRefreshInterval) {\\r\\n        ns.tprint(`[${localeHHMMSS()}] Spawning spider.js`)\\r\\n        ns.spawn('spider.js', 1, 'mainHack.js')\\r\\n        ns.exit()\\r\\n        return\\r\\n      }\\r\\n      serverMap.servers.home.ram = Math.max(0, serverMap.servers.home.ram - settings.homeRamReserved)\\r\\n  \\r\\n      const hackableServers = await getHackableServers(ns, serverMap.servers)\\r\\n  \\r\\n      const targetServers = findTargetServer(ns, hackableServers, serverMap.servers, serverExtraData)\\r\\n      const bestTarget = targetServers.shift()\\r\\n      const hackTime = ns.getHackTime(bestTarget)\\r\\n      const growTime = ns.getGrowTime(bestTarget)\\r\\n      const weakenTime = ns.getWeakenTime(bestTarget)\\r\\n  \\r\\n      const growDelay = Math.max(0, weakenTime - growTime - 15 * 1000 )\\r\\n      const hackDelay = Math.max(0, growTime + growDelay - hackTime - 15 * 1000)\\r\\n  \\r\\n      const securityLevel = ns.getServerSecurityLevel(bestTarget)\\r\\n      const money = ns.getServerMoneyAvailable(bestTarget)\\r\\n  \\r\\n      let action = 'weaken'\\r\\n      if (securityLevel > serverMap.servers[bestTarget].minSecurityLevel + settings.minSecurityLevelOffset) {\\r\\n        action = 'weaken'\\r\\n      } else if (money < serverMap.servers[bestTarget].maxMoney * settings.maxMoneyMultiplayer) {\\r\\n        action = 'grow'\\r\\n      } else {\\r\\n        action = 'hack'\\r\\n      }\\r\\n  \\r\\n      let hackCycles = 0\\r\\n      let growCycles = 0\\r\\n      let weakenCycles = 0\\r\\n  \\r\\n      for (let i = 0; i < hackableServers.length; i++) {\\r\\n        const server = serverMap.servers[hackableServers[i]]\\r\\n        hackCycles += Math.floor(server.ram / 1.7)\\r\\n        growCycles += Math.floor(server.ram / 1.75)\\r\\n      }\\r\\n      weakenCycles = growCycles\\r\\n  \\r\\n      ns.tprint(\\r\\n        `[${localeHHMMSS()}] Selected ${bestTarget} for a target. Planning to ${action} the server. Will wake up around ${localeHHMMSS(\\r\\n          new Date().getTime() + weakenTime + 300\\r\\n        )}`\\r\\n      )\\r\\n      ns.tprint(\\r\\n        `[${localeHHMMSS()}] Stock values: baseSecurity: ${serverMap.servers[bestTarget].baseSecurityLevel}; minSecurity: ${serverMap.servers[bestTarget].minSecurityLevel\\r\\n        }; maxMoney: $${numberWithCommas(parseInt(serverMap.servers[bestTarget].maxMoney, 10))}`\\r\\n      )\\r\\n      ns.tprint(`[${localeHHMMSS()}] Current values: security: ${Math.floor(securityLevel * 1000) / 1000}; money: $${numberWithCommas(parseInt(money, 10))}`)\\r\\n      ns.tprint(\\r\\n        `[${localeHHMMSS()}] Time to: hack: ${convertMSToHHMMSS(hackTime)}; grow: ${convertMSToHHMMSS(growTime)}; weaken: ${convertMSToHHMMSS(weakenTime)}`\\r\\n      )\\r\\n      ns.tprint(`[${localeHHMMSS()}] Delays: ${convertMSToHHMMSS(hackDelay)} for hacks, ${convertMSToHHMMSS(growDelay)} for grows`)\\r\\n  \\r\\n      if (action === 'weaken') {\\r\\n        if (settings.changes.weaken * weakenCycles > securityLevel - serverMap.servers[bestTarget].minSecurityLevel) {\\r\\n          weakenCycles = Math.ceil((securityLevel - serverMap.servers[bestTarget].minSecurityLevel) / settings.changes.weaken)\\r\\n          growCycles -= weakenCycles\\r\\n          growCycles = Math.max(0, growCycles)\\r\\n  \\r\\n          weakenCycles += weakenCyclesForGrow(growCycles)\\r\\n          growCycles -= weakenCyclesForGrow(growCycles)\\r\\n          growCycles = Math.max(0, growCycles)\\r\\n        } else {\\r\\n          growCycles = 0\\r\\n        }\\r\\n  \\r\\n        ns.tprint(\\r\\n          `[${localeHHMMSS()}] Cycles ratio: ${growCycles} grow cycles; ${weakenCycles} weaken cycles; expected security reduction: ${Math.floor(settings.changes.weaken * weakenCycles * 1000) / 1000\\r\\n          }`\\r\\n        )\\r\\n  \\r\\n        for (let i = 0; i < hackableServers.length; i++) {\\r\\n          const server = serverMap.servers[hackableServers[i]]\\r\\n          let cyclesFittable = Math.max(0, Math.floor(server.ram / 1.75))\\r\\n          const cyclesToRun = Math.max(0, Math.min(cyclesFittable, growCycles))\\r\\n  \\r\\n          if (growCycles) {\\r\\n            await ns.exec('grow.js', server.host, cyclesToRun, bestTarget, cyclesToRun, growDelay, createUUID())\\r\\n            growCycles -= cyclesToRun\\r\\n            cyclesFittable -= cyclesToRun\\r\\n          }\\r\\n  \\r\\n          if (cyclesFittable) {\\r\\n            await ns.exec('weaken.js', server.host, cyclesFittable, bestTarget, cyclesFittable, 0, createUUID())\\r\\n            weakenCycles -= cyclesFittable\\r\\n          }\\r\\n        }\\r\\n      } else if (action === 'grow') {\\r\\n        weakenCycles = weakenCyclesForGrow(growCycles)\\r\\n        growCycles -= weakenCycles\\r\\n  \\r\\n        ns.tprint(`[${localeHHMMSS()}] Cycles ratio: ${growCycles} grow cycles; ${weakenCycles} weaken cycles`)\\r\\n  \\r\\n        for (let i = 0; i < hackableServers.length; i++) {\\r\\n          const server = serverMap.servers[hackableServers[i]]\\r\\n          let cyclesFittable = Math.max(0, Math.floor(server.ram / 1.75))\\r\\n          const cyclesToRun = Math.max(0, Math.min(cyclesFittable, growCycles))\\r\\n  \\r\\n          if (growCycles) {\\r\\n            await ns.exec('grow.js', server.host, cyclesToRun, bestTarget, cyclesToRun, growDelay, createUUID())\\r\\n            growCycles -= cyclesToRun\\r\\n            cyclesFittable -= cyclesToRun\\r\\n          }\\r\\n  \\r\\n          if (cyclesFittable) {\\r\\n            await ns.exec('weaken.js', server.host, cyclesFittable, bestTarget, cyclesFittable, 0, createUUID())\\r\\n            weakenCycles -= cyclesFittable\\r\\n          }\\r\\n        }\\r\\n      } else {\\r\\n        if (hackCycles > serverExtraData[bestTarget].fullHackCycles) {\\r\\n          hackCycles = serverExtraData[bestTarget].fullHackCycles\\r\\n  \\r\\n          if (hackCycles * 100 < growCycles) {\\r\\n            hackCycles *= 10\\r\\n          }\\r\\n  \\r\\n          growCycles = Math.max(0, growCycles - Math.ceil((hackCycles * 1.7) / 1.75))\\r\\n  \\r\\n          weakenCycles = weakenCyclesForGrow(growCycles) + weakenCyclesForHack(hackCycles)\\r\\n          growCycles -= weakenCycles\\r\\n          hackCycles -= Math.ceil((weakenCyclesForHack(hackCycles) * 1.75) / 1.7)\\r\\n  \\r\\n          growCycles = Math.max(0, growCycles)\\r\\n        } else {\\r\\n          growCycles = 0\\r\\n          weakenCycles = weakenCyclesForHack(hackCycles)\\r\\n          hackCycles -= Math.ceil((weakenCycles * 1.75) / 1.7)\\r\\n        }\\r\\n  \\r\\n        ns.tprint(`[${localeHHMMSS()}] Cycles ratio: ${hackCycles} hack cycles; ${growCycles} grow cycles; ${weakenCycles} weaken cycles`)\\r\\n  \\r\\n        for (let i = 0; i < hackableServers.length; i++) {\\r\\n          const server = serverMap.servers[hackableServers[i]]\\r\\n          let cyclesFittable = Math.max(0, Math.floor(server.ram / 1.7))\\r\\n          const cyclesToRun = Math.max(0, Math.min(cyclesFittable, hackCycles))\\r\\n  \\r\\n          if (hackCycles) {\\r\\n            await ns.exec('hack.js', server.host, cyclesToRun, bestTarget, cyclesToRun, hackDelay, createUUID())\\r\\n            hackCycles -= cyclesToRun\\r\\n            cyclesFittable -= cyclesToRun\\r\\n          }\\r\\n  \\r\\n          const freeRam = server.ram - cyclesToRun * 1.7\\r\\n          cyclesFittable = Math.max(0, Math.floor(freeRam / 1.75))\\r\\n  \\r\\n          if (cyclesFittable && growCycles) {\\r\\n            const growCyclesToRun = Math.min(growCycles, cyclesFittable)\\r\\n  \\r\\n            await ns.exec('grow.js', server.host, growCyclesToRun, bestTarget, growCyclesToRun, growDelay, createUUID())\\r\\n            growCycles -= growCyclesToRun\\r\\n            cyclesFittable -= growCyclesToRun\\r\\n          }\\r\\n  \\r\\n          if (cyclesFittable) {\\r\\n            await ns.exec('weaken.js', server.host, cyclesFittable, bestTarget, cyclesFittable, 0, createUUID())\\r\\n            weakenCycles -= cyclesFittable\\r\\n          }\\r\\n        }\\r\\n      }\\r\\n  \\r\\n      await ns.sleep(weakenTime + 300)\\r\\n    }\\r\\n  }\",\"filename\":\"mainHack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"mainHack.js\",\"url\":\"blob:https://danielyxie.github.io/37094472-1b95-4127-a89b-f19b2e772ce8\",\"moduleSequenceNumber\":83928}],\"dependents\":[],\"ramUsage\":7.65,\"server\":\"home\",\"moduleSequenceNumber\":83928,\"_hash\":\"e0d1d0abed4654d25934bb5202a8c57f7332e2448730d928d4256b606b4277c1\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"serverExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hackAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"spawn\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { settings, setItem } from 'common.js'\\r\\n\\r\\nconst hackPrograms = ['BruteSSH.exe', 'FTPCrack.exe', 'relaySMTP.exe', 'HTTPWorm.exe', 'SQLInject.exe']\\r\\n\\r\\nexport function getPlayerDetails(ns) {\\r\\n  let portHacks = 0\\r\\n\\r\\n  hackPrograms.forEach((hackProgram) => {\\r\\n    if (ns.fileExists(hackProgram, 'home')) {\\r\\n      portHacks += 1\\r\\n    }\\r\\n  })\\r\\n\\r\\n  return {\\r\\n    hackingLevel: ns.getHackingLevel(),\\r\\n    portHacks,\\r\\n  }\\r\\n}\\r\\n\\r\\nfunction allHacks(host) {\\r\\n  ns.brutessh(host)\\r\\n  ns.ftpcrack(host)\\r\\n  ns.relaysmtp(host)\\r\\n  ns.httpworm(host)\\r\\n  ns.sqlinject(host)\\r\\n}\\r\\n\\r\\nfunction localeHHMMSS(ms = 0) {\\r\\n  if (!ms) {\\r\\n    ms = new Date().getTime()\\r\\n  }\\r\\n\\r\\n  return new Date(ms).toLocaleTimeString()\\r\\n}\\r\\n\\r\\n/** @param {NS} ns **/export async function main(ns) {\\r\\n  ns.tprint(`[${localeHHMMSS()}] Starting spider.js`)\\r\\n\\r\\n  const scriptToRunAfter = ns.args[0]\\r\\n\\r\\n  let hostname = ns.getHostname()\\r\\n\\r\\n  if (hostname !== 'home') {\\r\\n    throw new Exception('Run the script from home')\\r\\n  }\\r\\n\\r\\n  const serverMap = { servers: {}, lastUpdate: new Date().getTime() }\\r\\n  const scanArray = ['home']\\r\\n\\r\\n  while (scanArray.length) {\\r\\n    const host = scanArray.shift()\\r\\n\\r\\n    serverMap.servers[host] = {\\r\\n      host,\\r\\n      ports: ns.getServerNumPortsRequired(host),\\r\\n      hackingLevel: ns.getServerRequiredHackingLevel(host),\\r\\n      maxMoney: ns.getServerMaxMoney(host),\\r\\n      growth: ns.getServerGrowth(host),\\r\\n      minSecurityLevel: ns.getServerMinSecurityLevel(host),\\r\\n      baseSecurityLevel: ns.getServerBaseSecurityLevel(host),\\r\\n      ram: ns.getServerRam(host)[0],\\r\\n      files: ns.ls(host),\\r\\n    }\\r\\n\\r\\n    const playerDetails = getPlayerDetails(ns)\\r\\n    if (!ns.hasRootAccess(host)) {\\r\\n      if (serverMap.servers[host].ports <= playerDetails.portHacks && serverMap.servers[host].hackingLevel <= playerDetails.hackingLevel) {\\r\\n        hackPrograms.forEach((hackProgram) => {\\r\\n          if (ns.fileExists(hackProgram, 'home')) {\\r\\n            ns[hackProgram.split('.').shift().toLocaleLowerCase()](host)\\r\\n          }\\r\\n        })\\r\\n        ns.nuke(host)\\r\\n      }\\r\\n    }\\r\\n\\r\\n    const connections = ns.scan(host) || ['home']\\r\\n    serverMap.servers[host].connections = connections\\r\\n\\r\\n    connections.filter((hostname) => !serverMap.servers[hostname]).forEach((hostname) => scanArray.push(hostname))\\r\\n  }\\r\\n\\r\\n  let hasAllParents = false\\r\\n\\r\\n  while (!hasAllParents) {\\r\\n    hasAllParents = true\\r\\n\\r\\n    Object.keys(serverMap.servers).forEach((hostname) => {\\r\\n      const server = serverMap.servers[hostname]\\r\\n\\r\\n      if (!server.parent) hasAllParents = false\\r\\n\\r\\n      if (hostname === 'home') {\\r\\n        server.parent = 'home'\\r\\n        server.children = server.children ? server.children : []\\r\\n      }\\r\\n\\r\\n      if (hostname.includes('pserv-')) {\\r\\n        server.parent = 'home'\\r\\n        server.children = []\\r\\n\\r\\n        if (serverMap.servers[server.parent].children) {\\r\\n          serverMap.servers[server.parent].children.push(hostname)\\r\\n        } else {\\r\\n          serverMap.servers[server.parent].children = [hostname]\\r\\n        }\\r\\n      }\\r\\n\\r\\n      if (!server.parent) {\\r\\n        if (server.connections.length === 1) {\\r\\n          server.parent = server.connections[0]\\r\\n          server.children = []\\r\\n\\r\\n          if (serverMap.servers[server.parent].children) {\\r\\n            serverMap.servers[server.parent].children.push(hostname)\\r\\n          } else {\\r\\n            serverMap.servers[server.parent].children = [hostname]\\r\\n          }\\r\\n        } else {\\r\\n          if (!server.children) {\\r\\n            server.children = []\\r\\n          }\\r\\n\\r\\n          if (server.children.length) {\\r\\n            const parent = server.connections.filter((hostname) => !server.children.includes(hostname))\\r\\n\\r\\n            if (parent.length === 1) {\\r\\n              server.parent = parent.shift()\\r\\n\\r\\n              if (serverMap.servers[server.parent].children) {\\r\\n                serverMap.servers[server.parent].children.push(hostname)\\r\\n              } else {\\r\\n                serverMap.servers[server.parent].children = [hostname]\\r\\n              }\\r\\n            }\\r\\n          }\\r\\n        }\\r\\n      }\\r\\n    })\\r\\n  }\\r\\n\\r\\n  setItem(settings().keys.serverMap, serverMap)\\r\\n\\r\\n  if (!scriptToRunAfter) {\\r\\n    ns.tprint(`[${localeHHMMSS()}] Spawning mainHack.js`)\\r\\n    ns.spawn('mainHack.js', 1)\\r\\n  } else {\\r\\n    ns.tprint(`[${localeHHMMSS()}] Spawning ${scriptToRunAfter}`)\\r\\n    ns.spawn(scriptToRunAfter, 1)\\r\\n  }\\r\\n}\\r\\n\",\"filename\":\"spider.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"common.js\",\"url\":\"blob:https://danielyxie.github.io/b03974b8-b56a-46ec-b614-c893171c3c7f\",\"moduleSequenceNumber\":83884},{\"filename\":\"spider.js\",\"url\":\"blob:https://danielyxie.github.io/0d250327-2b30-4aae-9634-c3149e004271\",\"moduleSequenceNumber\":83927}],\"dependents\":[],\"ramUsage\":5.25,\"server\":\"home\",\"moduleSequenceNumber\":83927,\"_hash\":\"87399378fad41507ed4b47621895a0ef37a64b9795207e30904d89d62d7fba8c\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerGrowth\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerBaseSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"spawn\",\"cost\":2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/export async function main(ns) {\\r\\n    const target = ns.args[0]\\r\\n    const threads = ns.args[1]\\r\\n    const delay = ns.args[2]\\r\\n  \\r\\n    if (delay && delay > 0) {\\r\\n      await ns.sleep(delay)\\r\\n    }\\r\\n  \\r\\n    ns.print(`Starting operation: grow on ${target} in ${threads} threads`)\\r\\n    await ns.grow(target, { threads, stock: true })\\r\\n    ns.exit()\\r\\n  }\\r\\n  \",\"filename\":\"grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:https://danielyxie.github.io/6f32cc0f-cbf4-4ecf-9b90-0a7ea57cc033\",\"moduleSequenceNumber\":84013}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"home\",\"moduleSequenceNumber\":84013,\"_hash\":\"c43d4c7c8798e16588b33c740af14ea55f3ecddd2586b8cc3336577ba8faa5f8\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/export async function main(ns) {\\r\\n    const target = ns.args[0]\\r\\n    const threads = ns.args[1]\\r\\n    const delay = ns.args[2]\\r\\n  \\r\\n    if (delay && delay > 0) {\\r\\n      await ns.sleep(delay)\\r\\n    }\\r\\n  \\r\\n    ns.print(`Starting operation: hack on ${target} in ${threads} threads`)\\r\\n    await ns.hack(target, { threads, stock: true })\\r\\n    ns.exit()\\r\\n  }\\r\\n  \",\"filename\":\"hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:https://danielyxie.github.io/840fa3d4-d7e1-417f-ad65-3f785ffdfc69\",\"moduleSequenceNumber\":84086}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"home\",\"moduleSequenceNumber\":84086,\"_hash\":\"30d9fdd2f5a8bacc809001f44651e87fc2a5770c889d459ab5aa86fb10c18201\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/export async function main(ns) {\\r\\n    const target = ns.args[0]\\r\\n    const threads = ns.args[1]\\r\\n    const delay = ns.args[2]\\r\\n  \\r\\n    if (delay && delay > 0) {\\r\\n      await ns.sleep(delay)\\r\\n    }\\r\\n  \\r\\n    ns.print(`Starting operation: weaken on ${target} in ${threads} threads`)\\r\\n    await ns.weaken(target, { threads, stock: true })\\r\\n    ns.exit()\\r\\n  }\\r\\n  \",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:https://danielyxie.github.io/beced2dd-49d8-455f-a693-facbad550580\",\"moduleSequenceNumber\":84014}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"home\",\"moduleSequenceNumber\":84014,\"_hash\":\"7656e4aac5fc95a4a03444258a0cf4af92d88b1dd44a7486167d2200da1eb442\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"const settings = {\\r\\n  maxPlayerServers: 25,\\r\\n  gbRamCost: 55000,\\r\\n  maxGbRam: 1048576,\\r\\n  minGbRam: 64,\\r\\n  totalMoneyAllocation: 0.4,\\r\\n  actions: {\\r\\n    BUY: 'buy',\\r\\n    UPGRADE: 'upgrade',\\r\\n  },\\r\\n  keys: {\\r\\n    serverMap: 'BB_SERVER_MAP',\\r\\n  },\\r\\n}\\r\\n\\r\\nfunction getItem(key) {\\r\\n  let item = localStorage.getItem(key)\\r\\n\\r\\n  return item ? JSON.parse(item) : undefined\\r\\n}\\r\\n\\r\\nfunction setItem(key, value) {\\r\\n  localStorage.setItem(key, JSON.stringify(value))\\r\\n}\\r\\n\\r\\nfunction localeHHMMSS(ms = 0) {\\r\\n  if (!ms) {\\r\\n    ms = new Date().getTime()\\r\\n  }\\r\\n\\r\\n  return new Date(ms).toLocaleTimeString()\\r\\n}\\r\\n\\r\\nfunction createUUID() {\\r\\n  var dt = new Date().getTime()\\r\\n  var uuid = 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {\\r\\n    var r = (dt + Math.random() * 16) % 16 | 0\\r\\n    dt = Math.floor(dt / 16)\\r\\n    return (c == 'x' ? r : (r & 0x3) | 0x8).toString(16)\\r\\n  })\\r\\n  return uuid\\r\\n}\\r\\n\\r\\nfunction updateServer(ns, serverMap, host) {\\r\\n  serverMap.servers[host] = {\\r\\n    host,\\r\\n    ports: ns.getServerNumPortsRequired(host),\\r\\n    hackingLevel: ns.getServerRequiredHackingLevel(host),\\r\\n    maxMoney: ns.getServerMaxMoney(host),\\r\\n    growth: ns.getServerGrowth(host),\\r\\n    minSecurityLevel: ns.getServerMinSecurityLevel(host),\\r\\n    baseSecurityLevel: ns.getServerBaseSecurityLevel(host),\\r\\n    ram: ns.getServerRam(host)[0],\\r\\n    connections: ['home'],\\r\\n    parent: 'home',\\r\\n    children: [],\\r\\n  }\\r\\n\\r\\n  Object.keys(serverMap.servers).map((hostname) => {\\r\\n    if (!ns.serverExists(hostname)) {\\r\\n      delete serverMap.servers[hostname]\\r\\n    }\\r\\n  })\\r\\n\\r\\n  setItem(settings.keys.serverMap, serverMap)\\r\\n}\\r\\n\\r\\nfunction getPurchasedServers(ns) {\\r\\n  let purchasedServers = ns.getPurchasedServers()\\r\\n  if (purchasedServers.length) {\\r\\n    purchasedServers.sort((a, b) => {\\r\\n      const totalRamA = ns.getServerRam(a).shift()\\r\\n      const totalRamB = ns.getServerRam(b).shift()\\r\\n\\r\\n      if (totalRamA === totalRamB) {\\r\\n        return ns.getServerRam(a).shift() - ns.getServerRam(b).shift()\\r\\n      } else {\\r\\n        return totalRamA - totalRamB\\r\\n      }\\r\\n    })\\r\\n  }\\r\\n\\r\\n  return purchasedServers\\r\\n}\\r\\n\\r\\n /** @param {NS} ns **/export async function main(ns) {\\r\\n  ns.tprint(`[${localeHHMMSS()}] Starting playerServers.js`)\\r\\n\\r\\n  var maxRam = ns.getPurchasedServerMaxRam()\\r\\n  var hostRam = ns.getServerMaxRam('home')\\r\\n  settings.maxGbRam = Math.min(maxRam, hostRam * 64)\\r\\n  ns.tprint(`[${localeHHMMSS()}] hostRam: ` + hostRam + ' maxRam: ' + settings.maxGbRam)\\r\\n  settings.maxPlayerServers = ns.getPurchasedServerLimit()\\r\\n  let hostname = ns.getHostname()\\r\\n\\r\\n  if (hostname !== 'home') {\\r\\n    throw new Exception('Run the script from home')\\r\\n  }\\r\\n\\r\\n  while (true) {\\r\\n    let didChange = false\\r\\n\\r\\n    const serverMap = getItem(settings.keys.serverMap)\\r\\n    let purchasedServers = getPurchasedServers(ns)\\r\\n\\r\\n    let action = purchasedServers.length < settings.maxPlayerServers ? settings.actions.BUY : settings.actions.UPGRADE\\r\\n\\r\\n    if (action == settings.actions.BUY) {\\r\\n      let smallestCurrentServer = purchasedServers.length ? ns.getServerRam(purchasedServers[0]).shift() : 0\\r\\n      let targetRam = Math.max(settings.minGbRam, smallestCurrentServer)\\r\\n\\r\\n      if (targetRam === settings.minGbRam) {\\r\\n        while (ns.getServerMoneyAvailable('home') * settings.totalMoneyAllocation >= targetRam * settings.gbRamCost * settings.maxPlayerServers) {\\r\\n          targetRam *= 2\\r\\n        }\\r\\n\\r\\n        targetRam /= 2\\r\\n      }\\r\\n\\r\\n      targetRam = Math.max(settings.minGbRam, targetRam)\\r\\n      targetRam = Math.min(targetRam, settings.maxGbRam)\\r\\n\\r\\n      if (ns.getServerMoneyAvailable('home') * settings.totalMoneyAllocation >= targetRam * settings.gbRamCost) {\\r\\n        let hostname = `pserv-${targetRam}-${createUUID()}`\\r\\n        hostname = ns.purchaseServer(hostname, targetRam)\\r\\n\\r\\n        if (hostname) {\\r\\n          ns.tprint(`[${localeHHMMSS()}] Bought new server: ${hostname} (${targetRam} GB)`)\\r\\n\\r\\n          updateServer(ns, serverMap, hostname)\\r\\n          didChange = true\\r\\n        }\\r\\n      }\\r\\n    } else {\\r\\n      let smallestCurrentServer = Math.max(ns.getServerRam(purchasedServers[0]).shift(), settings.minGbRam)\\r\\n      let biggestCurrentServer = ns.getServerRam(purchasedServers[purchasedServers.length - 1]).shift()\\r\\n      let targetRam = biggestCurrentServer\\r\\n\\r\\n      if (smallestCurrentServer === settings.maxGbRam) {\\r\\n        ns.tprint(`[${localeHHMMSS()}] All servers maxxed. Exiting.`)\\r\\n        ns.exit()\\r\\n        return\\r\\n      }\\r\\n\\r\\n      if (smallestCurrentServer === biggestCurrentServer) {\\r\\n        while (ns.getServerMoneyAvailable('home') * settings.totalMoneyAllocation >= targetRam * settings.gbRamCost) {\\r\\n          targetRam *= 4\\r\\n        }\\r\\n\\r\\n        targetRam /= 4\\r\\n      }\\r\\n\\r\\n      targetRam = Math.min(targetRam, settings.maxGbRam)\\r\\n\\r\\n      purchasedServers = getPurchasedServers(ns)\\r\\n      if (targetRam > ns.getServerRam(purchasedServers[0]).shift()) {\\r\\n        didChange = true\\r\\n        while (didChange) {\\r\\n          didChange = false\\r\\n          purchasedServers = getPurchasedServers(ns)\\r\\n\\r\\n          if (targetRam > ns.getServerRam(purchasedServers[0]).shift()) {\\r\\n            if (ns.getServerMoneyAvailable('home') * settings.totalMoneyAllocation >= targetRam * settings.gbRamCost) {\\r\\n              let hostname = `pserv-${targetRam}-${createUUID()}`\\r\\n\\r\\n              await ns.killall(purchasedServers[0])\\r\\n              await ns.sleep(10)\\r\\n              const serverDeleted = await ns.deleteServer(purchasedServers[0])\\r\\n              if (serverDeleted) {\\r\\n                hostname = await ns.purchaseServer(hostname, targetRam)\\r\\n\\r\\n                if (hostname) {\\r\\n                  ns.tprint(`[${localeHHMMSS()}] Upgraded: ${purchasedServers[0]} into server: ${hostname} (${targetRam} GB)`)\\r\\n\\r\\n                  updateServer(ns, serverMap, hostname)\\r\\n                  didChange = true\\r\\n                }\\r\\n              }\\r\\n            }\\r\\n          }\\r\\n        }\\r\\n      }\\r\\n    }\\r\\n\\r\\n    if (!didChange) {\\r\\n      await ns.sleep(6000)\\r\\n    }\\r\\n  }\\r\\n}\",\"filename\":\"playerServers.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"playerServers.js\",\"url\":\"blob:https://danielyxie.github.io/a7174088-e896-4856-ab34-a93923f5ff00\",\"moduleSequenceNumber\":84072}],\"dependents\":[],\"ramUsage\":9.95,\"server\":\"home\",\"moduleSequenceNumber\":84072,\"_hash\":\"64f83864a38a005d3612a0af9eac5a73bfa3441f611b7a4c5045565ed30eeeff\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerGrowth\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerBaseSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"serverExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getPurchasedServers\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"getPurchasedServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServerLimit\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"purchaseServer\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"deleteServer\",\"cost\":2.25}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"const settings = {\\r\\n    mapRefreshInterval: 1 * 60 * 60 * 1000,\\r\\n    keys: {\\r\\n      serverMap: 'BB_SERVER_MAP',\\r\\n    },\\r\\n  }\\r\\n  const scriptsToKill = [\\r\\n    'mainHack.js',\\r\\n    'spider.js',\\r\\n    'grow.js',\\r\\n    'hack.js',\\r\\n    'weaken.js',\\r\\n    'playerServers.js',\\r\\n    'runHacking.js',\\r\\n    'initHacking.js',\\r\\n    'start.js',\\r\\n    'find.js',\\r\\n  ]\\r\\n  \\r\\n  function getItem(key) {\\r\\n    let item = localStorage.getItem(key)\\r\\n  \\r\\n    return item ? JSON.parse(item) : undefined\\r\\n  }\\r\\n  \\r\\n  function localeHHMMSS(ms = 0) {\\r\\n    if (!ms) {\\r\\n      ms = new Date().getTime()\\r\\n    }\\r\\n  \\r\\n    return new Date(ms).toLocaleTimeString()\\r\\n  }\\r\\n  \\r\\n/** @param {NS} ns **/export async function main(ns) {\\r\\n    ns.tprint(`[${localeHHMMSS()}] Starting killAll.js`)\\r\\n  \\r\\n    const scriptToRunAfter = ns.args[0]\\r\\n  \\r\\n    let hostname = ns.getHostname()\\r\\n  \\r\\n    if (hostname !== 'home') {\\r\\n      throw new Exception('Run the script from home')\\r\\n    }\\r\\n  \\r\\n    const serverMap = getItem(settings.keys.serverMap)\\r\\n  \\r\\n    if (!serverMap || serverMap.lastUpdate < new Date().getTime() - settings.mapRefreshInterval) {\\r\\n      ns.tprint(`[${localeHHMMSS()}] Spawning spider.js`)\\r\\n      ns.spawn('spider.js', 1, 'killAll.js')\\r\\n      ns.exit()\\r\\n      return\\r\\n    }\\r\\n  \\r\\n    for (let i = 0; i < scriptsToKill.length; i++) {\\r\\n      await ns.scriptKill(scriptsToKill[i], 'home')\\r\\n    }\\r\\n  \\r\\n    const killAbleServers = Object.keys(serverMap.servers)\\r\\n      .filter((hostname) => ns.serverExists(hostname))\\r\\n      .filter((hostname) => hostname !== 'home')\\r\\n  \\r\\n    for (let i = 0; i < killAbleServers.length; i++) {\\r\\n      await ns.killall(killAbleServers[i])\\r\\n    }\\r\\n  \\r\\n    ns.tprint(`[${localeHHMMSS()}] All processes killed`)\\r\\n  \\r\\n    if (scriptToRunAfter) {\\r\\n      ns.tprint(`[${localeHHMMSS()}] Spawning ${scriptToRunAfter}`)\\r\\n      ns.spawn(scriptToRunAfter, 1)\\r\\n    } else {\\r\\n      ns.tprint(`[${localeHHMMSS()}] You can run runHacking.js to start hack`)\\r\\n    }\\r\\n  }\\r\\n  \",\"filename\":\"killAll.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"killAll.js\",\"url\":\"blob:https://danielyxie.github.io/f71b6d1d-1e89-4c0e-8679-6245775e07d2\",\"moduleSequenceNumber\":83925}],\"dependents\":[],\"ramUsage\":5.25,\"server\":\"home\",\"moduleSequenceNumber\":83925,\"_hash\":\"7f22a2c7bf88dd9d5727caefe24457d4ee896d71d0ee21f42dbec2b9f447ff47\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"spawn\",\"cost\":2},{\"type\":\"fn\",\"name\":\"scriptKill\",\"cost\":1},{\"type\":\"fn\",\"name\":\"serverExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"function localeHHMMSS(ms = 0) {\\r\\n    if (!ms) {\\r\\n      ms = new Date().getTime()\\r\\n    }\\r\\n  \\r\\n    return new Date(ms).toLocaleTimeString()\\r\\n  }\\r\\n  \\r\\n  /** @param {NS} ns **/export async function main(ns) {\\r\\n    ns.tprint(`[${localeHHMMSS()}] Starting runHacking.js`)\\r\\n  \\r\\n    let hostname = ns.getHostname()\\r\\n  \\r\\n    if (hostname !== 'home') {\\r\\n      throw new Exception('Run the script from home')\\r\\n    }\\r\\n  \\r\\n    const homeRam = ns.getServerRam('home').shift()\\r\\n  \\r\\n    if (homeRam >= 64) {\\r\\n      ns.tprint(`[${localeHHMMSS()}] Spawning spider.js`)\\r\\n      await ns.run('spider.js', 1, 'mainHack.js')\\r\\n      await ns.sleep(3000)\\r\\n      ns.tprint(`[${localeHHMMSS()}] Spawning playerServers.js`)\\r\\n      ns.spawn('playerServers.js', 1)\\r\\n    } else {\\r\\n      ns.tprint(`[${localeHHMMSS()}] Spawning spider.js`)\\r\\n      ns.spawn('spider.js', 1, 'mainHack.js')\\r\\n    }\\r\\n  }\\r\\n  \",\"filename\":\"runHacking.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"runHacking.js\",\"url\":\"blob:https://danielyxie.github.io/e91aad00-0c3c-44be-b47d-86db633c1802\",\"moduleSequenceNumber\":83926}],\"dependents\":[],\"ramUsage\":4.75,\"server\":\"home\",\"moduleSequenceNumber\":83926,\"_hash\":\"6e42e3cf38665ed411c4ebce834ce33a1a2991f2ac086a3b5de49e365eb76b6d\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"run\",\"cost\":1},{\"type\":\"fn\",\"name\":\"spawn\",\"cost\":2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getPlayerDetails } from 'spider.js'\\r\\nconst settings = {\\r\\n  keys: {\\r\\n    serverMap: 'BB_SERVER_MAP',\\r\\n  },\\r\\n}\\r\\n\\r\\nfunction getItem(key) {\\r\\n  let item = localStorage.getItem(key)\\r\\n\\r\\n  return item ? JSON.parse(item) : undefined\\r\\n}\\r\\n\\r\\nfunction localeHHMMSS(ms = 0) {\\r\\n  if (!ms) {\\r\\n    ms = new Date().getTime()\\r\\n  }\\r\\n\\r\\n  return new Date(ms).toLocaleTimeString()\\r\\n}\\r\\n\\r\\nfunction printPathToServer(servers, serverToFind) {\\r\\n  if (serverToFind === 'home') return 'home'\\r\\n  if (!servers[serverToFind]) return `-- Unable to locate ${serverToFind} --`\\r\\n\\r\\n  const jumps = []\\r\\n\\r\\n  let isParentHome = servers.parent === 'home'\\r\\n  let currentServer = serverToFind\\r\\n\\r\\n  while (!isParentHome) {\\r\\n    jumps.push(servers[currentServer].parent)\\r\\n\\r\\n    if (servers[currentServer].parent !== 'home') {\\r\\n      currentServer = servers[currentServer].parent\\r\\n    } else {\\r\\n      isParentHome = true\\r\\n    }\\r\\n  }\\r\\n\\r\\n  jumps.unshift(serverToFind)\\r\\n\\r\\n  return jumps.reverse().join('; connect ')\\r\\n}\\r\\n\\r\\n/** @param {NS} ns **/ export async function main(ns) {\\r\\n  ns.tprint(`[${localeHHMMSS()}] Starting find.js`)\\r\\n\\r\\n  const serverToFind = ns.args[0]\\r\\n\\r\\n  let hostname = ns.getHostname()\\r\\n\\r\\n  if (hostname !== 'home') {\\r\\n    throw new Exception('Run the script from home')\\r\\n  }\\r\\n\\r\\n  const serverMap = getItem(settings.keys.serverMap)\\r\\n\\r\\n  if (serverToFind) {\\r\\n    if (Object.keys(serverMap.servers).includes(serverToFind)) {\\r\\n      ns.tprint(`[${localeHHMMSS()}] Path to ${serverToFind} found:`)\\r\\n      ns.tprint(printPathToServer(serverMap.servers, serverToFind))\\r\\n    } else {\\r\\n      ns.tprint(`[${localeHHMMSS()}] Unable to find the path to ${serverToFind}`)\\r\\n    }\\r\\n  } else {\\r\\n    ns.tprint(`[${localeHHMMSS()}] Common servers:`)\\r\\n\\r\\n    const playerDetials = getPlayerDetails(ns)\\r\\n    var currentLevels = playerDetials.hackingLevel\\r\\n    var currentPorts = playerDetials.portHacks\\r\\n\\r\\n    ns.tprint('now hackinglevels: ' + currentLevels + ' portHacks: ' + currentPorts)\\r\\n\\r\\n    var currentHost = 'CSEC'\\r\\n    var requiredLevels = ns.getServerRequiredHackingLevel(currentHost)\\r\\n    var requiredPorts = ns.getServerNumPortsRequired(currentHost)\\r\\n    var flag = currentLevels >= requiredLevels && currentPorts >= requiredPorts ? '√' : '×'\\r\\n    var rootAccess = ns.hasRootAccess(currentHost)\\r\\n\\r\\n    ns.tprint(`* CSEC (CyberSec faction)` + ' access: ' + rootAccess + ' hacking levels:' + requiredLevels + ' ports:' + requiredPorts + ' hackable:' + flag)\\r\\n    ns.tprint(printPathToServer(serverMap.servers, 'CSEC') + '; backdoor;')\\r\\n    ns.tprint('')\\r\\n\\r\\n    currentHost = 'avmnite-02h'\\r\\n    requiredLevels = ns.getServerRequiredHackingLevel(currentHost)\\r\\n    requiredPorts = ns.getServerNumPortsRequired(currentHost)\\r\\n    flag = currentLevels >= requiredLevels && currentPorts >= requiredPorts ? '√' : '×'\\r\\n    rootAccess = ns.hasRootAccess(currentHost)\\r\\n\\r\\n    ns.tprint(`* avmnite-02h (NiteSec faction)` + ' access: ' + rootAccess + ' hacking levels:' + requiredLevels + ' ports:' + requiredPorts + ' hackable:' + flag)\\r\\n    ns.tprint(printPathToServer(serverMap.servers, 'avmnite-02h') + '; backdoor;')\\r\\n    ns.tprint('')\\r\\n\\r\\n    currentHost = 'I.I.I.I'\\r\\n    requiredLevels = ns.getServerRequiredHackingLevel(currentHost)\\r\\n    requiredPorts = ns.getServerNumPortsRequired(currentHost)\\r\\n    flag = currentLevels >= requiredLevels && currentPorts >= requiredPorts ? '√' : '×'\\r\\n    rootAccess = ns.hasRootAccess(currentHost)\\r\\n\\r\\n    ns.tprint(`* I.I.I.I (The Black Hand faction)` + ' access: ' + rootAccess + ' hacking levels:' + requiredLevels + ' ports:' + requiredPorts + ' hackable:' + flag)\\r\\n    ns.tprint(printPathToServer(serverMap.servers, 'I.I.I.I') + '; backdoor;')\\r\\n    ns.tprint('')\\r\\n\\r\\n    currentHost = 'run4theh111z'\\r\\n    requiredLevels = ns.getServerRequiredHackingLevel(currentHost)\\r\\n    requiredPorts = ns.getServerNumPortsRequired(currentHost)\\r\\n    flag = currentLevels >= requiredLevels && currentPorts >= requiredPorts ? '√' : '×'\\r\\n    rootAccess = ns.hasRootAccess(currentHost)\\r\\n\\r\\n    ns.tprint(`* run4theh111z (Bitrunners faction)` + ' access: ' + rootAccess + ' hacking levels:' + requiredLevels + ' ports:' + requiredPorts + ' hackable:' + flag)\\r\\n    ns.tprint(printPathToServer(serverMap.servers, 'run4theh111z') + '; backdoor;')\\r\\n    ns.tprint('')\\r\\n    ns.tprint(`[${localeHHMMSS()}] Looking for servers with coding contracts:`)\\r\\n    Object.keys(serverMap.servers).forEach((hostname) => {\\r\\n      const files = ns.ls(hostname)\\r\\n      if (files && files.length) {\\r\\n        const contract = files.find((file) => file.includes('.cct'))\\r\\n\\r\\n        if (!!contract) {\\r\\n          ns.tprint('')\\r\\n          ns.tprint(`* ${hostname} has a coding contract(s)! Connect using:`)\\r\\n          ns.tprint(printPathToServer(serverMap.servers, hostname) + `; run ${contract};`)\\r\\n        }\\r\\n      }\\r\\n    })\\r\\n    ns.tprint('')\\r\\n    ns.tprint('Buy all hacks command:')\\r\\n    ns.tprint('home; connect darkweb; buy BruteSSH.exe; buy FTPCrack.exe; buy relaySMTP.exe; buy HTTPWorm.exe; buy SQLInject.exe; home;')\\r\\n    ns.tprint('')\\r\\n  }\\r\\n}\\r\\n\",\"filename\":\"find.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"common.js\",\"url\":\"blob:https://danielyxie.github.io/f3cd6e4a-97c4-4d70-ba09-cc6fa5091d2d\",\"moduleSequenceNumber\":83884},{\"filename\":\"spider.js\",\"url\":\"blob:https://danielyxie.github.io/c0e7a8af-ba26-4455-ade7-6d27a3849a61\",\"moduleSequenceNumber\":83927},{\"filename\":\"find.js\",\"url\":\"blob:https://danielyxie.github.io/9e802029-f78c-48f0-bcab-ee90247e22b0\",\"moduleSequenceNumber\":84073}],\"dependents\":[],\"ramUsage\":2.25,\"server\":\"home\",\"moduleSequenceNumber\":84073,\"_hash\":\"0a5020d8929b934657f504ad28e2e306d253f43d98ee1df6bd2e0344e52cc03d\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"const settings = {\\r\\n  keys: {\\r\\n    serverMap: 'BB_SERVER_MAP',\\r\\n  },\\r\\n}\\r\\n\\r\\nfunction getItem(key) {\\r\\n  let item = localStorage.getItem(key)\\r\\n\\r\\n  return item ? JSON.parse(item) : undefined\\r\\n}\\r\\n\\r\\nfunction localeHHMMSS(ms = 0) {\\r\\n  if (!ms) {\\r\\n    ms = new Date().getTime()\\r\\n  }\\r\\n\\r\\n  return new Date(ms).toLocaleTimeString()\\r\\n}\\r\\n\\r\\nfunction convert2DArrayToString(arr) {\\r\\n  var components = []\\r\\n  arr.forEach(function (e) {\\r\\n    var s = e.toString()\\r\\n    s = ['[', s, ']'].join('')\\r\\n    components.push(s)\\r\\n  })\\r\\n  return components.join(',').replace(/\\\\s/g, '')\\r\\n}\\r\\n\\r\\nconst codingContractTypesMetadata = [\\r\\n  {\\r\\n    name: 'Find Largest Prime Factor',\\r\\n    solver: function (data) {\\r\\n      var fac = 2\\r\\n      var n = data\\r\\n      while (n > (fac - 1) * (fac - 1)) {\\r\\n        while (n % fac === 0) {\\r\\n          n = Math.round(n / fac)\\r\\n        }\\r\\n        ++fac\\r\\n      }\\r\\n      return n === 1 ? fac - 1 : n\\r\\n    },\\r\\n  },\\r\\n  {\\r\\n    name: 'Subarray with Maximum Sum',\\r\\n    solver: function (data) {\\r\\n      var nums = data.slice()\\r\\n      for (var i = 1; i < nums.length; i++) {\\r\\n        nums[i] = Math.max(nums[i], nums[i] + nums[i - 1])\\r\\n      }\\r\\n      return Math.max.apply(Math, nums)\\r\\n    },\\r\\n  },\\r\\n  {\\r\\n    name: 'Total Ways to Sum',\\r\\n    solver: function (data) {\\r\\n      var ways = [1]\\r\\n      ways.length = data + 1\\r\\n      ways.fill(0, 1)\\r\\n      for (var i = 1; i < data; ++i) {\\r\\n        for (var j = i; j <= data; ++j) {\\r\\n          ways[j] += ways[j - i]\\r\\n        }\\r\\n      }\\r\\n      return ways[data]\\r\\n    },\\r\\n  },\\r\\n  {\\r\\n    name: 'Spiralize Matrix',\\r\\n    solver: function (data, ans) {\\r\\n      var spiral = []\\r\\n      var m = data.length\\r\\n      var n = data[0].length\\r\\n      var u = 0\\r\\n      var d = m - 1\\r\\n      var l = 0\\r\\n      var r = n - 1\\r\\n      var k = 0\\r\\n      while (true) {\\r\\n        // Up\\r\\n        for (var col = l; col <= r; col++) {\\r\\n          spiral[k] = data[u][col]\\r\\n          ++k\\r\\n        }\\r\\n        if (++u > d) {\\r\\n          break\\r\\n        }\\r\\n        // Right\\r\\n        for (var row = u; row <= d; row++) {\\r\\n          spiral[k] = data[row][r]\\r\\n          ++k\\r\\n        }\\r\\n        if (--r < l) {\\r\\n          break\\r\\n        }\\r\\n        // Down\\r\\n        for (var col = r; col >= l; col--) {\\r\\n          spiral[k] = data[d][col]\\r\\n          ++k\\r\\n        }\\r\\n        if (--d < u) {\\r\\n          break\\r\\n        }\\r\\n        // Left\\r\\n        for (var row = d; row >= u; row--) {\\r\\n          spiral[k] = data[row][l]\\r\\n          ++k\\r\\n        }\\r\\n        if (++l > r) {\\r\\n          break\\r\\n        }\\r\\n      }\\r\\n\\r\\n      return spiral\\r\\n    },\\r\\n  },\\r\\n  {\\r\\n    name: 'Array Jumping Game',\\r\\n    solver: function (data) {\\r\\n      var n = data.length\\r\\n      var i = 0\\r\\n      for (var reach = 0; i < n && i <= reach; ++i) {\\r\\n        reach = Math.max(i + data[i], reach)\\r\\n      }\\r\\n      var solution = i === n\\r\\n      return solution ? 1 : 0\\r\\n    },\\r\\n  },\\r\\n  {\\r\\n    name: 'Merge Overlapping Intervals',\\r\\n    solver: function (data) {\\r\\n      var intervals = data.slice()\\r\\n      intervals.sort(function (a, b) {\\r\\n        return a[0] - b[0]\\r\\n      })\\r\\n      var result = []\\r\\n      var start = intervals[0][0]\\r\\n      var end = intervals[0][1]\\r\\n      for (var _i = 0, intervals_1 = intervals; _i < intervals_1.length; _i++) {\\r\\n        var interval = intervals_1[_i]\\r\\n        if (interval[0] <= end) {\\r\\n          end = Math.max(end, interval[1])\\r\\n        } else {\\r\\n          result.push([start, end])\\r\\n          start = interval[0]\\r\\n          end = interval[1]\\r\\n        }\\r\\n      }\\r\\n      result.push([start, end])\\r\\n      var sanitizedResult = convert2DArrayToString(result)\\r\\n      return sanitizedResult\\r\\n    },\\r\\n  },\\r\\n  {\\r\\n    name: 'Generate IP Addresses',\\r\\n    solver: function (data, ans) {\\r\\n      var ret = []\\r\\n      for (var a = 1; a <= 3; ++a) {\\r\\n        for (var b = 1; b <= 3; ++b) {\\r\\n          for (var c = 1; c <= 3; ++c) {\\r\\n            for (var d = 1; d <= 3; ++d) {\\r\\n              if (a + b + c + d === data.length) {\\r\\n                var A = parseInt(data.substring(0, a), 10)\\r\\n                var B = parseInt(data.substring(a, a + b), 10)\\r\\n                var C = parseInt(data.substring(a + b, a + b + c), 10)\\r\\n                var D = parseInt(data.substring(a + b + c, a + b + c + d), 10)\\r\\n                if (A <= 255 && B <= 255 && C <= 255 && D <= 255) {\\r\\n                  var ip = [A.toString(), '.', B.toString(), '.', C.toString(), '.', D.toString()].join('')\\r\\n                  if (ip.length === data.length + 3) {\\r\\n                    ret.push(ip)\\r\\n                  }\\r\\n                }\\r\\n              }\\r\\n            }\\r\\n          }\\r\\n        }\\r\\n      }\\r\\n      return ret\\r\\n    },\\r\\n  },\\r\\n  {\\r\\n    name: 'Algorithmic Stock Trader I',\\r\\n    solver: function (data) {\\r\\n      var maxCur = 0\\r\\n      var maxSoFar = 0\\r\\n      for (var i = 1; i < data.length; ++i) {\\r\\n        maxCur = Math.max(0, (maxCur += data[i] - data[i - 1]))\\r\\n        maxSoFar = Math.max(maxCur, maxSoFar)\\r\\n      }\\r\\n      return maxSoFar.toString()\\r\\n    },\\r\\n  },\\r\\n  {\\r\\n    name: 'Algorithmic Stock Trader II',\\r\\n    solver: function (data) {\\r\\n      var profit = 0\\r\\n      for (var p = 1; p < data.length; ++p) {\\r\\n        profit += Math.max(data[p] - data[p - 1], 0)\\r\\n      }\\r\\n      return profit.toString()\\r\\n    },\\r\\n  },\\r\\n  {\\r\\n    name: 'Algorithmic Stock Trader III',\\r\\n    solver: function (data) {\\r\\n      var hold1 = Number.MIN_SAFE_INTEGER\\r\\n      var hold2 = Number.MIN_SAFE_INTEGER\\r\\n      var release1 = 0\\r\\n      var release2 = 0\\r\\n      for (var _i = 0, data_1 = data; _i < data_1.length; _i++) {\\r\\n        var price = data_1[_i]\\r\\n        release2 = Math.max(release2, hold2 + price)\\r\\n        hold2 = Math.max(hold2, release1 - price)\\r\\n        release1 = Math.max(release1, hold1 + price)\\r\\n        hold1 = Math.max(hold1, price * -1)\\r\\n      }\\r\\n      return release2.toString()\\r\\n    },\\r\\n  },\\r\\n  {\\r\\n    name: 'Algorithmic Stock Trader IV',\\r\\n    solver: function (data) {\\r\\n      var k = data[0]\\r\\n      var prices = data[1]\\r\\n      var len = prices.length\\r\\n      if (len < 2) {\\r\\n        return 0\\r\\n      }\\r\\n      if (k > len / 2) {\\r\\n        var res = 0\\r\\n        for (var i = 1; i < len; ++i) {\\r\\n          res += Math.max(prices[i] - prices[i - 1], 0)\\r\\n        }\\r\\n        return res\\r\\n      }\\r\\n      var hold = []\\r\\n      var rele = []\\r\\n      hold.length = k + 1\\r\\n      rele.length = k + 1\\r\\n      for (var i = 0; i <= k; ++i) {\\r\\n        hold[i] = Number.MIN_SAFE_INTEGER\\r\\n        rele[i] = 0\\r\\n      }\\r\\n      var cur\\r\\n      for (var i = 0; i < len; ++i) {\\r\\n        cur = prices[i]\\r\\n        for (var j = k; j > 0; --j) {\\r\\n          rele[j] = Math.max(rele[j], hold[j] + cur)\\r\\n          hold[j] = Math.max(hold[j], rele[j - 1] - cur)\\r\\n        }\\r\\n      }\\r\\n      return rele[k]\\r\\n    },\\r\\n  },\\r\\n  {\\r\\n    name: 'Minimum Path Sum in a Triangle',\\r\\n    solver: function (data) {\\r\\n      var n = data.length\\r\\n      var dp = data[n - 1].slice()\\r\\n      for (var i = n - 2; i > -1; --i) {\\r\\n        for (var j = 0; j < data[i].length; ++j) {\\r\\n          dp[j] = Math.min(dp[j], dp[j + 1]) + data[i][j]\\r\\n        }\\r\\n      }\\r\\n      return dp[0]\\r\\n    },\\r\\n  },\\r\\n  {\\r\\n    name: 'Unique Paths in a Grid I',\\r\\n    solver: function (data) {\\r\\n      var n = data[0] // Number of rows\\r\\n      var m = data[1] // Number of columns\\r\\n      var currentRow = []\\r\\n      currentRow.length = n\\r\\n      for (var i = 0; i < n; i++) {\\r\\n        currentRow[i] = 1\\r\\n      }\\r\\n      for (var row = 1; row < m; row++) {\\r\\n        for (var i = 1; i < n; i++) {\\r\\n          currentRow[i] += currentRow[i - 1]\\r\\n        }\\r\\n      }\\r\\n      return currentRow[n - 1]\\r\\n    },\\r\\n  },\\r\\n  {\\r\\n    name: 'Unique Paths in a Grid II',\\r\\n    solver: function (data) {\\r\\n      var obstacleGrid = []\\r\\n      obstacleGrid.length = data.length\\r\\n      for (var i = 0; i < obstacleGrid.length; ++i) {\\r\\n        obstacleGrid[i] = data[i].slice()\\r\\n      }\\r\\n      for (var i = 0; i < obstacleGrid.length; i++) {\\r\\n        for (var j = 0; j < obstacleGrid[0].length; j++) {\\r\\n          if (obstacleGrid[i][j] == 1) {\\r\\n            obstacleGrid[i][j] = 0\\r\\n          } else if (i == 0 && j == 0) {\\r\\n            obstacleGrid[0][0] = 1\\r\\n          } else {\\r\\n            obstacleGrid[i][j] = (i > 0 ? obstacleGrid[i - 1][j] : 0) + (j > 0 ? obstacleGrid[i][j - 1] : 0)\\r\\n          }\\r\\n        }\\r\\n      }\\r\\n      return obstacleGrid[obstacleGrid.length - 1][obstacleGrid[0].length - 1]\\r\\n    },\\r\\n  },\\r\\n  {\\r\\n    name: 'Sanitize Parentheses in Expression',\\r\\n    solver: function (data) {\\r\\n      var left = 0\\r\\n      var right = 0\\r\\n      var res = []\\r\\n      for (var i = 0; i < data.length; ++i) {\\r\\n        if (data[i] === '(') {\\r\\n          ++left\\r\\n        } else if (data[i] === ')') {\\r\\n          left > 0 ? --left : ++right\\r\\n        }\\r\\n      }\\r\\n      function dfs(pair, index, left, right, s, solution, res) {\\r\\n        if (s.length === index) {\\r\\n          if (left === 0 && right === 0 && pair === 0) {\\r\\n            for (var i = 0; i < res.length; i++) {\\r\\n              if (res[i] === solution) {\\r\\n                return\\r\\n              }\\r\\n            }\\r\\n            res.push(solution)\\r\\n          }\\r\\n          return\\r\\n        }\\r\\n        if (s[index] === '(') {\\r\\n          if (left > 0) {\\r\\n            dfs(pair, index + 1, left - 1, right, s, solution, res)\\r\\n          }\\r\\n          dfs(pair + 1, index + 1, left, right, s, solution + s[index], res)\\r\\n        } else if (s[index] === ')') {\\r\\n          if (right > 0) dfs(pair, index + 1, left, right - 1, s, solution, res)\\r\\n          if (pair > 0) dfs(pair - 1, index + 1, left, right, s, solution + s[index], res)\\r\\n        } else {\\r\\n          dfs(pair, index + 1, left, right, s, solution + s[index], res)\\r\\n        }\\r\\n      }\\r\\n      dfs(0, 0, left, right, data, '', res)\\r\\n\\r\\n      return res\\r\\n    },\\r\\n  },\\r\\n  {\\r\\n    name: 'Find All Valid Math Expressions',\\r\\n    solver: function (data) {\\r\\n      var num = data[0]\\r\\n      var target = data[1]\\r\\n      function helper(res, path, num, target, pos, evaluated, multed) {\\r\\n        if (pos === num.length) {\\r\\n          if (target === evaluated) {\\r\\n            res.push(path)\\r\\n          }\\r\\n          return\\r\\n        }\\r\\n        for (var i = pos; i < num.length; ++i) {\\r\\n          if (i != pos && num[pos] == '0') {\\r\\n            break\\r\\n          }\\r\\n          var cur = parseInt(num.substring(pos, i + 1))\\r\\n          if (pos === 0) {\\r\\n            helper(res, path + cur, num, target, i + 1, cur, cur)\\r\\n          } else {\\r\\n            helper(res, path + '+' + cur, num, target, i + 1, evaluated + cur, cur)\\r\\n            helper(res, path + '-' + cur, num, target, i + 1, evaluated - cur, -cur)\\r\\n            helper(res, path + '*' + cur, num, target, i + 1, evaluated - multed + multed * cur, multed * cur)\\r\\n          }\\r\\n        }\\r\\n      }\\r\\n\\r\\n      if (num == null || num.length === 0) {\\r\\n        return []\\r\\n      }\\r\\n      var result = []\\r\\n      helper(result, '', num, target, 0, 0, 0)\\r\\n      return result\\r\\n    },\\r\\n  },\\r\\n]\\r\\n\\r\\nfunction findAnswer(contract) {\\r\\n  let answer\\r\\n\\r\\n  const codingContractSolution = codingContractTypesMetadata.find((codingContractTypeMetadata) => codingContractTypeMetadata.name === contract.type)\\r\\n\\r\\n  if (codingContractSolution) {\\r\\n    answer = codingContractSolution.solver(contract.data)\\r\\n  } else {\\r\\n    console.error('Unable to find answer for', contract)\\r\\n  }\\r\\n\\r\\n  return answer\\r\\n}\\r\\n\\r\\nexport async function main(ns) {\\r\\n  ns.tprint(`[${localeHHMMSS()}] Starting contracter.js`)\\r\\n\\r\\n  let hostname = ns.getHostname()\\r\\n\\r\\n  if (hostname !== 'home') {\\r\\n    throw new Exception('Run the script from home')\\r\\n  }\\r\\n\\r\\n  const serverMap = getItem(settings.keys.serverMap)\\r\\n  const contractsDb = []\\r\\n\\r\\n  Object.keys(serverMap.servers).forEach((hostname) => {\\r\\n    const files = ns.ls(hostname)\\r\\n    if (files && files.length) {\\r\\n      const contracts = files.filter((file) => file.includes('.cct'))\\r\\n\\r\\n      if (contracts.length) {\\r\\n        contracts.forEach((contract) => {\\r\\n          const contractData = {\\r\\n            contract,\\r\\n            hostname,\\r\\n            type: ns.codingcontract.getContractType(contract, hostname),\\r\\n            data: ns.codingcontract.getData(contract, hostname),\\r\\n          }\\r\\n\\r\\n          contractsDb.push(contractData)\\r\\n        })\\r\\n      }\\r\\n    }\\r\\n  })\\r\\n\\r\\n  if (contractsDb.length) {\\r\\n    for (let i = 0; i < contractsDb.length; i++) {\\r\\n      const contract = contractsDb[i]\\r\\n      const answer = findAnswer(contract)\\r\\n\\r\\n      if (answer != null) {\\r\\n        const solvingResult = ns.codingcontract.attempt(answer, contract.contract, contract.hostname, { returnReward: true })\\r\\n\\r\\n        if (solvingResult) {\\r\\n          ns.tprint(`[${localeHHMMSS()}] Solved ${contract.contract} on ${contract.hostname}. ${solvingResult}`)\\r\\n        } else {\\r\\n          ns.tprint(`[${localeHHMMSS()}] Wrong answer for ${contract.contract} on ${contract.hostname}`)\\r\\n        }\\r\\n      } else {\\r\\n        ns.tprint(`[${localeHHMMSS()}] Unable to find the answer for: ${JSON.stringify(contract)}`)\\r\\n      }\\r\\n\\r\\n      await ns.sleep(10)\\r\\n    }\\r\\n  }\\r\\n  ns.tprint(`[${localeHHMMSS()}] contracter.js finished`)\\r\\n}\",\"filename\":\"contracter.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"contracter.js\",\"url\":\"blob:https://danielyxie.github.io/2c888f3b-ddae-4810-8630-19012fad0289\",\"moduleSequenceNumber\":83903}],\"dependents\":[],\"ramUsage\":21.85,\"server\":\"home\",\"moduleSequenceNumber\":83903,\"_hash\":\"e545dfc6852ea80599e19dd568ae4074bfcc42d9c78a9129c3bc3f439347de80\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"codingcontract.getContractType\",\"cost\":5},{\"type\":\"fn\",\"name\":\"codingcontract.getData\",\"cost\":5},{\"type\":\"fn\",\"name\":\"codingcontract.attempt\",\"cost\":10}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"const commission = 100000\\r\\nlet stockSymbols\\r\\n\\r\\nfunction localeHHMMSS(ms = 0) {\\r\\n  if (!ms) {\\r\\n    ms = new Date().getTime()\\r\\n  }\\r\\n\\r\\n  return new Date(ms).toLocaleTimeString()\\r\\n}\\r\\n\\r\\nfunction sellShorts(ns, stockSymbol) {\\r\\n  const stockInfo = getStockInfo(ns, stockSymbol)\\r\\n  const shortSellValue = ns.stock.sell(stockSymbol, stockInfo.sharesShort)\\r\\n\\r\\n  if (shortSellValue) {\\r\\n    ns.print(\\r\\n      `[${localeHHMMSS()}][${stockSymbol}] Sold ${stockInfo.sharesShort} shorts for ${ns.nFormat(shortSellValue, '$0.000a')}. Profit: ${ns.nFormat(\\r\\n        stockInfo.sharesLong * (stockInfo.avgPriceShort - shortSellValue) - 2 * commission,\\r\\n        '$0.000a'\\r\\n      )}`\\r\\n    )\\r\\n  }\\r\\n}\\r\\n/** @param {NS} ns **/\\r\\nfunction sellLongs(ns, stockSymbol) {\\r\\n  const stockInfo = getStockInfo(ns, stockSymbol)\\r\\n  const longSellValue = ns.stock.sell(stockSymbol, stockInfo.sharesLong)\\r\\n\\r\\n  if (longSellValue) {\\r\\n    ns.print(\\r\\n      `[${localeHHMMSS()}][${stockSymbol}] Sold ${stockInfo.sharesLong} longs for ${ns.nFormat(longSellValue, '$0.000a')}. Profit: ${ns.nFormat(\\r\\n        stockInfo.sharesLong * (longSellValue - stockInfo.avgPriceLong) - 2 * commission,\\r\\n        '$0.000a'\\r\\n      )}`\\r\\n    )\\r\\n  }\\r\\n}\\r\\n/** @param {NS} ns **/\\r\\nfunction getStockInfo(ns, stockSymbol) {\\r\\n  const [sharesLong, avgPriceLong, sharesShort, avgPriceShort] = ns.stock.getPosition(stockSymbol)\\r\\n\\r\\n  const stockAskPrice = ns.stock.getAskPrice(stockSymbol)\\r\\n  const stockBidPrice = ns.stock.getBidPrice(stockSymbol)\\r\\n\\r\\n  return {\\r\\n    stockSymbol,\\r\\n    sharesLong,\\r\\n    avgPriceLong,\\r\\n    stockAskPrice,\\r\\n    sharesShort,\\r\\n    avgPriceShort,\\r\\n    stockBidPrice,\\r\\n  }\\r\\n}\\r\\n\\r\\n/** @param {NS} ns **/export async function main(ns) {\\r\\n  ns.disableLog('ALL')\\r\\n\\r\\n  stockSymbols = ns.stock.getSymbols()\\r\\n  stockSymbols.forEach((stockSymbol) => {\\r\\n    sellLongs(ns, stockSymbol)\\r\\n    sellShorts(ns, stockSymbol)\\r\\n  })\\r\\n}\",\"filename\":\"sellAllStock.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"sellAllStock.js\",\"url\":\"blob:file:///fdd07613-5cc3-47f2-a86a-9484be4382d6\",\"moduleSequenceNumber\":51199}],\"dependents\":[],\"ramUsage\":12.1,\"server\":\"home\",\"moduleSequenceNumber\":83895,\"_hash\":\"2ef477adb6052d210ec5b4c29a2529d0e4055eeb734655563e0e203cbe41631e\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"stock.sell\",\"cost\":2.5},{\"type\":\"fn\",\"name\":\"stock.getPosition\",\"cost\":2},{\"type\":\"fn\",\"name\":\"stock.getAskPrice\",\"cost\":2},{\"type\":\"fn\",\"name\":\"stock.getBidPrice\",\"cost\":2},{\"type\":\"fn\",\"name\":\"stock.getSymbols\",\"cost\":2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"const settings = {\\r\\n    keys: {\\r\\n        serverMap: 'BB_SERVER_MAP',\\r\\n    },\\r\\n}\\r\\nfunction getItem(key) {\\r\\n    let item = localStorage.getItem(key)\\r\\n\\r\\n    return item ? JSON.parse(item) : undefined\\r\\n}\\r\\n\\r\\nconst excluedFiles = ['start.js', 'rmfile.js']\\r\\n/** @param {NS} ns **/\\r\\nexport async function main(ns) {\\r\\n    const servers = getItem(settings.keys.serverMap).servers;\\r\\n    ns.exec('killAll.js', 'home', 1)\\r\\n    Object.keys(servers).forEach((server) => {\\r\\n        const files = ns.ls(server)\\r\\n        for (const file of files){\\r\\n            if (file.endsWith('js') && !excluedFiles.includes(file)){\\r\\n                ns.rm(file, server)\\r\\n            }\\r\\n        }\\r\\n    })\\r\\n\\r\\n}\",\"filename\":\"rmfile.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4.1,\"server\":\"home\",\"moduleSequenceNumber\":83896,\"_hash\":\"f452406f0f27d3e2991900eade8886f0c8d7f35cc098ee6da872e37d1c36402a\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"rm\",\"cost\":1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"const settings = {\\r\\n  keys: {\\r\\n    crimes: 'BB_CRIMES',\\r\\n    crimesStop: 'BB_CRIMES_STOP',\\r\\n  },\\r\\n  intervalToRecheck: 10 * 60 * 1000,\\r\\n}\\r\\n\\r\\nfunction getItem(key) {\\r\\n  let item = localStorage.getItem(key)\\r\\n\\r\\n  return item ? JSON.parse(item) : undefined\\r\\n}\\r\\n\\r\\nfunction setItem(key, value) {\\r\\n  localStorage.setItem(key, JSON.stringify(value))\\r\\n}\\r\\n\\r\\nfunction localeHHMMSS(ms = 0) {\\r\\n  if (!ms) {\\r\\n    ms = new Date().getTime()\\r\\n  }\\r\\n\\r\\n  return new Date(ms).toLocaleTimeString()\\r\\n}\\r\\n\\r\\nfunction getCrimesData(ns) {\\r\\n  ns.tprint(`[${localeHHMMSS()}] Spawning getCrimesData.js`)\\r\\n  ns.spawn('getCrimesData.js', 1)\\r\\n}\\r\\n\\r\\nfunction selectCrime(crimes) {\\r\\n  const crimesList = Object.keys(crimes)\\r\\n  crimesList.sort((a, b) => crimes[b].chance - crimes[a].chance)\\r\\n  const solidChanceCrimes = crimesList.filter((crime) => crimes[crime].chance >= 0.8)\\r\\n  const topCrimesList = solidChanceCrimes.length > 3 ? solidChanceCrimes : crimesList.slice(0, 2)\\r\\n\\r\\n  let bestCrime = 'shoplift'\\r\\n  let bestCrimeWeight = 0\\r\\n\\r\\n  topCrimesList.forEach((crime) => {\\r\\n    const crimeWeight =\\r\\n      crimes[crime].chance *\\r\\n      (crimes[crime].stats.money / crimes[crime].stats.time) *\\r\\n      ((crimes[crime].stats.intelligence_exp * 0.1 + 1) / (crimes[crime].stats.intelligence_exp * 0.1 + 2))\\r\\n\\r\\n    if (crimeWeight > bestCrimeWeight) {\\r\\n      bestCrime = crime\\r\\n      bestCrimeWeight = crimeWeight\\r\\n    }\\r\\n  })\\r\\n\\r\\n  return bestCrime\\r\\n}\\r\\n/** @param {NS} ns **/\\r\\nexport async function main(ns) {\\r\\n  ns.tprint(`[${localeHHMMSS()}] Starting commitCrime.js`)\\r\\n\\r\\n  let hostname = ns.getHostname()\\r\\n\\r\\n  if (hostname !== 'home') {\\r\\n    throw new Exception('Run the script from home')\\r\\n  }\\r\\n\\r\\n  let continueCommitingCrime = true\\r\\n  const crimes = getItem(settings.keys.crimes)\\r\\n\\r\\n  if (!crimes) {\\r\\n    getCrimesData(ns)\\r\\n    return\\r\\n  }\\r\\n\\r\\n  const crimeToCommit = selectCrime(crimes)\\r\\n  const endTime = new Date().getTime() + settings.intervalToRecheck\\r\\n\\r\\n  while (continueCommitingCrime) {\\r\\n    const crimesStop = getItem(settings.keys.crimesStop)\\r\\n\\r\\n    if (crimesStop || new Date().getTime() > endTime) {\\r\\n      continueCommitingCrime = false\\r\\n    } else {\\r\\n      while (ns.isBusy()) {\\r\\n        await ns.sleep(1000)\\r\\n      }\\r\\n\\r\\n      ns.tprint(`[${localeHHMMSS()}] Commiting crime: ${crimeToCommit}`)\\r\\n      ns.commitCrime(crimeToCommit)\\r\\n      await ns.sleep(crimes[crimeToCommit].stats.time + 5)\\r\\n    }\\r\\n  }\\r\\n\\r\\n  const crimesStop = getItem(settings.keys.crimesStop)\\r\\n  if (!crimesStop) {\\r\\n    getCrimesData(ns)\\r\\n  } else {\\r\\n    setItem(settings.keys.crimesStop, false)\\r\\n  }\\r\\n}\",\"filename\":\"commitCrime.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"commitCrime.js\",\"url\":\"blob:file:///85fa8e41-007d-4773-83e3-ceb55ed75f80\",\"moduleSequenceNumber\":148627}],\"dependents\":[],\"ramUsage\":91.65,\"server\":\"home\",\"moduleSequenceNumber\":83897,\"_hash\":\"a07e4955afde406933de06faa8752ae22b84d7b50a5bf13787393a81747988c7\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"spawn\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"isBusy\",\"cost\":8},{\"type\":\"fn\",\"name\":\"commitCrime\",\"cost\":80}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"const settings = {\\r\\n    keys: {\\r\\n        crimes: 'BB_CRIMES',\\r\\n    },\\r\\n    crimes: [\\r\\n        'shoplift',\\r\\n        'rob store',\\r\\n        'mug',\\r\\n        'larceny',\\r\\n        'deal drugs',\\r\\n        'bond forgery',\\r\\n        'traffick arms',\\r\\n        'homicide',\\r\\n        'grand theft auto',\\r\\n        'kidnap',\\r\\n        'assassinate',\\r\\n        'heist',\\r\\n    ],\\r\\n}\\r\\n\\r\\nfunction getItem(key) {\\r\\n    let item = localStorage.getItem(key)\\r\\n\\r\\n    return item ? JSON.parse(item) : undefined\\r\\n}\\r\\n\\r\\nfunction setItem(key, value) {\\r\\n    localStorage.setItem(key, JSON.stringify(value))\\r\\n}\\r\\n\\r\\nfunction localeHHMMSS(ms = 0) {\\r\\n    if (!ms) {\\r\\n        ms = new Date().getTime()\\r\\n    }\\r\\n\\r\\n    return new Date(ms).toLocaleTimeString()\\r\\n}\\r\\n/** @param {NS} ns **/\\r\\nexport async function main(ns) {\\r\\n    ns.tprint(`[${localeHHMMSS()}] Starting getCrimesData.js`)\\r\\n\\r\\n    const scriptToRunAfter = ns.args[0] || 'getCrimesData2.js'\\r\\n\\r\\n    let hostname = ns.getHostname()\\r\\n\\r\\n    if (hostname !== 'home') {\\r\\n        throw new Exception('Run the script from home')\\r\\n    }\\r\\n\\r\\n    const crimesCache = getItem(settings.keys.crimes) || {}\\r\\n    const crimes = {}\\r\\n\\r\\n    settings.crimes.map((crime) => {\\r\\n        const chance = ns.getCrimeChance(crime)\\r\\n\\r\\n        crimes[crime] = { ...crimesCache[crime], chance }\\r\\n    })\\r\\n\\r\\n    setItem(settings.keys.crimes, crimes)\\r\\n\\r\\n    if (scriptToRunAfter) {\\r\\n        ns.tprint(`[${localeHHMMSS()}] Spawning ${scriptToRunAfter}`)\\r\\n        ns.spawn(scriptToRunAfter, 1)\\r\\n    }\\r\\n}\",\"filename\":\"getCrimeData.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"getCrimeData.js\",\"url\":\"blob:file:///08a2fc77-dfe9-4482-af33-04c41115e05a\",\"moduleSequenceNumber\":148628}],\"dependents\":[],\"ramUsage\":83.65,\"server\":\"home\",\"moduleSequenceNumber\":83898,\"_hash\":\"8ece58ba86ebfab30945d7be47d147ddf1f21978794b742e25a6e69e0d046a2e\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getCrimeChance\",\"cost\":80},{\"type\":\"fn\",\"name\":\"spawn\",\"cost\":2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"const settings = {\\r\\n    keys: {\\r\\n        crimes: 'BB_CRIMES',\\r\\n    },\\r\\n    crimes: [\\r\\n        'shoplift',\\r\\n        'rob store',\\r\\n        'mug',\\r\\n        'larceny',\\r\\n        'deal drugs',\\r\\n        'bond forgery',\\r\\n        'traffick arms',\\r\\n        'homicide',\\r\\n        'grand theft auto',\\r\\n        'kidnap',\\r\\n        'assassinate',\\r\\n        'heist',\\r\\n    ],\\r\\n}\\r\\n\\r\\nfunction getItem(key) {\\r\\n    let item = localStorage.getItem(key)\\r\\n\\r\\n    return item ? JSON.parse(item) : undefined\\r\\n}\\r\\n\\r\\nfunction setItem(key, value) {\\r\\n    localStorage.setItem(key, JSON.stringify(value))\\r\\n}\\r\\n\\r\\nfunction localeHHMMSS(ms = 0) {\\r\\n    if (!ms) {\\r\\n        ms = new Date().getTime()\\r\\n    }\\r\\n\\r\\n    return new Date(ms).toLocaleTimeString()\\r\\n}\\r\\n/** @param {NS} ns **/\\r\\nexport async function main(ns) {\\r\\n    ns.tprint(`[${localeHHMMSS()}] Starting getCrimesData2.ns`)\\r\\n\\r\\n    const scriptToRunAfter = ns.args[0] || 'commitCrime.ns'\\r\\n\\r\\n    let hostname = ns.getHostname()\\r\\n\\r\\n    if (hostname !== 'home') {\\r\\n        throw new Exception('Run the script from home')\\r\\n    }\\r\\n\\r\\n    const crimesCache = getItem(settings.keys.crimes) || {}\\r\\n    const crimes = {}\\r\\n\\r\\n    settings.crimes.map((crime) => {\\r\\n        const stats = ns.getCrimeStats(crime)\\r\\n\\r\\n        crimes[crime] = { ...crimesCache[crime], stats }\\r\\n    })\\r\\n\\r\\n    setItem(settings.keys.crimes, crimes)\\r\\n\\r\\n    if (scriptToRunAfter) {\\r\\n        ns.tprint(`[${localeHHMMSS()}] Spawning ${scriptToRunAfter}`)\\r\\n        ns.spawn(scriptToRunAfter, 1)\\r\\n    }\\r\\n}\",\"filename\":\"getCrimeData2.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"getCrimeData2.js\",\"url\":\"blob:file:///2366f72b-b24e-4455-b2ce-207ffc41807b\",\"moduleSequenceNumber\":2167}],\"dependents\":[],\"ramUsage\":83.65,\"server\":\"home\",\"moduleSequenceNumber\":83899,\"_hash\":\"f89f206f304cef3cca48633454391f7122e52ab08c0b7046ca582065469df87f\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getCrimeStats\",\"cost\":80},{\"type\":\"fn\",\"name\":\"spawn\",\"cost\":2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    ns.tprint(\\\"Starting script here\\\");\\n    ns.disableLog('sleep');\\n    ns.disableLog('getServerMoneyAvailable');\\n\\n    let stockSymbols = ns.stock.getSymbols(); // all symbols\\n    let portfolio = []; // init portfolio\\n    let cycle = 0;\\n    // ~~~~~~~You can edit these~~~~~~~~\\n    const forecastThresh = 0.6 // Buy above this confidence level (forecast%)\\n    const moneyCouldSpent = 0.2 * ns.getServerMoneyAvailable('home'); // max of cash to keep\\n    const profitPercent = 1.05\\n    const forecastSell = 0.25\\n    // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\\n\\n    ns.tprint(\\\"Starting run - Do we own any stocks?\\\"); //Finds and adds any stocks we already own\\n    for (const stock of stockSymbols) {\\n        let pos = ns.stock.getPosition(stock);\\n        if (pos[0] > 0) {\\n            portfolio.push({ sym: stock, value: pos[1], shares: pos[0] })\\n            ns.tprint('Detected: ' + stock + ' quant: ' + pos[0] + ' avg price: ' + pos[1]);\\n        };\\n    };\\n\\n    while (true) {\\n        let stockNum = stockSymbols.length\\n        for (const stock of stockSymbols) { // for each stock symbol\\n            if (portfolio.findIndex(obj => obj.sym === stock) !== -1) { //if we already have this stock\\n                let i = portfolio.findIndex(obj => obj.sym === stock); // log index of symbol as i\\n                if (ns.stock.getAskPrice(stock) >= portfolio[i].value * profitPercent) { // if the price is higher than what we bought it at +10% then we SELL\\n                    ns.tprint('sell stock because of profit enough')\\n                    sellStock(stock);\\n                }\\n                else if (ns.stock.getForecast(stock) < forecastSell) {\\n                    ns.tprint('sell stock because of forecastSell')\\n                    sellStock(stock);\\n                }\\n            }\\n\\n            else if (ns.stock.getForecast(stock) >= forecastThresh) { // if the forecast is better than threshold and we don't own then BUY\\n                buyStock(stock, stockNum);\\n            }\\n        } // end of for loop (iterating stockSymbols)\\n        cycle++;\\n        if (cycle % 10 === 0) { ns.tprint('Cycle ' + cycle + ' Complete') };\\n        await ns.sleep(6000);\\n    } // end of while true loop\\n\\n    function buyStock(stock, stockNum) {\\n        let stockPrice = ns.stock.getAskPrice(stock); // Get the stockprice\\n        let shares = stockBuyQuantCalc(stockPrice, stock, stockNum); // calculate the shares to buy using StockBuyQuantCalc\\n\\n        if (shares < 0) {\\n            ns.tprint('No money for stock: ' + stock)\\n            return\\n        }\\n\\n        if (ns.stock.getVolatility(stock) <= 0.1) { // if volatility is < 5%, buy the stock\\n            ns.stock.buy(stock, shares);\\n            ns.tprint('Bought: ' + stock + ' shares: ' + Math.round(shares) + ' price: ' + Math.round(stockPrice));\\n\\n            portfolio.push({ sym: stock, value: stockPrice, shares: shares }); //store the purchase info in portfolio\\n        }\\n    }\\n\\n    function sellStock(stock) {\\n        let position = ns.stock.getPosition(stock);\\n\\n        let i = portfolio.findIndex(obj => obj.sym === stock); //Find the stock info in the portfolio\\n        ns.tprint('SOLD: ' + stock + 'shares: ' + portfolio.shares + ' price: ' + portfolio.value + 'earn: ' + (position[0] * position[1]) - (portfolio.shares * portfolio.value));\\n        portfolio.splice(i, 1); // Remove the stock from portfolio\\n        ns.stock.sell(stock, position[0]);\\n\\n    };\\n\\n    function stockBuyQuantCalc(stockPrice, stock, stockNum) { // Calculates how many shares to buy\\n        let calcShares = (moneyCouldSpent * (1 / stockNum)) / stockPrice;\\n\\n        if (calcShares < 0) {\\n            return -1\\n        }\\n        let maxShares = ns.stock.getMaxShares(stock);\\n\\n        if (calcShares > maxShares) {\\n            return maxShares\\n        }\\n        else { return calcShares }\\n    }\\n}\",\"filename\":\"stock.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"stock.js\",\"url\":\"blob:file:///d3199a91-c56c-4f33-87ac-5129b00bd979\",\"moduleSequenceNumber\":452}],\"dependents\":[],\"ramUsage\":19.7,\"server\":\"home\",\"moduleSequenceNumber\":83900,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"stock.getSymbols\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"stock.getPosition\",\"cost\":2},{\"type\":\"fn\",\"name\":\"stock.getAskPrice\",\"cost\":2},{\"type\":\"fn\",\"name\":\"stock.getForecast\",\"cost\":2.5},{\"type\":\"fn\",\"name\":\"stock.getVolatility\",\"cost\":2.5},{\"type\":\"fn\",\"name\":\"stock.buy\",\"cost\":2.5},{\"type\":\"fn\",\"name\":\"stock.sell\",\"cost\":2.5},{\"type\":\"fn\",\"name\":\"stock.getMaxShares\",\"cost\":2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"const stockSymbols = ['ECP', 'BLD', 'OMTK', 'FSIG', 'FLCM', 'CTYS']\\nconst avgTrackers = {}\\nconst profitTrackers = {}\\nconst risingTrackers = {}\\nconst firstInvests = {}\\n\\nlet corpus\\n\\nfunction localeHHMMSS(ms = 0) {\\n    if (!ms) {\\n        ms = new Date().getTime()\\n    }\\n\\n    return new Date(ms).toLocaleTimeString()\\n}\\n\\nconst average = (arr) => arr.reduce((p, c) => p + c, 0) / arr.length\\n\\nfunction getMoney(ns) {\\n    return ns.getServerMoneyAvailable('home') * 0.4\\n}\\n\\n/** @param {NS} ns **/\\nfunction processTick(ns, stockSymbol) {\\n    const profitMargin = 0.1\\n    const minimumMoneyToInvest = 10000000\\n    let profitTracker = profitTrackers[stockSymbol] || {}\\n    let positionChanged = false\\n    let avgTracker = avgTrackers[stockSymbol] || []\\n    let rising = risingTrackers[stockSymbol]\\n    avgTracker.push(ns.stock.getPrice(stockSymbol))\\n    avgTracker = avgTracker.slice(-40)\\n\\n    if (avgTracker.length === 40) {\\n        let profitPercentage\\n        let profitMarginCrossed = false\\n        const avg40 = average(avgTracker)\\n        const avg10 = average(avgTracker.slice(-10))\\n\\n        if (profitTracker.volume && profitTracker.position) {\\n            const stockSaleGain = ns.stock.getSaleGain(stockSymbol, profitTracker.volume, profitTracker.position)\\n            profitPercentage = (stockSaleGain - profitTracker.volume * profitTracker.value) / (profitTracker.volume * profitTracker.value)\\n\\n            if (Math.abs(profitPercentage) > profitMargin) {\\n                profitMarginCrossed = true\\n            }\\n        }\\n\\n        if (profitMarginCrossed) {\\n            const shortSellValue = ns.stock.sell(stockSymbol, 9999999999999999999999999)\\n            if (shortSellValue && profitTracker.volume) {\\n                const profit = profitTracker.volume * (profitTracker.value - shortSellValue) - 200000\\n                corpus += profit\\n\\n                const message = `[${localeHHMMSS()}] ${stockSymbol}, profitPercentage: ${ns.nFormat(profitPercentage, '0.0%')}, selling shorts,\\n          profitTracker.volume: ${profitTracker.volume}, profitTracker.value: ${ns.nFormat(profitTracker.value, '$0.000a')},\\n          shortSellValue: ${ns.nFormat(shortSellValue, '$0.000a')},\\n          profit: ${ns.nFormat(profit, '$0.000a')}, corpus: ${ns.nFormat(corpus, '$0.000a')}`\\n                    .replace(/\\\\r/g, '')\\n                    .replace(/\\\\n/g, '')\\n                    .replace(/\\\\s+/g, ' ')\\n                    .trim()\\n                ns.tprint(message)\\n\\n                profitTracker = {\\n                    position: '',\\n                    value: 0,\\n                    volume: 0,\\n                }\\n            }\\n\\n            const longSellValue = ns.stock.sell(stockSymbol, 9999999999999999999999999)\\n            if (longSellValue && profitTracker.volume) {\\n                const profit = profitTracker.volume * (longSellValue - profitTracker.value) - 200000\\n                corpus += profit\\n\\n                const message = `[${localeHHMMSS()}] ${stockSymbol}, profitPercentage: ${ns.nFormat(profitPercentage, '0.0%')}, selling longs,\\n          profitTracker.volume: ${profitTracker.volume}, profitTracker.value: ${ns.nFormat(profitTracker.value, '$0.000a')},\\n          longSellValue: ${ns.nFormat(longSellValue, '$0.000a')},\\n          profit: ${ns.nFormat(profit, '$0.000a')}, corpus: ${ns.nFormat(corpus, '$0.000a')}`\\n                    .replace(/\\\\r/g, '')\\n                    .replace(/\\\\n/g, '')\\n                    .replace(/\\\\s+/g, ' ')\\n                    .trim()\\n                ns.tprint(message)\\n\\n                profitTracker = {\\n                    position: '',\\n                    value: 0,\\n                    volume: 0,\\n                }\\n            }\\n        }\\n\\n        if (rising !== avg10 > avg40 || profitMarginCrossed) {\\n            positionChanged = true\\n            rising = avg10 > avg40\\n        }\\n\\n        if (positionChanged) {\\n            if (rising) {\\n                // It's rising now, sell short, buy long\\n                const shortSellValue = ns.stock.sellShort(stockSymbol, 9999999999999999999999999)\\n                if (shortSellValue && profitTracker.volume) {\\n                    const profit = profitTracker.volume * (profitTracker.value - shortSellValue) - 200000\\n                    corpus += profit\\n\\n                    const message = `[${localeHHMMSS()}] ${stockSymbol}, selling shorts,\\n            profitTracker.volume: ${profitTracker.volume}, profitTracker.value: ${ns.nFormat(profitTracker.value, '$0.000a')},\\n            shortSellValue: ${ns.nFormat(shortSellValue, '$0.000a')},\\n            profit: ${ns.nFormat(profit, '$0.000a')}, corpus: ${ns.nFormat(corpus, '$0.000a')}`\\n                        .replace(/\\\\r/g, '')\\n                        .replace(/\\\\n/g, '')\\n                        .replace(/\\\\s+/g, ' ')\\n                        .trim()\\n                    ns.tprint(message)\\n\\n                    profitTracker = {\\n                        position: '',\\n                        value: 0,\\n                        volume: 0,\\n                    }\\n                }\\n\\n                const moneyToInvest = firstInvests[stockSymbol] ? getMoney(ns) : Math.floor(corpus / 6)\\n                if (moneyToInvest > minimumMoneyToInvest) {\\n                    let volume = Math.floor(moneyToInvest / ns.stock.getAskPrice(stockSymbol))\\n                    volume = Math.min(volume, ns.stock.getMaxShares(stockSymbol))\\n\\n                    if (volume > 0) {\\n                        const longBuyValue = ns.stock.buy(stockSymbol, volume)\\n\\n                        const message = `[${localeHHMMSS()}] ${stockSymbol}, buying longs,\\n              volume: ${volume},\\n              price per share: ${ns.nFormat(longBuyValue, '$0.000a')},\\n              invested: ${ns.nFormat(volume * longBuyValue, '$0.000a')},\\n              moneyToInvest: ${ns.nFormat(moneyToInvest, '$0.000a')},\\n              corpus: ${ns.nFormat(corpus, '$0.000a')}`\\n                            .replace(/\\\\r/g, '')\\n                            .replace(/\\\\n/g, '')\\n                            .replace(/\\\\s+/g, ' ')\\n                            .trim()\\n                        ns.tprint(message)\\n\\n                        if (longBuyValue && volume) {\\n                            firstInvests[stockSymbol] = true\\n                            profitTracker = {\\n                                position: 'Long',\\n                                value: longBuyValue,\\n                                volume,\\n                            }\\n                        }\\n                    } else {\\n                        ns.tprint(`[${localeHHMMSS()}] ERROR #1: ${stockSymbol}, buying longs, volume: ${volume},\\n              getMoney(ns): ${getMoney(ns)}, Math.floor(corpus / 6): ${Math.floor(corpus / 6)},\\n              moneyToInvest: ${ns.nFormat(moneyToInvest, '$0.000a')}`)\\n                    }\\n                } else {\\n                    ns.tprint(`[${localeHHMMSS()}] ERROR #2: ${stockSymbol}, buying longs,\\n            getMoney(ns): ${getMoney(ns)}, Math.floor(corpus / 6): ${Math.floor(corpus / 6)},\\n            moneyToInvest: ${ns.nFormat(moneyToInvest, '$0.000a')}`)\\n                }\\n            } else {\\n                // It's falling now, sell long, buy short\\n                const longSellValue = ns.stock.sell(stockSymbol, 9999999999999999999999999)\\n                if (longSellValue && profitTracker.volume) {\\n                    const profit = profitTracker.volume * (longSellValue - profitTracker.value) - 200000\\n                    corpus += profit\\n\\n                    const message = `[${localeHHMMSS()}] ${stockSymbol}, selling longs,\\n            profitTracker.volume: ${profitTracker.volume}, profitTracker.value: ${ns.nFormat(profitTracker.value, '$0.000a')},\\n            longSellValue: ${ns.nFormat(longSellValue, '$0.000a')},\\n            profit: ${ns.nFormat(profit, '$0.000a')}, corpus: ${ns.nFormat(corpus, '$0.000a')}`\\n                        .replace(/\\\\r/g, '')\\n                        .replace(/\\\\n/g, '')\\n                        .replace(/\\\\s+/g, ' ')\\n                        .trim()\\n                    ns.tprint(message)\\n\\n                    profitTracker = {\\n                        position: '',\\n                        value: 0,\\n                        volume: 0,\\n                    }\\n                }\\n\\n                const moneyToInvest = firstInvests[stockSymbol] ? getMoney(ns) : Math.floor(corpus / 6)\\n                if (moneyToInvest > minimumMoneyToInvest) {\\n                    let volume = Math.floor(moneyToInvest / ns.stock.getBidPrice(stockSymbol))\\n                    volume = Math.min(volume, ns.stock.getMaxShares(stockSymbol))\\n\\n                    if (volume > 0) {\\n                        const shortBuyValue = ns.stock.buy(stockSymbol, volume)\\n\\n                        const message = `[${localeHHMMSS()}] ${stockSymbol}, buying shorts,\\n              volume: ${volume},\\n              price per share: ${ns.nFormat(shortBuyValue, '$0.000a')},\\n              invested: ${ns.nFormat(volume * shortBuyValue, '$0.000a')},\\n              moneyToInvest: ${ns.nFormat(moneyToInvest, '$0.000a')},\\n              corpus: ${ns.nFormat(corpus, '$0.000a')}`\\n                            .replace(/\\\\r/g, '')\\n                            .replace(/\\\\n/g, '')\\n                            .replace(/\\\\s+/g, ' ')\\n                            .trim()\\n                        ns.tprint(message)\\n\\n                        if (shortBuyValue && volume) {\\n                            firstInvests[stockSymbol] = true\\n                            profitTracker = {\\n                                position: 'Short',\\n                                value: shortBuyValue,\\n                                volume,\\n                            }\\n                        }\\n                    } else {\\n                        ns.tprint(`[${localeHHMMSS()}] ERROR #3: ${stockSymbol}, buying shorts, volume: ${volume},\\n              getMoney(ns): ${getMoney(ns)}, Math.floor(corpus / 6): ${Math.floor(corpus / 6)},\\n              moneyToInvest: ${ns.nFormat(moneyToInvest, '$0.000a')}`)\\n                    }\\n                } else {\\n                    ns.tprint(`[${localeHHMMSS()}] ERROR #4: ${stockSymbol}, buying shorts,\\n            getMoney(ns): ${getMoney(ns)}, Math.floor(corpus / 6): ${Math.floor(corpus / 6)},\\n            moneyToInvest: ${ns.nFormat(moneyToInvest, '$0.000a')}`)\\n                }\\n            }\\n        }\\n    }\\n\\n    avgTrackers[stockSymbol] = avgTracker\\n    profitTrackers[stockSymbol] = profitTracker\\n    risingTrackers[stockSymbol] = rising\\n}\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    ns.disableLog('ALL')\\n    let tickCounter = 1\\n    corpus = ns.getServerMoneyAvailable('home') - 1000000\\n\\n    stockSymbols.forEach((stockSymbol) => {\\n        const [sharesLong, avgPriceLong, sharesShort, avgPriceShort] = ns.stock.getPosition(stockSymbol)\\n\\n        corpus += sharesLong * avgPriceLong + sharesShort * avgPriceShort\\n    })\\n\\n    ns.print(`[${localeHHMMSS()}] Tick counter: 1, corpus: ${ns.nFormat(corpus, '$0.000a')}`)\\n    while (true) {\\n        for (let i = 0; i < stockSymbols.length; i++) {\\n            const stockSymbol = stockSymbols[i]\\n            processTick(ns, stockSymbol)\\n            await ns.sleep(1)\\n        }\\n        if (tickCounter % 10 === 0) {\\n            ns.print(`[${localeHHMMSS()}] Tick counter: ${tickCounter}, corpus: ${ns.nFormat(corpus, '$0.000a')}`)\\n        }\\n\\n        if (tickCounter % 50 === 0) {\\n            ns.tprint(`[${localeHHMMSS()}] Tick counter: ${tickCounter}, corpus: ${ns.nFormat(corpus, '$0.000a')}`)\\n        }\\n        await ns.sleep(5995)\\n        tickCounter++\\n    }\\n}\",\"filename\":\"stockMaster.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"stockMaster.js\",\"url\":\"blob:file:///1a8c4d17-a0d7-4f96-9324-e6ee7cf5ae6a\",\"moduleSequenceNumber\":130347}],\"dependents\":[],\"ramUsage\":21.2,\"server\":\"home\",\"moduleSequenceNumber\":83901,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"stock.getPrice\",\"cost\":2},{\"type\":\"fn\",\"name\":\"stock.getSaleGain\",\"cost\":2},{\"type\":\"fn\",\"name\":\"stock.sell\",\"cost\":2.5},{\"type\":\"fn\",\"name\":\"stock.sellShort\",\"cost\":2.5},{\"type\":\"fn\",\"name\":\"stock.getAskPrice\",\"cost\":2},{\"type\":\"fn\",\"name\":\"stock.getMaxShares\",\"cost\":2},{\"type\":\"fn\",\"name\":\"stock.buy\",\"cost\":2.5},{\"type\":\"fn\",\"name\":\"stock.getBidPrice\",\"cost\":2},{\"type\":\"fn\",\"name\":\"stock.getPosition\",\"cost\":2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"let stockSymbols\\nlet corpus\\nlet underperformingShares\\nconst commission = 100000\\n\\nfunction localeHHMMSS(ms = 0) {\\n    if (!ms) {\\n        ms = new Date().getTime()\\n    }\\n\\n    return new Date(ms).toLocaleTimeString()\\n}\\n/** @param {NS} ns **/\\nfunction getMoney(ns) {\\n    return ns.getServerMoneyAvailable('home') - 5 * commission\\n}\\n/** @param {NS} ns **/\\nfunction sellShorts(ns, stockSymbol) {\\n    const stockInfo = getStockInfo(ns, stockSymbol)\\n    const shortSellValue = ns.stock.sellShort(stockSymbol, stockInfo.sharesShort)\\n\\n    if (shortSellValue) {\\n        corpus += stockInfo.sharesShort * (stockInfo.avgPriceShort - shortSellValue) - 2 * commission\\n        ns.print(\\n            `[${localeHHMMSS()}][${stockSymbol}] Sold ${stockInfo.sharesShort} shorts for ${ns.nFormat(shortSellValue, '$0.000a')}. Profit: ${ns.nFormat(\\n                stockInfo.sharesLong * (stockInfo.avgPriceShort - shortSellValue) - 2 * commission,\\n                '$0.000a'\\n            )}`\\n        )\\n    }\\n}\\n/** @param {NS} ns **/\\nfunction sellLongs(ns, stockSymbol) {\\n    const stockInfo = getStockInfo(ns, stockSymbol)\\n    const longSellValue = ns.stock.sell(stockSymbol, stockInfo.sharesLong)\\n\\n    if (longSellValue) {\\n        corpus += stockInfo.sharesLong * (longSellValue - stockInfo.avgPriceLong) - 2 * commission\\n        ns.print(\\n            `[${localeHHMMSS()}][${stockSymbol}] Sold ${stockInfo.sharesLong} longs for ${ns.nFormat(longSellValue, '$0.000a')}. Profit: ${ns.nFormat(\\n                stockInfo.sharesLong * (longSellValue - stockInfo.avgPriceLong) - 2 * commission,\\n                '$0.000a'\\n            )}`\\n        )\\n    }\\n}\\n\\n// Only if not going to lose money\\n/** @param {NS} ns **/\\nfunction sellUnderperforming(ns, stockSymbol) {\\n    const stockInfo = getStockInfo(ns, stockSymbol)\\n\\n    if (stockInfo.sharesShort && stockInfo.sharesShort * (stockInfo.avgPriceShort - stockInfo.stockAskPrice) > 2 * commission) {\\n        sellShorts(ns, stockSymbol)\\n    }\\n\\n    if (stockInfo.sharesLong && stockInfo.sharesLong * (stockInfo.stockBidPrice - stockInfo.avgPriceLong) > 2 * commission) {\\n        sellLongs(ns, stockSymbol)\\n    }\\n}\\n/** @param {NS} ns **/\\nfunction sellWrongPosition(ns, stockSymbol) {\\n    const stockInfo = getStockInfo(ns, stockSymbol)\\n\\n    // Sell shorts if going up\\n    if (stockInfo.position === 'Long' && stockInfo.sharesShort) {\\n        sellShorts(ns, stockSymbol)\\n    }\\n\\n    // Sell longs if going down\\n    if (stockInfo.position === 'Short' && stockInfo.sharesLong) {\\n        sellLongs(ns, stockSymbol)\\n    }\\n}\\n/** @param {NS} ns **/\\nfunction buyNewShares(ns, stockSymbol) {\\n    const stockInfo = getStockInfo(ns, stockSymbol)\\n    const minimumMoneyToInvest = 10 * commission\\n\\n    if (!stockInfo.haveMaxShares && getMoney(ns) > minimumMoneyToInvest) {\\n        let maxSharesToBuy\\n        let sharesToBuy\\n        let buyValue\\n        let shareType\\n\\n        if (stockInfo.position === 'Long') {\\n            maxSharesToBuy = stockInfo.maxShares - stockInfo.sharesLong\\n            sharesToBuy = Math.max(0, Math.min(maxSharesToBuy, Math.floor(getMoney(ns) / stockInfo.stockAskPrice)))\\n            if (sharesToBuy) {\\n                buyValue = ns.stock.buy(stockSymbol, sharesToBuy)\\n            }\\n            shareType = 'longs'\\n        } else {\\n            maxSharesToBuy = stockInfo.maxShares - stockInfo.sharesShort\\n            sharesToBuy = Math.max(0, Math.min(maxSharesToBuy, Math.floor(getMoney(ns) / stockInfo.stockBidPrice)))\\n            if (sharesToBuy) {\\n                buyValue = ns.stock.short(stockSymbol, sharesToBuy)\\n            }\\n            shareType = 'shorts'\\n        }\\n\\n        if (sharesToBuy) {\\n            const invested = ns.nFormat(buyValue * sharesToBuy, '$0.000a')\\n            ns.print(`[${localeHHMMSS()}][${stockSymbol}] Bought ${sharesToBuy} ${shareType} for ${ns.nFormat(buyValue, '$0.000a')} each. Invested: ${invested}`)\\n        }\\n    }\\n}\\n/** @param {NS} ns **/\\nfunction getStockInfo(ns, stockSymbol) {\\n    const [sharesLong, avgPriceLong, sharesShort, avgPriceShort] = ns.stock.getPosition(stockSymbol)\\n    const volatility = ns.stock.getVolatility(stockSymbol)\\n    const probability = ns.stock.getForecast(stockSymbol) - 0.5\\n    const expectedReturn = Math.abs(volatility * probability)\\n    const maxShares = ns.stock.getMaxShares(stockSymbol)\\n\\n    const haveAnyShares = sharesLong + sharesShort > 0\\n    const haveMaxShares = sharesLong + sharesShort === maxShares\\n\\n    const stockAskPrice = ns.stock.getAskPrice(stockSymbol)\\n    const stockBidPrice = ns.stock.getBidPrice(stockSymbol)\\n\\n    const position = probability >= 0 ? 'Long' : 'Short'\\n\\n    return {\\n        stockSymbol,\\n        maxShares,\\n        haveAnyShares,\\n        haveMaxShares,\\n        sharesLong,\\n        avgPriceLong,\\n        stockAskPrice,\\n        sharesShort,\\n        avgPriceShort,\\n        stockBidPrice,\\n        volatility,\\n        probability,\\n        expectedReturn,\\n        position,\\n    }\\n}\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    ns.disableLog('ALL')\\n    let tickCounter = 1\\n\\n    stockSymbols = ns.stock.getSymbols()\\n\\n    corpus = ns.getServerMoneyAvailable('home') * 0.4\\n    stockSymbols.forEach((stockSymbol) => {\\n        const stockInfo = getStockInfo(ns, stockSymbol)\\n\\n        corpus += stockInfo.sharesLong * stockInfo.avgPriceLong + stockInfo.sharesShort * stockInfo.avgPriceShort\\n    })\\n    const startingCorpus = corpus\\n\\n    while (true) {\\n        ns.clearLog()\\n        ns.print(`[${localeHHMMSS()}] Tick counter: ${tickCounter}, corpus: ${ns.nFormat(corpus, '$0.000a')}`)\\n        ns.print(`[${localeHHMMSS()}] Starting corpus: ${ns.nFormat(startingCorpus, '$0.000a')}`)\\n\\n        stockSymbols.sort((a, b) => {\\n            const stockA = getStockInfo(ns, a)\\n            const stockB = getStockInfo(ns, b)\\n\\n            if (stockB.expectedReturn === stockA.expectedReturn) {\\n                return Math.abs(stockB.probability) - Math.abs(stockA.probability)\\n            }\\n\\n            return stockB.expectedReturn - stockA.expectedReturn\\n        })\\n\\n        stockSymbols\\n            .filter((stockSymbol) => getStockInfo(ns, stockSymbol).haveAnyShares)\\n            .filter((stockSymbol, index) => stockSymbol !== stockSymbols[index])\\n            .forEach((stockSymbol) => sellUnderperforming(ns, stockSymbol))\\n        await ns.sleep(5)\\n\\n        stockSymbols.forEach((stockSymbol) => sellWrongPosition(ns, stockSymbol))\\n        await ns.sleep(5)\\n\\n        stockSymbols.forEach((stockSymbol) => buyNewShares(ns, stockSymbol))\\n        await ns.sleep(5)\\n\\n        ns.print(`[${localeHHMMSS()}] After transactions: corpus: ${ns.nFormat(corpus, '$0.000a')}`)\\n        await ns.sleep(3500)\\n        tickCounter++\\n    }\\n}\",\"filename\":\"stockMaster4s.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"stockMaster4s.js\",\"url\":\"blob:file:///93dbd65f-4644-4ef7-b99e-369d26ba8b8c\",\"moduleSequenceNumber\":129219}],\"dependents\":[],\"ramUsage\":26.7,\"server\":\"home\",\"moduleSequenceNumber\":83902,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"stock.sellShort\",\"cost\":2.5},{\"type\":\"fn\",\"name\":\"stock.sell\",\"cost\":2.5},{\"type\":\"fn\",\"name\":\"stock.buy\",\"cost\":2.5},{\"type\":\"fn\",\"name\":\"stock.short\",\"cost\":2.5},{\"type\":\"fn\",\"name\":\"stock.getPosition\",\"cost\":2},{\"type\":\"fn\",\"name\":\"stock.getVolatility\",\"cost\":2.5},{\"type\":\"fn\",\"name\":\"stock.getForecast\",\"cost\":2.5},{\"type\":\"fn\",\"name\":\"stock.getMaxShares\",\"cost\":2},{\"type\":\"fn\",\"name\":\"stock.getAskPrice\",\"cost\":2},{\"type\":\"fn\",\"name\":\"stock.getBidPrice\",\"cost\":2},{\"type\":\"fn\",\"name\":\"stock.getSymbols\",\"cost\":2}]}}],\"serversOnNetwork\":[\"n00dles\",\"foodnstuff\",\"sigma-cosmetics\",\"joesguns\",\"hong-fang-tea\",\"harakiri-sushi\",\"iron-gym\",\"darkweb\",\"pserv-131072-238277d6-550d-4dd3-86d4-72bc5d87ace3\",\"pserv-131072-8e97625d-2e55-460a-b07a-f82cb9817786\",\"pserv-131072-68549598-cb26-4b2e-bf8b-f48c237534dd\",\"pserv-131072-14516993-eeaf-4a2c-bfaa-05ce8645cc0d\",\"pserv-131072-555b1405-868c-409a-b969-738b8179a246\",\"pserv-131072-e6bcce5a-62ab-4bba-9620-1cfc5c3fa092\",\"pserv-131072-900f4642-58af-41ce-96d1-7be15c9e7d3e\",\"pserv-131072-70ff92b9-cb95-4b3a-bc94-2885a60aedd6\",\"pserv-131072-65c9cecc-0476-452a-8909-70bb5acc0279\",\"pserv-131072-8871ac41-1781-4029-89ef-7b85fd7af779\",\"pserv-131072-e00825b2-a07b-4294-99fc-5412b5e45220\",\"pserv-131072-29297cc7-5dd7-40c5-9aec-4ad42bde272c\",\"pserv-131072-fcffe25e-59ae-4dfa-b83b-a0a18d68d200\",\"pserv-131072-33574fa9-038a-4898-822b-c8cbe485ac05\",\"pserv-131072-3d114e03-3ac5-4249-b509-2b0adee0c50b\",\"pserv-131072-e7c32ade-b5bb-4c65-8cc4-04cd9bd29299\",\"pserv-131072-594fe177-d75e-4c37-8e3a-2062b1828721\",\"pserv-524288-b391dd6c-b134-4a45-8dba-51d4f32ab5b7\",\"pserv-524288-4c0bd995-0657-436b-a37b-32ddb633b69e\",\"pserv-524288-c0754e39-1133-463e-b893-742a702ddcb6\",\"pserv-524288-4336de14-bafc-406a-be8f-f81ce3afa464\",\"pserv-524288-3ce61c35-038f-4256-a468-9a4a6a24e857\",\"pserv-524288-e0a8d2e3-0a55-43c6-848b-28d0996cf354\",\"pserv-524288-505a64da-6899-4d70-82c6-aeaa6b0690f9\",\"pserv-524288-39398935-c499-4146-b19c-29244d0bf1c2\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":1,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"ecorp\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"ecorp\",\"httpPortOpen\":false,\"ip\":\"34.4.9.8\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"ECorp\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"nwo\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":99,\"hackDifficulty\":99,\"minDifficulty\":33,\"moneyAvailable\":39229755693,\"moneyMax\":980743892325,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1142,\"serverGrowth\":99}},\"megacorp\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"megacorp\",\"httpPortOpen\":false,\"ip\":\"57.2.6.8\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"MegaCorp\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"nwo\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":99,\"hackDifficulty\":99,\"minDifficulty\":33,\"moneyAvailable\":46702440172,\"moneyMax\":1167561004300,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1205,\"serverGrowth\":99}},\"b-and-a\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"b-and-a\",\"httpPortOpen\":false,\"ip\":\"44.7.6.5\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Bachman & Associates\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\".\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":81,\"hackDifficulty\":81,\"minDifficulty\":27,\"moneyAvailable\":15475099880,\"moneyMax\":386877497000,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":939,\"serverGrowth\":61}},\"blade\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"blade\",\"httpPortOpen\":false,\"ip\":\"65.6.0.4\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"beyond-man.lit\"],\"organizationName\":\"Blade Industries\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\".\",\"fulcrumassets\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":91,\"hackDifficulty\":91,\"minDifficulty\":30,\"moneyAvailable\":39385480731,\"moneyMax\":984637018275,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":932,\"serverGrowth\":59}},\"nwo\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"nwo\",\"httpPortOpen\":false,\"ip\":\"37.0.1.8\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"the-hidden-world.lit\"],\"organizationName\":\"NWO\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"kuai-gong\",\"ecorp\",\"megacorp\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":99,\"hackDifficulty\":99,\"minDifficulty\":33,\"moneyAvailable\":24395002787,\"moneyMax\":609875069675,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1082,\"serverGrowth\":95}},\"clarkinc\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"clarkinc\",\"httpPortOpen\":false,\"ip\":\"6.6.1.1\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"beyond-man.lit\",\"cost-of-immortality.lit\"],\"organizationName\":\"Clarke Incorporated\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"4sigma\",\"The-Cave\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":49,\"hackDifficulty\":49,\"minDifficulty\":16,\"moneyAvailable\":19727114887,\"moneyMax\":493177872175,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1076,\"serverGrowth\":72}},\"omnitek\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"omnitek\",\"httpPortOpen\":false,\"ip\":\"68.8.1.4\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[\"coded-intelligence.lit\",\"history-of-synthoids.lit\"],\"organizationName\":\"OmniTek Incorporated\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"fulcrumtech\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":99,\"hackDifficulty\":99,\"minDifficulty\":33,\"moneyAvailable\":17372041067,\"moneyMax\":434301026675,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1019,\"serverGrowth\":98}},\"4sigma\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"4sigma\",\"httpPortOpen\":false,\"ip\":\"11.2.1.0\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Four Sigma\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"helios\",\"clarkinc\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":56,\"hackDifficulty\":56,\"minDifficulty\":19,\"moneyAvailable\":21236714856,\"moneyMax\":530917871400,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1166,\"serverGrowth\":87}},\"kuai-gong\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"kuai-gong\",\"httpPortOpen\":false,\"ip\":\"81.1.2.9\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"KuaiGong International\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"vitalife\",\"nwo\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":99,\"hackDifficulty\":99,\"minDifficulty\":33,\"moneyAvailable\":25390979665,\"moneyMax\":634774491625,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1273,\"serverGrowth\":92}},\"fulcrumtech\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"fulcrumtech\",\"httpPortOpen\":false,\"ip\":\"58.4.5.3\",\"isConnectedTo\":false,\"maxRam\":1024,\"messages\":[\"simulated-reality.lit\"],\"organizationName\":\"Fulcrum Technologies\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"titan-labs\",\"omnitek\",\".\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":83,\"hackDifficulty\":83,\"minDifficulty\":28,\"moneyAvailable\":1469040429,\"moneyMax\":36726010725,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1106,\"serverGrowth\":81}},\"fulcrumassets\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"fulcrumassets\",\"httpPortOpen\":false,\"ip\":\"32.3.5.0\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Fulcrum Technologies\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"blade\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":99,\"hackDifficulty\":99,\"minDifficulty\":33,\"moneyAvailable\":1000000,\"moneyMax\":25000000,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1592,\"serverGrowth\":1}},\"stormtech\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"stormtech\",\"httpPortOpen\":false,\"ip\":\"51.8.5.8\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Storm Technologies\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"applied-energetics\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":78,\"hackDifficulty\":78,\"minDifficulty\":26,\"moneyAvailable\":1163056737,\"moneyMax\":29076418425,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":973,\"serverGrowth\":73}},\"defcomm\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"defcomm\",\"httpPortOpen\":false,\"ip\":\"99.2.5.3\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"DefComm\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"deltaone\",\"zb-def\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":87,\"hackDifficulty\":87,\"minDifficulty\":29,\"moneyAvailable\":876579384,\"moneyMax\":21914484600,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":942,\"serverGrowth\":49}},\"infocomm\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"infocomm\",\"httpPortOpen\":false,\"ip\":\"48.7.6.9\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"InfoComm\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"icarus\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":83,\"hackDifficulty\":83,\"minDifficulty\":28,\"moneyAvailable\":850465773,\"moneyMax\":21261644325,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":886,\"serverGrowth\":39}},\"helios\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"helios\",\"httpPortOpen\":false,\"ip\":\"7.0.3.8\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"beyond-man.lit\"],\"organizationName\":\"Helios Labs\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"run4theh111z\",\"4sigma\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":95,\"hackDifficulty\":95,\"minDifficulty\":32,\"moneyAvailable\":613996042,\"moneyMax\":15349901050,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":866,\"serverGrowth\":77}},\"vitalife\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"vitalife\",\"httpPortOpen\":false,\"ip\":\"71.7.0.6\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"A-Green-Tomorrow.lit\"],\"organizationName\":\"VitaLife\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"run4theh111z\",\"kuai-gong\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":88,\"hackDifficulty\":88,\"minDifficulty\":29,\"moneyAvailable\":786234684,\"moneyMax\":19655867100,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":816,\"serverGrowth\":61}},\"icarus\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"icarus\",\"httpPortOpen\":false,\"ip\":\"71.1.3.7\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Icarus Microsystems\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"deltaone\",\"infocomm\",\"taiyang-digital\",\"nova-med\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":94,\"hackDifficulty\":94,\"minDifficulty\":31,\"moneyAvailable\":949037687,\"moneyMax\":23725942175,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":850,\"serverGrowth\":95}},\"univ-energy\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"univ-energy\",\"httpPortOpen\":true,\"ip\":\"52.7.9.9\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Universal Energy\",\"programs\":[],\"ramUsed\":31.5,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"global-pharm\",18,52231.129359065264,\"0dae7cb2-ebd4-4fb4-98de-8f887c873e13\"],\"dataMap\":{},\"filename\":\"grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":740.6100000000025,\"pid\":1245,\"ramUsage\":1.75,\"server\":\"univ-energy\",\"threads\":18,\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:https://danielyxie.github.io/442186c4-ec73-4df6-9461-3f32e009b1d1\",\"moduleSequenceNumber\":84787}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/export async function main(ns) {\\r\\n    const target = ns.args[0]\\r\\n    const threads = ns.args[1]\\r\\n    const delay = ns.args[2]\\r\\n  \\r\\n    if (delay && delay > 0) {\\r\\n      await ns.sleep(delay)\\r\\n    }\\r\\n  \\r\\n    ns.print(`Starting operation: hack on ${target} in ${threads} threads`)\\r\\n    await ns.hack(target, { threads, stock: true })\\r\\n    ns.exit()\\r\\n  }\\r\\n  \",\"filename\":\"hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:https://danielyxie.github.io/80e8d3de-6df2-4f1f-a990-afe9f8c7f4ed\",\"moduleSequenceNumber\":85008}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"univ-energy\",\"moduleSequenceNumber\":85008,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/export async function main(ns) {\\r\\n    const target = ns.args[0]\\r\\n    const threads = ns.args[1]\\r\\n    const delay = ns.args[2]\\r\\n  \\r\\n    if (delay && delay > 0) {\\r\\n      await ns.sleep(delay)\\r\\n    }\\r\\n  \\r\\n    ns.print(`Starting operation: grow on ${target} in ${threads} threads`)\\r\\n    await ns.grow(target, { threads, stock: true })\\r\\n    ns.exit()\\r\\n  }\\r\\n  \",\"filename\":\"grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:https://danielyxie.github.io/442186c4-ec73-4df6-9461-3f32e009b1d1\",\"moduleSequenceNumber\":84787}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"univ-energy\",\"moduleSequenceNumber\":84787,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/export async function main(ns) {\\r\\n    const target = ns.args[0]\\r\\n    const threads = ns.args[1]\\r\\n    const delay = ns.args[2]\\r\\n  \\r\\n    if (delay && delay > 0) {\\r\\n      await ns.sleep(delay)\\r\\n    }\\r\\n  \\r\\n    ns.print(`Starting operation: weaken on ${target} in ${threads} threads`)\\r\\n    await ns.weaken(target, { threads, stock: true })\\r\\n    ns.exit()\\r\\n  }\\r\\n  \",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"univ-energy\",\"moduleSequenceNumber\":84737,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"deltaone\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":88,\"hackDifficulty\":88,\"minDifficulty\":29,\"moneyAvailable\":1153853242,\"moneyMax\":28846331050,\"numOpenPortsRequired\":4,\"openPortCount\":4,\"requiredHackingSkill\":809,\"serverGrowth\":80}},\"titan-labs\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"titan-labs\",\"httpPortOpen\":false,\"ip\":\"5.9.2.6\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"coded-intelligence.lit\"],\"organizationName\":\"Titan Laboratories\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"zb-def\",\"fulcrumtech\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":72,\"hackDifficulty\":72,\"minDifficulty\":24,\"moneyAvailable\":796453836,\"moneyMax\":19911345900,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":852,\"serverGrowth\":65}},\"microdyne\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"microdyne\",\"httpPortOpen\":false,\"ip\":\"66.8.1.0\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"synthetic-muscles.lit\"],\"organizationName\":\"Microdyne Technologies\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"taiyang-digital\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":72,\"hackDifficulty\":72,\"minDifficulty\":24,\"moneyAvailable\":509542973,\"moneyMax\":12738574325,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":859,\"serverGrowth\":86}},\"taiyang-digital\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-166877.cct\",\"type\":\"Find All Valid Math Expressions\",\"data\":[\"4477000\",-39],\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"taiyang-digital\",\"httpPortOpen\":false,\"ip\":\"57.8.4.1\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"A-Green-Tomorrow.lit\",\"brighter-than-the-sun.lit\"],\"organizationName\":\"Taiyang Digital\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"icarus\",\"microdyne\",\"applied-energetics\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":80,\"hackDifficulty\":80,\"minDifficulty\":27,\"moneyAvailable\":828852398,\"moneyMax\":20721309950,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":920,\"serverGrowth\":76}},\"galactic-cyber\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"galactic-cyber\",\"httpPortOpen\":false,\"ip\":\"3.6.8.0\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Galactic Cybersystems\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"rho-construction\",\"omnia\",\"unitalife\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":59,\"hackDifficulty\":59,\"minDifficulty\":20,\"moneyAvailable\":820003663,\"moneyMax\":20500091575,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":847,\"serverGrowth\":73}},\"aerocorp\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"aerocorp\",\"httpPortOpen\":false,\"ip\":\"75.4.2.4\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"man-and-machine.lit\"],\"organizationName\":\"AeroCorp\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"aevum-police\",\"deltaone\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":89,\"hackDifficulty\":89,\"minDifficulty\":30,\"moneyAvailable\":1064179941,\"moneyMax\":26604498525,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":868,\"serverGrowth\":62}},\"omnia\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"omnia\",\"httpPortOpen\":false,\"ip\":\"25.5.3.0\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"history-of-synthoids.lit\"],\"organizationName\":\"Omnia Cybersystems\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"galactic-cyber\",\"zeus-med\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":93,\"hackDifficulty\":93,\"minDifficulty\":31,\"moneyAvailable\":936293227,\"moneyMax\":23407330675,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":891,\"serverGrowth\":70}},\"zb-def\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"zb-def\",\"httpPortOpen\":true,\"ip\":\"52.4.8.3\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"synthetic-muscles.lit\"],\"organizationName\":\"ZB Defense Industries\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"defcomm\",\"titan-labs\",\"run4theh111z\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":57,\"hackDifficulty\":57,\"minDifficulty\":19,\"moneyAvailable\":907685385,\"moneyMax\":22692134625,\"numOpenPortsRequired\":4,\"openPortCount\":4,\"requiredHackingSkill\":775,\"serverGrowth\":75}},\"applied-energetics\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"applied-energetics\",\"httpPortOpen\":true,\"ip\":\"59.0.0.5\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Applied Energetics\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"taiyang-digital\",\"stormtech\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":69,\"hackDifficulty\":69,\"minDifficulty\":23,\"moneyAvailable\":703203447,\"moneyMax\":17580086175,\"numOpenPortsRequired\":4,\"openPortCount\":4,\"requiredHackingSkill\":789,\"serverGrowth\":71}},\"solaris\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"solaris\",\"httpPortOpen\":false,\"ip\":\"53.2.8.5\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"A-Green-Tomorrow.lit\",\"the-failed-frontier.lit\"],\"organizationName\":\"Solaris Space Systems\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"deltaone\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":72,\"hackDifficulty\":72,\"minDifficulty\":24,\"moneyAvailable\":774567351,\"moneyMax\":19364183775,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":821,\"serverGrowth\":78}},\"deltaone\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"deltaone\",\"httpPortOpen\":false,\"ip\":\"45.8.1.1\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"DeltaOne\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"aerocorp\",\"defcomm\",\"icarus\",\"univ-energy\",\"solaris\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":84,\"hackDifficulty\":84,\"minDifficulty\":28,\"moneyAvailable\":1496636370,\"moneyMax\":37415909250,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":836,\"serverGrowth\":58}},\"global-pharm\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"global-pharm\",\"httpPortOpen\":true,\"ip\":\"75.2.9.4\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"A-Green-Tomorrow.lit\"],\"organizationName\":\"Global Pharmaceuticals\",\"programs\":[],\"ramUsed\":63,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"global-pharm\",36,52231.129359065264,\"04336a1b-ab8d-49cd-896e-949fa5df12b4\"],\"dataMap\":{},\"filename\":\"grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":740.6100000000025,\"pid\":1249,\"ramUsage\":1.75,\"server\":\"global-pharm\",\"threads\":36,\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:https://danielyxie.github.io/5b938272-eecb-4c2b-96d9-58eafc436afa\",\"moduleSequenceNumber\":84791}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/export async function main(ns) {\\r\\n    const target = ns.args[0]\\r\\n    const threads = ns.args[1]\\r\\n    const delay = ns.args[2]\\r\\n  \\r\\n    if (delay && delay > 0) {\\r\\n      await ns.sleep(delay)\\r\\n    }\\r\\n  \\r\\n    ns.print(`Starting operation: hack on ${target} in ${threads} threads`)\\r\\n    await ns.hack(target, { threads, stock: true })\\r\\n    ns.exit()\\r\\n  }\\r\\n  \",\"filename\":\"hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:https://danielyxie.github.io/bd100bc8-1b72-4519-b24c-8e343ab6b13d\",\"moduleSequenceNumber\":85012}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"global-pharm\",\"moduleSequenceNumber\":85012,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/export async function main(ns) {\\r\\n    const target = ns.args[0]\\r\\n    const threads = ns.args[1]\\r\\n    const delay = ns.args[2]\\r\\n  \\r\\n    if (delay && delay > 0) {\\r\\n      await ns.sleep(delay)\\r\\n    }\\r\\n  \\r\\n    ns.print(`Starting operation: grow on ${target} in ${threads} threads`)\\r\\n    await ns.grow(target, { threads, stock: true })\\r\\n    ns.exit()\\r\\n  }\\r\\n  \",\"filename\":\"grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:https://danielyxie.github.io/5b938272-eecb-4c2b-96d9-58eafc436afa\",\"moduleSequenceNumber\":84791}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"global-pharm\",\"moduleSequenceNumber\":84791,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/export async function main(ns) {\\r\\n    const target = ns.args[0]\\r\\n    const threads = ns.args[1]\\r\\n    const delay = ns.args[2]\\r\\n  \\r\\n    if (delay && delay > 0) {\\r\\n      await ns.sleep(delay)\\r\\n    }\\r\\n  \\r\\n    ns.print(`Starting operation: weaken on ${target} in ${threads} threads`)\\r\\n    await ns.weaken(target, { threads, stock: true })\\r\\n    ns.exit()\\r\\n  }\\r\\n  \",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"global-pharm\",\"moduleSequenceNumber\":84725,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"aevum-police\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":85,\"hackDifficulty\":50.134000000000036,\"minDifficulty\":28,\"moneyAvailable\":39842595475,\"moneyMax\":39842595475,\"numOpenPortsRequired\":4,\"openPortCount\":4,\"requiredHackingSkill\":839,\"serverGrowth\":84}},\"nova-med\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"nova-med\",\"httpPortOpen\":true,\"ip\":\"18.5.1.2\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Nova Medical\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"icarus\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":66,\"hackDifficulty\":66,\"minDifficulty\":22,\"moneyAvailable\":1200085804,\"moneyMax\":30002145100,\"numOpenPortsRequired\":4,\"openPortCount\":4,\"requiredHackingSkill\":796,\"serverGrowth\":71}},\"zeus-med\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"zeus-med\",\"httpPortOpen\":false,\"ip\":\"66.9.6.5\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Zeus Medical\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"omnia\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":80,\"hackDifficulty\":80,\"minDifficulty\":27,\"moneyAvailable\":1366221784,\"moneyMax\":34155544600,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":819,\"serverGrowth\":73}},\"unitalife\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"unitalife\",\"httpPortOpen\":true,\"ip\":\"62.6.4.0\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"UnitaLife Group\",\"programs\":[],\"ramUsed\":15.75,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"global-pharm\",9,52231.129359065264,\"52707d47-3256-4697-80d2-5612f3ad577a\"],\"dataMap\":{},\"filename\":\"grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":740.6100000000025,\"pid\":1233,\"ramUsage\":1.75,\"server\":\"unitalife\",\"threads\":9,\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:https://danielyxie.github.io/abdd04c2-74c1-49a4-9ab7-be3bbe9f267a\",\"moduleSequenceNumber\":84779}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/export async function main(ns) {\\r\\n    const target = ns.args[0]\\r\\n    const threads = ns.args[1]\\r\\n    const delay = ns.args[2]\\r\\n  \\r\\n    if (delay && delay > 0) {\\r\\n      await ns.sleep(delay)\\r\\n    }\\r\\n  \\r\\n    ns.print(`Starting operation: hack on ${target} in ${threads} threads`)\\r\\n    await ns.hack(target, { threads, stock: true })\\r\\n    ns.exit()\\r\\n  }\\r\\n  \",\"filename\":\"hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:https://danielyxie.github.io/b0bb74d7-4d0f-4094-8bf5-4b9c3a40358f\",\"moduleSequenceNumber\":85000}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"unitalife\",\"moduleSequenceNumber\":85000,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/export async function main(ns) {\\r\\n    const target = ns.args[0]\\r\\n    const threads = ns.args[1]\\r\\n    const delay = ns.args[2]\\r\\n  \\r\\n    if (delay && delay > 0) {\\r\\n      await ns.sleep(delay)\\r\\n    }\\r\\n  \\r\\n    ns.print(`Starting operation: grow on ${target} in ${threads} threads`)\\r\\n    await ns.grow(target, { threads, stock: true })\\r\\n    ns.exit()\\r\\n  }\\r\\n  \",\"filename\":\"grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:https://danielyxie.github.io/abdd04c2-74c1-49a4-9ab7-be3bbe9f267a\",\"moduleSequenceNumber\":84779}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"unitalife\",\"moduleSequenceNumber\":84779,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/export async function main(ns) {\\r\\n    const target = ns.args[0]\\r\\n    const threads = ns.args[1]\\r\\n    const delay = ns.args[2]\\r\\n  \\r\\n    if (delay && delay > 0) {\\r\\n      await ns.sleep(delay)\\r\\n    }\\r\\n  \\r\\n    ns.print(`Starting operation: weaken on ${target} in ${threads} threads`)\\r\\n    await ns.weaken(target, { threads, stock: true })\\r\\n    ns.exit()\\r\\n  }\\r\\n  \",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"unitalife\",\"moduleSequenceNumber\":84731,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"galactic-cyber\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":78,\"hackDifficulty\":78,\"minDifficulty\":26,\"moneyAvailable\":1010793326,\"moneyMax\":25269833150,\"numOpenPortsRequired\":4,\"openPortCount\":4,\"requiredHackingSkill\":816,\"serverGrowth\":77}},\"lexo-corp\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"lexo-corp\",\"httpPortOpen\":true,\"ip\":\"15.5.5.2\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"LexoCorp\",\"programs\":[],\"ramUsed\":15.75,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"global-pharm\",9,52231.129359065264,\"f6787215-09d3-4a2c-ba44-70dd0dd47246\"],\"dataMap\":{},\"filename\":\"grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":740.6100000000025,\"pid\":1231,\"ramUsage\":1.75,\"server\":\"lexo-corp\",\"threads\":9,\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:https://danielyxie.github.io/c5e06158-6410-4026-a9fa-c611965eab95\",\"moduleSequenceNumber\":84777}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/export async function main(ns) {\\r\\n    const target = ns.args[0]\\r\\n    const threads = ns.args[1]\\r\\n    const delay = ns.args[2]\\r\\n  \\r\\n    if (delay && delay > 0) {\\r\\n      await ns.sleep(delay)\\r\\n    }\\r\\n  \\r\\n    ns.print(`Starting operation: hack on ${target} in ${threads} threads`)\\r\\n    await ns.hack(target, { threads, stock: true })\\r\\n    ns.exit()\\r\\n  }\\r\\n  \",\"filename\":\"hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:https://danielyxie.github.io/9ed1e15c-0a85-46ff-9d65-e5246b6c00ae\",\"moduleSequenceNumber\":84998}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"lexo-corp\",\"moduleSequenceNumber\":84998,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/export async function main(ns) {\\r\\n    const target = ns.args[0]\\r\\n    const threads = ns.args[1]\\r\\n    const delay = ns.args[2]\\r\\n  \\r\\n    if (delay && delay > 0) {\\r\\n      await ns.sleep(delay)\\r\\n    }\\r\\n  \\r\\n    ns.print(`Starting operation: grow on ${target} in ${threads} threads`)\\r\\n    await ns.grow(target, { threads, stock: true })\\r\\n    ns.exit()\\r\\n  }\\r\\n  \",\"filename\":\"grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:https://danielyxie.github.io/c5e06158-6410-4026-a9fa-c611965eab95\",\"moduleSequenceNumber\":84777}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"lexo-corp\",\"moduleSequenceNumber\":84777,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/export async function main(ns) {\\r\\n    const target = ns.args[0]\\r\\n    const threads = ns.args[1]\\r\\n    const delay = ns.args[2]\\r\\n  \\r\\n    if (delay && delay > 0) {\\r\\n      await ns.sleep(delay)\\r\\n    }\\r\\n  \\r\\n    ns.print(`Starting operation: weaken on ${target} in ${threads} threads`)\\r\\n    await ns.weaken(target, { threads, stock: true })\\r\\n    ns.exit()\\r\\n  }\\r\\n  \",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"lexo-corp\",\"moduleSequenceNumber\":84695,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"catalyst\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":61,\"hackDifficulty\":61,\"minDifficulty\":20,\"moneyAvailable\":790116594,\"moneyMax\":19752914850,\"numOpenPortsRequired\":4,\"openPortCount\":4,\"requiredHackingSkill\":706,\"serverGrowth\":64}},\"rho-construction\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-766827.cct\",\"type\":\"Algorithmic Stock Trader I\",\"data\":[95,123,73,53,109,180,37,112,137,7,142,90,27,173],\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"rho-construction\",\"httpPortOpen\":true,\"ip\":\"28.6.7.0\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[],\"organizationName\":\"Rho Construction\",\"programs\":[],\"ramUsed\":63,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"global-pharm\",36,52231.129359065264,\"6539cacc-ce65-4539-8f32-899838267ca4\"],\"dataMap\":{},\"filename\":\"grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":740.6100000000025,\"pid\":1248,\"ramUsage\":1.75,\"server\":\"rho-construction\",\"threads\":36,\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:https://danielyxie.github.io/e2f69e0b-41a4-4ece-bdc1-be49d604a5e1\",\"moduleSequenceNumber\":84790}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/export async function main(ns) {\\r\\n    const target = ns.args[0]\\r\\n    const threads = ns.args[1]\\r\\n    const delay = ns.args[2]\\r\\n  \\r\\n    if (delay && delay > 0) {\\r\\n      await ns.sleep(delay)\\r\\n    }\\r\\n  \\r\\n    ns.print(`Starting operation: hack on ${target} in ${threads} threads`)\\r\\n    await ns.hack(target, { threads, stock: true })\\r\\n    ns.exit()\\r\\n  }\\r\\n  \",\"filename\":\"hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:https://danielyxie.github.io/fe0bb46e-4840-4d70-96ac-3243090fe3c0\",\"moduleSequenceNumber\":85011}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"rho-construction\",\"moduleSequenceNumber\":85011,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/export async function main(ns) {\\r\\n    const target = ns.args[0]\\r\\n    const threads = ns.args[1]\\r\\n    const delay = ns.args[2]\\r\\n  \\r\\n    if (delay && delay > 0) {\\r\\n      await ns.sleep(delay)\\r\\n    }\\r\\n  \\r\\n    ns.print(`Starting operation: grow on ${target} in ${threads} threads`)\\r\\n    await ns.grow(target, { threads, stock: true })\\r\\n    ns.exit()\\r\\n  }\\r\\n  \",\"filename\":\"grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:https://danielyxie.github.io/e2f69e0b-41a4-4ece-bdc1-be49d604a5e1\",\"moduleSequenceNumber\":84790}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"rho-construction\",\"moduleSequenceNumber\":84790,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/export async function main(ns) {\\r\\n    const target = ns.args[0]\\r\\n    const threads = ns.args[1]\\r\\n    const delay = ns.args[2]\\r\\n  \\r\\n    if (delay && delay > 0) {\\r\\n      await ns.sleep(delay)\\r\\n    }\\r\\n  \\r\\n    ns.print(`Starting operation: weaken on ${target} in ${threads} threads`)\\r\\n    await ns.weaken(target, { threads, stock: true })\\r\\n    ns.exit()\\r\\n  }\\r\\n  \",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"rho-construction\",\"moduleSequenceNumber\":84701,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"zb-institute\",\"galactic-cyber\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":57,\"hackDifficulty\":57,\"minDifficulty\":19,\"moneyAvailable\":516776685,\"moneyMax\":12919417125,\"numOpenPortsRequired\":3,\"openPortCount\":4,\"requiredHackingSkill\":507,\"serverGrowth\":44}},\"alpha-ent\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"alpha-ent\",\"httpPortOpen\":true,\"ip\":\"1.2.7.9\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"sector-12-crime.lit\"],\"organizationName\":\"Alpha Enterprises\",\"programs\":[],\"ramUsed\":31.5,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"global-pharm\",18,52231.129359065264,\"d40825d9-dc26-4f13-b893-4617debca28a\"],\"dataMap\":{},\"filename\":\"grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":740.6100000000025,\"pid\":1244,\"ramUsage\":1.75,\"server\":\"alpha-ent\",\"threads\":18,\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:https://danielyxie.github.io/15ca5dc6-927a-4911-8e9e-a6d39b974c7d\",\"moduleSequenceNumber\":84786}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/export async function main(ns) {\\r\\n    const target = ns.args[0]\\r\\n    const threads = ns.args[1]\\r\\n    const delay = ns.args[2]\\r\\n  \\r\\n    if (delay && delay > 0) {\\r\\n      await ns.sleep(delay)\\r\\n    }\\r\\n  \\r\\n    ns.print(`Starting operation: hack on ${target} in ${threads} threads`)\\r\\n    await ns.hack(target, { threads, stock: true })\\r\\n    ns.exit()\\r\\n  }\\r\\n  \",\"filename\":\"hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:https://danielyxie.github.io/ed793352-8fa3-4bb9-a4f9-24715d6273c9\",\"moduleSequenceNumber\":85007}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"alpha-ent\",\"moduleSequenceNumber\":85007,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/export async function main(ns) {\\r\\n    const target = ns.args[0]\\r\\n    const threads = ns.args[1]\\r\\n    const delay = ns.args[2]\\r\\n  \\r\\n    if (delay && delay > 0) {\\r\\n      await ns.sleep(delay)\\r\\n    }\\r\\n  \\r\\n    ns.print(`Starting operation: grow on ${target} in ${threads} threads`)\\r\\n    await ns.grow(target, { threads, stock: true })\\r\\n    ns.exit()\\r\\n  }\\r\\n  \",\"filename\":\"grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:https://danielyxie.github.io/15ca5dc6-927a-4911-8e9e-a6d39b974c7d\",\"moduleSequenceNumber\":84786}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"alpha-ent\",\"moduleSequenceNumber\":84786,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/export async function main(ns) {\\r\\n    const target = ns.args[0]\\r\\n    const threads = ns.args[1]\\r\\n    const delay = ns.args[2]\\r\\n  \\r\\n    if (delay && delay > 0) {\\r\\n      await ns.sleep(delay)\\r\\n    }\\r\\n  \\r\\n    ns.print(`Starting operation: weaken on ${target} in ${threads} threads`)\\r\\n    await ns.weaken(target, { threads, stock: true })\\r\\n    ns.exit()\\r\\n  }\\r\\n  \",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"alpha-ent\",\"moduleSequenceNumber\":84707,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"zb-institute\",\"snap-fitness\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":53,\"hackDifficulty\":53,\"minDifficulty\":18,\"moneyAvailable\":709138262,\"moneyMax\":17728456550,\"numOpenPortsRequired\":4,\"openPortCount\":4,\"requiredHackingSkill\":501,\"serverGrowth\":52}},\"aevum-police\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"aevum-police\",\"httpPortOpen\":true,\"ip\":\"55.5.9.5\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Aevum Police Headquarters\",\"programs\":[],\"ramUsed\":15.75,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"global-pharm\",9,52231.129359065264,\"60217f75-e469-457b-904f-e74f09f888e7\"],\"dataMap\":{},\"filename\":\"grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":740.6100000000025,\"pid\":1232,\"ramUsage\":1.75,\"server\":\"aevum-police\",\"threads\":9,\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:https://danielyxie.github.io/979ae4c6-13f5-4381-b68e-09528ef8ef27\",\"moduleSequenceNumber\":84778}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/export async function main(ns) {\\r\\n    const target = ns.args[0]\\r\\n    const threads = ns.args[1]\\r\\n    const delay = ns.args[2]\\r\\n  \\r\\n    if (delay && delay > 0) {\\r\\n      await ns.sleep(delay)\\r\\n    }\\r\\n  \\r\\n    ns.print(`Starting operation: hack on ${target} in ${threads} threads`)\\r\\n    await ns.hack(target, { threads, stock: true })\\r\\n    ns.exit()\\r\\n  }\\r\\n  \",\"filename\":\"hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:https://danielyxie.github.io/78cdebb3-a03b-4082-bed8-920cfcaffd1f\",\"moduleSequenceNumber\":84999}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"aevum-police\",\"moduleSequenceNumber\":84999,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/export async function main(ns) {\\r\\n    const target = ns.args[0]\\r\\n    const threads = ns.args[1]\\r\\n    const delay = ns.args[2]\\r\\n  \\r\\n    if (delay && delay > 0) {\\r\\n      await ns.sleep(delay)\\r\\n    }\\r\\n  \\r\\n    ns.print(`Starting operation: grow on ${target} in ${threads} threads`)\\r\\n    await ns.grow(target, { threads, stock: true })\\r\\n    ns.exit()\\r\\n  }\\r\\n  \",\"filename\":\"grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:https://danielyxie.github.io/979ae4c6-13f5-4381-b68e-09528ef8ef27\",\"moduleSequenceNumber\":84778}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"aevum-police\",\"moduleSequenceNumber\":84778,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/export async function main(ns) {\\r\\n    const target = ns.args[0]\\r\\n    const threads = ns.args[1]\\r\\n    const delay = ns.args[2]\\r\\n  \\r\\n    if (delay && delay > 0) {\\r\\n      await ns.sleep(delay)\\r\\n    }\\r\\n  \\r\\n    ns.print(`Starting operation: weaken on ${target} in ${threads} threads`)\\r\\n    await ns.weaken(target, { threads, stock: true })\\r\\n    ns.exit()\\r\\n  }\\r\\n  \",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"aevum-police\",\"moduleSequenceNumber\":84713,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"summit-uni\",\"aerocorp\",\"global-pharm\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":71,\"hackDifficulty\":71,\"minDifficulty\":24,\"moneyAvailable\":384940478,\"moneyMax\":9623511950,\"numOpenPortsRequired\":4,\"openPortCount\":4,\"requiredHackingSkill\":424,\"serverGrowth\":32}},\"rothman-uni\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"rothman-uni\",\"httpPortOpen\":true,\"ip\":\"26.5.5.4\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"secret-societies.lit\",\"the-failed-frontier.lit\",\"tensions-in-tech-race.lit\"],\"organizationName\":\"Rothman University\",\"programs\":[],\"ramUsed\":31.5,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"global-pharm\",18,52231.129359065264,\"46ace444-1d62-4dec-9092-9bbfeedb5c83\"],\"dataMap\":{},\"filename\":\"grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":740.6100000000025,\"pid\":1243,\"ramUsage\":1.75,\"server\":\"rothman-uni\",\"threads\":18,\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:https://danielyxie.github.io/409348d0-5cd3-436a-88d7-6ee5fc35ad71\",\"moduleSequenceNumber\":84785}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/export async function main(ns) {\\r\\n    const target = ns.args[0]\\r\\n    const threads = ns.args[1]\\r\\n    const delay = ns.args[2]\\r\\n  \\r\\n    if (delay && delay > 0) {\\r\\n      await ns.sleep(delay)\\r\\n    }\\r\\n  \\r\\n    ns.print(`Starting operation: hack on ${target} in ${threads} threads`)\\r\\n    await ns.hack(target, { threads, stock: true })\\r\\n    ns.exit()\\r\\n  }\\r\\n  \",\"filename\":\"hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:https://danielyxie.github.io/0288d64a-c35a-495a-b22c-ed0854860b30\",\"moduleSequenceNumber\":85006}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"rothman-uni\",\"moduleSequenceNumber\":85006,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/export async function main(ns) {\\r\\n    const target = ns.args[0]\\r\\n    const threads = ns.args[1]\\r\\n    const delay = ns.args[2]\\r\\n  \\r\\n    if (delay && delay > 0) {\\r\\n      await ns.sleep(delay)\\r\\n    }\\r\\n  \\r\\n    ns.print(`Starting operation: grow on ${target} in ${threads} threads`)\\r\\n    await ns.grow(target, { threads, stock: true })\\r\\n    ns.exit()\\r\\n  }\\r\\n  \",\"filename\":\"grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:https://danielyxie.github.io/409348d0-5cd3-436a-88d7-6ee5fc35ad71\",\"moduleSequenceNumber\":84785}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"rothman-uni\",\"moduleSequenceNumber\":84785,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/export async function main(ns) {\\r\\n    const target = ns.args[0]\\r\\n    const threads = ns.args[1]\\r\\n    const delay = ns.args[2]\\r\\n  \\r\\n    if (delay && delay > 0) {\\r\\n      await ns.sleep(delay)\\r\\n    }\\r\\n  \\r\\n    ns.print(`Starting operation: weaken on ${target} in ${threads} threads`)\\r\\n    await ns.weaken(target, { threads, stock: true })\\r\\n    ns.exit()\\r\\n  }\\r\\n  \",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"rothman-uni\",\"moduleSequenceNumber\":84683,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"netlink\",\"millenium-fitness\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":53,\"hackDifficulty\":53,\"minDifficulty\":18,\"moneyAvailable\":193225464,\"moneyMax\":4830636600,\"numOpenPortsRequired\":3,\"openPortCount\":4,\"requiredHackingSkill\":409,\"serverGrowth\":36}},\"zb-institute\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"zb-institute\",\"httpPortOpen\":false,\"ip\":\"79.4.0.9\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"ZB Institute of Technology\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"johnson-ortho\",\"rho-construction\",\"alpha-ent\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":70,\"hackDifficulty\":70,\"minDifficulty\":23,\"moneyAvailable\":1062046518,\"moneyMax\":26551162950,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":743,\"serverGrowth\":76}},\"summit-uni\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"summit-uni\",\"httpPortOpen\":true,\"ip\":\"47.2.6.5\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"secret-societies.lit\",\"the-failed-frontier.lit\",\"synthetic-muscles.lit\"],\"organizationName\":\"Summit University\",\"programs\":[],\"ramUsed\":63,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"global-pharm\",36,52231.129359065264,\"50a13875-7fc1-4970-ba8a-a0ffdbb2f20b\"],\"dataMap\":{},\"filename\":\"grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":740.6100000000025,\"pid\":1247,\"ramUsage\":1.75,\"server\":\"summit-uni\",\"threads\":36,\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:https://danielyxie.github.io/d990854b-bc2e-4329-bd64-ecc09f0a1170\",\"moduleSequenceNumber\":84789}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/export async function main(ns) {\\r\\n    const target = ns.args[0]\\r\\n    const threads = ns.args[1]\\r\\n    const delay = ns.args[2]\\r\\n  \\r\\n    if (delay && delay > 0) {\\r\\n      await ns.sleep(delay)\\r\\n    }\\r\\n  \\r\\n    ns.print(`Starting operation: hack on ${target} in ${threads} threads`)\\r\\n    await ns.hack(target, { threads, stock: true })\\r\\n    ns.exit()\\r\\n  }\\r\\n  \",\"filename\":\"hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:https://danielyxie.github.io/c2e34b0c-f5a1-4892-a26c-06148be42ab4\",\"moduleSequenceNumber\":85010}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"summit-uni\",\"moduleSequenceNumber\":85010,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/export async function main(ns) {\\r\\n    const target = ns.args[0]\\r\\n    const threads = ns.args[1]\\r\\n    const delay = ns.args[2]\\r\\n  \\r\\n    if (delay && delay > 0) {\\r\\n      await ns.sleep(delay)\\r\\n    }\\r\\n  \\r\\n    ns.print(`Starting operation: grow on ${target} in ${threads} threads`)\\r\\n    await ns.grow(target, { threads, stock: true })\\r\\n    ns.exit()\\r\\n  }\\r\\n  \",\"filename\":\"grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:https://danielyxie.github.io/d990854b-bc2e-4329-bd64-ecc09f0a1170\",\"moduleSequenceNumber\":84789}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"summit-uni\",\"moduleSequenceNumber\":84789,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/export async function main(ns) {\\r\\n    const target = ns.args[0]\\r\\n    const threads = ns.args[1]\\r\\n    const delay = ns.args[2]\\r\\n  \\r\\n    if (delay && delay > 0) {\\r\\n      await ns.sleep(delay)\\r\\n    }\\r\\n  \\r\\n    ns.print(`Starting operation: weaken on ${target} in ${threads} threads`)\\r\\n    await ns.weaken(target, { threads, stock: true })\\r\\n    ns.exit()\\r\\n  }\\r\\n  \",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"summit-uni\",\"moduleSequenceNumber\":84677,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"comptek\",\"aevum-police\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":58,\"hackDifficulty\":58,\"minDifficulty\":19,\"moneyAvailable\":341775827,\"moneyMax\":8544395675,\"numOpenPortsRequired\":3,\"openPortCount\":4,\"requiredHackingSkill\":447,\"serverGrowth\":44}},\"syscore\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"syscore\",\"httpPortOpen\":true,\"ip\":\"92.1.7.9\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"SysCore Securities\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"crush-fitness\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":71,\"hackDifficulty\":71,\"minDifficulty\":24,\"moneyAvailable\":547084493,\"moneyMax\":13677112325,\"numOpenPortsRequired\":4,\"openPortCount\":4,\"requiredHackingSkill\":616,\"serverGrowth\":69}},\"catalyst\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"catalyst\",\"httpPortOpen\":true,\"ip\":\"56.5.1.2\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"tensions-in-tech-race.lit\"],\"organizationName\":\"Catalyst Ventures\",\"programs\":[],\"ramUsed\":31.5,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"global-pharm\",18,52231.129359065264,\"afee71ed-5b1e-491e-acb2-ad7dc9eaa686\"],\"dataMap\":{},\"filename\":\"grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":740.6100000000025,\"pid\":1242,\"ramUsage\":1.75,\"server\":\"catalyst\",\"threads\":18,\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:https://danielyxie.github.io/6a39ab89-0d54-454c-9cad-3eb0e997b6c6\",\"moduleSequenceNumber\":84784}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/export async function main(ns) {\\r\\n    const target = ns.args[0]\\r\\n    const threads = ns.args[1]\\r\\n    const delay = ns.args[2]\\r\\n  \\r\\n    if (delay && delay > 0) {\\r\\n      await ns.sleep(delay)\\r\\n    }\\r\\n  \\r\\n    ns.print(`Starting operation: hack on ${target} in ${threads} threads`)\\r\\n    await ns.hack(target, { threads, stock: true })\\r\\n    ns.exit()\\r\\n  }\\r\\n  \",\"filename\":\"hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:https://danielyxie.github.io/18ea9f66-05ff-47e1-8f7d-6e63f557b020\",\"moduleSequenceNumber\":85005}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"catalyst\",\"moduleSequenceNumber\":85005,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/export async function main(ns) {\\r\\n    const target = ns.args[0]\\r\\n    const threads = ns.args[1]\\r\\n    const delay = ns.args[2]\\r\\n  \\r\\n    if (delay && delay > 0) {\\r\\n      await ns.sleep(delay)\\r\\n    }\\r\\n  \\r\\n    ns.print(`Starting operation: grow on ${target} in ${threads} threads`)\\r\\n    await ns.grow(target, { threads, stock: true })\\r\\n    ns.exit()\\r\\n  }\\r\\n  \",\"filename\":\"grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:https://danielyxie.github.io/6a39ab89-0d54-454c-9cad-3eb0e997b6c6\",\"moduleSequenceNumber\":84784}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"catalyst\",\"moduleSequenceNumber\":84784,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/export async function main(ns) {\\r\\n    const target = ns.args[0]\\r\\n    const threads = ns.args[1]\\r\\n    const delay = ns.args[2]\\r\\n  \\r\\n    if (delay && delay > 0) {\\r\\n      await ns.sleep(delay)\\r\\n    }\\r\\n  \\r\\n    ns.print(`Starting operation: weaken on ${target} in ${threads} threads`)\\r\\n    await ns.weaken(target, { threads, stock: true })\\r\\n    ns.exit()\\r\\n  }\\r\\n  \",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"catalyst\",\"moduleSequenceNumber\":84671,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"the-hub\",\"lexo-corp\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":61,\"hackDifficulty\":61,\"minDifficulty\":20,\"moneyAvailable\":382994403,\"moneyMax\":9574860075,\"numOpenPortsRequired\":3,\"openPortCount\":4,\"requiredHackingSkill\":443,\"serverGrowth\":54}},\"the-hub\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"the-hub\",\"httpPortOpen\":true,\"ip\":\"9.0.1.3\",\"isConnectedTo\":false,\"maxRam\":8,\"messages\":[],\"organizationName\":\"The Hub\",\"programs\":[],\"ramUsed\":7,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"global-pharm\",4,52231.129359065264,\"c701808b-a8e6-466c-bc20-cff21155b7c6\"],\"dataMap\":{},\"filename\":\"grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":740.6100000000025,\"pid\":1222,\"ramUsage\":1.75,\"server\":\"the-hub\",\"threads\":4,\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:https://danielyxie.github.io/4c172b98-8d77-487a-9171-19c93ec0e66c\",\"moduleSequenceNumber\":84774}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/export async function main(ns) {\\r\\n    const target = ns.args[0]\\r\\n    const threads = ns.args[1]\\r\\n    const delay = ns.args[2]\\r\\n  \\r\\n    if (delay && delay > 0) {\\r\\n      await ns.sleep(delay)\\r\\n    }\\r\\n  \\r\\n    ns.print(`Starting operation: hack on ${target} in ${threads} threads`)\\r\\n    await ns.hack(target, { threads, stock: true })\\r\\n    ns.exit()\\r\\n  }\\r\\n  \",\"filename\":\"hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:https://danielyxie.github.io/1e715a7e-5b92-4937-a827-795d995ad739\",\"moduleSequenceNumber\":84995}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"the-hub\",\"moduleSequenceNumber\":84995,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/export async function main(ns) {\\r\\n    const target = ns.args[0]\\r\\n    const threads = ns.args[1]\\r\\n    const delay = ns.args[2]\\r\\n  \\r\\n    if (delay && delay > 0) {\\r\\n      await ns.sleep(delay)\\r\\n    }\\r\\n  \\r\\n    ns.print(`Starting operation: grow on ${target} in ${threads} threads`)\\r\\n    await ns.grow(target, { threads, stock: true })\\r\\n    ns.exit()\\r\\n  }\\r\\n  \",\"filename\":\"grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:https://danielyxie.github.io/4c172b98-8d77-487a-9171-19c93ec0e66c\",\"moduleSequenceNumber\":84774}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"the-hub\",\"moduleSequenceNumber\":84774,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/export async function main(ns) {\\r\\n    const target = ns.args[0]\\r\\n    const threads = ns.args[1]\\r\\n    const delay = ns.args[2]\\r\\n  \\r\\n    if (delay && delay > 0) {\\r\\n      await ns.sleep(delay)\\r\\n    }\\r\\n  \\r\\n    ns.print(`Starting operation: weaken on ${target} in ${threads} threads`)\\r\\n    await ns.weaken(target, { threads, stock: true })\\r\\n    ns.exit()\\r\\n  }\\r\\n  \",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"the-hub\",\"moduleSequenceNumber\":84653,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"silver-helix\",\"catalyst\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":36,\"hackDifficulty\":36,\"minDifficulty\":12,\"moneyAvailable\":191660547,\"moneyMax\":4791513675,\"numOpenPortsRequired\":2,\"openPortCount\":4,\"requiredHackingSkill\":298,\"serverGrowth\":53}},\"comptek\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"comptek\",\"httpPortOpen\":true,\"ip\":\"22.8.4.7\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"man-and-machine.lit\"],\"organizationName\":\"CompuTek\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"phantasy\",\"summit-uni\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":56,\"hackDifficulty\":56,\"minDifficulty\":19,\"moneyAvailable\":223450526,\"moneyMax\":5586263150,\"numOpenPortsRequired\":3,\"openPortCount\":4,\"requiredHackingSkill\":301,\"serverGrowth\":52}},\"netlink\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"netlink\",\"httpPortOpen\":true,\"ip\":\"92.7.9.3\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"simulated-reality.lit\"],\"organizationName\":\"NetLink Technologies\",\"programs\":[],\"ramUsed\":15.75,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"global-pharm\",9,52231.129359065264,\"1736ca75-021d-4bef-9909-fc41cc032e8e\"],\"dataMap\":{},\"filename\":\"grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":740.6100000000025,\"pid\":1229,\"ramUsage\":1.75,\"server\":\"netlink\",\"threads\":9,\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:https://danielyxie.github.io/5a699bce-e148-45b6-b52c-e9067357e439\",\"moduleSequenceNumber\":84775}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/export async function main(ns) {\\r\\n    const target = ns.args[0]\\r\\n    const threads = ns.args[1]\\r\\n    const delay = ns.args[2]\\r\\n  \\r\\n    if (delay && delay > 0) {\\r\\n      await ns.sleep(delay)\\r\\n    }\\r\\n  \\r\\n    ns.print(`Starting operation: hack on ${target} in ${threads} threads`)\\r\\n    await ns.hack(target, { threads, stock: true })\\r\\n    ns.exit()\\r\\n  }\\r\\n  \",\"filename\":\"hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:https://danielyxie.github.io/19278aba-a9a7-44ad-9a04-00feb7a04b53\",\"moduleSequenceNumber\":84996}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"netlink\",\"moduleSequenceNumber\":84996,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/export async function main(ns) {\\r\\n    const target = ns.args[0]\\r\\n    const threads = ns.args[1]\\r\\n    const delay = ns.args[2]\\r\\n  \\r\\n    if (delay && delay > 0) {\\r\\n      await ns.sleep(delay)\\r\\n    }\\r\\n  \\r\\n    ns.print(`Starting operation: grow on ${target} in ${threads} threads`)\\r\\n    await ns.grow(target, { threads, stock: true })\\r\\n    ns.exit()\\r\\n  }\\r\\n  \",\"filename\":\"grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:https://danielyxie.github.io/5a699bce-e148-45b6-b52c-e9067357e439\",\"moduleSequenceNumber\":84775}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"netlink\",\"moduleSequenceNumber\":84775,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/export async function main(ns) {\\r\\n    const target = ns.args[0]\\r\\n    const threads = ns.args[1]\\r\\n    const delay = ns.args[2]\\r\\n  \\r\\n    if (delay && delay > 0) {\\r\\n      await ns.sleep(delay)\\r\\n    }\\r\\n  \\r\\n    ns.print(`Starting operation: weaken on ${target} in ${threads} threads`)\\r\\n    await ns.weaken(target, { threads, stock: true })\\r\\n    ns.exit()\\r\\n  }\\r\\n  \",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"netlink\",\"moduleSequenceNumber\":84665,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"omega-net\",\"rothman-uni\",\"I.I.I.I\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":66,\"hackDifficulty\":66,\"minDifficulty\":22,\"moneyAvailable\":275000000,\"moneyMax\":6875000000,\"numOpenPortsRequired\":3,\"openPortCount\":4,\"requiredHackingSkill\":417,\"serverGrowth\":58}},\"johnson-ortho\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"johnson-ortho\",\"httpPortOpen\":true,\"ip\":\"92.1.6.5\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Johnson Orthopedics\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"silver-helix\",\"zb-institute\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":57,\"hackDifficulty\":57,\"minDifficulty\":19,\"moneyAvailable\":72420409,\"moneyMax\":1810510225,\"numOpenPortsRequired\":2,\"openPortCount\":4,\"requiredHackingSkill\":277,\"serverGrowth\":45}},\"n00dles\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"n00dles\",\"httpPortOpen\":false,\"ip\":\"80.4.8.4\",\"isConnectedTo\":false,\"maxRam\":4,\"messages\":[],\"organizationName\":\"Noodle Bar\",\"programs\":[],\"ramUsed\":3.5,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"global-pharm\",2,52231.129359065264,\"c87fd529-7115-4797-832b-7ec08e7631fe\"],\"dataMap\":{},\"filename\":\"grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":740.6100000000025,\"pid\":1220,\"ramUsage\":1.75,\"server\":\"n00dles\",\"threads\":2,\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:https://danielyxie.github.io/dddaf6a7-468d-4036-b5ae-f5093c2d5b2c\",\"moduleSequenceNumber\":84001}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/export async function main(ns) {\\r\\n    const target = ns.args[0]\\r\\n    const threads = ns.args[1]\\r\\n    const delay = ns.args[2]\\r\\n  \\r\\n    if (delay && delay > 0) {\\r\\n      await ns.sleep(delay)\\r\\n    }\\r\\n  \\r\\n    ns.print(`Starting operation: hack on ${target} in ${threads} threads`)\\r\\n    await ns.hack(target, { threads, stock: true })\\r\\n    ns.exit()\\r\\n  }\\r\\n  \",\"filename\":\"hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:https://danielyxie.github.io/ce14d6aa-5890-4717-bbba-00fde1cb18c1\",\"moduleSequenceNumber\":84074}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"n00dles\",\"moduleSequenceNumber\":84074,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/export async function main(ns) {\\r\\n    const target = ns.args[0]\\r\\n    const threads = ns.args[1]\\r\\n    const delay = ns.args[2]\\r\\n  \\r\\n    if (delay && delay > 0) {\\r\\n      await ns.sleep(delay)\\r\\n    }\\r\\n  \\r\\n    ns.print(`Starting operation: grow on ${target} in ${threads} threads`)\\r\\n    await ns.grow(target, { threads, stock: true })\\r\\n    ns.exit()\\r\\n  }\\r\\n  \",\"filename\":\"grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:https://danielyxie.github.io/dddaf6a7-468d-4036-b5ae-f5093c2d5b2c\",\"moduleSequenceNumber\":84001}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"n00dles\",\"moduleSequenceNumber\":84001,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/export async function main(ns) {\\r\\n    const target = ns.args[0]\\r\\n    const threads = ns.args[1]\\r\\n    const delay = ns.args[2]\\r\\n  \\r\\n    if (delay && delay > 0) {\\r\\n      await ns.sleep(delay)\\r\\n    }\\r\\n  \\r\\n    ns.print(`Starting operation: weaken on ${target} in ${threads} threads`)\\r\\n    await ns.weaken(target, { threads, stock: true })\\r\\n    ns.exit()\\r\\n  }\\r\\n  \",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"n00dles\",\"moduleSequenceNumber\":83934,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"home\",\"zer0\",\"nectar-net\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":70000,\"moneyMax\":1750000,\"numOpenPortsRequired\":0,\"openPortCount\":1,\"requiredHackingSkill\":1,\"serverGrowth\":3000}},\"foodnstuff\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"foodnstuff\",\"httpPortOpen\":false,\"ip\":\"10.9.4.5\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"sector-12-crime.lit\"],\"organizationName\":\"FoodNStuff\",\"programs\":[],\"ramUsed\":15.75,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"global-pharm\",9,52231.129359065264,\"e6a29e6d-6195-4f54-954e-04117640b209\"],\"dataMap\":{},\"filename\":\"grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":740.6100000000025,\"pid\":1223,\"ramUsage\":1.75,\"server\":\"foodnstuff\",\"threads\":9,\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:https://danielyxie.github.io/d0742706-1231-4d57-9844-3d60dd99c14f\",\"moduleSequenceNumber\":84003}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/export async function main(ns) {\\r\\n    const target = ns.args[0]\\r\\n    const threads = ns.args[1]\\r\\n    const delay = ns.args[2]\\r\\n  \\r\\n    if (delay && delay > 0) {\\r\\n      await ns.sleep(delay)\\r\\n    }\\r\\n  \\r\\n    ns.print(`Starting operation: hack on ${target} in ${threads} threads`)\\r\\n    await ns.hack(target, { threads, stock: true })\\r\\n    ns.exit()\\r\\n  }\\r\\n  \",\"filename\":\"hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:https://danielyxie.github.io/85520bd5-282c-46e8-9913-f9891b8be43b\",\"moduleSequenceNumber\":84076}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"foodnstuff\",\"moduleSequenceNumber\":84076,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/export async function main(ns) {\\r\\n    const target = ns.args[0]\\r\\n    const threads = ns.args[1]\\r\\n    const delay = ns.args[2]\\r\\n  \\r\\n    if (delay && delay > 0) {\\r\\n      await ns.sleep(delay)\\r\\n    }\\r\\n  \\r\\n    ns.print(`Starting operation: grow on ${target} in ${threads} threads`)\\r\\n    await ns.grow(target, { threads, stock: true })\\r\\n    ns.exit()\\r\\n  }\\r\\n  \",\"filename\":\"grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:https://danielyxie.github.io/d0742706-1231-4d57-9844-3d60dd99c14f\",\"moduleSequenceNumber\":84003}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"foodnstuff\",\"moduleSequenceNumber\":84003,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/export async function main(ns) {\\r\\n    const target = ns.args[0]\\r\\n    const threads = ns.args[1]\\r\\n    const delay = ns.args[2]\\r\\n  \\r\\n    if (delay && delay > 0) {\\r\\n      await ns.sleep(delay)\\r\\n    }\\r\\n  \\r\\n    ns.print(`Starting operation: weaken on ${target} in ${threads} threads`)\\r\\n    await ns.weaken(target, { threads, stock: true })\\r\\n    ns.exit()\\r\\n  }\\r\\n  \",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"foodnstuff\",\"moduleSequenceNumber\":83940,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"home\",\"max-hardware\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":10,\"hackDifficulty\":10,\"minDifficulty\":3,\"moneyAvailable\":2000000,\"moneyMax\":50000000,\"numOpenPortsRequired\":0,\"openPortCount\":1,\"requiredHackingSkill\":1,\"serverGrowth\":5}},\"sigma-cosmetics\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"sigma-cosmetics\",\"httpPortOpen\":false,\"ip\":\"93.5.2.9\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Sigma Cosmetics\",\"programs\":[],\"ramUsed\":15.75,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"global-pharm\",9,52231.129359065264,\"a099d025-f40c-4678-9d1e-a6b6abbda880\"],\"dataMap\":{},\"filename\":\"grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":740.6100000000025,\"pid\":1224,\"ramUsage\":1.75,\"server\":\"sigma-cosmetics\",\"threads\":9,\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:https://danielyxie.github.io/6c930e64-123e-4b44-a71e-1feedb84e1e5\",\"moduleSequenceNumber\":84004}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/export async function main(ns) {\\r\\n    const target = ns.args[0]\\r\\n    const threads = ns.args[1]\\r\\n    const delay = ns.args[2]\\r\\n  \\r\\n    if (delay && delay > 0) {\\r\\n      await ns.sleep(delay)\\r\\n    }\\r\\n  \\r\\n    ns.print(`Starting operation: hack on ${target} in ${threads} threads`)\\r\\n    await ns.hack(target, { threads, stock: true })\\r\\n    ns.exit()\\r\\n  }\\r\\n  \",\"filename\":\"hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:https://danielyxie.github.io/91a180cc-74a9-47de-b27a-7d0b8fbea9f6\",\"moduleSequenceNumber\":84077}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"sigma-cosmetics\",\"moduleSequenceNumber\":84077,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/export async function main(ns) {\\r\\n    const target = ns.args[0]\\r\\n    const threads = ns.args[1]\\r\\n    const delay = ns.args[2]\\r\\n  \\r\\n    if (delay && delay > 0) {\\r\\n      await ns.sleep(delay)\\r\\n    }\\r\\n  \\r\\n    ns.print(`Starting operation: grow on ${target} in ${threads} threads`)\\r\\n    await ns.grow(target, { threads, stock: true })\\r\\n    ns.exit()\\r\\n  }\\r\\n  \",\"filename\":\"grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:https://danielyxie.github.io/6c930e64-123e-4b44-a71e-1feedb84e1e5\",\"moduleSequenceNumber\":84004}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"sigma-cosmetics\",\"moduleSequenceNumber\":84004,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/export async function main(ns) {\\r\\n    const target = ns.args[0]\\r\\n    const threads = ns.args[1]\\r\\n    const delay = ns.args[2]\\r\\n  \\r\\n    if (delay && delay > 0) {\\r\\n      await ns.sleep(delay)\\r\\n    }\\r\\n  \\r\\n    ns.print(`Starting operation: weaken on ${target} in ${threads} threads`)\\r\\n    await ns.weaken(target, { threads, stock: true })\\r\\n    ns.exit()\\r\\n  }\\r\\n  \",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"sigma-cosmetics\",\"moduleSequenceNumber\":83946,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"home\",\"CSEC\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":10,\"hackDifficulty\":3,\"minDifficulty\":3,\"moneyAvailable\":57500000,\"moneyMax\":57500000,\"numOpenPortsRequired\":0,\"openPortCount\":1,\"requiredHackingSkill\":5,\"serverGrowth\":10}},\"joesguns\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"joesguns\",\"httpPortOpen\":false,\"ip\":\"33.5.3.3\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Joe's Guns\",\"programs\":[],\"ramUsed\":15.75,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"global-pharm\",9,52231.129359065264,\"91ee28cc-1e02-4a29-9f6e-fb7d8d55bea3\"],\"dataMap\":{},\"filename\":\"grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":740.6100000000025,\"pid\":1225,\"ramUsage\":1.75,\"server\":\"joesguns\",\"threads\":9,\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:https://danielyxie.github.io/3a29c246-836b-404e-ae96-0c087f37af2e\",\"moduleSequenceNumber\":84005}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/export async function main(ns) {\\r\\n    const target = ns.args[0]\\r\\n    const threads = ns.args[1]\\r\\n    const delay = ns.args[2]\\r\\n  \\r\\n    if (delay && delay > 0) {\\r\\n      await ns.sleep(delay)\\r\\n    }\\r\\n  \\r\\n    ns.print(`Starting operation: hack on ${target} in ${threads} threads`)\\r\\n    await ns.hack(target, { threads, stock: true })\\r\\n    ns.exit()\\r\\n  }\\r\\n  \",\"filename\":\"hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:https://danielyxie.github.io/571e1e76-94ce-4e82-957a-ef47e0ae3720\",\"moduleSequenceNumber\":84078}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"joesguns\",\"moduleSequenceNumber\":84078,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/export async function main(ns) {\\r\\n    const target = ns.args[0]\\r\\n    const threads = ns.args[1]\\r\\n    const delay = ns.args[2]\\r\\n  \\r\\n    if (delay && delay > 0) {\\r\\n      await ns.sleep(delay)\\r\\n    }\\r\\n  \\r\\n    ns.print(`Starting operation: grow on ${target} in ${threads} threads`)\\r\\n    await ns.grow(target, { threads, stock: true })\\r\\n    ns.exit()\\r\\n  }\\r\\n  \",\"filename\":\"grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:https://danielyxie.github.io/3a29c246-836b-404e-ae96-0c087f37af2e\",\"moduleSequenceNumber\":84005}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"joesguns\",\"moduleSequenceNumber\":84005,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/export async function main(ns) {\\r\\n    const target = ns.args[0]\\r\\n    const threads = ns.args[1]\\r\\n    const delay = ns.args[2]\\r\\n  \\r\\n    if (delay && delay > 0) {\\r\\n      await ns.sleep(delay)\\r\\n    }\\r\\n  \\r\\n    ns.print(`Starting operation: weaken on ${target} in ${threads} threads`)\\r\\n    await ns.weaken(target, { threads, stock: true })\\r\\n    ns.exit()\\r\\n  }\\r\\n  \",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"joesguns\",\"moduleSequenceNumber\":83952,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":15,\"hackDifficulty\":15,\"minDifficulty\":5,\"moneyAvailable\":2500000,\"moneyMax\":62500000,\"numOpenPortsRequired\":0,\"openPortCount\":1,\"requiredHackingSkill\":10,\"serverGrowth\":20}},\"zer0\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"zer0\",\"httpPortOpen\":false,\"ip\":\"18.9.3.5\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"ZER0 Nightclub\",\"programs\":[],\"ramUsed\":31.5,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"global-pharm\",18,52231.129359065264,\"35990873-a4a9-4203-bc42-2f0ba34e12ca\"],\"dataMap\":{},\"filename\":\"grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":740.6100000000025,\"pid\":1236,\"ramUsage\":1.75,\"server\":\"zer0\",\"threads\":18,\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:https://danielyxie.github.io/2a380201-7409-4c2d-939d-2a61ab5f4cfc\",\"moduleSequenceNumber\":84010}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/export async function main(ns) {\\r\\n    const target = ns.args[0]\\r\\n    const threads = ns.args[1]\\r\\n    const delay = ns.args[2]\\r\\n  \\r\\n    if (delay && delay > 0) {\\r\\n      await ns.sleep(delay)\\r\\n    }\\r\\n  \\r\\n    ns.print(`Starting operation: hack on ${target} in ${threads} threads`)\\r\\n    await ns.hack(target, { threads, stock: true })\\r\\n    ns.exit()\\r\\n  }\\r\\n  \",\"filename\":\"hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:https://danielyxie.github.io/91eba6d9-77fb-44ee-8239-b627197741a3\",\"moduleSequenceNumber\":84083}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"zer0\",\"moduleSequenceNumber\":84083,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/export async function main(ns) {\\r\\n    const target = ns.args[0]\\r\\n    const threads = ns.args[1]\\r\\n    const delay = ns.args[2]\\r\\n  \\r\\n    if (delay && delay > 0) {\\r\\n      await ns.sleep(delay)\\r\\n    }\\r\\n  \\r\\n    ns.print(`Starting operation: grow on ${target} in ${threads} threads`)\\r\\n    await ns.grow(target, { threads, stock: true })\\r\\n    ns.exit()\\r\\n  }\\r\\n  \",\"filename\":\"grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:https://danielyxie.github.io/2a380201-7409-4c2d-939d-2a61ab5f4cfc\",\"moduleSequenceNumber\":84010}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"zer0\",\"moduleSequenceNumber\":84010,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/export async function main(ns) {\\r\\n    const target = ns.args[0]\\r\\n    const threads = ns.args[1]\\r\\n    const delay = ns.args[2]\\r\\n  \\r\\n    if (delay && delay > 0) {\\r\\n      await ns.sleep(delay)\\r\\n    }\\r\\n  \\r\\n    ns.print(`Starting operation: weaken on ${target} in ${threads} threads`)\\r\\n    await ns.weaken(target, { threads, stock: true })\\r\\n    ns.exit()\\r\\n  }\\r\\n  \",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"zer0\",\"moduleSequenceNumber\":83976,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"n00dles\",\"neo-net\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":25,\"hackDifficulty\":25,\"minDifficulty\":8,\"moneyAvailable\":7500000,\"moneyMax\":187500000,\"numOpenPortsRequired\":1,\"openPortCount\":1,\"requiredHackingSkill\":75,\"serverGrowth\":40}},\"nectar-net\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"nectar-net\",\"httpPortOpen\":false,\"ip\":\"43.6.7.4\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Nectar Nightclub Network\",\"programs\":[],\"ramUsed\":15.75,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"global-pharm\",9,52231.129359065264,\"ef3b64a3-7df0-4ad9-8344-1b145d38dbe6\"],\"dataMap\":{},\"filename\":\"grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":740.6100000000025,\"pid\":1228,\"ramUsage\":1.75,\"server\":\"nectar-net\",\"threads\":9,\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:https://danielyxie.github.io/de7198ce-90a6-4d46-890f-17f35c634579\",\"moduleSequenceNumber\":84008}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/export async function main(ns) {\\r\\n    const target = ns.args[0]\\r\\n    const threads = ns.args[1]\\r\\n    const delay = ns.args[2]\\r\\n  \\r\\n    if (delay && delay > 0) {\\r\\n      await ns.sleep(delay)\\r\\n    }\\r\\n  \\r\\n    ns.print(`Starting operation: hack on ${target} in ${threads} threads`)\\r\\n    await ns.hack(target, { threads, stock: true })\\r\\n    ns.exit()\\r\\n  }\\r\\n  \",\"filename\":\"hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:https://danielyxie.github.io/520368eb-f381-470a-a372-fe41d0bdb996\",\"moduleSequenceNumber\":84081}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"nectar-net\",\"moduleSequenceNumber\":84081,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/export async function main(ns) {\\r\\n    const target = ns.args[0]\\r\\n    const threads = ns.args[1]\\r\\n    const delay = ns.args[2]\\r\\n  \\r\\n    if (delay && delay > 0) {\\r\\n      await ns.sleep(delay)\\r\\n    }\\r\\n  \\r\\n    ns.print(`Starting operation: grow on ${target} in ${threads} threads`)\\r\\n    await ns.grow(target, { threads, stock: true })\\r\\n    ns.exit()\\r\\n  }\\r\\n  \",\"filename\":\"grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:https://danielyxie.github.io/de7198ce-90a6-4d46-890f-17f35c634579\",\"moduleSequenceNumber\":84008}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"nectar-net\",\"moduleSequenceNumber\":84008,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/export async function main(ns) {\\r\\n    const target = ns.args[0]\\r\\n    const threads = ns.args[1]\\r\\n    const delay = ns.args[2]\\r\\n  \\r\\n    if (delay && delay > 0) {\\r\\n      await ns.sleep(delay)\\r\\n    }\\r\\n  \\r\\n    ns.print(`Starting operation: weaken on ${target} in ${threads} threads`)\\r\\n    await ns.weaken(target, { threads, stock: true })\\r\\n    ns.exit()\\r\\n  }\\r\\n  \",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"nectar-net\",\"moduleSequenceNumber\":83982,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"n00dles\",\"silver-helix\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":20,\"hackDifficulty\":20,\"minDifficulty\":7,\"moneyAvailable\":2750000,\"moneyMax\":68750000,\"numOpenPortsRequired\":0,\"openPortCount\":1,\"requiredHackingSkill\":20,\"serverGrowth\":25}},\"neo-net\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"neo-net\",\"httpPortOpen\":false,\"ip\":\"79.8.4.1\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"the-hidden-world.lit\"],\"organizationName\":\"Neo Nightclub Network\",\"programs\":[],\"ramUsed\":31.5,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"global-pharm\",18,52231.129359065264,\"272509de-82f2-487b-9f64-cf978ada4c68\"],\"dataMap\":{},\"filename\":\"grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":740.6100000000025,\"pid\":1238,\"ramUsage\":1.75,\"server\":\"neo-net\",\"threads\":18,\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:https://danielyxie.github.io/e3430f8a-aaa6-4141-aab7-ff60819c586d\",\"moduleSequenceNumber\":84012}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/export async function main(ns) {\\r\\n    const target = ns.args[0]\\r\\n    const threads = ns.args[1]\\r\\n    const delay = ns.args[2]\\r\\n  \\r\\n    if (delay && delay > 0) {\\r\\n      await ns.sleep(delay)\\r\\n    }\\r\\n  \\r\\n    ns.print(`Starting operation: hack on ${target} in ${threads} threads`)\\r\\n    await ns.hack(target, { threads, stock: true })\\r\\n    ns.exit()\\r\\n  }\\r\\n  \",\"filename\":\"hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:https://danielyxie.github.io/31f96024-69fe-4da2-b6d5-b705db8c04fe\",\"moduleSequenceNumber\":84085}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"neo-net\",\"moduleSequenceNumber\":84085,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/export async function main(ns) {\\r\\n    const target = ns.args[0]\\r\\n    const threads = ns.args[1]\\r\\n    const delay = ns.args[2]\\r\\n  \\r\\n    if (delay && delay > 0) {\\r\\n      await ns.sleep(delay)\\r\\n    }\\r\\n  \\r\\n    ns.print(`Starting operation: grow on ${target} in ${threads} threads`)\\r\\n    await ns.grow(target, { threads, stock: true })\\r\\n    ns.exit()\\r\\n  }\\r\\n  \",\"filename\":\"grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:https://danielyxie.github.io/e3430f8a-aaa6-4141-aab7-ff60819c586d\",\"moduleSequenceNumber\":84012}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"neo-net\",\"moduleSequenceNumber\":84012,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/export async function main(ns) {\\r\\n    const target = ns.args[0]\\r\\n    const threads = ns.args[1]\\r\\n    const delay = ns.args[2]\\r\\n  \\r\\n    if (delay && delay > 0) {\\r\\n      await ns.sleep(delay)\\r\\n    }\\r\\n  \\r\\n    ns.print(`Starting operation: weaken on ${target} in ${threads} threads`)\\r\\n    await ns.weaken(target, { threads, stock: true })\\r\\n    ns.exit()\\r\\n  }\\r\\n  \",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"neo-net\",\"moduleSequenceNumber\":84000,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"zer0\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":25,\"hackDifficulty\":25,\"minDifficulty\":8,\"moneyAvailable\":5000000,\"moneyMax\":125000000,\"numOpenPortsRequired\":1,\"openPortCount\":1,\"requiredHackingSkill\":50,\"serverGrowth\":25}},\"silver-helix\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"silver-helix\",\"httpPortOpen\":true,\"ip\":\"43.2.8.5\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"new-triads.lit\"],\"organizationName\":\"Silver Helix\",\"programs\":[],\"ramUsed\":63,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"global-pharm\",36,52231.129359065264,\"14587ede-0021-4ca1-8c7c-f986fc32d851\"],\"dataMap\":{},\"filename\":\"grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":740.6100000000025,\"pid\":1246,\"ramUsage\":1.75,\"server\":\"silver-helix\",\"threads\":36,\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:https://danielyxie.github.io/16fadd33-e57c-4c0d-93d8-bb7b47fbde6e\",\"moduleSequenceNumber\":84788}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/export async function main(ns) {\\r\\n    const target = ns.args[0]\\r\\n    const threads = ns.args[1]\\r\\n    const delay = ns.args[2]\\r\\n  \\r\\n    if (delay && delay > 0) {\\r\\n      await ns.sleep(delay)\\r\\n    }\\r\\n  \\r\\n    ns.print(`Starting operation: hack on ${target} in ${threads} threads`)\\r\\n    await ns.hack(target, { threads, stock: true })\\r\\n    ns.exit()\\r\\n  }\\r\\n  \",\"filename\":\"hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:https://danielyxie.github.io/dbef9c0a-1f24-483f-a165-8ce01c79c65e\",\"moduleSequenceNumber\":85009}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"silver-helix\",\"moduleSequenceNumber\":85009,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/export async function main(ns) {\\r\\n    const target = ns.args[0]\\r\\n    const threads = ns.args[1]\\r\\n    const delay = ns.args[2]\\r\\n  \\r\\n    if (delay && delay > 0) {\\r\\n      await ns.sleep(delay)\\r\\n    }\\r\\n  \\r\\n    ns.print(`Starting operation: grow on ${target} in ${threads} threads`)\\r\\n    await ns.grow(target, { threads, stock: true })\\r\\n    ns.exit()\\r\\n  }\\r\\n  \",\"filename\":\"grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:https://danielyxie.github.io/16fadd33-e57c-4c0d-93d8-bb7b47fbde6e\",\"moduleSequenceNumber\":84788}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"silver-helix\",\"moduleSequenceNumber\":84788,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/export async function main(ns) {\\r\\n    const target = ns.args[0]\\r\\n    const threads = ns.args[1]\\r\\n    const delay = ns.args[2]\\r\\n  \\r\\n    if (delay && delay > 0) {\\r\\n      await ns.sleep(delay)\\r\\n    }\\r\\n  \\r\\n    ns.print(`Starting operation: weaken on ${target} in ${threads} threads`)\\r\\n    await ns.weaken(target, { threads, stock: true })\\r\\n    ns.exit()\\r\\n  }\\r\\n  \",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"silver-helix\",\"moduleSequenceNumber\":84635,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"nectar-net\",\"the-hub\",\"johnson-ortho\",\"crush-fitness\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":30,\"hackDifficulty\":30,\"minDifficulty\":10,\"moneyAvailable\":45000000,\"moneyMax\":1125000000,\"numOpenPortsRequired\":2,\"openPortCount\":4,\"requiredHackingSkill\":150,\"serverGrowth\":30}},\"hong-fang-tea\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"hong-fang-tea\",\"httpPortOpen\":false,\"ip\":\"3.6.8.9\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"brighter-than-the-sun.lit\"],\"organizationName\":\"HongFang Teahouse\",\"programs\":[],\"ramUsed\":15.75,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"global-pharm\",9,52231.129359065264,\"e9961d03-c885-41e2-ae30-5837258a9dee\"],\"dataMap\":{},\"filename\":\"grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":740.6100000000025,\"pid\":1226,\"ramUsage\":1.75,\"server\":\"hong-fang-tea\",\"threads\":9,\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:https://danielyxie.github.io/0292ba38-1b39-4f9d-a2e8-d68256a2b16e\",\"moduleSequenceNumber\":84006}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/export async function main(ns) {\\r\\n    const target = ns.args[0]\\r\\n    const threads = ns.args[1]\\r\\n    const delay = ns.args[2]\\r\\n  \\r\\n    if (delay && delay > 0) {\\r\\n      await ns.sleep(delay)\\r\\n    }\\r\\n  \\r\\n    ns.print(`Starting operation: hack on ${target} in ${threads} threads`)\\r\\n    await ns.hack(target, { threads, stock: true })\\r\\n    ns.exit()\\r\\n  }\\r\\n  \",\"filename\":\"hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:https://danielyxie.github.io/d0494ce9-2084-4d15-bb3b-a16cb06d55c7\",\"moduleSequenceNumber\":84079}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"hong-fang-tea\",\"moduleSequenceNumber\":84079,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/export async function main(ns) {\\r\\n    const target = ns.args[0]\\r\\n    const threads = ns.args[1]\\r\\n    const delay = ns.args[2]\\r\\n  \\r\\n    if (delay && delay > 0) {\\r\\n      await ns.sleep(delay)\\r\\n    }\\r\\n  \\r\\n    ns.print(`Starting operation: grow on ${target} in ${threads} threads`)\\r\\n    await ns.grow(target, { threads, stock: true })\\r\\n    ns.exit()\\r\\n  }\\r\\n  \",\"filename\":\"grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:https://danielyxie.github.io/0292ba38-1b39-4f9d-a2e8-d68256a2b16e\",\"moduleSequenceNumber\":84006}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"hong-fang-tea\",\"moduleSequenceNumber\":84006,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/export async function main(ns) {\\r\\n    const target = ns.args[0]\\r\\n    const threads = ns.args[1]\\r\\n    const delay = ns.args[2]\\r\\n  \\r\\n    if (delay && delay > 0) {\\r\\n      await ns.sleep(delay)\\r\\n    }\\r\\n  \\r\\n    ns.print(`Starting operation: weaken on ${target} in ${threads} threads`)\\r\\n    await ns.weaken(target, { threads, stock: true })\\r\\n    ns.exit()\\r\\n  }\\r\\n  \",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"hong-fang-tea\",\"moduleSequenceNumber\":83958,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":15,\"hackDifficulty\":15,\"minDifficulty\":5,\"moneyAvailable\":3000000,\"moneyMax\":75000000,\"numOpenPortsRequired\":0,\"openPortCount\":1,\"requiredHackingSkill\":30,\"serverGrowth\":20}},\"harakiri-sushi\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"harakiri-sushi\",\"httpPortOpen\":false,\"ip\":\"20.9.2.6\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"HaraKiri Sushi Bar Network\",\"programs\":[],\"ramUsed\":15.75,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"global-pharm\",9,52231.129359065264,\"e888f3f2-7cf3-467c-a2b8-9b322cf8f9c6\"],\"dataMap\":{},\"filename\":\"grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":740.6100000000025,\"pid\":1227,\"ramUsage\":1.75,\"server\":\"harakiri-sushi\",\"threads\":9,\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:https://danielyxie.github.io/9c71e6f6-84eb-45a4-a74d-bd8c76e034e8\",\"moduleSequenceNumber\":84007}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/export async function main(ns) {\\r\\n    const target = ns.args[0]\\r\\n    const threads = ns.args[1]\\r\\n    const delay = ns.args[2]\\r\\n  \\r\\n    if (delay && delay > 0) {\\r\\n      await ns.sleep(delay)\\r\\n    }\\r\\n  \\r\\n    ns.print(`Starting operation: hack on ${target} in ${threads} threads`)\\r\\n    await ns.hack(target, { threads, stock: true })\\r\\n    ns.exit()\\r\\n  }\\r\\n  \",\"filename\":\"hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:https://danielyxie.github.io/e47ddc54-1fbf-4562-9151-6e410eea8489\",\"moduleSequenceNumber\":84080}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"harakiri-sushi\",\"moduleSequenceNumber\":84080,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/export async function main(ns) {\\r\\n    const target = ns.args[0]\\r\\n    const threads = ns.args[1]\\r\\n    const delay = ns.args[2]\\r\\n  \\r\\n    if (delay && delay > 0) {\\r\\n      await ns.sleep(delay)\\r\\n    }\\r\\n  \\r\\n    ns.print(`Starting operation: grow on ${target} in ${threads} threads`)\\r\\n    await ns.grow(target, { threads, stock: true })\\r\\n    ns.exit()\\r\\n  }\\r\\n  \",\"filename\":\"grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:https://danielyxie.github.io/9c71e6f6-84eb-45a4-a74d-bd8c76e034e8\",\"moduleSequenceNumber\":84007}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"harakiri-sushi\",\"moduleSequenceNumber\":84007,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/export async function main(ns) {\\r\\n    const target = ns.args[0]\\r\\n    const threads = ns.args[1]\\r\\n    const delay = ns.args[2]\\r\\n  \\r\\n    if (delay && delay > 0) {\\r\\n      await ns.sleep(delay)\\r\\n    }\\r\\n  \\r\\n    ns.print(`Starting operation: weaken on ${target} in ${threads} threads`)\\r\\n    await ns.weaken(target, { threads, stock: true })\\r\\n    ns.exit()\\r\\n  }\\r\\n  \",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"harakiri-sushi\",\"moduleSequenceNumber\":83964,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":15,\"hackDifficulty\":15,\"minDifficulty\":5,\"moneyAvailable\":4000000,\"moneyMax\":100000000,\"numOpenPortsRequired\":0,\"openPortCount\":1,\"requiredHackingSkill\":40,\"serverGrowth\":40}},\"phantasy\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"phantasy\",\"httpPortOpen\":true,\"ip\":\"43.7.6.6\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Phantasy Club\",\"programs\":[],\"ramUsed\":31.5,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"global-pharm\",18,52231.129359065264,\"a2b8f57b-c056-4b27-8116-c08bd3c113c2\"],\"dataMap\":{},\"filename\":\"grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":740.6100000000025,\"pid\":1239,\"ramUsage\":1.75,\"server\":\"phantasy\",\"threads\":18,\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:https://danielyxie.github.io/ac14ee51-9a50-4256-9000-072f10b127a7\",\"moduleSequenceNumber\":84781}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/export async function main(ns) {\\r\\n    const target = ns.args[0]\\r\\n    const threads = ns.args[1]\\r\\n    const delay = ns.args[2]\\r\\n  \\r\\n    if (delay && delay > 0) {\\r\\n      await ns.sleep(delay)\\r\\n    }\\r\\n  \\r\\n    ns.print(`Starting operation: hack on ${target} in ${threads} threads`)\\r\\n    await ns.hack(target, { threads, stock: true })\\r\\n    ns.exit()\\r\\n  }\\r\\n  \",\"filename\":\"hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:https://danielyxie.github.io/adf2ee26-eac3-40ac-be46-e832c5bb6043\",\"moduleSequenceNumber\":85002}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"phantasy\",\"moduleSequenceNumber\":85002,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/export async function main(ns) {\\r\\n    const target = ns.args[0]\\r\\n    const threads = ns.args[1]\\r\\n    const delay = ns.args[2]\\r\\n  \\r\\n    if (delay && delay > 0) {\\r\\n      await ns.sleep(delay)\\r\\n    }\\r\\n  \\r\\n    ns.print(`Starting operation: grow on ${target} in ${threads} threads`)\\r\\n    await ns.grow(target, { threads, stock: true })\\r\\n    ns.exit()\\r\\n  }\\r\\n  \",\"filename\":\"grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:https://danielyxie.github.io/ac14ee51-9a50-4256-9000-072f10b127a7\",\"moduleSequenceNumber\":84781}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"phantasy\",\"moduleSequenceNumber\":84781,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/export async function main(ns) {\\r\\n    const target = ns.args[0]\\r\\n    const threads = ns.args[1]\\r\\n    const delay = ns.args[2]\\r\\n  \\r\\n    if (delay && delay > 0) {\\r\\n      await ns.sleep(delay)\\r\\n    }\\r\\n  \\r\\n    ns.print(`Starting operation: weaken on ${target} in ${threads} threads`)\\r\\n    await ns.weaken(target, { threads, stock: true })\\r\\n    ns.exit()\\r\\n  }\\r\\n  \",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"phantasy\",\"moduleSequenceNumber\":84641,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"max-hardware\",\"comptek\",\"avmnite-02h\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":20,\"hackDifficulty\":20,\"minDifficulty\":7,\"moneyAvailable\":24000000,\"moneyMax\":600000000,\"numOpenPortsRequired\":2,\"openPortCount\":4,\"requiredHackingSkill\":100,\"serverGrowth\":35}},\"max-hardware\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"max-hardware\",\"httpPortOpen\":false,\"ip\":\"27.2.8.0\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Max Hardware Store\",\"programs\":[],\"ramUsed\":31.5,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"global-pharm\",18,52231.129359065264,\"ed0008e9-1132-425c-bbdf-e4070a8290e0\"],\"dataMap\":{},\"filename\":\"grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":740.6100000000025,\"pid\":1237,\"ramUsage\":1.75,\"server\":\"max-hardware\",\"threads\":18,\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:https://danielyxie.github.io/795d46fd-8964-42ae-ac5b-84a3a64b0f64\",\"moduleSequenceNumber\":84011}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/export async function main(ns) {\\r\\n    const target = ns.args[0]\\r\\n    const threads = ns.args[1]\\r\\n    const delay = ns.args[2]\\r\\n  \\r\\n    if (delay && delay > 0) {\\r\\n      await ns.sleep(delay)\\r\\n    }\\r\\n  \\r\\n    ns.print(`Starting operation: hack on ${target} in ${threads} threads`)\\r\\n    await ns.hack(target, { threads, stock: true })\\r\\n    ns.exit()\\r\\n  }\\r\\n  \",\"filename\":\"hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:https://danielyxie.github.io/9a62383e-045d-4a44-af9f-6b8a61bfc5ca\",\"moduleSequenceNumber\":84084}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"max-hardware\",\"moduleSequenceNumber\":84084,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/export async function main(ns) {\\r\\n    const target = ns.args[0]\\r\\n    const threads = ns.args[1]\\r\\n    const delay = ns.args[2]\\r\\n  \\r\\n    if (delay && delay > 0) {\\r\\n      await ns.sleep(delay)\\r\\n    }\\r\\n  \\r\\n    ns.print(`Starting operation: grow on ${target} in ${threads} threads`)\\r\\n    await ns.grow(target, { threads, stock: true })\\r\\n    ns.exit()\\r\\n  }\\r\\n  \",\"filename\":\"grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:https://danielyxie.github.io/795d46fd-8964-42ae-ac5b-84a3a64b0f64\",\"moduleSequenceNumber\":84011}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"max-hardware\",\"moduleSequenceNumber\":84011,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/export async function main(ns) {\\r\\n    const target = ns.args[0]\\r\\n    const threads = ns.args[1]\\r\\n    const delay = ns.args[2]\\r\\n  \\r\\n    if (delay && delay > 0) {\\r\\n      await ns.sleep(delay)\\r\\n    }\\r\\n  \\r\\n    ns.print(`Starting operation: weaken on ${target} in ${threads} threads`)\\r\\n    await ns.weaken(target, { threads, stock: true })\\r\\n    ns.exit()\\r\\n  }\\r\\n  \",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"max-hardware\",\"moduleSequenceNumber\":83988,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"foodnstuff\",\"phantasy\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":15,\"hackDifficulty\":15,\"minDifficulty\":5,\"moneyAvailable\":10000000,\"moneyMax\":250000000,\"numOpenPortsRequired\":1,\"openPortCount\":1,\"requiredHackingSkill\":80,\"serverGrowth\":30}},\"omega-net\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"omega-net\",\"httpPortOpen\":true,\"ip\":\"64.3.4.4\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"the-new-god.lit\"],\"organizationName\":\"Omega Software\",\"programs\":[],\"ramUsed\":31.5,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"global-pharm\",18,52231.129359065264,\"b1f8be21-8ecb-4c69-8e3b-a0a74ddeec1a\"],\"dataMap\":{},\"filename\":\"grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":740.6100000000025,\"pid\":1240,\"ramUsage\":1.75,\"server\":\"omega-net\",\"threads\":18,\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:https://danielyxie.github.io/2efa868a-3157-424e-aa19-ca460d29d7dd\",\"moduleSequenceNumber\":84782}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/export async function main(ns) {\\r\\n    const target = ns.args[0]\\r\\n    const threads = ns.args[1]\\r\\n    const delay = ns.args[2]\\r\\n  \\r\\n    if (delay && delay > 0) {\\r\\n      await ns.sleep(delay)\\r\\n    }\\r\\n  \\r\\n    ns.print(`Starting operation: hack on ${target} in ${threads} threads`)\\r\\n    await ns.hack(target, { threads, stock: true })\\r\\n    ns.exit()\\r\\n  }\\r\\n  \",\"filename\":\"hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:https://danielyxie.github.io/1aa04acd-b497-4cc7-83dc-2a24f46aa6ca\",\"moduleSequenceNumber\":85003}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"omega-net\",\"moduleSequenceNumber\":85003,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/export async function main(ns) {\\r\\n    const target = ns.args[0]\\r\\n    const threads = ns.args[1]\\r\\n    const delay = ns.args[2]\\r\\n  \\r\\n    if (delay && delay > 0) {\\r\\n      await ns.sleep(delay)\\r\\n    }\\r\\n  \\r\\n    ns.print(`Starting operation: grow on ${target} in ${threads} threads`)\\r\\n    await ns.grow(target, { threads, stock: true })\\r\\n    ns.exit()\\r\\n  }\\r\\n  \",\"filename\":\"grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:https://danielyxie.github.io/2efa868a-3157-424e-aa19-ca460d29d7dd\",\"moduleSequenceNumber\":84782}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"omega-net\",\"moduleSequenceNumber\":84782,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/export async function main(ns) {\\r\\n    const target = ns.args[0]\\r\\n    const threads = ns.args[1]\\r\\n    const delay = ns.args[2]\\r\\n  \\r\\n    if (delay && delay > 0) {\\r\\n      await ns.sleep(delay)\\r\\n    }\\r\\n  \\r\\n    ns.print(`Starting operation: weaken on ${target} in ${threads} threads`)\\r\\n    await ns.weaken(target, { threads, stock: true })\\r\\n    ns.exit()\\r\\n  }\\r\\n  \",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"omega-net\",\"moduleSequenceNumber\":84647,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"CSEC\",\"netlink\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":31,\"hackDifficulty\":31,\"minDifficulty\":10,\"moneyAvailable\":63537982,\"moneyMax\":1588449550,\"numOpenPortsRequired\":2,\"openPortCount\":4,\"requiredHackingSkill\":206,\"serverGrowth\":39}},\"crush-fitness\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"crush-fitness\",\"httpPortOpen\":true,\"ip\":\"64.8.3.0\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Crush Fitness\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"silver-helix\",\"syscore\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":40,\"hackDifficulty\":40,\"minDifficulty\":13,\"moneyAvailable\":52840338,\"moneyMax\":1321008450,\"numOpenPortsRequired\":2,\"openPortCount\":4,\"requiredHackingSkill\":250,\"serverGrowth\":31}},\"iron-gym\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"iron-gym\",\"httpPortOpen\":false,\"ip\":\"14.0.0.2\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Iron Gym Network\",\"programs\":[],\"ramUsed\":31.5,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"global-pharm\",18,52231.129359065264,\"be82403e-d906-4d89-bc7c-d0096b89d90a\"],\"dataMap\":{},\"filename\":\"grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":740.6100000000025,\"pid\":1235,\"ramUsage\":1.75,\"server\":\"iron-gym\",\"threads\":18,\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:https://danielyxie.github.io/98633168-c471-48fb-96cf-4688a2d76a0f\",\"moduleSequenceNumber\":84009}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/export async function main(ns) {\\r\\n    const target = ns.args[0]\\r\\n    const threads = ns.args[1]\\r\\n    const delay = ns.args[2]\\r\\n  \\r\\n    if (delay && delay > 0) {\\r\\n      await ns.sleep(delay)\\r\\n    }\\r\\n  \\r\\n    ns.print(`Starting operation: hack on ${target} in ${threads} threads`)\\r\\n    await ns.hack(target, { threads, stock: true })\\r\\n    ns.exit()\\r\\n  }\\r\\n  \",\"filename\":\"hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:https://danielyxie.github.io/b1e68fca-39dc-484a-ab6c-dc081794e0e7\",\"moduleSequenceNumber\":84082}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"iron-gym\",\"moduleSequenceNumber\":84082,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/export async function main(ns) {\\r\\n    const target = ns.args[0]\\r\\n    const threads = ns.args[1]\\r\\n    const delay = ns.args[2]\\r\\n  \\r\\n    if (delay && delay > 0) {\\r\\n      await ns.sleep(delay)\\r\\n    }\\r\\n  \\r\\n    ns.print(`Starting operation: grow on ${target} in ${threads} threads`)\\r\\n    await ns.grow(target, { threads, stock: true })\\r\\n    ns.exit()\\r\\n  }\\r\\n  \",\"filename\":\"grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:https://danielyxie.github.io/98633168-c471-48fb-96cf-4688a2d76a0f\",\"moduleSequenceNumber\":84009}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"iron-gym\",\"moduleSequenceNumber\":84009,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/export async function main(ns) {\\r\\n    const target = ns.args[0]\\r\\n    const threads = ns.args[1]\\r\\n    const delay = ns.args[2]\\r\\n  \\r\\n    if (delay && delay > 0) {\\r\\n      await ns.sleep(delay)\\r\\n    }\\r\\n  \\r\\n    ns.print(`Starting operation: weaken on ${target} in ${threads} threads`)\\r\\n    await ns.weaken(target, { threads, stock: true })\\r\\n    ns.exit()\\r\\n  }\\r\\n  \",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"iron-gym\",\"moduleSequenceNumber\":83970,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":30,\"hackDifficulty\":10,\"minDifficulty\":10,\"moneyAvailable\":500000000,\"moneyMax\":500000000,\"numOpenPortsRequired\":1,\"openPortCount\":1,\"requiredHackingSkill\":100,\"serverGrowth\":20}},\"millenium-fitness\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"millenium-fitness\",\"httpPortOpen\":true,\"ip\":\"97.6.7.6\",\"isConnectedTo\":false,\"maxRam\":256,\"messages\":[],\"organizationName\":\"Millenium Fitness Network\",\"programs\":[],\"ramUsed\":255.5,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"global-pharm\",146,52231.129359065264,\"b9524b41-2827-4f50-afe2-052c935bb691\"],\"dataMap\":{},\"filename\":\"grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":740.6100000000025,\"pid\":1251,\"ramUsage\":1.75,\"server\":\"millenium-fitness\",\"threads\":146,\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:https://danielyxie.github.io/6523229b-d86b-4175-8731-34aaa2813943\",\"moduleSequenceNumber\":84795}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/export async function main(ns) {\\r\\n    const target = ns.args[0]\\r\\n    const threads = ns.args[1]\\r\\n    const delay = ns.args[2]\\r\\n  \\r\\n    if (delay && delay > 0) {\\r\\n      await ns.sleep(delay)\\r\\n    }\\r\\n  \\r\\n    ns.print(`Starting operation: hack on ${target} in ${threads} threads`)\\r\\n    await ns.hack(target, { threads, stock: true })\\r\\n    ns.exit()\\r\\n  }\\r\\n  \",\"filename\":\"hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:https://danielyxie.github.io/d4161fcc-75bf-4c21-babe-d1f48bee2cac\",\"moduleSequenceNumber\":85014}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"millenium-fitness\",\"moduleSequenceNumber\":85014,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/export async function main(ns) {\\r\\n    const target = ns.args[0]\\r\\n    const threads = ns.args[1]\\r\\n    const delay = ns.args[2]\\r\\n  \\r\\n    if (delay && delay > 0) {\\r\\n      await ns.sleep(delay)\\r\\n    }\\r\\n  \\r\\n    ns.print(`Starting operation: grow on ${target} in ${threads} threads`)\\r\\n    await ns.grow(target, { threads, stock: true })\\r\\n    ns.exit()\\r\\n  }\\r\\n  \",\"filename\":\"grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:https://danielyxie.github.io/6523229b-d86b-4175-8731-34aaa2813943\",\"moduleSequenceNumber\":84795}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"millenium-fitness\",\"moduleSequenceNumber\":84795,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/export async function main(ns) {\\r\\n    const target = ns.args[0]\\r\\n    const threads = ns.args[1]\\r\\n    const delay = ns.args[2]\\r\\n  \\r\\n    if (delay && delay > 0) {\\r\\n      await ns.sleep(delay)\\r\\n    }\\r\\n  \\r\\n    ns.print(`Starting operation: weaken on ${target} in ${threads} threads`)\\r\\n    await ns.weaken(target, { threads, stock: true })\\r\\n    ns.exit()\\r\\n  }\\r\\n  \",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"millenium-fitness\",\"moduleSequenceNumber\":84719,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"rothman-uni\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":52,\"hackDifficulty\":52,\"minDifficulty\":17,\"moneyAvailable\":250000000,\"moneyMax\":6250000000,\"numOpenPortsRequired\":3,\"openPortCount\":4,\"requiredHackingSkill\":498,\"serverGrowth\":27}},\"powerhouse-fitness\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"powerhouse-fitness\",\"httpPortOpen\":false,\"ip\":\"66.0.8.7\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Powerhouse Fitness\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\".\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":55,\"hackDifficulty\":55,\"minDifficulty\":18,\"moneyAvailable\":900000000,\"moneyMax\":22500000000,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1052,\"serverGrowth\":58}},\"snap-fitness\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"snap-fitness\",\"httpPortOpen\":true,\"ip\":\"37.7.5.8\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Snap Fitness\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"alpha-ent\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":43,\"hackDifficulty\":43,\"minDifficulty\":14,\"moneyAvailable\":450000000,\"moneyMax\":11250000000,\"numOpenPortsRequired\":4,\"openPortCount\":4,\"requiredHackingSkill\":774,\"serverGrowth\":46}},\"run4theh111z\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"run4theh111z\",\"httpPortOpen\":true,\"ip\":\"0.4.1.1\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"simulated-reality.lit\",\"the-new-god.lit\"],\"organizationName\":\"The Runners\",\"programs\":[],\"ramUsed\":63,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"global-pharm\",36,52231.129359065264,\"14349287-ab0a-479e-a189-9b7b036a8a94\"],\"dataMap\":{},\"filename\":\"grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":740.6100000000025,\"pid\":1250,\"ramUsage\":1.75,\"server\":\"run4theh111z\",\"threads\":36,\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:https://danielyxie.github.io/d2b81343-1aed-4cab-be78-54d9c9c8051c\",\"moduleSequenceNumber\":84792}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/export async function main(ns) {\\r\\n    const target = ns.args[0]\\r\\n    const threads = ns.args[1]\\r\\n    const delay = ns.args[2]\\r\\n  \\r\\n    if (delay && delay > 0) {\\r\\n      await ns.sleep(delay)\\r\\n    }\\r\\n  \\r\\n    ns.print(`Starting operation: hack on ${target} in ${threads} threads`)\\r\\n    await ns.hack(target, { threads, stock: true })\\r\\n    ns.exit()\\r\\n  }\\r\\n  \",\"filename\":\"hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:https://danielyxie.github.io/aeef3fc7-dcbf-45cb-9a7c-2c5f34c0733e\",\"moduleSequenceNumber\":85013}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"run4theh111z\",\"moduleSequenceNumber\":85013,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/export async function main(ns) {\\r\\n    const target = ns.args[0]\\r\\n    const threads = ns.args[1]\\r\\n    const delay = ns.args[2]\\r\\n  \\r\\n    if (delay && delay > 0) {\\r\\n      await ns.sleep(delay)\\r\\n    }\\r\\n  \\r\\n    ns.print(`Starting operation: grow on ${target} in ${threads} threads`)\\r\\n    await ns.grow(target, { threads, stock: true })\\r\\n    ns.exit()\\r\\n  }\\r\\n  \",\"filename\":\"grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:https://danielyxie.github.io/d2b81343-1aed-4cab-be78-54d9c9c8051c\",\"moduleSequenceNumber\":84792}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"run4theh111z\",\"moduleSequenceNumber\":84792,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/export async function main(ns) {\\r\\n    const target = ns.args[0]\\r\\n    const threads = ns.args[1]\\r\\n    const delay = ns.args[2]\\r\\n  \\r\\n    if (delay && delay > 0) {\\r\\n      await ns.sleep(delay)\\r\\n    }\\r\\n  \\r\\n    ns.print(`Starting operation: weaken on ${target} in ${threads} threads`)\\r\\n    await ns.weaken(target, { threads, stock: true })\\r\\n    ns.exit()\\r\\n  }\\r\\n  \",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"run4theh111z\",\"moduleSequenceNumber\":84743,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"zb-def\",\"helios\",\"vitalife\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":0,\"hackDifficulty\":0,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":4,\"openPortCount\":4,\"requiredHackingSkill\":505,\"serverGrowth\":0}},\"I.I.I.I\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"I.I.I.I\",\"httpPortOpen\":true,\"ip\":\"28.6.2.0\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"democracy-is-dead.lit\"],\"organizationName\":\"I.I.I.I\",\"programs\":[],\"ramUsed\":15.75,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"global-pharm\",9,52231.129359065264,\"e221e420-863f-4987-b89a-d9abd2b47c57\"],\"dataMap\":{},\"filename\":\"grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":740.6100000000025,\"pid\":1230,\"ramUsage\":1.75,\"server\":\"I.I.I.I\",\"threads\":9,\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:https://danielyxie.github.io/c5423aea-98c5-4072-a059-90feae90384a\",\"moduleSequenceNumber\":84776}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/export async function main(ns) {\\r\\n    const target = ns.args[0]\\r\\n    const threads = ns.args[1]\\r\\n    const delay = ns.args[2]\\r\\n  \\r\\n    if (delay && delay > 0) {\\r\\n      await ns.sleep(delay)\\r\\n    }\\r\\n  \\r\\n    ns.print(`Starting operation: hack on ${target} in ${threads} threads`)\\r\\n    await ns.hack(target, { threads, stock: true })\\r\\n    ns.exit()\\r\\n  }\\r\\n  \",\"filename\":\"hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:https://danielyxie.github.io/c61c04fc-6b7e-4993-ba4f-2a8a3fbeca1f\",\"moduleSequenceNumber\":84997}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"I.I.I.I\",\"moduleSequenceNumber\":84997,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/export async function main(ns) {\\r\\n    const target = ns.args[0]\\r\\n    const threads = ns.args[1]\\r\\n    const delay = ns.args[2]\\r\\n  \\r\\n    if (delay && delay > 0) {\\r\\n      await ns.sleep(delay)\\r\\n    }\\r\\n  \\r\\n    ns.print(`Starting operation: grow on ${target} in ${threads} threads`)\\r\\n    await ns.grow(target, { threads, stock: true })\\r\\n    ns.exit()\\r\\n  }\\r\\n  \",\"filename\":\"grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:https://danielyxie.github.io/c5423aea-98c5-4072-a059-90feae90384a\",\"moduleSequenceNumber\":84776}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"I.I.I.I\",\"moduleSequenceNumber\":84776,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/export async function main(ns) {\\r\\n    const target = ns.args[0]\\r\\n    const threads = ns.args[1]\\r\\n    const delay = ns.args[2]\\r\\n  \\r\\n    if (delay && delay > 0) {\\r\\n      await ns.sleep(delay)\\r\\n    }\\r\\n  \\r\\n    ns.print(`Starting operation: weaken on ${target} in ${threads} threads`)\\r\\n    await ns.weaken(target, { threads, stock: true })\\r\\n    ns.exit()\\r\\n  }\\r\\n  \",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"I.I.I.I\",\"moduleSequenceNumber\":84689,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"netlink\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":0,\"hackDifficulty\":0,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":3,\"openPortCount\":4,\"requiredHackingSkill\":341,\"serverGrowth\":0}},\"avmnite-02h\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"avmnite-02h\",\"httpPortOpen\":true,\"ip\":\"21.6.5.1\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"democracy-is-dead.lit\"],\"organizationName\":\"NiteSec\",\"programs\":[],\"ramUsed\":31.5,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"global-pharm\",18,52231.129359065264,\"92357ef3-4a7c-4b0f-b1f0-70db1d342517\"],\"dataMap\":{},\"filename\":\"grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":740.6100000000025,\"pid\":1241,\"ramUsage\":1.75,\"server\":\"avmnite-02h\",\"threads\":18,\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:https://danielyxie.github.io/131a487f-53f6-4123-a62a-d656a9aa910c\",\"moduleSequenceNumber\":84783}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/export async function main(ns) {\\r\\n    const target = ns.args[0]\\r\\n    const threads = ns.args[1]\\r\\n    const delay = ns.args[2]\\r\\n  \\r\\n    if (delay && delay > 0) {\\r\\n      await ns.sleep(delay)\\r\\n    }\\r\\n  \\r\\n    ns.print(`Starting operation: hack on ${target} in ${threads} threads`)\\r\\n    await ns.hack(target, { threads, stock: true })\\r\\n    ns.exit()\\r\\n  }\\r\\n  \",\"filename\":\"hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:https://danielyxie.github.io/695f87e3-b790-4dfe-84a4-5c396db04784\",\"moduleSequenceNumber\":85004}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"avmnite-02h\",\"moduleSequenceNumber\":85004,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/export async function main(ns) {\\r\\n    const target = ns.args[0]\\r\\n    const threads = ns.args[1]\\r\\n    const delay = ns.args[2]\\r\\n  \\r\\n    if (delay && delay > 0) {\\r\\n      await ns.sleep(delay)\\r\\n    }\\r\\n  \\r\\n    ns.print(`Starting operation: grow on ${target} in ${threads} threads`)\\r\\n    await ns.grow(target, { threads, stock: true })\\r\\n    ns.exit()\\r\\n  }\\r\\n  \",\"filename\":\"grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:https://danielyxie.github.io/131a487f-53f6-4123-a62a-d656a9aa910c\",\"moduleSequenceNumber\":84783}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"avmnite-02h\",\"moduleSequenceNumber\":84783,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/export async function main(ns) {\\r\\n    const target = ns.args[0]\\r\\n    const threads = ns.args[1]\\r\\n    const delay = ns.args[2]\\r\\n  \\r\\n    if (delay && delay > 0) {\\r\\n      await ns.sleep(delay)\\r\\n    }\\r\\n  \\r\\n    ns.print(`Starting operation: weaken on ${target} in ${threads} threads`)\\r\\n    await ns.weaken(target, { threads, stock: true })\\r\\n    ns.exit()\\r\\n  }\\r\\n  \",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"avmnite-02h\",\"moduleSequenceNumber\":84659,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"phantasy\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":0,\"hackDifficulty\":0,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":2,\"openPortCount\":4,\"requiredHackingSkill\":213,\"serverGrowth\":0}},\".\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\".\",\"httpPortOpen\":true,\"ip\":\"14.1.7.7\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\".\",\"programs\":[],\"ramUsed\":15.75,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"global-pharm\",9,52231.129359065264,\"091940c1-2285-46eb-8391-0f0b219dcb78\"],\"dataMap\":{},\"filename\":\"grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":740.6100000000025,\"pid\":1234,\"ramUsage\":1.75,\"server\":\".\",\"threads\":9,\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:https://danielyxie.github.io/00fb1e17-9329-4e4c-a0f0-00cad84768c1\",\"moduleSequenceNumber\":84780}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/export async function main(ns) {\\r\\n    const target = ns.args[0]\\r\\n    const threads = ns.args[1]\\r\\n    const delay = ns.args[2]\\r\\n  \\r\\n    if (delay && delay > 0) {\\r\\n      await ns.sleep(delay)\\r\\n    }\\r\\n  \\r\\n    ns.print(`Starting operation: hack on ${target} in ${threads} threads`)\\r\\n    await ns.hack(target, { threads, stock: true })\\r\\n    ns.exit()\\r\\n  }\\r\\n  \",\"filename\":\"hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:https://danielyxie.github.io/c49044e3-cd69-4eeb-84f3-47f33b03ed55\",\"moduleSequenceNumber\":85001}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\".\",\"moduleSequenceNumber\":85001,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/export async function main(ns) {\\r\\n    const target = ns.args[0]\\r\\n    const threads = ns.args[1]\\r\\n    const delay = ns.args[2]\\r\\n  \\r\\n    if (delay && delay > 0) {\\r\\n      await ns.sleep(delay)\\r\\n    }\\r\\n  \\r\\n    ns.print(`Starting operation: grow on ${target} in ${threads} threads`)\\r\\n    await ns.grow(target, { threads, stock: true })\\r\\n    ns.exit()\\r\\n  }\\r\\n  \",\"filename\":\"grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:https://danielyxie.github.io/00fb1e17-9329-4e4c-a0f0-00cad84768c1\",\"moduleSequenceNumber\":84780}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\".\",\"moduleSequenceNumber\":84780,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/export async function main(ns) {\\r\\n    const target = ns.args[0]\\r\\n    const threads = ns.args[1]\\r\\n    const delay = ns.args[2]\\r\\n  \\r\\n    if (delay && delay > 0) {\\r\\n      await ns.sleep(delay)\\r\\n    }\\r\\n  \\r\\n    ns.print(`Starting operation: weaken on ${target} in ${threads} threads`)\\r\\n    await ns.weaken(target, { threads, stock: true })\\r\\n    ns.exit()\\r\\n  }\\r\\n  \",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\".\",\"moduleSequenceNumber\":84749,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"fulcrumtech\",\"b-and-a\",\"blade\",\"powerhouse-fitness\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":0,\"hackDifficulty\":0,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":4,\"openPortCount\":4,\"requiredHackingSkill\":511,\"serverGrowth\":0}},\"CSEC\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"CSEC\",\"httpPortOpen\":false,\"ip\":\"89.5.4.9\",\"isConnectedTo\":false,\"maxRam\":8,\"messages\":[\"democracy-is-dead.lit\"],\"organizationName\":\"CyberSec\",\"programs\":[],\"ramUsed\":7,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"global-pharm\",4,52231.129359065264,\"174cec0c-599c-409e-b098-e7306af0b237\"],\"dataMap\":{},\"filename\":\"grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":740.6100000000025,\"pid\":1221,\"ramUsage\":1.75,\"server\":\"CSEC\",\"threads\":4,\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:https://danielyxie.github.io/d4530ae3-2bf9-40fb-acce-9b76d1236e47\",\"moduleSequenceNumber\":84002}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/export async function main(ns) {\\r\\n    const target = ns.args[0]\\r\\n    const threads = ns.args[1]\\r\\n    const delay = ns.args[2]\\r\\n  \\r\\n    if (delay && delay > 0) {\\r\\n      await ns.sleep(delay)\\r\\n    }\\r\\n  \\r\\n    ns.print(`Starting operation: hack on ${target} in ${threads} threads`)\\r\\n    await ns.hack(target, { threads, stock: true })\\r\\n    ns.exit()\\r\\n  }\\r\\n  \",\"filename\":\"hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:https://danielyxie.github.io/7be39450-ffa1-44ad-881c-6aae778d26fd\",\"moduleSequenceNumber\":84075}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"CSEC\",\"moduleSequenceNumber\":84075,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/export async function main(ns) {\\r\\n    const target = ns.args[0]\\r\\n    const threads = ns.args[1]\\r\\n    const delay = ns.args[2]\\r\\n  \\r\\n    if (delay && delay > 0) {\\r\\n      await ns.sleep(delay)\\r\\n    }\\r\\n  \\r\\n    ns.print(`Starting operation: grow on ${target} in ${threads} threads`)\\r\\n    await ns.grow(target, { threads, stock: true })\\r\\n    ns.exit()\\r\\n  }\\r\\n  \",\"filename\":\"grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:https://danielyxie.github.io/d4530ae3-2bf9-40fb-acce-9b76d1236e47\",\"moduleSequenceNumber\":84002}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"CSEC\",\"moduleSequenceNumber\":84002,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/export async function main(ns) {\\r\\n    const target = ns.args[0]\\r\\n    const threads = ns.args[1]\\r\\n    const delay = ns.args[2]\\r\\n  \\r\\n    if (delay && delay > 0) {\\r\\n      await ns.sleep(delay)\\r\\n    }\\r\\n  \\r\\n    ns.print(`Starting operation: weaken on ${target} in ${threads} threads`)\\r\\n    await ns.weaken(target, { threads, stock: true })\\r\\n    ns.exit()\\r\\n  }\\r\\n  \",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"CSEC\",\"moduleSequenceNumber\":83994,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"sigma-cosmetics\",\"omega-net\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":0,\"hackDifficulty\":0,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":1,\"openPortCount\":1,\"requiredHackingSkill\":51,\"serverGrowth\":0}},\"The-Cave\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"The-Cave\",\"httpPortOpen\":false,\"ip\":\"68.7.1.4\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"alpha-omega.lit\"],\"organizationName\":\"Helios\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"clarkinc\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":0,\"hackDifficulty\":0,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":925,\"serverGrowth\":0}},\"w0r1d_d43m0n\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"w0r1d_d43m0n\",\"httpPortOpen\":false,\"ip\":\"19.1.6.5\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"w0r1d_d43m0n\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":0,\"hackDifficulty\":0,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":3000,\"serverGrowth\":0}},\"darkweb\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"darkweb\",\"httpPortOpen\":false,\"ip\":\"73.1.2.0\",\"isConnectedTo\":false,\"maxRam\":1,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-131072-238277d6-550d-4dd3-86d4-72bc5d87ace3\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-131072-238277d6-550d-4dd3-86d4-72bc5d87ace3\",\"httpPortOpen\":false,\"ip\":\"75.5.4.3\",\"isConnectedTo\":false,\"maxRam\":131072,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":131071.5,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"global-pharm\",74898,52231.129359065264,\"a41e0db2-60e5-495e-939a-fc55c65d7eb1\"],\"dataMap\":{},\"filename\":\"grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":740.6100000000025,\"pid\":1253,\"ramUsage\":1.75,\"server\":\"pserv-131072-238277d6-550d-4dd3-86d4-72bc5d87ace3\",\"threads\":74898,\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:https://danielyxie.github.io/803b8a5f-549a-4818-8b15-13f9a86b784e\",\"moduleSequenceNumber\":85294}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/export async function main(ns) {\\r\\n    const target = ns.args[0]\\r\\n    const threads = ns.args[1]\\r\\n    const delay = ns.args[2]\\r\\n  \\r\\n    if (delay && delay > 0) {\\r\\n      await ns.sleep(delay)\\r\\n    }\\r\\n  \\r\\n    ns.print(`Starting operation: hack on ${target} in ${threads} threads`)\\r\\n    await ns.hack(target, { threads, stock: true })\\r\\n    ns.exit()\\r\\n  }\\r\\n  \",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"pserv-131072-238277d6-550d-4dd3-86d4-72bc5d87ace3\",\"moduleSequenceNumber\":85278,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/export async function main(ns) {\\r\\n    const target = ns.args[0]\\r\\n    const threads = ns.args[1]\\r\\n    const delay = ns.args[2]\\r\\n  \\r\\n    if (delay && delay > 0) {\\r\\n      await ns.sleep(delay)\\r\\n    }\\r\\n  \\r\\n    ns.print(`Starting operation: grow on ${target} in ${threads} threads`)\\r\\n    await ns.grow(target, { threads, stock: true })\\r\\n    ns.exit()\\r\\n  }\\r\\n  \",\"filename\":\"grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:https://danielyxie.github.io/803b8a5f-549a-4818-8b15-13f9a86b784e\",\"moduleSequenceNumber\":85294}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"pserv-131072-238277d6-550d-4dd3-86d4-72bc5d87ace3\",\"moduleSequenceNumber\":85294,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/export async function main(ns) {\\r\\n    const target = ns.args[0]\\r\\n    const threads = ns.args[1]\\r\\n    const delay = ns.args[2]\\r\\n  \\r\\n    if (delay && delay > 0) {\\r\\n      await ns.sleep(delay)\\r\\n    }\\r\\n  \\r\\n    ns.print(`Starting operation: weaken on ${target} in ${threads} threads`)\\r\\n    await ns.weaken(target, { threads, stock: true })\\r\\n    ns.exit()\\r\\n  }\\r\\n  \",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:https://danielyxie.github.io/cb2aed03-7ba8-4734-aedc-1d57eaf20607\",\"moduleSequenceNumber\":85295}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"pserv-131072-238277d6-550d-4dd3-86d4-72bc5d87ace3\",\"moduleSequenceNumber\":85295,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-131072-8e97625d-2e55-460a-b07a-f82cb9817786\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-131072-8e97625d-2e55-460a-b07a-f82cb9817786\",\"httpPortOpen\":false,\"ip\":\"15.4.0.8\",\"isConnectedTo\":false,\"maxRam\":131072,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":131071.5,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"global-pharm\",74898,52231.129359065264,\"f305d2b6-fa32-4dd4-966f-a213df2fa240\"],\"dataMap\":{},\"filename\":\"grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":740.6100000000025,\"pid\":1254,\"ramUsage\":1.75,\"server\":\"pserv-131072-8e97625d-2e55-460a-b07a-f82cb9817786\",\"threads\":74898,\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:https://danielyxie.github.io/ed80fb70-63dd-411f-92f3-4c29132aea41\",\"moduleSequenceNumber\":85302}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/export async function main(ns) {\\r\\n    const target = ns.args[0]\\r\\n    const threads = ns.args[1]\\r\\n    const delay = ns.args[2]\\r\\n  \\r\\n    if (delay && delay > 0) {\\r\\n      await ns.sleep(delay)\\r\\n    }\\r\\n  \\r\\n    ns.print(`Starting operation: hack on ${target} in ${threads} threads`)\\r\\n    await ns.hack(target, { threads, stock: true })\\r\\n    ns.exit()\\r\\n  }\\r\\n  \",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"pserv-131072-8e97625d-2e55-460a-b07a-f82cb9817786\",\"moduleSequenceNumber\":85299,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/export async function main(ns) {\\r\\n    const target = ns.args[0]\\r\\n    const threads = ns.args[1]\\r\\n    const delay = ns.args[2]\\r\\n  \\r\\n    if (delay && delay > 0) {\\r\\n      await ns.sleep(delay)\\r\\n    }\\r\\n  \\r\\n    ns.print(`Starting operation: grow on ${target} in ${threads} threads`)\\r\\n    await ns.grow(target, { threads, stock: true })\\r\\n    ns.exit()\\r\\n  }\\r\\n  \",\"filename\":\"grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:https://danielyxie.github.io/ed80fb70-63dd-411f-92f3-4c29132aea41\",\"moduleSequenceNumber\":85302}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"pserv-131072-8e97625d-2e55-460a-b07a-f82cb9817786\",\"moduleSequenceNumber\":85302,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/export async function main(ns) {\\r\\n    const target = ns.args[0]\\r\\n    const threads = ns.args[1]\\r\\n    const delay = ns.args[2]\\r\\n  \\r\\n    if (delay && delay > 0) {\\r\\n      await ns.sleep(delay)\\r\\n    }\\r\\n  \\r\\n    ns.print(`Starting operation: weaken on ${target} in ${threads} threads`)\\r\\n    await ns.weaken(target, { threads, stock: true })\\r\\n    ns.exit()\\r\\n  }\\r\\n  \",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:https://danielyxie.github.io/d9353913-41e6-4e58-8499-92b85e07fed9\",\"moduleSequenceNumber\":85303}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"pserv-131072-8e97625d-2e55-460a-b07a-f82cb9817786\",\"moduleSequenceNumber\":85303,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-131072-68549598-cb26-4b2e-bf8b-f48c237534dd\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-131072-68549598-cb26-4b2e-bf8b-f48c237534dd\",\"httpPortOpen\":false,\"ip\":\"49.1.9.6\",\"isConnectedTo\":false,\"maxRam\":131072,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":131071.5,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"global-pharm\",74898,52231.129359065264,\"98642415-ed8b-4e6b-a07c-8d6b11e92fb5\"],\"dataMap\":{},\"filename\":\"grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":740.6100000000025,\"pid\":1255,\"ramUsage\":1.75,\"server\":\"pserv-131072-68549598-cb26-4b2e-bf8b-f48c237534dd\",\"threads\":74898,\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:https://danielyxie.github.io/9eb9389a-1666-432d-a183-f440c77f7b30\",\"moduleSequenceNumber\":85369}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/export async function main(ns) {\\r\\n    const target = ns.args[0]\\r\\n    const threads = ns.args[1]\\r\\n    const delay = ns.args[2]\\r\\n  \\r\\n    if (delay && delay > 0) {\\r\\n      await ns.sleep(delay)\\r\\n    }\\r\\n  \\r\\n    ns.print(`Starting operation: hack on ${target} in ${threads} threads`)\\r\\n    await ns.hack(target, { threads, stock: true })\\r\\n    ns.exit()\\r\\n  }\\r\\n  \",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"pserv-131072-68549598-cb26-4b2e-bf8b-f48c237534dd\",\"moduleSequenceNumber\":85307,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/export async function main(ns) {\\r\\n    const target = ns.args[0]\\r\\n    const threads = ns.args[1]\\r\\n    const delay = ns.args[2]\\r\\n  \\r\\n    if (delay && delay > 0) {\\r\\n      await ns.sleep(delay)\\r\\n    }\\r\\n  \\r\\n    ns.print(`Starting operation: grow on ${target} in ${threads} threads`)\\r\\n    await ns.grow(target, { threads, stock: true })\\r\\n    ns.exit()\\r\\n  }\\r\\n  \",\"filename\":\"grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:https://danielyxie.github.io/9eb9389a-1666-432d-a183-f440c77f7b30\",\"moduleSequenceNumber\":85369}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"pserv-131072-68549598-cb26-4b2e-bf8b-f48c237534dd\",\"moduleSequenceNumber\":85369,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/export async function main(ns) {\\r\\n    const target = ns.args[0]\\r\\n    const threads = ns.args[1]\\r\\n    const delay = ns.args[2]\\r\\n  \\r\\n    if (delay && delay > 0) {\\r\\n      await ns.sleep(delay)\\r\\n    }\\r\\n  \\r\\n    ns.print(`Starting operation: weaken on ${target} in ${threads} threads`)\\r\\n    await ns.weaken(target, { threads, stock: true })\\r\\n    ns.exit()\\r\\n  }\\r\\n  \",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"pserv-131072-68549598-cb26-4b2e-bf8b-f48c237534dd\",\"moduleSequenceNumber\":85309,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-131072-14516993-eeaf-4a2c-bfaa-05ce8645cc0d\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-131072-14516993-eeaf-4a2c-bfaa-05ce8645cc0d\",\"httpPortOpen\":false,\"ip\":\"95.1.7.4\",\"isConnectedTo\":false,\"maxRam\":131072,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":131071.5,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"global-pharm\",74898,52231.129359065264,\"c36f73f4-25cd-445a-918f-ebf6ebbd896d\"],\"dataMap\":{},\"filename\":\"grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":740.6100000000025,\"pid\":1256,\"ramUsage\":1.75,\"server\":\"pserv-131072-14516993-eeaf-4a2c-bfaa-05ce8645cc0d\",\"threads\":74898,\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:https://danielyxie.github.io/08241e34-6ff7-4220-a911-97c8499831ef\",\"moduleSequenceNumber\":85370}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/export async function main(ns) {\\r\\n    const target = ns.args[0]\\r\\n    const threads = ns.args[1]\\r\\n    const delay = ns.args[2]\\r\\n  \\r\\n    if (delay && delay > 0) {\\r\\n      await ns.sleep(delay)\\r\\n    }\\r\\n  \\r\\n    ns.print(`Starting operation: hack on ${target} in ${threads} threads`)\\r\\n    await ns.hack(target, { threads, stock: true })\\r\\n    ns.exit()\\r\\n  }\\r\\n  \",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"pserv-131072-14516993-eeaf-4a2c-bfaa-05ce8645cc0d\",\"moduleSequenceNumber\":85313,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/export async function main(ns) {\\r\\n    const target = ns.args[0]\\r\\n    const threads = ns.args[1]\\r\\n    const delay = ns.args[2]\\r\\n  \\r\\n    if (delay && delay > 0) {\\r\\n      await ns.sleep(delay)\\r\\n    }\\r\\n  \\r\\n    ns.print(`Starting operation: grow on ${target} in ${threads} threads`)\\r\\n    await ns.grow(target, { threads, stock: true })\\r\\n    ns.exit()\\r\\n  }\\r\\n  \",\"filename\":\"grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:https://danielyxie.github.io/08241e34-6ff7-4220-a911-97c8499831ef\",\"moduleSequenceNumber\":85370}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"pserv-131072-14516993-eeaf-4a2c-bfaa-05ce8645cc0d\",\"moduleSequenceNumber\":85370,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/export async function main(ns) {\\r\\n    const target = ns.args[0]\\r\\n    const threads = ns.args[1]\\r\\n    const delay = ns.args[2]\\r\\n  \\r\\n    if (delay && delay > 0) {\\r\\n      await ns.sleep(delay)\\r\\n    }\\r\\n  \\r\\n    ns.print(`Starting operation: weaken on ${target} in ${threads} threads`)\\r\\n    await ns.weaken(target, { threads, stock: true })\\r\\n    ns.exit()\\r\\n  }\\r\\n  \",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"pserv-131072-14516993-eeaf-4a2c-bfaa-05ce8645cc0d\",\"moduleSequenceNumber\":85315,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-131072-555b1405-868c-409a-b969-738b8179a246\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-131072-555b1405-868c-409a-b969-738b8179a246\",\"httpPortOpen\":false,\"ip\":\"21.3.6.8\",\"isConnectedTo\":false,\"maxRam\":131072,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":131071.5,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"global-pharm\",74898,52231.129359065264,\"ea6f7507-d7fc-4684-ab98-0018033ca1e7\"],\"dataMap\":{},\"filename\":\"grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":740.6100000000025,\"pid\":1257,\"ramUsage\":1.75,\"server\":\"pserv-131072-555b1405-868c-409a-b969-738b8179a246\",\"threads\":74898,\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:https://danielyxie.github.io/d1421b9d-f322-4d0c-b988-9d9ffe130d54\",\"moduleSequenceNumber\":85371}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/export async function main(ns) {\\r\\n    const target = ns.args[0]\\r\\n    const threads = ns.args[1]\\r\\n    const delay = ns.args[2]\\r\\n  \\r\\n    if (delay && delay > 0) {\\r\\n      await ns.sleep(delay)\\r\\n    }\\r\\n  \\r\\n    ns.print(`Starting operation: hack on ${target} in ${threads} threads`)\\r\\n    await ns.hack(target, { threads, stock: true })\\r\\n    ns.exit()\\r\\n  }\\r\\n  \",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"pserv-131072-555b1405-868c-409a-b969-738b8179a246\",\"moduleSequenceNumber\":85319,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/export async function main(ns) {\\r\\n    const target = ns.args[0]\\r\\n    const threads = ns.args[1]\\r\\n    const delay = ns.args[2]\\r\\n  \\r\\n    if (delay && delay > 0) {\\r\\n      await ns.sleep(delay)\\r\\n    }\\r\\n  \\r\\n    ns.print(`Starting operation: grow on ${target} in ${threads} threads`)\\r\\n    await ns.grow(target, { threads, stock: true })\\r\\n    ns.exit()\\r\\n  }\\r\\n  \",\"filename\":\"grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:https://danielyxie.github.io/d1421b9d-f322-4d0c-b988-9d9ffe130d54\",\"moduleSequenceNumber\":85371}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"pserv-131072-555b1405-868c-409a-b969-738b8179a246\",\"moduleSequenceNumber\":85371,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/export async function main(ns) {\\r\\n    const target = ns.args[0]\\r\\n    const threads = ns.args[1]\\r\\n    const delay = ns.args[2]\\r\\n  \\r\\n    if (delay && delay > 0) {\\r\\n      await ns.sleep(delay)\\r\\n    }\\r\\n  \\r\\n    ns.print(`Starting operation: weaken on ${target} in ${threads} threads`)\\r\\n    await ns.weaken(target, { threads, stock: true })\\r\\n    ns.exit()\\r\\n  }\\r\\n  \",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"pserv-131072-555b1405-868c-409a-b969-738b8179a246\",\"moduleSequenceNumber\":85321,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-131072-e6bcce5a-62ab-4bba-9620-1cfc5c3fa092\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-131072-e6bcce5a-62ab-4bba-9620-1cfc5c3fa092\",\"httpPortOpen\":false,\"ip\":\"11.1.3.3\",\"isConnectedTo\":false,\"maxRam\":131072,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":131071.5,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"global-pharm\",74898,52231.129359065264,\"bc3f2dbe-0759-4703-b34f-e7b859199c2e\"],\"dataMap\":{},\"filename\":\"grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":740.6100000000025,\"pid\":1258,\"ramUsage\":1.75,\"server\":\"pserv-131072-e6bcce5a-62ab-4bba-9620-1cfc5c3fa092\",\"threads\":74898,\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:https://danielyxie.github.io/9525153e-7227-4c8f-8620-d387c39af984\",\"moduleSequenceNumber\":85372}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/export async function main(ns) {\\r\\n    const target = ns.args[0]\\r\\n    const threads = ns.args[1]\\r\\n    const delay = ns.args[2]\\r\\n  \\r\\n    if (delay && delay > 0) {\\r\\n      await ns.sleep(delay)\\r\\n    }\\r\\n  \\r\\n    ns.print(`Starting operation: hack on ${target} in ${threads} threads`)\\r\\n    await ns.hack(target, { threads, stock: true })\\r\\n    ns.exit()\\r\\n  }\\r\\n  \",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"pserv-131072-e6bcce5a-62ab-4bba-9620-1cfc5c3fa092\",\"moduleSequenceNumber\":85325,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/export async function main(ns) {\\r\\n    const target = ns.args[0]\\r\\n    const threads = ns.args[1]\\r\\n    const delay = ns.args[2]\\r\\n  \\r\\n    if (delay && delay > 0) {\\r\\n      await ns.sleep(delay)\\r\\n    }\\r\\n  \\r\\n    ns.print(`Starting operation: grow on ${target} in ${threads} threads`)\\r\\n    await ns.grow(target, { threads, stock: true })\\r\\n    ns.exit()\\r\\n  }\\r\\n  \",\"filename\":\"grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:https://danielyxie.github.io/9525153e-7227-4c8f-8620-d387c39af984\",\"moduleSequenceNumber\":85372}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"pserv-131072-e6bcce5a-62ab-4bba-9620-1cfc5c3fa092\",\"moduleSequenceNumber\":85372,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/export async function main(ns) {\\r\\n    const target = ns.args[0]\\r\\n    const threads = ns.args[1]\\r\\n    const delay = ns.args[2]\\r\\n  \\r\\n    if (delay && delay > 0) {\\r\\n      await ns.sleep(delay)\\r\\n    }\\r\\n  \\r\\n    ns.print(`Starting operation: weaken on ${target} in ${threads} threads`)\\r\\n    await ns.weaken(target, { threads, stock: true })\\r\\n    ns.exit()\\r\\n  }\\r\\n  \",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"pserv-131072-e6bcce5a-62ab-4bba-9620-1cfc5c3fa092\",\"moduleSequenceNumber\":85327,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-131072-900f4642-58af-41ce-96d1-7be15c9e7d3e\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-131072-900f4642-58af-41ce-96d1-7be15c9e7d3e\",\"httpPortOpen\":false,\"ip\":\"80.1.8.7\",\"isConnectedTo\":false,\"maxRam\":131072,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":131071.5,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"global-pharm\",74898,52231.129359065264,\"97038099-b462-4ff8-91b5-fb14b58d06ee\"],\"dataMap\":{},\"filename\":\"grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":740.6100000000025,\"pid\":1259,\"ramUsage\":1.75,\"server\":\"pserv-131072-900f4642-58af-41ce-96d1-7be15c9e7d3e\",\"threads\":74898,\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:https://danielyxie.github.io/470b9de7-358e-4a70-86bc-fc4d00ce313a\",\"moduleSequenceNumber\":85373}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/export async function main(ns) {\\r\\n    const target = ns.args[0]\\r\\n    const threads = ns.args[1]\\r\\n    const delay = ns.args[2]\\r\\n  \\r\\n    if (delay && delay > 0) {\\r\\n      await ns.sleep(delay)\\r\\n    }\\r\\n  \\r\\n    ns.print(`Starting operation: hack on ${target} in ${threads} threads`)\\r\\n    await ns.hack(target, { threads, stock: true })\\r\\n    ns.exit()\\r\\n  }\\r\\n  \",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"pserv-131072-900f4642-58af-41ce-96d1-7be15c9e7d3e\",\"moduleSequenceNumber\":85331,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/export async function main(ns) {\\r\\n    const target = ns.args[0]\\r\\n    const threads = ns.args[1]\\r\\n    const delay = ns.args[2]\\r\\n  \\r\\n    if (delay && delay > 0) {\\r\\n      await ns.sleep(delay)\\r\\n    }\\r\\n  \\r\\n    ns.print(`Starting operation: grow on ${target} in ${threads} threads`)\\r\\n    await ns.grow(target, { threads, stock: true })\\r\\n    ns.exit()\\r\\n  }\\r\\n  \",\"filename\":\"grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:https://danielyxie.github.io/470b9de7-358e-4a70-86bc-fc4d00ce313a\",\"moduleSequenceNumber\":85373}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"pserv-131072-900f4642-58af-41ce-96d1-7be15c9e7d3e\",\"moduleSequenceNumber\":85373,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/export async function main(ns) {\\r\\n    const target = ns.args[0]\\r\\n    const threads = ns.args[1]\\r\\n    const delay = ns.args[2]\\r\\n  \\r\\n    if (delay && delay > 0) {\\r\\n      await ns.sleep(delay)\\r\\n    }\\r\\n  \\r\\n    ns.print(`Starting operation: weaken on ${target} in ${threads} threads`)\\r\\n    await ns.weaken(target, { threads, stock: true })\\r\\n    ns.exit()\\r\\n  }\\r\\n  \",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"pserv-131072-900f4642-58af-41ce-96d1-7be15c9e7d3e\",\"moduleSequenceNumber\":85333,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-131072-70ff92b9-cb95-4b3a-bc94-2885a60aedd6\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-131072-70ff92b9-cb95-4b3a-bc94-2885a60aedd6\",\"httpPortOpen\":false,\"ip\":\"71.9.5.5\",\"isConnectedTo\":false,\"maxRam\":131072,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":131071.5,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"global-pharm\",74898,52231.129359065264,\"925ccc0b-f830-4b56-a7b0-2921ae18c8ee\"],\"dataMap\":{},\"filename\":\"grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":740.6100000000025,\"pid\":1260,\"ramUsage\":1.75,\"server\":\"pserv-131072-70ff92b9-cb95-4b3a-bc94-2885a60aedd6\",\"threads\":74898,\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:https://danielyxie.github.io/0754262f-e3bf-4abc-8802-7549bc1de20f\",\"moduleSequenceNumber\":85374}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/export async function main(ns) {\\r\\n    const target = ns.args[0]\\r\\n    const threads = ns.args[1]\\r\\n    const delay = ns.args[2]\\r\\n  \\r\\n    if (delay && delay > 0) {\\r\\n      await ns.sleep(delay)\\r\\n    }\\r\\n  \\r\\n    ns.print(`Starting operation: hack on ${target} in ${threads} threads`)\\r\\n    await ns.hack(target, { threads, stock: true })\\r\\n    ns.exit()\\r\\n  }\\r\\n  \",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"pserv-131072-70ff92b9-cb95-4b3a-bc94-2885a60aedd6\",\"moduleSequenceNumber\":85337,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/export async function main(ns) {\\r\\n    const target = ns.args[0]\\r\\n    const threads = ns.args[1]\\r\\n    const delay = ns.args[2]\\r\\n  \\r\\n    if (delay && delay > 0) {\\r\\n      await ns.sleep(delay)\\r\\n    }\\r\\n  \\r\\n    ns.print(`Starting operation: grow on ${target} in ${threads} threads`)\\r\\n    await ns.grow(target, { threads, stock: true })\\r\\n    ns.exit()\\r\\n  }\\r\\n  \",\"filename\":\"grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:https://danielyxie.github.io/0754262f-e3bf-4abc-8802-7549bc1de20f\",\"moduleSequenceNumber\":85374}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"pserv-131072-70ff92b9-cb95-4b3a-bc94-2885a60aedd6\",\"moduleSequenceNumber\":85374,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/export async function main(ns) {\\r\\n    const target = ns.args[0]\\r\\n    const threads = ns.args[1]\\r\\n    const delay = ns.args[2]\\r\\n  \\r\\n    if (delay && delay > 0) {\\r\\n      await ns.sleep(delay)\\r\\n    }\\r\\n  \\r\\n    ns.print(`Starting operation: weaken on ${target} in ${threads} threads`)\\r\\n    await ns.weaken(target, { threads, stock: true })\\r\\n    ns.exit()\\r\\n  }\\r\\n  \",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"pserv-131072-70ff92b9-cb95-4b3a-bc94-2885a60aedd6\",\"moduleSequenceNumber\":85339,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-131072-65c9cecc-0476-452a-8909-70bb5acc0279\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-131072-65c9cecc-0476-452a-8909-70bb5acc0279\",\"httpPortOpen\":false,\"ip\":\"84.2.1.0\",\"isConnectedTo\":false,\"maxRam\":131072,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":131071.5,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"global-pharm\",74898,52231.129359065264,\"6cffcb23-cf0e-4f2c-87eb-55f8b5e0621f\"],\"dataMap\":{},\"filename\":\"grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":740.6100000000025,\"pid\":1261,\"ramUsage\":1.75,\"server\":\"pserv-131072-65c9cecc-0476-452a-8909-70bb5acc0279\",\"threads\":74898,\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:https://danielyxie.github.io/68702c44-4e3b-4f86-847d-0d7b8cf7d1af\",\"moduleSequenceNumber\":85375}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/export async function main(ns) {\\r\\n    const target = ns.args[0]\\r\\n    const threads = ns.args[1]\\r\\n    const delay = ns.args[2]\\r\\n  \\r\\n    if (delay && delay > 0) {\\r\\n      await ns.sleep(delay)\\r\\n    }\\r\\n  \\r\\n    ns.print(`Starting operation: hack on ${target} in ${threads} threads`)\\r\\n    await ns.hack(target, { threads, stock: true })\\r\\n    ns.exit()\\r\\n  }\\r\\n  \",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"pserv-131072-65c9cecc-0476-452a-8909-70bb5acc0279\",\"moduleSequenceNumber\":85343,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/export async function main(ns) {\\r\\n    const target = ns.args[0]\\r\\n    const threads = ns.args[1]\\r\\n    const delay = ns.args[2]\\r\\n  \\r\\n    if (delay && delay > 0) {\\r\\n      await ns.sleep(delay)\\r\\n    }\\r\\n  \\r\\n    ns.print(`Starting operation: grow on ${target} in ${threads} threads`)\\r\\n    await ns.grow(target, { threads, stock: true })\\r\\n    ns.exit()\\r\\n  }\\r\\n  \",\"filename\":\"grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:https://danielyxie.github.io/68702c44-4e3b-4f86-847d-0d7b8cf7d1af\",\"moduleSequenceNumber\":85375}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"pserv-131072-65c9cecc-0476-452a-8909-70bb5acc0279\",\"moduleSequenceNumber\":85375,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/export async function main(ns) {\\r\\n    const target = ns.args[0]\\r\\n    const threads = ns.args[1]\\r\\n    const delay = ns.args[2]\\r\\n  \\r\\n    if (delay && delay > 0) {\\r\\n      await ns.sleep(delay)\\r\\n    }\\r\\n  \\r\\n    ns.print(`Starting operation: weaken on ${target} in ${threads} threads`)\\r\\n    await ns.weaken(target, { threads, stock: true })\\r\\n    ns.exit()\\r\\n  }\\r\\n  \",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"pserv-131072-65c9cecc-0476-452a-8909-70bb5acc0279\",\"moduleSequenceNumber\":85345,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-131072-8871ac41-1781-4029-89ef-7b85fd7af779\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-131072-8871ac41-1781-4029-89ef-7b85fd7af779\",\"httpPortOpen\":false,\"ip\":\"22.7.6.7\",\"isConnectedTo\":false,\"maxRam\":131072,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":131071.5,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"global-pharm\",74898,52231.129359065264,\"ff8d5e93-d3b5-4e3c-b45e-e0f8569aa915\"],\"dataMap\":{},\"filename\":\"grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":740.6100000000025,\"pid\":1262,\"ramUsage\":1.75,\"server\":\"pserv-131072-8871ac41-1781-4029-89ef-7b85fd7af779\",\"threads\":74898,\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:https://danielyxie.github.io/e7410ff8-5c0c-4703-80c1-1fef49f7b724\",\"moduleSequenceNumber\":85376}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/export async function main(ns) {\\r\\n    const target = ns.args[0]\\r\\n    const threads = ns.args[1]\\r\\n    const delay = ns.args[2]\\r\\n  \\r\\n    if (delay && delay > 0) {\\r\\n      await ns.sleep(delay)\\r\\n    }\\r\\n  \\r\\n    ns.print(`Starting operation: hack on ${target} in ${threads} threads`)\\r\\n    await ns.hack(target, { threads, stock: true })\\r\\n    ns.exit()\\r\\n  }\\r\\n  \",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"pserv-131072-8871ac41-1781-4029-89ef-7b85fd7af779\",\"moduleSequenceNumber\":85349,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/export async function main(ns) {\\r\\n    const target = ns.args[0]\\r\\n    const threads = ns.args[1]\\r\\n    const delay = ns.args[2]\\r\\n  \\r\\n    if (delay && delay > 0) {\\r\\n      await ns.sleep(delay)\\r\\n    }\\r\\n  \\r\\n    ns.print(`Starting operation: grow on ${target} in ${threads} threads`)\\r\\n    await ns.grow(target, { threads, stock: true })\\r\\n    ns.exit()\\r\\n  }\\r\\n  \",\"filename\":\"grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:https://danielyxie.github.io/e7410ff8-5c0c-4703-80c1-1fef49f7b724\",\"moduleSequenceNumber\":85376}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"pserv-131072-8871ac41-1781-4029-89ef-7b85fd7af779\",\"moduleSequenceNumber\":85376,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/export async function main(ns) {\\r\\n    const target = ns.args[0]\\r\\n    const threads = ns.args[1]\\r\\n    const delay = ns.args[2]\\r\\n  \\r\\n    if (delay && delay > 0) {\\r\\n      await ns.sleep(delay)\\r\\n    }\\r\\n  \\r\\n    ns.print(`Starting operation: weaken on ${target} in ${threads} threads`)\\r\\n    await ns.weaken(target, { threads, stock: true })\\r\\n    ns.exit()\\r\\n  }\\r\\n  \",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"pserv-131072-8871ac41-1781-4029-89ef-7b85fd7af779\",\"moduleSequenceNumber\":85351,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-131072-e00825b2-a07b-4294-99fc-5412b5e45220\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-131072-e00825b2-a07b-4294-99fc-5412b5e45220\",\"httpPortOpen\":false,\"ip\":\"62.4.6.4\",\"isConnectedTo\":false,\"maxRam\":131072,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":131071.5,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"global-pharm\",74898,52231.129359065264,\"444fe468-55ca-4d7d-a3d4-756559b32c0a\"],\"dataMap\":{},\"filename\":\"grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":740.6100000000025,\"pid\":1263,\"ramUsage\":1.75,\"server\":\"pserv-131072-e00825b2-a07b-4294-99fc-5412b5e45220\",\"threads\":74898,\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:https://danielyxie.github.io/b380f60e-9c6c-43e0-a746-26508a640378\",\"moduleSequenceNumber\":85377}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/export async function main(ns) {\\r\\n    const target = ns.args[0]\\r\\n    const threads = ns.args[1]\\r\\n    const delay = ns.args[2]\\r\\n  \\r\\n    if (delay && delay > 0) {\\r\\n      await ns.sleep(delay)\\r\\n    }\\r\\n  \\r\\n    ns.print(`Starting operation: hack on ${target} in ${threads} threads`)\\r\\n    await ns.hack(target, { threads, stock: true })\\r\\n    ns.exit()\\r\\n  }\\r\\n  \",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"pserv-131072-e00825b2-a07b-4294-99fc-5412b5e45220\",\"moduleSequenceNumber\":85355,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/export async function main(ns) {\\r\\n    const target = ns.args[0]\\r\\n    const threads = ns.args[1]\\r\\n    const delay = ns.args[2]\\r\\n  \\r\\n    if (delay && delay > 0) {\\r\\n      await ns.sleep(delay)\\r\\n    }\\r\\n  \\r\\n    ns.print(`Starting operation: grow on ${target} in ${threads} threads`)\\r\\n    await ns.grow(target, { threads, stock: true })\\r\\n    ns.exit()\\r\\n  }\\r\\n  \",\"filename\":\"grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:https://danielyxie.github.io/b380f60e-9c6c-43e0-a746-26508a640378\",\"moduleSequenceNumber\":85377}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"pserv-131072-e00825b2-a07b-4294-99fc-5412b5e45220\",\"moduleSequenceNumber\":85377,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/export async function main(ns) {\\r\\n    const target = ns.args[0]\\r\\n    const threads = ns.args[1]\\r\\n    const delay = ns.args[2]\\r\\n  \\r\\n    if (delay && delay > 0) {\\r\\n      await ns.sleep(delay)\\r\\n    }\\r\\n  \\r\\n    ns.print(`Starting operation: weaken on ${target} in ${threads} threads`)\\r\\n    await ns.weaken(target, { threads, stock: true })\\r\\n    ns.exit()\\r\\n  }\\r\\n  \",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:https://danielyxie.github.io/e4ef0da8-0c22-4dd9-8b8b-16b632460a74\",\"moduleSequenceNumber\":85378}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"pserv-131072-e00825b2-a07b-4294-99fc-5412b5e45220\",\"moduleSequenceNumber\":85378,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-131072-29297cc7-5dd7-40c5-9aec-4ad42bde272c\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-131072-29297cc7-5dd7-40c5-9aec-4ad42bde272c\",\"httpPortOpen\":false,\"ip\":\"44.1.8.5\",\"isConnectedTo\":false,\"maxRam\":131072,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":131071.5,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"global-pharm\",74898,52231.129359065264,\"92825bef-e718-46e4-9f4e-f30e29e771fb\"],\"dataMap\":{},\"filename\":\"grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":740.6100000000025,\"pid\":1264,\"ramUsage\":1.75,\"server\":\"pserv-131072-29297cc7-5dd7-40c5-9aec-4ad42bde272c\",\"threads\":74898,\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:https://danielyxie.github.io/9a8e3f1f-0df2-41e0-95ba-3d23b573a92f\",\"moduleSequenceNumber\":85392}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/export async function main(ns) {\\r\\n    const target = ns.args[0]\\r\\n    const threads = ns.args[1]\\r\\n    const delay = ns.args[2]\\r\\n  \\r\\n    if (delay && delay > 0) {\\r\\n      await ns.sleep(delay)\\r\\n    }\\r\\n  \\r\\n    ns.print(`Starting operation: hack on ${target} in ${threads} threads`)\\r\\n    await ns.hack(target, { threads, stock: true })\\r\\n    ns.exit()\\r\\n  }\\r\\n  \",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"pserv-131072-29297cc7-5dd7-40c5-9aec-4ad42bde272c\",\"moduleSequenceNumber\":85361,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/export async function main(ns) {\\r\\n    const target = ns.args[0]\\r\\n    const threads = ns.args[1]\\r\\n    const delay = ns.args[2]\\r\\n  \\r\\n    if (delay && delay > 0) {\\r\\n      await ns.sleep(delay)\\r\\n    }\\r\\n  \\r\\n    ns.print(`Starting operation: grow on ${target} in ${threads} threads`)\\r\\n    await ns.grow(target, { threads, stock: true })\\r\\n    ns.exit()\\r\\n  }\\r\\n  \",\"filename\":\"grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:https://danielyxie.github.io/9a8e3f1f-0df2-41e0-95ba-3d23b573a92f\",\"moduleSequenceNumber\":85392}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"pserv-131072-29297cc7-5dd7-40c5-9aec-4ad42bde272c\",\"moduleSequenceNumber\":85392,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/export async function main(ns) {\\r\\n    const target = ns.args[0]\\r\\n    const threads = ns.args[1]\\r\\n    const delay = ns.args[2]\\r\\n  \\r\\n    if (delay && delay > 0) {\\r\\n      await ns.sleep(delay)\\r\\n    }\\r\\n  \\r\\n    ns.print(`Starting operation: weaken on ${target} in ${threads} threads`)\\r\\n    await ns.weaken(target, { threads, stock: true })\\r\\n    ns.exit()\\r\\n  }\\r\\n  \",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:https://danielyxie.github.io/e0959a10-05ff-4508-a18d-72d01f3ed718\",\"moduleSequenceNumber\":85379}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"pserv-131072-29297cc7-5dd7-40c5-9aec-4ad42bde272c\",\"moduleSequenceNumber\":85379,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-131072-fcffe25e-59ae-4dfa-b83b-a0a18d68d200\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-131072-fcffe25e-59ae-4dfa-b83b-a0a18d68d200\",\"httpPortOpen\":false,\"ip\":\"38.6.6.2\",\"isConnectedTo\":false,\"maxRam\":131072,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":131071.5,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"global-pharm\",74898,52231.129359065264,\"8417249b-b349-4912-ab69-85cd44759a38\"],\"dataMap\":{},\"filename\":\"grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":740.6100000000025,\"pid\":1265,\"ramUsage\":1.75,\"server\":\"pserv-131072-fcffe25e-59ae-4dfa-b83b-a0a18d68d200\",\"threads\":74898,\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:https://danielyxie.github.io/2a0c9e1d-9d7f-43a7-9c1c-8756209c645b\",\"moduleSequenceNumber\":85393}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/export async function main(ns) {\\r\\n    const target = ns.args[0]\\r\\n    const threads = ns.args[1]\\r\\n    const delay = ns.args[2]\\r\\n  \\r\\n    if (delay && delay > 0) {\\r\\n      await ns.sleep(delay)\\r\\n    }\\r\\n  \\r\\n    ns.print(`Starting operation: hack on ${target} in ${threads} threads`)\\r\\n    await ns.hack(target, { threads, stock: true })\\r\\n    ns.exit()\\r\\n  }\\r\\n  \",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"pserv-131072-fcffe25e-59ae-4dfa-b83b-a0a18d68d200\",\"moduleSequenceNumber\":85383,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/export async function main(ns) {\\r\\n    const target = ns.args[0]\\r\\n    const threads = ns.args[1]\\r\\n    const delay = ns.args[2]\\r\\n  \\r\\n    if (delay && delay > 0) {\\r\\n      await ns.sleep(delay)\\r\\n    }\\r\\n  \\r\\n    ns.print(`Starting operation: grow on ${target} in ${threads} threads`)\\r\\n    await ns.grow(target, { threads, stock: true })\\r\\n    ns.exit()\\r\\n  }\\r\\n  \",\"filename\":\"grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:https://danielyxie.github.io/2a0c9e1d-9d7f-43a7-9c1c-8756209c645b\",\"moduleSequenceNumber\":85393}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"pserv-131072-fcffe25e-59ae-4dfa-b83b-a0a18d68d200\",\"moduleSequenceNumber\":85393,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/export async function main(ns) {\\r\\n    const target = ns.args[0]\\r\\n    const threads = ns.args[1]\\r\\n    const delay = ns.args[2]\\r\\n  \\r\\n    if (delay && delay > 0) {\\r\\n      await ns.sleep(delay)\\r\\n    }\\r\\n  \\r\\n    ns.print(`Starting operation: weaken on ${target} in ${threads} threads`)\\r\\n    await ns.weaken(target, { threads, stock: true })\\r\\n    ns.exit()\\r\\n  }\\r\\n  \",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:https://danielyxie.github.io/cf288443-c7c2-4ffd-bf5f-c1cbb4c01c9c\",\"moduleSequenceNumber\":85394}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"pserv-131072-fcffe25e-59ae-4dfa-b83b-a0a18d68d200\",\"moduleSequenceNumber\":85394,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-131072-33574fa9-038a-4898-822b-c8cbe485ac05\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-131072-33574fa9-038a-4898-822b-c8cbe485ac05\",\"httpPortOpen\":false,\"ip\":\"66.3.7.5\",\"isConnectedTo\":false,\"maxRam\":131072,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":131071.5,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"global-pharm\",74898,52231.129359065264,\"d1a83d73-f054-4783-ad66-dfe02fdff251\"],\"dataMap\":{},\"filename\":\"grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":740.6100000000025,\"pid\":1266,\"ramUsage\":1.75,\"server\":\"pserv-131072-33574fa9-038a-4898-822b-c8cbe485ac05\",\"threads\":74898,\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:https://danielyxie.github.io/646faf8f-b4c3-4903-b8d8-cdcc5cd45531\",\"moduleSequenceNumber\":85414}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/export async function main(ns) {\\r\\n    const target = ns.args[0]\\r\\n    const threads = ns.args[1]\\r\\n    const delay = ns.args[2]\\r\\n  \\r\\n    if (delay && delay > 0) {\\r\\n      await ns.sleep(delay)\\r\\n    }\\r\\n  \\r\\n    ns.print(`Starting operation: hack on ${target} in ${threads} threads`)\\r\\n    await ns.hack(target, { threads, stock: true })\\r\\n    ns.exit()\\r\\n  }\\r\\n  \",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"pserv-131072-33574fa9-038a-4898-822b-c8cbe485ac05\",\"moduleSequenceNumber\":85389,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/export async function main(ns) {\\r\\n    const target = ns.args[0]\\r\\n    const threads = ns.args[1]\\r\\n    const delay = ns.args[2]\\r\\n  \\r\\n    if (delay && delay > 0) {\\r\\n      await ns.sleep(delay)\\r\\n    }\\r\\n  \\r\\n    ns.print(`Starting operation: grow on ${target} in ${threads} threads`)\\r\\n    await ns.grow(target, { threads, stock: true })\\r\\n    ns.exit()\\r\\n  }\\r\\n  \",\"filename\":\"grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:https://danielyxie.github.io/646faf8f-b4c3-4903-b8d8-cdcc5cd45531\",\"moduleSequenceNumber\":85414}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"pserv-131072-33574fa9-038a-4898-822b-c8cbe485ac05\",\"moduleSequenceNumber\":85414,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/export async function main(ns) {\\r\\n    const target = ns.args[0]\\r\\n    const threads = ns.args[1]\\r\\n    const delay = ns.args[2]\\r\\n  \\r\\n    if (delay && delay > 0) {\\r\\n      await ns.sleep(delay)\\r\\n    }\\r\\n  \\r\\n    ns.print(`Starting operation: weaken on ${target} in ${threads} threads`)\\r\\n    await ns.weaken(target, { threads, stock: true })\\r\\n    ns.exit()\\r\\n  }\\r\\n  \",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:https://danielyxie.github.io/eac44849-5183-4327-bd11-7adbca4c41cc\",\"moduleSequenceNumber\":85395}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"pserv-131072-33574fa9-038a-4898-822b-c8cbe485ac05\",\"moduleSequenceNumber\":85395,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-131072-3d114e03-3ac5-4249-b509-2b0adee0c50b\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-131072-3d114e03-3ac5-4249-b509-2b0adee0c50b\",\"httpPortOpen\":false,\"ip\":\"77.5.1.1\",\"isConnectedTo\":false,\"maxRam\":131072,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":131071.5,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"global-pharm\",74898,52231.129359065264,\"2557eba7-c914-4561-b754-91f5645f2fc8\"],\"dataMap\":{},\"filename\":\"grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":740.6100000000025,\"pid\":1267,\"ramUsage\":1.75,\"server\":\"pserv-131072-3d114e03-3ac5-4249-b509-2b0adee0c50b\",\"threads\":74898,\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:https://danielyxie.github.io/2314570d-05f5-4c71-b31a-565ee0e7a8a7\",\"moduleSequenceNumber\":85415}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/export async function main(ns) {\\r\\n    const target = ns.args[0]\\r\\n    const threads = ns.args[1]\\r\\n    const delay = ns.args[2]\\r\\n  \\r\\n    if (delay && delay > 0) {\\r\\n      await ns.sleep(delay)\\r\\n    }\\r\\n  \\r\\n    ns.print(`Starting operation: hack on ${target} in ${threads} threads`)\\r\\n    await ns.hack(target, { threads, stock: true })\\r\\n    ns.exit()\\r\\n  }\\r\\n  \",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"pserv-131072-3d114e03-3ac5-4249-b509-2b0adee0c50b\",\"moduleSequenceNumber\":85399,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/export async function main(ns) {\\r\\n    const target = ns.args[0]\\r\\n    const threads = ns.args[1]\\r\\n    const delay = ns.args[2]\\r\\n  \\r\\n    if (delay && delay > 0) {\\r\\n      await ns.sleep(delay)\\r\\n    }\\r\\n  \\r\\n    ns.print(`Starting operation: grow on ${target} in ${threads} threads`)\\r\\n    await ns.grow(target, { threads, stock: true })\\r\\n    ns.exit()\\r\\n  }\\r\\n  \",\"filename\":\"grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:https://danielyxie.github.io/2314570d-05f5-4c71-b31a-565ee0e7a8a7\",\"moduleSequenceNumber\":85415}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"pserv-131072-3d114e03-3ac5-4249-b509-2b0adee0c50b\",\"moduleSequenceNumber\":85415,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/export async function main(ns) {\\r\\n    const target = ns.args[0]\\r\\n    const threads = ns.args[1]\\r\\n    const delay = ns.args[2]\\r\\n  \\r\\n    if (delay && delay > 0) {\\r\\n      await ns.sleep(delay)\\r\\n    }\\r\\n  \\r\\n    ns.print(`Starting operation: weaken on ${target} in ${threads} threads`)\\r\\n    await ns.weaken(target, { threads, stock: true })\\r\\n    ns.exit()\\r\\n  }\\r\\n  \",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:https://danielyxie.github.io/07f5f39f-965b-493f-8352-d83e22413baa\",\"moduleSequenceNumber\":85416}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"pserv-131072-3d114e03-3ac5-4249-b509-2b0adee0c50b\",\"moduleSequenceNumber\":85416,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-131072-e7c32ade-b5bb-4c65-8cc4-04cd9bd29299\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-131072-e7c32ade-b5bb-4c65-8cc4-04cd9bd29299\",\"httpPortOpen\":false,\"ip\":\"11.0.7.4\",\"isConnectedTo\":false,\"maxRam\":131072,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":131071.5,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"global-pharm\",74898,52231.129359065264,\"47190562-34fe-4999-8dc4-8e504ccbdf39\"],\"dataMap\":{},\"filename\":\"grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":740.6100000000025,\"pid\":1268,\"ramUsage\":1.75,\"server\":\"pserv-131072-e7c32ade-b5bb-4c65-8cc4-04cd9bd29299\",\"threads\":74898,\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:https://danielyxie.github.io/c96ba5ab-51a9-48c5-bf02-bdafd0cacab4\",\"moduleSequenceNumber\":85431}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/export async function main(ns) {\\r\\n    const target = ns.args[0]\\r\\n    const threads = ns.args[1]\\r\\n    const delay = ns.args[2]\\r\\n  \\r\\n    if (delay && delay > 0) {\\r\\n      await ns.sleep(delay)\\r\\n    }\\r\\n  \\r\\n    ns.print(`Starting operation: hack on ${target} in ${threads} threads`)\\r\\n    await ns.hack(target, { threads, stock: true })\\r\\n    ns.exit()\\r\\n  }\\r\\n  \",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"pserv-131072-e7c32ade-b5bb-4c65-8cc4-04cd9bd29299\",\"moduleSequenceNumber\":85405,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/export async function main(ns) {\\r\\n    const target = ns.args[0]\\r\\n    const threads = ns.args[1]\\r\\n    const delay = ns.args[2]\\r\\n  \\r\\n    if (delay && delay > 0) {\\r\\n      await ns.sleep(delay)\\r\\n    }\\r\\n  \\r\\n    ns.print(`Starting operation: grow on ${target} in ${threads} threads`)\\r\\n    await ns.grow(target, { threads, stock: true })\\r\\n    ns.exit()\\r\\n  }\\r\\n  \",\"filename\":\"grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:https://danielyxie.github.io/c96ba5ab-51a9-48c5-bf02-bdafd0cacab4\",\"moduleSequenceNumber\":85431}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"pserv-131072-e7c32ade-b5bb-4c65-8cc4-04cd9bd29299\",\"moduleSequenceNumber\":85431,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/export async function main(ns) {\\r\\n    const target = ns.args[0]\\r\\n    const threads = ns.args[1]\\r\\n    const delay = ns.args[2]\\r\\n  \\r\\n    if (delay && delay > 0) {\\r\\n      await ns.sleep(delay)\\r\\n    }\\r\\n  \\r\\n    ns.print(`Starting operation: weaken on ${target} in ${threads} threads`)\\r\\n    await ns.weaken(target, { threads, stock: true })\\r\\n    ns.exit()\\r\\n  }\\r\\n  \",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:https://danielyxie.github.io/f39e4a30-8e64-40e5-9efc-5d25870914c2\",\"moduleSequenceNumber\":85417}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"pserv-131072-e7c32ade-b5bb-4c65-8cc4-04cd9bd29299\",\"moduleSequenceNumber\":85417,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-131072-594fe177-d75e-4c37-8e3a-2062b1828721\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-131072-594fe177-d75e-4c37-8e3a-2062b1828721\",\"httpPortOpen\":false,\"ip\":\"96.3.7.7\",\"isConnectedTo\":false,\"maxRam\":131072,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":131071.5,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"global-pharm\",74898,52231.129359065264,\"7775323a-34b7-4a09-a80c-d4c5a3f5b93e\"],\"dataMap\":{},\"filename\":\"grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":740.6100000000025,\"pid\":1269,\"ramUsage\":1.75,\"server\":\"pserv-131072-594fe177-d75e-4c37-8e3a-2062b1828721\",\"threads\":74898,\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:https://danielyxie.github.io/4f2bfb17-7b9b-4a1d-b51d-8366d4f9bbed\",\"moduleSequenceNumber\":85432}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/export async function main(ns) {\\r\\n    const target = ns.args[0]\\r\\n    const threads = ns.args[1]\\r\\n    const delay = ns.args[2]\\r\\n  \\r\\n    if (delay && delay > 0) {\\r\\n      await ns.sleep(delay)\\r\\n    }\\r\\n  \\r\\n    ns.print(`Starting operation: hack on ${target} in ${threads} threads`)\\r\\n    await ns.hack(target, { threads, stock: true })\\r\\n    ns.exit()\\r\\n  }\\r\\n  \",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"pserv-131072-594fe177-d75e-4c37-8e3a-2062b1828721\",\"moduleSequenceNumber\":85411,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/export async function main(ns) {\\r\\n    const target = ns.args[0]\\r\\n    const threads = ns.args[1]\\r\\n    const delay = ns.args[2]\\r\\n  \\r\\n    if (delay && delay > 0) {\\r\\n      await ns.sleep(delay)\\r\\n    }\\r\\n  \\r\\n    ns.print(`Starting operation: grow on ${target} in ${threads} threads`)\\r\\n    await ns.grow(target, { threads, stock: true })\\r\\n    ns.exit()\\r\\n  }\\r\\n  \",\"filename\":\"grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:https://danielyxie.github.io/4f2bfb17-7b9b-4a1d-b51d-8366d4f9bbed\",\"moduleSequenceNumber\":85432}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"pserv-131072-594fe177-d75e-4c37-8e3a-2062b1828721\",\"moduleSequenceNumber\":85432,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/export async function main(ns) {\\r\\n    const target = ns.args[0]\\r\\n    const threads = ns.args[1]\\r\\n    const delay = ns.args[2]\\r\\n  \\r\\n    if (delay && delay > 0) {\\r\\n      await ns.sleep(delay)\\r\\n    }\\r\\n  \\r\\n    ns.print(`Starting operation: weaken on ${target} in ${threads} threads`)\\r\\n    await ns.weaken(target, { threads, stock: true })\\r\\n    ns.exit()\\r\\n  }\\r\\n  \",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:https://danielyxie.github.io/54403f91-2a55-4b81-9f81-64438d09ffc8\",\"moduleSequenceNumber\":85418}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"pserv-131072-594fe177-d75e-4c37-8e3a-2062b1828721\",\"moduleSequenceNumber\":85418,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-524288-b391dd6c-b134-4a45-8dba-51d4f32ab5b7\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-524288-b391dd6c-b134-4a45-8dba-51d4f32ab5b7\",\"httpPortOpen\":false,\"ip\":\"55.9.9.6\",\"isConnectedTo\":false,\"maxRam\":524288,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":524287.75,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"global-pharm\",299593,52231.129359065264,\"3065dd32-9e22-4901-9d5d-aee0df6a7bb0\"],\"dataMap\":{},\"filename\":\"grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":740.6100000000025,\"pid\":1270,\"ramUsage\":1.75,\"server\":\"pserv-524288-b391dd6c-b134-4a45-8dba-51d4f32ab5b7\",\"threads\":299593,\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:https://danielyxie.github.io/4a3b30db-b1dc-4e93-8b03-01b78bd7a3fe\",\"moduleSequenceNumber\":85433}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/export async function main(ns) {\\r\\n    const target = ns.args[0]\\r\\n    const threads = ns.args[1]\\r\\n    const delay = ns.args[2]\\r\\n  \\r\\n    if (delay && delay > 0) {\\r\\n      await ns.sleep(delay)\\r\\n    }\\r\\n  \\r\\n    ns.print(`Starting operation: hack on ${target} in ${threads} threads`)\\r\\n    await ns.hack(target, { threads, stock: true })\\r\\n    ns.exit()\\r\\n  }\\r\\n  \",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"pserv-524288-b391dd6c-b134-4a45-8dba-51d4f32ab5b7\",\"moduleSequenceNumber\":85422,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/export async function main(ns) {\\r\\n    const target = ns.args[0]\\r\\n    const threads = ns.args[1]\\r\\n    const delay = ns.args[2]\\r\\n  \\r\\n    if (delay && delay > 0) {\\r\\n      await ns.sleep(delay)\\r\\n    }\\r\\n  \\r\\n    ns.print(`Starting operation: grow on ${target} in ${threads} threads`)\\r\\n    await ns.grow(target, { threads, stock: true })\\r\\n    ns.exit()\\r\\n  }\\r\\n  \",\"filename\":\"grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:https://danielyxie.github.io/4a3b30db-b1dc-4e93-8b03-01b78bd7a3fe\",\"moduleSequenceNumber\":85433}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"pserv-524288-b391dd6c-b134-4a45-8dba-51d4f32ab5b7\",\"moduleSequenceNumber\":85433,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/export async function main(ns) {\\r\\n    const target = ns.args[0]\\r\\n    const threads = ns.args[1]\\r\\n    const delay = ns.args[2]\\r\\n  \\r\\n    if (delay && delay > 0) {\\r\\n      await ns.sleep(delay)\\r\\n    }\\r\\n  \\r\\n    ns.print(`Starting operation: weaken on ${target} in ${threads} threads`)\\r\\n    await ns.weaken(target, { threads, stock: true })\\r\\n    ns.exit()\\r\\n  }\\r\\n  \",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"pserv-524288-b391dd6c-b134-4a45-8dba-51d4f32ab5b7\",\"moduleSequenceNumber\":85424,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-524288-4c0bd995-0657-436b-a37b-32ddb633b69e\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-524288-4c0bd995-0657-436b-a37b-32ddb633b69e\",\"httpPortOpen\":false,\"ip\":\"5.6.5.1\",\"isConnectedTo\":false,\"maxRam\":524288,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":524287.75,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"global-pharm\",299593,52231.129359065264,\"5586a825-8113-46d8-8eba-bd09bb579e05\"],\"dataMap\":{},\"filename\":\"grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":740.6100000000025,\"pid\":1271,\"ramUsage\":1.75,\"server\":\"pserv-524288-4c0bd995-0657-436b-a37b-32ddb633b69e\",\"threads\":299593,\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:https://danielyxie.github.io/ee0edfdd-29cb-4556-9dab-687a2be30be3\",\"moduleSequenceNumber\":85434}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/export async function main(ns) {\\r\\n    const target = ns.args[0]\\r\\n    const threads = ns.args[1]\\r\\n    const delay = ns.args[2]\\r\\n  \\r\\n    if (delay && delay > 0) {\\r\\n      await ns.sleep(delay)\\r\\n    }\\r\\n  \\r\\n    ns.print(`Starting operation: hack on ${target} in ${threads} threads`)\\r\\n    await ns.hack(target, { threads, stock: true })\\r\\n    ns.exit()\\r\\n  }\\r\\n  \",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"pserv-524288-4c0bd995-0657-436b-a37b-32ddb633b69e\",\"moduleSequenceNumber\":85428,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/export async function main(ns) {\\r\\n    const target = ns.args[0]\\r\\n    const threads = ns.args[1]\\r\\n    const delay = ns.args[2]\\r\\n  \\r\\n    if (delay && delay > 0) {\\r\\n      await ns.sleep(delay)\\r\\n    }\\r\\n  \\r\\n    ns.print(`Starting operation: grow on ${target} in ${threads} threads`)\\r\\n    await ns.grow(target, { threads, stock: true })\\r\\n    ns.exit()\\r\\n  }\\r\\n  \",\"filename\":\"grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:https://danielyxie.github.io/ee0edfdd-29cb-4556-9dab-687a2be30be3\",\"moduleSequenceNumber\":85434}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"pserv-524288-4c0bd995-0657-436b-a37b-32ddb633b69e\",\"moduleSequenceNumber\":85434,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/export async function main(ns) {\\r\\n    const target = ns.args[0]\\r\\n    const threads = ns.args[1]\\r\\n    const delay = ns.args[2]\\r\\n  \\r\\n    if (delay && delay > 0) {\\r\\n      await ns.sleep(delay)\\r\\n    }\\r\\n  \\r\\n    ns.print(`Starting operation: weaken on ${target} in ${threads} threads`)\\r\\n    await ns.weaken(target, { threads, stock: true })\\r\\n    ns.exit()\\r\\n  }\\r\\n  \",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:https://danielyxie.github.io/02484222-479d-41ec-a880-f0d777103143\",\"moduleSequenceNumber\":85435}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"pserv-524288-4c0bd995-0657-436b-a37b-32ddb633b69e\",\"moduleSequenceNumber\":85435,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-524288-c0754e39-1133-463e-b893-742a702ddcb6\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-524288-c0754e39-1133-463e-b893-742a702ddcb6\",\"httpPortOpen\":false,\"ip\":\"94.7.3.7\",\"isConnectedTo\":false,\"maxRam\":524288,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":524287.75,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"global-pharm\",299593,52231.129359065264,\"aa101848-e0d2-42b9-bdfa-c964427b989c\"],\"dataMap\":{},\"filename\":\"grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":740.6100000000025,\"pid\":1272,\"ramUsage\":1.75,\"server\":\"pserv-524288-c0754e39-1133-463e-b893-742a702ddcb6\",\"threads\":299593,\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:https://danielyxie.github.io/83ebaa16-f03a-4119-8555-cf34fbdf4fa4\",\"moduleSequenceNumber\":85442}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/export async function main(ns) {\\r\\n    const target = ns.args[0]\\r\\n    const threads = ns.args[1]\\r\\n    const delay = ns.args[2]\\r\\n  \\r\\n    if (delay && delay > 0) {\\r\\n      await ns.sleep(delay)\\r\\n    }\\r\\n  \\r\\n    ns.print(`Starting operation: hack on ${target} in ${threads} threads`)\\r\\n    await ns.hack(target, { threads, stock: true })\\r\\n    ns.exit()\\r\\n  }\\r\\n  \",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"pserv-524288-c0754e39-1133-463e-b893-742a702ddcb6\",\"moduleSequenceNumber\":85439,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/export async function main(ns) {\\r\\n    const target = ns.args[0]\\r\\n    const threads = ns.args[1]\\r\\n    const delay = ns.args[2]\\r\\n  \\r\\n    if (delay && delay > 0) {\\r\\n      await ns.sleep(delay)\\r\\n    }\\r\\n  \\r\\n    ns.print(`Starting operation: grow on ${target} in ${threads} threads`)\\r\\n    await ns.grow(target, { threads, stock: true })\\r\\n    ns.exit()\\r\\n  }\\r\\n  \",\"filename\":\"grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:https://danielyxie.github.io/83ebaa16-f03a-4119-8555-cf34fbdf4fa4\",\"moduleSequenceNumber\":85442}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"pserv-524288-c0754e39-1133-463e-b893-742a702ddcb6\",\"moduleSequenceNumber\":85442,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/export async function main(ns) {\\r\\n    const target = ns.args[0]\\r\\n    const threads = ns.args[1]\\r\\n    const delay = ns.args[2]\\r\\n  \\r\\n    if (delay && delay > 0) {\\r\\n      await ns.sleep(delay)\\r\\n    }\\r\\n  \\r\\n    ns.print(`Starting operation: weaken on ${target} in ${threads} threads`)\\r\\n    await ns.weaken(target, { threads, stock: true })\\r\\n    ns.exit()\\r\\n  }\\r\\n  \",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:https://danielyxie.github.io/b95264c1-1a3d-47dd-a4b8-ae741112cd2e\",\"moduleSequenceNumber\":85443}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"pserv-524288-c0754e39-1133-463e-b893-742a702ddcb6\",\"moduleSequenceNumber\":85443,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-524288-4336de14-bafc-406a-be8f-f81ce3afa464\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-524288-4336de14-bafc-406a-be8f-f81ce3afa464\",\"httpPortOpen\":false,\"ip\":\"53.2.8.5\",\"isConnectedTo\":false,\"maxRam\":524288,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":524287.75,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"global-pharm\",299593,52231.129359065264,\"f7bad1bb-0164-42f2-b968-16c2db0d65f0\"],\"dataMap\":{},\"filename\":\"grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":740.6100000000025,\"pid\":1273,\"ramUsage\":1.75,\"server\":\"pserv-524288-4336de14-bafc-406a-be8f-f81ce3afa464\",\"threads\":299593,\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:https://danielyxie.github.io/fc9d0b29-e064-4119-9ce2-0e2a0fc7e661\",\"moduleSequenceNumber\":85642}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/export async function main(ns) {\\r\\n    const target = ns.args[0]\\r\\n    const threads = ns.args[1]\\r\\n    const delay = ns.args[2]\\r\\n  \\r\\n    if (delay && delay > 0) {\\r\\n      await ns.sleep(delay)\\r\\n    }\\r\\n  \\r\\n    ns.print(`Starting operation: hack on ${target} in ${threads} threads`)\\r\\n    await ns.hack(target, { threads, stock: true })\\r\\n    ns.exit()\\r\\n  }\\r\\n  \",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"pserv-524288-4336de14-bafc-406a-be8f-f81ce3afa464\",\"moduleSequenceNumber\":85639,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/export async function main(ns) {\\r\\n    const target = ns.args[0]\\r\\n    const threads = ns.args[1]\\r\\n    const delay = ns.args[2]\\r\\n  \\r\\n    if (delay && delay > 0) {\\r\\n      await ns.sleep(delay)\\r\\n    }\\r\\n  \\r\\n    ns.print(`Starting operation: grow on ${target} in ${threads} threads`)\\r\\n    await ns.grow(target, { threads, stock: true })\\r\\n    ns.exit()\\r\\n  }\\r\\n  \",\"filename\":\"grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:https://danielyxie.github.io/fc9d0b29-e064-4119-9ce2-0e2a0fc7e661\",\"moduleSequenceNumber\":85642}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"pserv-524288-4336de14-bafc-406a-be8f-f81ce3afa464\",\"moduleSequenceNumber\":85642,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/export async function main(ns) {\\r\\n    const target = ns.args[0]\\r\\n    const threads = ns.args[1]\\r\\n    const delay = ns.args[2]\\r\\n  \\r\\n    if (delay && delay > 0) {\\r\\n      await ns.sleep(delay)\\r\\n    }\\r\\n  \\r\\n    ns.print(`Starting operation: weaken on ${target} in ${threads} threads`)\\r\\n    await ns.weaken(target, { threads, stock: true })\\r\\n    ns.exit()\\r\\n  }\\r\\n  \",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:https://danielyxie.github.io/8cc11fac-f72a-4e5f-83f9-53c4deaa7c06\",\"moduleSequenceNumber\":85643}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"pserv-524288-4336de14-bafc-406a-be8f-f81ce3afa464\",\"moduleSequenceNumber\":85643,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-524288-3ce61c35-038f-4256-a468-9a4a6a24e857\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-524288-3ce61c35-038f-4256-a468-9a4a6a24e857\",\"httpPortOpen\":false,\"ip\":\"11.2.3.5\",\"isConnectedTo\":false,\"maxRam\":524288,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":524287.75,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"global-pharm\",299593,52231.129359065264,\"39ca6ee5-2de6-423c-a9f7-ce9d7eb00e2d\"],\"dataMap\":{},\"filename\":\"grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":740.6100000000025,\"pid\":1274,\"ramUsage\":1.75,\"server\":\"pserv-524288-3ce61c35-038f-4256-a468-9a4a6a24e857\",\"threads\":299593,\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:https://danielyxie.github.io/d27db05d-358b-445a-afac-1c2ad92bc239\",\"moduleSequenceNumber\":86232}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/export async function main(ns) {\\r\\n    const target = ns.args[0]\\r\\n    const threads = ns.args[1]\\r\\n    const delay = ns.args[2]\\r\\n  \\r\\n    if (delay && delay > 0) {\\r\\n      await ns.sleep(delay)\\r\\n    }\\r\\n  \\r\\n    ns.print(`Starting operation: hack on ${target} in ${threads} threads`)\\r\\n    await ns.hack(target, { threads, stock: true })\\r\\n    ns.exit()\\r\\n  }\\r\\n  \",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"pserv-524288-3ce61c35-038f-4256-a468-9a4a6a24e857\",\"moduleSequenceNumber\":86223,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/export async function main(ns) {\\r\\n    const target = ns.args[0]\\r\\n    const threads = ns.args[1]\\r\\n    const delay = ns.args[2]\\r\\n  \\r\\n    if (delay && delay > 0) {\\r\\n      await ns.sleep(delay)\\r\\n    }\\r\\n  \\r\\n    ns.print(`Starting operation: grow on ${target} in ${threads} threads`)\\r\\n    await ns.grow(target, { threads, stock: true })\\r\\n    ns.exit()\\r\\n  }\\r\\n  \",\"filename\":\"grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:https://danielyxie.github.io/d27db05d-358b-445a-afac-1c2ad92bc239\",\"moduleSequenceNumber\":86232}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"pserv-524288-3ce61c35-038f-4256-a468-9a4a6a24e857\",\"moduleSequenceNumber\":86232,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/export async function main(ns) {\\r\\n    const target = ns.args[0]\\r\\n    const threads = ns.args[1]\\r\\n    const delay = ns.args[2]\\r\\n  \\r\\n    if (delay && delay > 0) {\\r\\n      await ns.sleep(delay)\\r\\n    }\\r\\n  \\r\\n    ns.print(`Starting operation: weaken on ${target} in ${threads} threads`)\\r\\n    await ns.weaken(target, { threads, stock: true })\\r\\n    ns.exit()\\r\\n  }\\r\\n  \",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"pserv-524288-3ce61c35-038f-4256-a468-9a4a6a24e857\",\"moduleSequenceNumber\":86225,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-524288-e0a8d2e3-0a55-43c6-848b-28d0996cf354\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-524288-e0a8d2e3-0a55-43c6-848b-28d0996cf354\",\"httpPortOpen\":false,\"ip\":\"32.5.7.1\",\"isConnectedTo\":false,\"maxRam\":524288,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":524287.75,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"global-pharm\",299593,52231.129359065264,\"1756724d-f57e-4d8b-8302-727f2a2979a2\"],\"dataMap\":{},\"filename\":\"grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":740.6100000000025,\"pid\":1275,\"ramUsage\":1.75,\"server\":\"pserv-524288-e0a8d2e3-0a55-43c6-848b-28d0996cf354\",\"threads\":299593,\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:https://danielyxie.github.io/0206206e-2748-4019-b6db-d07fcdbfe6e1\",\"moduleSequenceNumber\":86233}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/export async function main(ns) {\\r\\n    const target = ns.args[0]\\r\\n    const threads = ns.args[1]\\r\\n    const delay = ns.args[2]\\r\\n  \\r\\n    if (delay && delay > 0) {\\r\\n      await ns.sleep(delay)\\r\\n    }\\r\\n  \\r\\n    ns.print(`Starting operation: hack on ${target} in ${threads} threads`)\\r\\n    await ns.hack(target, { threads, stock: true })\\r\\n    ns.exit()\\r\\n  }\\r\\n  \",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"pserv-524288-e0a8d2e3-0a55-43c6-848b-28d0996cf354\",\"moduleSequenceNumber\":86229,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/export async function main(ns) {\\r\\n    const target = ns.args[0]\\r\\n    const threads = ns.args[1]\\r\\n    const delay = ns.args[2]\\r\\n  \\r\\n    if (delay && delay > 0) {\\r\\n      await ns.sleep(delay)\\r\\n    }\\r\\n  \\r\\n    ns.print(`Starting operation: grow on ${target} in ${threads} threads`)\\r\\n    await ns.grow(target, { threads, stock: true })\\r\\n    ns.exit()\\r\\n  }\\r\\n  \",\"filename\":\"grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:https://danielyxie.github.io/0206206e-2748-4019-b6db-d07fcdbfe6e1\",\"moduleSequenceNumber\":86233}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"pserv-524288-e0a8d2e3-0a55-43c6-848b-28d0996cf354\",\"moduleSequenceNumber\":86233,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/export async function main(ns) {\\r\\n    const target = ns.args[0]\\r\\n    const threads = ns.args[1]\\r\\n    const delay = ns.args[2]\\r\\n  \\r\\n    if (delay && delay > 0) {\\r\\n      await ns.sleep(delay)\\r\\n    }\\r\\n  \\r\\n    ns.print(`Starting operation: weaken on ${target} in ${threads} threads`)\\r\\n    await ns.weaken(target, { threads, stock: true })\\r\\n    ns.exit()\\r\\n  }\\r\\n  \",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:https://danielyxie.github.io/292fc0bc-e516-4a3d-a73a-060df0fc9c8c\",\"moduleSequenceNumber\":86234}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"pserv-524288-e0a8d2e3-0a55-43c6-848b-28d0996cf354\",\"moduleSequenceNumber\":86234,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-524288-505a64da-6899-4d70-82c6-aeaa6b0690f9\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-524288-505a64da-6899-4d70-82c6-aeaa6b0690f9\",\"httpPortOpen\":false,\"ip\":\"52.8.7.7\",\"isConnectedTo\":false,\"maxRam\":524288,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":801.5,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"global-pharm\",458,0,\"2dbb2d43-f3e5-4deb-9009-f134b26fa8cc\"],\"dataMap\":{},\"filename\":\"weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":740.6100000000025,\"pid\":1276,\"ramUsage\":1.75,\"server\":\"pserv-524288-505a64da-6899-4d70-82c6-aeaa6b0690f9\",\"threads\":458,\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:https://danielyxie.github.io/a8085f7b-78d4-4bf7-8cd6-5d11221a2a1d\",\"moduleSequenceNumber\":86242}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/export async function main(ns) {\\r\\n    const target = ns.args[0]\\r\\n    const threads = ns.args[1]\\r\\n    const delay = ns.args[2]\\r\\n  \\r\\n    if (delay && delay > 0) {\\r\\n      await ns.sleep(delay)\\r\\n    }\\r\\n  \\r\\n    ns.print(`Starting operation: hack on ${target} in ${threads} threads`)\\r\\n    await ns.hack(target, { threads, stock: true })\\r\\n    ns.exit()\\r\\n  }\\r\\n  \",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"pserv-524288-505a64da-6899-4d70-82c6-aeaa6b0690f9\",\"moduleSequenceNumber\":86238,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/export async function main(ns) {\\r\\n    const target = ns.args[0]\\r\\n    const threads = ns.args[1]\\r\\n    const delay = ns.args[2]\\r\\n  \\r\\n    if (delay && delay > 0) {\\r\\n      await ns.sleep(delay)\\r\\n    }\\r\\n  \\r\\n    ns.print(`Starting operation: grow on ${target} in ${threads} threads`)\\r\\n    await ns.grow(target, { threads, stock: true })\\r\\n    ns.exit()\\r\\n  }\\r\\n  \",\"filename\":\"grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:https://danielyxie.github.io/dfa22ded-7843-4d1d-bf2a-94adc89e5585\",\"moduleSequenceNumber\":86241}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"pserv-524288-505a64da-6899-4d70-82c6-aeaa6b0690f9\",\"moduleSequenceNumber\":86241,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/export async function main(ns) {\\r\\n    const target = ns.args[0]\\r\\n    const threads = ns.args[1]\\r\\n    const delay = ns.args[2]\\r\\n  \\r\\n    if (delay && delay > 0) {\\r\\n      await ns.sleep(delay)\\r\\n    }\\r\\n  \\r\\n    ns.print(`Starting operation: weaken on ${target} in ${threads} threads`)\\r\\n    await ns.weaken(target, { threads, stock: true })\\r\\n    ns.exit()\\r\\n  }\\r\\n  \",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:https://danielyxie.github.io/a8085f7b-78d4-4bf7-8cd6-5d11221a2a1d\",\"moduleSequenceNumber\":86242}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"pserv-524288-505a64da-6899-4d70-82c6-aeaa6b0690f9\",\"moduleSequenceNumber\":86242,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-524288-39398935-c499-4146-b19c-29244d0bf1c2\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-524288-39398935-c499-4146-b19c-29244d0bf1c2\",\"httpPortOpen\":false,\"ip\":\"96.6.1.8\",\"isConnectedTo\":false,\"maxRam\":524288,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":524287.75,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"global-pharm\",299593,0,\"5e477699-71de-4884-a0ea-df5a22fe2a37\"],\"dataMap\":{},\"filename\":\"weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":740.6100000000025,\"pid\":1277,\"ramUsage\":1.75,\"server\":\"pserv-524288-39398935-c499-4146-b19c-29244d0bf1c2\",\"threads\":299593,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/export async function main(ns) {\\r\\n    const target = ns.args[0]\\r\\n    const threads = ns.args[1]\\r\\n    const delay = ns.args[2]\\r\\n  \\r\\n    if (delay && delay > 0) {\\r\\n      await ns.sleep(delay)\\r\\n    }\\r\\n  \\r\\n    ns.print(`Starting operation: hack on ${target} in ${threads} threads`)\\r\\n    await ns.hack(target, { threads, stock: true })\\r\\n    ns.exit()\\r\\n  }\\r\\n  \",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"pserv-524288-39398935-c499-4146-b19c-29244d0bf1c2\",\"moduleSequenceNumber\":86630,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/export async function main(ns) {\\r\\n    const target = ns.args[0]\\r\\n    const threads = ns.args[1]\\r\\n    const delay = ns.args[2]\\r\\n  \\r\\n    if (delay && delay > 0) {\\r\\n      await ns.sleep(delay)\\r\\n    }\\r\\n  \\r\\n    ns.print(`Starting operation: grow on ${target} in ${threads} threads`)\\r\\n    await ns.grow(target, { threads, stock: true })\\r\\n    ns.exit()\\r\\n  }\\r\\n  \",\"filename\":\"grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"pserv-524288-39398935-c499-4146-b19c-29244d0bf1c2\",\"moduleSequenceNumber\":86631,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/export async function main(ns) {\\r\\n    const target = ns.args[0]\\r\\n    const threads = ns.args[1]\\r\\n    const delay = ns.args[2]\\r\\n  \\r\\n    if (delay && delay > 0) {\\r\\n      await ns.sleep(delay)\\r\\n    }\\r\\n  \\r\\n    ns.print(`Starting operation: weaken on ${target} in ${threads} threads`)\\r\\n    await ns.weaken(target, { threads, stock: true })\\r\\n    ns.exit()\\r\\n  }\\r\\n  \",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:https://danielyxie.github.io/37ddf67f-a96d-4974-a4da-28241f7c0370\",\"moduleSequenceNumber\":86633}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"pserv-524288-39398935-c499-4146-b19c-29244d0bf1c2\",\"moduleSequenceNumber\":86633,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}}}","CompaniesSave":"{\"ECorp\":{\"ctor\":\"Company\",\"data\":{\"name\":\"ECorp\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":3,\"salaryMultiplier\":3,\"jobStatReqOffset\":249,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.014,\"isMegacorp\":false}},\"MegaCorp\":{\"ctor\":\"Company\",\"data\":{\"name\":\"MegaCorp\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":3,\"salaryMultiplier\":3,\"jobStatReqOffset\":249,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.014,\"isMegacorp\":false}},\"Bachman & Associates\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Bachman & Associates\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.6,\"salaryMultiplier\":2.6,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.014,\"isMegacorp\":false}},\"Blade Industries\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Blade Industries\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.75,\"salaryMultiplier\":2.75,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.014,\"isMegacorp\":false}},\"NWO\":{\"ctor\":\"Company\",\"data\":{\"name\":\"NWO\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.75,\"salaryMultiplier\":2.75,\"jobStatReqOffset\":249,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.014,\"isMegacorp\":false}},\"Clarke Incorporated\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Clarke Incorporated\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.25,\"salaryMultiplier\":2.25,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.014,\"isMegacorp\":false}},\"OmniTek Incorporated\":{\"ctor\":\"Company\",\"data\":{\"name\":\"OmniTek Incorporated\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.25,\"salaryMultiplier\":2.25,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.014,\"isMegacorp\":false}},\"Four Sigma\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Four Sigma\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.5,\"salaryMultiplier\":2.5,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.014,\"isMegacorp\":false}},\"KuaiGong International\":{\"ctor\":\"Company\",\"data\":{\"name\":\"KuaiGong International\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.2,\"salaryMultiplier\":2.2,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.014,\"isMegacorp\":false}},\"Fulcrum Technologies\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Fulcrum Technologies\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true},\"expMultiplier\":2,\"salaryMultiplier\":2,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.014,\"isMegacorp\":false}},\"Storm Technologies\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Storm Technologies\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true},\"expMultiplier\":1.8,\"salaryMultiplier\":1.8,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.241,\"isMegacorp\":false}},\"DefComm\":{\"ctor\":\"Company\",\"data\":{\"name\":\"DefComm\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.75,\"salaryMultiplier\":1.75,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.014,\"isMegacorp\":false}},\"Helios Labs\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Helios Labs\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.8,\"salaryMultiplier\":1.8,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.014,\"isMegacorp\":false}},\"VitaLife\":{\"ctor\":\"Company\",\"data\":{\"name\":\"VitaLife\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.8,\"salaryMultiplier\":1.8,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.014,\"isMegacorp\":false}},\"Icarus Microsystems\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Icarus Microsystems\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.9,\"salaryMultiplier\":1.9,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.014,\"isMegacorp\":false}},\"Universal Energy\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Universal Energy\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":2,\"salaryMultiplier\":2,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.014,\"isMegacorp\":false}},\"Galactic Cybersystems\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Galactic Cybersystems\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.9,\"salaryMultiplier\":1.9,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.014,\"isMegacorp\":false}},\"AeroCorp\":{\"ctor\":\"Company\",\"data\":{\"name\":\"AeroCorp\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Operations Manager\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.7,\"salaryMultiplier\":1.7,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.014,\"isMegacorp\":false}},\"Omnia Cybersystems\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Omnia Cybersystems\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Operations Manager\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.7,\"salaryMultiplier\":1.7,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.014,\"isMegacorp\":false}},\"Solaris Space Systems\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Solaris Space Systems\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Operations Manager\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.7,\"salaryMultiplier\":1.7,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.014,\"isMegacorp\":false}},\"DeltaOne\":{\"ctor\":\"Company\",\"data\":{\"name\":\"DeltaOne\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Operations Manager\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.6,\"salaryMultiplier\":1.6,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.014,\"isMegacorp\":false}},\"Global Pharmaceuticals\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Global Pharmaceuticals\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.8,\"salaryMultiplier\":1.8,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.014,\"isMegacorp\":false}},\"Nova Medical\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Nova Medical\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.75,\"salaryMultiplier\":1.75,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.014,\"isMegacorp\":false}},\"Central Intelligence Agency\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Central Intelligence Agency\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true,\"Field Agent\":true,\"Secret Agent\":true,\"Special Operative\":true},\"expMultiplier\":2,\"salaryMultiplier\":2,\"jobStatReqOffset\":149,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.0515,\"isMegacorp\":false}},\"National Security Agency\":{\"ctor\":\"Company\",\"data\":{\"name\":\"National Security Agency\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true,\"Field Agent\":true,\"Secret Agent\":true,\"Special Operative\":true},\"expMultiplier\":2,\"salaryMultiplier\":2,\"jobStatReqOffset\":149,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.014,\"isMegacorp\":false}},\"Watchdog Security\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Watchdog Security\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true,\"Field Agent\":true,\"Secret Agent\":true,\"Special Operative\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.5,\"salaryMultiplier\":1.5,\"jobStatReqOffset\":124,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.014,\"isMegacorp\":false}},\"LexoCorp\":{\"ctor\":\"Company\",\"data\":{\"name\":\"LexoCorp\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.4,\"salaryMultiplier\":1.4,\"jobStatReqOffset\":99,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.014,\"isMegacorp\":false}},\"Rho Construction\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Rho Construction\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true},\"expMultiplier\":1.3,\"salaryMultiplier\":1.3,\"jobStatReqOffset\":49,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.014,\"isMegacorp\":false}},\"Alpha Enterprises\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Alpha Enterprises\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.5,\"salaryMultiplier\":1.5,\"jobStatReqOffset\":99,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.014,\"isMegacorp\":false}},\"Aevum Police Headquarters\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Aevum Police Headquarters\",\"info\":\"\",\"companyPositions\":{\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true},\"expMultiplier\":1.3,\"salaryMultiplier\":1.3,\"jobStatReqOffset\":99,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.014,\"isMegacorp\":false}},\"SysCore Securities\":{\"ctor\":\"Company\",\"data\":{\"name\":\"SysCore Securities\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true},\"expMultiplier\":1.3,\"salaryMultiplier\":1.3,\"jobStatReqOffset\":124,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.014,\"isMegacorp\":false}},\"CompuTek\":{\"ctor\":\"Company\",\"data\":{\"name\":\"CompuTek\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true},\"expMultiplier\":1.2,\"salaryMultiplier\":1.2,\"jobStatReqOffset\":74,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.014,\"isMegacorp\":false}},\"NetLink Technologies\":{\"ctor\":\"Company\",\"data\":{\"name\":\"NetLink Technologies\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true},\"expMultiplier\":1.2,\"salaryMultiplier\":1.2,\"jobStatReqOffset\":99,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.014,\"isMegacorp\":false}},\"Carmichael Security\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Carmichael Security\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Field Agent\":true,\"Secret Agent\":true,\"Special Operative\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.2,\"salaryMultiplier\":1.2,\"jobStatReqOffset\":74,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.014,\"isMegacorp\":false}},\"FoodNStuff\":{\"ctor\":\"Company\",\"data\":{\"name\":\"FoodNStuff\",\"info\":\"\",\"companyPositions\":{\"Employee\":true,\"Part-time Employee\":true},\"expMultiplier\":1,\"salaryMultiplier\":1,\"jobStatReqOffset\":0,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.014,\"isMegacorp\":false}},\"Joe's Guns\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Joe's Guns\",\"info\":\"\",\"companyPositions\":{\"Employee\":true,\"Part-time Employee\":true},\"expMultiplier\":1,\"salaryMultiplier\":1,\"jobStatReqOffset\":0,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":34.2639,\"isMegacorp\":false}},\"Omega Software\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Omega Software\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true},\"expMultiplier\":1.1,\"salaryMultiplier\":1.1,\"jobStatReqOffset\":49,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.014,\"isMegacorp\":false}},\"Noodle Bar\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Noodle Bar\",\"info\":\"\",\"companyPositions\":{\"Waiter\":true,\"Part-time Waiter\":true},\"expMultiplier\":1,\"salaryMultiplier\":1,\"jobStatReqOffset\":0,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.014,\"isMegacorp\":false}}}","FactionsSave":"{\"Illuminati\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Synthetic Heart\",\"Synfibril Muscle\",\"NEMEAN Subdermal Weave\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"NeuroFlux Governor\",\"QLink\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Illuminati\",\"playerReputation\":0}},\"Daedalus\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"Synthetic Heart\",\"Synfibril Muscle\",\"NEMEAN Subdermal Weave\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"NeuroFlux Governor\",\"The Red Pill\"],\"favor\":1,\"isBanned\":false,\"isMember\":true,\"name\":\"Daedalus\",\"playerReputation\":6.67942156896915}},\"The Covenant\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Augmented Targeting III\",\"Synthetic Heart\",\"Synfibril Muscle\",\"Combat Rib III\",\"NEMEAN Subdermal Weave\",\"Graphene Bone Lacings\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"NeuroFlux Governor\",\"SPTN-97 Gene Modification\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"The Covenant\",\"playerReputation\":0}},\"ECorp\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Graphene Bionic Spine Upgrade\",\"Graphene Bionic Legs Upgrade\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"PC Direct-Neural Interface\",\"PC Direct-Neural Interface Optimization Submodule\",\"NeuroFlux Governor\",\"ECorp HVMind Implant\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"ECorp\",\"playerReputation\":0}},\"MegaCorp\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Graphene Bionic Legs Upgrade\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"ADR-V1 Pheromone Gene\",\"NeuroFlux Governor\",\"CordiARC Fusion Reactor\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"MegaCorp\",\"playerReputation\":0}},\"Bachman & Associates\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Enhanced Social Interaction Implant\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"Speech Enhancement\",\"FocusWire\",\"ADR-V2 Pheromone Gene\",\"NeuroFlux Governor\",\"SmartJaw\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Bachman & Associates\",\"playerReputation\":0}},\"Blade Industries\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Synfibril Muscle\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Nanofiber Weave\",\"Bionic Spine\",\"Bionic Legs\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"PC Direct-Neural Interface\",\"PC Direct-Neural Interface Optimization Submodule\",\"NeuroFlux Governor\",\"HyperSight Corneal Implant\",\"Neotra\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Blade Industries\",\"playerReputation\":0}},\"NWO\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Synthetic Heart\",\"Synfibril Muscle\",\"Enhanced Social Interaction Implant\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"ADR-V1 Pheromone Gene\",\"NeuroFlux Governor\",\"Neurotrainer III\",\"Power Recirculation Core\",\"Xanipher\",\"Hydroflame Left Arm\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"NWO\",\"playerReputation\":0}},\"Clarke Incorporated\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Enhanced Social Interaction Implant\",\"Neuralstimulator\",\"Neuronal Densification\",\"Nuoptimal Nootropic Injector Implant\",\"Speech Enhancement\",\"FocusWire\",\"ADR-V2 Pheromone Gene\",\"NeuroFlux Governor\",\"nextSENS Gene Modification\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Clarke Incorporated\",\"playerReputation\":0}},\"OmniTek Incorporated\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Nanofiber Weave\",\"Bionic Spine\",\"Bionic Legs\",\"Enhanced Social Interaction Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"PC Direct-Neural Interface\",\"NeuroFlux Governor\",\"OmniTek InfoLoad\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"OmniTek Incorporated\",\"playerReputation\":0}},\"Four Sigma\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Enhanced Social Interaction Implant\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"Speech Enhancement\",\"FocusWire\",\"PC Direct-Neural Interface\",\"ADR-V1 Pheromone Gene\",\"ADR-V2 Pheromone Gene\",\"NeuroFlux Governor\",\"Neurotrainer III\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Four Sigma\",\"playerReputation\":0}},\"KuaiGong International\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Synthetic Heart\",\"Synfibril Muscle\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Bionic Spine\",\"Bionic Legs\",\"Embedded Netburner Module Core V2 Upgrade\",\"Speech Enhancement\",\"FocusWire\",\"NeuroFlux Governor\",\"HyperSight Corneal Implant\",\"Photosynthetic Cells\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"KuaiGong International\",\"playerReputation\":0}},\"Fulcrum Secret Technologies\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Synthetic Heart\",\"Synfibril Muscle\",\"Nanofiber Weave\",\"NEMEAN Subdermal Weave\",\"Graphene Bone Lacings\",\"Graphene Bionic Spine Upgrade\",\"Graphene Bionic Legs Upgrade\",\"Artificial Bio-neural Network Implant\",\"Enhanced Myelin Sheathing\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"PC Direct-Neural Interface Optimization Submodule\",\"PC Direct-Neural Interface NeuroNet Injector\",\"NeuroFlux Governor\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Fulcrum Secret Technologies\",\"playerReputation\":0}},\"BitRunners\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Artificial Bio-neural Network Implant\",\"Enhanced Myelin Sheathing\",\"DataJack\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Neural Accelerator\",\"Cranial Signal Processors - Gen III\",\"Cranial Signal Processors - Gen IV\",\"Cranial Signal Processors - Gen V\",\"NeuroFlux Governor\",\"Neurotrainer II\",\"BitRunners Neurolink\"],\"favor\":127.4039,\"isBanned\":false,\"isMember\":false,\"name\":\"BitRunners\",\"playerReputation\":0}},\"The Black Hand\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Artificial Synaptic Potentiation\",\"Enhanced Myelin Sheathing\",\"DataJack\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Neuralstimulator\",\"Cranial Signal Processors - Gen III\",\"Cranial Signal Processors - Gen IV\",\"NeuroFlux Governor\",\"The Black Hand\"],\"favor\":118.9258,\"isBanned\":false,\"isMember\":false,\"name\":\"The Black Hand\",\"playerReputation\":0}},\"NiteSec\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"BitWire\",\"Artificial Synaptic Potentiation\",\"Neural-Retention Enhancement\",\"DataJack\",\"Embedded Netburner Module\",\"Cranial Signal Processors - Gen II\",\"Cranial Signal Processors - Gen III\",\"NeuroFlux Governor\",\"Neurotrainer II\",\"CRTX42-AA Gene Modification\"],\"favor\":159.835,\"isBanned\":false,\"isMember\":false,\"name\":\"NiteSec\",\"playerReputation\":0}},\"Aevum\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Wired Reflexes\",\"Speech Processor Implant\",\"Synaptic Enhancement Implant\",\"Neuralstimulator\",\"NeuroFlux Governor\",\"Neurotrainer I\",\"PCMatrix\"],\"favor\":0.0507,\"isBanned\":false,\"isMember\":false,\"name\":\"Aevum\",\"playerReputation\":0}},\"Chongqing\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Speech Processor Implant\",\"DataJack\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"NeuroFlux Governor\",\"Neuregen Gene Modification\"],\"favor\":53.059,\"isBanned\":false,\"isMember\":false,\"name\":\"Chongqing\",\"playerReputation\":0}},\"Ishima\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Augmented Targeting I\",\"Combat Rib I\",\"Wired Reflexes\",\"Speech Processor Implant\",\"Neuralstimulator\",\"NeuroFlux Governor\",\"INFRARET Enhancement\"],\"favor\":18.0685,\"isBanned\":false,\"isMember\":false,\"name\":\"Ishima\",\"playerReputation\":0}},\"New Tokyo\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Speech Processor Implant\",\"DataJack\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"NeuroFlux Governor\",\"NutriGen Implant\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"New Tokyo\",\"playerReputation\":0}},\"Sector-12\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"Augmented Targeting I\",\"Augmented Targeting II\",\"Wired Reflexes\",\"Speech Processor Implant\",\"Neuralstimulator\",\"NeuroFlux Governor\",\"CashRoot Starter Kit\"],\"favor\":96.6024,\"isBanned\":false,\"isMember\":false,\"name\":\"Sector-12\",\"playerReputation\":0}},\"Volhaven\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Combat Rib I\",\"Combat Rib II\",\"Wired Reflexes\",\"Speech Processor Implant\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"NeuroFlux Governor\",\"DermaForce Particle Barrier\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Volhaven\",\"playerReputation\":0}},\"Speakers for the Dead\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Unstable Circadian Modulator\",\"Synthetic Heart\",\"Synfibril Muscle\",\"Nanofiber Weave\",\"Wired Reflexes\",\"Bionic Spine\",\"Bionic Legs\",\"Speech Enhancement\",\"The Shadow's Simulacrum\",\"NeuroFlux Governor\",\"Graphene BrachiBlades Upgrade\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Speakers for the Dead\",\"playerReputation\":0}},\"The Dark Army\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"HemoRecirculator\",\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Nanofiber Weave\",\"Wired Reflexes\",\"The Shadow's Simulacrum\",\"NeuroFlux Governor\",\"Power Recirculation Core\",\"Graphene Bionic Arms Upgrade\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"The Dark Army\",\"playerReputation\":0}},\"The Syndicate\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"HemoRecirculator\",\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Nanofiber Weave\",\"NEMEAN Subdermal Weave\",\"Wired Reflexes\",\"Bionic Spine\",\"Bionic Legs\",\"ADR-V1 Pheromone Gene\",\"The Shadow's Simulacrum\",\"NeuroFlux Governor\",\"Power Recirculation Core\",\"BrachiBlades\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"The Syndicate\",\"playerReputation\":0}},\"Silhouette\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Speech Processor Implant\",\"TITN-41 Gene-Modification Injection\",\"ADR-V2 Pheromone Gene\",\"NeuroFlux Governor\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Silhouette\",\"playerReputation\":0}},\"Tetrads\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"HemoRecirculator\",\"NeuroFlux Governor\",\"LuminCloaking-V1 Skin Implant\",\"LuminCloaking-V2 Skin Implant\",\"Power Recirculation Core\",\"Bionic Arms\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Tetrads\",\"playerReputation\":0}},\"Slum Snakes\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Augmented Targeting I\",\"Combat Rib I\",\"Wired Reflexes\",\"NeuroFlux Governor\",\"LuminCloaking-V1 Skin Implant\",\"LuminCloaking-V2 Skin Implant\",\"SmartSonar Implant\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Slum Snakes\",\"playerReputation\":0}},\"Netburners\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Hacknet Node CPU Architecture Neural-Upload\",\"Hacknet Node Cache Architecture Neural-Upload\",\"Hacknet Node NIC Architecture Neural-Upload\",\"Hacknet Node Kernel Direct-Neural Interface\",\"Hacknet Node Core Direct-Neural Interface\",\"NeuroFlux Governor\"],\"favor\":58.3011,\"isBanned\":false,\"isMember\":false,\"name\":\"Netburners\",\"playerReputation\":0}},\"Tian Di Hui\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Nanofiber Weave\",\"Wired Reflexes\",\"Speech Processor Implant\",\"Nuoptimal Nootropic Injector Implant\",\"Speech Enhancement\",\"ADR-V1 Pheromone Gene\",\"NeuroFlux Governor\",\"Social Negotiation Assistant (S.N.A)\",\"Neuroreceptor Management Implant\"],\"favor\":62.5399,\"isBanned\":false,\"isMember\":false,\"name\":\"Tian Di Hui\",\"playerReputation\":0}},\"CyberSec\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"BitWire\",\"Synaptic Enhancement Implant\",\"Cranial Signal Processors - Gen I\",\"Cranial Signal Processors - Gen II\",\"NeuroFlux Governor\",\"Neurotrainer I\"],\"favor\":108.657,\"isBanned\":false,\"isMember\":false,\"name\":\"CyberSec\",\"playerReputation\":0}},\"Bladeburners\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"EsperTech Bladeburner Eyewear\",\"EMS-4 Recombination\",\"ORION-MKIV Shoulder\",\"Hyperion Plasma Cannon V1\",\"Hyperion Plasma Cannon V2\",\"GOLEM Serum\",\"Vangelis Virus\",\"Vangelis Virus 3.0\",\"I.N.T.E.R.L.I.N.K.E.D\",\"Blade's Runners\",\"BLADE-51b Tesla Armor\",\"BLADE-51b Tesla Armor: Power Cells Upgrade\",\"BLADE-51b Tesla Armor: Energy Shielding Upgrade\",\"BLADE-51b Tesla Armor: Unibeam Upgrade\",\"BLADE-51b Tesla Armor: Omnibeam Upgrade\",\"BLADE-51b Tesla Armor: IPU Upgrade\",\"The Blade's Simulacrum\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Bladeburners\",\"playerReputation\":0}},\"Church of the Machine God\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Stanek's Gift - Genesis\",\"Stanek's Gift - Awakening\",\"Stanek's Gift - Serenity\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Church of the Machine God\",\"playerReputation\":0}}}","AliasesSave":"{\"vi\":\"nano\",\"cl\":\"cls\"}","GlobalAliasesSave":"{}","MessagesSave":"{\"j0.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"j0.msg\",\"msg\":\"I know you can sense it. I know you're searching for it. It's why you spend night after night at your computer. <br><br>It's real, I've seen it. And I can help you find it. But not right now. You're not ready yet.<br><br>Use this program to track your progress<br><br>The fl1ght.exe program was added to your home computer<br><br>-jump3R\",\"recvd\":true}},\"j1.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"j1.msg\",\"msg\":\"Soon you will be contacted by a hacking group known as CyberSec. They can help you with your search. <br><br>You should join them, garner their favor, and exploit them for their Augmentations. But do not trust them. They are not what they seem. No one is.<br><br>-jump3R\",\"recvd\":true}},\"j2.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"j2.msg\",\"msg\":\"Do not try to save the world. There is no world to save. If you want to find the truth, worry only about yourself. Ethics and morals will get you killed. <br><br>Watch out for a hacking group known as NiteSec.<br><br>-jump3R\",\"recvd\":true}},\"j3.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"j3.msg\",\"msg\":\"You must learn to walk before you can run. And you must run before you can fly. Look for the black hand. <br><br>I.I.I.I <br><br>-jump3R\",\"recvd\":true}},\"j4.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"j4.msg\",\"msg\":\"To find what you are searching for, you must understand the bits. The bits are all around us. The runners will help you.<br><br>-jump3R\",\"recvd\":true}},\"csec-test.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"csec-test.msg\",\"msg\":\"We've been watching you. Your skills are very impressive. But you're wasting your talents. If you join us, you can put your skills to good use and change the world for the better. If you join us, we can unlock your full potential. <br><br>But first, you must pass our test. Find and install the backdoor on our server. <br><br>-CyberSec\",\"recvd\":true}},\"nitesec-test.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"nitesec-test.msg\",\"msg\":\"People say that the corrupted governments and corporations rule the world. Yes, maybe they do. But do you know who everyone really fears? People like us. Because they can't hide from us. Because they can't fight shadows and ideas with bullets. <br><br>Join us, and people will fear you, too. <br><br>Find and install the backdoor on our server. Then, we will contact you again.<br><br>-NiteSec\",\"recvd\":true}},\"19dfj3l1nd.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"19dfj3l1nd.msg\",\"msg\":\"We know what you are doing. We know what drives you. We know what you are looking for. <br><br> We can help you find the answers.<br><br>run4theh111z\",\"recvd\":true}},\"icarus.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"icarus.msg\",\"msg\":\"@)(#V%*N)@(#*)*C)@#%*)*V)@#(*%V@)(#VN%*)@#(*%<br>)@B(*#%)@)M#B*%V)____FIND___#$@)#%(B*)@#(*%B)<br>@_#(%_@#M(BDSPOMB__THE-CAVE_#)$(*@#$)@#BNBEGB<br>DFLSMFVMV)#@($*)@#*$MV)@#(*$V)M#(*$)M@(#*VM$)\",\"recvd\":false}}}","StockMarketSave":"{\"lastUpdate\":0,\"Orders\":{},\"storedCycles\":0,\"ticksUntilCycle\":0}","SettingsSave":"{\"ActiveScriptsServerPageSize\":100,\"ActiveScriptsScriptPageSize\":10,\"AutosaveInterval\":30,\"CodeInstructionRunTime\":5,\"DisableASCIIArt\":false,\"DisableHotkeys\":false,\"DisableTextEffects\":false,\"DisableOverviewProgressBars\":false,\"EnableBashHotkeys\":false,\"TimestampsFormat\":\"\",\"Locale\":\"en\",\"MaxLogCapacity\":500,\"MaxPortCapacity\":50,\"MaxTerminalCapacity\":500,\"OwnedAugmentationsOrder\":1,\"PurchaseAugmentationsOrder\":2,\"SaveGameOnFileSave\":true,\"SuppressBuyAugmentationConfirmation\":true,\"SuppressFactionInvites\":false,\"SuppressMessages\":false,\"SuppressTravelConfirmation\":true,\"SuppressBladeburnerPopup\":false,\"SuppressTIXPopup\":false,\"SuppressSavedGameToast\":true,\"UseIEC60027_2\":true,\"ExcludeRunningScriptsFromSave\":false,\"IsSidebarOpened\":true,\"MonacoTheme\":\"monokai\",\"MonacoInsertSpaces\":true,\"MonacoFontSize\":16,\"MonacoVim\":false,\"MonacoWordWrap\":\"off\",\"theme\":{\"primarylight\":\"#0f0\",\"primary\":\"#0c0\",\"primarydark\":\"#090\",\"successlight\":\"#0f0\",\"success\":\"#0c0\",\"successdark\":\"#090\",\"errorlight\":\"#f00\",\"error\":\"#c00\",\"errordark\":\"#900\",\"secondarylight\":\"#AAA\",\"secondary\":\"#888\",\"secondarydark\":\"#666\",\"warninglight\":\"#ff0\",\"warning\":\"#cc0\",\"warningdark\":\"#990\",\"infolight\":\"#69f\",\"info\":\"#36c\",\"infodark\":\"#039\",\"welllight\":\"#444\",\"well\":\"#222\",\"white\":\"#fff\",\"black\":\"#000\",\"hp\":\"#dd3434\",\"money\":\"#ffd700\",\"hack\":\"#adff2f\",\"combat\":\"#faffdf\",\"cha\":\"#a671d1\",\"int\":\"#6495ed\",\"rep\":\"#faffdf\",\"disabled\":\"#66cfbc\",\"backgroundprimary\":\"#000\",\"backgroundsecondary\":\"#000\",\"button\":\"#333\"},\"styles\":{\"lineHeight\":1.5,\"fontFamily\":\"Lucida Console, Lucida Sans Unicode, Fira Mono, Consolas, Courier New, Courier, monospace, Times New Roman\"},\"overview\":{\"x\":0,\"y\":0,\"opened\":true}}","VersionSave":"10","AllGangsSave":"","LastExportBonus":"1643189349910","StaneksGiftSave":"{\"ctor\":\"StaneksGift\",\"data\":{\"storedCycles\":0,\"fragments\":[]}}","SaveTimestamp":"1643189349931"}}