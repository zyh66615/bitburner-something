{"ctor":"BitburnerSaveObject","data":{"PlayerSave":"{\"ctor\":\"PlayerObject\",\"data\":{\"hacking\":3204,\"hp\":22,\"max_hp\":22,\"strength\":95,\"defense\":127,\"dexterity\":85,\"agility\":147,\"charisma\":42,\"intelligence\":1359,\"hacking_chance_mult\":14.217749711070892,\"hacking_speed_mult\":11.223314137548785,\"hacking_money_mult\":33.46337089984325,\"hacking_grow_mult\":3.9508112042317878,\"hacking_exp\":9060430644.814255,\"strength_exp\":726.0914612504315,\"defense_exp\":726.0914612504315,\"dexterity_exp\":726.0914612504315,\"agility_exp\":726.0914612504315,\"charisma_exp\":160.59773250000126,\"intelligence_exp\":1.4513000000000043e+21,\"hacking_mult\":17.156252302579368,\"strength_mult\":8.349976567426264,\"defense_mult\":11.181707751162127,\"dexterity_mult\":7.481071198368953,\"agility_mult\":12.93663497741667,\"charisma_mult\":11.205540262360355,\"hacking_exp_mult\":22.698643688106717,\"strength_exp_mult\":6.297197978425045,\"defense_exp_mult\":6.297197978425045,\"dexterity_exp_mult\":6.297197978425045,\"agility_exp_mult\":6.297197978425045,\"charisma_exp_mult\":7.562424472837089,\"company_rep_mult\":9.403710431440906,\"faction_rep_mult\":5.480017733939923,\"money\":7666601335020.895,\"city\":\"Aevum\",\"location\":\"The Slums\",\"jobs\":{},\"companyName\":\"\",\"currentServer\":\"home\",\"purchasedServers\":[],\"hacknetNodes\":[\"hacknet-node-0\",\"hacknet-node-1\",\"hacknet-node-2\",\"hacknet-node-3\",\"hacknet-node-4\",\"hacknet-node-5\",\"hacknet-node-6\",\"hacknet-node-7\",\"hacknet-node-8\",\"hacknet-node-9\"],\"hashManager\":{\"ctor\":\"HashManager\",\"data\":{\"capacity\":640,\"hashes\":626.5083247490982,\"upgrades\":{\"Sell for Money\":233,\"Sell for Corporation Funds\":0,\"Reduce Minimum Security\":0,\"Increase Maximum Money\":0,\"Improve Studying\":0,\"Improve Gym Training\":0,\"Exchange for Corporation Research\":0,\"Exchange for Bladeburner Rank\":0,\"Exchange for Bladeburner SP\":0,\"Generate Coding Contract\":0}}},\"factions\":[\"NiteSec\",\"Sector-12\",\"Daedalus\",\"CyberSec\",\"BitRunners\",\"Netburners\",\"Slum Snakes\",\"The Black Hand\",\"Aevum\"],\"factionInvitations\":[],\"queuedAugmentations\":[{\"level\":1,\"name\":\"Neurotrainer III\"},{\"level\":1,\"name\":\"Power Recirculation Core\"},{\"level\":1,\"name\":\"Cranial Signal Processors - Gen II\"}],\"augmentations\":[{\"level\":1,\"name\":\"I.N.T.E.R.L.I.N.K.E.D\"},{\"level\":1,\"name\":\"Embedded Netburner Module Analyze Engine\"},{\"level\":1,\"name\":\"Embedded Netburner Module Core V3 Upgrade\"},{\"level\":1,\"name\":\"Neuregen Gene Modification\"},{\"level\":1,\"name\":\"The Black Hand\"},{\"level\":1,\"name\":\"SmartJaw\"},{\"level\":1,\"name\":\"Hyperion Plasma Cannon V1\"},{\"level\":1,\"name\":\"QLink\"},{\"level\":1,\"name\":\"BLADE-51b Tesla Armor: Omnibeam Upgrade\"},{\"level\":1,\"name\":\"INFRARET Enhancement\"},{\"level\":1,\"name\":\"Neural-Retention Enhancement\"},{\"level\":1,\"name\":\"Enhanced Myelin Sheathing\"},{\"level\":1,\"name\":\"TITN-41 Gene-Modification Injection\"},{\"level\":1,\"name\":\"PC Direct-Neural Interface\"},{\"level\":1,\"name\":\"DataJack\"},{\"level\":1,\"name\":\"BitRunners Neurolink\"},{\"level\":1,\"name\":\"Neurotrainer II\"},{\"level\":1,\"name\":\"Graphene Bionic Legs Upgrade\"},{\"level\":1,\"name\":\"Combat Rib III\"},{\"level\":1,\"name\":\"OmniTek InfoLoad\"},{\"level\":1,\"name\":\"Artificial Synaptic Potentiation\"},{\"level\":100,\"name\":\"NeuroFlux Governor\"},{\"level\":1,\"name\":\"Neuroreceptor Management Implant\"},{\"level\":1,\"name\":\"Embedded Netburner Module\"},{\"level\":1,\"name\":\"Neuralstimulator\"},{\"level\":1,\"name\":\"Embedded Netburner Module Core Implant\"},{\"level\":1,\"name\":\"Cranial Signal Processors - Gen I\"},{\"level\":1,\"name\":\"BitWire\"},{\"level\":1,\"name\":\"Synaptic Enhancement Implant\"},{\"level\":1,\"name\":\"Neurotrainer I\"},{\"level\":1,\"name\":\"Wired Reflexes\"},{\"level\":1,\"name\":\"NutriGen Implant\"},{\"level\":1,\"name\":\"LuminCloaking-V1 Skin Implant\"},{\"level\":1,\"name\":\"Hacknet Node Cache Architecture Neural-Upload\"},{\"level\":1,\"name\":\"Hacknet Node NIC Architecture Neural-Upload\"},{\"level\":1,\"name\":\"Hacknet Node CPU Architecture Neural-Upload\"},{\"level\":1,\"name\":\"Speech Enhancement\"},{\"level\":1,\"name\":\"Augmented Targeting I\"},{\"level\":1,\"name\":\"ADR-V1 Pheromone Gene\"},{\"level\":1,\"name\":\"Nuoptimal Nootropic Injector Implant\"},{\"level\":1,\"name\":\"Combat Rib I\"},{\"level\":1,\"name\":\"LuminCloaking-V2 Skin Implant\"},{\"level\":1,\"name\":\"Social Negotiation Assistant (S.N.A)\"},{\"level\":1,\"name\":\"Hacknet Node Kernel Direct-Neural Interface\"},{\"level\":1,\"name\":\"Augmented Targeting II\"},{\"level\":1,\"name\":\"HemoRecirculator\"},{\"level\":1,\"name\":\"Speech Processor Implant\"},{\"level\":1,\"name\":\"DermaForce Particle Barrier\"},{\"level\":1,\"name\":\"Hacknet Node Core Direct-Neural Interface\"},{\"level\":1,\"name\":\"Combat Rib II\"},{\"level\":1,\"name\":\"BrachiBlades\"}],\"sourceFiles\":[{\"lvl\":3,\"n\":1},{\"lvl\":3,\"n\":2},{\"lvl\":3,\"n\":5},{\"lvl\":3,\"n\":4},{\"lvl\":3,\"n\":6},{\"lvl\":3,\"n\":7},{\"lvl\":3,\"n\":9},{\"lvl\":1,\"n\":10}],\"numPeopleKilled\":0,\"karma\":-56086.5,\"crime_money_mult\":8.559787700414157,\"crime_success_mult\":6.766630593212774,\"isWorking\":true,\"focus\":false,\"workType\":\"Working for Faction\",\"workCostMult\":5,\"workExpMult\":4,\"currentWorkFactionName\":\"Daedalus\",\"currentWorkFactionDescription\":\"carrying out hacking contracts\",\"workHackExpGainRate\":3.4047965532160074,\"workStrExpGainRate\":0,\"workDefExpGainRate\":0,\"workDexExpGainRate\":0,\"workAgiExpGainRate\":0,\"workChaExpGainRate\":0,\"workRepGainRate\":42.98923242855446,\"workMoneyGainRate\":0,\"workMoneyLossRate\":0,\"workHackExpGained\":266193.80412353354,\"workStrExpGained\":0,\"workDefExpGained\":0,\"workDexExpGained\":0,\"workAgiExpGained\":0,\"workChaExpGained\":0,\"workRepGained\":2478161.598579055,\"workMoneyGained\":0,\"createProgramName\":\"\",\"createProgramReqLvl\":400,\"className\":\"\",\"crimeType\":\"\",\"timeWorked\":15636400,\"timeWorkedCreateProgram\":0,\"timeNeededToCompleteWork\":72000000,\"work_money_mult\":3.812186249697339,\"hacknet_node_money_mult\":9.964316245622966,\"hacknet_node_purchase_cost_mult\":0.17321174254536037,\"hacknet_node_ram_cost_mult\":0.22642057849066713,\"hacknet_node_core_cost_mult\":0.22642057849066713,\"hacknet_node_level_cost_mult\":0.19245749171706708,\"hasWseAccount\":false,\"hasTixApiAccess\":false,\"has4SData\":false,\"has4SDataTixApi\":false,\"gang\":{\"ctor\":\"Gang\",\"data\":{\"facName\":\"NiteSec\",\"members\":[{\"ctor\":\"GangMember\",\"data\":{\"task\":\"Plant Virus\",\"earnedRespect\":5061.24956327782,\"hack\":6700,\"str\":134,\"def\":15,\"dex\":3,\"agi\":8,\"cha\":1,\"hack_exp\":29748.802427483526,\"str_exp\":125.4599752820615,\"def_exp\":40.31540123865155,\"dex_exp\":24.55026571266066,\"agi_exp\":31.65274143004314,\"cha_exp\":2.1425388050106413,\"hack_mult\":2.2723515045000005,\"str_mult\":8.65899216,\"def_mult\":4.618129152,\"dex_mult\":1.4949999999999999,\"agi_mult\":2.8704,\"cha_mult\":1.04,\"hack_asc_points\":1025987.4526099078,\"str_asc_points\":8073.877494358996,\"def_asc_points\":1561.4469619323104,\"dex_asc_points\":0,\"agi_asc_points\":307.4275466170689,\"cha_asc_points\":60.465337645424825,\"upgrades\":[\"Baseball Bat\",\"Bulletproof Vest\",\"Ford Flex V20\",\"NUKE Rootkit\",\"Soulstealer Rootkit\",\"Hmap Node\",\"Demon Rootkit\",\"Jack the Ripper\"],\"augmentations\":[\"BitWire\",\"DataJack\",\"Bionic Arms\",\"Bionic Legs\",\"Neuralstimulator\",\"Nanofiber Weave\",\"Bionic Spine\",\"Synfibril Muscle\",\"BrachiBlades\",\"Synthetic Heart\",\"Graphene Bone Lacings\"],\"name\":\"Thug 1\"}},{\"ctor\":\"GangMember\",\"data\":{\"task\":\"Cyberterrorism\",\"earnedRespect\":230557.18673800057,\"hack\":12549,\"str\":182,\"def\":23,\"dex\":5,\"agi\":12,\"cha\":52,\"hack_exp\":328761.9754668191,\"str_exp\":206.0774643060988,\"def_exp\":73.15387200873664,\"dex_exp\":43.30954713798196,\"agi_exp\":56.48327083587308,\"cha_exp\":1971.431851060424,\"hack_mult\":2.2723515045000005,\"str_mult\":8.65899216,\"def_mult\":4.618129152,\"dex_mult\":1.4949999999999999,\"agi_mult\":2.8704,\"cha_mult\":1.04,\"hack_asc_points\":1429758.013252573,\"str_asc_points\":6759.116176746765,\"def_asc_points\":1386.2232331945918,\"dex_asc_points\":0,\"agi_asc_points\":210.08820866939692,\"cha_asc_points\":865.8078793841355,\"upgrades\":[\"Baseball Bat\",\"Bulletproof Vest\",\"Ford Flex V20\",\"NUKE Rootkit\",\"Soulstealer Rootkit\",\"Hmap Node\",\"Demon Rootkit\",\"Jack the Ripper\"],\"augmentations\":[\"BitWire\",\"DataJack\",\"Bionic Arms\",\"Bionic Legs\",\"Neuralstimulator\",\"Nanofiber Weave\",\"Bionic Spine\",\"Synfibril Muscle\",\"BrachiBlades\",\"Synthetic Heart\",\"Graphene Bone Lacings\"],\"name\":\"Thug 2\"}},{\"ctor\":\"GangMember\",\"data\":{\"task\":\"Cyberterrorism\",\"earnedRespect\":293325.532864802,\"hack\":17305,\"str\":107,\"def\":23,\"dex\":5,\"agi\":12,\"cha\":52,\"hack_exp\":433247.28890619864,\"str_exp\":153.97211946456915,\"def_exp\":73.78871610473665,\"dex_exp\":43.6841304713153,\"agi_exp\":56.972470835873075,\"cha_exp\":1962.9620663809123,\"hack_mult\":2.2723515045000005,\"str_mult\":8.65899216,\"def_mult\":4.618129152,\"dex_mult\":1.4949999999999999,\"agi_mult\":2.8704,\"cha_mult\":1.04,\"hack_asc_points\":2500741.4784081075,\"str_asc_points\":3708.6622124111504,\"def_asc_points\":854.1358272604388,\"dex_asc_points\":0,\"agi_asc_points\":0,\"cha_asc_points\":887.7649251824324,\"upgrades\":[\"Baseball Bat\",\"Bulletproof Vest\",\"Ford Flex V20\",\"NUKE Rootkit\",\"Soulstealer Rootkit\",\"Hmap Node\",\"Demon Rootkit\",\"Jack the Ripper\"],\"augmentations\":[\"BitWire\",\"DataJack\",\"Bionic Arms\",\"Bionic Legs\",\"Neuralstimulator\",\"Nanofiber Weave\",\"Bionic Spine\",\"Synfibril Muscle\",\"BrachiBlades\",\"Synthetic Heart\",\"Graphene Bone Lacings\"],\"name\":\"Thug 3\"}},{\"ctor\":\"GangMember\",\"data\":{\"task\":\"Cyberterrorism\",\"earnedRespect\":279123.7453572721,\"hack\":15866,\"str\":114,\"def\":23,\"dex\":5,\"agi\":11,\"cha\":52,\"hack_exp\":406180.7360664093,\"str_exp\":156.54155461191436,\"def_exp\":71.24933972073664,\"dex_exp\":42.185797137981965,\"agi_exp\":55.01567083587309,\"cha_exp\":2005.2271305242177,\"hack_mult\":2.2723515045000005,\"str_mult\":8.65899216,\"def_mult\":4.618129152,\"dex_mult\":1.4949999999999999,\"agi_mult\":2.8704,\"cha_mult\":1.04,\"hack_asc_points\":2143143.112192672,\"str_asc_points\":4111.229556365764,\"def_asc_points\":1172.7386224088377,\"dex_asc_points\":0,\"agi_asc_points\":108.36497203974938,\"cha_asc_points\":1979.8286821912382,\"upgrades\":[\"Baseball Bat\",\"Bulletproof Vest\",\"Ford Flex V20\",\"NUKE Rootkit\",\"Soulstealer Rootkit\",\"Hmap Node\",\"Demon Rootkit\",\"Jack the Ripper\"],\"augmentations\":[\"BitWire\",\"DataJack\",\"Bionic Arms\",\"Bionic Legs\",\"Neuralstimulator\",\"Nanofiber Weave\",\"Bionic Spine\",\"Synfibril Muscle\",\"BrachiBlades\",\"Synthetic Heart\",\"Graphene Bone Lacings\"],\"name\":\"Thug 4\"}},{\"ctor\":\"GangMember\",\"data\":{\"task\":\"Cyberterrorism\",\"earnedRespect\":112611.24850535081,\"hack\":21842,\"str\":45,\"def\":17,\"dex\":4,\"agi\":9,\"cha\":76,\"hack_exp\":303811.1522713901,\"str_exp\":75.74364790291412,\"def_exp\":49.25984650509334,\"dex_exp\":29.429887298878874,\"agi_exp\":38.239166322678614,\"cha_exp\":1213.2078339613543,\"hack_mult\":2.2723515045000005,\"str_mult\":8.65899216,\"def_mult\":4.618129152,\"dex_mult\":1.4949999999999999,\"agi_mult\":2.8704,\"cha_mult\":1.04,\"hack_asc_points\":4439101.781036722,\"str_asc_points\":1533.487401868702,\"def_asc_points\":244.78061845431097,\"dex_asc_points\":0,\"agi_asc_points\":0,\"cha_asc_points\":7227.210733387402,\"upgrades\":[\"Baseball Bat\",\"Bulletproof Vest\",\"Ford Flex V20\",\"NUKE Rootkit\",\"Soulstealer Rootkit\",\"Hmap Node\",\"Demon Rootkit\",\"Jack the Ripper\"],\"augmentations\":[\"BitWire\",\"DataJack\",\"Bionic Arms\",\"Bionic Legs\",\"Neuralstimulator\",\"Nanofiber Weave\",\"Bionic Spine\",\"Synfibril Muscle\",\"BrachiBlades\",\"Synthetic Heart\",\"Graphene Bone Lacings\"],\"name\":\"Thug 5\"}},{\"ctor\":\"GangMember\",\"data\":{\"task\":\"Plant Virus\",\"earnedRespect\":9635.383368030725,\"hack\":16160,\"str\":39,\"def\":15,\"dex\":3,\"agi\":8,\"cha\":3,\"hack_exp\":58901.80768310403,\"str_exp\":62.31106457728886,\"def_exp\":40.276026430339954,\"dex_exp\":24.454110316106107,\"agi_exp\":31.566325615993257,\"cha_exp\":4.403332616612455,\"hack_mult\":2.2723515045000005,\"str_mult\":8.65899216,\"def_mult\":4.618129152,\"dex_mult\":1.4949999999999999,\"agi_mult\":2.8704,\"cha_mult\":1.04,\"hack_asc_points\":4391846.189790495,\"str_asc_points\":1597.5260079195834,\"def_asc_points\":446.54613042977496,\"dex_asc_points\":0,\"agi_asc_points\":0,\"cha_asc_points\":12132.446683693019,\"upgrades\":[\"Baseball Bat\",\"Bulletproof Vest\",\"Ford Flex V20\",\"NUKE Rootkit\",\"Soulstealer Rootkit\",\"Hmap Node\",\"Demon Rootkit\",\"Jack the Ripper\"],\"augmentations\":[\"BitWire\",\"DataJack\",\"Bionic Arms\",\"Bionic Legs\",\"Neuralstimulator\",\"Nanofiber Weave\",\"Bionic Spine\",\"Synfibril Muscle\",\"BrachiBlades\",\"Synthetic Heart\",\"Graphene Bone Lacings\"],\"name\":\"Thug 6\"}},{\"ctor\":\"GangMember\",\"data\":{\"task\":\"Cyberterrorism\",\"earnedRespect\":151999.9495416611,\"hack\":14468,\"str\":214,\"def\":37,\"dex\":7,\"agi\":18,\"cha\":72,\"hack_exp\":259021.66358731705,\"str_exp\":315.20344111608296,\"def_exp\":131.52015403242476,\"dex_exp\":77.6750584080941,\"agi_exp\":101.403255021823,\"cha_exp\":1709.7165536743419,\"hack_mult\":2.2723515045000005,\"str_mult\":8.65899216,\"def_mult\":4.618129152,\"dex_mult\":1.4949999999999999,\"agi_mult\":2.8704,\"cha_mult\":1.04,\"hack_asc_points\":2048941.0028414282,\"str_asc_points\":4901.122478996613,\"def_asc_points\":1444.360952701079,\"dex_asc_points\":0,\"agi_asc_points\":71.54717987142112,\"cha_asc_points\":4359.912408644584,\"upgrades\":[\"Baseball Bat\",\"Bulletproof Vest\",\"Ford Flex V20\",\"NUKE Rootkit\",\"Soulstealer Rootkit\",\"Hmap Node\",\"Demon Rootkit\",\"Jack the Ripper\"],\"augmentations\":[\"BitWire\",\"DataJack\",\"Bionic Arms\",\"Bionic Legs\",\"Neuralstimulator\",\"Nanofiber Weave\",\"Bionic Spine\",\"Synfibril Muscle\",\"BrachiBlades\",\"Synthetic Heart\",\"Graphene Bone Lacings\"],\"name\":\"Thug 7\"}},{\"ctor\":\"GangMember\",\"data\":{\"task\":\"Cyberterrorism\",\"earnedRespect\":79113.67664652334,\"hack\":7193,\"str\":125,\"def\":38,\"dex\":8,\"agi\":19,\"cha\":37,\"hack_exp\":134789.2322944697,\"str_exp\":240.0143493462915,\"def_exp\":139.13828318442467,\"dex_exp\":82.1700584080941,\"agi_exp\":107.27365502182296,\"cha_exp\":1052.9623861671798,\"hack_mult\":2.2723515045000005,\"str_mult\":8.65899216,\"def_mult\":4.618129152,\"dex_mult\":1.4949999999999999,\"agi_mult\":2.8704,\"cha_mult\":1.04,\"hack_asc_points\":631853.5322995121,\"str_asc_points\":2539.195721786528,\"def_asc_points\":1055.9410023998103,\"dex_asc_points\":0,\"agi_asc_points\":164.32949488214794,\"cha_asc_points\":43.230317013149715,\"upgrades\":[\"Hmap Node\",\"Baseball Bat\",\"Bulletproof Vest\",\"Ford Flex V20\",\"NUKE Rootkit\",\"Soulstealer Rootkit\",\"Demon Rootkit\",\"Jack the Ripper\"],\"augmentations\":[\"BitWire\",\"DataJack\",\"Bionic Arms\",\"Bionic Legs\",\"Neuralstimulator\",\"Nanofiber Weave\",\"Bionic Spine\",\"Synfibril Muscle\",\"BrachiBlades\",\"Synthetic Heart\",\"Graphene Bone Lacings\"],\"name\":\"Thug 8\"}},{\"ctor\":\"GangMember\",\"data\":{\"task\":\"Cyberterrorism\",\"earnedRespect\":65891.53933795473,\"hack\":5691,\"str\":154,\"def\":38,\"dex\":8,\"agi\":19,\"cha\":37,\"hack_exp\":110564.05162622182,\"str_exp\":269.4093015189109,\"def_exp\":139.13828318442467,\"dex_exp\":82.1700584080941,\"agi_exp\":107.27365502182296,\"cha_exp\":1052.9623861671798,\"hack_mult\":2.2723515045000005,\"str_mult\":8.65899216,\"def_mult\":4.618129152,\"dex_mult\":1.4949999999999999,\"agi_mult\":2.8704,\"cha_mult\":1.04,\"hack_asc_points\":425141.8992404169,\"str_asc_points\":3199.2408435808793,\"def_asc_points\":1246.4968587462693,\"dex_asc_points\":0,\"agi_asc_points\":270.18605342268586,\"cha_asc_points\":43.58504198086666,\"upgrades\":[\"Hmap Node\",\"Baseball Bat\",\"Bulletproof Vest\",\"Ford Flex V20\",\"NUKE Rootkit\",\"Soulstealer Rootkit\",\"Demon Rootkit\",\"Jack the Ripper\"],\"augmentations\":[\"BitWire\",\"DataJack\",\"Bionic Arms\",\"Bionic Legs\",\"Neuralstimulator\",\"Nanofiber Weave\",\"Bionic Spine\",\"Synfibril Muscle\",\"BrachiBlades\",\"Synthetic Heart\",\"Graphene Bone Lacings\"],\"name\":\"Thug 9\"}},{\"ctor\":\"GangMember\",\"data\":{\"task\":\"Cyberterrorism\",\"earnedRespect\":61425.224516401264,\"hack\":12261,\"str\":49,\"def\":19,\"dex\":4,\"agi\":9,\"cha\":23,\"hack_exp\":171823.2478306324,\"str_exp\":84.21785817589995,\"def_exp\":54.78889808078177,\"dex_exp\":32.70498190232432,\"agi_exp\":42.50955050862871,\"cha_exp\":528.1691925790487,\"hack_mult\":2.2723515045000005,\"str_mult\":8.65899216,\"def_mult\":4.618129152,\"dex_mult\":1.4949999999999999,\"agi_mult\":2.8704,\"cha_mult\":1.04,\"hack_asc_points\":1686139.9109585835,\"str_asc_points\":0,\"def_asc_points\":0,\"dex_asc_points\":0,\"agi_asc_points\":0,\"cha_asc_points\":674.3431461154266,\"upgrades\":[\"Baseball Bat\",\"Bulletproof Vest\",\"Ford Flex V20\",\"NUKE Rootkit\",\"Soulstealer Rootkit\",\"Hmap Node\",\"Demon Rootkit\",\"Jack the Ripper\"],\"augmentations\":[\"BitWire\",\"DataJack\",\"Bionic Arms\",\"Bionic Legs\",\"Neuralstimulator\",\"Nanofiber Weave\",\"Bionic Spine\",\"Synfibril Muscle\",\"BrachiBlades\",\"Synthetic Heart\",\"Graphene Bone Lacings\"],\"name\":\"Thug 10\"}},{\"ctor\":\"GangMember\",\"data\":{\"task\":\"Cyberterrorism\",\"earnedRespect\":60008.752572022575,\"hack\":5085,\"str\":103,\"def\":39,\"dex\":8,\"agi\":19,\"cha\":36,\"hack_exp\":99246.66068339837,\"str_exp\":216.89835322811345,\"def_exp\":141.67765956842464,\"dex_exp\":83.66839174142744,\"agi_exp\":109.23045502182295,\"cha_exp\":1022.4612419874103,\"hack_mult\":2.2723515045000005,\"str_mult\":8.65899216,\"def_mult\":4.618129152,\"dex_mult\":1.4949999999999999,\"agi_mult\":2.8704,\"cha_mult\":1.04,\"hack_asc_points\":353443.3830303798,\"str_asc_points\":0,\"def_asc_points\":0,\"dex_asc_points\":0,\"agi_asc_points\":0,\"cha_asc_points\":43.93976694858361,\"upgrades\":[\"Hmap Node\",\"Baseball Bat\",\"Bulletproof Vest\",\"Ford Flex V20\",\"NUKE Rootkit\",\"Soulstealer Rootkit\",\"Demon Rootkit\",\"Jack the Ripper\"],\"augmentations\":[\"BitWire\",\"DataJack\",\"Bionic Arms\",\"Bionic Legs\",\"Neuralstimulator\",\"Nanofiber Weave\",\"Bionic Spine\",\"Synfibril Muscle\",\"BrachiBlades\",\"Synthetic Heart\",\"Graphene Bone Lacings\"],\"name\":\"Thug 11\"}}],\"wanted\":887.9855991989372,\"respect\":1348127.5707451021,\"isHackingGang\":true,\"respectGainRate\":390.01207757247516,\"wantedGainRate\":0.5704077716331737,\"moneyGainRate\":0,\"storedCycles\":694880,\"storedTerritoryAndPowerCycles\":60,\"territoryClashChance\":0,\"territoryWarfareEngaged\":false,\"notifyMemberDeath\":true}},\"corporation\":null,\"bladeburner\":null,\"bladeburner_max_stamina_mult\":1.2540000000000002,\"bladeburner_stamina_gain_mult\":1.1400000000000001,\"bladeburner_analysis_mult\":1.1400000000000001,\"bladeburner_success_chance_mult\":1.3292400000000004,\"sleeves\":[{\"ctor\":\"Sleeve\",\"data\":{\"hacking\":6,\"strength\":16,\"defense\":16,\"dexterity\":16,\"agility\":16,\"charisma\":5,\"intelligence\":1,\"hp\":11,\"max_hp\":11,\"hacking_exp\":360.26731125000015,\"strength_exp\":1343.1994012500504,\"defense_exp\":1343.1994012500504,\"dexterity_exp\":1343.1994012500504,\"agility_exp\":1343.1994012500504,\"charisma_exp\":248.28817500000562,\"intelligence_exp\":1000000,\"hacking_mult\":1,\"strength_mult\":1,\"defense_mult\":1,\"dexterity_mult\":1,\"agility_mult\":1,\"charisma_mult\":1,\"hacking_exp_mult\":1,\"strength_exp_mult\":1,\"defense_exp_mult\":1,\"dexterity_exp_mult\":1,\"agility_exp_mult\":1,\"charisma_exp_mult\":1,\"hacking_chance_mult\":1.1025,\"hacking_speed_mult\":1.126054176048,\"hacking_money_mult\":1.265,\"hacking_grow_mult\":1,\"company_rep_mult\":1,\"faction_rep_mult\":1,\"crime_money_mult\":1,\"crime_success_mult\":1,\"work_money_mult\":1,\"hacknet_node_money_mult\":2.5220937500000002,\"hacknet_node_purchase_cost_mult\":0.765,\"hacknet_node_ram_cost_mult\":1,\"hacknet_node_core_cost_mult\":1,\"hacknet_node_level_cost_mult\":0.85,\"bladeburner_max_stamina_mult\":1,\"bladeburner_stamina_gain_mult\":1,\"bladeburner_analysis_mult\":1,\"bladeburner_success_chance_mult\":1,\"augmentations\":[],\"queuedAugmentations\":[],\"city\":\"Sector-12\",\"className\":\"\",\"crimeType\":\"\",\"currentTask\":2,\"currentTaskLocation\":\"Daedalus\",\"currentTaskMaxTime\":0,\"currentTaskTime\":216000,\"earningsForSleeves\":{\"hack\":354.4119000000003,\"str\":661.6608412500188,\"def\":661.6608412500188,\"dex\":661.6608412500188,\"agi\":661.6608412500188,\"cha\":248.28817500000562,\"money\":0},\"earningsForPlayer\":{\"hack\":354.4119000000003,\"str\":661.6608412500188,\"def\":661.6608412500188,\"dex\":661.6608412500188,\"agi\":661.6608412500188,\"cha\":248.28817500000562,\"money\":1710000},\"earningsForTask\":{\"hack\":21.69369000000024,\"str\":21.69369000000024,\"def\":21.69369000000024,\"dex\":21.69369000000024,\"agi\":21.69369000000024,\"cha\":21.69369000000024,\"money\":0},\"factionWorkType\":0,\"gainRatesForTask\":{\"hack\":0.1,\"str\":0.1,\"def\":0.1,\"dex\":0.1,\"agi\":0.1,\"cha\":0.1,\"money\":0},\"gymStatType\":\"\",\"logs\":[],\"memory\":1,\"shock\":20.140000000000246,\"storedCycles\":814026,\"sync\":100}},{\"ctor\":\"Sleeve\",\"data\":{\"hacking\":6,\"strength\":16,\"defense\":16,\"dexterity\":16,\"agility\":16,\"charisma\":5,\"intelligence\":1,\"hp\":11,\"max_hp\":11,\"hacking_exp\":360.26731125000015,\"strength_exp\":1343.1994012500504,\"defense_exp\":1343.1994012500504,\"dexterity_exp\":1343.1994012500504,\"agility_exp\":1343.1994012500504,\"charisma_exp\":248.28817500000562,\"intelligence_exp\":100000,\"hacking_mult\":1,\"strength_mult\":1,\"defense_mult\":1,\"dexterity_mult\":1,\"agility_mult\":1,\"charisma_mult\":1,\"hacking_exp_mult\":1,\"strength_exp_mult\":1,\"defense_exp_mult\":1,\"dexterity_exp_mult\":1,\"agility_exp_mult\":1,\"charisma_exp_mult\":1,\"hacking_chance_mult\":1,\"hacking_speed_mult\":1,\"hacking_money_mult\":1,\"hacking_grow_mult\":1,\"company_rep_mult\":1,\"faction_rep_mult\":1,\"crime_money_mult\":1,\"crime_success_mult\":1,\"work_money_mult\":1,\"hacknet_node_money_mult\":1,\"hacknet_node_purchase_cost_mult\":1,\"hacknet_node_ram_cost_mult\":1,\"hacknet_node_core_cost_mult\":1,\"hacknet_node_level_cost_mult\":1,\"bladeburner_max_stamina_mult\":1,\"bladeburner_stamina_gain_mult\":1,\"bladeburner_analysis_mult\":1,\"bladeburner_success_chance_mult\":1,\"augmentations\":[],\"queuedAugmentations\":[],\"city\":\"Sector-12\",\"className\":\"\",\"crimeType\":\"\",\"currentTask\":6,\"currentTaskLocation\":\"\",\"currentTaskMaxTime\":0,\"currentTaskTime\":216000,\"earningsForSleeves\":{\"hack\":5.8554112500001025,\"str\":681.5385600000161,\"def\":681.5385600000161,\"dex\":681.5385600000161,\"agi\":681.5385600000161,\"cha\":0,\"money\":0},\"earningsForPlayer\":{\"hack\":5.8554112500001025,\"str\":681.5385600000161,\"def\":681.5385600000161,\"dex\":681.5385600000161,\"agi\":681.5385600000161,\"cha\":0,\"money\":4266000},\"earningsForTask\":{\"hack\":0,\"str\":0,\"def\":0,\"dex\":0,\"agi\":0,\"cha\":0,\"money\":0},\"factionWorkType\":2,\"gainRatesForTask\":{\"hack\":0,\"str\":0,\"def\":0,\"dex\":0,\"agi\":0,\"cha\":0,\"money\":0},\"gymStatType\":\"\",\"logs\":[],\"memory\":1,\"shock\":20.912000000000205,\"storedCycles\":819686,\"sync\":100}}],\"resleeves\":[],\"sleevesFromCovenant\":0,\"bitNodeN\":10,\"lastUpdate\":1645773540723,\"totalPlaytime\":3434608600,\"playtimeSinceLastAug\":16038000,\"playtimeSinceLastBitnode\":184697200,\"moneySourceA\":{\"ctor\":\"MoneySourceTracker\",\"data\":{\"bladeburner\":0,\"casino\":0,\"class\":0,\"codingcontract\":112500000,\"corporation\":0,\"crime\":115066.65538368002,\"gang\":-3377203365.313753,\"hacking\":13803387907.38969,\"hacknet\":34160000000,\"hacknet_expenses\":-2700727587.8353853,\"hospitalization\":0,\"infiltration\":0,\"sleeves\":3438000,\"stock\":0,\"total\":37104360020.89597,\"work\":0,\"servers\":0,\"other\":-280900000,\"augmentations\":-4616250000}},\"moneySourceB\":{\"ctor\":\"MoneySourceTracker\",\"data\":{\"bladeburner\":0,\"casino\":0,\"class\":0,\"codingcontract\":750000000,\"corporation\":0,\"crime\":156003.55138368002,\"gang\":-1948023617197.4885,\"hacking\":125190352956.71237,\"hacknet\":41813000000,\"hacknet_expenses\":-73062621695597040000,\"hospitalization\":0,\"infiltration\":0,\"sleeves\":5976000,\"stock\":0,\"total\":-94995148407176430000,\"work\":0,\"servers\":-21748570758090965000,\"other\":-4805870524937572,\"augmentations\":-179148302698171970}},\"scriptProdSinceLastAug\":12189809864,\"exploits\":[\"N00dles\"],\"achievements\":[{\"ID\":\"FIRST_HACKNET_NODE\",\"unlockedOn\":1642339414658},{\"ID\":\"NS2\",\"unlockedOn\":1642343740615},{\"ID\":\"WORKOUT\",\"unlockedOn\":1642344940610},{\"ID\":\"HACKNET_NODE_10M\",\"unlockedOn\":1642420708995},{\"ID\":\"BRUTESSH.EXE\",\"unlockedOn\":1642422808996},{\"ID\":\"CYBERSEC\",\"unlockedOn\":1642423769004},{\"ID\":\"TOR\",\"unlockedOn\":1642424428998},{\"ID\":\"FTPCRACK.EXE\",\"unlockedOn\":1642426645652},{\"ID\":\"RELAYSMTP.EXE\",\"unlockedOn\":1642428623734},{\"ID\":\"FROZE\",\"unlockedOn\":1642430134063},{\"ID\":\"TRAVEL\",\"unlockedOn\":1642430580714},{\"ID\":\"INSTALL_1\",\"unlockedOn\":1642431300713},{\"ID\":\"SCRIPT_32GB\",\"unlockedOn\":1642433585396},{\"ID\":\"DRAIN_SERVER\",\"unlockedOn\":1642557549229},{\"ID\":\"HTTPWORM.EXE\",\"unlockedOn\":1642585735077},{\"ID\":\"SQLINJECT.EXE\",\"unlockedOn\":1642601629939},{\"ID\":\"THE_BLACK_HAND\",\"unlockedOn\":1642605709947},{\"ID\":\"NITESEC\",\"unlockedOn\":1642642847233},{\"ID\":\"MAX_HACKNET_NODE\",\"unlockedOn\":1642667396271},{\"ID\":\"BITRUNNERS\",\"unlockedOn\":1642729355958},{\"ID\":\"4S\",\"unlockedOn\":1642831049312},{\"ID\":\"DONATION\",\"unlockedOn\":1642852540310},{\"ID\":\"DAEDALUS\",\"unlockedOn\":1642858720310},{\"ID\":\"FORMULAS.EXE\",\"unlockedOn\":1642930710404},{\"ID\":\"SF1.1\",\"unlockedOn\":1642931070401},{\"ID\":\"HOSPITALIZED\",\"unlockedOn\":1643719147173},{\"ID\":\"GANG\",\"unlockedOn\":1643951291171},{\"ID\":\"FULL_GANG\",\"unlockedOn\":1644114751284},{\"ID\":\"GANG_MEMBER_POWER\",\"unlockedOn\":1644114931277},{\"ID\":\"SCRIPTS_30\",\"unlockedOn\":1644229253443},{\"ID\":\"REPUTATION_10M\",\"unlockedOn\":1644240399471},{\"ID\":\"SF2.1\",\"unlockedOn\":1644294751221},{\"ID\":\"N00DLES\",\"unlockedOn\":1644407301828},{\"ID\":\"INTELLIGENCE_255\",\"unlockedOn\":1644458674767},{\"ID\":\"MONEY_1Q\",\"unlockedOn\":1644459210991},{\"ID\":\"HACKING_100000\",\"unlockedOn\":1644459211003},{\"ID\":\"COMBAT_3000\",\"unlockedOn\":1644459211007},{\"ID\":\"NEUROFLUX_255\",\"unlockedOn\":1644459211010},{\"ID\":\"SF5.1\",\"unlockedOn\":1644459968438},{\"ID\":\"SF4.1\",\"unlockedOn\":1644729037583},{\"ID\":\"CORPORATION\",\"unlockedOn\":1644729479031},{\"ID\":\"MAX_CORES\",\"unlockedOn\":1644730210876},{\"ID\":\"DISCOUNT\",\"unlockedOn\":1644730599770},{\"ID\":\"BLADEBURNER_DIVISION\",\"unlockedOn\":1644745467606},{\"ID\":\"30_HACKNET_NODE\",\"unlockedOn\":1644801695411},{\"ID\":\"GANG_TERRITORY\",\"unlockedOn\":1644806148679},{\"ID\":\"FAST_BN\",\"unlockedOn\":1644814610139},{\"ID\":\"SF6.1\",\"unlockedOn\":1644814670139},{\"ID\":\"SF7.1\",\"unlockedOn\":1644814834054},{\"ID\":\"FIRST_HACKNET_SERVER\",\"unlockedOn\":1644814834064},{\"ID\":\"HACKNET_SERVER_1B\",\"unlockedOn\":1644832336755},{\"ID\":\"ILLUMINATI\",\"unlockedOn\":1645067034588},{\"ID\":\"THE_COVENANT\",\"unlockedOn\":1645067154325},{\"ID\":\"SF9.1\",\"unlockedOn\":1645087517721},{\"ID\":\"MAX_RAM\",\"unlockedOn\":1645087577725},{\"ID\":\"INDECISIVE\",\"unlockedOn\":1645588091930},{\"ID\":\"SF10.1\",\"unlockedOn\":1645588834995}],\"factionWorkType\":\"Faction Hacking Work\",\"committingCrimeThruSingFn\":false,\"singFnCrimeWorkerScript\":null}}","AllServersSave":"{\"home\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":8,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"home\",\"httpPortOpen\":false,\"ip\":\"67.3.0.0\",\"isConnectedTo\":true,\"maxRam\":1073741824,\"messages\":[\"hackers-starting-handbook.lit\",\"j0.msg\",\"j1.msg\",\"csec-test.msg\",\"j2.msg\",\"nitesec-test.msg\",\"j3.msg\",\"j4.msg\",\"19dfj3l1nd.msg\"],\"organizationName\":\"Home PC\",\"programs\":[\"NUKE.exe\",\"b1t_flum3.exe\",\"FTPCrack.exe\",\"relaySMTP.exe\",\"Formulas.exe\",\"BruteSSH.exe\",\"HTTPWorm.exe\",\"SQLInject.exe\",\"fl1ght.exe\"],\"ramUsed\":966379665,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"-s\"],\"dataMap\":{},\"filename\":\"daemon.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":323237107.4000031,\"offlineMoneyMade\":0,\"offlineRunningTime\":533.297,\"onlineExpGained\":8735451089.753696,\"onlineMoneyMade\":11808167155,\"onlineRunningTime\":15496.410000000116,\"pid\":1,\"ramUsage\":4,\"server\":\"home\",\"threads\":1,\"dependencies\":[{\"filename\":\"helpers.js\",\"url\":\"blob:https://danielyxie.github.io/498b4784-4ccf-4aab-bd78-9019dc18e014\",\"moduleSequenceNumber\":147},{\"filename\":\"daemon.js\",\"url\":\"blob:https://danielyxie.github.io/9b67c318-4bfb-498e-ab32-d8f28c2df5e2\",\"moduleSequenceNumber\":269}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{},\"filename\":\"stats.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":533.3340000000001,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":15496.010000000117,\"pid\":2,\"ramUsage\":3.3,\"server\":\"home\",\"threads\":1,\"dependencies\":[{\"filename\":\"helpers.js\",\"url\":\"blob:https://danielyxie.github.io/32f7a86f-d8a1-4ec3-817c-999b6842affb\",\"moduleSequenceNumber\":147},{\"filename\":\"stats.js\",\"url\":\"blob:https://danielyxie.github.io/4b31989a-5546-4546-b1cc-db5e390b1a28\",\"moduleSequenceNumber\":270}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"-c\",\"--max-payoff-time\",\"1h\"],\"dataMap\":{},\"filename\":\"hacknet-upgrade-manager.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":533.39,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":15496.010000000117,\"pid\":3,\"ramUsage\":6.1,\"server\":\"home\",\"threads\":1,\"dependencies\":[{\"filename\":\"helpers.js\",\"url\":\"blob:https://danielyxie.github.io/b71da54c-43fd-4dc8-aea1-5b1630e365f5\",\"moduleSequenceNumber\":147},{\"filename\":\"hacknet-upgrade-manager.js\",\"url\":\"blob:https://danielyxie.github.io/d4046c6d-55c8-45b5-9e58-b7c4b4ed515e\",\"moduleSequenceNumber\":319}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{},\"filename\":\"gangs.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":533.449,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":15496.010000000117,\"pid\":4,\"ramUsage\":4.7,\"server\":\"home\",\"threads\":1,\"dependencies\":[{\"filename\":\"helpers.js\",\"url\":\"blob:https://danielyxie.github.io/9978cccb-5da5-4323-a0e8-99a47dfb8136\",\"moduleSequenceNumber\":147},{\"filename\":\"gangs.js\",\"url\":\"blob:https://danielyxie.github.io/f678623a-f9d6-4b75-8901-41c8b269cab5\",\"moduleSequenceNumber\":271}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"-v\"],\"dataMap\":{},\"filename\":\"spend-hacknet-hashes.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":533.494,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":15496.010000000117,\"pid\":5,\"ramUsage\":5.6,\"server\":\"home\",\"threads\":1,\"dependencies\":[{\"filename\":\"helpers.js\",\"url\":\"blob:https://danielyxie.github.io/ee6576e2-c279-4245-9b2a-a2bd6104f4dc\",\"moduleSequenceNumber\":147},{\"filename\":\"spend-hacknet-hashes.js\",\"url\":\"blob:https://danielyxie.github.io/52fd1ce6-7966-446c-867c-0930f66f29e4\",\"moduleSequenceNumber\":272}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{},\"filename\":\"sleeve.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":533.515,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":15496.010000000117,\"pid\":6,\"ramUsage\":6.8,\"server\":\"home\",\"threads\":1,\"dependencies\":[{\"filename\":\"helpers.js\",\"url\":\"blob:https://danielyxie.github.io/2a768ba4-d31c-488e-83fa-791b5c18aac3\",\"moduleSequenceNumber\":147},{\"filename\":\"sleeve.js\",\"url\":\"blob:https://danielyxie.github.io/93098683-d007-44d1-af4c-e5da15da3d10\",\"moduleSequenceNumber\":273}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[1645773535013],\"dataMap\":{},\"filename\":\"/Remote/share.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":5.810000000000003,\"pid\":665,\"ramUsage\":4,\"server\":\"home\",\"threads\":241592071,\"dependencies\":[{\"filename\":\"/Remote/share.js\",\"url\":\"blob:https://danielyxie.github.io/b397c921-f131-4521-a341-795036e59818\",\"moduleSequenceNumber\":268}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"harakiri-sushi\",1645773548183,1645773548469,286,\"Batch 0-grow\",0,0],\"dataMap\":{},\"filename\":\"/Remote/grow-target.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1.8099999999999998,\"pid\":677,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":345,\"dependencies\":[{\"filename\":\"/Remote/grow-target.js\",\"url\":\"blob:https://danielyxie.github.io/df44db7b-8851-4cb4-96fa-f25581098aa5\",\"moduleSequenceNumber\":281}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"harakiri-sushi\",1645773552112,1645773552469,357,\"Batch 0-weak2\",1,0],\"dataMap\":{},\"filename\":\"/Remote/weak-target.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1.8099999999999998,\"pid\":679,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":28,\"dependencies\":[{\"filename\":\"/Remote/weak-target.js\",\"url\":\"blob:https://danielyxie.github.io/bcebdb84-fb57-4fc0-a07d-ec4c92c7b604\",\"moduleSequenceNumber\":283}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"harakiri-sushi\",1645773544112,1645773544469,357,\"Batch 0-weak1\",1,0],\"dataMap\":{},\"filename\":\"/Remote/weak-target.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1.8099999999999998,\"pid\":680,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":1,\"dependencies\":[{\"filename\":\"/Remote/weak-target.js\",\"url\":\"blob:https://danielyxie.github.io/bcebdb84-fb57-4fc0-a07d-ec4c92c7b604\",\"moduleSequenceNumber\":283}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"hong-fang-tea\",1645773548189,1645773548439,250,\"Batch 0-grow\",0,0],\"dataMap\":{},\"filename\":\"/Remote/grow-target.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1.8099999999999998,\"pid\":681,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":695,\"dependencies\":[{\"filename\":\"/Remote/grow-target.js\",\"url\":\"blob:https://danielyxie.github.io/df44db7b-8851-4cb4-96fa-f25581098aa5\",\"moduleSequenceNumber\":281}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"hong-fang-tea\",1645773552126,1645773552439,313,\"Batch 0-weak2\",1,0],\"dataMap\":{},\"filename\":\"/Remote/weak-target.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1.8099999999999998,\"pid\":683,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":56,\"dependencies\":[{\"filename\":\"/Remote/weak-target.js\",\"url\":\"blob:https://danielyxie.github.io/bcebdb84-fb57-4fc0-a07d-ec4c92c7b604\",\"moduleSequenceNumber\":283}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"hong-fang-tea\",1645773544126,1645773544439,313,\"Batch 0-weak1\",1,0],\"dataMap\":{},\"filename\":\"/Remote/weak-target.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1.8099999999999998,\"pid\":684,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":1,\"dependencies\":[{\"filename\":\"/Remote/weak-target.js\",\"url\":\"blob:https://danielyxie.github.io/bcebdb84-fb57-4fc0-a07d-ec4c92c7b604\",\"moduleSequenceNumber\":283}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"nectar-net\",1645773548195,1645773548438,243,\"Batch 0-grow\",0,0],\"dataMap\":{},\"filename\":\"/Remote/grow-target.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1.8099999999999998,\"pid\":685,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":528,\"dependencies\":[{\"filename\":\"/Remote/grow-target.js\",\"url\":\"blob:https://danielyxie.github.io/df44db7b-8851-4cb4-96fa-f25581098aa5\",\"moduleSequenceNumber\":281}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"nectar-net\",1645773552134,1645773552438,304,\"Batch 0-weak2\",1,0],\"dataMap\":{},\"filename\":\"/Remote/weak-target.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1.8099999999999998,\"pid\":687,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":43,\"dependencies\":[{\"filename\":\"/Remote/weak-target.js\",\"url\":\"blob:https://danielyxie.github.io/bcebdb84-fb57-4fc0-a07d-ec4c92c7b604\",\"moduleSequenceNumber\":283}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"nectar-net\",1645773544134,1645773544438,304,\"Batch 0-weak1\",1,0],\"dataMap\":{},\"filename\":\"/Remote/weak-target.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1.8099999999999998,\"pid\":688,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":1,\"dependencies\":[{\"filename\":\"/Remote/weak-target.js\",\"url\":\"blob:https://danielyxie.github.io/bcebdb84-fb57-4fc0-a07d-ec4c92c7b604\",\"moduleSequenceNumber\":283}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"sigma-cosmetics\",1645773548179,1645773548333,154,\"Batch 0-grow\",0,0],\"dataMap\":{},\"filename\":\"/Remote/grow-target.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1.8099999999999998,\"pid\":689,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":1205,\"dependencies\":[{\"filename\":\"/Remote/grow-target.js\",\"url\":\"blob:https://danielyxie.github.io/df44db7b-8851-4cb4-96fa-f25581098aa5\",\"moduleSequenceNumber\":281}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"sigma-cosmetics\",1645773552141,1645773552333,192,\"Batch 0-weak2\",1,0],\"dataMap\":{},\"filename\":\"/Remote/weak-target.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1.8099999999999998,\"pid\":691,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":97,\"dependencies\":[{\"filename\":\"/Remote/weak-target.js\",\"url\":\"blob:https://danielyxie.github.io/bcebdb84-fb57-4fc0-a07d-ec4c92c7b604\",\"moduleSequenceNumber\":283}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"sigma-cosmetics\",1645773544141,1645773544333,192,\"Batch 0-weak1\",1,0],\"dataMap\":{},\"filename\":\"/Remote/weak-target.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1.8099999999999998,\"pid\":692,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":1,\"dependencies\":[{\"filename\":\"/Remote/weak-target.js\",\"url\":\"blob:https://danielyxie.github.io/bcebdb84-fb57-4fc0-a07d-ec4c92c7b604\",\"moduleSequenceNumber\":283}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"foodnstuff\",1645773548185,1645773548330,145,\"Batch 0-grow\",0,0],\"dataMap\":{},\"filename\":\"/Remote/grow-target.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1.8099999999999998,\"pid\":693,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":2418,\"dependencies\":[{\"filename\":\"/Remote/grow-target.js\",\"url\":\"blob:https://danielyxie.github.io/df44db7b-8851-4cb4-96fa-f25581098aa5\",\"moduleSequenceNumber\":281}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"foodnstuff\",1645773552148,1645773552330,182,\"Batch 0-weak2\",1,0],\"dataMap\":{},\"filename\":\"/Remote/weak-target.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1.8099999999999998,\"pid\":695,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":194,\"dependencies\":[{\"filename\":\"/Remote/weak-target.js\",\"url\":\"blob:https://danielyxie.github.io/bcebdb84-fb57-4fc0-a07d-ec4c92c7b604\",\"moduleSequenceNumber\":283}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"foodnstuff\",1645773544148,1645773544330,182,\"Batch 0-weak1\",1,0],\"dataMap\":{},\"filename\":\"/Remote/weak-target.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1.8099999999999998,\"pid\":696,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":1,\"dependencies\":[{\"filename\":\"/Remote/weak-target.js\",\"url\":\"blob:https://danielyxie.github.io/bcebdb84-fb57-4fc0-a07d-ec4c92c7b604\",\"moduleSequenceNumber\":283}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"iron-gym\",1645773549392,1645773550249,857,\"Batch 0-grow\",0,0],\"dataMap\":{},\"filename\":\"/Remote/grow-target.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.6100000000000001,\"pid\":700,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":806,\"dependencies\":[{\"filename\":\"/Remote/grow-target.js\",\"url\":\"blob:https://danielyxie.github.io/df44db7b-8851-4cb4-96fa-f25581098aa5\",\"moduleSequenceNumber\":281}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"iron-gym\",1645773553178,1645773554249,1071,\"Batch 0-weak2\",1,0],\"dataMap\":{},\"filename\":\"/Remote/weak-target.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.6100000000000001,\"pid\":702,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":65,\"dependencies\":[{\"filename\":\"/Remote/weak-target.js\",\"url\":\"blob:https://danielyxie.github.io/bcebdb84-fb57-4fc0-a07d-ec4c92c7b604\",\"moduleSequenceNumber\":283}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"iron-gym\",1645773545178,1645773546249,1071,\"Batch 0-weak1\",1,0],\"dataMap\":{},\"filename\":\"/Remote/weak-target.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.6100000000000001,\"pid\":703,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":1,\"dependencies\":[{\"filename\":\"/Remote/weak-target.js\",\"url\":\"blob:https://danielyxie.github.io/bcebdb84-fb57-4fc0-a07d-ec4c92c7b604\",\"moduleSequenceNumber\":283}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"let options;\\nconst argsSchema = [\\n    ['github', 'zyh66615'],\\n    ['repository', 'bitburner-something'],\\n    ['branch', 'main'],\\n    ['download', []], // By default, all supported files in the repository will be downloaded. Override with just a subset of files here\\n    ['new-file', []], // If a repository listing fails, only files returned by ns.ls() will be downloaded. You can add additional files to seek out here.\\n    ['subfolder', ''], // Can be set to download to a sub-folder that is not part of the remote repository structure\\n    ['extension', ['.js', '.ns', '.txt', '.script']], // Files to download by extension\\n    ['omit-folder', ['/Temp/']], // Folders to omit\\n];\\n\\nexport function autocomplete(data, args) {\\n    data.flags(argsSchema);\\n    const lastFlag = args.length > 1 ? args[args.length - 2] : null;\\n    if ([\\\"--download\\\", \\\"--subfolder\\\", \\\"--omit-folder\\\"].includes(lastFlag))\\n        return data.scripts;\\n    return [];\\n}\\n\\n/** @param {NS} ns \\n * Will try to download a fresh version of every file on the current server.\\n * You are responsible for:\\n * - Backing up your save / scripts first (try `download *` in the terminal)\\n * - Ensuring you have no local changes that you don't mind getting overwritten\\n * TODO: Some way to list all files in the repository and/or download them all. **/\\nexport async function main(ns) {\\n    options = ns.flags(argsSchema);    \\n    if (options.subfolder && !options.subfolder.startsWith('/'))\\n        options.subfolder = '/' + options.subfolder; // Game requires folders to have a leading slash. Add one if it's missing.\\n    const baseUrl = `https://raw.githubusercontent.com/${options.github}/${options.repository}/${options.branch}/`;\\n    const filesToDownload = options['new-file'].concat(options.download.length > 0 ? options.download : await repositoryListing(ns));\\n    for (const localFilePath of filesToDownload) {\\n        let fullLocalFilePath = pathJoin(options.subfolder, localFilePath);\\n        const remoteFilePath = baseUrl + localFilePath;\\n        ns.print(`Trying to update \\\"${fullLocalFilePath}\\\" from ${remoteFilePath} ...`);\\n        if (await ns.wget(`${remoteFilePath}?ts=${new Date().getTime()}`, fullLocalFilePath) && await rewriteFileForSubfolder(ns, fullLocalFilePath))\\n            ns.tprint(`SUCCESS: Updated \\\"${localFilePath}\\\" to the latest from ${remoteFilePath}`);\\n        else\\n            ns.tprint(`WARNING: \\\"${localFilePath}\\\" was not updated. (Currently running or not located at ${remoteFilePath} )`)\\n    }\\n}\\n\\n/** Joins all arguments as components in a path, e.g. pathJoin(\\\"foo\\\", \\\"bar\\\", \\\"/baz\\\") = \\\"foo/bar/baz\\\" **/\\nfunction pathJoin(...args) {\\n    return args.filter(s => !!s).join('/').replace(/\\\\/\\\\/+/g, '/');\\n}\\n\\n/** @param {NS} ns\\n * Rewrites a file with path substitions to handle downloading to a subfolder. **/\\nexport async function rewriteFileForSubfolder(ns, path) {\\n    if (!options.subfolder || path.includes('git-pull.js'))\\n        return true;\\n    let contents = ns.read(path);\\n    // Replace subfolder reference in helpers.js getFilePath:\\n    contents = contents.replace(`const subfolder = ''`, `const subfolder = '${options.subfolder}/'`);\\n    // Replace any imports, which can't use getFilePath:\\n    contents = contents.replace(/from '(\\\\.\\\\/)?(.*)'/g, `from '${pathJoin(options.subfolder, '$2')}'`);\\n    await ns.write(path, contents, 'w');\\n    return true;\\n}\\n\\n/** @param {NS} ns \\n * Gets a list of files to download, either from the github repository (if supported), or using a local directory listing **/\\nasync function repositoryListing(ns, folder = '') {\\n    // Note: Limit of 60 free API requests per day, don't over-do it\\n    const listUrl = `https://api.github.com/repos/${options.github}/${options.repository}/contents/${folder}?ref=${options.branch}`\\n    let response = null;\\n    try {\\n        response = await fetch(listUrl); // Raw response\\n        // Expect an array of objects: [{path:\\\"\\\", type:\\\"[file|dir]\\\" },{...},...]\\n        response = await response.json(); // Deserialized\\n        // Sadly, we must recursively retrieve folders, which eats into our 60 free API requests per day.\\n        const folders = response.filter(f => f.type == \\\"dir\\\").map(f => f.path);\\n        let files = response.filter(f => f.type == \\\"file\\\").map(f => f.path)\\n            .filter(f => options.extension.some(ext => f.endsWith(ext)));\\n        ns.print(`The following files exist at ${listUrl}\\\\n${files.join(\\\", \\\")}`);\\n        for (const folder of folders)\\n            files = files.concat((await repositoryListing(ns, folder))\\n                .map(f => `/${f}`)); // Game requires folders to have a leading slash\\n        return files;\\n    } catch (error) {\\n        if (folder !== '') throw error; // Propagate the error if this was a recursive call.\\n        ns.tprint(`WARNING: Failed to get a repository listing (GitHub API request limit of 60 reached?): ${listUrl}` +\\n            `\\\\nResponse Contents (if available): ${JSON.stringify(response ?? '(N/A)')}\\\\nError: ${String(error)}`);\\n        // Fallback, assume the user already has a copy of all files in the repo, and use it as a directory listing\\n        return ns.ls('home').filter(name => options.extension.some(ext => f.endsWith(ext)) &&\\n            !options['omit-folder'].some(dir => name.startsWith(dir)));\\n    }\\n}\",\"filename\":\"git-pull.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"git-pull.js\",\"url\":\"blob:file:///0fd8bfdd-acf5-47db-b535-1e80130600bd\",\"moduleSequenceNumber\":17030}],\"dependents\":[],\"ramUsage\":1.8,\"server\":\"home\",\"moduleSequenceNumber\":130,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    for (let file of ns.ls('home')) {\\n        if (file != 'git-pull.js' || file != 'NUKE.exe') {\\n            ns.rm(file)\\n        }\\n    }\\n}\",\"filename\":\"rm.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"rm.js\",\"url\":\"blob:file:///36446536-7871-45b7-bf87-74bbb5e85732\",\"moduleSequenceNumber\":12694}],\"dependents\":[],\"ramUsage\":2.8,\"server\":\"home\",\"moduleSequenceNumber\":131,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"rm\",\"cost\":1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { disableLogs, formatMoney, scanAllServers } from './helpers.js'\\n\\nconst argsSchema = [\\n    ['all', false],\\n    ['silent', false],\\n    ['at-hack-level', 0],\\n    ['hack-percent', -1],\\n    ['include-hacknet-ram', false],\\n];\\n\\nexport function autocomplete(data, args) {\\n    data.flags(argsSchema);\\n    return [];\\n}\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    disableLogs(ns, [\\\"scan\\\", \\\"sleep\\\"]);\\n\\n    let serverNames = scanAllServers(ns);\\n\\n    var weaken_ram = 1.75;\\n    var grow_ram = 1.75;\\n    var hack_ram = 1.7;\\n\\n    const flags = ns.flags(argsSchema);\\n    var hack_percent = flags['hack-percent'] / 100;\\n    var use_est_hack_percent = false;\\n    if (flags['hack-percent'] == -1) {\\n        use_est_hack_percent = true;\\n    } else {\\n        hack_percent = flags['hack-percent'] / 100;\\n        if (hack_percent <= 0 || hack_percent >= 1) {\\n            ns.tprint(\\\"hack-percent out of range (0-100)\\\");\\n            return;\\n        }\\n    }\\n\\n    var player = ns.getPlayer();\\n    //ns.print(JSON.stringify(player));\\n\\n    if (flags['at-hack-level']) player.hacking = flags['at-hack-level'];\\n    var servers = serverNames.map(ns.getServer);\\n    // Compute the total RAM available to us on all servers (e.g. for running hacking scripts)\\n    var ram_total = servers.reduce(function (total, server) {\\n        if (!server.hasAdminRights || (server.hostname.startsWith('hacknet') && !flags['include-hacknet-ram'])) return total;\\n        return total + server.maxRam;\\n    }, 0);\\n\\n    // Helper to compute server gain/exp rates at a specific hacking level\\n    function getRatesAtHackLevel(server, player, hackLevel) {\\n        // Assume we will have wekened the server to min-security and taken it to max money before targetting\\n        server.hackDifficulty = server.minDifficulty;\\n        server.moneyAvailable = server.moneyMax;\\n        // Temporarily change the hack level on the player object to the requested level\\n        const real_player_hack_skill = player.hacking;\\n        player.hacking = hackLevel;\\n        // Compute the cost (ram*seconds) for each tool\\n        try {\\n            const weakenCost = weaken_ram * ns.formulas.hacking.weakenTime(server, player);\\n            const growCost = grow_ram * ns.formulas.hacking.growTime(server, player) + weakenCost * 0.004 / 0.05;\\n            const hackCost = hack_ram * ns.formulas.hacking.hackTime(server, player) + weakenCost * 0.002 / 0.05;\\n\\n            // Compute the growth and hack gain rates\\n            const growGain = Math.log(ns.formulas.hacking.growPercent(server, 1, player, 1));\\n            const hackGain = ns.formulas.hacking.hackPercent(server, player);\\n            server.estHackPercent = Math.min(0.98, Math.min(ram_total * hackGain / hackCost, 1 - 1 / Math.exp(ram_total * growGain / growCost))); // TODO: I think these might be off by a factor of 2x\\n            if (use_est_hack_percent) hack_percent = server.estHackPercent;\\n            const grows_per_cycle = -Math.log(1 - hack_percent) / growGain;\\n            const hacks_per_cycle = hack_percent / hackGain;\\n            const hackProfit = server.moneyMax * hack_percent * ns.formulas.hacking.hackChance(server, player);\\n            // Compute the relative monetary gain\\n            const theoreticalGainRate = hackProfit / (growCost * grows_per_cycle + hackCost * hacks_per_cycle) * 1000 /* Convert per-millisecond rate to per-second */;\\n            const expRate = ns.formulas.hacking.hackExp(server, player) * (1 + 0.002 / 0.05) / (hackCost) * 1000;\\n            // The practical cap on revenue is based on your hacking scripts. For my hacking scripts this is about 20% per second, adjust as needed\\n            // No idea why we divide by ram_total - Basically ensures that as our available RAM gets larger, the sort order merely becomes \\\"by server max money\\\"\\n            const cappedGainRate = Math.min(theoreticalGainRate, hackProfit / ram_total);\\n            ns.print(`At hack level ${hackLevel} and steal ${(hack_percent * 100).toPrecision(3)}%: Theoretical ${formatMoney(theoreticalGainRate)}, ` +\\n                `Limit: ${formatMoney(hackProfit / ram_total)}, Exp: ${expRate.toPrecision(3)}, Hack Chance: ${(ns.formulas.hacking.hackChance(server, player) * 100).toPrecision(3)}% (${server.hostname})`);\\n            player.hacking = real_player_hack_skill; // Restore the real hacking skill if we changed it temporarily\\n            return [theoreticalGainRate, cappedGainRate, expRate];\\n        }\\n        catch {\\n            // Formulas API unavailable?\\n            return [server.moneyMax, server.moneyMax, 1 / server.minDifficulty];\\n        }\\n    }\\n\\n    ns.print(`All? ${flags['all']} Player hack: ${player.hacking} Ram total: ${ram_total}`);\\n    //ns.print(`\\\\n` + servers.map(s => `${s.hostname} bought: ${s.purchasedByPlayer} moneyMax: ${s.moneyMax} admin: ${s.hasAdminRights} hack: ${s.requiredHackingSkill}`).join('\\\\n'));\\n\\n    // Filter down to the list of servers we wish to report on\\n    servers = servers.filter(server => !server.purchasedByPlayer && (server.moneyMax || 0) > 0 &&\\n        (flags['all'] || server.hasAdminRights && server.requiredHackingSkill <= player.hacking));\\n\\n    // First address the servers within our hacking level\\n    const unlocked_servers = servers.filter(s => s.requiredHackingSkill <= player.hacking)\\n        .map(function (server) {\\n            [server.theoreticalGainRate, server.gainRate, server.expRate] = getRatesAtHackLevel(server, player, player.hacking);\\n            return server;\\n        });\\n    // The best server's gain rate will be used to pro-rate the relative gain of servers that haven't been unlocked yet (if they were unlocked at this level)\\n    const best_unlocked_server = unlocked_servers.sort((a, b) => b.gainRate - a.gainRate)[0];\\n    // Compute locked server's gain rates (pro rated back to the current player's hack level)\\n    const locked_servers = servers.filter(s => s.requiredHackingSkill > player.hacking).sort((a, b) => a.requiredHackingSkill - b.requiredHackingSkill)\\n        .map(function (server) {\\n            // We will need to fake the hacking skill to get the numbers for when this server will first be unlocked, but to keep the comparison\\n            // fair, we will need to scale down the gain by the amount current best server gains now, verses what it would gain at that hack level.\\n            const [bestUnlockedScaledGainRate, _, bestUnlockedScaledExpRate] = getRatesAtHackLevel(best_unlocked_server, player, server.requiredHackingSkill);\\n            const gainRateScaleFactor = best_unlocked_server.theoreticalGainRate / bestUnlockedScaledGainRate;\\n            const expRateScaleFactor = best_unlocked_server.expRate / bestUnlockedScaledExpRate;\\n            const [theoreticalGainRate, cappedGainRate, expRate] = getRatesAtHackLevel(server, player, server.requiredHackingSkill);\\n            // Apply the scaling factors, as well as the same cap as above\\n            server.theoreticalGainRate = theoreticalGainRate * gainRateScaleFactor;\\n            server.expRate = expRate * expRateScaleFactor;\\n            server.gainRate = Math.min(server.theoreticalGainRate, cappedGainRate);\\n            ns.print(`${server.hostname}: Scaled theoretical gain by ${gainRateScaleFactor.toPrecision(3)} to ${formatMoney(server.theoreticalGainRate)} ` +\\n                `(capped at ${formatMoney(cappedGainRate)}) and exp by ${expRateScaleFactor.toPrecision(3)} to ${server.expRate.toPrecision(3)}`);\\n            return server;\\n        }) || [];\\n    // Combine the lists, sort, and display a summary.\\n    const server_eval = unlocked_servers.concat(locked_servers);\\n    const best_server = server_eval.sort((a, b) => b.gainRate - a.gainRate)[0];\\n    if (!flags['silent'])\\n        ns.tprint(\\\"Best server: \\\", best_server.hostname, \\\" with \\\", formatMoney(best_server.gainRate), \\\" per ram-second\\\");\\n\\n    let order = 1;\\n    let serverListByGain = `Servers in order of best to worst hack money at Hack ${player.hacking}:`;\\n    for (const server of server_eval)\\n        serverListByGain += `\\\\n ${order++} ${server.hostname}, with ${formatMoney(server.gainRate)} per ram-second while stealing ` +\\n            `${(server.estHackPercent * 100).toPrecision(3)}% (unlocked at hack ${server.requiredHackingSkill})`;\\n    ns.print(serverListByGain);\\n\\n    var best_exp_server = server_eval.sort(function (a, b) {\\n        return b.expRate - a.expRate;\\n    })[0];\\n    if (!flags['silent'])\\n        ns.tprint(\\\"Best exp server: \\\", best_exp_server.hostname, \\\" with \\\", best_exp_server.expRate, \\\" exp per ram-second\\\");\\n    order = 1;\\n    let serverListByExp = `Servers in order of best to worst hack exp at Hack ${player.hacking}:`;\\n    for (let i = 0; i < 5; i++)\\n        serverListByExp += `\\\\n ${order++} ${server_eval[i].hostname}, with ${server_eval[i].expRate.toPrecision(3)} exp per ram-second`;\\n    ns.print(serverListByExp);\\n\\n    ns.write('/Temp/analyze-hack.txt', JSON.stringify(server_eval.map(s => ({\\n        hostname: s.hostname,\\n        gainRate: s.gainRate,\\n        expRate: s.expRate\\n    }))), \\\"w\\\");\\n    // Below is stats for hacknet servers - uncomment at cost of 4 GB Ram\\n    /*\\n    var hacknet_nodes = [...(function* () {\\n        var n = ns.hacknet.numNodes();\\n        for (var i = 0; i < n; i++) {\\n            var server = ns.hacknet.getNodeStats(i);\\n            server.gainRate = 1000000 / 4 * server.production / server.ram;\\n            yield server;\\n        }\\n    })()];\\n    var best_hacknet_node = hacknet_nodes.sort(function (a, b) {\\n        return b.gainRate - a.gainRate;\\n    })[0];\\n    if (best_hacknet_node) ns.tprint(\\\"Best hacknet node: \\\", best_hacknet_node.name, \\\" with $\\\", best_hacknet_node.gainRate, \\\" per ram-second\\\");\\n    */\\n}\",\"filename\":\"analyze-hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"helpers.js\",\"url\":\"blob:https://danielyxie.github.io/da4c25c5-5112-45cc-a952-70a682f4da27\",\"moduleSequenceNumber\":142},{\"filename\":\"analyze-hack.js\",\"url\":\"blob:https://danielyxie.github.io/37108ff4-647d-4919-99ea-1ca42e43e248\",\"moduleSequenceNumber\":311}],\"dependents\":[],\"ramUsage\":4.3,\"server\":\"home\",\"moduleSequenceNumber\":311,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { scanAllServers } from './helpers.js'\\n\\n// the purpose of cascade kill is to kill all scripts running on any server in the game\\n// but saving the host that you run it on for last (so that it doesn't kill itself prematurely)\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    var startingNode = ns.getHostname();\\n    const serverList = scanAllServers(ns);\\n\\n    // Send the kill command to all servers\\n    for (const server of serverList) {\\n        // skip if this host, we save it for last\\n        if (server == startingNode)\\n            continue;\\n\\n        // skip if not running anything\\n        if (ns.ps(server) === 0)\\n            continue;\\n\\n        // kill all scripts\\n        ns.killall(server);\\n    }\\n\\n    // idle for things to die\\n    for (const server of serverList) {\\n        // skip if this host, we save it for last\\n        if (server == startingNode)\\n            continue;\\n        // idle until they're dead, this is to avoid killing the cascade before it's finished.\\n        while (ns.ps(server) > 0) {\\n            await ns.sleep(20);\\n        }\\n        // Remove script files the daemon would have copied over (in case we update the source)\\n        for (let file of ns.ls(server, '.js'))\\n            ns.rm(file, server)\\n    }\\n\\n    // wait to kill these. This kills itself, obviously.\\n    ns.killall(startingNode);\\n}\",\"filename\":\"cascade-kill.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.75,\"server\":\"home\",\"moduleSequenceNumber\":133,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ps\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"rm\",\"cost\":1},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    for (let file of ns.ls('home', '/Temp/'))\\n        ns.rm(file);\\n}\",\"filename\":\"cleanup.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.8,\"server\":\"home\",\"moduleSequenceNumber\":134,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"rm\",\"cost\":1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { formatDuration, formatNumberShort } from './helpers.js'\\nimport { crimeForKillsKarmaStats } from './work-for-factions.js'\\n\\nconst crimes = [\\\"shoplift\\\", \\\"rob store\\\", \\\"mug\\\", \\\"larceny\\\", \\\"deal drugs\\\", \\\"bond forgery\\\", \\\"traffick arms\\\", \\\"homicide\\\", \\\"grand theft auto\\\", \\\"kidnap\\\", \\\"assassinate\\\", \\\"heist\\\"]\\nexport function autocomplete() { return crimes; }\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    ns.disableLog('sleep');\\n    let crime = ns.args.length == 0 ? undefined : ns.args.join(\\\" \\\"); // Need to join in case the crime has a space in it - it will be treated as two args\\n    ns.tail();\\n    if (!crime || ns.args.includes(\\\"--fast-crimes-only\\\")) // More sophisticated auto-scaling crime logic\\n        await crimeForKillsKarmaStats(ns, 0, 0, Number.MAX_SAFE_INTEGER, ns.commitCrime, ns.args.includes(\\\"--fast-crimes-only\\\"));\\n    else // Simple crime loop for the specified crime\\n        await legacyAutoCrime(ns, crime);\\n}\\n\\n/** @param {NS} ns **/\\nasync function legacyAutoCrime(ns, crime = \\\"mug\\\") {\\n    let interval = 100;\\n    while (true) {\\n        let maxBusyLoops = 100;\\n        while (ns.isBusy() && maxBusyLoops-- > 0) {\\n            await ns.sleep(interval);\\n            ns.print(\\\"Waiting to no longer be busy...\\\");\\n        }\\n        if (maxBusyLoops <= 0) {\\n            ns.tprint(\\\"User have been busy for too long. auto-crime.js exiting...\\\");\\n            return;\\n        }\\n        ns.tail(); // Force a tail window open when auto-criming, or else it's very difficult to stop if it was accidentally closed.\\n        let wait = ns.commitCrime(crime) + 10;\\n        ns.print(`Karma: ${formatNumberShort(ns.heart.break())} Committing crime \\\\\\\"${crime}\\\\\\\" and sleeping for ${formatDuration(wait)}...`);\\n        await ns.sleep(wait);\\n    }\\n}\",\"filename\":\"crime.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"helpers.js\",\"url\":\"blob:https://danielyxie.github.io/75549127-4322-423a-8ff6-9dfacd29beb1\",\"moduleSequenceNumber\":142},{\"filename\":\"work-for-factions.js\",\"url\":\"blob:https://danielyxie.github.io/d378d06b-fb5e-458d-ab86-1bdb4579cd03\",\"moduleSequenceNumber\":277},{\"filename\":\"helpers.js\",\"url\":\"blob:https://danielyxie.github.io/89c89a90-e0cc-4694-80b3-e4f6cfe1269a\",\"moduleSequenceNumber\":142},{\"filename\":\"crime.js\",\"url\":\"blob:https://danielyxie.github.io/bd6799ad-dbf9-43ba-be37-a4d9ef5b6c76\",\"moduleSequenceNumber\":3129}],\"dependents\":[],\"ramUsage\":8.7,\"server\":\"home\",\"moduleSequenceNumber\":135,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"commitCrime\",\"cost\":5},{\"type\":\"fn\",\"name\":\"isBusy\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"run\",\"cost\":1},{\"type\":\"fn\",\"name\":\"isRunning\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {\\n    formatMoney, formatRam, formatDuration, formatDateTime, formatNumber,\\n    scanAllServers, hashCode, disableLogs, log as logHelper, getFilePath,\\n    getNsDataThroughFile_Custom, runCommand_Custom, waitForProcessToComplete_Custom,\\n    tryGetBitNodeMultipliers_Custom, getActiveSourceFiles_Custom,\\n    getFnRunViaNsExec, getFnIsAliveViaNsPs\\n} from './helpers.js'\\n\\n// the purpose of the daemon is: it's our global starting point.\\n// it handles several aspects of the game, primarily hacking for money.\\n// since it requires a robust \\\"execute arbitrarily\\\" functionality\\n// it serves as the launching point for all the helper scripts we need.\\n// this list has been steadily growing as time passes.\\n\\n/*jshint loopfunc:true */\\n\\n// --- CONSTANTS ---\\n// track how costly (in security) a growth/hacking thread is.\\nconst growthThreadHardening = 0.004;\\nconst hackThreadHardening = 0.002;\\n// initial potency of weaken threads before multipliers\\nconst weakenThreadPotency = 0.05;\\n// unadjusted server growth rate, this is way more than what you actually get\\nconst unadjustedGrowthRate = 1.03;\\n// max server growth rate, growth rates higher than this are throttled.\\nconst maxGrowthRate = 1.0035;\\n// Pad weaken thread counts to account for undershooting. (Shouldn't happen. And if this is a timing issue, padding won't help)\\nconst weakenThreadPadding = 0; //0.01;\\n// The name given to purchased servers (should match what's in host-manager.js)\\nconst purchasedServersName = \\\"daemon\\\";\\n\\n// The maximum current total RAM utilization before we stop attempting to schedule work for the next less profitable server. Can be used to reserve capacity.\\nconst maxUtilization = 0.95;\\nconst lowUtilizationThreshold = 0.80; // The counterpart - low utilization, which leads us to ramp up targets\\n// If we have plenty of resources after targeting all possible servers, we can start to grow/weaken servers above our hack level - up to this utilization\\nconst maxUtilizationPreppingAboveHackLevel = 0.75;\\n// Maximum number of milliseconds the main targeting loop should run before we take a break until the next loop\\nconst maxLoopTime = 1000; //ms\\nlet loopInterval = 1000; //ms\\n// the number of milliseconds to delay the grow execution after theft to ensure it doesn't trigger too early and have no effect.\\n// For timing reasons the delay between each step should be *close* 1/4th of this number, but there is some imprecision\\nlet cycleTimingDelay = 1600;\\nlet queueDelay = 100; // the delay that it can take for a script to start, used to pessimistically schedule things in advance\\nlet maxBatches = 5; // the max number of batches this daemon will spool up to avoid running out of IRL ram (TODO: Stop wasting RAM by scheduling batches so far in advance. e.g. Grind XP while waiting for cycle start!)\\nlet maxTargets; // Initial value, will grow if there is an abundance of RAM\\nlet maxPreppingAtMaxTargets = 3; // The max servers we can prep when we're at our current max targets and have spare RAM\\n// Allows some home ram to be reserved for ad-hoc terminal script running and when home is explicitly set as the \\\"preferred server\\\" for starting a helper \\nlet homeReservedRam = 32;\\n\\n// --- VARS ---\\n// some ancillary scripts that run asynchronously, we utilize the startup/execute capabilities of this daemon to run when able\\nlet asynchronousHelpers = [];\\nlet periodicScripts = [];\\n// The primary tools copied around and used for hacking\\nlet hackTools = [];\\n// toolkit var for remembering the names and costs of the scripts we use the most\\nlet tools = [];\\nlet toolsByShortName = []; // Dictionary keyed by tool short name\\nlet allHelpersRunning = false; // Tracks whether all long-lived helper scripts have been launched\\n\\n// Command line Flags\\nlet hackOnly = false; // \\\"-h\\\" command line arg - don't grow or shrink, just hack (a.k.a. scrapping mode)\\nlet stockMode = false; // \\\"-s\\\" command line arg - hack/grow servers in a way that boosts our current stock positions\\nlet stockFocus = false;  // If true, stocks are main source of income - kill any scripts that would do them harm\\nlet xpOnly = false; // \\\"-x\\\" command line arg - focus on a strategy that produces the most hack EXP rather than money\\nlet verbose = false; // \\\"-v\\\" command line arg - Detailed logs about batch scheduling / tuning\\nlet runOnce = false; // \\\"-o\\\" command line arg - Good for debugging, run the main targettomg loop once then stop\\nlet useHacknetNodes = false; // \\\"-n\\\" command line arg - Can toggle using hacknet nodes for extra hacking ram\\nlet loopingMode = false;\\nlet recoveryThreadPadding = 1; // How many multiples to increase the weaken/grow threads to recovery from misfires automatically (useful when RAM is abundant and timings are tight)\\n\\n// simple name array of servers that have been added\\nlet addedServerNames = [];\\n// complex arrays of servers with relevant properties, one is sorted for ram available, the other is for money\\nlet serverListByFreeRam = [];\\nlet serverListByMaxRam = [];\\nlet serverListByTargetOrder = [];\\n\\nlet _ns = null; // Globally available ns reference, for convenience\\nlet daemonHost = null; // the name of the host of this daemon, so we don't have to call the function more than once.\\nlet playerStats = null; // stores ultipliers for player abilities and other player info\\nlet hasFormulas = true;\\nlet currentTerminalServer; // Periodically updated when intelligence farming, the current connected terminal server.\\nlet dictSourceFiles; // Available source files\\nlet bitnodeMults = null; // bitnode multipliers that can be automatically determined after SF-5\\n\\n// Property to avoid log churn if our status hasn't changed since the last loop\\nlet lastUpdate = \\\"\\\";\\nlet lastUpdateTime = Date.now();\\nlet lowUtilizationIterations = 0;\\nlet highUtilizationIterations = 0;\\nlet lastShareTime = 0; // Tracks when share was last invoked so we can respect the configured share-cooldown\\n\\n// Replacements / wrappers for various NS calls to let us keep track of them in one place and consolidate where possible\\nlet log = (...args) => logHelper(_ns, ...args);\\n\\nasync function updatePlayerStats() { return playerStats = await getNsDataThroughFile(_ns, `ns.getPlayer()`, '/Temp/player-info.txt'); }\\n\\nfunction playerHackSkill() { return playerStats.hacking; }\\n\\nfunction getPlayerHackingGrowMulti() { return playerStats.hacking_grow_mult };\\n//let playerMoney = () => playerStats.money;\\nfunction doesFileExist(filename, hostname = undefined) { return _ns.fileExists(filename, hostname); }\\n\\nlet psCache = [];\\n/** @param {NS} ns \\n * PS can get expensive, and we use it a lot so we cache this for the duration of a loop */\\nfunction ps(ns, server, canUseCache = true) {\\n    const cachedResult = psCache[server];\\n    return canUseCache && cachedResult ? cachedResult : (psCache[server] = ns.ps(server));\\n}\\n\\n// Returns true if we're at a point where we want to save money for a big purchase on the horizon\\nfunction shouldReserveMoney() {\\n    let playerMoney = _ns.getServerMoneyAvailable(\\\"home\\\");\\n    if (!doesFileExist(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\n        if (playerMoney > 20000000)\\n            return true; // Start saving at 200m of the 250m required for SQLInject\\n    } else if (!playerStats.has4SDataTixApi) {\\n        if (playerMoney >= (bitnodeMults.FourSigmaMarketDataApiCost * 25000000000) / 2)\\n            return true; // Start saving if we're half-way to buying 4S market access  \\n    }\\n    return false;\\n}\\n\\nlet options;\\nconst argsSchema = [\\n    ['h', false], // Do nothing but hack, no prepping (drains servers to 0 money, if you want to do that for some reason)\\n    ['hack-only', false], // Same as above\\n    ['s', false], // Enable Stock Manipulation\\n    ['stock-manipulation', false], // Same as above\\n    ['stock-manipulation-focus', false], // Stocks are main source of income - kill any scripts that would do them harm (TODO: Enable automatically in BN8)\\n    ['v', false], // Detailed logs about batch scheduling / tuning\\n    ['verbose', false], // Same as above\\n    ['o', false], // Good for debugging, run the main targettomg loop once then stop, with some extra logs\\n    ['run-once', false], // Same as above\\n    ['x', false], // Focus on a strategy that produces the most hack EXP rather than money\\n    ['xp-only', false], // Same as above\\n    ['n', false], // Can toggle on using hacknet nodes for extra hacking ram (at the expense of hash production)\\n    ['use-hacknet-nodes', false], // Same as above\\n    ['silent-misfires', true], // Instruct remote scripts not to alert when they misfire\\n    ['initial-max-targets', 4], // Initial number of servers to target / prep (TODO: Scale this as BN progression increases)\\n    ['max-steal-percentage', 0.8], // Don't steal more than this in case something goes wrong with timing or scheduling, it's hard to recover from\\n    ['cycle-timing-delay', 16000], // Time \\n    ['queue-delay', 1000], // Delay before the first script begins, to give time for all scripts to be scheduled\\n    ['max-batches', 20], // Maximum overlapping cycles to schedule in advance. Note that once scheduled, we must wait for all batches to complete before we can schedule more\\n    ['i', false], // Farm intelligence with manual hack.\\n    ['reserved-ram', 32],\\n    ['looping-mode', false], // Set to true to attempt to schedule perpetually-looping tasks.\\n    ['recovery-thread-padding', 1],\\n    ['share', false], // Enable sharing free ram to increase faction rep gain (enabled automatically once RAM is sufficient)\\n    ['no-share', false], // Disable sharing free ram to increase faction rep gain\\n    ['share-cooldown', 5000], // Wait before attempting to schedule more share threads (e.g. to free RAM to be freed for hack batch scheduling first)\\n    ['share-max-utilization', 0.9], // Set to 1 if you don't care to leave any RAM free after sharing. Will use up to this much of the available RAM\\n];\\n\\nexport function autocomplete(data, args) {\\n    data.flags(argsSchema);\\n    return [];\\n}\\n\\n// script entry point\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    _ns = ns;\\n    daemonHost = \\\"home\\\"; // ns.getHostname(); // get the name of this node (realistically, will always be home)\\n    await updatePlayerStats();\\n    dictSourceFiles = await getActiveSourceFiles_Custom(ns, getNsDataThroughFile);\\n    log(\\\"The following source files are active: \\\" + JSON.stringify(dictSourceFiles));\\n    //ns.disableLog('ALL');\\n    disableLogs(ns, ['getServerMaxRam', 'getServerUsedRam', 'getServerMoneyAvailable', 'getServerGrowth', 'getServerSecurityLevel', 'exec', 'scan']);\\n\\n    // Reset global vars on startup since they persist in memory in certain situations (such as on Augmentation)\\n    lastUpdate = \\\"\\\";\\n    lastUpdateTime = Date.now();\\n    maxTargets = 4;\\n    lowUtilizationIterations = 0;\\n    highUtilizationIterations = 0;\\n    serverListByFreeRam = [];\\n    serverListByTargetOrder = [];\\n    serverListByMaxRam = [];\\n    addedServerNames = [];\\n    tools = [];\\n    toolsByShortName = [];\\n    psCache = [];\\n\\n    // Process command line args (if any)\\n    options = ns.flags(argsSchema);\\n    hackOnly = options.h || options['hack-only'];\\n    xpOnly = options.x || options['xp-only'];\\n    stockMode = options.s || options['stock-manipulation'] || options['stock-manipulation-focus'];\\n    stockFocus = options['stock-manipulation-focus'];\\n    useHacknetNodes = options.n || options['use-hacknet-nodes'];\\n    verbose = options.v || options['verbose'];\\n    runOnce = options.o || options['run-once'];\\n    loopingMode = options['looping-mode'];\\n    recoveryThreadPadding = options['recovery-thread-padding'];\\n    // Log which flaggs are active\\n    if (hackOnly) log('-h - Hack-Only mode activated!');\\n    if (xpOnly) log('-x - Hack XP Grinding mode activated!');\\n    if (stockMode) log('-s - Stock market manipulation mode activated!');\\n    if (stockFocus) log('--stock-manipulation-focus - Stock market manipulation is the main priority');\\n    if (useHacknetNodes) log('-n - Using hacknet nodes to run scripts!');\\n    if (verbose) log('-v - Verbose logging activated!');\\n    if (runOnce) log('-o - Run-once mode activated!');\\n    if (loopingMode) {\\n        log('--looping-mode - scheduled remote tasks will loop themselves');\\n        cycleTimingDelay = 0;\\n        queueDelay = 0;\\n        if (recoveryThreadPadding == 1) recoveryThreadPadding = 10;\\n        if (stockMode) stockFocus = true; // Need to actively kill scripts that go against stock because they will live forever\\n    }\\n    cycleTimingDelay = options['cycle-timing-delay'];\\n    queueDelay = options['queue-delay'];\\n    maxBatches = options['max-batches'];\\n    homeReservedRam = options['reserved-ram']\\n\\n    // These scripts are started once and expected to run forever (or terminate themselves when no longer needed)\\n    asynchronousHelpers = [\\n        { name: \\\"stats.js\\\", shouldRun: () => ns.getServerMaxRam(\\\"home\\\") >= 64 /* Don't waste precious RAM */ }, // Adds stats not usually in the HUD\\n        { name: \\\"hacknet-upgrade-manager.js\\\", args: [\\\"-c\\\", \\\"--max-payoff-time\\\", \\\"1h\\\"] }, // Kickstart hash income by buying everything with up to 1h payoff time immediately\\n        { name: \\\"stockmaster.js\\\", args: [\\\"--show-market-summary\\\"], tail: true, shouldRun: () => playerStats.hasTixApiAccess }, // Start our stockmaster if we have the required stockmarket access\\n        { name: \\\"gangs.js\\\", tail: true, shouldRun: () => 2 in dictSourceFiles }, // Script to create manage our gang for us\\n        { name: \\\"spend-hacknet-hashes.js\\\", args: [\\\"-v\\\"], shouldRun: () => 9 in dictSourceFiles }, // Always have this running to make sure hashes aren't wasted\\n        { name: \\\"sleeve.js\\\", tail: true, shouldRun: () => 10 in dictSourceFiles }, // Script to create manage our sleeves for us\\n        {\\n            name: \\\"work-for-factions.js\\\", args: ['--fast-crimes-only', '--no-coding-contracts'],  // Singularity script to manage how we use our \\\"focus\\\" work.\\n            shouldRun: () => 4 in dictSourceFiles && (ns.getServerMaxRam(\\\"home\\\") >= 128 / (2 ** dictSourceFiles[4])) // Higher SF4 levels result in lower RAM requirements\\n        },\\n    ];\\n    asynchronousHelpers.forEach(helper => helper.name = getFilePath(helper.name));\\n    asynchronousHelpers.forEach(helper => helper.isLaunched = false);\\n    asynchronousHelpers.forEach(helper => helper.requiredServer = \\\"home\\\"); // All helpers should be launched at home since they use tempory scripts, and we only reserve ram on home\\n    // These scripts are spawned periodically (at some interval) to do their checks, with an optional condition that limits when they should be spawned\\n    let shouldUpgradeHacknet = () => !shouldReserveMoney() && (whichServerIsRunning(ns, \\\"hacknet-upgrade-manager.js\\\", false) === null);\\n    // In BN8 (stocks-only bn) and others with hack income disabled, don't waste money on improving hacking infrastructure unless we have plenty of money to spare\\n    let shouldImproveHacking = () => bitnodeMults.ScriptHackMoneyGain != 0 || playerStats.bitNodeN != 8 || ns.getServerMoneyAvailable(\\\"home\\\") > 1e10;\\n\\n    periodicScripts = [\\n        // Buy tor as soon as we can if we haven't already, and all the port crackers\\n        { interval: 29000, name: \\\"/Tasks/tor-manager.js\\\", shouldRun: () => 4 in dictSourceFiles && !addedServerNames.includes(\\\"darkweb\\\") },\\n        { interval: 30000, name: \\\"/Tasks/program-manager.js\\\", shouldRun: () => 4 in dictSourceFiles && getNumPortCrackers() != 5 && (getNumPortCrackers() < 3 || shouldImproveHacking()) },\\n        { interval: 31000, name: \\\"/Tasks/ram-manager.js\\\", shouldRun: () => 4 in dictSourceFiles && dictSourceFiles[4] >= 2 && !shouldReserveMoney() && (getTotalNetworkUtilization() > 0.85 || xpOnly) && shouldImproveHacking() },\\n        // Buy every hacknet upgrade with up to 4h payoff if it is less than 10% of our current money or 8h if it is less than 1% of our current money\\n        { interval: 32000, name: \\\"hacknet-upgrade-manager.js\\\", shouldRun: shouldUpgradeHacknet, args: () => [\\\"-c\\\", \\\"--max-payoff-time\\\", \\\"4h\\\", \\\"--max-spend\\\", ns.getServerMoneyAvailable(\\\"home\\\") * 0.1] },\\n        { interval: 33000, name: \\\"hacknet-upgrade-manager.js\\\", shouldRun: shouldUpgradeHacknet, args: () => [\\\"-c\\\", \\\"--max-payoff-time\\\", \\\"8h\\\", \\\"--max-spend\\\", ns.getServerMoneyAvailable(\\\"home\\\") * 0.01] },\\n        // Don't start auto-joining factions until we're holding 1 billion (so coding contracts returning money is probably less critical) or we've joined one already\\n        {\\n            interval: 34000, name: \\\"faction-manager.js\\\", requiredServer: \\\"home\\\", args: ['--join-only'],\\n            shouldRun: () => 4 in dictSourceFiles && (playerStats.factions.length > 0 || ns.getServerMoneyAvailable(\\\"home\\\") > 1e9) &&\\n                (ns.getServerMaxRam(\\\"home\\\") >= 128 / (2 ** dictSourceFiles[4])) // Uses singularity functions, and higher SF4 levels result in lower RAM requirements\\n        },\\n        { interval: 51000, name: \\\"/Tasks/contractor.js\\\", requiredServer: \\\"home\\\" },\\n        { interval: 110000, name: \\\"/Tasks/backdoor-all-servers.js\\\", requiredServer: \\\"home\\\", shouldRun: () => 4 in dictSourceFiles },\\n        { interval: 111000, name: \\\"host-manager.js\\\", requiredServer: \\\"home\\\", shouldRun: () => !shouldReserveMoney() && shouldImproveHacking(), args: () => [\\\"--reserve-by-time\\\"] },\\n    ];\\n    periodicScripts.forEach(tool => tool.name = getFilePath(tool.name));\\n    hackTools = [\\n        { name: \\\"/Remote/weak-target.js\\\", shortName: \\\"weak\\\", threadSpreadingAllowed: true },\\n        { name: \\\"/Remote/grow-target.js\\\", shortName: \\\"grow\\\" },\\n        { name: \\\"/Remote/hack-target.js\\\", shortName: \\\"hack\\\" },\\n        { name: \\\"/Remote/manualhack-target.js\\\", shortName: \\\"manualhack\\\" },\\n        { name: \\\"/Remote/share.js\\\", shortName: \\\"share\\\", threadSpreadingAllowed: true },\\n    ];\\n    hackTools.forEach(tool => tool.name = getFilePath(tool.name));\\n\\n    await buildToolkit(ns); // build toolkit\\n    await getStaticServerData(ns, scanAllServers(ns)); // Gather information about servers that will never change\\n    buildServerList(ns); // create the exhaustive server list   \\n    await establishMultipliers(ns); // figure out the various bitnode and player multipliers\\n\\n    allHelpersRunning = hackOnly ? true : await runStartupScripts(ns); // Start helper scripts\\n    if (playerHackSkill() < 3000 && !xpOnly)\\n        await kickstartHackXp(ns, 0.5, verbose, 1); // Fire a hack XP cycle using a chunk of free RAM\\n    if (stockFocus)\\n        maxTargets = Object.keys(serverStockSymbols).length; // Ensure we immediately attempt to target all servers that represent stocks\\n    if (stockMode && !playerStats.hasTixApiAccess)\\n        log(\\\"WARNING: Ran with '--stock-manipulation' flag, but this will have no effect until you buy access to the stock market API then restart or manually run stockmaster.js\\\");\\n\\n    maxTargets = Math.max(maxTargets, options['initial-max-targets'])\\n\\n    // the actual worker processes live here\\n    await doTargetingLoop(ns);\\n}\\n\\n// Check running status of scripts on servers\\nfunction whichServerIsRunning(ns, scriptName, canUseCache = true) {\\n    for (const server of serverListByFreeRam)\\n        if (ps(ns, server.name, canUseCache).some(process => process.filename === scriptName))\\n            return server.name;\\n    return null;\\n}\\n\\n// Helper to kick off helper scripts\\n/** @param {NS} ns **/\\nasync function runStartupScripts(ns) {\\n    for (const helper of asynchronousHelpers)\\n        if (!helper.isLaunched && (helper.shouldRun === undefined || helper.shouldRun()))\\n            helper.isLaunched = await tryRunTool(ns, getTool(helper))\\n    // if every helper is launched already return \\\"true\\\" so we can skip doing this each cycle going forward.\\n    return asynchronousHelpers.reduce((allLaunched, tool) => allLaunched && tool.isLaunched, true);\\n}\\n\\n/** @param {NS} ns **/\\nasync function runPeriodicScripts(ns) {\\n    // Checks whether it's time for any scheduled tasks to run\\n    for (const task of periodicScripts) {\\n        let tool = getTool(task);\\n        if ((Date.now() - (task.lastRun || 0) >= task.interval) && (task.shouldRun === undefined || task.shouldRun())) {\\n            task.lastRun = Date.now()\\n            await tryRunTool(ns, tool);\\n        }\\n    }\\n    // Super-early aug, if we are poor, spend hashes as soon as we get them for a quick cash injection. (Only applies if we have hacknet servers)\\n    if (9 in dictSourceFiles && ns.getServerMoneyAvailable(\\\"home\\\") < 10000000 && (ns.getServerMaxRam(\\\"home\\\") - ns.getServerUsedRam(\\\"home\\\")) >= 5.6) {\\n        await runCommand(ns, `0; if(ns.hacknet.spendHashes(\\\"Sell for Money\\\")) ns.toast('Sold 4 hashes for \\\\$1M', 'success')`, '/Temp/sell-hashes-for-money.js');\\n    }\\n}\\n\\n// Helper that gets the either invokes a function that returns a value, or returns the value as-is if it is not a function.\\nconst funcResultOrValue = fnOrVal => (fnOrVal instanceof Function ? fnOrVal() : fnOrVal);\\n\\n// Returns true if the tool is running (including if it was already running), false if it could not be run.\\n/** @param {NS} ns **/\\nasync function tryRunTool(ns, tool) {\\n    if (!doesFileExist(tool.name)) {\\n        log(`ERROR: Tool ${tool.name} was not found on ${daemonHost}`, true, 'error');\\n        return false;\\n    }\\n    let runningOnServer = whichServerIsRunning(ns, tool.name);\\n    if (runningOnServer != null) {\\n        if (verbose) log(`INFO: Tool ${tool.name} is already running on server ${runningOnServer}.`);\\n        return true;\\n    }\\n    const args = funcResultOrValue(tool.args) || []; // Support either a static args array, or a function returning the args.\\n    const runResult = await arbitraryExecution(ns, tool, 1, args, tool.requiredServer || \\\"home\\\"); // TODO: Allow actually requiring a server\\n    if (runResult) {\\n        runningOnServer = whichServerIsRunning(ns, tool.name, false);\\n        if (verbose) log(`Ran tool: ${tool.name} on server ${runningOnServer}` + (args.length > 0 ? ` with args ${JSON.stringify(args)}` : ''));\\n        if (tool.tail === true) {\\n            log(`Tailing Tool: ${tool.name} on server ${runningOnServer}` + (args.length > 0 ? ` with args ${JSON.stringify(args)}` : ''));\\n            ns.tail(tool.name, runningOnServer, ...args);\\n            tool.tail = false; // Avoid popping open additional tail windows in the future\\n        }\\n        return true;\\n    } else\\n        log(`WARNING: Tool cannot be run (insufficient RAM? REQ: ${formatRam(tool.cost)}): ${tool.name}`, false, 'warning');\\n    return false;\\n}\\n\\n/** @param {NS} ns \\n * Execute an external script that roots a server, and wait for it to complete. **/\\nasync function doRoot(ns, server) {\\n    const pid = ns.exec(getFilePath('/Tasks/crack-host.js'), 'home', 1, server.name);\\n    await waitForProcessToComplete_Custom(ns, getFnIsAliveViaNsPs(ns), pid);\\n}\\n\\n// Main targeting loop\\n/** @param {NS} ns **/\\nasync function doTargetingLoop(ns) {\\n    log(\\\"doTargetingLoop\\\");\\n    let loops = -1;\\n    //var isHelperListLaunched = false; // Uncomment this and related code to keep trying to start helpers\\n    do {\\n        loops++;\\n        if (loops > 0) await ns.sleep(loopInterval);\\n        try {\\n            var start = Date.now();\\n            psCache = []; // Clear the cache of the process list we update once per loop           \\n            buildServerList(ns, true); // Check if any new servers have been purchased by the external host_manager process           \\n            await updatePlayerStats(); // Update player info\\n            // Run some auxilliary processes that ease the ram burden of this daemon and add additional functionality (like managing hacknet or buying servers)\\n            await runPeriodicScripts(ns);\\n\\n            if (stockMode) await updateStockPositions(ns); // In stock market manipulation mode, get our current position in all stocks\\n            sortServerList(\\\"targeting\\\"); // Update the order in which we ought to target servers\\n\\n            if (loops % 60 == 0) { // For more expensive updates, only do these every so often\\n                // If we have not yet launched all helpers (e.g. awaiting more home ram, or TIX API to be purchased) see if any are now ready to be run\\n                if (!allHelpersRunning) allHelpersRunning = await runStartupScripts(ns);\\n                // Pull additional data about servers that infrequently changes\\n                await refreshDynamicServerData(ns, addedServerNames);\\n                // Occassionally print our current targetting order (todo, make this controllable with a flag or custom UI?)\\n                if (verbose && loops % 600 == 0)\\n                    log('Targetting Order:\\\\n  ' + serverListByTargetOrder.filter(s => s.shouldHack()).map(s =>\\n                        `${s.isPrepped() ? '*' : ' '} ${s.canHack() ? '✓' : 'X'} Money: ${formatMoney(s.getMoney(), 4)} of ${formatMoney(s.getMaxMoney(), 4)} ` +\\n                        `(${formatMoney(s.getMoneyPerRamSecond(), 4)}/ram.sec), Sec: ${formatNumber(s.getSecurity(), 3)} of ${formatNumber(s.getMinSecurity(), 3)}, ` +\\n                        `TTW: ${formatDuration(s.timeToWeaken())}, Hack: ${s.requiredHackLevel} - ${s.name}` +\\n                        (!stockMode || !serverStockSymbols[s.name] ? '' : ` Sym: ${serverStockSymbols[s.name]} Owned: ${serversWithOwnedStock.includes(s.name)} ` +\\n                            `Manip: ${shouldManipulateGrow[s.name] ? \\\"grow\\\" : shouldManipulateHack[s.name] ? \\\"hack\\\" : '(disabled)'}`))\\n                        .join('\\\\n  '));\\n            }\\n            var prepping = [];\\n            var preppedButNotTargeting = [];\\n            var targeting = [];\\n            var notRooted = [];\\n            var cantHack = [];\\n            var cantHackButPrepped = [];\\n            var cantHackButPrepping = [];\\n            var noMoney = [];\\n            var failed = [];\\n            var skipped = [];\\n            var lowestUnhackable = 99999;\\n\\n            // Hack: We can get stuck and never improve if we don't try to prep at least one server to improve our future targeting options.\\n            // So get the first un-prepped server that is within our hacking level, and move it to the front of the list.\\n            var firstUnpreppedServerIndex = serverListByTargetOrder.findIndex(s => s.shouldHack() && s.canHack() && !s.isPrepped() && !s.isTargeting())\\n            if (firstUnpreppedServerIndex !== -1 && !stockMode)\\n                serverListByTargetOrder.unshift(serverListByTargetOrder.splice(firstUnpreppedServerIndex, 1)[0]);\\n\\n            // If this gets set to true, the loop will continue (e.g. to gather information), but no more work will be scheduled\\n            var workCapped = false;\\n            // Function to assess whether we've hit some cap that should prevent us from scheduling any more work\\n            let isWorkCapped = () => workCapped = workCapped || failed.length > 0 // Scheduling fails when there's insufficient RAM. We've likely encountered a \\\"soft cap\\\" on ram utilization e.g. due to fragmentation\\n                || getTotalNetworkUtilization() >= maxUtilization // \\\"hard cap\\\" on ram utilization, can be used to reserve ram or reduce the rate of encountering the \\\"soft cap\\\"\\n                || targeting.length >= maxTargets // variable cap on the number of simultaneous targets\\n                || (targeting.length + prepping.length) >= (maxTargets + maxPreppingAtMaxTargets); // Only allow a couple servers to be prepped in advance when at max-targets\\n\\n            // check for servers that need to be rooted\\n            // simultaneously compare our current target to potential targets\\n            for (var i = 0; i < serverListByTargetOrder.length; i++) {\\n                if ((Date.now() - start) >= maxLoopTime) { // To avoid lagging the game, completely break out of the loop if we start to run over\\n                    skipped = skipped.concat(serverListByTargetOrder.slice(i));\\n                    workCapped = true;\\n                    break;\\n                }\\n\\n                const server = serverListByTargetOrder[i];\\n                // Attempt to root any servers that are not yet rooted\\n                if (!server.hasRoot() && server.canCrack())\\n                    await doRoot(ns, server);\\n\\n                // Check whether we can / should attempt any actions on this server\\n                if (!server.shouldHack()) { // Ignore servers we own (bought servers / home / no money)\\n                    noMoney.push(server);\\n                } else if (!server.hasRoot()) { // Can't do anything to servers we have not yet cracked\\n                    notRooted.push(server);\\n                } else if (!server.canHack()) { // Note servers above our Hack skill. We can prep them a little if we have spare RAM at the end.\\n                    cantHack.push(server);\\n                    lowestUnhackable = Math.min(lowestUnhackable, server.requiredHackLevel);\\n                    // New logic allows for unhackable servers to be prepping. Keep tabs on how many we have of each\\n                    if (server.isPrepped())\\n                        cantHackButPrepped.push(server);\\n                    else if (server.isPrepping())\\n                        cantHackButPrepping.push(server);\\n                } else if (server.isTargeting()) { // Note servers already being targeted from a prior loop\\n                    targeting.push(server); // TODO: While targeting, we should keep queuing more batches\\n                } else if (server.isPrepping()) { // Note servers already being prepped from a prior loop\\n                    prepping.push(server);\\n                } else if (isWorkCapped() || xpOnly) { // Various conditions for which we'll postpone any additional work on servers\\n                    if (xpOnly && (((nextXpCycleEnd[server.name] || 0) > start - 10000) || server.isXpFarming()))\\n                        targeting.push(server); // A server counts as \\\"targeting\\\" if in XP mode and its due to be farmed or was in the past 10 seconds\\n                    else\\n                        skipped.push(server);\\n                } else if (!hackOnly && true == await prepServer(ns, server)) { // Returns true if prepping, false if prepping failed, null if prepped\\n                    if (server.previouslyPrepped)\\n                        log(`WARNING ${server.prepRegressions++}: Server was prepped, but now at security: ${formatNumber(server.getSecurity())} ` +\\n                            `(min ${formatNumber(server.getMinSecurity())}) money: ${formatMoney(server.getMoney(), 3)} (max ${formatMoney(server.getMaxMoney(), 3)}). ` +\\n                            `Prior cycle: ${server.previousCycle}. ETA now (Hack ${playerHackSkill()}) is ${formatDuration(server.timeToWeaken())}`, true, 'warning');\\n                    prepping.push(server); // Perform weakening and initial growth until the server is \\\"perfected\\\" (unless in hack-only mode)\\n                } else if (!hackOnly && !server.isPrepped()) { // If prepServer returned false or null. Check ourselves whether it is prepped\\n                    log('Prep failed for \\\"' + server.name + '\\\" (RAM Utilization: ' + (getTotalNetworkUtilization() * 100).toFixed(2) + '%)');\\n                    failed.push(server);\\n                } else if (targeting.length >= maxTargets) { // Hard cap on number of targets, changes with utilization\\n                    server.previouslyPrepped = true;\\n                    preppedButNotTargeting.push(server);\\n                } else { // Otherwise, server is prepped at min security & max money and ready to target                       \\n                    var performanceSnapshot = optimizePerformanceMetrics(server); // Adjust the percentage to steal for optimal scheduling\\n                    if (server.actualPercentageToSteal() === 0) { // Not enough RAM for even one hack thread of this next-best target.\\n                        failed.push(server);\\n                    } else if (true == await performScheduling(ns, server, performanceSnapshot)) { // once conditions are optimal, fire barrage after barrage of cycles in a schedule\\n                        targeting.push(server);\\n                    } else {\\n                        log('Targeting failed for \\\"' + server.name + '\\\" (RAM Utilization: ' + (getTotalNetworkUtilization() * 100).toFixed(2) + '%)');\\n                        failed.push(server);\\n                    }\\n                }\\n\\n                // Hack: Quickly ramp up our max-targets without waiting for the next loop if we are far below the low-utilization threshold\\n                if (lowUtilizationIterations >= 5 && targeting.length == maxTargets) {\\n                    let network = getNetworkStats();\\n                    let utilizationPercent = network.totalUsedRam / network.totalMaxRam;\\n                    if (utilizationPercent < lowUtilizationThreshold / 2) maxTargets++;\\n                }\\n            }\\n\\n            // Mini-loop for servers that we can't hack yet, but might have access to soon, we can at least prep them.\\n            if (!isWorkCapped() && cantHack.length > 0 && !hackOnly && !xpOnly) {\\n                // Prep in order of soonest to become available to us\\n                cantHack.sort(function (a, b) {\\n                    var diff = a.requiredHackLevel - b.requiredHackLevel;\\n                    return diff != 0.0 ? diff : b.getMoneyPerRamSecond() - a.getMoneyPerRamSecond(); // Break ties by sorting by max-money\\n                });\\n                // Try to prep them all unless one of our capping rules are hit\\n                // TODO: Something is not working right here, so until we figure it out, never look at more than the first unhackable server.\\n                for (var j = 0; j < 1 /*cantHack.length*/; j++) {\\n                    const server = cantHack[j];\\n                    if (isWorkCapped()) break;\\n                    if (cantHackButPrepped.includes(server) || cantHackButPrepping.includes(server))\\n                        continue;\\n                    var prepResult = await prepServer(ns, server);\\n                    if (prepResult == true) {\\n                        cantHackButPrepping.push(server);\\n                    } else if (prepResult == null) {\\n                        cantHackButPrepped.push(server);\\n                    } else {\\n                        log('Pre-Prep failed for \\\"' + server.name + '\\\" with ' + server.requiredHackLevel +\\n                            ' hack requirement (RAM Utilization: ' + (getTotalNetworkUtilization() * 100).toFixed(2) + '%)');\\n                        failed.push(server);\\n                        break;\\n                    }\\n                }\\n            }\\n\\n            let network = getNetworkStats();\\n            let utilizationPercent = network.totalUsedRam / network.totalMaxRam;\\n            highUtilizationIterations = utilizationPercent >= maxUtilization ? highUtilizationIterations + 1 : 0;\\n            lowUtilizationIterations = utilizationPercent <= lowUtilizationThreshold ? lowUtilizationIterations + 1 : 0;\\n\\n            // If we've been at low utilization for longer than the cycle of all our targets, we can add a target\\n            let intervalsPerTargetCycle = targeting.length == 0 ? 120 :\\n                Math.ceil((targeting.reduce((max, t) => Math.max(max, t.timeToWeaken()), 0) + cycleTimingDelay) / loopInterval);\\n            //log(`intervalsPerTargetCycle: ${intervalsPerTargetCycle} lowUtilizationIterations: ${lowUtilizationIterations} loopInterval: ${loopInterval}`);\\n            if (lowUtilizationIterations > intervalsPerTargetCycle && skipped.length > 0 && maxTargets < serverListByTargetOrder.length) {\\n                maxTargets++;\\n                log(`Increased max targets to ${maxTargets} since utilization (${formatNumber(utilizationPercent * 100, 3)}%) has been quite low for ${lowUtilizationIterations} iterations.`);\\n                lowUtilizationIterations = 0; // Reset the counter of low-utilization iterations\\n            } else if (highUtilizationIterations > 60) { // Decrease max-targets by 1 ram utilization is too high (prevents scheduling efficient cycles)\\n                maxTargets -= 1;\\n                log(`Decreased max targets to ${maxTargets} since utilization has been > ${formatNumber(maxUtilization * 100, 3)}% for 60 iterations and scheduling failed.`);\\n                highUtilizationIterations = 0; // Reset the counter of high-utilization iterations\\n            }\\n            maxTargets = Math.max(maxTargets, targeting.length - 1, 1); // Ensure that after a restart, maxTargets start off with no less than 1 fewer max targets\\n\\n            // If there is still unspent utilization, we can use a chunk of it it to farm XP\\n            if (xpOnly) { // If all we want to do is gain hack XP\\n                let time = await kickstartHackXp(ns, 1.00, verbose);\\n                loopInterval = Math.min(1000, time || 1000); // Wake up earlier if we're almost done an XP cycle\\n            } else if (!isWorkCapped() && lowUtilizationIterations > 10) {\\n                let expectedRunTime = getXPFarmServer().timeToHack();\\n                let freeRamToUse = (expectedRunTime < loopInterval) ? // If expected runtime is fast, use as much RAM as we want, it'll all be free by our next loop.\\n                    1 - (1 - lowUtilizationThreshold) / (1 - utilizationPercent) : // Take us just up to the threshold for 'lowUtilization' so we don't cause unecessary server purchases\\n                    1 - (1 - maxUtilizationPreppingAboveHackLevel - 0.05) / (1 - utilizationPercent); // Otherwise, leave more room (e.g. for scheduling new batches.)\\n                await kickstartHackXp(ns, freeRamToUse, verbose && (expectedRunTime > 10000 || lowUtilizationIterations % 10 == 0), 1);\\n            }\\n\\n            // Use any unspent RAM on share.\\n            const maxShareUtilization = options['share-max-utilization']\\n            if (failed.length <= 0 && utilizationPercent < maxShareUtilization && (Date.now() - lastShareTime) > options['share-cooldown'] &&\\n                !options['no-share'] && (options['share'] || network.totalMaxRam > 1024)) { // If not explicitly enabled or disabled, auto-enable share at 1TB of network RAM\\n                let shareTool = getTool(\\\"share\\\");\\n                let maxThreads = shareTool.getMaxThreads(); // This many threads would use up 100% of the (1-utilizationPercent)% RAM remaining\\n                if (xpOnly) maxThreads -= Math.floor(getServerByName('home').ramAvailable() / shareTool.cost); // Reserve home ram entirely for XP cycles when in xpOnly mode\\n                network = getNetworkStats(); // Update network stats since they may have changed after scheduling xp cycles above\\n                utilizationPercent = network.totalUsedRam / network.totalMaxRam;\\n                let shareThreads = Math.floor(maxThreads * (maxShareUtilization - utilizationPercent) / (1 - utilizationPercent)); // Ensure we don't take utilization above (1-maxShareUtilization)%\\n                if (shareThreads > 0) {\\n                    if (verbose) log(`Creating ${shareThreads.toLocaleString()} share threads to improve faction rep gain rates. Using ${formatRam(shareThreads * 4)} of ${formatRam(network.totalMaxRam)} ` +\\n                        `(${(400 * shareThreads / network.totalMaxRam).toFixed(1)}%) of all RAM). Final utilization will be ${(100 * (4 * shareThreads + network.totalUsedRam) / network.totalMaxRam).toFixed(1)}%`);\\n                    await arbitraryExecution(ns, getTool('share'), shareThreads, [Date.now()], null, true) // Note: Need a unique argument to multiple parallel share scripts on the same server\\n                    lastShareTime = Date.now();\\n                }\\n            } // else log(`Not Sharing. workCapped: ${isWorkCapped()} utilizationPercent: ${utilizationPercent} maxShareUtilization: ${maxShareUtilization} cooldown: ${formatDuration(Date.now() - lastShareTime)} networkRam: ${network.totalMaxRam}`);\\n\\n            // Log some status updates\\n            let keyUpdates = `Of ${serverListByFreeRam.length} total servers:\\\\n > ${noMoney.length} were ignored (owned or no money)`;\\n            if (notRooted.length > 0)\\n                keyUpdates += `, ${notRooted.length} are not rooted (missing ${crackNames.filter(c => !ownedCracks.includes(c)).join(', ')})`;\\n            if (cantHack.length > 0)\\n                keyUpdates += `\\\\n > ${cantHack.length} cannot be hacked (${cantHackButPrepping.length} prepping, ` +\\n                    `${cantHackButPrepped.length} prepped, next unlock at Hack ${lowestUnhackable})`;\\n            if (preppedButNotTargeting.length > 0)\\n                keyUpdates += `\\\\n > ${preppedButNotTargeting.length} are prepped but are not a priority target`;\\n            if (skipped.length > 0)\\n                keyUpdates += `\\\\n > ${skipped.length} were skipped for now (time, RAM, or target + prepping cap reached)`;\\n            if (failed.length > 0)\\n                keyUpdates += `\\\\n > ${failed.length} servers failed to be scheduled (insufficient RAM?).`;\\n            keyUpdates += `\\\\n > Targeting: ${targeting.length} servers, Prepping: ${prepping.length + cantHackButPrepping.length}`;\\n            if (xpOnly)\\n                keyUpdates += `\\\\n > Grinding XP from ${targeting.map(s => s.name).join(\\\", \\\")}`;\\n            // To reduce log spam, only log if some key status changes, or if it's been a minute\\n            if (keyUpdates != lastUpdate || (Date.now() - lastUpdateTime) > 60000) {\\n                log((lastUpdate = keyUpdates) +\\n                    '\\\\n > RAM Utilization: ' + formatRam(Math.ceil(network.totalUsedRam)) + ' of ' + formatRam(network.totalMaxRam) + ' (' + (utilizationPercent * 100).toFixed(1) + '%) ' +\\n                    `for ${lowUtilizationIterations || highUtilizationIterations} its, Max Targets: ${maxTargets}, Loop Took: ${Date.now() - start}ms`);\\n                lastUpdateTime = Date.now();\\n            }\\n            //log('Prepping: ' + prepping.map(s => s.name).join(', '))\\n            //log('targeting: ' + targeting.map(s => s.name).join(', '))\\n        } catch (err) {\\n            log('WARNING: Caught an error in the targeting loop: ' + err, true, 'warning');\\n            // Note netscript errors are raised as a simple string (no message property)\\n            var errorMessage = String(err.message || err);\\n            // Catch errors that appear to be caused by deleted servers, and remove the server from our lists.\\n            const expectedDeletedHostPhrase = \\\"Invalid IP/hostname: \\\";\\n            let expectedErrorPhraseIndex = errorMessage.indexOf(expectedDeletedHostPhrase);\\n            if (expectedErrorPhraseIndex == -1) continue;\\n            let start = expectedErrorPhraseIndex + expectedDeletedHostPhrase.length;\\n            let lineBreak = errorMessage.indexOf('<br>', start);\\n            let deletedHostName = errorMessage.substring(start, lineBreak);\\n            log('INFO: The server \\\"' + deletedHostName + '\\\" appears to have been deleted. Removing it from our lists', false, 'info');\\n            removeServerByName(deletedHostName);\\n        }\\n    } while (!runOnce);\\n}\\n\\n// How much a weaken thread is expected to reduce security by\\nlet actualWeakenPotency = () => bitnodeMults.ServerWeakenRate * weakenThreadPotency * (1 - weakenThreadPadding);\\n\\n// Dictionaries of static server information\\nlet serversDictCommand = (servers, command) => `Object.fromEntries(${JSON.stringify(servers)}.map(server => [server, ${command}]))`;\\nlet dictServerRequiredHackinglevels;\\nlet dictServerNumPortsRequired;\\nlet dictServerMinSecurityLevels;\\nlet dictServerMaxMoney;\\nlet dictServerProfitInfo;\\n\\n// Gathers up arrays of server data via external request to have the data written to disk.\\nasync function getStaticServerData(ns, serverNames) {\\n    dictServerRequiredHackinglevels = await getNsDataThroughFile(ns, serversDictCommand(serverNames, 'ns.getServerRequiredHackingLevel(server)'), '/Temp/servers-hack-req.txt');\\n    dictServerNumPortsRequired = await getNsDataThroughFile(ns, serversDictCommand(serverNames, 'ns.getServerNumPortsRequired(server)'), '/Temp/servers-num-ports.txt');\\n    await refreshDynamicServerData(ns, serverNames);\\n}\\n\\n/** @param {NS} ns **/\\nasync function refreshDynamicServerData(ns, serverNames) {\\n    dictServerMinSecurityLevels = await getNsDataThroughFile(ns, serversDictCommand(serverNames, 'ns.getServerMinSecurityLevel(server)'), '/Temp/servers-security.txt');\\n    dictServerMaxMoney = await getNsDataThroughFile(ns, serversDictCommand(serverNames, 'ns.getServerMaxMoney(server)'), '/Temp/servers-max-money.txt');\\n    // Get the information about the relative profitability of each server\\n    const pid = ns.exec(getFilePath('analyze-hack.js'), 'home', 1, '--all', '--silent');\\n    await waitForProcessToComplete_Custom(ns, getFnIsAliveViaNsPs(ns), pid);\\n    dictServerProfitInfo = ns.read('/Temp/analyze-hack.txt');\\n    if (!dictServerProfitInfo) return log(ns, \\\"WARN: analyze-hack info unavailable.\\\");\\n    dictServerProfitInfo = Object.fromEntries(JSON.parse(dictServerProfitInfo).map(s => [s.hostname, s]));\\n    //ns.print(dictServerProfitInfo);\\n    if (options.i)\\n        currentTerminalServer = getServerByName(await getNsDataThroughFile(ns, 'ns.getCurrentServer()', '/Temp/terminal-server.txt'));\\n}\\n\\n/** @param {NS} ns **/\\nfunction buildServerObject(ns, node) {\\n    return {\\n        ns: ns,\\n        name: node,\\n        requiredHackLevel: dictServerRequiredHackinglevels[node],\\n        portsRequired: dictServerNumPortsRequired[node],\\n        getMinSecurity: () => dictServerMinSecurityLevels[node] ?? 0, // Servers not in our dictionary were purchased, and so undefined is okay\\n        getMaxMoney: () => dictServerMaxMoney[node] ?? 0,\\n        getMoneyPerRamSecond: () => dictServerProfitInfo ? dictServerProfitInfo[node]?.gainRate ?? 0 : (dictServerMaxMoney[node] ?? 0),\\n        getExpPerSecond: () => dictServerProfitInfo ? dictServerProfitInfo[node]?.expRate ?? 0 : (1 / dictServerMinSecurityLevels[node] ?? 0),\\n        percentageToSteal: 1.0 / 16.0, // This will get tweaked automatically based on RAM available and the relative value of this server\\n        getMoney: function () { return this.ns.getServerMoneyAvailable(this.name); },\\n        getSecurity: function () { return this.ns.getServerSecurityLevel(this.name); },\\n        canCrack: function () { return getNumPortCrackers() >= this.portsRequired; },\\n        canHack: function () { return this.requiredHackLevel <= playerHackSkill(); },\\n        shouldHack: function () {\\n            return this.getMaxMoney() > 0 && this.name !== \\\"home\\\" && !this.name.startsWith('hacknet-node-') &&\\n                !this.name.startsWith(purchasedServersName); // Hack, but beats wasting 2.25 GB on ns.getPurchasedServers()\\n        },\\n        previouslyPrepped: false,\\n        prepRegressions: 0,\\n        previousCycle: null,\\n        // \\\"Prepped\\\" means current security is at the minimum, and current money is at the maximum\\n        isPrepped: function () {\\n            let currentSecurity = this.getSecurity();\\n            let currentMoney = this.getMoney();\\n            // Logic for whether we consider the server \\\"prepped\\\" (tolerate a 1% discrepancy)\\n            let isPrepped = (currentSecurity == 0 || ((this.getMinSecurity() / currentSecurity) >= 0.99)) &&\\n                (this.getMaxMoney() != 0 && ((currentMoney / this.getMaxMoney()) >= 0.99) || stockFocus /* Only prep security in stock-focus mode */);\\n            return isPrepped;\\n        },\\n        // Function to tell if the sever is running any tools, with optional filtering criteria on the tool being run\\n        isSubjectOfRunningScript: function (filter, useCache = true, count = false) {\\n            const toolNames = hackTools.map(t => t.name);\\n            let total = 0;\\n            // then figure out if the servers are running the other 2, that means prep\\n            for (const hostname of addedServerNames)\\n                for (const process of ps(ns, hostname, useCache))\\n                    if (toolNames.includes(process.filename) && process.args[0] == this.name && (!filter || filter(process))) {\\n                        if (count) total++; else return true;\\n                    }\\n            return count ? total : false;\\n        },\\n        isPrepping: function (useCache = true) {\\n            return this.isSubjectOfRunningScript(process => process.args.length > 4 && process.args[4] == \\\"prep\\\", useCache);\\n        },\\n        isTargeting: function (useCache = true) {\\n            return this.isSubjectOfRunningScript(process => process.args.length > 4 && process.args[4].includes('Batch'), useCache);\\n        },\\n        isXpFarming: function (useCache = true) {\\n            return this.isSubjectOfRunningScript(process => process.args.length > 4 && process.args[4].includes('FarmXP'), useCache);\\n        },\\n        serverGrowthPercentage: function () {\\n            return this.ns.getServerGrowth(this.name) * bitnodeMults.ServerGrowthRate * getPlayerHackingGrowMulti() / 100;\\n        },\\n        adjustedGrowthRate: function () { return Math.min(maxGrowthRate, 1 + ((unadjustedGrowthRate - 1) / this.getMinSecurity())); },\\n        actualServerGrowthRate: function () {\\n            return Math.pow(this.adjustedGrowthRate(), this.serverGrowthPercentage());\\n        },\\n        // this is the target growth coefficient *immediately*\\n        targetGrowthCoefficient: function () {\\n            return this.getMaxMoney() / Math.max(this.getMoney(), 1);\\n        },\\n        // this is the target growth coefficient per cycle, based on theft\\n        targetGrowthCoefficientAfterTheft: function () {\\n            return 1 / (1 - (this.getHackThreadsNeeded() * this.percentageStolenPerHackThread()));\\n        },\\n        cyclesNeededForGrowthCoefficient: function () {\\n            return Math.log(this.targetGrowthCoefficient()) / Math.log(this.adjustedGrowthRate());\\n        },\\n        cyclesNeededForGrowthCoefficientAfterTheft: function () {\\n            return Math.log(this.targetGrowthCoefficientAfterTheft()) / Math.log(this.adjustedGrowthRate());\\n        },\\n        percentageStolenPerHackThread: function () {\\n            if (hasFormulas) {\\n                try {\\n                    let server = {\\n                        hackDifficulty: this.getMinSecurity(),\\n                        requiredHackingSkill: this.requiredHackLevel\\n                    }\\n                    return ns.formulas.hacking.hackPercent(server, playerStats); // hackAnalyzePercent(this.name) / 100;\\n                } catch {\\n                    hasFormulas = false;\\n                }\\n            }\\n            return Math.min(1, Math.max(0, (((100 - Math.min(100, this.getMinSecurity())) / 100) *\\n                ((playerHackSkill() - (this.requiredHackLevel - 1)) / playerHackSkill()) / 240)));\\n        },\\n        actualPercentageToSteal: function () {\\n            return this.getHackThreadsNeeded() * this.percentageStolenPerHackThread();\\n        },\\n        getHackThreadsNeeded: function () {\\n            // Force rounding of low-precision digits before taking the floor, to avoid double imprecision throwing us way off.\\n            return Math.floor((this.percentageToSteal / this.percentageStolenPerHackThread()).toPrecision(14));\\n        },\\n        getGrowThreadsNeeded: function () {\\n            return Math.min(this.getMaxMoney(), // Worse case (0 money on server) we get 1$ per thread\\n                Math.ceil((this.cyclesNeededForGrowthCoefficient() / this.serverGrowthPercentage()).toPrecision(14)));\\n        },\\n        getGrowThreadsNeededAfterTheft: function () {\\n            return Math.min(this.getMaxMoney(), // Worse case (0 money on server) we get 1$ per thread\\n                Math.ceil((this.cyclesNeededForGrowthCoefficientAfterTheft() / this.serverGrowthPercentage()).toPrecision(14)));\\n        },\\n        getWeakenThreadsNeededAfterTheft: function () {\\n            return Math.ceil((this.getHackThreadsNeeded() * hackThreadHardening / actualWeakenPotency()).toPrecision(14));\\n        },\\n        getWeakenThreadsNeededAfterGrowth: function () {\\n            return Math.ceil((this.getGrowThreadsNeededAfterTheft() * growthThreadHardening / actualWeakenPotency()).toPrecision(14));\\n        },\\n        // Once we get root, we never lose it, so we can stop asking\\n        _hasRootCached: false,\\n        hasRoot: function () { return this._hasRootCached || (this._hasRootCached = this.ns.hasRootAccess(this.name)); },\\n        isHost: function () { return this.name == daemonHost; },\\n        totalRam: function () { return this.ns.getServerMaxRam(this.name); },\\n        // Used ram is constantly changing\\n        usedRam: function () {\\n            var usedRam = this.ns.getServerUsedRam(this.name);\\n            // Complete HACK: but for most planning purposes, we want to pretend home has more ram in use than it does to leave room for \\\"preferred\\\" jobs at home\\n            if (this.name == \\\"home\\\")\\n                usedRam = Math.min(this.totalRam(), usedRam + homeReservedRam);\\n            return usedRam;\\n        },\\n        ramAvailable: function () { return this.totalRam() - this.usedRam(); },\\n        growDelay: function () { return this.timeToWeaken() - this.timeToGrow() + cycleTimingDelay; },\\n        hackDelay: function () { return this.timeToWeaken() - this.timeToHack(); },\\n        timeToWeaken: function () { return this.ns.getWeakenTime(this.name); },\\n        timeToGrow: function () { return this.ns.getGrowTime(this.name); },\\n        timeToHack: function () { return this.ns.getHackTime(this.name); },\\n        weakenThreadsNeeded: function () { return Math.ceil(((this.getSecurity() - this.getMinSecurity()) / actualWeakenPotency()).toPrecision(14)); }\\n    };\\n}\\n\\n// Helpers to get slices of info / cumulative stats across all rooted servers\\nfunction getNetworkStats() {\\n    const rootedServers = serverListByMaxRam.filter(server => server.hasRoot());\\n    const listOfServersFreeRam = rootedServers.map(s => s.ramAvailable()).filter(ram => ram > 1.6); // Servers that can't run a script don't count\\n    const totalMaxRam = rootedServers.map(s => s.totalRam()).reduce((a, b) => a + b, 0);\\n    const totalFreeRam = listOfServersFreeRam.reduce((a, b) => a + b, 0);\\n    return {\\n        listOfServersFreeRam: listOfServersFreeRam,\\n        totalMaxRam: totalMaxRam,\\n        totalFreeRam: totalFreeRam,\\n        totalUsedRam: totalMaxRam - totalFreeRam,\\n        // The money we could make if we took 100% from every currently hackable server, to help us guage how relatively profitable each server is\\n        //totalMaxMoney: rootedServers.filter(s => s.canHack() && s.shouldHack()).map(s => s.getMaxMoney()).reduce((a, b) => a + b, 0)\\n    };\\n}\\n// Simpler function to get current total percentage of ram used across the network\\nfunction getTotalNetworkUtilization() {\\n    const utilizationStats = getNetworkStats();\\n    return utilizationStats.totalUsedRam / utilizationStats.totalMaxRam;\\n}\\n\\n// return a \\\"performance snapshot\\\" (Ram required for the cycle) to compare against optimal, or another snapshot\\n// TODO: Better gaugue of performance is money stolen per (RAM * time) cost - we can schedule as many cycles as we want if done smart\\nfunction getPerformanceSnapshot(currentTarget, networkStats) {\\n    // The total RAM cost of running one weaken/hack/grow cycle to steal `currentTarget.percentageToSteal` of `currentTarget.money`\\n    const weaken1Cost = currentTarget.getWeakenThreadsNeededAfterTheft() * getTool(\\\"weak\\\").cost;\\n    const weaken2Cost = currentTarget.getWeakenThreadsNeededAfterGrowth() * getTool(\\\"weak\\\").cost;\\n    const growCost = currentTarget.getGrowThreadsNeededAfterTheft() * getTool(\\\"grow\\\").cost;\\n    const hackCost = currentTarget.getHackThreadsNeeded() * getTool(\\\"hack\\\").cost;\\n    // Simulate how many times we could schedule this batch given current server ram availability\\n    // (and hope that whatever executes the tasks in this batch is clever enough to slot them in as such (TODO: simulate using our actual executor logic?)\\n    const jobs = [weaken1Cost, weaken2Cost, growCost, hackCost].sort((a, b) => b - a); // Sort jobs largest to smallest\\n    const simulatedRemainingRam = networkStats.listOfServersFreeRam.slice();\\n    var maxScheduled = -1;\\n    var canScheduleAnother = true;\\n    while (canScheduleAnother && maxScheduled++ <= maxBatches) {\\n        for (const job of jobs) {\\n            // Find a free slot for this job, starting with largest servers as the scheduler tends to do\\n            const freeSlot = simulatedRemainingRam.sort((a, b) => b - a).findIndex(ram => ram >= job);\\n            if (freeSlot === -1)\\n                canScheduleAnother = false;\\n            else\\n                simulatedRemainingRam[freeSlot] -= job;\\n        }\\n    }\\n    return {\\n        percentageToSteal: currentTarget.actualPercentageToSteal(),\\n        canBeScheduled: maxScheduled > 0,\\n        // Given our timing delay, **approximately** how many cycles can we initiate before the first batch's first task fires?\\n        // TODO: Do a better job of calculating this *outside* of the performance snapshot, and only calculate it once.\\n        optimalPacedCycles: Math.min(maxBatches, Math.max(1, Math.floor(((currentTarget.timeToWeaken()) / cycleTimingDelay).toPrecision(14))\\n            - 1)), // Fudge factor, this isnt an exact scuence\\n        // Given RAM availability, how many cycles could we schedule across all hosts?\\n        maxCompleteCycles: Math.max(maxScheduled - 1, 1) // Fudge factor. The executor isn't perfect\\n    };\\n}\\n\\n// Produce a summary string containing information about a hack batch for a given target configuration\\nlet getTargetSummary = currentTarget =>\\n    `(H:${currentTarget.getHackThreadsNeeded()} W:${currentTarget.getWeakenThreadsNeededAfterTheft()} ` +\\n    `G:${currentTarget.getGrowThreadsNeededAfterTheft()} W²:${currentTarget.getWeakenThreadsNeededAfterGrowth()}) ` +\\n    (stockMode && shouldManipulateGrow[currentTarget.name] ? 'with grow stock ' : stockMode && shouldManipulateHack[currentTarget.name] ? 'with hack stock ' : '') +\\n    `to steal ${formatNumber(currentTarget.actualPercentageToSteal() * 100)}% ` +\\n    `(${formatMoney(currentTarget.actualPercentageToSteal() * currentTarget.getMaxMoney(), 3, 1)}) ` +\\n    `ETA: ${formatDuration(currentTarget.timeToWeaken())} at Hack ${playerHackSkill()} (${currentTarget.name})`;\\n\\n// Adjusts the \\\"percentage to steal\\\" for a target based on its respective cost and the current network RAM available\\nfunction optimizePerformanceMetrics(currentTarget) {\\n    const maxAdjustments = 1000;\\n    const start = Date.now();\\n    const networkStats = getNetworkStats();\\n    const percentPerHackThread = currentTarget.percentageStolenPerHackThread();\\n    const oldHackThreads = currentTarget.getHackThreadsNeeded();\\n    const oldActualPercentageToSteal = currentTarget.percentageToSteal = currentTarget.actualPercentageToSteal();\\n\\n    if (percentPerHackThread >= 1) {\\n        currentTarget.percentageToSteal = percentPerHackThread;\\n        currentTarget.percentageToSteal = 1;\\n        return getPerformanceSnapshot(currentTarget, networkStats);\\n    }\\n\\n    let lastAdjustmentSign = 1;\\n    let attempts = 0;\\n    let increment = Math.ceil((0.01 / percentPerHackThread).toPrecision(14)); // Initialize the adjustment increment to be the number of hack threads to steal roughly 1%\\n    let newHackThreads = oldHackThreads;\\n    currentTarget.percentageToSteal = Math.max(currentTarget.percentageToSteal, percentPerHackThread); // If the initial % to steal is below the minimum, raise it\\n    // Make adjustments to the number of hack threads until we zero in on the best amount\\n    while (++attempts < maxAdjustments) {\\n        var performanceSnapshot = getPerformanceSnapshot(currentTarget, networkStats);\\n        const adjustment = analyzeSnapshot(performanceSnapshot, currentTarget, networkStats, increment);\\n        if (runOnce && verbose)\\n            log(`Adjustment ${attempts} (increment ${increment}): ${adjustment} to ${newHackThreads} hack threads ` +\\n                `(from ${formatNumber(currentTarget.actualPercentageToSteal() * 100)}% or ${currentTarget.getHackThreadsNeeded()} hack threads)`);\\n        if (adjustment === 0.00 && increment == 1) break; // We've zeroed in on the exact number of hack threads we want\\n        if (adjustment === 0.00 || Math.sign(adjustment) != lastAdjustmentSign) { // Each time we change the direction of adjustments, slow the adjustment rate\\n            increment = Math.max(1, Math.floor((increment / 2.0).toPrecision(14)));\\n            lastAdjustmentSign = adjustment === 0.00 ? lastAdjustmentSign : Math.sign(adjustment);\\n        }\\n        newHackThreads = Math.max(newHackThreads + adjustment, 0); // Adjust the percentage to steal with pefect precision by actually adjusting the number of hack threads\\n        currentTarget.percentageToSteal = Math.max(0, newHackThreads * percentPerHackThread);\\n    }\\n    if (attempts >= maxAdjustments || verbose && currentTarget.actualPercentageToSteal() != oldActualPercentageToSteal) {\\n        log(`Tuned % to steal from ${formatNumber(oldActualPercentageToSteal * 100)}% (${oldHackThreads} threads) to ` +\\n            `${formatNumber(currentTarget.actualPercentageToSteal() * 100)}% (${currentTarget.getHackThreadsNeeded()} threads) ` +\\n            `(${currentTarget.name}) Iterations: ${attempts} Took: ${Date.now() - start} ms`);\\n    }\\n    if (verbose && currentTarget.actualPercentageToSteal() == 0) {\\n        currentTarget.percentageToSteal = percentPerHackThread;\\n        log(`Insufficient RAM for min cycle: ${getTargetSummary(currentTarget)}`);\\n        currentTarget.percentageToSteal = 0.0;\\n    }\\n    if (currentTarget.percentageToSteal != 0 && (currentTarget.actualPercentageToSteal() == 0 ||\\n        Math.abs(currentTarget.actualPercentageToSteal() - currentTarget.percentageToSteal) / currentTarget.percentageToSteal > 0.5))\\n        log(`WARNING: Big difference between %ToSteal (${formatNumber(currentTarget.percentageToSteal * 100)}%) ` +\\n            `and actual%ToSteal (${formatNumber(currentTarget.actualPercentageToSteal() * 100)}%) after ${attempts} attempts. ` +\\n            `Min is: ${formatNumber(currentTarget.percentageStolenPerHackThread() * 100)}%`, false, 'warning');\\n    return performanceSnapshot;\\n}\\n\\n// Suggests an adjustment to the percentage to steal based on how much ram would be consumed if attempting the current percentage.\\nfunction analyzeSnapshot(snapshot, currentTarget, networkStats, incrementalHackThreads) {\\n    const maxPercentageToSteal = options['max-steal-percentage'];\\n    const lastP2steal = currentTarget.percentageToSteal;\\n    // Priority is to use as close to the target ram as possible overshooting.\\n    const isOvershot = s => !s.canBeScheduled || s.maxCompleteCycles < s.optimalPacedCycles;\\n    if (verbose && runOnce)\\n        log(`canBeScheduled: ${snapshot.canBeScheduled},  maxCompleteCycles: ${snapshot.maxCompleteCycles}, optimalPacedCycles: ${snapshot.optimalPacedCycles}`);\\n    if (isOvershot(snapshot)) {\\n        return -incrementalHackThreads;\\n    } else if (snapshot.maxCompleteCycles > snapshot.optimalPacedCycles && lastP2steal < maxPercentageToSteal) {\\n        // Test increasing by the increment, but if it causes us to go over maximum desired utilization, do not suggest it\\n        currentTarget.percentageToSteal = (currentTarget.getHackThreadsNeeded() + incrementalHackThreads) * currentTarget.percentageStolenPerHackThread();\\n        var comparisonSnapshot = getPerformanceSnapshot(currentTarget, networkStats);\\n        currentTarget.percentageToSteal = lastP2steal;\\n        return isOvershot(comparisonSnapshot) ? 0.00 : incrementalHackThreads;\\n    }\\n    return 0.00;\\n}\\n\\n/** @param {NS} ns **/\\nasync function performScheduling(ns, currentTarget, snapshot) {\\n    const start = Date.now();\\n    const scheduledTasks = [];\\n    const maxCycles = Math.min(snapshot.optimalPacedCycles, snapshot.maxCompleteCycles);\\n    if (!snapshot)\\n        return;\\n    if (maxCycles === 0) {\\n        log(`WARNING: Attempt to schedule ${getTargetSummary(currentTarget)} returned 0 max cycles? ${JSON.stringify(snapshot)}`, false, 'warning');\\n        return;\\n    } else if (currentTarget.getHackThreadsNeeded() === 0) {\\n        log(`WARNING: Attempted to schedule empty cycle ${maxCycles} x ${getTargetSummary(currentTarget)}? ${JSON.stringify(snapshot)}`, false, 'warning');\\n        return;\\n    }\\n    let firstEnding = null, lastStart = null, lastBatch = 0, cyclesScheduled = 0;\\n    while (cyclesScheduled < maxCycles) {\\n        const newBatchStart = new Date((cyclesScheduled === 0) ? Date.now() + queueDelay : lastBatch.getTime() + cycleTimingDelay);\\n        lastBatch = new Date(newBatchStart.getTime());\\n        const batchTiming = getScheduleTiming(newBatchStart, currentTarget);\\n        const newBatch = getScheduleObject(batchTiming, currentTarget, scheduledTasks.length);\\n        if (firstEnding === null) { // Can't start anything after this first hack completes (until back at min security), or we risk throwing off timing\\n            firstEnding = new Date(newBatch.hackEnd.valueOf());\\n        }\\n        if (lastStart === null || lastStart < newBatch.firstFire) {\\n            lastStart = new Date(newBatch.lastFire.valueOf());\\n        }\\n        if (cyclesScheduled > 0 && lastStart >= firstEnding) {\\n            if (verbose)\\n                log(`Had to stop scheduling at ${cyclesScheduled} of ${maxCycles} desired cycles (lastStart: ${lastStart} >= firstEnding: ${firstEnding}) ${JSON.stringify(snapshot)}`);\\n            break;\\n        }\\n        scheduledTasks.push(newBatch);\\n        cyclesScheduled++;\\n    }\\n\\n    for (const schedObj of scheduledTasks) {\\n        for (const schedItem of schedObj.scheduleItems) {\\n            const discriminationArg = `Batch ${schedObj.batchNumber}-${schedItem.description}`;\\n            // Args spec: [0: Target, 1: DesiredStartTime (used to delay tool start), 2: ExpectedEndTime (informational), 3: Duration (informational), 4: DoStockManipulation, 5: DisableWarnings]\\n            const args = [currentTarget.name, schedItem.start.getTime(), schedItem.end.getTime(), schedItem.end - schedItem.start, discriminationArg];\\n            if ([\\\"hack\\\", \\\"grow\\\"].includes(schedItem.toolShortName)) // Push an arg used by remote hack/grow tools to determine whether it should manipulate the stock market\\n                args.push(stockMode && (schedItem.toolShortName == \\\"hack\\\" && shouldManipulateHack[currentTarget.name] || schedItem.toolShortName == \\\"grow\\\" && shouldManipulateGrow[currentTarget.name]) ? 1 : 0);\\n            if ([\\\"hack\\\", \\\"weak\\\"].includes(schedItem.toolShortName))\\n                args.push(options['silent-misfires'] || // Optional arg to disable toast warnings about a failed hack if hacking money gain is disabled\\n                    (schedItem.toolShortName == \\\"hack\\\" && (bitnodeMults.ScriptHackMoneyGain == 0 || playerStats.bitNodeN == 8)) ? 1 : 0); // Disable automatically in BN8 (hack income disabled)\\n            args.push(loopingMode ? 1 : 0); // Argument to indicate whether the cycle should loop perpetually\\n            if (recoveryThreadPadding > 1 && [\\\"weak\\\", \\\"grow\\\"].includes(schedItem.toolShortName))\\n                schedItem.threadsNeeded *= recoveryThreadPadding; // Only need to pad grow/weaken threads\\n            if (options.i && currentTerminalServer?.name == currentTarget.name && schedItem.toolShortName == \\\"hack\\\")\\n                schedItem.toolShortName = \\\"manualhack\\\";\\n            const result = await arbitraryExecution(ns, getTool(schedItem.toolShortName), schedItem.threadsNeeded, args)\\n            if (result == false) { // If execution fails, we have probably run out of ram.\\n                log(`WARNING: Scheduling failed for ${getTargetSummary(currentTarget)} ${discriminationArg} of ${cyclesScheduled} Took: ${Date.now() - start}ms`, false, 'warning');\\n                currentTarget.previousCycle = `INCOMPLETE. Tried: ${cyclesScheduled} x ${getTargetSummary(currentTarget)}`;\\n                return false;\\n            }\\n        }\\n    }\\n    if (verbose)\\n        log(`Scheduled ${cyclesScheduled} x ${getTargetSummary(currentTarget)} Took: ${Date.now() - start}ms`);\\n    currentTarget.previousCycle = `${cyclesScheduled} x ${getTargetSummary(currentTarget)}`\\n    return true;\\n}\\n\\n// returns an object that contains all 4 timed events start and end times as dates\\nfunction getScheduleTiming(fromDate, currentTarget) {\\n    const delayInterval = cycleTimingDelay / 4; // spacing interval used to pace our script resolution\\n    const hackTime = currentTarget.timeToHack(); // first to fire\\n    const weakenTime = currentTarget.timeToWeaken(); // second to fire\\n    const growTime = currentTarget.timeToGrow(); // third to fire\\n    const slowestTool = Math.max(hackTime, weakenTime, growTime);\\n    // Determine the times we want tasks to complete at, working backwards, and plan the execution start time accordingly\\n    const t4_secondWeakenResolvesAt = new Date(fromDate.getTime() + slowestTool + delayInterval * 3); // step 4 - weaken after grow fires last\\n    const t4_fireSecondWeakenAt = new Date(t4_secondWeakenResolvesAt.getTime() - weakenTime);\\n    const t3_growResolvesAt = new Date(t4_secondWeakenResolvesAt.getTime() - delayInterval); // step 3 (grow back) should resolve \\\"delay\\\" before the final weaken\\n    const t3_fireGrowAt = new Date(t3_growResolvesAt.getTime() - growTime);\\n    const t2_firstWeakenResolvesAt = new Date(t3_growResolvesAt.getTime() - delayInterval); // step 2 (weaken after hack) should resolve \\\"delay\\\" before the grow.\\n    const t2_fireFirstWeakenAt = new Date(t2_firstWeakenResolvesAt.getTime() - weakenTime);\\n    const t1_hackResolvesAt = new Date(t2_firstWeakenResolvesAt.getTime() - delayInterval); // step 1 (steal a bunch of money) should resolve \\\"delay\\\" before its respective weaken.\\n    const t1_fireHackAt = new Date(hackOnly ? fromDate.getTime() : t1_hackResolvesAt.getTime() - hackTime);\\n    // Track when the last task would be start (we need to ensure this doesn't happen after a prior batch has begun completing tasks)\\n    const lastThingThatFires = new Date(Math.max(t4_fireSecondWeakenAt.getTime(), t3_fireGrowAt.getTime(), t2_fireFirstWeakenAt.getTime(), t1_fireHackAt.getTime()));\\n    let schedule = {\\n        batchStart: fromDate,\\n        lastFire: lastThingThatFires,\\n        hackStart: t1_fireHackAt,\\n        hackEnd: t1_hackResolvesAt,\\n        firstWeakenStart: t2_fireFirstWeakenAt,\\n        firstWeakenEnd: t2_firstWeakenResolvesAt,\\n        growStart: t3_fireGrowAt,\\n        growEnd: t3_growResolvesAt,\\n        secondWeakenStart: t4_fireSecondWeakenAt,\\n        secondWeakenEnd: t4_secondWeakenResolvesAt\\n    };\\n    if (verbose && runOnce) {\\n        log(`Current Time: ${formatDateTime(new Date())} Established a schedule for ${getTargetSummary(currentTarget)} from requested startTime ${formatDateTime(fromDate)}:` +\\n            `\\\\n  Hack - End: ${formatDateTime(schedule.hackEnd)}  Start: ${formatDateTime(schedule.hackStart)}  Time: ${formatDuration(hackTime)}` +\\n            `\\\\n  Weak1- End: ${formatDateTime(schedule.firstWeakenEnd)}  Start: ${formatDateTime(schedule.firstWeakenStart)}  Time: ${formatDuration(weakenTime)}` +\\n            `\\\\n  Grow - End: ${formatDateTime(schedule.growEnd)}  Start: ${formatDateTime(schedule.growStart)}  Time: ${formatDuration(growTime)}` +\\n            `\\\\n  Weak2- End: ${formatDateTime(schedule.secondWeakenEnd)}  Start: ${formatDateTime(schedule.secondWeakenStart)}  Time: ${formatDuration(weakenTime)}`);\\n    }\\n    return schedule;\\n}\\n\\nfunction getScheduleObject(batchTiming, currentTarget, batchNumber) {\\n    var schedItems = [];\\n\\n    var schedHack = getScheduleItem(\\\"hack\\\", \\\"hack\\\", batchTiming.hackStart, batchTiming.hackEnd, currentTarget.getHackThreadsNeeded());\\n    var schedWeak1 = getScheduleItem(\\\"weak1\\\", \\\"weak\\\", batchTiming.firstWeakenStart, batchTiming.firstWeakenEnd, currentTarget.getWeakenThreadsNeededAfterTheft());\\n    // Special end-game case, if we have no choice but to hack a server to zero money, schedule back-to-back grows to restore money\\n    if (currentTarget.percentageStolenPerHackThread() >= 1) {\\n        // Use math and science to minimize total threads required to inject 1 dollar per threads, then grow that to max.\\n        let calcThreadsForGrow = money => Math.ceil(((Math.log(1 / (money / currentTarget.getMaxMoney())) / Math.log(currentTarget.adjustedGrowthRate()))\\n            / currentTarget.serverGrowthPercentage()).toPrecision(14));\\n        let stepSize = Math.floor(currentTarget.getMaxMoney() / 4), injectThreads = stepSize, schedGrowThreads = calcThreadsForGrow(injectThreads);\\n        for (let i = 0; i < 100 && stepSize > 0; i++) {\\n            if (injectThreads + schedGrowThreads > (injectThreads + stepSize) + calcThreadsForGrow(injectThreads + stepSize))\\n                injectThreads += stepSize;\\n            else if (injectThreads + schedGrowThreads > (injectThreads - stepSize) + calcThreadsForGrow(injectThreads - stepSize))\\n                injectThreads -= stepSize;\\n            schedGrowThreads = calcThreadsForGrow(injectThreads);\\n            stepSize = Math.floor(stepSize / 2);\\n        }\\n        schedItems.push(getScheduleItem(\\\"grow-from-zero\\\", \\\"grow\\\", new Date(batchTiming.growStart.getTime() - (cycleTimingDelay / 8)),\\n            new Date(batchTiming.growEnd.getTime() - (cycleTimingDelay / 8)), injectThreads)); // Will put $injectThreads on the server\\n        // This will then grow from whatever % $injectThreads is back to 100%\\n        var schedGrow = getScheduleItem(\\\"grow\\\", \\\"grow\\\", batchTiming.growStart, batchTiming.growEnd, schedGrowThreads);\\n        var schedWeak2 = getScheduleItem(\\\"weak2\\\", \\\"weak\\\", batchTiming.secondWeakenStart, batchTiming.secondWeakenEnd,\\n            Math.ceil(((injectThreads + schedGrowThreads) * growthThreadHardening / actualWeakenPotency()).toPrecision(14)));\\n        if (verbose)\\n            log(`INFO: Special grow strategy since percentage stolen per hack thread is 100%: G1: ${injectThreads}, G1: ${schedGrowThreads}, W2: ${schedWeak2.threadsNeeded} (${currentTarget.name})`);\\n    } else {\\n        var schedGrow = getScheduleItem(\\\"grow\\\", \\\"grow\\\", batchTiming.growStart, batchTiming.growEnd, currentTarget.getGrowThreadsNeededAfterTheft());\\n        var schedWeak2 = getScheduleItem(\\\"weak2\\\", \\\"weak\\\", batchTiming.secondWeakenStart, batchTiming.secondWeakenEnd, currentTarget.getWeakenThreadsNeededAfterGrowth());\\n    }\\n\\n    if (hackOnly) {\\n        schedItems.push(schedHack);\\n    } else {\\n        // Schedule hack/grow first, because they cannot be split, and start with whichever requires the biggest chunk of free RAM\\n        schedItems.push(...(schedHack.threadsNeeded > schedGrow.threadsNeeded ? [schedHack, schedGrow] : [schedGrow, schedHack]));\\n        // Scheduler should ensure there's room for both, but splitting threads is annoying, so schedule the biggest first again to avoid fragmentation\\n        schedItems.push(...(schedWeak1.threadsNeeded > schedWeak2.threadsNeeded ? [schedWeak1, schedWeak2] : [schedWeak2, schedWeak1]));\\n    }\\n\\n    var scheduleObject = {\\n        batchNumber: batchNumber,\\n        batchStart: batchTiming.batchStart,\\n        lastFire: batchTiming.lastFire,\\n        hackEnd: batchTiming.hackEnd,\\n        batchFinish: hackOnly ? batchTiming.hackEnd : batchTiming.secondWeakenEnd,\\n        scheduleItems: schedItems\\n    };\\n    return scheduleObject;\\n}\\n\\n// initialize a new incomplete schedule item\\nfunction getScheduleItem(description, toolShortName, start, end, threadsNeeded) {\\n    var schedItem = {\\n        description: description,\\n        toolShortName: toolShortName,\\n        start: start,\\n        end: end,\\n        threadsNeeded: threadsNeeded\\n    };\\n    return schedItem;\\n}\\n\\n// Intended as a high-powered \\\"figure this out for me\\\" run command.\\n// If it can't run all the threads at once, it runs as many as it can across the spectrum of daemons available.\\n/** @param {NS} ns **/\\nexport async function arbitraryExecution(ns, tool, threads, args, preferredServerName = null, useSmallestServerPossible = false) {\\n    // We will be using the list of servers that is sorted by most available ram\\n    sortServerList(\\\"ram\\\");\\n    var rootedServersByFreeRam = serverListByFreeRam.filter(server => server.hasRoot() && server.totalRam() > 1.6);\\n\\n    // Sort servers by total ram, and try to fill these before utilizing another server.\\n    sortServerList(\\\"totalram\\\");\\n    var preferredServerOrder = serverListByMaxRam.filter(server => server.hasRoot() && server.totalRam() > 1.6);\\n    if (useSmallestServerPossible) // Fill up small servers before utilizing larger ones (can be laggy)\\n        preferredServerOrder.reverse();\\n    // IDEA: \\\"home\\\" is more effective at grow() and weaken() than other nodes (has multiple cores) (TODO: By how much?)\\n    //       so if this is one of those tools, put it at the front of the list of preferred candidates, otherwise keep home ram free if possible\\n    //       TODO: This effort is wasted unless we also scale down the number of threads \\\"needed\\\" when running on home. We will overshoot grow/weaken\\n    //             Disable this for now, and enable it once we have solved for reducing grow/weak threads\\n    var home = preferredServerOrder.splice(preferredServerOrder.findIndex(i => i.name == \\\"home\\\"), 1)[0];\\n    if (tool.shortName == \\\"grow\\\" || tool.shortName == \\\"weak\\\" || preferredServerName == \\\"home\\\")\\n        preferredServerOrder.unshift(home); // Send to front\\n    else\\n        preferredServerOrder.push(home);\\n    // Push all \\\"hacknet-node\\\" servers to the end of the preferred list, since they will lose productivity if used\\n    var anyHacknetNodes = [];\\n    let hnNodeIndex;\\n    while (-1 !== (hnNodeIndex = preferredServerOrder.indexOf(s => s.name.startsWith('hacknet-node-'))))\\n        anyHacknetNodes.push(preferredServerOrder.splice(hnNodeIndex, 1));\\n    preferredServerOrder.push(...anyHacknetNodes.sort((a, b) => b.totalRam != a.totalRam ? b.totalRam - a.totalRam : a.name.localeCompare(b.name)));\\n\\n    // Allow for an overriding \\\"preferred\\\" server to be used in the arguments, and slot it to the front regardless of the above\\n    if (preferredServerName && preferredServerName != \\\"home\\\" /*home is handled above*/) {\\n        const preferredServerIndex = preferredServerOrder.findIndex(i => i.name == preferredServerName);\\n        if (preferredServerIndex != -1)\\n            preferredServerOrder.unshift(preferredServerOrder.splice(preferredServerIndex, 1)[0]);\\n        else\\n            log(`ERROR: Configured preferred server \\\"${preferredServerName}\\\" for ${tool.name} is not a valid server name`, true, 'error');\\n    }\\n    //log(`Preferred Server ${preferredServerName} for ${tool.name} resulted in preferred order: ${preferredServerOrder.map(srv => srv.name)}`);\\n    //log(`Servers by free ram: ${rootedServersByFreeRam.map(svr => svr.name + \\\" (\\\" + svr.ramAvailable() + \\\")\\\")}`);\\n\\n    // Helper function to compute the most threads a server can run \\n    let computeMaxThreads = function (server) {\\n        if (tool.cost == 0) return 1;\\n        let ramAvailable = server.ramAvailable();\\n        // It's a hack, but we know that \\\"home\\\"'s reported ram available is lowered to leave room for \\\"preferred\\\" jobs, \\n        // so if this is a preferred job, ignore what the server object says and get it from the source\\n        if (server.name == \\\"home\\\" && preferredServerName == \\\"home\\\")\\n            ramAvailable = ns.getServerMaxRam(\\\"home\\\") - ns.getServerUsedRam(\\\"home\\\");\\n        // Note: To be conservative, we allow double imprecision to cause this floor() to return one less than should be possible,\\n        //       because the game likely doesn't account for this imprecision (e.g. let 1.9999999999999998 return 1 rather than 2)\\n        return Math.floor((ramAvailable / tool.cost)/*.toPrecision(14)*/);\\n    };\\n\\n    let remainingThreads = threads;\\n    let splitThreads = false;\\n    for (var i = 0; i < rootedServersByFreeRam.length && remainingThreads > 0; i++) {\\n        var targetServer = rootedServersByFreeRam[i];\\n        var maxThreadsHere = Math.min(remainingThreads, computeMaxThreads(targetServer));\\n        if (maxThreadsHere <= 0)\\n            continue; //break; HACK: We don't break here because there are cases when sort order can change (e.g. we've reserved home RAM)\\n\\n        // If this server can handle all required threads, see if a server that is more preferred also has room.\\n        // If so, we prefer to pack that server with more jobs before utilizing another server.\\n        if (maxThreadsHere == remainingThreads) {\\n            for (var j = 0; j < preferredServerOrder.length; j++) {\\n                var nextMostPreferredServer = preferredServerOrder[j];\\n                // If the next largest server is also the current server with the most capacity, then it's the best one to pack\\n                if (nextMostPreferredServer == targetServer)\\n                    break;\\n                // If the job can just as easily fit on this server, prefer to put the job there\\n                if (remainingThreads <= computeMaxThreads(nextMostPreferredServer)) {\\n                    //log('Opted to exec ' + tool.name + ' on preferred server ' + nextMostPreferredServer.name + ' rather than the one with most ram (' + targetServer.name + ')');\\n                    targetServer = nextMostPreferredServer;\\n                    break;\\n                }\\n            }\\n        }\\n\\n        // If running on a non-daemon host, do a script copy check before running\\n        let just_copied = false;\\n        if (targetServer.name != daemonHost && !doesFileExist(tool.name, targetServer.name)) {\\n            let missing_scripts = [tool.name];\\n            if (!doesFileExist(getFilePath('helpers.js'), targetServer.name))\\n                missing_scripts.push(getFilePath('helpers.js')); // Some tools require helpers.js. Best to copy it around.\\n            if (verbose)\\n                log(`Copying ${tool.name} from ${daemonHost} to ${targetServer.name} so that it can be executed remotely.`);\\n            await getNsDataThroughFile(ns, `await ns.scp(${JSON.stringify(missing_scripts)}, '${daemonHost}', '${targetServer.name}')`, '/Temp/copy-scripts.txt')\\n            await ns.sleep(5); // Workaround for Bitburner bug https://github.com/danielyxie/bitburner/issues/1714 - newly created/copied files sometimes need a bit more time, even if awaited\\n            just_copied = true;\\n        }\\n        let pid = ns.exec(tool.name, targetServer.name, maxThreadsHere, ...(args || []));\\n        if (just_copied) await ns.sleep(5); // I don't know why this would make a difference (based on my understanding of the above issue), but hear reports that putting a sleep after the call to exec works around the problem\\n        if (pid == 0) {\\n            log(`ERROR: Failed to exec ${tool.name} on server ${targetServer.name} with ${maxThreadsHere} threads`, false, 'error');\\n            return false;\\n        }\\n        // Decrement the threads that have been successfully scheduled\\n        remainingThreads -= maxThreadsHere;\\n        if (remainingThreads > 0) {\\n            if (!tool.isThreadSpreadingAllowed) break;\\n            // No need to warn if it's allowed? log(`WARNING: Had to split ${threads} ${tool.name} threads across multiple servers. ${maxThreadsHere} on ${targetServer.name}`);\\n            splitThreads = true;\\n        }\\n    }\\n    // The run failed if there were threads left to schedule after we exhausted our pool of servers\\n    if (remainingThreads > 0 && threads < Number.MAX_SAFE_INTEGER)\\n        log(`ERROR: Ran out of RAM to run ${tool.name} ${splitThreads ? '' : `on ${targetServer.name} `}- ${threads - remainingThreads} of ${threads} threads were spawned.`, false, 'error');\\n    if (splitThreads && !tool.isThreadSpreadingAllowed)\\n        return false;\\n    return remainingThreads == 0;\\n}\\n\\n// Brings the server to minimum security and maximum money to prepare for cycling scheduler activity\\nasync function prepServer(ns, currentTarget) {\\n    // Check if already prepped or in targeting mode, in which case presume prep server is to be skipped.\\n    if (currentTarget.isPrepped() || currentTarget.isTargeting())\\n        return null;\\n\\n    var start = Date.now();\\n    var now = new Date(start.valueOf());\\n    var prepSucceeding = true;\\n    var growThreadsScheduled = 0;\\n    var weakenForGrowthThreadsNeeded = 0;\\n    var weakenTool = getTool(\\\"weak\\\");\\n    // Schedule grow, if needed\\n    if (currentTarget.getMoney() < currentTarget.getMaxMoney() && !stockFocus /* Prep should only weaken in stock-focus mode */) {\\n        var growTool = getTool(\\\"grow\\\");\\n        var growThreadsAllowable = growTool.getMaxThreads();\\n        var growThreadsNeeded = currentTarget.getGrowThreadsNeeded();\\n        growThreadsScheduled = Math.min(growThreadsAllowable, growThreadsNeeded);\\n        weakenForGrowthThreadsNeeded = Math.ceil((growThreadsScheduled * growthThreadHardening / actualWeakenPotency()).toPrecision(14));\\n        /* // Logic for \\\"releasing\\\" grow threads to make room for weaken threads? Doesn't seem necessary and also may be buggy\\n        var growThreadThreshold = (growThreadsAllowable - growThreadsNeeded) * (growTool.cost / weakenTool.cost);\\n        var growThreadsReleased = weakenTool.cost / growTool.cost * (weakenForGrowthThreadsNeeded + currentTarget.weakenThreadsNeeded());\\n        if (growThreadThreshold >= growThreadsReleased) {\\n            growThreadsReleased = 0;\\n        }\\n        growThreadsScheduled = Math.max(0, growThreadsScheduled - growThreadsReleased);\\n        */\\n        if (growThreadsScheduled > 0)\\n            prepSucceeding = await arbitraryExecution(ns, growTool, growThreadsScheduled, [currentTarget.name, now.getTime(), now.getTime(), 0, \\\"prep\\\"]);\\n        if (prepSucceeding == false)\\n            log('Failed to schedule all ' + growThreadsScheduled + ' prep grow threads (' + currentTarget.name + ')');\\n    }\\n    // Schedule weaken, if needed\\n    var weakenThreadsScheduled = 0;\\n    if (prepSucceeding && (currentTarget.getSecurity() > currentTarget.getMinSecurity() || weakenForGrowthThreadsNeeded > 0)) {\\n        var weakenThreadsNeeded = currentTarget.weakenThreadsNeeded() + weakenForGrowthThreadsNeeded;\\n        var weakenThreadsAllowable = weakenTool.getMaxThreads();\\n        weakenThreadsScheduled = Math.min(weakenThreadsAllowable, weakenThreadsNeeded);\\n        if (weakenThreadsScheduled > 0)\\n            prepSucceeding = await arbitraryExecution(ns, weakenTool, weakenThreadsScheduled, [currentTarget.name, now.getTime(), now.getTime(), 0, \\\"prep\\\"]);\\n        if (prepSucceeding == false)\\n            log('Failed to schedule all ' + weakenThreadsScheduled + ' prep weaken threads (' + currentTarget.name + ')');\\n    }\\n    // Log a summary of what we did here today\\n    if (verbose && prepSucceeding && (weakenThreadsScheduled > 0 || growThreadsScheduled > 0))\\n        log(`Prepping with ${weakenThreadsScheduled} weaken, ${growThreadsScheduled} grow threads (${weakenThreadsNeeded || 0} / ${growThreadsNeeded || 0} needed)` +\\n            ' ETA ' + Math.floor((currentTarget.timeToWeaken() + queueDelay) / 1000) + 's (' + currentTarget.name + ')' +\\n            ' Took: ' + (Date.now() - start) + 'ms');\\n    return prepSucceeding;\\n}\\n\\nfunction getXPFarmServer(all = false) {\\n    const hackableServers = serverListByMaxRam.filter(server => (server.hasRoot() || server.canCrack()) && server.canHack() && server.shouldHack())\\n        .sort((a, b) => b.getExpPerSecond() - a.getExpPerSecond());\\n    return all ? hackableServers : hackableServers[0];\\n}\\n\\nlet singleServerLimit; // If prior cycles failed to be scheduled, force one additional server into single-server mode until we aqcuire more RAM\\nlet lastCycleTotalRam = 0; // Cache of total ram on the server to check whether we should attempt to lift the above restriction.\\n\\n/** @param {NS} ns \\n * Gain a bunch of hack XP early after a new Augmentation by filling a bunch of RAM with weaken() against a relatively easy target */\\nasync function kickstartHackXp(ns, percentOfFreeRamToConsume = 1, verbose = false, targets = undefined) {\\n    if (!xpOnly)\\n        return await scheduleHackExpCycle(ns, getXPFarmServer(), percentOfFreeRamToConsume, verbose, false); // Grind some XP from the single best target for farming XP\\n    // Otherwise, target multiple servers until we can't schedule any more. Each next best target should get the next best (biggest) server\\n    sortServerList(\\\"totalram\\\");\\n    getTool(\\\"grow\\\").isThreadSpreadingAllowed = true; // Only true when in XP mode - where each grow thread is expected to give 1$. \\\"weak\\\" can always spread.   \\n    var jobHosts = serverListByMaxRam.filter(s => s.hasRoot() && s.totalRam() > 128); // Get the set of servers that can be reasonably expected to host decent-sized jobs\\n    if (jobHosts.length == 0) jobHosts = serverListByMaxRam.filter(s => s.hasRoot() && s.totalRam() > 16); // Lower our standards if we're early-game and nothing qualifies\\n    var homeRam = ns.getServerMaxRam(\\\"home\\\"); // If home ram is large enough, the XP contributed by additional targets is insignificant compared to the risk of increased lag/latency.\\n    targets = Math.min(maxTargets, Math.floor(jobHosts.filter(s => s.totalRam() > 0.01 * homeRam).length)); // Limit targets (too many creates lag which worsens performance, and need a dedicated server for each)\\n    let targetsByExp = getXPFarmServer(true);\\n    if (options.i) { // To farm intelligence, use manual hack on only the current connected server\\n        if (currentTerminalServer.name != \\\"home\\\") {\\n            targets = 1;\\n            targetsByExp = [currentTerminalServer];\\n        }\\n    }\\n    const etas = [];\\n    const totalServerRam = jobHosts.reduce((total, s) => total + s.totalRam(), 0);\\n    if (totalServerRam > lastCycleTotalRam) { // If we've aqcuired more ram, remove restrictions and discover the new best balance\\n        singleServerLimit = 0;\\n        lastCycleTotalRam = totalServerRam;\\n    }\\n    let tryAdvanceMode = bitnodeMults.ScriptHackMoneyGain != 0; // We can't attempt hack-based XP if it's impossible to gain hack income (XP will always be 1/4)\\n    let singleServerMode = false; // Start off maximizing hack threads for best targets by spreading their weaken/grow threads to other servers\\n    for (let i = 0; i < targets; i++) {\\n        let lastSchedulingResult;\\n        singleServerMode = singleServerMode || (i >= (jobHosts.length - 1 - singleServerLimit) || jobHosts[i + 1].totalRam() < 1000); // Switch to single-server mode if running out of hosts with high ram\\n        etas.push(lastSchedulingResult = (await scheduleHackExpCycle(ns, targetsByExp[i], 1, verbose, tryAdvanceMode, jobHosts[i], singleServerMode)) || Number.MAX_SAFE_INTEGER);\\n        if (lastSchedulingResult == Number.MAX_SAFE_INTEGER) break; // Stop scheduling targets if the last attempt failed\\n    }\\n    // TODO: waitForCycleEnd - if any targets are within 200ms? (one game tick) of the end of their cycle, wait for it to end and trigger the next cycle immediately?\\n    // Wait for all job scheduling threads to return, and sleep for the smallest cycle time remaining\\n    return Math.max(0, Math.min(...etas));\\n}\\n\\n// In case we've misfired a bit, this helper can wait a short while to see if we can start a new cycle right as the last one completes.\\nasync function waitForCycleEnd(ns, server, maxWaitTime = 200, waitInterval = 5) {\\n    const eta = nextXpCycleEnd[server.name];\\n    if (verbose) return log(`WARNING: ${server.name} FarmXP process is still in progress from a prior run. Completion time is unknown...`);\\n    const activeCycleTimeLeft = (eta || 0) - Date.now();\\n    let stillBusy;\\n    if (verbose) log(`Waiting for last ${server.name} FarmXP process to complete... (ETA ${eta ? formatDuration(activeCycleTimeLeft) : 'unknown'})`);\\n    while (stillBusy = server.isXpFarming(false) && maxWaitTime > 0) {\\n        await ns.asleep(waitInterval); // Sleep a very short while, then get a fresh process list to check again whether the process is done\\n        maxWaitTime -= waitInterval;\\n    }\\n    if (stillBusy)\\n        log(`WARNING: ${server.name} FarmXP process is ` + (eta ? `more than ${formatDuration(-activeCycleTimeLeft)} overdue...` : 'still in progress from a prior run...'));\\n    return !stillBusy;\\n}\\n\\nlet farmXpReentryLock = []; // A dictionary of server names and whether we're currently scheduling / polling for its cycle to end\\nlet nextXpCycleEnd = []; // A dictionary of server names and when their next XP farming cycle is expected to end\\n/** @param {NS} ns **/\\nasync function scheduleHackExpCycle(ns, server, percentOfFreeRamToConsume, verbose, advancedMode, allocatedServer = null, singleServer = false) {\\n    if (!server.hasRoot() && server.canCrack()) await doRoot(ns, server); // Get root if we do not already have it.\\n    if (!server.hasRoot()) return log(`ERROR: Cannot farm XP from unrooted server ${server.name}`, true, 'error');\\n    // If we are already farming XP from this server, wait for it to complete (if the last cycle is almost done) or skip scheduling more work\\n    const eta = nextXpCycleEnd[server.name];\\n    const activeCycleTimeLeft = (eta || 0) - Date.now();\\n    if (activeCycleTimeLeft > 1000) return activeCycleTimeLeft; // If we're more than 1s away from the expected fire time, just wait for the next loop, don't even check for early completion\\n    if (farmXpReentryLock[server.name] == true) return; // Ensure more than one concurrent callback isn't trying to schedule this server's faming cycle\\n    try {\\n        farmXpReentryLock[server.name] = true;\\n        let expTool; // The tool we will use to farm XP (can be hack, grow, or weaken depending on the situation)\\n        let expTime; // The time this tool will take to run\\n        if (advancedMode) { // We get the most XP by using max possible hack threads while keeping money just above 0 (so that we get full hack() exp)\\n            expTool = options.i ? getTool(\\\"manualhack\\\") : getTool(\\\"hack\\\");\\n            expTime = server.timeToHack();\\n        } else if (server.getSecurity() > server.getMinSecurity()) { // If the server isn't at min-security, we should do that (to reduce hack/grow/weaken time to the minimum)\\n            expTool = getTool(\\\"weak\\\");\\n            expTime = server.timeToWeaken();\\n        } else { // If the server is at min-security, we should farm grow(), since it takes less time (80%) than weaken(). Once at max-money, grow will no longer reduce security.\\n            expTool = getTool(\\\"grow\\\");\\n            expTime = server.timeToGrow();\\n        }\\n        if (server.isXpFarming()) {\\n            if (verbose && activeCycleTimeLeft < -50) // Warn about big misfires (sign of lag)\\n                log(`WARNING: ${server.name} FarmXP process is ` + (eta ? `more than ${formatDuration(-activeCycleTimeLeft)} overdue...` :\\n                    `still in progress from a prior run. ETA unknown, assuming '${expTool.name}' time: ${formatDuration(expTime)}`));\\n            return eta ? (activeCycleTimeLeft > 0 ? activeCycleTimeLeft : 10 /* If we're overdue, sleep only 10 ms before checking again */) : expTime /* Have no ETA, sleep for expTime */;\\n        }\\n        let threads = Math.floor(((allocatedServer == null ? expTool.getMaxThreads() : allocatedServer.ramAvailable() / expTool.cost) * percentOfFreeRamToConsume).toPrecision(14));\\n        if (threads == 0)\\n            return log(`WARNING: Cannot farm XP from ${server.name}, threads == 0 for allocated server ` + (allocatedServer == null ? '(any server)' :\\n                `${allocatedServer.name} with ${formatRam(allocatedServer.ramAvailable())} free RAM`), false, 'warning');\\n\\n        if (advancedMode) { // Need to keep server money above zero, and security at minimum to farm xp from hack(); \\n            const effectiveHackThreads = Math.ceil(1 / server.percentageStolenPerHackThread()); // Only this many hack threads \\\"count\\\" for stealing/hardening. The rest get a 'free ride'\\n            if (threads <= effectiveHackThreads) {\\n                farmXpReentryLock[server.name] = false;\\n                // We don't have enough ram for advanced XP grind (no hack threads would get a 'free ride'). Revert to simple weak/grow farming mode.\\n                return await scheduleHackExpCycle(ns, server, percentOfFreeRamToConsume, verbose, false, allocatedServer, singleServer);\\n            }\\n            var growThreadsNeeded = effectiveHackThreads; // To hack for money, server must have at least 1$ per thread that \\\"counts\\\" for the steal (threads required to steal 100%)\\n            const securityHardeningToCombat = Math.max(effectiveHackThreads * hackThreadHardening + growThreadsNeeded * growthThreadHardening, // Security that will be incurred hack() + grow() threads\\n                server.getSecurity() - server.getMinSecurity()); // If the current security level is higher than this, add enough weaken threads to correct it\\n            var weakenThreadsNeeded = Math.ceil(securityHardeningToCombat / actualWeakenPotency());\\n            // TODO: If the remaining hosts on the network can't fit 4 sets of grow + weaken recovery threads needed, switch to single-server mode! (should take into account already-scheduled cycles)\\n            if (singleServer) // If set to only use a single server, free up the hack threads to make room for recovery threads\\n                threads = Math.max(0, threads - Math.ceil((growThreadsNeeded + weakenThreadsNeeded) * 1.75 / expTool.cost)); // Make room for recovery threads\\n            if (threads == 0)\\n                return log(`Cannot farm XP from ${server.name} on ` + (allocatedServer == null ? '(any server)' : `${allocatedServer.name} with ${formatRam(allocatedServer.ramAvailable())} free RAM`) +\\n                    `: hack threads == 0 after releasing for ${growThreadsNeeded} grow threads and ${weakenThreadsNeeded} weaken threads for ${effectiveHackThreads} effective hack threads.`);\\n        }\\n\\n        let scheduleDelay = 10; // Assume it will take this long a script fired immediately to start running\\n        let now = Date.now();\\n        let scheduleTime = now + scheduleDelay;\\n        let cycleTime = scheduleDelay + expTime + 10; // Wake up this long after a hack has fired (to ensure we don't wake up too early)\\n        nextXpCycleEnd[server.name] = now + cycleTime; // Store when this server's next cycle is expected to end\\n        // Schedule the FarmXP threads first, ensuring that they are not split (if they our split, our hack threads above 'effectiveHackThreads' lose their free ride)\\n        let success = await arbitraryExecution(ns, expTool, threads, [server.name, scheduleTime, 0, expTime, \\\"FarmXP\\\"], allocatedServer?.name);\\n\\n        if (advancedMode) { // Need to keep server money above zero, and security at minimum to farm xp from hack(); \\n            const scheduleGrow = scheduleTime + cycleTime * 2 / 15 - scheduleDelay; // Time this to resolve at 1/3 * cycleTime after each hack fires\\n            const scheduleWeak = scheduleTime + cycleTime * 2 / 3 - scheduleDelay; //  Time this to resolve at 2/3 * cycleTime after each hack fires\\n            success &&= await arbitraryExecution(ns, getTool(\\\"grow\\\"), growThreadsNeeded, [server.name, scheduleGrow, 0, server.timeToGrow(), \\\"growForXp\\\"],\\n                singleServer ? allocatedServer?.name : null, !singleServer);\\n            success &&= await arbitraryExecution(ns, getTool(\\\"weak\\\"), weakenThreadsNeeded, [server.name, scheduleWeak, 0, server.timeToWeaken(), \\\"weakenForXp\\\"],\\n                singleServer ? allocatedServer?.name : null, !singleServer);\\n            //log(`XP Farm ${server.name} money available is ${formatMoney(server.getMoney())} and security is ` +\\n            //    `${server.getSecurity().toPrecision(3)} of ${server.getMinSecurity().toPrecision(3)}`);\\n            //log(`Planned start: Hack: ${Math.round(scheduleTime - now)} Grow: ${Math.round(scheduleGrow - now)} ` +\\n            //    `Weak: ${Math.round(scheduleWeak - now)} Tick: ${Math.round(cycleTime)} Cycle: ${threads} / ${growThreadsNeeded} / ${weakenThreadsNeeded}`);\\n            if (verbose) log(`Exp Cycle: ${threads} x Hack in ${Math.round(scheduleTime - now + expTime)}ms, ` +\\n                `${growThreadsNeeded} x Grow in ${Math.round((scheduleGrow - now + server.timeToGrow()) % cycleTime)}ms, ` +\\n                `${weakenThreadsNeeded} x Weak in ${Math.round((scheduleWeak - now + server.timeToWeaken()) % cycleTime)}ms, ` +\\n                `Tick: ${Math.round(cycleTime)}ms on ${allocatedServer?.name ?? '(any server)'} targeting \\\"${server.name}\\\"`);\\n        } else if (verbose)\\n            log(`In ${formatDuration(cycleTime)}, ${threads} ${expTool.shortName} threads will fire against ${server.name} (for Hack Exp)`);\\n        if (!success) { // If some aspect scheduling fails, we should try adjusting our future scheduling tactics to attempt to use less RAM\\n            if (singleServerLimit >= maxTargets && maxTargets > 1)\\n                maxTargets--;\\n            else\\n                singleServerLimit++;\\n        }\\n        // Note: Next time we tick, Hack will have *just* fired, so for the moment we will be at 0 money and above min security. Trust that all is well\\n        return cycleTime; // Ideally we wake up right after hack has fired so we can schedule another immediately\\n    } finally {\\n        farmXpReentryLock[server.name] = false;\\n    }\\n}\\n\\n// In \\\"-s\\\" mode, we collect information about our current stock positions and hack/grow with stock manipulation enabled in order to boost that stock's position.\\nconst serverStockSymbols = Object.fromEntries([\\n    [\\\"foodnstuff\\\", \\\"FNS\\\"], [\\\"sigma-cosmetics\\\", \\\"SGC\\\"], [\\\"omega-net\\\", \\\"OMGA\\\"], [\\\"comptek\\\", \\\"CTK\\\"], [\\\"netlink\\\", \\\"NTLK\\\"], [\\\"syscore\\\", \\\"SYSC\\\"], [\\\"catalyst\\\", \\\"CTYS\\\"], [\\\"lexo-corp\\\", \\\"LXO\\\"], [\\\"alpha-ent\\\", \\\"APHE\\\"], [\\\"rho-construction\\\", \\\"RHOC\\\"],\\n    [\\\"aerocorp\\\", \\\"AERO\\\"], [\\\"global-pharm\\\", \\\"GPH\\\"], [\\\"omnia\\\", \\\"OMN\\\"], [\\\"defcomm\\\", \\\"DCOMM\\\"], [\\\"solaris\\\", \\\"SLRS\\\"], [\\\"icarus\\\", \\\"ICRS\\\"], [\\\"univ-energy\\\", \\\"UNV\\\"], [\\\"nova-med\\\", \\\"NVMD\\\"], [\\\"titan-labs\\\", \\\"TITN\\\"], [\\\"microdyne\\\", \\\"MDYN\\\"], [\\\"stormtech\\\", \\\"STM\\\"],\\n    [\\\"helios\\\", \\\"HLS\\\"], [\\\"vitalife\\\", \\\"VITA\\\"], [\\\"fulcrumtech\\\", \\\"FLCM\\\"], [\\\"4sigma\\\", \\\"FSIG\\\"], [\\\"kuai-gong\\\", \\\"KGI\\\"], [\\\"omnitek\\\", \\\"OMTK\\\"], [\\\"blade\\\", \\\"BLD\\\"], [\\\"clarkinc\\\", \\\"CLRK\\\"], [\\\"ecorp\\\", \\\"ECP\\\"], [\\\"megacorp\\\", \\\"MGCP\\\"], [\\\"fulcrumassets\\\", \\\"FLCM\\\"]\\n]);\\nlet serversWithOwnedStock = []; // Dict of server names, with a value of \\\"true\\\" if we should turn on stock-manipulation when growing this server\\nlet shouldManipulateGrow = []; // Dict of server names, with a value of \\\"true\\\" if we should turn on stock-manipulation when growing this server\\nlet shouldManipulateHack = []; // Dict of server names, with a value of \\\"true\\\" if we should turn on stock-manipulation when hacking this server\\nlet failedStockUpdates = 0;\\n/** @param {NS} ns **/\\nasync function updateStockPositions(ns) {\\n    if (!playerStats.hasTixApiAccess) return; // No point in attempting anything here if the user doesn't have stock market access yet.\\n    let updatedPositions = ns.read(`/Temp/stock-probabilities.txt`); // Should be a dict of stock symbol -> prob left by the stockmaster.js script.\\n    if (!updatedPositions) {\\n        failedStockUpdates++;\\n        if (failedStockUpdates % 60 == 10) // Periodically warn if stockmaster is not running (or not generating the required file)\\n            log(`WARNING: The file \\\"/Temp/stock-probabilities.txt\\\" has been missing or empty the last ${failedStockUpdates} attempts.` +\\n                `\\\\nEnsure stockmaster.js is running, or turn off the --stock-manipulation flag when running.`, false, 'warning');\\n        return\\n    }\\n    failedStockUpdates = 0;\\n    updatedPositions = JSON.parse(updatedPositions); // Should be a dict of stock symbol -> prob left by the stockmaster.js script.\\n    // Strengthen whatever trend a stock currently has, whether we own it or not\\n    const newShouldManipulateGrow = {}, newShouldManipulateHack = {}, newServersWithOwnedStock = [];\\n    Object.keys(serverStockSymbols).forEach(server => {\\n        const sym = serverStockSymbols[server];\\n        const pos = updatedPositions[sym];\\n        newShouldManipulateGrow[server] = pos.sharesLong > 0 ? true : pos.prob >= 0.5; // If bullish, grow should be made to influence stock\\n        newShouldManipulateHack[server] = pos.sharesShort > 0 ? true : pos.prob < 0.5; // If bearish, hack should be made to influence stock\\n        if (pos.sharesLong > 0 || pos.sharesShort > 0) newServersWithOwnedStock.push(server); // Keep track of servers we own stock in so we can prioritize hacking them in stockFocus mode\\n    });\\n    if (stockFocus) { // Detect any positions that have reversed and kill all active hack/grow scripts against that server set to manipulate in the wrong direction\\n        const newLongPositions = Object.keys(serverStockSymbols).filter(server => newShouldManipulateGrow[server] && !shouldManipulateGrow[server]);\\n        if (newLongPositions.length > 0) await terminateScriptsManipulatingStock(ns, newLongPositions, getTool(\\\"hack\\\").name); // Make sure no hacks are set to manipulate our long positions down!\\n        const newShortPositions = Object.keys(serverStockSymbols).filter(server => newShouldManipulateHack[server] && !shouldManipulateHack[server]);\\n        if (newShortPositions.length > 0) await terminateScriptsManipulatingStock(ns, newShortPositions, getTool(\\\"grow\\\").name); // Make sure no grows are set to manipulate our short positions up!\\n    }\\n    shouldManipulateGrow = newShouldManipulateGrow;\\n    shouldManipulateHack = newShouldManipulateHack;\\n    serversWithOwnedStock = newServersWithOwnedStock;\\n}\\n// Kills all scripts running the specified tool and targeting one of the specified servers if stock market manipulation is enabled\\nasync function terminateScriptsManipulatingStock(ns, servers, toolName) {\\n    const problematicProcesses = addedServerNames.flatMap(hostname => ps(ns, hostname)\\n        .filter(process => servers.includes(process.args[0]) && (loopingMode || toolName == process.filename && process.args.length > 5 && process.args[5]))\\n        .map(process => ({ pid: process.pid, hostname })));\\n    if (problematicProcesses.length > 0)\\n        await runCommand(ns, JSON.stringify(problematicProcesses) + '.forEach(p => ns.kill(p.pid, p.hostname))', '/Temp/kill-remote-stock-manipulation.js');\\n}\\n\\nfunction addServer(server, verbose) {\\n    if (verbose) log(`Adding a new server to all lists: ${server}`);\\n    addedServerNames.push(server.name);\\n    // Lists maintained in various sort orders\\n    serverListByFreeRam.push(server);\\n    serverListByMaxRam.push(server);\\n    serverListByTargetOrder.push(server);\\n}\\n\\nfunction removeServerByName(deletedHostName) {\\n    addedServerNames.splice(addedServerNames.indexOf(deletedHostName), 1);\\n    const removeByName = (hostname, list, listname) => {\\n        const toRemove = list.findIndex(s => s.name === hostname);\\n        if (toRemove === -1)\\n            log(`ERROR: Failed to find server by name ${hostname}.`, true, 'error');\\n        else {\\n            list.splice(toRemove, 1);\\n            log(`${hostname} was found at index ${toRemove} of list ${listname} and removed leaving ${list.length} items.`);\\n        }\\n    }\\n    removeByName(deletedHostName, serverListByFreeRam, 'serverListByFreeRam');\\n    removeByName(deletedHostName, serverListByMaxRam, 'serverListByMaxRam');\\n    removeByName(deletedHostName, serverListByTargetOrder, 'serverListByTargetOrder');\\n}\\n\\nlet getServerByName = hostname => serverListByFreeRam.find(s => s.name == hostname);\\n\\n// Indication that a server has been flagged for deletion (by the host manager). Doesn't count for home of course, as this is where the flag file is stored for copying.\\nlet isFlaggedForDeletion = (hostName) => hostName != \\\"home\\\" && doesFileExist(\\\"/Flags/deleting.txt\\\", hostName);\\n\\n// Helper to construct our server lists from a list of all host names\\nfunction buildServerList(ns, verbose = false) {\\n    // Get list of servers (i.e. all servers on first scan, or newly purchased servers on subsequent scans) that are not currently flagged for deletion\\n    let allServers = scanAllServers(ns).filter(hostName => !isFlaggedForDeletion(hostName));\\n    // Ignore hacknet node servers if we are not supposed to run scripts on them (reduces their hash rate when we do)\\n    if (!useHacknetNodes)\\n        allServers = allServers.filter(hostName => !hostName.startsWith('hacknet-node-'))\\n    // Remove all servers we currently have added that are no longer being returned by the above query\\n    for (const hostName of addedServerNames.filter(hostName => !allServers.includes(hostName)))\\n        removeServerByName(hostName);\\n    // Add any servers that are new\\n    allServers.filter(hostName => !addedServerNames.includes(hostName)).forEach(hostName => addServer(buildServerObject(ns, hostName, verbose)));\\n}\\n\\n// Helper to sort various copies of our host list in different ways.\\nfunction sortServerList(o) {\\n    switch (o) {\\n        case \\\"ram\\\":\\n            // Original sort order adds jobs to the server with the most free ram\\n            serverListByFreeRam.sort(function (a, b) {\\n                var ramDiff = b.ramAvailable() - a.ramAvailable();\\n                return ramDiff != 0.0 ? ramDiff : a.name.localeCompare(b.name); // Break ties by sorting by name\\n            });\\n            break;\\n        case \\\"totalram\\\":\\n            // Original sort order adds jobs to the server with the most free ram\\n            serverListByMaxRam.sort(function (a, b) {\\n                var ramDiff = b.totalRam() - a.totalRam();\\n                return ramDiff != 0.0 ? ramDiff : a.name.localeCompare(b.name); // Break ties by sorting by name\\n            });\\n            break;\\n        case \\\"targeting\\\":\\n            // To ensure we establish some income, prep fastest-to-prep servers first, and target prepped servers before unprepped servers.\\n            serverListByTargetOrder.sort(function (a, b) {\\n                if (a.canHack() != b.canHack()) return a.canHack() ? -1 : 1; // Sort all hackable servers first               \\n                if (stockFocus) { // If focused on stock-market manipulation, sort up servers with a stock, prioritizing those we have some position in\\n                    let stkCmp = serversWithOwnedStock.includes(a.name) == serversWithOwnedStock.includes(b.name) ? 0 : serversWithOwnedStock.includes(a.name) ? -1 : 1;\\n                    if (stkCmp == 0) stkCmp = ((shouldManipulateGrow[a.name] || shouldManipulateHack[a.name]) == (shouldManipulateGrow[b.name] || shouldManipulateHack[b.name])) ? 0 :\\n                        shouldManipulateGrow[a.name] || shouldManipulateHack[a.name] ? -1 : 1;\\n                    if (stkCmp != 0) return stkCmp;\\n                }\\n                // Next, Sort prepped servers to the front. Assume that if we're targetting, we're prepped (between cycles)\\n                if ((a.isPrepped() || a.isTargeting()) != (b.isPrepped() || b.isTargeting)) return a.isPrepped() || a.isTargeting() ? -1 : 1;\\n                if (!a.canHack()) return a.requiredHackLevel - b.requiredHackLevel; // Unhackable servers are sorted by lowest hack requirement\\n                //if (!a.isPrepped()) return a.timeToWeaken() - b.timeToWeaken(); // Unprepped servers are sorted by lowest time to weaken\\n                // For ready-to-hack servers, the sort order is based on money, RAM cost, and cycle time\\n                return b.getMoneyPerRamSecond() - a.getMoneyPerRamSecond(); // Prepped servers are sorted by most money/ram.second\\n            });\\n            break;\\n    }\\n}\\n\\nasync function runCommand(ns, ...args) {\\n    return await runCommand_Custom(ns, getFnRunViaNsExec(ns, daemonHost), ...args);\\n}\\n\\nasync function getNsDataThroughFile(ns, ...args) {\\n    return await getNsDataThroughFile_Custom(ns, getFnRunViaNsExec(ns, daemonHost), getFnIsAliveViaNsPs(ns), ...args);\\n}\\n\\nasync function establishMultipliers(ns) {\\n    log(\\\"establishMultipliers\\\");\\n\\n    bitnodeMults = (await tryGetBitNodeMultipliers_Custom(ns, getNsDataThroughFile)) || {\\n        // prior to SF-5, bitnodeMults stays null and these mults are set to 1.\\n        ServerGrowthRate: 1,\\n        ServerWeakenRate: 1,\\n        FourSigmaMarketDataApiCost: 1,\\n        ScriptHackMoneyGain: 1\\n    };\\n    if (verbose)\\n        log(`Bitnode mults:\\\\n  ${Object.keys(bitnodeMults).filter(k => bitnodeMults[k] != 1.0).map(k => `${k}: ${bitnodeMults[k]}`).join('\\\\n  ')}`);\\n}\\n\\n/** @param {NS} ns **/\\nasync function buildToolkit(ns) {\\n    log(\\\"buildToolkit\\\");\\n    let allTools = hackTools.concat(asynchronousHelpers).concat(periodicScripts);\\n    let toolCosts = await getNsDataThroughFile(ns, `Object.fromEntries(${JSON.stringify(allTools.map(t => t.name))}` +\\n        `.map(s => [s, ns.getScriptRam(s, '${daemonHost}')]))`, '/Temp/script-costs.txt');\\n    for (const toolConfig of allTools) {\\n        let tool = {\\n            instance: ns,\\n            name: toolConfig.name,\\n            shortName: toolConfig.shortName,\\n            tail: toolConfig.tail || false,\\n            args: toolConfig.args || [],\\n            shouldRun: toolConfig.shouldRun,\\n            requiredServer: toolConfig.requiredServer,\\n            isThreadSpreadingAllowed: toolConfig.threadSpreadingAllowed === true,\\n            cost: toolCosts[toolConfig.name],\\n            canRun: function (server) {\\n                return doesFileExist(this.name, server.name) && server.ramAvailable() >= this.cost;\\n            },\\n            getMaxThreads: function () {\\n                // analyzes the servers array and figures about how many threads can be spooled up across all of them.\\n                let maxThreads = 0;\\n                sortServerList(\\\"ram\\\");\\n                for (const server of serverListByFreeRam.filter(s => s.hasRoot())) {\\n                    // Note: To be conservative, we allow double imprecision to cause this floor() to return one less than should be possible,\\n                    //       because the game likely doesn't account for this imprecision (e.g. let 1.9999999999999998 return 1 rather than 2)\\n                    var threadsHere = Math.floor((server.ramAvailable() / this.cost)/*.toPrecision(14)*/);\\n                    if (!this.isThreadSpreadingAllowed)\\n                        return threadsHere;\\n                    maxThreads += threadsHere;\\n                }\\n                return maxThreads;\\n            }\\n        };\\n        tools.push(tool);\\n        toolsByShortName[tool.shortName || hashToolDefinition(tool)] = tool;\\n    }\\n}\\n\\nconst hashToolDefinition = s => hashCode(s.name + (s.args?.toString() || ''));\\n\\nfunction getTool(s) { return toolsByShortName[s] || toolsByShortName[s.shortName || hashToolDefinition(s)]; }\\n\\nconst crackNames = [\\\"BruteSSH.exe\\\", \\\"FTPCrack.exe\\\", \\\"relaySMTP.exe\\\", \\\"HTTPWorm.exe\\\", \\\"SQLInject.exe\\\"];\\nlet ownedCracks = [];\\n\\nfunction getNumPortCrackers() {\\n    // Once we own a port cracker, assume it won't be deleted.\\n    if (ownedCracks.length == 5) return 5;\\n    for (const crack of crackNames.filter(c => !ownedCracks.includes(c)))\\n        if (doesFileExist(crack, 'home'))\\n            ownedCracks.push(crack);\\n    return ownedCracks.length;\\n}\",\"filename\":\"daemon.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"helpers.js\",\"url\":\"blob:https://danielyxie.github.io/785524ba-6d33-4e34-b896-775a36a98c0c\",\"moduleSequenceNumber\":142},{\"filename\":\"daemon.js\",\"url\":\"blob:https://danielyxie.github.io/6f273222-bd73-412d-b30d-88445ac17ef5\",\"moduleSequenceNumber\":259}],\"dependents\":[],\"ramUsage\":4,\"server\":\"home\",\"moduleSequenceNumber\":259,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"ps\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerGrowth\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { formatNumberShort, formatMoney, getNsDataThroughFile, getActiveSourceFiles } from './helpers.js'\\n\\n// Prefer to join factions in (ish) order of most expensive to least expensive \\n// This also acts as a list of default \\\"easy\\\" factions to list and compare, in addition to any other invites you may have\\nconst preferredFactionOrder = [\\n    \\\"BitRunners\\\", \\\"The Black Hand\\\", \\\"NiteSec\\\", \\\"CyberSec\\\", \\\"Netburners\\\", // Hack Based\\n    \\\"Tian Di Hui\\\", \\\"Sector-12\\\", \\\"Chongqing\\\", \\\"New Tokyo\\\", \\\"Ishima\\\", \\\"Aevum\\\", \\\"Volhaven\\\", // Location Based\\n    \\\"Slum Snakes\\\", \\\"Tetrads\\\" // Crime Based\\n];\\nlet factionNames = [];\\nlet playerData = null;\\nlet joinedFactions = [];\\nlet ownedAugmentations = [];\\nlet factionData = {};\\nlet augmentationData = {};\\nlet allAugStats = [];\\nlet options = null; // A copy of the options used at construction time\\nlet purchaseableAugs = [];\\nlet purchaseFactionDonations = [];\\n// Factors that control how augmentation prices scale\\nconst nfCountMult = 1.14\\nlet augCountMult = 1.9; // The multiplier for the cost increase of augmentations (changes based on SF11 level)\\n\\nconst argsSchema = [\\n    ['a', false], // Display all factions (spoilers), not just unlocked and early-game factions\\n    ['all', false],\\n    ['after-faction', []], // Pretend we were to buy all augs offered by these factions. Show us only what remains.\\n    ['join-only', false], // Don't generate input, just join factions that can/should be joined\\n    ['force-join', ['Slum Snakes']], // Always join these factions if we have an invite\\n    // Display-related options - controls what information is displayed and how\\n    ['v', false], // Print the terminal as well as the script logs\\n    ['verbose', false],\\n    ['i', false], // Display stats for all factions and augs, despite what we already have (kind of a \\\"mock\\\" mode)\\n    ['ignore-player-data', false],\\n    ['u', false], // When displaying total aug stats for a faction, only include augs not given by a faction further up the list\\n    ['unique', false],\\n    ['sort', 'hacking'], // What stat is the table of total faction stats sorted by\\n    ['hide-stat', ['bladeburner', 'hacknet']], // Stats to exclude from the final table (partial matching works)\\n    // Augmentation purchasing-related options. Controls what augmentations are included in cost calculations, and optionally purchased\\n    ['aug-desired', []], // These augs will be marked as \\\"desired\\\" whether or not they match desired-stats\\n    ['omit-aug', []], // Augmentations to exclude from the augmentation summary because we do not wish to purchase this round\\n    ['stat-desired', []], // Augs that give these will be starred (marked as desired and staged for purchase)\\n    ['disable-faction', []], // Factions to omit from all data, stats, and calcs, (e.g.) if you do not want to purchase augs from them, or do not want to see them because they are impractical to join at this time\\n    ['disable-donations', false], // When displaying \\\"obtainable\\\" augs and prices, don't include augs that require a donation to meet their rep requirements\\n    ['purchase', false], // Set to true to pull the trigger on purchasing all desired augs in the order specified\\n    ['neuroflux-disabled', false], // Set to true to skip including as many neuroflux upgrades as we can afford\\n];\\n\\nconst default_desired_stats = ['hacking', 'faction_rep', 'company_rep', 'charisma', 'hacknet']; // If the user does not have own many augmentations, and has not specified stats to prioritize, use these defaults\\n\\nconst stat_multis = [\\\"agility_exp\\\", \\\"agility\\\", \\\"charisma_exp\\\", \\\"charisma\\\", \\\"company_rep\\\", \\\"crime_money\\\", \\\"crime_success\\\", \\\"defense_exp\\\", \\\"defense\\\", \\\"dexterity_exp\\\", \\\"dexterity\\\",\\n    \\\"faction_rep\\\", \\\"hacking_chance\\\", \\\"hacking_exp\\\", \\\"hacking_grow\\\", \\\"hacking_money\\\", \\\"hacking\\\", \\\"hacking_speed\\\", \\\"strength_exp\\\", \\\"strength\\\", \\\"work_money\\\",\\n    \\\"bladeburner_analysis\\\", \\\"bladeburner_max_stamina\\\", \\\"bladeburner_stamina_gain\\\", \\\"bladeburner_success_chance\\\",\\n    \\\"hacknet_node_core_cost\\\", \\\"hacknet_node_level_cost\\\", \\\"hacknet_node_money\\\", \\\"hacknet_node_purchase_cost\\\", \\\"hacknet_node_ram_cost\\\"];\\n\\nconst factions = [\\\"Illuminati\\\", \\\"Daedalus\\\", \\\"The Covenant\\\", \\\"ECorp\\\", \\\"MegaCorp\\\", \\\"Bachman & Associates\\\", \\\"Blade Industries\\\", \\\"NWO\\\", \\\"Clarke Incorporated\\\", \\\"OmniTek Incorporated\\\",\\n    \\\"Four Sigma\\\", \\\"KuaiGong International\\\", \\\"Fulcrum Secret Technologies\\\", \\\"BitRunners\\\", \\\"The Black Hand\\\", \\\"NiteSec\\\", \\\"Aevum\\\", \\\"Chongqing\\\", \\\"Ishima\\\", \\\"New Tokyo\\\", \\\"Sector-12\\\",\\n    \\\"Volhaven\\\", \\\"Speakers for the Dead\\\", \\\"The Dark Army\\\", \\\"The Syndicate\\\", \\\"Silhouette\\\", \\\"Tetrads\\\", \\\"Slum Snakes\\\", \\\"Netburners\\\", \\\"Tian Di Hui\\\", \\\"CyberSec\\\", \\\"Bladeburners\\\", \\\"Church of the Machine God\\\"];\\n\\nconst augmentations = [\\\"ADR-V1 Pheromone Gene\\\", \\\"ADR-V2 Pheromone Gene\\\", \\\"Artificial Bio-neural Network Implant\\\", \\\"Artificial Synaptic Potentiation\\\", \\\"Augmented Targeting I\\\", \\\"Augmented Targeting II\\\", \\\"Augmented Targeting III\\\", \\\"BLADE-51b Tesla Armor\\\", \\\"BLADE-51b Tesla Armor: Energy Shielding Upgrade\\\", \\\"BLADE-51b Tesla Armor: IPU Upgrade\\\", \\\"BLADE-51b Tesla Armor: Omnibeam Upgrade\\\", \\\"BLADE-51b Tesla Armor: Power Cells Upgrade\\\", \\\"BLADE-51b Tesla Armor: Unibeam Upgrade\\\", \\\"Bionic Arms\\\", \\\"Bionic Legs\\\", \\\"Bionic Spine\\\", \\\"BitRunners Neurolink\\\", \\\"BitWire\\\", \\\"Blade's Runners\\\", \\\"BrachiBlades\\\", \\\"CRTX42-AA Gene Modification\\\", \\\"CashRoot Starter Kit\\\", \\\"Combat Rib I\\\", \\\"Combat Rib II\\\", \\\"Combat Rib III\\\", \\\"CordiARC Fusion Reactor\\\", \\\"Cranial Signal Processors - Gen I\\\", \\\"Cranial Signal Processors - Gen II\\\", \\\"Cranial Signal Processors - Gen III\\\", \\\"Cranial Signal Processors - Gen IV\\\", \\\"Cranial Signal Processors - Gen V\\\", \\\"DataJack\\\", \\\"DermaForce Particle Barrier\\\", \\\"ECorp HVMind Implant\\\", \\\"EMS-4 Recombination\\\", \\\"Embedded Netburner Module\\\", \\\"Embedded Netburner Module Analyze Engine\\\", \\\"Embedded Netburner Module Core Implant\\\", \\\"Embedded Netburner Module Core V2 Upgrade\\\", \\\"Embedded Netburner Module Core V3 Upgrade\\\", \\\"Embedded Netburner Module Direct Memory Access Upgrade\\\", \\\"Enhanced Myelin Sheathing\\\", \\\"Enhanced Social Interaction Implant\\\", \\\"EsperTech Bladeburner Eyewear\\\", \\\"FocusWire\\\", \\\"GOLEM Serum\\\", \\\"Graphene Bionic Arms Upgrade\\\", \\\"Graphene Bionic Legs Upgrade\\\", \\\"Graphene Bionic Spine Upgrade\\\", \\\"Graphene Bone Lacings\\\", \\\"Graphene BrachiBlades Upgrade\\\", \\\"Hacknet Node CPU Architecture Neural-Upload\\\", \\\"Hacknet Node Cache Architecture Neural-Upload\\\", \\\"Hacknet Node Core Direct-Neural Interface\\\", \\\"Hacknet Node Kernel Direct-Neural Interface\\\", \\\"Hacknet Node NIC Architecture Neural-Upload\\\", \\\"HemoRecirculator\\\", \\\"Hydroflame Left Arm\\\", \\\"HyperSight Corneal Implant\\\", \\\"Hyperion Plasma Cannon V1\\\", \\\"Hyperion Plasma Cannon V2\\\", \\\"I.N.T.E.R.L.I.N.K.E.D\\\", \\\"INFRARET Enhancement\\\", \\\"LuminCloaking-V1 Skin Implant\\\", \\\"LuminCloaking-V2 Skin Implant\\\", \\\"NEMEAN Subdermal Weave\\\", \\\"Nanofiber Weave\\\", \\\"Neotra\\\", \\\"Neural Accelerator\\\", \\\"Neural-Retention Enhancement\\\", \\\"Neuralstimulator\\\", \\\"Neuregen Gene Modification\\\", \\\"NeuroFlux Governor\\\", \\\"Neuronal Densification\\\", \\\"Neuroreceptor Management Implant\\\", \\\"Neurotrainer I\\\", \\\"Neurotrainer II\\\", \\\"Neurotrainer III\\\", \\\"Nuoptimal Nootropic Injector Implant\\\", \\\"NutriGen Implant\\\", \\\"ORION-MKIV Shoulder\\\", \\\"OmniTek InfoLoad\\\", \\\"PC Direct-Neural Interface\\\", \\\"PC Direct-Neural Interface NeuroNet Injector\\\", \\\"PC Direct-Neural Interface Optimization Submodule\\\", \\\"PCMatrix\\\", \\\"Photosynthetic Cells\\\", \\\"Power Recirculation Core\\\", \\\"SPTN-97 Gene Modification\\\", \\\"SmartJaw\\\", \\\"SmartSonar Implant\\\", \\\"Social Negotiation Assistant (S.N.A)\\\", \\\"Speech Enhancement\\\", \\\"Speech Processor Implant\\\", \\\"Synaptic Enhancement Implant\\\", \\\"Synfibril Muscle\\\", \\\"Synthetic Heart\\\", \\\"TITN-41 Gene-Modification Injection\\\", \\\"The Black Hand\\\", \\\"The Blade's Simulacrum\\\", \\\"The Red Pill\\\", \\\"The Shadow's Simulacrum\\\", \\\"Unstable Circadian Modulator\\\", \\\"Vangelis Virus\\\", \\\"Vangelis Virus 3.0\\\", \\\"Wired Reflexes\\\", \\\"Xanipher\\\", \\\"nextSENS Gene Modification\\\"]\\nconst strNF = \\\"NeuroFlux Governor\\\"\\n\\nexport function autocomplete(data, args) {\\n    data.flags(argsSchema);\\n    const lastFlag = args.length > 1 ? args[args.length - 2] : null;\\n    if (lastFlag == \\\"--sort\\\")\\n        return stat_multis;\\n    if (lastFlag == \\\"--disable-faction\\\" || lastFlag == \\\"--after-faction\\\")\\n        return factions.map(f => f.replaceAll(\\\" \\\", \\\"_\\\")).sort(); // Command line doesn't like spaces\\n    if (lastFlag == \\\"--omit-aug\\\" || lastFlag == \\\"--aug-desired\\\")\\n        return augmentations.map(f => f.replaceAll(\\\" \\\", \\\"_\\\"));\\n    return [];\\n}\\n\\n// Flags -a for all factions, -v to print to terminal\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    options = ns.flags(argsSchema);\\n    const verbose = options.v || options.verbose;\\n    const allFactions = options.a || options.all;\\n    const afterFactions = options['after-faction'].map(f => f.replaceAll(\\\"_\\\", \\\" \\\"));\\n    const omitFactions = options['disable-faction'].map(f => f.replaceAll(\\\"_\\\", \\\" \\\"));\\n    const omitAugs = options['omit-aug'].map(f => f.replaceAll(\\\"_\\\", \\\" \\\"));\\n    const desiredAugs = options['aug-desired'].map(f => f.replaceAll(\\\"_\\\", \\\" \\\"));\\n    const ignorePlayerData = options.i || options['ignore-player-data'];\\n    const sort = unshorten(options.sort); // Support the user leaving off the _mult suffix\\n    playerData = await getNsDataThroughFile(ns, 'ns.getPlayer()', '/Temp/player-info.txt');\\n    const ownedSourceFiles = await getActiveSourceFiles(ns);\\n    const sf4Level = ownedSourceFiles[4] || 0;\\n    if (sf4Level == 0)\\n        log(ns, `WARNING: This script makes heavy use of singularity functions. Without SF4, you're unlikely to get it working.`);\\n    else if (sf4Level < 3)\\n        log(ns, `WARNING: This script makes heavy use of singularity functions, which are quite expensive before you have SF4.3. ` +\\n            `Unless you have a lot of free RAM for temporary scripts, you may get runtime errors.`);\\n    const sf11Level = ownedSourceFiles[11] || 0;\\n    augCountMult = [1.9, 1.824, 1.786, 1.767][sf11Level];\\n    log(ns, `Player has sf11Level ${sf11Level}, so the multiplier after each aug purchased is ${augCountMult}.`);\\n    joinedFactions = ignorePlayerData ? [] : playerData.factions;\\n    log(ns, 'In factions: ' + joinedFactions);\\n    // Get owned augmentations (whether they've been installed or not). Ignore strNF because you can always buy more.\\n    ownedAugmentations = ignorePlayerData ? [] :\\n        (await getNsDataThroughFile(ns, 'ns.getOwnedAugmentations(true)', '/Temp/player-augs-purchased.txt')).filter(a => a != strNF);\\n    if (options['neuroflux-disabled']) omitAugs.push(strNF);\\n    log(ns, 'Getting all faction data...');\\n    await updateFactionData(ns, allFactions, omitFactions);\\n    log(ns, 'Getting all augmentation data...');\\n    await updateAugmentationData(ns, options['stat-desired'], desiredAugs);\\n    //ns.tprint(Object.values(augmentationData).map(a => a.name).sort()); Print a list of all augmentation names\\n    if (!ignorePlayerData) {\\n        log(ns, 'Joining available factions...');\\n        await joinFactions(ns);\\n        if (options['join-only']) return;\\n        displayJoinedFactionSummary(ns, verbose);\\n    }\\n    await manageUnownedAugmentations(ns, omitAugs, verbose);\\n    displayFactionSummary(ns, verbose, sort, options.u || options.unique, afterFactions, options['hide-stat']);\\n    if (options.purchase && purchaseableAugs)\\n        await purchaseDesiredAugs(ns, verbose);\\n}\\n\\nfunction log(ns, log, alsoPrintToTerminal, toastStyle) {\\n    ns.print(log);\\n    if (alsoPrintToTerminal) ns.tprint(log);\\n    if (toastStyle) ns.toast(log, toastStyle);\\n}\\n\\n// Helper function to make multi names shorter for display in a table\\nfunction shorten(mult) {\\n    return mult.replace(\\\"_mult\\\", \\\"\\\").replace(\\\"company\\\", \\\"cmp\\\").replace(\\\"faction\\\", \\\"fac\\\").replace(\\\"money\\\", \\\"$\\\").replace(\\\"crime\\\", \\\"crm\\\")\\n        .replace(\\\"agility\\\", \\\"agi\\\").replace(\\\"strength\\\", \\\"str\\\").replace(\\\"charisma\\\", \\\"cha\\\").replace(\\\"defense\\\", \\\"def\\\").replace(\\\"dexterity\\\", \\\"dex\\\").replace(\\\"hacking\\\", \\\"hack\\\")\\n        .replace(\\\"hacknet_node\\\", \\\"hn\\\").replace(\\\"bladeburner\\\", \\\"bb\\\").replace(\\\"stamina\\\", \\\"stam\\\")\\n        .replace(\\\"success_chance\\\", \\\"success\\\").replace(\\\"success\\\", \\\"prob\\\").replace(\\\"chance\\\", \\\"prob\\\");\\n}\\n\\n// Helper function to take a shortened multi name provided by the user and map it to a real multi\\nfunction unshorten(strMult) {\\n    if (stat_multis.includes(strMult)) return strMult + \\\"_mult\\\"; // They just omitted the \\\"_mult\\\" suffix shared by all\\n    if (stat_multis.includes(strMult.replace(\\\"_mult\\\", \\\"\\\"))) return strMult; // It's fine as is\\n    let match = stat_multis.find(m => shorten(m) == strMult);\\n    if (find !== undefined) return match + \\\"_mult\\\";\\n    throw `The specified stat name '${strMult}' does not match any of the known stat names: ${stat_multis.join(', ')}`;\\n}\\n\\nlet factionSortOrder = (a, b) => factionSortValue(a) - factionSortValue(b);\\nlet factionSortValue = faction => {\\n    let preferredIndex = factionNames.indexOf(faction.name || faction);\\n    return preferredIndex == -1 ? 99 : preferredIndex;\\n};\\n\\n/** @param {NS} ns **/\\nasync function updateFactionData(ns, allFactions, factionsToOmit) {\\n    factionNames = preferredFactionOrder.filter(f => !factionsToOmit.includes(f));\\n    // Add any player joined factions that may not be in the pre-defined list\\n    factionNames.push(...joinedFactions.filter(f => !factionNames.includes(f) && !factionsToOmit.includes(f)));\\n    // Add any factions that the player has earned an invite to\\n    const invitations = await getNsDataThroughFile(ns, 'ns.checkFactionInvitations()', '/Temp/player-faction-invites.txt');\\n    factionNames.push(...invitations.filter(f => !factionNames.includes(f) && !factionsToOmit.includes(f)));\\n    // If specified, get info about *all* factions in the game, not just the ones hard-coded in the preferred faction order list.\\n    if (allFactions)\\n        factionNames.push(...factions.filter(f => !factionNames.includes(f) && !factionsToOmit.includes(f)));\\n\\n    let factionsDictCommand = command => `Object.fromEntries(${JSON.stringify(factionNames)}.map(faction => [faction, ${command}]))`;\\n    let dictFactionAugs = await getNsDataThroughFile(ns, factionsDictCommand('ns.getAugmentationsFromFaction(faction)'), '/Temp/faction-augs.txt');\\n    let dictFactionReps = await getNsDataThroughFile(ns, factionsDictCommand('ns.getFactionRep(faction)'), '/Temp/faction-rep.txt');\\n    let dictFactionFavors = await getNsDataThroughFile(ns, factionsDictCommand('ns.getFactionFavor(faction)'), '/Temp/faction-favor.txt');\\n\\n    // Need information about our gang to work around a TRP bug - gang faction appears to have it available, but it's not    \\n    const gangFaction = await getNsDataThroughFile(ns, 'ns.gang.inGang() ? ns.gang.getGangInformation().faction : false', '/Temp/gang-faction.txt');\\n    if (gangFaction) dictFactionAugs[gangFaction] = dictFactionAugs[gangFaction]?.filter(a => a != \\\"The Red Pill\\\");\\n\\n    factionData = Object.fromEntries(factionNames.map(faction => [faction, {\\n        name: faction,\\n        invited: invitations.includes(faction),\\n        joined: joinedFactions.includes(faction),\\n        reputation: dictFactionReps[faction] || 0,\\n        favor: dictFactionFavors[faction],\\n        donationsUnlocked: dictFactionFavors[faction] >= ns.getFavorToDonate() && faction !== gangFaction, // Can't donate to gang factions for rep\\n        augmentations: dictFactionAugs[faction],\\n        unownedAugmentations: function (includeNf = false) { return this.augmentations.filter(aug => !ownedAugmentations.includes(aug) && (aug != strNF || includeNf)) },\\n        mostExpensiveAugCost: function () { return this.augmentations.map(augName => augmentationData[augName]).reduce((max, aug) => Math.max(max, aug.price), 0) },\\n        totalUnownedMults: function () {\\n            return this.unownedAugmentations().map(augName => augmentationData[augName])\\n                .reduce((arr, aug) => Object.keys(aug.stats).forEach(stat => arr[stat] = ((arr[stat] || 1) * aug.stats[stat])) || arr, new Map);\\n        }\\n    }]));\\n}\\n\\n/** @param {NS} ns **/\\nasync function updateAugmentationData(ns, desiredStatsFilters, desiredAugs) {\\n    const augmentationNames = [...new Set(Object.values(factionData).flatMap(f => f.augmentations))]; // augmentations.slice();\\n    const augsDictCommand = command => `Object.fromEntries(${JSON.stringify(augmentationNames)}.map(aug => [aug, ${command}]))`;\\n    const dictAugRepReqs = await getNsDataThroughFile(ns, augsDictCommand('ns.getAugmentationRepReq(aug)'), '/Temp/aug-repreqs.txt');\\n    const dictAugPrices = await getNsDataThroughFile(ns, augsDictCommand('ns.getAugmentationPrice(aug)'), '/Temp/aug-prices.txt');\\n    const dictAugStats = await getNsDataThroughFile(ns, augsDictCommand('ns.getAugmentationStats(aug)'), '/Temp/aug-stats.txt');\\n    const dictAugPrereqs = await getNsDataThroughFile(ns, augsDictCommand('ns.getAugmentationPrereq(aug)'), '/Temp/aug-prereqs.txt');\\n    if ((desiredStatsFilters?.length ?? 0) == 0 && (desiredAugs?.length ?? 0) == 0) // If the user does has not specified stats or augmentations to prioritize, use sane defaults\\n        desiredStatsFilters = ownedAugmentations.length < 40 ? default_desired_stats : ['_']; // While few augs are installed, use the default priority stats filter, otherwise, treat all augs as desired\\n    augmentationData = Object.fromEntries(augmentationNames.map(aug => [aug, {\\n        name: aug,\\n        owned: ownedAugmentations.includes(aug),\\n        reputation: dictAugRepReqs[aug],\\n        price: dictAugPrices[aug],\\n        stats: dictAugStats[aug],\\n        prereqs: dictAugPrereqs[aug] || [],\\n        // The best augmentations either have no stats (special effect like no Focus penalty, or Red Pill), or stats in the 'stat-desired' command line options\\n        desired: desiredAugs.includes(aug) || Object.keys(dictAugStats[aug]).length == 0 ||\\n            Object.keys(dictAugStats[aug]).some(key => desiredStatsFilters.some(filter => key.includes(filter))),\\n        // Get the name of the \\\"most-early-game\\\" faction from which we can buy this augmentation. Estimate this by cost of the most expensive aug the offer\\n        getFromAny: factionNames.map(f => factionData[f]).sort((a, b) => a.mostExpensiveAugCost - b.mostExpensiveAugCost)\\n            .filter(f => f.augmentations.includes(aug))[0]?.name ?? \\\"(unknown)\\\",\\n        // Get a list of joined factions that have this augmentation\\n        joinedFactionsWithAug: function () { return factionNames.map(f => factionData[f]).filter(f => f.joined && f.augmentations.includes(this.name)); },\\n        // Whether there is some joined faction which already has enough reputation to buy this augmentation\\n        canAfford: function () { return this.joinedFactionsWithAug().some(f => f.reputation >= this.reputation); },\\n        canAffordWithDonation: function () { return this.joinedFactionsWithAug().some(f => f.donationsUnlocked); },\\n        // Get the name of the **joined** faction from which we can buy this augmentation (sorted by which is closest to being able to afford it, then by most preferred)\\n        getFromJoined: function () {\\n            return (this.joinedFactionsWithAug().filter(f => f.reputation >= this.reputation)[0] ||\\n                this.joinedFactionsWithAug().filter(f => f.donationsUnlocked).sort((a, b) => getReqDonationForAug(this, a) - getReqDonationForAug(this, b))[0] ||\\n                this.joinedFactionsWithAug()[0])?.name;\\n        },\\n        toString: function () {\\n            const factionColWidth = 16, augColWidth = 40, statsColWidth = 60;\\n            const statKeys = Object.keys(this.stats);\\n            const statsString = `Stats:${statKeys.length.toFixed(0).padStart(2)}` + (statKeys.length == 0 ? '' : ` { ${statKeys.map(prop => shorten(prop) + ': ' + this.stats[prop]).join(', ')} }`);\\n            const factionName = this.getFromJoined() || this.getFromAny;\\n            const fCreep = Math.max(0, factionName.length - factionColWidth);\\n            const augNameShort = this.name.length <= (augColWidth - fCreep) ? this.name :\\n                `${this.name.slice(0, Math.ceil(augColWidth / 2 - 3 - fCreep))}...${this.name.slice(this.name.length - Math.floor(augColWidth / 2))}`;\\n            return `${this.desired ? '*' : ' '} ${this.canAfford() ? '✓' : this.canAffordWithDonation() ? '$' : '✗'} Price: ${formatMoney(this.price, 4).padEnd(7)}  ` +\\n                `Rep: ${formatNumberShort(this.reputation, 4)}  Faction: ${factionName.padEnd(factionColWidth)}  Aug: ${augNameShort.padEnd(augColWidth - fCreep)}` +\\n                `  ${statsString.length <= statsColWidth ? statsString : (statsString.substring(0, statsColWidth - 4) + '... }')}`;\\n        }\\n    }]));\\n    // Propagate desired status to any dependencies of desired augs. Note when --all-factions mode is not enabled, it's possible some prereqs are not in our list\\n    let propagateDesired = aug => !aug.desired || !aug.prereqs ? null :\\n        aug.prereqs.forEach(p => { let pa = augmentationData[p]; if (!pa) return; pa.desired = true; propagateDesired(pa); });\\n    Object.values(augmentationData).forEach(a => propagateDesired(a));\\n    allAugStats = Object.values(augmentationData).flatMap(aug => Object.keys(aug.stats)).filter((v, i, a) => a.indexOf(v) === i).sort();\\n}\\n\\n/** @param {NS} ns **/\\nasync function joinFactions(ns) {\\n    let manualJoin = [\\\"Sector-12\\\", \\\"Chongqing\\\", \\\"New Tokyo\\\", \\\"Ishima\\\", \\\"Aevum\\\", \\\"Volhaven\\\"];\\n    // If we have already joined one of the \\\"precluding\\\" factions, we are free to join the remainder\\n    if (joinedFactions.some(f => manualJoin.includes(f)))\\n        manualJoin = [];\\n    // Collect the set of augmentations we already have access to given the factions we've joined\\n    const accessibleAugmentations = new Set(joinedFactions.flatMap(fac => factionData[fac]?.augmentations ?? []));\\n    log(ns, `${accessibleAugmentations.size} augmentations are already accessible from our ${joinedFactions.length} joined factions.`);\\n    // Check for faction invitations\\n    const invitations = Object.values(factionData).filter(f => f.invited);\\n    log(ns, `Outstanding invitations from ${invitations.length} factions: ${JSON.stringify(invitations.map(f => f.name))}`);\\n    // Join all factions with remaining augmentations we care about\\n    for (const faction of invitations.sort(factionSortOrder)) {\\n        let unownedAugs = faction.unownedAugmentations(true); // Filter out augmentations we've already purchased\\n        let newAugs = unownedAugs.filter(aug => !accessibleAugmentations.has(aug)); //  Filter out augmentations we can purchase from another faction we've already joined\\n        let desiredAugs = newAugs.filter(aug => augmentationData[aug].desired); //  Filter out augmentations we have no interest in\\n        log(ns, `${faction.name} has ${faction.augmentations.length} augs, ${unownedAugs.length} unowned, ${newAugs.length} not offered by joined factions, ` +\\n            `${desiredAugs.length} with desirable stats` + (desiredAugs.length == 0 ? ' (not joining)' : `: ${JSON.stringify(desiredAugs)}`));\\n        if (desiredAugs.length == 0 && !options['force-join'].includes(faction.name)) continue;\\n        if (manualJoin.includes(faction.name) && !options['force-join'].includes(faction.name))\\n            log(ns, `Faction ${faction.name} must be manually joined.`);\\n        else {\\n            log(ns, `Joining faction ${faction.name} which has ${desiredAugs.length} desired augmentations: ${desiredAugs}`);\\n            let response;\\n            if (response = await getNsDataThroughFile(ns, `ns.joinFaction('${faction.name}')`, '/Temp/join-faction.txt')) {\\n                faction.joined = true;\\n                faction.augmentations.forEach(aug => accessibleAugmentations.add(aug));\\n                joinedFactions.push(faction.name);\\n                log(ns, `Joined faction ${faction.name} (Response: ${response})`, true, 'success')\\n            } else\\n                log(ns, `Error joining faction ${faction.name}. Response: ${response}`, false, 'error')\\n        }\\n    }\\n}\\n\\n/** Compute how much money must be donated to the faction to afford an augmentation. Faction can be either a faction object, or faction name */\\nlet getReqDonationForRep = (rep, faction) => Math.ceil(1e6 * (Math.max(0, rep - (faction.name ? faction : factionData[faction]).reputation)) / (playerData.faction_rep_mult));\\nlet getReqDonationForAug = (aug, faction) => getReqDonationForRep(aug.reputation, faction);\\n\\nlet getTotalCost = (augPurchaseOrder) => augPurchaseOrder.reduce((total, aug, i) => total + aug.price * augCountMult ** i, 0);\\n\\nlet augSortOrder = (a, b) => (b.price - a.price) || (b.reputation - a.reputation) ||\\n    (b.desired != a.desired ? (a.desired ? -1 : 1) : a.name.localeCompare(b.name));\\n\\n// Sort augmentations such that they are in order of price, except when there are prerequisites to worry about\\nfunction sortAugs(ns, augs = []) {\\n    augs.sort(augSortOrder);\\n    // Bubble up prerequisites to the top\\n    for (let i = 0; i < augs.length; i++) {\\n        for (let j = 0; j < augs[i].prereqs.length; j++) {\\n            const prereqIndex = augs.findIndex(a => a.name == augs[i].prereqs[j]);\\n            if (prereqIndex === -1 /* Already bought */ || prereqIndex < i /* Already sorted up */) continue;\\n            augs.splice(i, 0, augs.splice(prereqIndex, 1)[0]);\\n            i -= 1; // Back up i so that we revisit the prerequisites' own prerequisites\\n            break;\\n        }\\n    }\\n    // Since we are no longer most-expensive to least-expensive, the \\\"ideal purchase order\\\" is more complicated.\\n    // So now see if moving each chunk of prereqs down a slot reduces the overall price.\\n    let initialCost = getTotalCost(augs);\\n    let totalMoves = 0;\\n    for (let i = augs.length - 1; i > 0; i--) {\\n        let batchLengh = 1; // Look for a \\\"batch\\\" of prerequisites, evidenced by augs above this one being cheaper instead of more expensive\\n        while (i - batchLengh >= 0 && augs[i].price > augs[i - batchLengh].price) batchLengh++;\\n        if (batchLengh == 1) continue; // Not the start of a batch of prerequisites\\n        log(ns, `Detected a batch of length ${batchLengh} from ${augs[i - batchLengh + 1].name} to ${augs[i].name}`);\\n        let moved = 0, bestCost = initialCost;\\n        while (i + moved + 1 < augs.length) { // See if promoting augs from below the batch to above the batch reduces the overall cost\\n            let testOrder = augs.slice(), moveIndex = i + moved + 1, insertionIndex = i - batchLengh + 1 + moved;\\n            testOrder.splice(insertionIndex, 0, testOrder.splice(moveIndex, 1)[0]); // Try moving it above the batch\\n            let newCost = getTotalCost(testOrder);\\n            //log(ns, `Cost would change by ${((newCost - bestCost) / bestCost * 100).toPrecision(2)}% from ${formatMoney(bestCost)} to ${formatMoney(newCost)} by buying ${augs[moveIndex].name} before ${augs[insertionIndex].name}`);\\n            if (bestCost < newCost) break; // If the cost is worse or the same, stop shifting augs\\n            //log(ns, `Cost reduced by ${formatMoney(bestCost - newCost)} from ${formatMoney(bestCost)} to ${formatMoney(newCost)} by buying ${augs[moveIndex].name} before ${augs[insertionIndex].name}`);\\n            bestCost = newCost;\\n            augs.splice(insertionIndex, 0, augs.splice(moveIndex, 1)[0]); // Found a cheaper sort order - lock in the move!\\n            moved++;\\n        }\\n        i = i - batchLengh + 1; // Decrement i to past the batch so it doesn't try to change the batch's own order\\n        totalMoves += moved;\\n    }\\n    let finalCost = getTotalCost(augs);\\n    if (totalMoves > 0) log(ns, `Cost reduced by ${formatMoney(initialCost - finalCost)} (from ${formatMoney(initialCost)} to ${formatMoney(finalCost)}) by bubbling ${totalMoves} augs up above batches of dependencies.`);\\n    return augs;\\n}\\n\\n/** @param {NS} ns \\n * Display all information about all augmentations, including lists of available / desired / affordable augmentations in their optimal purchase order.  */\\nasync function manageUnownedAugmentations(ns, ignoredAugs, alsoPrintToTerminal) {\\n    const outputRows = [`Currently have ${ownedAugmentations.length}/30 Augmentations required for Daedalus.`];\\n    const unownedAugs = Object.values(augmentationData).filter(aug => (!aug.owned || aug.name == strNF) && !ignoredAugs.includes(aug.name));\\n    if (unownedAugs.length == 0) return log(ns, `All ${Object.keys(augmentationData).length} augmentations are either owned or ignored!`, alsoPrintToTerminal)\\n    let unavailableAugs = unownedAugs.filter(aug => aug.getFromJoined() == null);\\n    let firstListPrinted = unavailableAugs.length > 0;\\n    if (firstListPrinted) await manageFilteredSubset(ns, outputRows, 'Unavailable', unavailableAugs, true);\\n    // We use the return value to \\\"lock in\\\" the new sort order. Going forward, the routine will only re-print the aug list if the sort order changes (or forcePrint == true)\\n    let availableAugs = await manageFilteredSubset(ns, outputRows, 'Available', unownedAugs.filter(aug => aug.getFromJoined() != null), firstListPrinted ? undefined : true);\\n    if (availableAugs?.length > 0) {\\n        let augsWithRep = availableAugs.filter(aug => aug.canAfford() || (aug.canAffordWithDonation() && !options['disable-donations']));\\n        let desiredAugs = availableAugs.filter(aug => aug.desired);\\n        if (augsWithRep.length > desiredAugs.length) {\\n            augsWithRep = await manageFilteredSubset(ns, outputRows, 'Within Rep', augsWithRep)\\n            desiredAugs = await manageFilteredSubset(ns, outputRows, 'Desired', desiredAugs);\\n        } else {\\n            desiredAugs = await manageFilteredSubset(ns, outputRows, 'Desired', desiredAugs);\\n            augsWithRep = await manageFilteredSubset(ns, outputRows, 'Within Rep', augsWithRep);\\n        }\\n        await manageFilteredSubset(ns, outputRows, 'Desired Within Rep', augsWithRep.filter(aug => aug.desired), undefined, true);\\n    }\\n    // Print all rows of output that were prepped\\n    log(ns, outputRows.join(\\\"\\\\n  \\\"), alsoPrintToTerminal);\\n}\\n\\n/** @param {NS} ns \\n * Helper to generate outputs for different subsets of the augmentations, each in optimal sort order */\\nasync function manageFilteredSubset(ns, outputRows, subsetName, subset, printList = undefined /* undefined => automatically print if sort order changed */, purchaseable = false) {\\n    subset = subset.slice(); // Take a copy so we don't mess up the original array sent in.\\n    let subsetLength = subset.length;\\n    if (subsetLength == 0) {\\n        outputRows.push(`There are 0 ${subsetName}`);\\n        return subset;\\n    }\\n    // Remove augs that cannot be purchased because their prerequisites are not owned and have been filtered out\\n    do {\\n        subsetLength = subset.length\\n        for (const aug of subset.slice())\\n            if (aug.prereqs.length > 0 && aug.prereqs.some(prereq => !(ownedAugmentations.includes(prereq) || subset.some(a => a.name === prereq))))\\n                subset.splice(subset.indexOf(aug), 1);\\n    } while (subsetLength !== subset.length);\\n    // Sort the filtered subset into its optimal purchase order\\n    let subsetSorted = sortAugs(ns, subset.slice());\\n    let repCostByFaction = computeAugsRepReqDonationByFaction(ns, subsetSorted);\\n    // Compute the total rep cost for augmentations, including the cost of donating for access\\n    let totalRepCost = Object.values(repCostByFaction).reduce((t, r) => t + r, 0);\\n    let totalAugCost = getTotalCost(subsetSorted);\\n    if (printList === true || printList === undefined && !subset.every((v, i) => v == subsetSorted[i])) // If the purchase order is unchanged after filtering out augmentations, don't bother reprinting the full list\\n        outputRows.push(`${subset.length} ${subsetName} Augmentations in Optimized Purchase Order (*'s are desired augs and/or stats: ${options['stat-desired'].join(\\\", \\\")}):\\\\n  ${subsetSorted.join('\\\\n  ')}`);\\n    outputRows.push(`Total Cost of ${subset.length} ${subsetName}:`.padEnd(37) + ` ${formatMoney(totalRepCost + totalAugCost)}` +\\n        (totalRepCost == 0 ? '' : ` (Augs: ${formatMoney(totalAugCost)} + Rep: ${formatMoney(totalRepCost)})  Donate: ${JSON.stringify(repCostByFaction).replaceAll(\\\",\\\", \\\", \\\")}`));\\n    if (!purchaseable) return subsetSorted; // The remainder of the logic only applies if we are preparing a purchase order\\n\\n    // Hack: Set globals that will be purchased by another method as a final action in the main method\\n    purchaseableAugs = subsetSorted.slice();\\n    purchaseFactionDonations = repCostByFaction;\\n    // Ensure we can afford the purchase order\\n    if (totalAugCost + totalRepCost <= playerData.money && options['neuroflux-disabled']) return subsetSorted;\\n    // Remove the most expensive augmentation until we can afford all that remain\\n    const dropped = [];\\n    while (totalAugCost + totalRepCost > playerData.money) {\\n        const mostExpensiveAug = purchaseableAugs.slice().sort((a, b) => b.price - a.price)[0];\\n        let costBefore = `${formatMoney(totalRepCost + totalAugCost)} (Augs: ${formatMoney(totalAugCost)} + Rep: ${formatMoney(totalRepCost)})`;\\n        purchaseableAugs = sortAugs(ns, purchaseableAugs.filter(aug => aug !== mostExpensiveAug));\\n        purchaseFactionDonations = computeAugsRepReqDonationByFaction(ns, purchaseableAugs);\\n        totalRepCost = Object.values(purchaseFactionDonations).reduce((t, r) => t + r, 0);\\n        totalAugCost = getTotalCost(purchaseableAugs);\\n        let costAfter = `${formatMoney(totalRepCost + totalAugCost)} (Augs: ${formatMoney(totalAugCost)} + Rep: ${formatMoney(totalRepCost)})`;\\n        dropped.unshift({ aug: mostExpensiveAug, costBefore, costAfter });\\n        let dropLog = `Dropping aug from the purchase order: \\\\\\\"${mostExpensiveAug.name}\\\\\\\". New total cost: ${costAfter}`;\\n        log(ns, dropLog);\\n    }\\n    // Recursively call this method one time to display the reduced list of affordable purchases as a separate section\\n    manageFilteredSubset(ns, outputRows, 'Affordable', purchaseableAugs, purchaseableAugs.length < subset.length);\\n    // Let us know how far away we are from being able to get just one more aug:\\n    if (dropped.length > 0)\\n        outputRows.push(`Insufficient funds: had to drop ${dropped.length} augs. Next aug \\\\\\\"${dropped[0].aug.name}\\\\\\\" at: ${dropped[0].costBefore}`);\\n    // Maybe add a bunch of NeuroFlux levels to our purchase?\\n    if (!options['neuroflux-disabled']) {\\n        const augNf = augmentationData[strNF];\\n        // Arrange to purchase NF from the faction with the most reputation, to reduce the chance of having insufficient rep for higher levels TODO: Compute rep / faction donation requirements for these NF levels\\n        augNf.getFromJoined = function () { return this.joinedFactionsWithAug().sort((a, b) => b.reputation - a.reputation)[0]?.name };\\n        if (!augNf.canAfford() && !augNf.canAffordWithDonation()) {\\n            const getFrom = augNf.getFromJoined();\\n            outputRows.push(`Cannot purchase any ${strNF} because the next level requires ${formatNumberShort(augNf.reputation)} reputation, but ` +\\n                (!getFrom ? `it isn't being offered by any of our factions` : `the best faction (${getFrom}) has insufficient rep (${formatNumberShort(factionData[getFrom].reputation)}).`));\\n            const factionsWithAug = Object.values(factionData).filter(f => f.augmentations.includes(augNf.name)).sort((a, b) => b.favor - a.favor);\\n            const factionsWithAugAndInvite = factionsWithAug.filter(f => f.invited || f.joined).sort((a, b) => b.favor - a.favor);\\n            const factionWithMostFavor = factionsWithAugAndInvite[0] ?? factionsWithAug[0];\\n            if (getFrom != factionsWithAug[0].name && factionsWithAug[0] != factionsWithAugAndInvite[0])\\n                outputRows.push(`SUGGESTION: Earn an invitation to faction ${factionsWithAug[0].name} to make it easier to get rep for ${strNF} since it has the most favor (${factionsWithAug[0].favor}).`);\\n            else if (factionsWithAug[0].joined && !factionsWithAug[0].donationsUnlocked)\\n                outputRows.push(`SUGGESTION: Do some work for faction ${factionsWithAug[0].name} to qickly earn rep for ${strNF} since it has the most favor (${factionsWithAug[0].favor}).`);\\n            else if ((!getFrom || factionData[getFrom].favor < factionWithMostFavor.favor) && factionWithMostFavor.invited) {\\n                outputRows.push(`Attempting to join faction ${factionWithMostFavor.name} to make it easier to get rep for ${strNF} since it has the most favor (${factionWithMostFavor.favor}).`);\\n                options['force-join'].push(factionWithMostFavor.name);\\n                await joinFactions(ns);\\n                if (joinedFactions.includes(factionWithMostFavor.name) && factionWithMostFavor.donationsUnlocked)\\n                    augNf.getFromJoined = () => factionWithMostFavor.name;\\n            }\\n            if (!(joinedFactions.includes(factionWithMostFavor.name) && factionWithMostFavor.donationsUnlocked))\\n                return subsetSorted;\\n        }\\n        let nfPurchased = purchaseableAugs.filter(a => a.name === augNf.name).length;\\n        const augNfFaction = factionData[augNf.getFromJoined()];\\n        log(ns, `nfPurchased: ${nfPurchased}, augNfFaction: ${augNfFaction.name} (rep: ${augNfFaction.reputation}), augNf.price: ${augNf.price}, augNf.reputation: ${augNf.reputation}`);\\n        while (nfPurchased < 50) {\\n            const nextNfCost = augNf.price * (augCountMult ** purchaseableAugs.length) * (nfCountMult ** nfPurchased);\\n            const nextNfRep = augNf.reputation * (nfCountMult ** nfPurchased);\\n            let nfMsg = `Cost of NF ${nfPurchased + 1} is ${formatMoney(nextNfCost)} and will require ${formatNumberShort(nextNfRep)} reputation`\\n            if (totalAugCost + totalRepCost + nextNfCost > playerData.money) break;\\n            purchaseableAugs.push(augNf);\\n            totalAugCost += nextNfCost;\\n            if (nextNfRep > augNfFaction.reputation) {\\n                if (augNfFaction.donationsUnlocked) {\\n                    purchaseFactionDonations[augNfFaction.name] = Math.max(purchaseFactionDonations[augNfFaction.name] || 0, getReqDonationForRep(nextNfRep, augNfFaction));\\n                    totalRepCost = Object.values(purchaseFactionDonations).reduce((t, r) => t + r, 0);\\n                    nfMsg += `, which will require a donation of ${formatMoney(purchaseFactionDonations[augNfFaction.name])} to faction ${augNfFaction.name}`\\n                } else {\\n                    outputRows.push(nfMsg + `, but we only have ${formatNumberShort(augNfFaction.reputation)} reputation with faction ${augNfFaction.name}!`);\\n                    break;\\n                }\\n            } else\\n                nfMsg += ` (✓ have ${formatNumberShort(augNfFaction.reputation)} rep with faction ${augNfFaction.name})`\\n            log(ns, nfMsg);\\n            nfPurchased++;\\n        }\\n        log(ns, `Can afford to purchase ${nfPurchased} levels of ${strNF}. New total cost: ${formatMoney(totalRepCost + totalAugCost)}` +\\n            (totalRepCost == 0 ? '' : ` (Augs: ${formatMoney(totalAugCost)} + Rep: ${formatMoney(totalRepCost)})`));\\n        outputRows.push(`Total Cost of ${purchaseableAugs.length} (with +${nfPurchased} NF):`.padEnd(37) + ` ${formatMoney(totalRepCost + totalAugCost)}` +\\n            (totalRepCost == 0 ? '' : ` (Augs: ${formatMoney(totalAugCost)} + Rep: ${formatMoney(totalRepCost)})  Donate: ${JSON.stringify(repCostByFaction).replaceAll(\\\",\\\", \\\", \\\")}`));\\n    }\\n    return subsetSorted;\\n};\\n\\n/** @param {NS} ns \\n * Find out the optimal set of factions and rep-donations required to access them */\\nfunction computeAugsRepReqDonationByFaction(ns, augmentations) {\\n    const repCostByFaction = {};\\n    for (const aug of augmentations) {\\n        let faction = factionData[aug.getFromJoined() || aug.getFromAny];\\n        if (!faction.donationsUnlocked) continue; // getFromJoined() already ensures that we don't resort to faction requiring donations unless we must (and can)\\n        let reqDonation = getReqDonationForAug(aug, faction);\\n        // See if any other faction we're already planning to donate to offers the same augmentation, so we can avoid donating to multiple factions\\n        // Use the alternative faction if we're already planning on donating this much to them, or if they're closer to the donation requirement than this faction currently is\\n        let fDonationsIndex = Object.keys(repCostByFaction).findIndex(f => f == faction.name);\\n        let alternativeFaction = Object.keys(repCostByFaction).find((f, i) => f != faction.name && factionData[f].augmentations.includes(aug.name) && (\\n            (repCostByFaction[f] >= reqDonation && (fDonationsIndex == -1 || i < fDonationsIndex)) || // We're donating the same or more to the other faction, and were planning on donating to it before this one\\n            ((getReqDonationForAug(aug, f) - repCostByFaction[f]) < (reqDonation - (repCostByFaction[faction.name] || 0))))); // The amount we've committed to donating the other faction is closer to this requirement\\n        if (alternativeFaction) {\\n            log(ns, `Using alternative faction \\\"${alternativeFaction}\\\" for \\\"${aug.name}\\\" rather than earlier faction \\\"${faction.name}\\\"`)\\n            aug.getFromJoined = () => alternativeFaction;\\n            reqDonation = getReqDonationForAug(aug, alternativeFaction);\\n            faction = factionData[alternativeFaction];\\n        }\\n        if (reqDonation > 0)\\n            repCostByFaction[faction.name] = Math.max(repCostByFaction[faction.name] || 0, reqDonation);\\n    }\\n    return repCostByFaction;\\n}\\n\\n/** @param {NS} ns \\n * Donate any required rep and purchase the desired augmentations */\\nasync function purchaseDesiredAugs(ns, verbose) {\\n    let totalRepCost = Object.values(purchaseFactionDonations).reduce((t, r) => t + r, 0);\\n    let totalAugCost = getTotalCost(purchaseableAugs);\\n    let money = (await getNsDataThroughFile(ns, 'ns.getPlayer()', '/Temp/player-info.txt')).money;\\n    if (totalAugCost + totalRepCost > money)\\n        return log(ns, `ERROR: Purchase order total cost (${formatMoney(totalRepCost + totalAugCost)}` + (totalRepCost == 0 ? '' : ` (Augs: ${formatMoney(totalAugCost)} + Rep: ${formatMoney(totalRepCost)}))`) +\\n            ` is more than current player money (${formatMoney(money)}).`, verbose, 'error')\\n    // Donate to factions if necessary (using a ram-dodging script of course)\\n    if (Object.keys(purchaseFactionDonations).length > 0 && Object.values(purchaseFactionDonations).some(v => v > 0)) {\\n        if (await getNsDataThroughFile(ns, JSON.stringify(Object.keys(purchaseFactionDonations).map(f => ({ faction: f, repDonation: purchaseFactionDonations[f] }))) +\\n            '.reduce((success, o) => success && ns.donateToFaction(o.faction, o.repDonation), true)', '/Temp/facman-donate.txt'))\\n            log(ns, `SUCCESS: Donated to ${Object.keys(purchaseFactionDonations).length} factions to gain access to desired augmentations.`, verbose, 'success')\\n        else\\n            log(ns, `ERROR: One or more attempts to donate to factions for reputation failed. Go investigate!`, verbose, 'error');\\n    }\\n    // Purchase desired augs (using a ram-dodging script of course)\\n    if (purchaseableAugs.length == 0)\\n        log(ns, `INFO: Cannot afford to buy any augmentations at this time.`, verbose)\\n    else if (await getNsDataThroughFile(ns, JSON.stringify(purchaseableAugs.map(aug => ({ faction: aug.getFromJoined(), augmentation: aug.name }))) +\\n        '.reduce((success, o) => ns.purchaseAugmentation(o.faction, o.augmentation) && success, true)', '/Temp/facman-purchase-augs.txt'))\\n        log(ns, `SUCCESS: Purchased ${purchaseableAugs.length} desired augmentations in optimal order!`, verbose, 'success')\\n    else\\n        log(ns, `ERROR: Failed to purchase one or more augmentations.`, verbose, 'error');\\n}\\n\\n/** @param {NS} ns **/\\nfunction displayJoinedFactionSummary(ns, alsoPrintToTerminal) {\\n    let joinedFactions = Object.values(factionData).filter(f => f.joined);\\n    let summary = `${joinedFactions.length} Joined Factions:`\\n    let noaugs = joinedFactions.filter(f => f.unownedAugmentations().length == 0)\\n    if (noaugs.length > 0)\\n        summary += `\\\\n  ${noaugs.length} joined factions have no unowned augs remaining: \\\"${noaugs.map(f => f.name).join('\\\", \\\"')}\\\"`;\\n    for (const faction of joinedFactions.filter(f => !noaugs.includes(f)))\\n        summary += `\\\\n  ${faction.name}: ${faction.unownedAugmentations().length} augs remaining (${faction.unownedAugmentations().join(\\\", \\\")})`;\\n    log(ns, summary, alsoPrintToTerminal);\\n}\\n\\n/** @param {NS} ns **/\\nfunction displayFactionSummary(ns, alsoPrintToTerminal, sortBy, unique, overrideFinishedFactions, excludedStats) {\\n    let noAugs = Object.values(factionData).filter(f => f.unownedAugmentations().length == 0);\\n    if (noAugs.length > 0)\\n        log(ns, `${noAugs.length} factions have no augmentations to purchase (excluding NF): ${JSON.stringify(noAugs.map(a => a.name))}`, alsoPrintToTerminal);\\n    let summaryFactions = Object.values(factionData).filter(f => f.unownedAugmentations().length > 0 && !overrideFinishedFactions.includes(f.name));\\n    if (summaryFactions.length == 0) return;\\n    // Apply any override faction options\\n    joinedFactions.push(...overrideFinishedFactions.filter(f => !joinedFactions.includes(f)));\\n    for (const faction of overrideFinishedFactions)\\n        ownedAugmentations.push(...factionData[faction].unownedAugmentations());\\n    // Grab disctinct augmentations stats \\n    const relevantAugStats = allAugStats.filter(s => !excludedStats.find(excl => s.includes(excl)) &&\\n        undefined !== summaryFactions.find(f => f.unownedAugmentations().find(aug => 1 != (augmentationData[aug].stats[s] || 1))));\\n    let summary = `${summaryFactions.length} factions with augmentations (sorted by total ${sortBy}):`;\\n    // Creates the table header row\\n    let getHeaderRow = countName => `\\\\n   Faction Name ${countName.padStart(9)} / Total Augs ` + relevantAugStats.map(key => shorten(key).padStart(4)).join(' ');\\n    // Creates the string to display a single faction's stats in the table\\n    let getFactionSummary = faction => {\\n        const totalMults = faction.totalUnownedMults();\\n        return `\\\\n ${faction.joined ? '✓' : faction.invited ? '✉' : '✗'} ${faction.name} `.padEnd(32) + // TODO: Display faction rep / max aug rep\\n            `${String(faction.unownedAugmentations().length).padStart(2)} / ${String(faction.augmentations.length).padEnd(2)} ` +\\n            relevantAugStats.map(key => (totalMults[key] === undefined ? '-' : totalMults[key].toPrecision(3)).padStart(Math.max(shorten(key).length, 4))).join(' ');\\n    };\\n    // Helper to sort the factions in order of most-contributing to the desired multiplier\\n    let sortFunction = (a, b) => {\\n        let aMultiContrib = a.totalUnownedMults()[sortBy] || 1, bMultiContrib = b.totalUnownedMults()[sortBy] || 1;\\n        let sort1 = bMultiContrib - aMultiContrib; // Sort by the total amount of desired multi provided by this faction\\n        let sort2 = (a.joined ? 0 : 1) - (b.joined ? 0 : 1); // If tied, sort by which faction we've joined\\n        if (unique && bMultiContrib > 1 && aMultiContrib > 1 && sort2 != 0) return sort2; // When in \\\"unique\\\" mode it's important to first list contributing factions we've already joined\\n        if (sort1 != 0) return sort1;\\n        if (sort2 != 0) return sort2;\\n        let sort3 = b.reputation - a.reputation; // If tied, sort by which faction we have the most rep with\\n        if (sort3 != 0) return sort3;\\n        let sort4 = a.mostExpensiveAugCost().length - b.mostExpensiveAugCost().length; // If tied, \\\"soonest to unlock\\\", estimated by their most expensive aug cost\\n        if (sort4 != 0) return sort4;\\n        return (a.name).localeCompare(b.name) // If still tied, sort by naeme\\n    };\\n    // Helper to insert a table separator between factions that do and don't contribute to the specified stat\\n    let moreContributors = true;\\n    let getSeparator = faction => (moreContributors && !(moreContributors = faction.totalUnownedMults()[sortBy] !== undefined)) ?\\n        `\\\\n---------------------------  (Factions below offer no augs that contribute to '${sortBy}')` : '';\\n    summary += getHeaderRow(unique ? 'New' : 'Unowned');\\n    if (!unique) // Each faction is summarized based on all the unowned augs it has, regardless of whether a faction higher up the list has the same augs\\n        for (const faction of summaryFactions.sort(sortFunction))\\n            summary += getSeparator(faction) + getFactionSummary(faction);\\n    else { // Each faction's stats computed as though the faction sorted above it was joined and bought out first, so only showing new augs\\n        const actualOwnedAugs = ownedAugmentations;\\n        const actualUnjoinedFactions = summaryFactions;\\n        do {\\n            summaryFactions.sort(sortFunction);\\n            const faction = summaryFactions.shift();\\n            summary += getSeparator(faction) + getFactionSummary(faction);\\n            joinedFactions.push(faction.name);  // Simulate that we've now joined and bought out all this factions augs\\n            ownedAugmentations.push(...faction.unownedAugmentations())\\n        } while (summaryFactions.length > 0)\\n        ownedAugmentations = actualOwnedAugs; // Restore the original lists once the simulation is complete\\n        summaryFactions = actualUnjoinedFactions;\\n    }\\n    log(ns, summary, alsoPrintToTerminal);\\n}\",\"filename\":\"faction-manager.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"helpers.js\",\"url\":\"blob:https://danielyxie.github.io/8e1cc1b4-46b8-405f-863a-bd862ceafc86\",\"moduleSequenceNumber\":142},{\"filename\":\"faction-manager.js\",\"url\":\"blob:https://danielyxie.github.io/90e8edfb-9884-4bca-8f79-e5aed99aadd9\",\"moduleSequenceNumber\":318}],\"dependents\":[],\"ramUsage\":2.8,\"server\":\"home\",\"moduleSequenceNumber\":318,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getFavorToDonate\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"run\",\"cost\":1},{\"type\":\"fn\",\"name\":\"isRunning\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { formatMoney, formatDuration, formatNumberShort, disableLogs } from './helpers.js'\\n\\nconst argsSchema = [\\n    ['trips-per-cycle', 1000],\\n    ['money-threshold', 1000000000000]\\n];\\n\\nexport function autocomplete(data, args) {\\n    data.flags(argsSchema);\\n    return [];\\n}\\n\\n/** @param {NS} ns \\n * Script contributed by https://github.com/ShawnPatton\\n * Concept: A small amount of intelligence is granted when you (successfully) travel to a new city. This script converts money into intelligence exp! **/\\nexport async function main(ns) {\\n    disableLogs(ns, [\\\"travelToCity\\\", \\\"sleep\\\"]);\\n    ns.tail();\\n    let options = ns.flags(argsSchema);\\n    let tripsPerCycle = options['trips-per-cycle'];\\n    let moneyThreshold = options['money-threshold'];\\n    ns.print(`trips-per-cycle: ` + tripsPerCycle);\\n    ns.print(`money-threshold: ` + formatMoney(moneyThreshold));\\n    let justStarted = true;\\n    let previousInt = ns.getPlayer().intelligence;\\n    let currentInt = previousInt;\\n    let previousLevelTime = Date.now();\\n    let levelupTime;\\n    let cycles = 0;\\n    let duration = 0;\\n    let tripsPerLevel = 0;\\n    let tripsPerMs = 0;\\n    ns.print(`Starting Script at Int ` + currentInt);\\n    while (true) {\\n        while (ns.getPlayer().money > moneyThreshold) {\\n            for (let i = 0; i < tripsPerCycle; i++) {\\n                ns.travelToCity(\\\"Aevum\\\");\\n                ns.travelToCity(\\\"Sector-12\\\");\\n            }\\n            await ns.sleep(1);\\n            cycles++;\\n            if (previousInt != ns.getPlayer().intelligence) {\\n                currentInt = ns.getPlayer().intelligence;\\n                levelupTime = Date.now();\\n                duration = levelupTime - previousLevelTime;\\n                tripsPerLevel = cycles * tripsPerCycle * 2;\\n                tripsPerMs = Math.floor(tripsPerLevel / duration);\\n                ns.print(`Level Up: Int ` + currentInt + (justStarted ? ` Partial` : ` Full`) + ` Level in `\\n                    + formatDuration(duration) + ` & ` + formatNumberShort(tripsPerLevel) + ` Travels`);\\n                ns.print(`Approximately ` + tripsPerMs + ` Trips/Millisecond`);\\n                previousLevelTime = levelupTime;\\n                previousInt = currentInt;\\n                justStarted = false;\\n                cycles = 0;\\n            }\\n        }\\n        await ns.sleep(10000);\\n        ns.print(`Below money threshold, waiting 10 seconds`);\\n    }\\n}\",\"filename\":\"farm-intelligence.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4.1,\"server\":\"home\",\"moduleSequenceNumber\":138,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"travelToCity\",\"cost\":2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { formatMoney, formatNumberShort, getNsDataThroughFile, getActiveSourceFiles, runCommand, tryGetBitNodeMultipliers } from './helpers.js'\\n\\n// Global constants\\nconst updateInterval = 200;\\nconst maxSpendPerTickTransientEquipment = 0.002;\\nconst maxSpendPerTickPermanentEquipment = 0.2; // Spend up to this percent of non-reserved cash on permanent member upgrades\\nconst wantedPenaltyThreshold = 0.0001; // Don't let the wanted penalty get worse than this\\n\\n// Territory-related variables\\nconst gangsByPower = [\\\"Speakers for the Dead\\\", \\\"The Dark Army\\\", \\\"The Syndicate\\\", \\\"Slum Snakes\\\", \\\"NiteSec\\\", \\\"The Black Hand\\\", /* \\\"NiteSec\\\" Been there, not fun. */]\\nconst territoryEngageThreshold = 0.80; // Minimum average win chance (of gangs with territory) before we engage other clans\\nlet territoryTickDetected = false;\\nlet territoryTickTime = 20000; // Est. milliseconds until territory *ticks*. Can vary if processing offline time\\nlet territoryNextTick = null; // The next time territory will tick\\nlet isReadyForNextTerritoryTick = false;\\nlet warfareFinished = false;\\nlet lastTerritoryPower = 0;\\nlet lastOtherGangInfo = null;\\n\\n// Crime activity-related variables TODO all tasks list to evaluate\\nconst crimes = [\\\"Mug People\\\", \\\"Deal Drugs\\\", \\\"Strongarm Civilians\\\", \\\"Run a Con\\\", \\\"Armed Robbery\\\", \\\"Traffick Illegal Arms\\\", \\\"Threaten & Blackmail\\\", \\\"Human Trafficking\\\", \\\"Terrorism\\\",\\n    \\\"Ransomware\\\", \\\"Phishing\\\", \\\"Identity Theft\\\", \\\"DDoS Attacks\\\", \\\"Plant Virus\\\", \\\"Fraud & Counterfeiting\\\", \\\"Money Laundering\\\", \\\"Cyberterrorism\\\"];\\nlet pctTraining = 0.10;\\nlet multGangSoftcap;\\nlet allTaskNames;\\nlet allTaskStats;\\nlet assignedTasks = {}; // Each member will independently attempt to scale up the crime they perform until they are ineffective or we start generating wanted levels\\nlet lastMemberReset = {}; // Tracks when each member last ascended\\n\\n// Global state\\nlet ownedSourceFiles;\\nlet myGangFaction = \\\"\\\";\\nlet isHackGang = false;\\nlet requiredRep = 0;\\nlet myGangMembers = [];\\nlet equipments = [];\\nlet importantStats = [];\\n\\nlet options;\\nconst argsSchema = [\\n    ['training-percentage', 0.10], // Spend this percent of time training gang members versus doing crime\\n    ['no-training', false], // Don't train unless all other tasks generate no gains\\n    ['no-auto-ascending', false], // Don't ascend members\\n    ['ascend-multi-threshold', 1.1], // Ascend member #12 if a primary stat multi would increase by more than this amount\\n    ['ascend-multi-threshold-spacing', 0], // Members will space their acention multis by this amount to ensure they are ascending at different rates \\n    // Note: given the above two defaults, members would ascend at multis [1.6, 1.55, 1.50, ..., 1.1, 1.05] once you have 12 members.\\n    ['min-training-ticks', 20], // Require this many ticks of training after ascending or recruiting\\n];\\n\\nexport function autocomplete(data, _) {\\n    data.flags(argsSchema);\\n    return [];\\n}\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    ownedSourceFiles = await getActiveSourceFiles(ns);\\n    const sf2Level = ownedSourceFiles[2] || 0;\\n    if (sf2Level == 0)\\n        return log(ns, \\\"ERROR: You have no yet unlocked gangs. Script should not be run...\\\");\\n\\n    await initialize(ns);\\n    log(ns, \\\"Starting main loop...\\\");\\n    while (true) {\\n        try { await mainLoop(ns); }\\n        catch (err) { log(ns, `ERROR: Caught an unhandled error in the main loop: ${String(err)}`, 'error', true); }\\n        await ns.sleep(updateInterval);\\n    }\\n}\\n\\n/** @param {NS} ns \\n * One-time setup actions. **/\\nasync function initialize(ns) {\\n    ns.disableLog('ALL');\\n    options = ns.flags(argsSchema);\\n    pctTraining = options['no-training'] ? 0 : options['training-percentage'];\\n\\n    let loggedWaiting = false;\\n    while (!(await getNsDataThroughFile(ns, 'ns.gang.inGang()', '/Temp/player-gang-joined.txt'))) {\\n        if (!loggedWaiting) {\\n            log(ns, `Waiting to be in a gang. Will create the highest faction gang as soon as it is available...`);\\n            loggedWaiting = true;\\n        }\\n        await runCommand(ns, `${JSON.stringify(gangsByPower)}.forEach(g => ns.gang.createGang(g))`, '/Temp/gang-createGang.js');\\n        await ns.sleep(1000); // Wait for our human to join a gang\\n    }\\n    log(ns, \\\"Collecting gang information...\\\");\\n    const myGangInfo = ns.gang.getGangInformation(); //await getNsDataThroughFile(ns, 'ns.gang.getGangInformation()', '/Temp/gang-info.txt');\\n    myGangFaction = myGangInfo.faction;\\n    if (loggedWaiting) log(ns, `SUCCESS: Created gang ${myGangFaction}`, 'success', true);\\n    isHackGang = myGangInfo.isHacking;\\n    importantStats = isHackGang ? [\\\"hack\\\"] : [\\\"str\\\", \\\"def\\\", \\\"dex\\\", \\\"agi\\\"];\\n    lastTerritoryPower = myGangInfo.power;\\n    territoryNextTick = Date.now() + territoryTickTime; // Expect to miss be \\\"caught unaware\\\" by the first territory tick\\n    territoryTickDetected = isReadyForNextTerritoryTick = warfareFinished = false;\\n    lastOtherGangInfo = null;\\n\\n    // If possible, determine how much rep we would need to get the most expensive unowned augmentation\\n    const sf4Level = ownedSourceFiles[4] || 0;\\n    requiredRep = -1;\\n    if (sf4Level == 0)\\n        log(ns, `INFO: SF4 required to get gang augmentation info. Defaulting to assuming ~2.5 million rep is desired.`);\\n    else {\\n        try {\\n            if (sf4Level < 3)\\n                log(ns, `WARNING: This script makes heavy use of singularity functions, which are quite expensive before you have SF4.3. ` +\\n                    `Unless you have a lot of free RAM for temporary scripts, you may get runtime errors.`);\\n            const augmentationNames = await getNsDataThroughFile(ns, `ns.getAugmentationsFromFaction('${myGangFaction}')`, '/Temp/gang-augs.txt');\\n            const ownedAugmentations = await getNsDataThroughFile(ns, `ns.getOwnedAugmentations(true)`, '/Temp/player-augs-purchased.txt');\\n            const dictAugRepReqs = await getDict(ns, augmentationNames, 'getAugmentationRepReq', '/Temp/aug-repreqs.txt');\\n            // Due to a bug, gangs appear to provide \\\"The Red Pill\\\" even when it's unavailable (outside of BN2), so ignore this one.\\n            requiredRep = augmentationNames.filter(aug => !ownedAugmentations.includes(aug) && aug != \\\"The Red Pill\\\").reduce((max, aug) => Math.max(max, dictAugRepReqs[aug]), -1);\\n            log(ns, `Highest augmentation reputation cost is ${formatNumberShort(requiredRep)}`);\\n        } catch {\\n            log(ns, `WARNING: Failed to get augmentation info despite having SF4.${sf4Level}. This may be due to you having insufficient RAM to launch the temporary scripts. ` +\\n                `Proceeding with the default assumption that ~2.5 million rep is desired.`);\\n        }\\n    }\\n    if (requiredRep == -1)\\n        requiredRep = 2.5e6\\n\\n    // Initialize equipment information\\n    const equipmentNames = await getNsDataThroughFile(ns, 'ns.gang.getEquipmentNames()', '/Temp/gang-equipment-names.txt');\\n    const dictEquipmentTypes = await getGangInfoDict(ns, equipmentNames, 'getEquipmentType');\\n    const dictEquipmentCosts = await getGangInfoDict(ns, equipmentNames, 'getEquipmentCost');\\n    const dictEquipmentStats = await getGangInfoDict(ns, equipmentNames, 'getEquipmentStats');\\n    equipments = equipmentNames.map((equipmentName) => ({\\n        name: equipmentName,\\n        type: dictEquipmentTypes[equipmentName],\\n        cost: dictEquipmentCosts[equipmentName],\\n        stats: dictEquipmentStats[equipmentName],\\n    })).sort((a, b) => a.cost - b.cost);\\n    //log(ns, JSON.stringify(equipments));\\n    // Initialize information about gang members and crimes\\n    allTaskNames = await getNsDataThroughFile(ns, 'ns.gang.getTaskNames()', '/Temp/gang-task-names.txt')\\n    allTaskStats = await getGangInfoDict(ns, allTaskNames, 'getTaskStats');\\n    multGangSoftcap = (await tryGetBitNodeMultipliers(ns))?.GangSoftcap || 1;\\n    myGangMembers = await getNsDataThroughFile(ns, 'ns.gang.getMemberNames()', '/Temp/gang-member-names.txt');\\n    const dictMembers = await getGangInfoDict(ns, myGangMembers, 'getMemberInformation');\\n    for (const member of Object.values(dictMembers)) // Initialize the current activity of each member\\n        assignedTasks[member.name] = (member.task && member.task !== \\\"Unassigned\\\") ? member.task : (\\\"Train \\\" + (isHackGang ? \\\"Hacking\\\" : \\\"Combat\\\"));\\n    while (myGangMembers.length < 3) await doRecruitMember(ns); // We should be able to recruit our first three members immediately (for free)\\n    await optimizeGangCrime(ns, myGangInfo);\\n}\\n\\n/** @param {NS} ns \\n * Executed every `interval` **/\\nasync function mainLoop(ns) {\\n    // Update gang information (specifically monitoring gang power to see when territory ticks)\\n    const myGangInfo = ns.gang.getGangInformation(); //await getNsDataThroughFile(ns, 'ns.gang.getGangInformation()', '/Temp/gang-info.txt');\\n    // If territory is about to tick, quick - set everyone to do \\\"territory warfare\\\"!\\n    if (!isReadyForNextTerritoryTick && territoryTickDetected && (Date.now() + updateInterval >= territoryNextTick)) {\\n        isReadyForNextTerritoryTick = true;\\n        await updateMemberActivities(ns, null, \\\"Territory Warfare\\\");\\n    } else if (!territoryTickDetected) { // Detect the first territory tick by watching for other gang's territory power to update.\\n        const otherGangInfo = await getNsDataThroughFile(ns, 'ns.gang.getOtherGangInformation()', '/Temp/gang-other-gang-info.txt'); // Returns dict of { [gangName]: { \\\"power\\\": Number, \\\"territory\\\": Number } }\\n        if (lastOtherGangInfo != null && Object.keys(otherGangInfo).some(g => otherGangInfo[g].power != lastOtherGangInfo[g].power)) {\\n            territoryNextTick = Date.now() - updateInterval;\\n            territoryTickDetected = true;\\n        }\\n        lastOtherGangInfo = otherGangInfo;\\n    }\\n    // Detect if territory power has been updated in the last tick (or if we have no power, assume it has ticked and we just haven't generated power yet)\\n    if ((isReadyForNextTerritoryTick && myGangInfo.power != lastTerritoryPower) || (Date.now() > territoryNextTick + 5 * updateInterval)) {\\n        await onTerritoryTick(ns, myGangInfo); //Do most things only once per territory tick\\n        lastTerritoryPower = myGangInfo.power;\\n    }\\n}\\n\\n/** @param {NS} ns \\n * Do some things only once per territory tick **/\\nasync function onTerritoryTick(ns, myGangInfo) {\\n    territoryNextTick = Date.now() - updateInterval + territoryTickTime; // Reset the time the next tick will occur\\n    if (lastTerritoryPower != myGangInfo.power)\\n        log(ns, `Territory power updated from ${formatNumberShort(lastTerritoryPower)} to ${formatNumberShort(myGangInfo.power)}.`)\\n    if (!isReadyForNextTerritoryTick) log(ns, `WARNING: Territory tick happend before we were ready!`, 'warning');\\n    if (!warfareFinished) // Once we hit 100% territory, there's no need to keep swapping members to warfare\\n        isReadyForNextTerritoryTick = false;\\n\\n    // Update gang members in case someone died in a clash\\n    myGangMembers = await getNsDataThroughFile(ns, 'ns.gang.getMemberNames()', '/Temp/gang-member-names.txt');\\n    const nextMemberCost = Math.pow(5, myGangMembers.length - (3 /*numFreeMembers*/ - 1));\\n    if (myGangMembers.length < 12 /* Game Max */ && myGangInfo.respect * 0.75 > nextMemberCost) // Don't spend more than 75% of our respect on new members.\\n        await doRecruitMember(ns) // Recruit new members if available\\n    const dictMembers = await getGangInfoDict(ns, myGangMembers, 'getMemberInformation');\\n    if (!options['no-auto-ascending']) await tryAscendMembers(ns); // Ascend members if we deem it a good time\\n    await tryUpgradeMembers(ns, dictMembers); // Upgrade members if possible\\n    await enableOrDisableWarfare(ns, myGangInfo); // Update whether we should be participating in gang warfare\\n    // There's a chance we do training instead of work for this next tick. If training, we primarily train our main stat, with a small chance to train less-important stats\\n    const task = Math.random() >= pctTraining ? null : \\\"Train \\\" + (Math.random() < 0.1 ? \\\"Charisma\\\" : Math.random() < (isHackGang ? 0.1 : 0.9) ? \\\"Combat\\\" : \\\"Hacking\\\")\\n    await updateMemberActivities(ns, dictMembers, task); // Set everyone working on the next activity\\n    if (!task) await optimizeGangCrime(ns, await waitForGameUpdate(ns, myGangInfo));  // Finally, see if we can improve rep gain rates by micro-optimizing individual member crimes\\n}\\n\\n/** @param {NS} ns \\n * Consolidated logic for telling members what to do **/\\nasync function updateMemberActivities(ns, dictMemberInfo = null, forceTask = null) {\\n    const dictMembers = dictMemberInfo || (await getGangInfoDict(ns, myGangMembers, 'getMemberInformation'));\\n    const workOrders = [];\\n    for (const member of Object.values(dictMembers)) { // Set the desired activity of each member\\n        let task = forceTask ? forceTask : assignedTasks[member.name];\\n        if (member.task != task) workOrders.push({ name: member.name, task }); // Only bother with the API call if this isn't their current task\\n    }\\n    if (workOrders.length == 0) return;\\n    // Set the activities in bulk using a ram-dodging script\\n    if (await getNsDataThroughFile(ns, `${JSON.stringify(workOrders)}.reduce((success, m) => success && ns.gang.setMemberTask(m.name, m.task), true)`, '/Temp/gang-set-member-tasks.txt'))\\n        log(ns, `INFO: Assigned ${workOrders.length} gang member tasks! (${workOrders.map(o => o.task).filter((v, i, self) => self.indexOf(v) === i).join(\\\", \\\")})`)\\n    else\\n        log(ns, `ERROR: Failed to set member task of one or more members: ` + JSON.stringify(workOrders), 'error');\\n}\\n\\n/** @param {NS} ns \\n * Logic to assign tasks that maximize rep gain rate without wanted gain getting out of control **/\\nasync function optimizeGangCrime(ns, myGangInfo) {\\n    const dictMembers = await getGangInfoDict(ns, myGangMembers, 'getMemberInformation');\\n    // Tolerate our wanted level increasing, as long as reputation increases several orders of magnitude faster and we do not currently have a penalty more than -0.01%\\n    let currentWantedPenalty = getWantedPenalty(myGangInfo) - 1;\\n    // Note, until we have ~200 respect, the best way to recover from wanted penalty is to focus on gaining respect, rather than doing vigilante work.\\n    let wantedGainTolerance = currentWantedPenalty < -1.1 * wantedPenaltyThreshold && myGangInfo.wantedLevel >= (1.1 + myGangInfo.respect / 1000) &&\\n        myGangInfo.respect > 200 ? -0.01 * myGangInfo.wantedLevel /* Recover from wanted penalty */ :\\n        currentWantedPenalty < -0.9 * wantedPenaltyThreshold && myGangInfo.wantedLevel >= (1.1 + myGangInfo.respect / 10000) ? 0 /* Sustain */ :\\n            Math.max(myGangInfo.respectGainRate / 1000, myGangInfo.wantedLevel / 10) /* Allow wanted to increase at a manageable rate */;\\n    const playerData = await getNsDataThroughFile(ns, 'ns.getPlayer()', '/Temp/player-info.txt');\\n    // Find out how much reputation we need, without SF4, we estimate gang faction rep based on current gang rep\\n    let factionRep = -1;\\n    if (ownedSourceFiles[4] > 0) {\\n        try { factionRep = await getNsDataThroughFile(ns, `ns.getFactionRep('${myGangFaction}')`, `/Temp/gang-faction-rep.txt`); }\\n        catch { log(ns, 'INFO: Error suppressed. Falling back to estimating current gang faction rep.'); }\\n    }\\n    if (factionRep == -1) // Estimate current gang rep based on respect. Game gives 1/75 rep / respect. This is an underestimate, because it doesn't take into account spent/lost respect on ascend/recruit/death. \\n        factionRep = myGangInfo.respect / 75;\\n    const optStat = factionRep > requiredRep ? \\\"money\\\" : (playerData.money > 1E11 || myGangInfo.respect) < 9000 ? \\\"respect\\\" : \\\"both money and respect\\\"; // Change priority based on achieved rep/money\\n    // Pre-compute how every gang member will perform at every task\\n    const memberTaskRates = Object.fromEntries(Object.values(dictMembers).map(m => [m.name, allTaskNames.map(taskName => ({\\n        name: taskName,\\n        respect: computeRepGains(myGangInfo, taskName, m),\\n        money: calculateMoneyGains(myGangInfo, taskName, m),\\n        wanted: computeWantedGains(myGangInfo, taskName, m),\\n    })).filter(task => task.wanted <= 0 || task.money > 0 || task.respect > 0)])); // Completely remove tasks that offer no gains, but would generate wanted levels\\n    // Sort tasks by best gain rate\\n    if (optStat == \\\"both money and respect\\\") {\\n        Object.values(memberTaskRates).flat().forEach(v => v[optStat] = v.money / 1000 + v.respect); // Hack to support a \\\"optimized total\\\" stat when trying to balance both money and wanted\\n        Object.values(memberTaskRates).forEach((tasks, idx) => tasks.sort((a, b) => idx % 2 == 0 ? b.respect - a.respect : b.money - a.money)); // Hack: Even members prioritize respect, odd money\\n    } else {\\n        Object.values(memberTaskRates).forEach(tasks => tasks.sort((a, b) => b[optStat] - a[optStat]));\\n    }\\n    //ns.print(memberTaskRates);\\n\\n    // Run \\\"the algorithm\\\"\\n    const start = Date.now(); // Time the algorithms\\n    let bestTaskAssignments = null, bestWanted = 0;\\n    let bestTotalGain = myGangInfo.wantedLevelGainRate > wantedGainTolerance ? 0 : // Forget our past achievements, we're gaining wanted levels too fast right now\\n        optStat == \\\"respect\\\" ? myGangInfo.respectGainRate : myGangInfo.moneyGainRate; // Must do better than the current gain rate if it's within our wanted threshold\\n    for (let shuffle = 0; shuffle < 1000; shuffle++) { // We can discover more optimal results by greedy-optimizing gang members in a different order. Try a few.\\n        let proposedTasks = {}, totalWanted = 0, totalGain = 0;\\n        shuffleArray(myGangMembers.slice()).forEach((member, index) => {\\n            const taskRates = memberTaskRates[member];\\n            // \\\"Greedy\\\" optimize one member at a time, but as we near the end of the list, we can no longer expect future members to make for wanted increases\\n            const sustainableTasks = (index < myGangMembers.length - 2) ? taskRates : taskRates.filter(c => (totalWanted + c.wanted) <= wantedGainTolerance);\\n            // Find the crime with the best gain (If we can't generate value for any tasks, then we should only be training)\\n            const bestTask = taskRates[0][optStat] == 0 || (Date.now() - (lastMemberReset[member] || 0) < options['min-training-ticks'] * territoryTickTime) ?\\n                taskRates.find(t => t.name === (\\\"Train \\\" + (isHackGang ? \\\"Hacking\\\" : \\\"Combat\\\"))) :\\n                (totalWanted > wantedGainTolerance || sustainableTasks.length == 0) ? taskRates.find(t => t.name === \\\"Vigilante Justice\\\") : sustainableTasks[0];\\n            [proposedTasks[member], totalWanted, totalGain] = [bestTask, totalWanted + bestTask.wanted, totalGain + bestTask[optStat]];\\n        });\\n        // Following the above attempted optimization, if we're above our wanted gain threshold, downgrade the task of the greatest generators of wanted until within our limit\\n        let infiniteLoop = 9999;\\n        while (totalWanted > wantedGainTolerance && Object.values(proposedTasks).some(t => t.name !== \\\"Vigilante Justice\\\")) {\\n            const mostWanted = Object.keys(proposedTasks).reduce((t, c) => proposedTasks[c].name !== \\\"Vigilante Justice\\\" && (t == null || proposedTasks[t].wanted < proposedTasks[c].wanted) ? c : t, null);\\n            const nextBestTask = memberTaskRates[mostWanted].filter(c => c.wanted < proposedTasks[mostWanted].wanted)[0] ?? memberTaskRates[mostWanted].find(t => t.name === \\\"Vigilante Justice\\\");\\n            [proposedTasks[mostWanted], totalWanted, totalGain] = [nextBestTask, totalWanted + nextBestTask.wanted - proposedTasks[mostWanted].wanted, totalGain + nextBestTask[optStat] - proposedTasks[mostWanted][optStat]];\\n            if (infiniteLoop-- <= 0) throw \\\"Infinite Loop!\\\";\\n        }\\n        //log(ns, `Optimal task assignments:. Wanted: ${totalWanted.toPrecision(3)}, Gain: ${formatNumberShort(totalGain)}`);\\n        // Save the new new task assignments only if it's the best gain result we've seen for the value we're trying to optimize, or the closest we've come to meeting our wanted tolerance\\n        if (totalWanted <= wantedGainTolerance && totalGain > bestTotalGain || totalWanted > wantedGainTolerance && totalWanted < bestWanted)\\n            [bestTaskAssignments, bestTotalGain, bestWanted] = [proposedTasks, totalGain, totalWanted];\\n    }\\n    const elapsed = Date.now() - start;\\n    // Determine whether any changes need to be made\\n    if (bestTaskAssignments != null && myGangMembers.some(m => assignedTasks[m] !== bestTaskAssignments[m].name)) {\\n        myGangMembers.forEach(m => assignedTasks[m] = bestTaskAssignments[m].name); // Update work orders for all members\\n        const oldGangInfo = myGangInfo;\\n        await updateMemberActivities(ns, dictMembers);\\n        const [optWanted, optRespect, optMoney] = myGangMembers.map(m => assignedTasks[m]).reduce(([w, r, m], t) => [w + t.wanted, r + t.respect, m + t.money], [0, 0, 0]);\\n        if (optWanted != oldGangInfo.wantedLevelGainRate || optRespect != oldGangInfo.respectGainRate || optMoney != oldGangInfo.moneyGainRate)\\n            myGangInfo = await waitForGameUpdate(ns, oldGangInfo);\\n        log(ns, `SUCCESS: Optimized gang member crimes for ${optStat} with wanted gain tolerance ${wantedGainTolerance.toPrecision(2)} (${elapsed} ms). ` +\\n            `Wanted: ${oldGangInfo.wantedLevelGainRate.toPrecision(3)} -> ${myGangInfo.wantedLevelGainRate.toPrecision(3)}, ` +\\n            `Rep: ${formatNumberShort(oldGangInfo.respectGainRate)} -> ${formatNumberShort(myGangInfo.respectGainRate)}, Money: ${formatMoney(oldGangInfo.moneyGainRate)} -> ${formatMoney(myGangInfo.moneyGainRate)}`);\\n        // Sanity check that our calculations (which we stole from game source code) are about right\\n        if ((Math.abs(myGangInfo.wantedLevelGainRate - optWanted) / optWanted > 0.01) || (Math.abs(myGangInfo.respectGainRate - optRespect) / optRespect > 0.01) || (Math.abs(myGangInfo.moneyGainRate - optMoney) / optMoney > 0.01))\\n            log(ns, `WARNING: Calculated new rates would be Rep:${formatNumberShort(optRespect)} Wanted: ${optWanted.toPrecision(3)} Money: ${formatMoney(optMoney)}` +\\n                `but they are Rep:${formatNumberShort(myGangInfo.respectGainRate)} Wanted: ${myGangInfo.wantedLevelGainRate.toPrecision(3)} Money: ${formatMoney(myGangInfo.moneyGainRate)}`, 'warning');\\n    } else\\n        log(ns, `INFO: Determined all gang member assignments are already optimal for ${optStat} with wanted gain tolerance ${wantedGainTolerance.toPrecision(2)} (${elapsed} ms).`);\\n    // Fail-safe: If we somehow over-shot and are generating wanted levels, start randomly assigning members to vigilante to fix it\\n    if (myGangInfo.wantedLevelGainRate > wantedGainTolerance) await fixWantedGainRate(ns, myGangInfo, wantedGainTolerance);\\n}\\n\\n/** @param {NS} ns \\n * Logic to reduce crime tiers when we're generating a wanted level **/\\nasync function fixWantedGainRate(ns, myGangInfo, wantedGainTolerance = 0) {\\n    // TODO: steal actual wanted level calcs and strategically pick the member(s) who can bridge the gap while losing the least rep/sec\\n    let lastWantedLevelGainRate = myGangInfo.wantedLevelGainRate;\\n    log(ns, `WARNING: Generating wanted levels (${lastWantedLevelGainRate.toPrecision(3)}/sec > ${wantedGainTolerance.toPrecision(3)}/sec), temporarily assigning random members to Vigilante Justice...`, 'warning');\\n    for (const member of shuffleArray(myGangMembers.slice())) {\\n        if (!crimes.includes(assignedTasks[member])) continue; // This member isn't doing crime, so they aren't contributing to wanted\\n        assignedTasks[member] = \\\"Vigilante Justice\\\";\\n        await updateMemberActivities(ns);\\n        const wantedLevelGainRate = (myGangInfo = await waitForGameUpdate(ns, myGangInfo)).wantedLevelGainRate;\\n        if (wantedLevelGainRate < wantedGainTolerance) return;\\n        if (lastWantedLevelGainRate == wantedLevelGainRate)\\n            log(ns, `Warning: Attempt to rollback crime of ${member} to ${assignedTasks[member]} resulted in no change in wanted level gain rate ` +\\n                `(${lastWantedLevelGainRate.toPrecision(3)})`, 'warning');\\n    }\\n}\\n\\n/** @param {NS} ns \\n * Recruit new members if available **/\\nasync function doRecruitMember(ns) {\\n    let i = 0, newMemberName;\\n    do { newMemberName = `Thug ${++i}`; } while (myGangMembers.includes(newMemberName) || myGangMembers.includes(newMemberName + \\\" Understudy\\\"));\\n    if (i < myGangMembers.length) newMemberName += \\\" Understudy\\\"; // Pay our respects to the deceased\\n    if (await getNsDataThroughFile(ns, `ns.gang.canRecruitMember() && ns.gang.recruitMember('${newMemberName}')`, '/Temp/gang-recruit-member.txt')) {\\n        myGangMembers.push(newMemberName);\\n        assignedTasks[newMemberName] = \\\"Train \\\" + (isHackGang ? \\\"Hacking\\\" : \\\"Combat\\\");\\n        lastMemberReset[newMemberName] = Date.now();\\n        log(ns, `SUCCESS: Recruited a new gang member \\\"${newMemberName}\\\"!`, 'success');\\n    } else {\\n        log(ns, `ERROR: Failed to recruit a new gang member \\\"${newMemberName}\\\"!`, 'error');\\n    }\\n}\\n\\n/** @param {NS} ns \\n * Check if any members are deemed worth ascending to increase a stat multiplier **/\\nasync function tryAscendMembers(ns) {\\n    const dictAscensionResults = await getGangInfoDict(ns, myGangMembers, 'getAscensionResult');\\n    for (let i = 0; i < myGangMembers.length; i++) {\\n        const member = myGangMembers[i];\\n        // First members are given the largest threshold, so that early on when they are our only members, they are more stable\\n        const ascMultiThreshold = options['ascend-multi-threshold'] + (11 - i) * options['ascend-multi-threshold-spacing'];\\n        const ascResult = dictAscensionResults[member];\\n        if (!ascResult || !importantStats.some(stat => ascResult[stat] >= ascMultiThreshold))\\n            continue;\\n        if (undefined !== (await getNsDataThroughFile(ns, `ns.gang.ascendMember('${member}')`, '/Temp/gang-ascend-member.txt'))) {\\n            log(ns, `SUCCESS: Ascended member ${member} to increase multis by ${importantStats.map(s => `${s} -> ${ascResult[s].toFixed(2)}x`).join(\\\", \\\")}`, 'success');\\n            lastMemberReset[member] = Date.now();\\n        }\\n        else\\n            log(ns, `ERROR: Attempt to ascended member ${member} failed. Go investigate!`, 'error');\\n    }\\n}\\n\\n/** @param {NS} ns \\n * Upgrade any missing equipment / augmentations of members if we have the budget for it **/\\nasync function tryUpgradeMembers(ns, dictMembers) {\\n    // Update equipment costs to take into account discounts\\n    const dictEquipmentCosts = await getGangInfoDict(ns, equipments.map(e => e.name), 'getEquipmentCost');\\n    equipments.forEach(e => e.cost = dictEquipmentCosts[e.name])\\n    // Upgrade members, spending no more than x% of our money per tick (and respecting the global reseve)\\n    const purchaseOrder = [];\\n    const playerData = await getNsDataThroughFile(ns, 'ns.getPlayer()', '/Temp/player-info.txt');\\n    const homeMoney = playerData.money - (Number.parseFloat(ns.read(\\\"reserve.txt\\\")) || 0);\\n    let budget = maxSpendPerTickTransientEquipment * homeMoney;\\n    let augBudget = maxSpendPerTickPermanentEquipment * homeMoney;\\n    // Hack: Budget is cut by 1/100 if we don't yet own the Stockmarket 4S API (main source of income early BN)\\n    if (!playerData.has4SDataTixApi) budget /= 100, augBudget /= 100;\\n    if (budget <= 0) return;\\n    // Find out what outstanding equipment can be bought within our budget\\n    for (const equip of equipments) {\\n        for (const member of Object.values(dictMembers)) { // Get this equip for each member before considering the next most expensive equip\\n            // Bit of a hack: Inflate the \\\"cost\\\" of equipment that doesn't contribute to our main stats so that we don't purchase them unless we have ample cash\\n            let percievedCost = equip.cost * (Object.keys(equip.stats).some(stat => importantStats.some(i => stat.includes(i))) ? 1 : 50);\\n            if (percievedCost > augBudget) continue;\\n            if (equip.type != \\\"Augmentation\\\" && percievedCost > budget) continue;\\n            if (!member.upgrades.includes(equip.name) && !member.augmentations.includes(equip.name)) {\\n                purchaseOrder.push({ member: member.name, type: equip.type, equipmentName: equip.name, cost: equip.cost });\\n                budget -= equip.cost;\\n                augBudget -= equip.cost;\\n            }\\n        }\\n    }\\n    await doUpgradePurchases(ns, purchaseOrder);\\n}\\n\\n/** @param {NS} ns \\n * Spawn a temporary taask to upgrade members. **/\\nasync function doUpgradePurchases(ns, purchaseOrder) {\\n    if (purchaseOrder.length == 0) return;\\n    const orderSummary = purchaseOrder.map(o => `${o.member} ${o.type}: \\\"${o.equipmentName}\\\"`).join(\\\", \\\");\\n    if (await getNsDataThroughFile(ns, `${JSON.stringify(purchaseOrder)}.reduce((success, o) => success && ns.gang.purchaseEquipment(o.member, o.equipmentName), true)`, '/Temp/gang-upgrade-members.txt'))\\n        log(ns, `SUCCESS: Purchased ${purchaseOrder.length} gang member upgrades for ${formatMoney(purchaseOrder.reduce((t, e) => t + e.cost, 0))}. (${orderSummary})`, 'success')\\n    else\\n        log(ns, `ERROR: Failed to purchase one or more gang member upgrades. (${orderSummary})`, 'error');\\n}\\n\\n/** @param {NS} ns \\n * Helper to wait for the game to update stats (typically 2 seconds per cycle) **/\\nasync function waitForGameUpdate(ns, oldGangInfo) {\\n    if (!myGangMembers.some(member => !assignedTasks[member].includes(\\\"Train\\\")))\\n        return oldGangInfo; // Ganginfo will never change if all members are training, so don't wait for an update\\n    const maxWaitTime = 2500;\\n    const waitInterval = 100;\\n    const start = Date.now()\\n    while (Date.now() < start + maxWaitTime) {\\n        var latestGangInfo = ns.gang.getGangInformation();\\n        if (JSON.stringify(latestGangInfo) != JSON.stringify(oldGangInfo))\\n            return latestGangInfo;\\n        await ns.sleep(Math.min(waitInterval, start + maxWaitTime - Date.now()));\\n    }\\n    log(ns, `WARNING: Max wait time ${maxWaitTime} exceeded while waiting for old gang info to update.\\\\n${JSON.stringify(oldGangInfo)}\\\\n===\\\\n${JSON.stringify(latestGangInfo)}`, 'warning');\\n    territoryTickDetected = false;\\n    return latestGangInfo;\\n}\\n\\n/** @param {NS} ns \\n * Checks whether we should be engaging in warfare based on our gang power and that of other gangs. **/\\nasync function enableOrDisableWarfare(ns, myGangInfo) {\\n    warfareFinished = Math.round(myGangInfo.territory * 2 ** 20) / 2 ** 20 /* Handle API imprecision */ >= 1;\\n    if (warfareFinished && !myGangInfo.territoryWarfareEngaged) return; // No need to engage once we hit 100%\\n    const otherGangs = await getNsDataThroughFile(ns, 'ns.gang.getOtherGangInformation()', '/Temp/gang-other-gang-info.txt'); // Returns dict of { [gangName]: { \\\"power\\\": Number, \\\"territory\\\": Number } }\\n    let lowestWinChance = 1, totalWinChance = 0, totalActiveGangs = 0;\\n    let lowestWinChanceGang = \\\"\\\";\\n    for (const otherGang in otherGangs) {\\n        if (otherGangs[otherGang].territory == 0 || otherGang == myGangFaction) continue; // *New* Don't have to worry about battling a gang if it has 0 territory\\n        const winChance = myGangInfo.power / (myGangInfo.power + otherGangs[otherGang].power)\\n        if (winChance <= lowestWinChance) lowestWinChanceGang = otherGang;\\n        totalActiveGangs++, totalWinChance += winChance, lowestWinChance = Math.min(lowestWinChance, winChance);\\n    }\\n    // Turn on territory warfare only if we have a better than <territoryEngageThreshold>% chance of beating our random opponent\\n    const averageWinChance = totalWinChance / totalActiveGangs;\\n    const shouldEngage = !warfareFinished && territoryEngageThreshold <= averageWinChance;\\n    if (shouldEngage != myGangInfo.territoryWarfareEngaged) {\\n        log(ns, (warfareFinished ? 'SUCCESS' : 'INFO') + `: Toggling participation in territory warfare to ${shouldEngage}. Our power: ${formatNumberShort(myGangInfo.power)}. ` +\\n            (!warfareFinished ? `Lowest win chance is ${(100 * lowestWinChance).toFixed(2)}% with ${lowestWinChanceGang} (power ${formatNumberShort(otherGangs[lowestWinChanceGang]?.power)}). ` +\\n                `Average win chance ${(100 * averageWinChance).toFixed(2)}% across ${totalActiveGangs} active gangs.` :\\n                'We have destroyed all other gangs and earned 100% territory'), warfareFinished ? 'info' : 'success');\\n        await runCommand(ns, `ns.gang.setTerritoryWarfare(${shouldEngage})`, '/Temp/gang-set-warfare.js');\\n    }\\n}\\n\\n// Ram-dodging helper to get gang information for each item in a list\\nconst getGangInfoDict = async (ns, elements, gangFunction) => await getDict(ns, elements, `gang.${gangFunction}`, `/Temp/gang-${gangFunction}.txt`);\\nconst getDict = async (ns, elements, nsFunction, fileName) => await getNsDataThroughFile(ns, `Object.fromEntries(${JSON.stringify(elements)}.map(e => [e, ns.${nsFunction}(e)]))`, fileName);\\n\\n/** Gang calcs shamefully stolen from https://github.com/danielyxie/bitburner/blob/dev/src/Gang/GangMember.ts **/\\nlet getStatWeight = (task, memberInfo) =>\\n    (task.hackWeight / 100) * memberInfo[\\\"hack\\\"] + // Need to quote to avoid paying RAM for ns.hack -_-\\n    (task.strWeight / 100) * memberInfo.str +\\n    (task.defWeight / 100) * memberInfo.def +\\n    (task.dexWeight / 100) * memberInfo.dex +\\n    (task.agiWeight / 100) * memberInfo.agi +\\n    (task.chaWeight / 100) * memberInfo.cha;\\n\\nlet getWantedPenalty = myGangInfo => myGangInfo.respect / (myGangInfo.respect + myGangInfo.wantedLevel);\\nlet getTerritoryPenalty = myGangInfo => (0.2 * myGangInfo.territory + 0.8) * multGangSoftcap;\\n\\nfunction computeRepGains(myGangInfo, currentTask, memberInfo) {\\n    const task = allTaskStats[currentTask];\\n    const statWeight = getStatWeight(task, memberInfo) - 4 * task.difficulty;\\n    if (task.baseRespect === 0 || statWeight <= 0) return 0;\\n    const territoryMult = Math.max(0.005, Math.pow(myGangInfo.territory * 100, task.territory.respect) / 100);\\n    if (isNaN(territoryMult) || territoryMult <= 0) return 0;\\n    const respectMult = getWantedPenalty(myGangInfo);\\n    const territoryPenalty = getTerritoryPenalty(myGangInfo);\\n    //console.log(`statWeight: ${statWeight} task.difficulty: ${task.difficulty} territoryMult: ${territoryMult} territoryPenalty: ${territoryPenalty} myGangInfo.respect ${myGangInfo.respect} myGangInfo.wanted ${myGangInfo.wanted} respectMult: ${respectMult}`);\\n    return Math.pow(11 * task.baseRespect * statWeight * territoryMult * respectMult, territoryPenalty);\\n}\\n\\nfunction computeWantedGains(myGangInfo, currentTask, memberInfo) {\\n    const task = allTaskStats[currentTask];\\n    const statWeight = getStatWeight(task, memberInfo) - 3.5 * task.difficulty;\\n    if (task.baseWanted === 0 || statWeight <= 0) return 0;\\n    const territoryMult = Math.max(0.005, Math.pow(myGangInfo.territory * 100, task.territory.wanted) / 100);\\n    if (isNaN(territoryMult) || territoryMult <= 0) return 0;\\n    return (task.baseWanted < 0) ? 0.4 * task.baseWanted * statWeight * territoryMult :\\n        Math.min(100, (7 * task.baseWanted) / Math.pow(3 * statWeight * territoryMult, 0.8));\\n}\\n\\nfunction calculateMoneyGains(myGangInfo, currentTask, memberInfo) {\\n    const task = allTaskStats[currentTask];\\n    const statWeight = getStatWeight(task, memberInfo) - 3.2 * task.difficulty;\\n    if (task.baseMoney === 0 || statWeight <= 0) return 0;\\n    const territoryMult = Math.max(0.005, Math.pow(myGangInfo.territory * 100, task.territory.money) / 100);\\n    if (isNaN(territoryMult) || territoryMult <= 0) return 0;\\n    const respectMult = getWantedPenalty(myGangInfo);\\n    const territoryPenalty = getTerritoryPenalty(myGangInfo);\\n    return Math.pow(5 * task.baseMoney * statWeight * territoryMult * respectMult, territoryPenalty);\\n}\\n\\n/** @param {NS} ns **/\\nfunction log(ns, message, toastStyle, terminal = undefined) {\\n    ns.print(message);\\n    if (terminal === true || (terminal === undefined && toastStyle === 'error')) ns.tprint(message);\\n    if (toastStyle) ns.toast(message, toastStyle);\\n}\\n\\n/** Helps us not get caught in cycles by reducing gang member crime tiers in a random order */\\nfunction shuffleArray(array) {\\n    for (let i = array.length - 1; i > 0; i--) {\\n        const j = Math.floor(Math.random() * (i + 1));\\n        [array[i], array[j]] = [array[j], array[i]];\\n    }\\n    return array;\\n}\",\"filename\":\"gangs.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"helpers.js\",\"url\":\"blob:https://danielyxie.github.io/d15b095d-291f-4094-b718-0871170b7d01\",\"moduleSequenceNumber\":142},{\"filename\":\"gangs.js\",\"url\":\"blob:https://danielyxie.github.io/7098f413-4bbe-43d0-bba4-60f69303b982\",\"moduleSequenceNumber\":262}],\"dependents\":[],\"ramUsage\":4.7,\"server\":\"home\",\"moduleSequenceNumber\":262,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"gang.getGangInformation\",\"cost\":2},{\"type\":\"fn\",\"name\":\"run\",\"cost\":1},{\"type\":\"fn\",\"name\":\"isRunning\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"const lists = ['FactionName', 'StockSymbol', 'GangName', 'Crime', 'AugmentName', 'BladeburnerOperations', 'BladeburnerBlackOps', 'CodingContractTypes', 'GangEquipment'].sort();\\nexport function autocomplete() { return lists; }\\n/** @param {NS} ns **/\\nexport async function main(ns) { ns.tprint(await getList(ns.args[0])); }\\nexport async function getList(listName) {\\n    let definitions = await (await fetch('https://raw.githubusercontent.com/danielyxie/bitburner/dev/src/ScriptEditor/NetscriptDefinitions.d.ts')).text();\\n    let listStart = `type ${listName} =\\\\n  | \\\"`;\\n    let listIndex = definitions.indexOf(listStart) + listStart.length;\\n    let list = definitions.slice(listIndex, definitions.indexOf('\\\";', listIndex)).split('\\\"\\\\n  | \\\"');\\n    return list;\\n}\",\"filename\":\"get-list.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"server\":\"home\",\"moduleSequenceNumber\":140,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { disableLogs, formatDuration, formatMoney } from './helpers.js'\\n\\nlet haveHacknetServers = true;\\nlet formulas = true;\\nlet options;\\nconst argsSchema = [\\n    ['max-payoff-time', '1h'], // Controls how far to upgrade hacknets. Can be a number of seconds, or an expression of minutes/hours (e.g. '123m', '4h')\\n    ['time', null], // alias for max-payoff-time\\n    ['c', false], // Set to true to run continuously, otherwise, it runs once\\n    ['continuous', false],\\n    ['interval', 1000], // Rate at which the program purchases upgrades when running continuously\\n    ['max-spend', Number.MAX_VALUE], // The maximum amount of money to spend on upgrades\\n    ['toast', false] // Set to true to toast purchases\\n];\\n\\nexport function autocomplete(data, _) {\\n    data.flags(argsSchema);\\n    return [];\\n}\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    options = ns.flags(argsSchema);\\n    const continuous = options.c || options.continuous;\\n    const interval = options.interval;\\n    let maxSpend = options[\\\"max-spend\\\"];\\n    let maxPayoffTime = options['time'] || options['max-payoff-time'];\\n    // A little string parsing to be more user friendly\\n    if (maxPayoffTime && String(maxPayoffTime).endsWith(\\\"m\\\"))\\n        maxPayoffTime = Number.parseFloat(maxPayoffTime.replace(\\\"m\\\", \\\"\\\")) * 60\\n    else if (maxPayoffTime && String(maxPayoffTime).endsWith(\\\"h\\\"))\\n        maxPayoffTime = Number.parseFloat(maxPayoffTime.replace(\\\"h\\\", \\\"\\\")) * 3600\\n    else\\n        maxPayoffTime = Number.parseFloat(maxPayoffTime);\\n    disableLogs(ns, ['sleep', 'getServerUsedRam']);\\n    let formulas = true;\\n    log(ns, `Starting hacknet-upgrade-manager with purchase payoff time limit of ${formatDuration(maxPayoffTime * 1000)} and ` +\\n        (maxSpend == Number.MAX_VALUE ? 'no spending limit' : `a spend limit of ${formatMoney(maxSpend)}`) +\\n        `. Current fleet: ${ns.hacknet.numNodes()} nodes...`);\\n    do {\\n        var spend = upgradeHacknet(ns, maxSpend, maxPayoffTime);\\n        // Using this method, we cannot know for sure that we don't have hacknet servers until we have purchased one\\n        if (haveHacknetServers && ns.hacknet.numNodes() > 0 && ns.hacknet.hashCapacity() == 0)\\n            haveHacknetServers = false;\\n        if (maxSpend && spend === false) {\\n            log(ns, `Spending limit reached. Breaking...`);\\n            break; // Hack, but we return a non-number (false) when we've bought all we can for the current config\\n        }\\n        maxSpend -= spend;\\n        if (continuous) await ns.sleep(interval);\\n    } while (continuous);\\n}\\n\\nlet lastUpgradeLog = \\\"\\\";\\nfunction log(ns, logMessage) { if (logMessage != lastUpgradeLog) ns.print(lastUpgradeLog = logMessage); }\\n\\n// Will buy the most effective hacknet upgrade, so long as it will pay for itself in the next {payoffTimeSeconds} seconds.\\n/** @param {NS} ns **/\\nexport function upgradeHacknet(ns, maxSpend, maxPayoffTimeSeconds = 3600 /* 3600 sec == 1 hour */) {\\n    const currentHacknetMult = ns.getPlayer().hacknet_node_money_mult;\\n    // Get the lowest cache level, we do not consider upgrading the cache level of servers above this until all have the same cache level\\n    const minCacheLevel = [...Array(ns.hacknet.numNodes()).keys()].reduce((min, i) => Math.min(min, ns.hacknet.getNodeStats(i).cache), Number.MAX_VALUE);\\n    // TODO: Change this all to use https://bitburner.readthedocs.io/en/latest/netscript/formulasapi/hacknetServers/hashGainRate.html\\n    const upgrades = [{ name: \\\"none\\\", cost: 0 }, {\\n        name: \\\"level\\\", upgrade: ns.hacknet.upgradeLevel, cost: i => ns.hacknet.getLevelUpgradeCost(i, 1), nextValue: nodeStats => nodeStats.level + 1,\\n        addedProduction: nodeStats => nodeStats.production * ((nodeStats.level + 1) / nodeStats.level - 1)\\n    }, {\\n        name: \\\"ram\\\", upgrade: ns.hacknet.upgradeRam, cost: i => ns.hacknet.getRamUpgradeCost(i, 1), nextValue: nodeStats => nodeStats.ram * 2,\\n        addedProduction: nodeStats => nodeStats.production * 0.07\\n    }, {\\n        name: \\\"cores\\\", upgrade: ns.hacknet.upgradeCore, cost: i => ns.hacknet.getCoreUpgradeCost(i, 1), nextValue: nodeStats => nodeStats.cores + 1,\\n        addedProduction: nodeStats => nodeStats.production * ((nodeStats.cores + 5) / (nodeStats.cores + 4) - 1)\\n    }, {\\n        name: \\\"cache\\\", upgrade: ns.hacknet.upgradeCache, cost: i => ns.hacknet.getCacheUpgradeCost(i, 1), nextValue: nodeStats => nodeStats.cache + 1,\\n        addedProduction: nodeStats => nodeStats.cache > minCacheLevel || !haveHacknetServers ? 0 : nodeStats.production * 0.01 / nodeStats.cache // Note: Does not actually give production, but it has \\\"worth\\\" to us so we can buy more things\\n    }];\\n    // Find the best upgrade we can make to an existing node\\n    let nodeToUpgrade = -1;\\n    let bestUpgrade;\\n    let bestUpgradePayoff = 0; // Hashes per second per dollar spent. Bigger is better.\\n    let cost = 0;\\n    let upgradedValue = 0;\\n    let worstNodeProduction = Number.MAX_VALUE; // Used to how productive a newly purchased node might be\\n    for (var i = 0; i < ns.hacknet.numNodes(); i++) {\\n        let nodeStats = ns.hacknet.getNodeStats(i);\\n        if (formulas && haveHacknetServers) { // When a hacknet server runs scripts, nodeStats.production lags behind what it should be for current ram usage. Get the \\\"raw\\\" rate\\n            try { nodeStats.production = ns.formulas.hacknetServers.hashGainRate(nodeStats.level, 0, nodeStats.ram, nodeStats.cores, currentHacknetMult); }\\n            catch { formulas = false; }\\n        }\\n        worstNodeProduction = Math.min(worstNodeProduction, nodeStats.production);\\n        for (let up = 1; up < upgrades.length; up++) {\\n            let currentUpgradeCost = upgrades[up].cost(i);\\n            let payoff = upgrades[up].addedProduction(nodeStats) / currentUpgradeCost; // Production (Hashes per second) per dollar spent\\n            if (payoff > bestUpgradePayoff) {\\n                nodeToUpgrade = i;\\n                bestUpgrade = upgrades[up];\\n                bestUpgradePayoff = payoff;\\n                cost = currentUpgradeCost;\\n                upgradedValue = upgrades[up].nextValue(nodeStats);\\n            }\\n        }\\n    }\\n    // Compare this to the cost of adding a new node. This is an imperfect science. We are paying to unlock the ability to buy all the same upgrades our\\n    // other nodes have - all of which have been deemed worthwhile. Not knowing the sum total that will have to be spent to reach that same production,\\n    // the \\\"most optimistic\\\" case is to treat \\\"price\\\" of all that production to be just the cost of this server, but this is **very** optimistic.\\n    // In practice, the cost of new hacknodes scales steeply enough that this should come close to being true (cost of server >> sum of cost of upgrades)\\n    let newNodeCost = ns.hacknet.getPurchaseNodeCost();\\n    let newNodePayoff = ns.hacknet.numNodes() == ns.hacknet.maxNumNodes() ? 0 : worstNodeProduction / newNodeCost;\\n    let shouldBuyNewNode = newNodePayoff > bestUpgradePayoff;\\n    if (newNodePayoff == 0 && bestUpgradePayoff == 0) {\\n        log(ns, `All upgrades have no value (is hashNet income disabled in this BN?)`);\\n        return false; // As long as maxSpend doesn't change, we will never purchase another upgrade\\n    }\\n    // If specified, only buy upgrades that will pay for themselves in {payoffTimeSeconds}.\\n    const hashDollarValue = haveHacknetServers ? 2.5e5 : 1; // Dollar value of one hash-per-second (0.25m dollars per production).\\n    let payoffTimeSeconds = 1 / (hashDollarValue * (shouldBuyNewNode ? newNodePayoff : bestUpgradePayoff));\\n    if (shouldBuyNewNode) cost = newNodeCost;\\n\\n    // Prepare info about the next uprade. Whether we end up purchasing or not, we will display this info.\\n    let strPurchase = (shouldBuyNewNode ? `a new node \\\"hacknet-node-${ns.hacknet.numNodes()}\\\"` :\\n        `hacknet-node-${nodeToUpgrade} ${bestUpgrade.name} ${upgradedValue}`) + ` for ${formatMoney(cost)}`;\\n    let strPayoff = `production ${((shouldBuyNewNode ? newNodePayoff : bestUpgradePayoff) * cost).toPrecision(3)} payoff time: ${formatDuration(1000 * payoffTimeSeconds)}`\\n    if (cost > maxSpend) {\\n        log(ns, `The next best purchase would be ${strPurchase} but the cost ${formatMoney(cost)} exceeds the limit (${formatMoney(maxSpend)})`);\\n        return false; // As long as maxSpend doesn't change, we will never purchase another upgrade\\n    }\\n    if (payoffTimeSeconds > maxPayoffTimeSeconds) {\\n        log(ns, `The next best purchase would be ${strPurchase} but the ${strPayoff} is worse than the limit (${formatDuration(1000 * maxPayoffTimeSeconds)})`);\\n        return false; // As long as maxPayoffTimeSeconds doesn't change, we will never purchase another upgrade\\n    }\\n    let success = shouldBuyNewNode ? ns.hacknet.purchaseNode() !== -1 : bestUpgrade.upgrade(nodeToUpgrade, 1);\\n    if (success && options.toast) ns.toast(`Purchased ${strPurchase}`, 'success');\\n    log(ns, success ? `Purchased ${strPurchase} with ${strPayoff}` : `Insufficient funds to purchase the next best upgrade: ${strPurchase}`);\\n    return success ? cost : 0;\\n}\",\"filename\":\"hacknet-upgrade-manager.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"helpers.js\",\"url\":\"blob:https://danielyxie.github.io/54b3b257-6eeb-4595-9e47-0d0431a51825\",\"moduleSequenceNumber\":142},{\"filename\":\"hacknet-upgrade-manager.js\",\"url\":\"blob:https://danielyxie.github.io/11626afa-1f46-4cfd-a5f7-c0b63eea3f8b\",\"moduleSequenceNumber\":261}],\"dependents\":[],\"ramUsage\":6.1,\"server\":\"home\",\"moduleSequenceNumber\":261,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"ns\",\"name\":\"hacknet\",\"cost\":4},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Return a formatted representation of the monetary amount using scale sympols (e.g. $6.50M)\\n * @param {number} num - The number to format\\n * @param {number=} maxSignificantFigures - (default: 6) The maximum significant figures you wish to see (e.g. 123, 12.3 and 1.23 all have 3 significant figures)\\n * @param {number=} maxDecimalPlaces - (default: 3) The maximum decimal places you wish to see, regardless of significant figures. (e.g. 12.3, 1.2, 0.1 all have 1 decimal)\\n **/\\nexport function formatMoney(num, maxSignificantFigures = 6, maxDecimalPlaces = 3) {\\n    let numberShort = formatNumberShort(num, maxSignificantFigures, maxDecimalPlaces);\\n    return num >= 0 ? \\\"$\\\" + numberShort : numberShort.replace(\\\"-\\\", \\\"-$\\\");\\n}\\n\\nconst symbols = [\\\"\\\", \\\"k\\\", \\\"m\\\", \\\"b\\\", \\\"t\\\", \\\"q\\\", \\\"Q\\\", \\\"s\\\", \\\"S\\\", \\\"o\\\", \\\"n\\\", \\\"e33\\\", \\\"e36\\\", \\\"e39\\\"];\\n\\n/**\\n * Return a formatted representation of the monetary amount using scale sympols (e.g. 6.50M) \\n * @param {number} num - The number to format\\n * @param {number=} maxSignificantFigures - (default: 6) The maximum significant figures you wish to see (e.g. 123, 12.3 and 1.23 all have 3 significant figures)\\n * @param {number=} maxDecimalPlaces - (default: 3) The maximum decimal places you wish to see, regardless of significant figures. (e.g. 12.3, 1.2, 0.1 all have 1 decimal)\\n **/\\nexport function formatNumberShort(num, maxSignificantFigures = 6, maxDecimalPlaces = 3) {\\n    for (var i = 0, sign = Math.sign(num), num = Math.abs(num); num >= 1000 && i < symbols.length; i++) num /= 1000;\\n    // TODO: A number like 9.999 once rounted to show 3 sig figs, will become 10.00, which is now 4 sig figs.\\n    return ((sign < 0) ? \\\"-\\\" : \\\"\\\") + num.toFixed(Math.max(0, Math.min(maxDecimalPlaces, maxSignificantFigures - Math.floor(1 + Math.log10(num))))) + symbols[i];\\n}\\n\\n/** Convert a shortened number back into a value */\\nexport function parseShortNumber(text = \\\"0\\\") {\\n    let parsed = Number(text);\\n    if (!isNaN(parsed)) return parsed;\\n    for (const sym of symbols.slice(1))\\n        if (text.toLowerCase().endsWith(sym))\\n            return Number.parseFloat(text.slice(0, text.length - sym.length)) * Math.pow(10, 3 * symbols.indexOf(sym));\\n    return Number.NaN;\\n}\\n\\n/**\\n * Return a number formatted with the specified number of significatnt figures or decimal places, whichever is more limiting.\\n * @param {number} num - The number to format\\n * @param {number=} minSignificantFigures - (default: 6) The minimum significant figures you wish to see (e.g. 123, 12.3 and 1.23 all have 3 significant figures)\\n * @param {number=} minDecimalPlaces - (default: 3) The minimum decimal places you wish to see, regardless of significant figures. (e.g. 12.3, 1.2, 0.1 all have 1 decimal)\\n **/\\nexport function formatNumber(num, minSignificantFigures = 3, minDecimalPlaces = 1) {\\n    return num == 0.0 ? num : num.toFixed(Math.max(minDecimalPlaces, Math.max(0, minSignificantFigures - Math.ceil(Math.log10(num)))));\\n}\\n\\n/** Formats some RAM amount as a round number of GB with thousands separators e.g. `1,028 GB` */\\nexport function formatRam(num) { return `${Math.round(num).toLocaleString()} GB`; }\\n\\n/** Return a datatime in ISO format */\\nexport function formatDateTime(datetime) { return datetime.toISOString(); }\\n\\n/** Format a duration (in milliseconds) as e.g. '1h 21m 6s' for big durations or e.g '12.5s' / '23ms' for small durations */\\nexport function formatDuration(duration) {\\n    if (duration < 1000) return `${duration.toFixed(0)}ms`\\n    const portions = [];\\n    const msInHour = 1000 * 60 * 60;\\n    const hours = Math.trunc(duration / msInHour);\\n    if (hours > 0) {\\n        portions.push(hours + 'h');\\n        duration -= (hours * msInHour);\\n    }\\n    const msInMinute = 1000 * 60;\\n    const minutes = Math.trunc(duration / msInMinute);\\n    if (minutes > 0) {\\n        portions.push(minutes + 'm');\\n        duration -= (minutes * msInMinute);\\n    }\\n    let seconds = (duration / 1000.0)\\n    // Include millisecond precision if we're on the order of seconds\\n    seconds = (hours == 0 && minutes == 0) ? seconds.toPrecision(3) : seconds.toFixed(0);\\n    if (seconds > 0) {\\n        portions.push(seconds + 's');\\n        duration -= (minutes * 1000);\\n    }\\n    return portions.join(' ');\\n}\\n\\n/** Generate a hashCode for a string that is pretty unique most of the time */\\nexport function hashCode(s) { return s.split(\\\"\\\").reduce(function (a, b) { a = ((a << 5) - a) + b.charCodeAt(0); return a & a }, 0); }\\n\\n/** @param {NS} ns **/\\nexport function disableLogs(ns, listOfLogs) { ['disableLog'].concat(...listOfLogs).forEach(log => checkNsInstance(ns, '\\\"disableLogs\\\"').disableLog(log)); }\\n\\n/** Joins all arguments as components in a path, e.g. pathJoin(\\\"foo\\\", \\\"bar\\\", \\\"/baz\\\") = \\\"foo/bar/baz\\\" **/\\nexport function pathJoin(...args) {\\n    return args.filter(s => !!s).join('/').replace(/\\\\/\\\\/+/g, '/');\\n}\\n\\n/** Gets the path for the given local file, taking into account optional subfolder relocation via git-pull.js **/\\nexport function getFilePath(file) {\\n    const subfolder = '';  // git-pull.js optionally modifies this when downloading\\n    return pathJoin(subfolder, file);\\n}\\n\\n// FUNCTIONS THAT PROVIDE ALTERNATIVE IMPLEMENTATIONS TO EXPENSIVE NS FUNCTIONS\\n// VARIATIONS ON NS.RUN\\n\\n/** @param {NS} ns\\n *  Use where a function is required to run a script and you have already referenced ns.run in your script **/\\nexport function getFnRunViaNsRun(ns) { return checkNsInstance(ns, '\\\"getFnRunViaNsRun\\\"').run; }\\n\\n/** @param {NS} ns\\n *  Use where a function is required to run a script and you have already referenced ns.exec in your script **/\\nexport function getFnRunViaNsExec(ns, host = \\\"home\\\") {\\n    checkNsInstance(ns, '\\\"getFnRunViaNsExec\\\"');\\n    return function (scriptPath, ...args) { return ns.exec(scriptPath, host, ...args); }\\n}\\n// VARIATIONS ON NS.ISRUNNING\\n\\n/** @param {NS} ns\\n *  Use where a function is required to run a script and you have already referenced ns.run in your script  */\\nexport function getFnIsAliveViaNsIsRunning(ns) { return checkNsInstance(ns, '\\\"getFnIsAliveViaNsIsRunning\\\"').isRunning; }\\n\\n/** @param {NS} ns\\n *  Use where a function is required to run a script and you have already referenced ns.exec in your script  */\\nexport function getFnIsAliveViaNsPs(ns) {\\n    checkNsInstance(ns, '\\\"getFnIsAliveViaNsPs\\\"');\\n    return function (pid, host) { return ns.ps(host).some(process => process.pid === pid); }\\n}\\n\\n/**\\n * Retrieve the result of an ns command by executing it in a temporary .js script, writing the result to a file, then shuting it down\\n * Importing incurs a maximum of 1.1 GB RAM (0 GB for ns.read, 1 GB for ns.run, 0.1 GB for ns.isRunning).\\n * Has the capacity to retry if there is a failure (e.g. due to lack of RAM available). Not recommended for performance-critical code.\\n * @param {NS} ns - The nestcript instance passed to your script's main entry point\\n * @param {string} command - The ns command that should be invoked to get the desired data (e.g. \\\"ns.getServer('home')\\\" )\\n * @param {string=} fName - (default \\\"/Temp/{commandhash}-data.txt\\\") The name of the file to which data will be written to disk by a temporary process\\n * @param {bool=} verbose - (default false) If set to true, pid and result of command are logged.\\n **/\\nexport async function getNsDataThroughFile(ns, command, fName, verbose = false, maxRetries = 5, retryDelayMs = 50) {\\n    checkNsInstance(ns, '\\\"getNsDataThroughFile\\\"');\\n    if (!verbose) disableLogs(ns, ['run', 'isRunning']);\\n    return await getNsDataThroughFile_Custom(ns, ns.run, ns.isRunning, command, fName, verbose, maxRetries, retryDelayMs);\\n}\\n\\n/**\\n * An advanced version of getNsDataThroughFile that lets you pass your own \\\"fnRun\\\" and \\\"fnIsAlive\\\" implementations to reduce RAM requirements\\n * Importing incurs no RAM (now that ns.read is free) plus whatever fnRun / fnIsAlive you provide it\\n * Has the capacity to retry if there is a failure (e.g. due to lack of RAM available). Not recommended for performance-critical code.\\n * @param {NS} ns - The nestcript instance passed to your script's main entry point\\n * @param {function} fnRun - A single-argument function used to start the new sript, e.g. `ns.run` or `(f,...args) => ns.exec(f, \\\"home\\\", ...args)`\\n * @param {function} fnIsAlive - A single-argument function used to start the new sript, e.g. `ns.isRunning` or `pid => ns.ps(\\\"home\\\").some(process => process.pid === pid)`\\n **/\\nexport async function getNsDataThroughFile_Custom(ns, fnRun, fnIsAlive, command, fName, verbose = false, maxRetries = 5, retryDelayMs = 50) {\\n    checkNsInstance(ns, '\\\"getNsDataThroughFile_Custom\\\"');\\n    if (!verbose) disableLogs(ns, ['read']);\\n    const commandHash = hashCode(command);\\n    fName = fName || `/Temp/${commandHash}-data.txt`;\\n    const fNameCommand = (fName || `/Temp/${commandHash}-command`) + '.js'\\n    // Prepare a command that will write out a new file containing the results of the command\\n    // unless it already exists with the same contents (saves time/ram to check first)\\n    // If an error occurs, it will write an empty file to avoid old results being misread.\\n    const commandToFile = `let result = \\\"\\\"; try { result = JSON.stringify(${command}); } catch { }\\n        if (ns.read(\\\"${fName}\\\") != result) await ns.write(\\\"${fName}\\\", result, 'w')`;\\n    // Run the command with auto-retries if it fails\\n    const pid = await runCommand_Custom(ns, fnRun, commandToFile, fNameCommand, false, maxRetries, retryDelayMs);\\n    // Wait for the process to complete\\n    await waitForProcessToComplete_Custom(ns, fnIsAlive, pid, verbose);\\n    if (verbose) ns.print(`Process ${pid} is done. Reading the contents of ${fName}...`);\\n    // Read the file, with auto-retries if it fails\\n    const fileData = await autoRetry(ns, () => ns.read(fName), f => f !== undefined && f !== \\\"\\\",\\n        () => `ns.read('${fName}') somehow returned undefined or an empty string`,\\n        maxRetries, retryDelayMs, undefined, verbose);\\n    if (verbose) ns.print(`Read the following data for command ${command}:\\\\n${fileData}`);\\n    return JSON.parse(fileData); // Deserialize it back into an object/array and return\\n}\\n\\n/** Evaluate an arbitrary ns command by writing it to a new script and then running or executing it.\\n * @param {NS} ns - The nestcript instance passed to your script's main entry point\\n * @param {string} command - The ns command that should be invoked to get the desired data (e.g. \\\"ns.getServer('home')\\\" )\\n * @param {string=} fileName - (default \\\"/Temp/{commandhash}-data.txt\\\") The name of the file to which data will be written to disk by a temporary process\\n * @param {bool=} verbose - (default false) If set to true, the evaluation result of the command is printed to the terminal\\n * @param {...args} args - args to be passed in as arguments to command being run as a new script.\\n */\\nexport async function runCommand(ns, command, fileName, verbose = false, maxRetries = 5, retryDelayMs = 50, ...args) {\\n    checkNsInstance(ns, '\\\"runCommand\\\"');\\n    if (!verbose) disableLogs(ns, ['run', 'sleep']);\\n    return await runCommand_Custom(ns, ns.run, command, fileName, verbose, maxRetries, retryDelayMs, ...args);\\n}\\n\\n/**\\n * An advanced version of runCommand that lets you pass your own \\\"isAlive\\\" test to reduce RAM requirements (e.g. to avoid referencing ns.isRunning)\\n * Importing incurs 0 GB RAM (assuming fnRun, fnWrite are implemented using another ns function you already reference elsewhere like ns.exec)\\n * @param {NS} ns - The nestcript instance passed to your script's main entry point\\n * @param {function} fnRun - A single-argument function used to start the new sript, e.g. `ns.run` or `(f,...args) => ns.exec(f, \\\"home\\\", ...args)`\\n **/\\nexport async function runCommand_Custom(ns, fnRun, command, fileName, verbose = false, maxRetries = 5, retryDelayMs = 50, ...args) {\\n    checkNsInstance(ns, '\\\"runCommand_Custom\\\"');\\n    let script = `import { formatMoney, formatNumberShort, formatDuration, parseShortNumber, scanAllServers } fr` + `om '${getFilePath('helpers.js')}'\\\\n` +\\n        `export async function main(ns) { try { ` +\\n        (verbose ? `let output = ${command}; ns.tprint(output)` : command) +\\n        `; } catch(err) { ns.tprint(String(err)); throw(err); } }`;\\n    fileName = fileName || `/Temp/${hashCode(command)}-command.js`;\\n    // To improve performance and save on garbage collection, we can skip writing this exact same script was previously written (common for repeatedly-queried data)\\n    if (ns.read(fileName) != script) await ns.write(fileName, script, \\\"w\\\");\\n    return await autoRetry(ns, () => fnRun(fileName, ...args), temp_pid => temp_pid !== 0,\\n        () => `Run command returned no pid. Destination: ${fileName} Command: ${command}\\\\nEnsure you have sufficient free RAM to run this temporary script.`,\\n        maxRetries, retryDelayMs, undefined, verbose);\\n}\\n\\n/**\\n * Wait for a process id to complete running\\n * Importing incurs a maximum of 0.1 GB RAM (for ns.isRunning) \\n * @param {NS} ns - The nestcript instance passed to your script's main entry point\\n * @param {int} pid - The process id to monitor\\n * @param {bool=} verbose - (default false) If set to true, pid and result of command are logged.\\n **/\\nexport async function waitForProcessToComplete(ns, pid, verbose) {\\n    checkNsInstance(ns, '\\\"waitForProcessToComplete\\\"');\\n    if (!verbose) disableLogs(ns, ['isRunning']);\\n    return await waitForProcessToComplete_Custom(ns, ns.isRunning, pid, verbose);\\n}\\n/**\\n * An advanced version of waitForProcessToComplete that lets you pass your own \\\"isAlive\\\" test to reduce RAM requirements (e.g. to avoid referencing ns.isRunning)\\n * Importing incurs 0 GB RAM (assuming fnIsAlive is implemented using another ns function you already reference elsewhere like ns.ps) \\n * @param {NS} ns - The nestcript instance passed to your script's main entry point\\n * @param {function} fnIsAlive - A single-argument function used to start the new sript, e.g. `ns.isRunning` or `pid => ns.ps(\\\"home\\\").some(process => process.pid === pid)`\\n **/\\nexport async function waitForProcessToComplete_Custom(ns, fnIsAlive, pid, verbose) {\\n    checkNsInstance(ns, '\\\"waitForProcessToComplete_Custom\\\"');\\n    if (!verbose) disableLogs(ns, ['sleep']);\\n    // Wait for the PID to stop running (cheaper than e.g. deleting (rm) a possibly pre-existing file and waiting for it to be recreated)\\n    for (var retries = 0; retries < 1000; retries++) {\\n        if (!fnIsAlive(pid)) break; // Script is done running\\n        if (verbose && retries % 100 === 0) ns.print(`Waiting for pid ${pid} to complete... (${retries})`);\\n        await ns.sleep(10);\\n    }\\n    // Make sure that the process has shut down and we haven't just stopped retrying\\n    if (fnIsAlive(pid)) {\\n        let errorMessage = `run-command pid ${pid} is running much longer than expected. Max retries exceeded.`;\\n        ns.print(errorMessage);\\n        throw errorMessage;\\n    }\\n}\\n\\n/** Helper to retry something that failed temporarily (can happen when e.g. we temporarily don't have enough RAM to run)\\n * @param {NS} ns - The nestcript instance passed to your script's main entry point */\\nexport async function autoRetry(ns, fnFunctionThatMayFail, fnSuccessCondition, errorContext = \\\"Success condition not met\\\",\\n    maxRetries = 5, initialRetryDelayMs = 50, backoffRate = 3, verbose = false) {\\n    checkNsInstance(ns, '\\\"autoRetry\\\"');\\n    let retryDelayMs = initialRetryDelayMs;\\n    while (maxRetries-- > 0) {\\n        try {\\n            const result = await fnFunctionThatMayFail()\\n            if (!fnSuccessCondition(result)) throw typeof errorContext === 'string' ? errorContext : errorContext();\\n            return result;\\n        }\\n        catch (error) {\\n            const fatal = maxRetries === 0;\\n            const errorLog = `${fatal ? 'FAIL' : 'WARN'}: (${maxRetries} retries remaining): ${String(error)}`\\n            log(ns, errorLog, fatal, !verbose ? undefined : (fatal ? 'error' : 'warning'))\\n            if (fatal) throw error;\\n            await ns.sleep(retryDelayMs);\\n            retryDelayMs *= backoffRate;\\n        }\\n    }\\n}\\n\\n/** Helper to log a message, and optionally also tprint it and toast it\\n * @param {NS} ns - The nestcript instance passed to your script's main entry point */\\nexport function log(ns, message = \\\"\\\", alsoPrintToTerminal = false, toastStyle = \\\"\\\", maxToastLength = 100) {\\n    checkNsInstance(ns, '\\\"log\\\"');\\n    ns.print(message);\\n    if (alsoPrintToTerminal) ns.tprint(message);\\n    if (toastStyle) ns.toast(message.length <= maxToastLength ? message : message.substring(0, maxToastLength - 3) + \\\"...\\\", toastStyle);\\n    return message;\\n}\\n\\n/** Helper to get a list of all hostnames on the network\\n * @param {NS} ns - The nestcript instance passed to your script's main entry point */\\nexport function scanAllServers(ns) {\\n    checkNsInstance(ns, '\\\"scanAllServers\\\"');\\n    let discoveredHosts = []; // Hosts (a.k.a. servers) we have scanned\\n    let hostsToScan = [\\\"home\\\"]; // Hosts we know about, but have no yet scanned\\n    let infiniteLoopProtection = 9999; // In case you mess with this code, this should save you from getting stuck\\n    while (hostsToScan.length > 0 && infiniteLoopProtection-- > 0) { // Loop until the list of hosts to scan is empty\\n        let hostName = hostsToScan.pop(); // Get the next host to be scanned\\n        for (const connectedHost of ns.scan(hostName)) // \\\"scan\\\" (list all hosts connected to this one)\\n            if (!discoveredHosts.includes(connectedHost)) // If we haven't already scanned this host\\n                hostsToScan.push(connectedHost); // Add it to the queue of hosts to be scanned\\n        discoveredHosts.push(hostName); // Mark this host as \\\"scanned\\\"\\n    }\\n    return discoveredHosts; // The list of scanned hosts should now be the set of all hosts in the game!\\n}\\n\\n/** @param {NS} ns \\n * Get a dictionary of active source files, taking into account the current active bitnode as well. **/\\nexport async function getActiveSourceFiles(ns) {\\n    return await getActiveSourceFiles_Custom(ns, getNsDataThroughFile);\\n}\\n\\n/** @param {NS} ns \\n * getActiveSourceFiles Helper that allows the user to pass in their chosen implementation of getNsDataThroughFile to minimize RAM usage **/\\nexport async function getActiveSourceFiles_Custom(ns, fnGetNsDataThroughFile) {\\n    checkNsInstance(ns, '\\\"getActiveSourceFiles\\\"');\\n    let tempFile = '/Temp/owned-source-files.txt';\\n    // Find out what source files the user has unlocked\\n    let dictSourceFiles;\\n    try { await fnGetNsDataThroughFile(ns, `Object.fromEntries(ns.getOwnedSourceFiles().map(sf => [sf.n, sf.lvl]))`, tempFile); } catch { }\\n    if (!dictSourceFiles) { // Bit of a hack, but if RAM is so low that this fails, we can fallback to using an older version of this file, and even assuming we have no source files.\\n        dictSourceFiles = ns.read(tempFile)\\n        dictSourceFiles = dictSourceFiles ? JSON.parse(dictSourceFiles) : {};\\n    }\\n    // If the user is currently in a given bitnode, they will have its features unlocked\\n    dictSourceFiles[(await fnGetNsDataThroughFile(ns, 'ns.getPlayer()', '/Temp/player-info.txt')).bitNodeN] = 3;\\n    return dictSourceFiles;\\n}\\n\\n/** @param {NS} ns \\n * Return bitnode multiplers, or null if they cannot be accessed. **/\\nexport async function tryGetBitNodeMultipliers(ns) {\\n    return await tryGetBitNodeMultipliers_Custom(ns, getNsDataThroughFile);\\n}\\n\\n/** @param {NS} ns\\n * tryGetBitNodeMultipliers Helper that allows the user to pass in their chosen implementation of getNsDataThroughFile to minimize RAM usage **/\\nexport async function tryGetBitNodeMultipliers_Custom(ns, fnGetNsDataThroughFile) {\\n    checkNsInstance(ns, '\\\"tryGetBitNodeMultipliers\\\"');\\n    let canGetBitNodeMultipliers = false;\\n    try { canGetBitNodeMultipliers = 5 in (await getActiveSourceFiles_Custom(ns, fnGetNsDataThroughFile)); } catch { }\\n    if (!canGetBitNodeMultipliers) return null;\\n    try { return await fnGetNsDataThroughFile(ns, 'ns.getBitNodeMultipliers()', '/Temp/bitnode-multipliers.txt'); } catch { }\\n    return null;\\n}\\n\\n/** @param {NS} ns \\n * Returns a helpful error message if we forgot to pass the ns instance to a function */\\nexport function checkNsInstance(ns, fnName = \\\"this function\\\") { if (!ns.print) throw `The first argument to ${fnName} should be a 'ns' instance.`; return ns; }\",\"filename\":\"helpers.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4.4,\"server\":\"home\",\"moduleSequenceNumber\":142,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"run\",\"cost\":1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"isRunning\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"ps\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { formatMoney, formatRam, tryGetBitNodeMultipliers } from './helpers.js'\\n\\n// The purpose of the host manager is to buy the best servers it can\\n// until it thinks RAM is underutilized enough that you don't need to anymore.\\n\\n// the max server ram you can buy (it's a petabyte) as an exponent (power of 2)\\nlet maxPurchasableServerRamExponent = 20;\\n// the max number of servers you can have in your farm\\nlet maxPurchasedServers = 25;\\n// Don't attempt to buy any new servers if we're under this utilization\\nlet utilizationTarget = 0.5;\\n// Keep at least this much money on hand (so we arent blocked from buying necessary things)\\nlet reservedMoneyAmount = 0; //250000000; // Enable if needed (Can also use reserve.txt)\\nlet reservedMoneyPercent = 0.9; // Don't spend more than 1% of our money on temporary RAM\\nlet minRamExponent = 10;\\n// The name to give all purchased servers. Also used to determine which servers were purchased\\nconst purchasedServerName = \\\"daemon\\\";\\n// Use experimental reserve-by-time adjustment.\\nlet varyReservebyTime = false;\\n\\n// Frequency of update\\nconst interval = 10000;\\n\\nlet _ns = null;\\nlet keepRunning = false;\\nlet options;\\nlet bitnodeMults;\\n\\nconst argsSchema = [\\n    ['c', false], // Set to true to run continuously\\n    ['run-continuously', false],\\n    ['absolute-reserve', 0], // Set to reserve money\\n    ['reserve-percent', 0.9], // Set to reserve a percentage of home money\\n    ['utilization-trigger', 0.95], // the percentage utilization that will trigger an attempted purchase\\n    ['min-ram-exponent', 5], // the minimum amount of ram to purchase\\n    ['reserve-by-time', false], // Experimental exponential decay by time in the run. Starts willing to spend lots of money, falls off over time.\\n];\\n\\nexport function autocomplete(data, _) {\\n    data.flags(argsSchema);\\n    return [];\\n}\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    _ns = ns;\\n    ns.disableLog('ALL')\\n    bitnodeMults = (await tryGetBitNodeMultipliers(ns)) ?? { PurchasedServerMaxRam: 1, PurchasedServerLimit: 1 };\\n    maxPurchasableServerRamExponent = Math.round(20 + Math.log2(bitnodeMults.PurchasedServerMaxRam));\\n    maxPurchasedServers = Math.round(25 * bitnodeMults.PurchasedServerLimit);\\n\\n    options = ns.flags(argsSchema);\\n    keepRunning = options.c || options['run-continuously'];\\n    reservedMoneyAmount = options['absolute-reserve'];\\n    reservedMoneyPercent = options['reserve-percent'];\\n    utilizationTarget = options['utilization-trigger'];\\n    minRamExponent = options['min-ram-exponent'];\\n    varyReservebyTime = options['reserve-by-time'];\\n    if (!keepRunning)\\n        ns.print(`host-manager will run once. Run with argument \\\"-c\\\" to run continuously.`)\\n    do {\\n        tryToBuyBestServerPossible(ns);\\n        if (keepRunning)\\n            await ns.sleep(interval);\\n    } while (keepRunning);\\n}\\n\\n// Logging system to only print a log if it is different from the last log printed.\\nlet lastStatus = \\\"\\\";\\n\\nfunction setStatus(log) {\\n    return log != lastStatus ? _ns.print(lastStatus = log) : false;\\n}\\n\\n// Log and print to the terminal when something important happens\\nfunction announce(log, toastStyle = 'info') {\\n    _ns.print(log);\\n    _ns.tprint(log);\\n    _ns.toast(log, toastStyle);\\n}\\n\\n\\n/** @param {NS} ns \\n  * Attempts to buy a server at or better than your home machine. **/\\nfunction tryToBuyBestServerPossible(ns) {\\n    // Scan the set of all servers on the network that we own (or rooted) to get a sense of RAM utilization\\n    let rootedServers = [];\\n    let ignoredServers = [];\\n    let hostsToScan = [\\\"home\\\"];\\n    let utilizationTotal = 0;\\n    let totalMaxRam = 0;\\n    let infLoopProtection = 1000;\\n    while (hostsToScan.length > 0 && infLoopProtection-- > 0) {\\n        let hostName = hostsToScan.pop();\\n        if (rootedServers.includes(hostName) || ignoredServers.includes(hostName))\\n            continue;\\n        ns.scan(hostName).forEach(connectedHost => hostsToScan.push(connectedHost));\\n\\n        let serverMaxRam = ns.getServerMaxRam(hostName);\\n        // Don't count unrooted or useless servers\\n        if (ns.getServerMaxRam(hostName) <= 0 || ns.hasRootAccess(hostName) == false) {\\n            ignoredServers.push(hostName);\\n            continue;\\n        }\\n        rootedServers.push(hostName);\\n        totalMaxRam += serverMaxRam;\\n        utilizationTotal += ns.getServerUsedRam(hostName);\\n    }\\n    if (infLoopProtection <= 0)\\n        return announce('host-manager.js Infinite Loop Detected!', 'error');\\n\\n    // Gether up the list of servers that were previously purchased.\\n    // Note: You can request the official list of purchased servers (cost 2.25 GB RAM), but we have that commented out here.\\n    //let purchasedServers = ns.getPurchasedServers();\\n    // If you're willing to remember to always name manually purchased severs \\\"daemon\\\", then this should work\\n    //let purchasedServers = ns.getPurchasedServers();\\n    let purchasedServers = rootedServers.filter(hostName => hostName.startsWith(purchasedServerName)).sort();\\n\\n    // analyze the utilization rates\\n    let utilizationRate = utilizationTotal / totalMaxRam;\\n    setStatus(`Using ${Math.round(utilizationTotal).toLocaleString()}/${formatRam(totalMaxRam)} (` +\\n        `${(utilizationRate * 100).toFixed(1)}%) across ${rootedServers.length} servers (${purchasedServers.length} bought)`);\\n\\n    // Stop if utilization is below target. We probably don't need another server.\\n    if (utilizationRate < utilizationTarget)\\n        return;\\n\\n    // Check for other reasons not to go ahead with the purchase\\n    let prefix = 'Host-manager wants to buy another server, but ';\\n\\n    const reserve = Number.parseFloat(ns.read('reserve.txt'));\\n    let currentMoney = _ns.getServerMoneyAvailable(\\\"home\\\");\\n    let spendableMoney = currentMoney - reserve;\\n    // Reserve at least enough money to buy the final hack tool, if we do not already have it (once we do, remember and stop checking)\\n    if (!ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\n        prefix += '(reserving an extra 250M for SQLInject) ';\\n        spendableMoney = Math.max(0, spendableMoney - 250000000);\\n    }\\n    // Additional reservations\\n    // Vary reservation by time since augment. \\n    // Decay factor of 0.2 = Starts willing to spend 95% of our money, backing down to ~75% at 1 hour, ~60% at 2 hours, ~25% at 6 hours, and ~10% at 10 hours.\\n    // Decay factor of 0.3 = Starts willing to spend 95% of our money, backing down to ~66% at 1 hour, ~45% at 2 hours, ~23% at 4 hours, ~10% at 6 hours\\n    // Decay factor of 0.5 = Starts willing to spend 95% of our money, then halving every hour (to ~48% at 1 hour, ~24% at 2 hours, ~12% at 3 hours, etc)\\n    let t = ns.getTimeSinceLastAug() / (60 * 60 * 1000); // Time since last aug, in hours.\\n    let decayFactor = 0.5\\n    if (varyReservebyTime) reservedMoneyPercent = 1 - 0.95 * Math.pow(1 - decayFactor, t);\\n\\n    spendableMoney = Math.max(0, Math.min(spendableMoney * (1 - reservedMoneyPercent), spendableMoney - reservedMoneyAmount));\\n    if (spendableMoney == 0)\\n        return setStatus(prefix + 'all cash is currently reserved.');\\n\\n    // Determine the most ram we can buy with this money\\n    let exponentLevel = 1;\\n    for (; exponentLevel < maxPurchasableServerRamExponent; exponentLevel++)\\n        if (ns.getPurchasedServerCost(Math.pow(2, exponentLevel + 1)) > spendableMoney)\\n            break;\\n\\n    let maxRamPossibleToBuy = Math.pow(2, exponentLevel);\\n\\n    // Abort if it would put us below our reserve (shouldn't happen, since we calculated how much to buy based on reserve amount)\\n    let cost = ns.getPurchasedServerCost(maxRamPossibleToBuy);\\n    if (spendableMoney < cost)\\n        return setStatus(prefix + 'spendableMoney (' + formatMoney(spendableMoney) + ') is less than the cost (' + formatMoney(cost) + ')');\\n\\n    if (exponentLevel < minRamExponent)\\n        return setStatus(`${prefix}The highest ram exponent we can afford (2^${exponentLevel} for ${formatMoney(cost)}) on our budget of ${formatMoney(spendableMoney)} ` +\\n            `is less than the minimum ram exponent (2^${minRamExponent} for ${formatMoney(ns.getPurchasedServerCost(Math.pow(2, minRamExponent)))})'`);\\n\\n    // Under some conditions, we consider the new server \\\"not worthwhile\\\". but only if it isn't the biggest possible server we can buy\\n    if (exponentLevel < maxPurchasableServerRamExponent - 1) { // -1 To give a buffer if we don't have SF5, because several bitnodes lower the max exponent by 1\\n        // Abort if our home server is more than 2x bettter (rough guage of how much we 'need' Daemon RAM at the current stage of the game?)\\n        // Unless we're looking at buying the maximum purchasable server size - in which case we can do no better\\n        if (maxRamPossibleToBuy < ns.getServerMaxRam(\\\"home\\\") / 4)\\n            return setStatus(prefix + 'the most RAM we can buy (' + formatRam(maxRamPossibleToBuy) + ') on our budget of ' + formatMoney(spendableMoney) + ' is way less than (<0.25*) home RAM ' + formatRam(ns.getServerMaxRam(\\\"home\\\")));\\n        // Abort if purchasing this server wouldn't improve our total RAM by more than 10% (ensures we buy in meaningful increments)\\n        if (maxRamPossibleToBuy / totalMaxRam < 0.1)\\n            return setStatus(prefix + 'the most RAM we can buy (' + formatRam(maxRamPossibleToBuy) + ') on our budget of ' + formatMoney(spendableMoney) + ' is less than 10% of total available RAM ' + formatRam(totalMaxRam) + ')');\\n    }\\n\\n    let maxPurchasableServerRam = Math.pow(2, maxPurchasableServerRamExponent)\\n    let worstServerName = null;\\n    let worstServerRam = maxPurchasableServerRam;\\n    let bestServerName = null;\\n    let bestServerRam = 0;\\n    for (const server of purchasedServers) {\\n        let ram = ns.getServerMaxRam(server);\\n        if (ram < worstServerRam) {\\n            worstServerName = server;\\n            worstServerRam = ram;\\n        }\\n        if (ram >= bestServerRam) {\\n            bestServerName = server;\\n            bestServerRam = ram;\\n        }\\n    }\\n\\n    // Abort if our worst previously-purchased server is better than the one we're looking to buy (ensures we buy in sane increments of capacity)\\n    if (worstServerName != null && maxRamPossibleToBuy < worstServerRam)\\n        return setStatus(prefix + 'the most RAM we can buy (' + formatRam(maxRamPossibleToBuy) +\\n            ') on our budget of ' + formatMoney(spendableMoney) + ' is less than our worst purchased server ' + worstServerName + '\\\\'s RAM ' + formatRam(worstServerRam));\\n    // Only buy new servers as good as or better than our best bought server (anything less is considered a regression in value)\\n    if (bestServerRam != null && maxRamPossibleToBuy < bestServerRam)\\n        return setStatus(prefix + 'the most RAM we can buy (' + formatRam(maxRamPossibleToBuy) +\\n            ') on our budget of ' + formatMoney(spendableMoney) + ' is less than our previously purchased server ' + bestServerName + \\\" RAM \\\" + formatRam(bestServerRam));\\n\\n    // if we're at capacity, check to see if we can do better better than the current worst purchased server. If so, delete it to make room.\\n    if (purchasedServers.length >= maxPurchasedServers) {\\n        if (worstServerRam == maxPurchasableServerRam) {\\n            keepRunning = false;\\n            return announce('All purchaseable servers are maxed.');\\n        }\\n\\n        // It's only worth deleting our old server if the new server will be 16x bigger or more (or if it's the biggest we can buy)\\n        if (exponentLevel == maxPurchasableServerRamExponent || worstServerRam * 16 <= maxRamPossibleToBuy) {\\n            ns.run(\\\"remove-worst-server.js\\\");\\n            return setStatus(`hostmanager.js requested to delete server ${worstServerName} (${formatRam(worstServerRam)} RAM) ` +\\n                `to make room for a new ${formatRam(maxRamPossibleToBuy)} Server.`);\\n        } else {\\n            return setStatus(`${prefix}the most RAM we can buy (${formatRam(maxRamPossibleToBuy)}) is less than 16x the RAM ` +\\n                `of the server it must delete to make room: ${worstServerName} (${formatRam(worstServerRam)} RAM)`);\\n        }\\n    }\\n\\n    let purchasedServer = ns.purchaseServer(purchasedServerName, maxRamPossibleToBuy);\\n    if (!purchasedServer)\\n        setStatus(prefix + `Could not purchase a server with ${formatRam(maxRamPossibleToBuy)} RAM for ${formatMoney(cost)} ` +\\n            `with a budget of ${formatMoney(spendableMoney)}. This is either a bug, or we in a SF.9`);\\n    else\\n        announce('Purchased a new server ' + purchasedServer + ' with ' + formatRam(maxRamPossibleToBuy) + ' RAM for ' + formatMoney(cost), 'success');\\n}\",\"filename\":\"host-manager.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"helpers.js\",\"url\":\"blob:https://danielyxie.github.io/89f20337-1d8b-4f1e-ad26-dd1096e5df5c\",\"moduleSequenceNumber\":5043},{\"filename\":\"host-manager.js\",\"url\":\"blob:https://danielyxie.github.io/daccb71e-89a4-47f1-9beb-6cb5b933687d\",\"moduleSequenceNumber\":5176}],\"dependents\":[],\"ramUsage\":5.8,\"server\":\"home\",\"moduleSequenceNumber\":143,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getTimeSinceLastAug\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServerCost\",\"cost\":0.25},{\"type\":\"fn\",\"name\":\"run\",\"cost\":1},{\"type\":\"fn\",\"name\":\"purchaseServer\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"isRunning\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getNsDataThroughFile, runCommand } from './helpers.js'\\n\\n/** @param {NS} ns \\n *  Remove the worst server we own (RAM) **/\\nexport async function main(ns) {\\n    let worstServerName = null;\\n    let worstServerRam = Math.pow(2, 20);\\n    let purchasedServers = await getNsDataThroughFile(ns, 'ns.getPurchasedServers()', '/Temp/purchased-servers.txt');\\n    if (purchasedServers.length == 0) {\\n        ns.tprint(\\\"Nothing to delete - you have purchased no servers.\\\");\\n        return;\\n    }\\n    purchasedServers.forEach(serverName => {\\n        let ram = ns.getServerMaxRam(serverName);\\n        if (ram < worstServerRam) {\\n            worstServerName = serverName;\\n            worstServerRam = ram;\\n        }\\n    });\\n    if (worstServerName == null) {\\n        ns.tprint(\\\"Nothing to delete - all \\\" + purchasedServers.length + \\\" servers have the maximum \\\" + worstServerRam + \\\" GB of RAM\\\");\\n        return;\\n    }\\n    // Flag the server for deletion with a file - daemon should check for this and stop scheduling against it.\\n    await runCommand(ns, `await ns.scp(\\\"/Flags/deleting.txt\\\", \\\"${worstServerName}\\\")`, '/Temp/flag-server-for-deletion.js');\\n    var success = await getNsDataThroughFile(ns, `ns.deleteServer(\\\"${worstServerName}\\\")`, '/Temp/try-delete-server-result.txt');\\n    if (success)\\n        ns.tprint(\\\"Deleted \\\" + worstServerName + \\\" which had only \\\" + worstServerRam + \\\" GB of RAM. \\\" + (purchasedServers.length - 1) + \\\" servers remain.\\\");\\n    else\\n        ns.tprint(\\\"Tried to delete \\\" + worstServerName + \\\" with \\\" + worstServerRam + \\\" GB RAM, but it failed (scripts still running)\\\");\\n}\",\"filename\":\"remove-worst-server.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.75,\"server\":\"home\",\"moduleSequenceNumber\":144,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"run\",\"cost\":1},{\"type\":\"fn\",\"name\":\"isRunning\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { parseShortNumber } from './helpers.js'\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let parsed = parseShortNumber(ns.args[0]);\\n    await ns.write('reserve.txt', parsed, \\\"w\\\");\\n    ns.tprint(`Set to reserve ${parsed.toLocaleString()}`);\\n}\",\"filename\":\"reserve.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"server\":\"home\",\"moduleSequenceNumber\":145,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { runCommand } from './helpers.js'\\n\\n/** @param {NS} ns \\n * The argument can consist of multiple commands to run. The output of the first command will automatically be printed\\n * unless a subsequent command includes '; output = ...' - in which case that result will be printed instead. **/\\nexport async function main(ns) {\\n    let args = ns.args;\\n    if (args.length == 0)\\n        return ns.tprint(\\\"You must run this script with an argument that is the code to test.\\\")\\n    // Special first argument of -s will result in \\\"silent\\\" mode - do not output the result in the success case\\n    let silent = false;\\n    if (args.includes('-s')) {\\n        silent = true;\\n        args = args.slice(args.indexOf('-s'), 1);\\n    }\\n    let firstArg = String(args[0]);\\n    let escaped = firstArg.startsWith('\\\"') && firstArg.endsWith('\\\"') || firstArg.startsWith(\\\"'\\\") && firstArg.endsWith(\\\"'\\\") || firstArg.startsWith(\\\"`\\\") && firstArg.endsWith(\\\"`\\\");\\n    let command = args == escaped ? args[0] : args.join(\\\" \\\"); // If args weren't escaped, join them together\\n    //3.6 return await runCommand(ns.run, ns.write, command, `/Temp/terminal-command.js`, !silent);\\n    return await runCommand(ns, command, `/Temp/terminal-command.js`, !silent, 1, undefined, undefined, ...args.slice(1));\\n}\",\"filename\":\"run-command.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.6,\"server\":\"home\",\"moduleSequenceNumber\":146,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"run\",\"cost\":1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"let factionServers = [\\\"CSEC\\\", \\\"avmnite-02h\\\", \\\"I.I.I.I\\\", \\\"run4theh111z\\\", \\\"w0r1d_d43m0n\\\"];\\nlet css = `<style id=\\\"scanCSS\\\">\\n        .w  {white-space:nowrap}\\n        .sc {white-space:pre; color:#ccc; font:14px monospace; line-height: 16px; }\\n        .sc .s {color:#080; cursor:pointer; text-decoration:underline}\\n        .sc .f {color:#088}\\n        .sc .r {color:#6f3}\\n        .sc .r.f {color:#0ff}\\n        .sc .r::before {color:#6f3}\\n        .sc .hack {display:inline-block; font:12px monospace}\\n        .sc .red {color:red;}\\n        .sc .green {color:green;}\\n        .sc .backdoor {color:#6f3; font:12px monospace}\\n        .sc .backdoor > a {cursor:pointer; text-decoration:underline;}\\n        .sc .cct {color:#0ff;}\\n    </style>`;\\nlet doc = eval(\\\"document\\\");\\nlet tprint = html => doc.getElementById(\\\"terminal\\\").insertAdjacentHTML('beforeend', `<li>${html}</li>`);\\n/** @param {NS} ns **/\\nexport let main = ns => {\\n    let tIn = doc.getElementById(\\\"terminal-input\\\");\\n    let tEv = tIn[Object.keys(tIn)[1]];\\n    let priorCss = doc.getElementById(\\\"scanCSS\\\");\\n    if (priorCss) priorCss.parentNode.removeChild(priorCss); // Remove old CSS to facilitate tweaking css above\\n    doc.head.insertAdjacentHTML('beforeend', css);\\n    let serverInfo = (x) => {\\n        return ns.getServer(x); // Costs 2 GB. If you can't don't need backdoor links, uncomment and use the alternate implementations below\\n        /* return {\\n            requiredHackingSkill: ns.getServerRequiredHackingLevel(x),\\n            hasAdminRights: ns.hasRootAccess(x),\\n            purchasedByPlayer: x.includes('daemon') || x.includes('hacknet'),\\n            backdoorInstalled: true // No way of knowing without ns.getServer\\n        } */\\n    }\\n    let s = [\\\"home\\\"],\\n        p = [\\\"\\\"],\\n        r = { home: \\\"home\\\" },\\n        myHack = ns.getHackingLevel(),\\n        fName = x => {\\n            let server = serverInfo(x); // Costs 2 GB. If you can't don't need backdoor links, uncomment the alternate implementations below\\n            let reqHack = server.requiredHackingSkill; // ns.getServerRequiredHackingLevel(x);\\n            let rooted = server.hasAdminRights; // ns.hasRootAccess(x);\\n            let shouldBackdoor = !server?.backdoorInstalled && reqHack <= myHack && x != 'home' && rooted && !server.purchasedByPlayer;\\n            let contracts = ns.ls(x, \\\".cct\\\"); // Find out whether there are any contracts on the server\\n            return `<span class=\\\"w\\\" id=\\\"${x}\\\">` +\\n                `<a class=\\\"s${factionServers.includes(x) ? \\\" f\\\" : \\\"\\\"}${rooted ? \\\" r\\\" : \\\"\\\"}\\\">${x}</a>\\n                <span class=\\\"hack ${(reqHack <= myHack ? 'green' : 'red')}\\\">(${reqHack})</span>\\n                ${(shouldBackdoor ? '<span class=\\\"backdoor\\\">[<a>backdoor</a>]</span>' : '')}\\n                ${contracts.map(c => `<span class=\\\"cct\\\" title=\\\"${c}\\\">@</span>`)}\\n            </span>`;\\n        };\\n    let tcommand = x => {\\n        tIn.value = x;\\n        tEv.onChange({ target: tIn });\\n        tEv.onKeyDown({ keyCode: \\\"13\\\", preventDefault: () => 0 });\\n    };\\n\\n    let addSc = (x = s[0], p1 = [\\\"\\\\n\\\"], o = p1.join(\\\"\\\") + fName(x)) => {\\n        for (let i = 0; i < s.length; i++) {\\n            if (p[i] != x) continue;\\n            let p2 = p1.slice();\\n            p2[p2.length - 1] = p2[p2.push(p.slice(i + 1).includes(p[i]) ? \\\"├╴\\\" : \\\"└╴\\\") - 2].replace(\\\"├╴\\\", \\\"│ \\\").replace(\\\"└╴\\\", \\\"  \\\");\\n            o += addSc(s[i], p2);\\n        }\\n        return o;\\n    };\\n    let ordering = (a, b) => {\\n        let d = ns.scan(a).length - ns.scan(b).length; // Sort servers with fewer connections towards the top.\\n        d = d != 0 ? d : serverInfo(b).purchasedByPlayer - serverInfo(a).purchasedByPlayer; // Purchased servers to the very top\\n        d = d != 0 ? d : a.slice(0, 2).toLowerCase().localeCompare(b.slice(0, 2).toLowerCase()); // Hack: compare just the first 2 chars to keep purchased servers in order purchased\\n        return d;\\n    }\\n    for (let i = 0, j; i < s.length; i++)\\n        for (j of ns.scan(s[i]).sort(ordering))\\n            if (!s.includes(j)) s.push(j), p.push(s[i]), r[j] = r[s[i]] + \\\";connect \\\" + j;\\n    tprint(`<div class=\\\"sc new\\\">${addSc()}</div>`);\\n    doc.querySelectorAll(\\\".sc.new .s\\\").forEach(q => q.addEventListener('click', tcommand.bind(null, r[q.childNodes[0].nodeValue])));\\n    doc.querySelectorAll(\\\".sc.new .backdoor\\\").forEach(q => q.addEventListener('click', tcommand.bind(null, r[q.parentNode.childNodes[0].childNodes[0].nodeValue] + \\\";backdoor\\\")));\\n    doc.querySelector(\\\".sc.new\\\").classList['remove'](\\\"new\\\");\\n};\\n\",\"filename\":\"scan.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"scan.js\",\"url\":\"blob:https://danielyxie.github.io/f6754131-ec84-448c-865f-fef02e18a6cb\",\"moduleSequenceNumber\":5407}],\"dependents\":[],\"ramUsage\":4.05,\"server\":\"home\",\"moduleSequenceNumber\":147,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getNsDataThroughFile, formatMoney, formatDuration, disableLogs } from './helpers.js'\\n\\nconst interval = 5000; // Uodate (tick) this often\\nconst minTaskWorkTime = 59000; // Sleeves assigned a new task should stick to it for at least this many milliseconds\\nconst tempFile = '/Temp/sleeve-set-task.txt';\\nconst crimes = ['mug', 'homicide']\\nconst works = ['security', 'field', 'hacking']; // When doing faction work, we prioritize physical work since sleeves tend towards having those stats be highest\\nconst workByFaction = {}\\n\\nlet options;\\nconst argsSchema = [\\n    ['shock-recovery', 0.25], // Set to a number between 0 and 1 to devote that much time to shock recovery\\n    ['crime', ''],\\n    ['aug-budget', 0.1], // Spend up to this much of current cash on augs per tick (Default is high, because these are permanent for the rest of the BN)\\n    ['buy-cooldown', 60 * 1000], // Must wait this may milliseconds before buying more augs for a sleeve\\n    ['min-aug-batch', 20], // Must be able to afford at least this many augs before we pull the trigger (or fewer if buying all remaining augs)\\n];\\n\\nexport function autocomplete(data, _) {\\n    data.flags(argsSchema);\\n    return [];\\n}\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    options = ns.flags(argsSchema);\\n    disableLogs(ns, ['getServerMoneyAvailable']);\\n    if (!crimes.includes(options.crime)) crimes.push(options.crime);\\n    let task = [], lastUpdate = [], lastPurchase = [], availableAugs = [], lastReassign = [];\\n\\n    // Collect info that won't change or that we can track ourselves going forward\\n    let numSleeves;\\n    try {\\n        numSleeves = await getNsDataThroughFile(ns, `ns.sleeve.getNumSleeves()`, '/Temp/sleeve-count.txt');\\n    } catch {\\n        return ns.print(\\\"User does not appear to have access to sleeves. Exiting...\\\");\\n    }\\n    for (let i = 0; i < numSleeves; i++)\\n        availableAugs[i] = null;\\n\\n    while (true) {\\n        let cash = ns.getServerMoneyAvailable(\\\"home\\\") - Number(ns.read(\\\"reserve.txt\\\"));\\n        let budget = cash * options['aug-budget'];\\n        let playerInfo = await getNsDataThroughFile(ns, 'ns.getPlayer()', '/Temp/player-info.txt')\\n        for (let i = 0; i < numSleeves; i++) {\\n            let sleeveStats = ns.sleeve.getSleeveStats(i);\\n            let shock = sleeveStats.shock;\\n            let sync = sleeveStats.sync;\\n            // Manage Augmentations\\n            if (shock == 0 && availableAugs[i] == null) // No augs are available augs until shock is 0\\n                availableAugs[i] = (await getNsDataThroughFile(ns, `ns.sleeve.getSleevePurchasableAugs(${i})`, '/Temp/sleeve-augs.txt')).sort((a, b) => a.cost - b.cost); // list of { name, cost }\\n            if (shock == 0 && availableAugs[i].length > 0) {\\n                const cooldownLeft = Math.max(0, options['buy-cooldown'] - (Date.now() - (lastPurchase[i] || 0)));\\n                const [batchCount, batchCost] = availableAugs[i].reduce(([n, c], aug) => c + aug.cost <= budget ? [n + 1, c + aug.cost] : [n, c], [0, 0]);\\n                const purchaseUpdate = `sleeve ${i} can afford ${batchCount.toFixed(0).padStart(2)}/${availableAugs[i].length.toFixed(0).padEnd(2)} remaining augs (cost ${formatMoney(batchCost)} of ` +\\n                    `${formatMoney(availableAugs[i].reduce((t, aug) => t + aug.cost, 0))}).`;\\n                if (lastUpdate[i] != purchaseUpdate)\\n                    log(ns, `INFO: With budget ${formatMoney(budget)}, ` + (lastUpdate[i] = purchaseUpdate) + ` (Min batch size: ${options['min-aug-batch']}, Cooldown: ${formatDuration(cooldownLeft)})`);\\n                if (cooldownLeft == 0 && batchCount > 0 && ((batchCount >= availableAugs[i].length - 1) || batchCount >= options['min-aug-batch'])) { // Don't require the last aug it's so much more expensive\\n                    let strAction = `Purchase ${batchCount} augmentations for sleeve ${i} at total cost of ${formatMoney(batchCost)}`;\\n                    let toPurchase = availableAugs[i].splice(0, batchCount);\\n                    budget -= batchCost;\\n                    if (await getNsDataThroughFile(ns, JSON.stringify(toPurchase.map(a => a.name)) +\\n                        `.reduce((s, aug) => s && ns.sleeve.purchaseSleeveAug(${i}, aug), true)`, '/Temp/sleeve-purchase.txt'))\\n                        log(ns, `SUCCESS: ${strAction}`, 'success');\\n                    else log(ns, `ERROR: Failed to ${strAction}`, 'error');\\n                    lastPurchase[i] = Date.now();\\n                }\\n            }\\n            // Manage what this sleeve should be doing\\n            let command, designatedTask;\\n            if (sync < 100) { // Synchronize\\n                designatedTask = \\\"synchronize\\\";\\n                command = `ns.sleeve.setToSynchronize(${i})`;\\n                if (task[i] == designatedTask && Date.now() - (lastUpdate[i] ?? 0) > minTaskWorkTime) {\\n                    log(ns, `INFO: Sleeve ${i} is syncing... ${sync.toFixed(2)}%`);\\n                    lastUpdate[i] = Date.now();\\n                }\\n            } else if (shock > 0 && options['shock-recovery'] > 0 && Math.random() < options['shock-recovery']) { // Recover from shock\\n                designatedTask = \\\"recover from shock\\\";\\n                command = `ns.sleeve.setToShockRecovery(${i})`;\\n                if (task[i] == designatedTask && Date.now() - (lastUpdate[i] ?? 0) > minTaskWorkTime) {\\n                    log(ns, `INFO: Sleeve ${i} is recovering from shock... ${shock.toFixed(2)}%`);\\n                    lastUpdate[i] = Date.now();\\n                }\\n            } else if (i == 0 && playerInfo.isWorking && playerInfo.workType == \\\"Working for Faction\\\") { // If player is currently working for faction rep, sleeves 0 shall help him out (only one sleeve can work for a faction)\\n                // TODO: We should be able to borrow logic from work-for-factions.js to have more sleeves work for useful factions / companies\\n                let work = works[workByFaction[playerInfo.currentWorkFactionName] || 0];\\n                designatedTask = `work for faction '${playerInfo.currentWorkFactionName}' (${work})`;\\n                command = `ns.sleeve.setToFactionWork(${i}, '${playerInfo.currentWorkFactionName}', '${work}')`; // TODO: Auto-determine the most productive faction work to do?\\n            } else if (i == 0 && playerInfo.isWorking && playerInfo.workType == \\\"Working for Company\\\") { // If player is currently working for a company rep, sleeves 0 shall help him out (only one sleeve can work for a company)\\n                designatedTask = `work for company '${playerInfo.companyName}'`;\\n                command = `ns.sleeve.setToCompanyWork(${i}, '${playerInfo.companyName}')`;\\n            } else { // Do something productive\\n                let crime = options.crime || (sleeveStats.strength < 100 ? 'mug' : 'homicide');\\n                designatedTask = `commit ${crime}`;\\n                command = `ns.sleeve.setToCommitCrime(${i}, '${crime}')`;\\n            }\\n            // Don't change tasks if we've changed tasks recently\\n            if (Date.now() - (lastReassign[i] || 0) < minTaskWorkTime || task[i] == designatedTask) continue;\\n            // Start doing the specified task\\n            let strAction = `Set sleeve ${i} to ${designatedTask}`;\\n            if (await getNsDataThroughFile(ns, command, tempFile)) {\\n                task[i] = designatedTask;\\n                lastReassign[i] = Date.now();\\n                log(ns, `SUCCESS: ${strAction}`);\\n            } else {\\n                // If working for faction / company, it's possible he current work isn't supported, so try the next one.\\n                if (designatedTask.startsWith('work for faction')) {\\n                    log(ns, `WARN: Failed to ${strAction} - work type may not be supported.`, 'warning');\\n                    workByFaction[playerInfo.currentWorkFactionName] = (workByFaction[playerInfo.currentWorkFactionName] || 0) + 1;\\n                } else\\n                    log(ns, `ERROR: Failed to ${strAction}`, 'error');\\n            }\\n        }\\n        await ns.sleep(interval);\\n    }\\n}\\n\\nfunction log(ns, log, toastStyle, printToTerminal) {\\n    ns.print(log);\\n    if (toastStyle) ns.toast(log, toastStyle);\\n    if (printToTerminal) ns.tprint(log);\\n}\",\"filename\":\"sleeve.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"helpers.js\",\"url\":\"blob:https://danielyxie.github.io/08be2560-7e7a-4eb9-9103-d673ed3475de\",\"moduleSequenceNumber\":142},{\"filename\":\"sleeve.js\",\"url\":\"blob:https://danielyxie.github.io/0343b713-f21a-42ff-a2a6-4a3365161888\",\"moduleSequenceNumber\":264}],\"dependents\":[],\"ramUsage\":6.8,\"server\":\"home\",\"moduleSequenceNumber\":264,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"sleeve.getSleeveStats\",\"cost\":4},{\"type\":\"fn\",\"name\":\"run\",\"cost\":1},{\"type\":\"fn\",\"name\":\"isRunning\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { disableLogs, formatDuration } from './helpers.js'\\n\\nconst argsSchema = [\\n    ['v', false], // Verbose\\n    ['verbose', false],\\n    ['l', false], // Turn all hashes into money\\n    ['liquidate', false],\\n    ['interval', 1000], // Rate at which the program runs and spends hashes\\n    ['spend-on', 'Sell for Money'],\\n    ['spend-on-server', undefined],\\n];\\n\\nconst purchaseOptions = ['Sell for Money', 'Sell for Corporation Funds', 'Exchange for Corporation Research', 'Generate Coding Contract', 'Improve Studying', 'Improve Gym Training'];\\n\\nexport function autocomplete(data, args) {\\n    data.flags(argsSchema);\\n    const lastFlag = args.length > 1 ? args[args.length - 2] : null;\\n    if (lastFlag == \\\"--spend-on\\\") // Provide a couple auto-complete options to facilitate these arguments with spaces in them\\n        return purchaseOptions.map(f => f.replaceAll(\\\" \\\", \\\"_\\\")).sort().concat(purchaseOptions.map(f => `'${f}'`).sort());\\n    return [];\\n}\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    const options = ns.flags(argsSchema);\\n    const verbose = options.v || options.verbose;\\n    const liquidate = options.l || options.liquidate;\\n    const interval = options.interval;\\n    const toBuy = options['spend-on'].replaceAll(\\\"_\\\", \\\" \\\");\\n    const spendOnServer = options['spend-on-server']?.replaceAll(\\\"_\\\", \\\" \\\") ?? undefined;\\n    disableLogs(ns, ['sleep']);\\n    ns.print(`Starting spend-hacknet-hashes.js to ensure no hashes go unspent. Will check in every ${formatDuration(interval)}`);\\n    ns.print(liquidate ? `-l --liquidate mode active! Will spend all hashes on money as soon as possible.` :\\n        `Only spending hashes every when near capacity to avoid wasting them.`);\\n    while (true) {\\n        let capacity = ns.hacknet.hashCapacity() || 0;\\n        let startingHashes = ns.hacknet.numHashes() || 0;\\n        let nodes = ns.hacknet.numNodes();\\n        if (capacity == 0 && nodes > 0)\\n            return ns.print('We have hacknet nodes, not hacknet servers, so spending hashes is not applicable.');\\n\\n        let globalProduction = Array.from({ length: nodes }, (_, i) => ns.hacknet.getNodeStats(i))\\n            .reduce((total, node) => total + node.production, 0);\\n        //ns.print(`Current hacknet production: ${globalProduction.toPrecision(3)}...`);\\n        // Spend hashes before we lose them\\n        let reserve = 10 + globalProduction * interval / 1000; // If we are this far from our capacity, start spending\\n        let success = true;\\n        while (success && ns.hacknet.numHashes() > (liquidate ? 4 : capacity - reserve))\\n            success = ns.hacknet.spendHashes(toBuy, spendOnServer);\\n        if (!success)\\n            ns.print(`Weird, failed to spend hashes. (Have: ${ns.hacknet.numHashes()} Capacity: ${ns.hacknet.hashCapacity()}`);\\n        if (verbose && ns.hacknet.numHashes() < startingHashes)\\n            ns.print(`Spent ${(startingHashes - ns.hacknet.numHashes()).toFixed(0)} hashes` +\\n                (liquidate ? '' : ` to avoid reaching capacity (${capacity})`) + ` at ${globalProduction.toPrecision(3)} hashes per second`);\\n        await ns.sleep(interval);\\n    }\\n}\",\"filename\":\"spend-hacknet-hashes.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"helpers.js\",\"url\":\"blob:https://danielyxie.github.io/c544f2f0-351a-49a1-9dbe-cd7f050fc965\",\"moduleSequenceNumber\":142},{\"filename\":\"spend-hacknet-hashes.js\",\"url\":\"blob:https://danielyxie.github.io/4c236c57-bb2f-49ae-8b03-8c7115f141fe\",\"moduleSequenceNumber\":263}],\"dependents\":[],\"ramUsage\":5.6,\"server\":\"home\",\"moduleSequenceNumber\":263,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"ns\",\"name\":\"hacknet\",\"cost\":4}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getNsDataThroughFile, disableLogs, formatNumberShort, getFilePath, waitForProcessToComplete } from './helpers.js'\\n\\nconst maxCharges = 10000; // Don't bother adding charges beyond this amount (diminishing returns - num charges is ^0.07 )\\n\\n/** @param {NS} ns \\n * Maximizes charge on staney fragments based on current home RAM.\\n * IMPORTANT: You should have no other scripts running on home while you do this. **/\\nexport async function main(ns) {\\n    disableLogs(ns, ['sleep', 'run', 'getServerMaxRam', 'getServerUsedRam'])\\n    while (true) {\\n        let fragments = await getNsDataThroughFile(ns, 'ns.stanek.activeFragments()', '/Temp/stanek-fragments.txt'); //ns.stanek.activeFragments();\\n        for (const fragment of fragments)\\n            ns.print(`Fragment ${String(fragment.id).padStart(2)} at [${fragment.x},${fragment.y}] ` +\\n                `charge num: ${formatNumberShort(fragment.numCharge)} avg: ${formatNumberShort(fragment.avgCharge)}`);\\n        for (const fragment of fragments) {\\n            const threads = Math.floor((ns.getServerMaxRam('home') - ns.getServerUsedRam('home')) / 2.0);\\n            // Only charge if we will not be bringing down the average\\n            if (threads < fragment.avgCharge || fragment.numCharge > maxCharges) continue;\\n            const pid = ns.run(getFilePath('/stanek.js.charge.js'), threads, fragment.x, fragment.y);\\n            await waitForProcessToComplete(ns, pid);\\n        }\\n        await ns.sleep(1000);\\n    }\\n}\",\"filename\":\"stanek.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"helpers.js\",\"url\":\"blob:https://danielyxie.github.io/39ee778a-383f-48d4-a514-ab371a08856f\",\"moduleSequenceNumber\":1093},{\"filename\":\"stanek.js\",\"url\":\"blob:https://danielyxie.github.io/09d7ca08-9e3a-413e-9d2e-f0ad55c79299\",\"moduleSequenceNumber\":4135}],\"dependents\":[],\"ramUsage\":2.8,\"server\":\"home\",\"moduleSequenceNumber\":150,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"run\",\"cost\":1},{\"type\":\"fn\",\"name\":\"isRunning\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    await ns.stanek.charge(ns.args[0], ns.args[1]);\\n}\",\"filename\":\"stanek.js.charge.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2,\"server\":\"home\",\"moduleSequenceNumber\":151,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"stanek.charge\",\"cost\":0.4}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns \\n * Reset all charges without losing the current placement / positioning of fragments **/\\nexport async function main(ns) {\\n    for (const fragment of ns.stanek.activeFragments()) {\\n        const [id, x, y, r] = [fragment.id, fragment.x, fragment.y, fragment.rotation];\\n        ns.stanek.remove(x, y);\\n        ns.stanek.place(x, y, r, id);\\n    }\\n}\",\"filename\":\"stanek.js.reset.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":11.75,\"server\":\"home\",\"moduleSequenceNumber\":152,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"stanek.activeFragments\",\"cost\":5},{\"type\":\"fn\",\"name\":\"stanek.remove\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"stanek.place\",\"cost\":5}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { formatNumberShort, formatMoney, getNsDataThroughFile, getActiveSourceFiles } from './helpers.js'\\n\\nconst argsSchema = [\\n    ['hide-stocks', false],\\n];\\n\\nexport function autocomplete(data, args) {\\n    data.flags(argsSchema);\\n    return [];\\n}\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    const options = ns.flags(argsSchema);\\n    const doc = eval('document');\\n    const hook0 = doc.getElementById('overview-extra-hook-0');\\n    const hook1 = doc.getElementById('overview-extra-hook-1');\\n    let stkSymbols = null;\\n    let dictSourceFiles = await getActiveSourceFiles(ns); // Find out what source files the user has unlocked\\n    let playerInfo = (await getNsDataThroughFile(ns, 'ns.getPlayer()', '/Temp/player-info.txt'));\\n    if (!options['hide-stocks'] && playerInfo.hasTixApiAccess) // Auto-disabled if we do not have the TSK API\\n        stkSymbols = await getNsDataThroughFile(ns, `ns.stock.getSymbols()`, '/Temp/stock-symbols.txt');\\n    // Main stats update loop\\n    while (true) {\\n        try {\\n            const headers = []\\n            const values = [];\\n\\n            if (9 in dictSourceFiles) { // Section not relevant if you don't have access to hacknet servers\\n                const hashes = await getNsDataThroughFile(ns, '[ns.hacknet.numHashes(), ns.hacknet.hashCapacity()]', '/Temp/hash-stats.txt')\\n                if (hashes[1] > 0) {\\n                    headers.push(\\\"Hashes\\\");\\n                    values.push(`${formatNumberShort(hashes[0], 3, 1)}/${formatNumberShort(hashes[1], 3, 1)}`);\\n                }\\n                // Detect and notify the HUD if we are liquidating\\n                if (ns.ps(\\\"home\\\").some(p => p.filename.includes('spend-hacknet-hashes') && (p.args.includes(\\\"--liquidate\\\") || p.args.includes(\\\"-l\\\")))) {\\n                    headers.splice(1, 0, \\\" \\\");\\n                    values.push(\\\"Liquidating\\\");\\n                }\\n            }\\n\\n            if (stkSymbols && !doc.getElementById(\\\"stock-display-1\\\")) { // Don't add stocks if unavailable or the stockmaster HUD is active\\n                const stkPortfolio = await getNsDataThroughFile(ns, JSON.stringify(stkSymbols) +\\n                    `.map(sym => ({ sym, pos: ns.stock.getPosition(sym), ask: ns.stock.getAskPrice(sym), bid: ns.stock.getBidPrice(sym) }))` +\\n                    `.reduce((total, stk) => total + stk.pos[0] * stk.bid + stk.pos[2] * (stk.pos[3] * 2 - stk.ask) -100000 * (stk.pos[0] + stk.pos[2] > 0 ? 1 : 0), 0)`,\\n                    '/Temp/stock-portfolio-value.txt');\\n                if (stkPortfolio > 0) { // Don't bother showing a section for stock if we aren't holding anything\\n                    headers.push(\\\"Stock\\\");\\n                    values.push(formatMoney(stkPortfolio));\\n                }\\n            }\\n            headers.push(\\\"ScrInc\\\");\\n            values.push(formatMoney(ns.getScriptIncome()[0], 3, 2) + '/sec');\\n\\n            headers.push(\\\"ScrExp\\\");\\n            values.push(formatNumberShort(ns.getScriptExpGain(), 3, 2) + '/sec');\\n\\n            if (2 in dictSourceFiles) { // Gang income is only relevant once gangs are unlocked\\n                const gangInfo = await getNsDataThroughFile(ns, 'ns.gang.inGang() ? ns.gang.getGangInformation() : false', '/Temp/gang-stats.txt');\\n                if (gangInfo !== false) {\\n                    headers.push(\\\"Gang\\\");\\n                    values.push(formatMoney(gangInfo.moneyGainRate * 5, 3, 2) + '/sec');\\n                }\\n            }\\n\\n            const karma = ns.heart.break();\\n            if (karma <= -9) {\\n                headers.push(\\\"Karma\\\");\\n                values.push(formatNumberShort(karma, 3, 2));\\n            }\\n\\n            const sharePower = ns.getSharePower();\\n            if (sharePower > 1) {\\n                headers.push(\\\"Share Pwr\\\");\\n                values.push(formatNumberShort(sharePower, 3, 2));\\n            }\\n\\n            hook0.innerText = headers.join(\\\" \\\\n\\\");\\n            hook1.innerText = values.join(\\\"\\\\n\\\");\\n        } catch (err) { // Might run out of ram from time to time, since we use it dynamically\\n            ns.print(\\\"ERROR: Update Skipped: \\\" + String(err));\\n        }\\n        await ns.sleep(1000);\\n    }\\n}\",\"filename\":\"stats.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"helpers.js\",\"url\":\"blob:https://danielyxie.github.io/4600800f-8b8d-4782-a132-7824bee436fa\",\"moduleSequenceNumber\":142},{\"filename\":\"stats.js\",\"url\":\"blob:https://danielyxie.github.io/8143ec3c-0616-4028-9231-fcaa293c884c\",\"moduleSequenceNumber\":260}],\"dependents\":[],\"ramUsage\":3.3,\"server\":\"home\",\"moduleSequenceNumber\":260,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"ps\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getScriptIncome\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getScriptExpGain\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getSharePower\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"run\",\"cost\":1},{\"type\":\"fn\",\"name\":\"isRunning\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {\\n    formatMoney, formatNumberShort, formatDuration,\\n    getNsDataThroughFile, runCommand, getActiveSourceFiles, tryGetBitNodeMultipliers\\n} from './helpers.js'\\n\\nlet disableShorts = false;\\nlet commission = 100000; // Buy/sell commission. Expected profit must exceed this to buy anything.\\nlet totalProfit = 0.0; // We can keep track of how much we've earned since start.\\nlet lastLog = \\\"\\\"; // We update faster than the stock-market ticks, but we don't log anything unless there's been a change\\nlet allStockSymbols = []; // Stores the set of all symbols collected at start\\nlet mock = false; // If set to true, will \\\"mock\\\" buy/sell but not actually buy/sell anythingorecast\\nlet noisy = false; // If set to true, tprints and announces each time stocks are bought/sold\\nlet dictSourceFiles; // Populated at init, a dictionary of source-files the user has access to, and their level\\n// Pre-4S configuration (influences how we play the stock market before we have 4S data, after which everything's fool-proof)\\nlet showMarketSummary = false;  // If set to true, will always generate and display the pre-4s forecast table in a separate tail window\\nlet minTickHistory; // This much history must be gathered before we will offer a stock forecast.\\nlet longTermForecastWindowLength; // This much history will be used to determine the historical probability of the stock (so long as no inversions are detected)\\nlet nearTermForecastWindowLength; // This much history will be used to detect recent negative trends and act on them immediately.\\n// The following pre-4s constants are hard-coded (not configurable via command line) but may require tweaking\\nconst marketCycleLength = 75; // Every this many ticks, all stocks have a 45% chance of \\\"reversing\\\" their probability. Something we must detect and act on quick to not lose profits.\\nconst maxTickHistory = 151; // This much history will be kept for purposes of detemining volatility and perhaps one day pinpointing the market cycle tick\\nconst inversionDetectionTolerance = 0.10; // If the near-term forecast is within this distance of (1 - long-term forecast), consider it a potential \\\"inversion\\\"\\nconst inversionLagTolerance = 5; // An inversion is \\\"trusted\\\" up to this many ticks after the normal nearTermForecastWindowLength expected detection time\\n// (Note: 33 total stocks * 45% inversion chance each cycle = ~15 expected inversions per cycle)\\n// The following pre-4s values are set during the lifetime of the program\\nlet marketCycleDetected = false; // We should not make risky purchasing decisions until the stock market cycle is detected. This can take a long time, but we'll be thanked\\nlet detectedCycleTick = 0; // This will be reset to zero once we've detected the market cycle point.\\nlet inversionAgreementThreshold = 6; // If this many stocks are detected as being in an \\\"inversion\\\", consider this the stock market cycle point\\nconst expectedTickTime = 6000;\\nconst catchUpTickTime = 4000;\\nlet lastTick = 0;\\nlet sleepInterval = 1000;\\n\\n\\nconst argsSchema = [\\n    ['l', false], // Stop any other running stockmaster.js instances and sell all stocks\\n    ['liquidate', false],\\n    ['mock', false], // If set to true, will \\\"mock\\\" buy/sell but not actually buy/sell anything\\n    ['noisy', false], // If set to true, tprints and announces each time stocks are bought/soldgetHostnames\\n    ['disable-shorts', false], // If set to true, will \\\"mock\\\" buy/sell but not actually buy/sell anything\\n    ['reserve', 0], // A fixed amount of money to not spend\\n    ['fracB', 0.4], // Fraction of assets to have as liquid before we consider buying more stock\\n    ['fracH', 0.4], // Fraction of assets to retain as cash in hand when buying\\n    ['buy-threshold', 0.0005], // Buy only stocks forecasted to earn better than a 0.01% return (1 Basis Point)\\n    ['sell-threshold', 0], // Sell stocks forecasted to earn less than this return (default 0% - which happens when prob hits 50% or worse)\\n    ['diversification', 0.34], // Before we have 4S data, we will not hold more than this fraction of our portfolio as a single stock\\n    ['disableHud', false], // Disable showing stock value in the HUD panel\\n    // The following settings are related only to tweaking pre-4s stock-market logic\\n    ['show-pre-4s-forecast', false], // If set to true, will always generate and display the pre-4s forecast (if false, it's only shown while we hold no stocks)\\n    ['show-market-summary', false], // Same effect as \\\"show-pre-4s-forecast\\\", this market summary has become so informative, it's valuable even with 4s\\n    ['pre-4s-buy-threshold-probability', 0.15], // Before we have 4S data, only buy stocks whose probability is more than this far away from 0.5, to account for imprecision\\n    ['pre-4s-buy-threshold-return', 0.0015], // Before we have 4S data, Buy only stocks forecasted to earn better than this return (default 0.25% or 25 Basis Points)\\n    ['pre-4s-sell-threshold-return', 0.0005], // Before we have 4S data, Sell stocks forecasted to earn less than this return (default 0.15% or 15 Basis Points)\\n    ['pre-4s-min-tick-history', 21], // This much history must be gathered before we will use pre-4s stock forecasts to make buy/sell decisions. (Default 21)\\n    ['pre-4s-forecast-window', 51], // This much history will be used to determine the historical probability of the stock (so long as no inversions are detected) (Default 76)\\n    ['pre-4s-inversion-detection-window', 10], // This much history will be used to detect recent negative trends and act on them immediately. (Default 10)\\n    ['pre-4s-min-blackout-window', 10], // Do not make any new purchases this many ticks before the detected stock market cycle tick, to avoid buying a position that reverses soon after\\n    ['pre-4s-minimum-hold-time', 10], // A recently bought position must be held for this long before selling, to avoid rash decisions due to noise after a fresh market cycle. (Default 10)\\n];\\n\\nexport function autocomplete(data, args) {\\n    data.flags(argsSchema);\\n    return [];\\n}\\n\\n/** Requires access to the TIX API. Purchases access to the 4S Mkt Data API as soon as it can \\n * @param {NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog(\\\"ALL\\\");\\n    // Extract various options from the args (globals, purchasing decision factors, pre-4s factors)\\n    const options = ns.flags(argsSchema);\\n    mock = options.mock;\\n    noisy = options.noisy;\\n    const fracB = options.fracB;\\n    const fracH = options.fracH;\\n    const diversification = options.diversification;\\n    const disableHud = options.disableHud || options.liquidate || options.mock;\\n    disableShorts = options['disable-shorts'];\\n    const pre4sBuyThresholdProbability = options['pre-4s-buy-threshold-probability'];\\n    const pre4sMinBlackoutWindow = options['pre-4s-min-blackout-window'] || 1;\\n    const pre4sMinHoldTime = options['pre-4s-minimum-hold-time'] || 0;\\n    minTickHistory = options['pre-4s-min-tick-history'] || 21;\\n    nearTermForecastWindowLength = options['pre-4s-inversion-detection-window'] || 10;\\n    longTermForecastWindowLength = options['pre-4s-forecast-window'] || (marketCycleLength + 1);\\n    showMarketSummary = options['show-pre-4s-forecast'] || options['show-market-summary'];\\n    // Other global values must be reset at start lest they be left in memory from a prior run\\n    lastTick = 0, totalProfit = 0, lastLog = \\\"\\\", marketCycleDetected = false, detectedCycleTick = 0, inversionAgreementThreshold = 6;\\n    let corpus = 0, myStocks = [], allStocks = [];\\n\\n    if (!ns.getPlayer().hasTixApiAccess) // You cannot use the stockmaster until you have API access\\n        return log(ns, \\\"ERROR: You have to buy stock market access and API access before you can run this script!\\\", true);\\n\\n    if (options.l || options.liquidate) // If given the \\\"liquidate\\\" command, try to kill the version of ourself trading in stocks\\n        await runCommand(ns, `ns.ps().filter(proc => proc.filename == '${ns.getScriptName()}' && !proc.args.includes('-l') && !proc.args.includes('--liquidate'))` +\\n            `.forEach(proc => ns.kill(proc.pid))`, '/Temp/kill-script.js');\\n\\n    dictSourceFiles = await getActiveSourceFiles(ns); // Find out what source files the user has unlocked\\n    if (!disableShorts && (!(8 in dictSourceFiles) || dictSourceFiles[8] < 2)) {\\n        log(ns, \\\"INFO: Shorting stocks has been disabled (you have not yet unlocked access to shorting)\\\");\\n        disableShorts = true;\\n    }\\n\\n    allStockSymbols = await getNsDataThroughFile(ns, 'ns.stock.getSymbols()', '/Temp/stock-symbols.txt');\\n    allStocks = await initAllStocks(ns, allStockSymbols);\\n\\n    if (options.l || options.liquidate) {\\n        await liquidate(ns, allStockSymbols); // Sell all stocks\\n        return;\\n    } else if (!options.mock) { // If we're not liquidating or in mock mode, we MUST not run two stockmasters at once, or chaos will ensue\\n        let otherStockmasters = (await getNsDataThroughFile(ns, `ns.ps()`, '/Temp/process-list.txt')).filter(p => p.filename == ns.getScriptName()); // TODO: For bonus points, check all servers\\n        otherStockmasters = otherStockmasters.filter(p => JSON.stringify(ns.args) != JSON.stringify(p.args)); // Don't detect ourselves of course.\\n        if (otherStockmasters.some(p => !p.args.includes(\\\"--mock\\\"))) // Exception, feel free to run multiple stockmasters in mock mode\\n            return log(ns, `ERROR: Another version of ${ns.getScriptName()} is already running with different args. Running twice is a bad idea!`, true, 'error');\\n    }\\n\\n    let bitnodeMults;\\n    if (5 in dictSourceFiles) bitnodeMults = await tryGetBitNodeMultipliers(ns);\\n    // Assume bitnode mults are 1 if user doesn't have this API access yet\\n    if (!bitnodeMults) bitnodeMults = { FourSigmaMarketDataCost: 1, FourSigmaMarketDataApiCost: 1 };\\n\\n    if (showMarketSummary) await launchSummaryTail(ns); // Opens a separate script / window to continuously display the Pre4S forecast\\n\\n    let hudElement = null;\\n    if (!disableHud) {\\n        hudElement = initializeHud();\\n        ns.atExit(() => hudElement.parentElement.parentElement.parentElement.removeChild(hudElement.parentElement.parentElement));\\n    }\\n\\n    log(ns, `Welcome! Please note: all stock purchases will initially result in a Net (unrealized) Loss. This is not only due to commission, but because each stock has a 'spread' (difference in buy price and sell price). ` +\\n        `This script is designed to buy stocks that are most likely to surpass that loss and turn a profit, but it will take a few minutes to see the progress.\\\\n\\\\n` +\\n        `If you choose to stop the script, make sure you SELL all your stocks (can go 'run ${ns.getScriptName()} --liquidate') to get your money back.\\\\n\\\\nGood luck!\\\\n~ Insight\\\\n\\\\n`)\\n\\n    while (true) {\\n        const playerStats = ns.getPlayer();\\n        const pre4s = !playerStats.has4SDataTixApi;\\n        corpus = await refresh(ns, playerStats, allStocks, myStocks);\\n        if (pre4s && !mock && await tryGet4SApi(ns, playerStats, bitnodeMults, corpus, allStockSymbols))\\n            continue; // Start the loop over if we just bought 4S API access\\n        // Be more conservative with our decisions if we don't have 4S data\\n        const thresholdToBuy = pre4s ? options['pre-4s-buy-threshold-return'] : options['buy-threshold'];\\n        const thresholdToSell = pre4s ? options['pre-4s-sell-threshold-return'] : options['sell-threshold'];\\n        if (myStocks.length > 0)\\n            doStatusUpdate(ns, allStocks, myStocks, hudElement);\\n        if (pre4s && allStocks[0].priceHistory.length < minTickHistory) {\\n            log(ns, `Building a history of stock prices (${allStocks[0].priceHistory.length}/${minTickHistory})...`);\\n            await ns.sleep(sleepInterval);\\n            continue;\\n        }\\n\\n        // Sell forecasted-to-underperform shares (worse than some expected return threshold)\\n        let sales = 0;\\n        for (let stk of myStocks) {\\n            if (stk.absReturn() <= thresholdToSell || stk.bullish() && stk.sharesShort > 0 || stk.bearish() && stk.sharesLong > 0) {\\n                if (pre4s && stk.ticksHeld < pre4sMinHoldTime) {\\n                    if (!stk.warnedBadPurchase) log(ns, `WARNING: Thinking of selling ${stk.sym} with ER ${formatBP(stk.absReturn())}, but holding out as it was purchased just ${stk.ticksHeld} ticks ago...`);\\n                    stk.warnedBadPurchase = true; // Hack to ensure we don't spam this warning\\n                } else {\\n                    sales += await doSellAll(ns, stk);\\n                    stk.warnedBadPurchase = false;\\n                }\\n            }\\n        }\\n        if (sales > 0) continue; // If we sold anything, loop immediately (no need to sleep) and refresh stats immediately before making purchasing decisions.\\n\\n        let cash = playerStats.money - options['reserve'] - Number(ns.read(\\\"reserve.txt\\\") || 0);\\n        let liquidity = cash / corpus;\\n        // If we haven't gone above a certain liquidity threshold, don't attempt to buy more stock\\n        // Avoids death-by-a-thousand-commissions before we get super-rich, stocks are capped, and this is no longer an issue\\n        // BUT may mean we miss striking while the iron is hot while waiting to build up more funds.\\n        if (liquidity > fracB) {\\n            // If we haven't detected the market cycle (or haven't detected it reliably), assume it might be quite soon and restrict bets to those that can turn a profit in the very-near term.\\n            const estTick = Math.max(detectedCycleTick, marketCycleLength - (!marketCycleDetected ? 5 : inversionAgreementThreshold <= 8 ? 15 : inversionAgreementThreshold <= 10 ? 30 : marketCycleLength));\\n            // Buy shares with cash remaining in hand if exceeding some buy threshold. Prioritize targets whose expected return will cover the ask/bit spread the soonest\\n            for (const stk of allStocks.sort(purchaseOrder)) {\\n                // Do not purchase a stock if it is not forecasted to recover from the ask/bid spread before the next market cycle and potential probability inversion\\n                if (stk.blackoutWindow() >= marketCycleLength - estTick) continue;\\n                if (pre4s && (Math.max(pre4sMinHoldTime, pre4sMinBlackoutWindow) >= marketCycleLength - estTick)) continue;\\n                // Compute the cash we have to spend (such that spending it all on stock would bring us down to a liquidity of fracH)\\n                let budget = cash - (fracH * corpus);\\n                if (budget <= 0) break; // Break if we are out of money (i.e. from prior purchases)\\n                // Skip if we already own all possible shares in this stock, or if the expected return is below our threshold, or if shorts are disabled and stock is bearish\\n                if (stk.ownedShares() == stk.maxShares || stk.absReturn() <= thresholdToBuy || (disableShorts && stk.bearish())) continue;\\n                // If pre-4s, do not purchase any stock whose last inversion was too recent, or whose probability is too close to 0.5\\n                if (pre4s && (stk.lastInversion < minTickHistory || Math.abs(stk.prob - 0.5) < pre4sBuyThresholdProbability)) continue;\\n\\n                // Enforce diversification - don't hold more than x% of our portfolio as a single stock (as corpus increases, this naturally stops being a limiter)\\n                budget = Math.min(budget, (1 - fracH) * corpus * diversification - stk.positionValue())\\n                let purchasePrice = stk.bullish() ? stk.ask_price : stk.bid_price; // Depends on whether we will be buying a long or short position\\n                let affordableShares = Math.floor((budget - commission) / purchasePrice);\\n                let numShares = Math.min(stk.maxShares - stk.ownedShares(), affordableShares);\\n                if (numShares <= 0) continue;\\n                // Don't buy fewer shares than can beat the comission before the next stock market cycle (after covering the spread), lest the position reverse before we break-even.\\n                let ticksBeforeCycleEnd = marketCycleLength - estTick - stk.timeToCoverTheSpread();\\n                if (ticksBeforeCycleEnd < 1) continue; // We're cutting it too close to the market cycle, position might reverse before we break-even on commission\\n                let estEndOfCycleValue = numShares * purchasePrice * ((stk.absReturn() + 1) ** ticksBeforeCycleEnd - 1); // Expected difference in purchase price and value at next market cycle end\\n                if (estEndOfCycleValue <= 2 * commission)\\n                    log(ns, `Despite attractive ER of ${formatBP(stk.absReturn())}, ${stk.sym} was not bought. Budget: ${formatMoney(budget)} can only buy ${numShares} shares @ ${formatMoney(purchasePrice)}. ` +\\n                        `Given an estimated ${marketCycleLength - estTick} ticks left in market cycle, less ${stk.timeToCoverTheSpread().toFixed(1)} ticks to cover the spread (${(stk.spread_pct * 100).toFixed(2)}%), ` +\\n                        `remaining ${ticksBeforeCycleEnd.toFixed(1)} ticks would only generate ${formatMoney(estEndOfCycleValue)}, which is less than 2x commission (${formatMoney(2 * commission, 3)})`);\\n                else\\n                    cash -= await doBuy(ns, stk, numShares);\\n            }\\n        }\\n        await ns.sleep(sleepInterval);\\n    }\\n}\\n\\n/* A sorting function to put stocks in the order we should prioritize investing in them */\\nlet purchaseOrder = (a, b) => (Math.ceil(a.timeToCoverTheSpread()) - Math.ceil(b.timeToCoverTheSpread())) || (b.absReturn() - a.absReturn());\\n\\n/* Generic helper for dodging the hefty RAM requirements of stock functions by spawning a temporary script to collect info for us. */\\nlet getStockInfoDict = async (ns, stockFuncion) => await getNsDataThroughFile(ns,\\n    `Object.fromEntries(${JSON.stringify(allStockSymbols)}.map(sym => [sym, ns.stock.${stockFuncion}(sym)]))`, `/Temp/stock-${stockFuncion}.txt`);\\n\\n/** @param {NS} ns **/\\nasync function initAllStocks(ns, allStockSymbols) {\\n    let dictMaxShares = await getStockInfoDict(ns, 'getMaxShares'); // Only need to get this once, it never changes\\n    return allStockSymbols.map(s => ({\\n        sym: s,\\n        maxShares: dictMaxShares[s], // Value never changes once retrieved\\n        expectedReturn: function () { // How much holdings are expected to appreciate (or depreciate) in the future\\n            // To add conservatism to pre-4s estimates, we reduce the probability by 1 standard deviation without crossing the midpoint\\n            let normalizedProb = (this.prob - 0.5);\\n            let conservativeProb = normalizedProb < 0 ? Math.min(0, normalizedProb + this.probStdDev) : Math.max(0, normalizedProb - this.probStdDev);\\n            return this.vol * conservativeProb;\\n        },\\n        absReturn: function () { return Math.abs(this.expectedReturn()); }, // Appropriate to use when can just as well buy a short position as a long position\\n        bullish: function () { return this.prob > 0.5 },\\n        bearish: function () { return !this.bullish(); },\\n        ownedShares: function () { return this.sharesLong + this.sharesShort; },\\n        owned: function () { return this.ownedShares() > 0; },\\n        positionValueLong: function () { return this.sharesLong * this.bid_price; },\\n        positionValueShort: function () { return this.sharesShort * (2 * this.boughtPriceShort - this.ask_price); }, // Shorts work a bit weird\\n        positionValue: function () { return this.positionValueLong() + this.positionValueShort(); },\\n        // How many stock market ticks must occur at the current expected return before we regain the value lost by the spread between buy and sell prices.\\n        // This can be derived by taking the compound interest formula (future = current * (1 + expected_return) ^ n) and solving for n\\n        timeToCoverTheSpread: function () { return Math.log(this.ask_price / this.bid_price) / Math.log(1 + this.absReturn()); },\\n        // We should not buy this stock within this many ticks of a Market cycle, or we risk being forced to sell due to a probability inversion, and losing money due to the spread\\n        blackoutWindow: function () { return Math.ceil(this.timeToCoverTheSpread()); },\\n        // Pre-4s properties used for forecasting\\n        priceHistory: [],\\n        lastInversion: 0,\\n    }));\\n}\\n\\n/** @param {NS} ns **/\\nasync function refresh(ns, playerStats, allStocks, myStocks) {\\n    const has4s = playerStats.has4SDataTixApi;\\n    let corpus = playerStats.money;\\n\\n    // Dodge hefty RAM requirements by spawning a sequence of temporary scripts to collect info for us one function at a time\\n    const dictAskPrices = await getStockInfoDict(ns, 'getAskPrice');\\n    const dictBidPrices = await getStockInfoDict(ns, 'getBidPrice');\\n    const dictVolatilities = !has4s ? null : await getStockInfoDict(ns, 'getVolatility');\\n    const dictForecasts = !has4s ? null : await getStockInfoDict(ns, 'getForecast');\\n    const dictPositions = mock ? null : await getStockInfoDict(ns, 'getPosition');\\n    const ticked = allStocks.some(stk => stk.ask_price != dictAskPrices[stk.sym]); // If any price has changed since our last update, the stock market has \\\"ticked\\\"\\n\\n    if (ticked) {\\n        if (Date.now() - lastTick < expectedTickTime - sleepInterval) {\\n            if (Date.now() - lastTick < catchUpTickTime - sleepInterval) {\\n                let changedPrices = allStocks.filter(stk => stk.ask_price != dictAskPrices[stk.sym]);\\n                log(ns, `WARNING: Detected a stock market tick after only ${formatDuration(Date.now() - lastTick)}, but expected ~${formatDuration(expectedTickTime)}. ` +\\n                    (changedPrices.length >= 33 ? '(All stocks updated)' : `The following ${changedPrices.length} stock prices changed: ${changedPrices.map(stk =>\\n                        `${stk.sym} ${formatMoney(stk.ask_price)} -> ${formatMoney(dictAskPrices[stk.sym])}`).join(\\\", \\\")}`), false, 'warning');\\n            } else\\n                log(ns, `INFO: Detected a rapid stock market tick (${formatDuration(Date.now() - lastTick)}), likely to make up for lag / offline time.`)\\n        }\\n        lastTick = Date.now()\\n    }\\n\\n    myStocks.length = 0;\\n    for (const stk of allStocks) {\\n        const sym = stk.sym;\\n        stk.ask_price = dictAskPrices[sym]; // The amount we would pay if we bought the stock (higher than 'price')\\n        stk.bid_price = dictBidPrices[sym]; // The amount we would recieve if we sold the stock (lower than 'price')\\n        stk.spread = stk.ask_price - stk.bid_price;\\n        stk.spread_pct = stk.spread / stk.ask_price; // The percentage of value we lose just by buying the stock\\n        stk.price = (stk.ask_price + stk.bid_price) / 2; // = ns.stock.getPrice(sym);\\n        stk.vol = has4s ? dictVolatilities[sym] : stk.vol;\\n        stk.prob = has4s ? dictForecasts[sym] : stk.prob;\\n        stk.probStdDev = has4s ? 0 : stk.probStdDev; // Standard deviation around the est. probability\\n        // Update our current portfolio of owned stock\\n        let [priorLong, priorShort] = [stk.sharesLong, stk.sharesShort];\\n        stk.position = mock ? null : dictPositions[sym];\\n        stk.sharesLong = mock ? (stk.sharesLong || 0) : stk.position[0];\\n        stk.boughtPrice = mock ? (stk.boughtPrice || 0) : stk.position[1];\\n        stk.sharesShort = mock ? (stk.shares_short || 0) : stk.position[2];\\n        stk.boughtPriceShort = mock ? (stk.boughtPrice_short || 0) : stk.position[3];\\n        corpus += stk.positionValue();\\n        if (stk.owned()) myStocks.push(stk); else stk.ticksHeld = 0;\\n        if (ticked) // Increment ticksHeld, or reset it if we have no position in this stock or reversed our position last tick.\\n            stk.ticksHeld = !stk.owned() || (priorLong > 0 && stk.sharesLong == 0) || (priorShort > 0 && stk.sharesShort == 0) ? 0 : 1 + (stk.ticksHeld || 0);\\n    }\\n    if (ticked) await updateForecast(ns, allStocks, has4s); // Logic below only required on market tick\\n    return corpus;\\n}\\n\\n// Historical probability can be inferred from the number of times the stock was recently observed increasing over the total number of observations\\nconst forecast = history => history.reduce((ups, price, idx) => idx == 0 ? 0 : (history[idx - 1] > price ? ups + 1 : ups), 0) / (history.length - 1);\\n// An \\\"inversion\\\" can be detected if two probabilities are far enough apart and are within \\\"tolerance\\\" of p1 being equal to 1-p2\\nconst tol2 = inversionDetectionTolerance / 2;\\nconst detectInversion = (p1, p2) => ((p1 >= 0.5 + tol2) && (p2 <= 0.5 - tol2) && p2 <= (1 - p1) + inversionDetectionTolerance)\\n        /* Reverse Condition: */ || ((p1 <= 0.5 - tol2) && (p2 >= 0.5 + tol2) && p2 >= (1 - p1) - inversionDetectionTolerance);\\n\\n/** @param {NS} ns **/\\nasync function updateForecast(ns, allStocks, has4s) {\\n    const currentHistory = allStocks[0].priceHistory.length;\\n    const prepSummary = showMarketSummary || mock || (!has4s && (currentHistory < minTickHistory || allStocks.filter(stk => stk.owned()).length == 0)); // Decide whether to display the market summary table.\\n    const inversionsDetected = []; // Keep track of individual stocks whose probability has inverted (45% chance of happening each \\\"cycle\\\")\\n    detectedCycleTick = (detectedCycleTick + 1) % marketCycleLength; // Keep track of stock market cycle (which occurs every 75 ticks)\\n    for (const stk of allStocks) {\\n        stk.priceHistory.unshift(stk.price);\\n        if (stk.priceHistory.length > maxTickHistory) // Limit the rolling window size\\n            stk.priceHistory.splice(maxTickHistory, 1);\\n        // Volatility is easy - the largest observed % movement in a single tick\\n        if (!has4s) stk.vol = stk.priceHistory.reduce((max, price, idx) => Math.max(max, idx == 0 ? 0 : Math.abs(stk.priceHistory[idx - 1] - price) / price), 0);\\n        // We want stocks that have the best expected return, averaged over a long window for greater precision, but the game will occasionally invert probabilities\\n        // (45% chance every 75 updates), so we also compute a near-term forecast window to allow for early-detection of inversions so we can ditch our position.\\n        stk.nearTermForecast = forecast(stk.priceHistory.slice(0, nearTermForecastWindowLength));\\n        let preNearTermWindowProb = forecast(stk.priceHistory.slice(nearTermForecastWindowLength)); // Used to detect the probability before the potential inversion event.\\n        // Detect whether it appears as though the probability of this stock has recently undergone an inversion (i.e. prob => 1 - prob)\\n        stk.possibleInversionDetected = has4s ? detectInversion(stk.prob, stk.lastTickProbability || stk.prob) : detectInversion(preNearTermWindowProb, stk.nearTermForecast);\\n        stk.lastTickProbability = stk.prob;\\n        if (stk.possibleInversionDetected) inversionsDetected.push(stk);\\n    }\\n    // Detect whether our auto-detected \\\"stock market cycle\\\" timing should be adjusted based on the number of potential inversions observed\\n    let summary = \\\"\\\";\\n    if (inversionsDetected.length > 0) {\\n        summary += `${inversionsDetected.length} Stocks appear to be reversing their outlook: ${inversionsDetected.map(s => s.sym).join(', ')} (threshold: ${inversionAgreementThreshold})\\\\n`;\\n        if (inversionsDetected.length >= inversionAgreementThreshold && (has4s || currentHistory >= minTickHistory)) { // We believe we have detected the stock market cycle!\\n            const newPredictedCycleTick = has4s ? 0 : nearTermForecastWindowLength; // By the time we've detected it, we're this many ticks past the cycle start\\n            if (detectedCycleTick != newPredictedCycleTick)\\n                log(ns, `Threshold for changing predicted market cycle met (${inversionsDetected.length} >= ${inversionAgreementThreshold}). ` +\\n                    `Changing current market tick from ${detectedCycleTick} to ${newPredictedCycleTick}.`);\\n            marketCycleDetected = true;\\n            detectedCycleTick = newPredictedCycleTick;\\n            // Don't adjust this in the future unless we see another day with as much or even more agreement (capped at 14, it seems sometimes our cycles get out of sync with\\n            // actual cycles and we need to reset our clock even after previously determining the cycle with great certainty.)\\n            inversionAgreementThreshold = Math.max(14, inversionsDetected.length);\\n        }\\n    }\\n    // Act on any inversions (if trusted), compute the probability, and prepare the stock summary\\n    for (const stk of allStocks) {\\n        // Don't \\\"trust\\\" (act on) a detected inversion unless it's near the time when we're capable of detecting market cycle start. Avoids most false-positives.\\n        if (stk.possibleInversionDetected && (has4s && detectedCycleTick == 0 ||\\n            (!has4s && (detectedCycleTick > nearTermForecastWindowLength / 2 - 1) && (detectedCycleTick <= nearTermForecastWindowLength + inversionLagTolerance))))\\n            stk.lastInversion = detectedCycleTick; // If we \\\"trust\\\" a probability inversion has occurred, probability will be calculated based on only history since the last inversion.\\n        else\\n            stk.lastInversion++;\\n        // Only take the stock history since after the last inversion to compute the probability of the stock.\\n        const probWindowLength = Math.min(longTermForecastWindowLength, stk.lastInversion);\\n        stk.longTermForecast = forecast(stk.priceHistory.slice(0, probWindowLength));\\n        if (!has4s) {\\n            stk.prob = stk.longTermForecast;\\n            stk.probStdDev = Math.sqrt((stk.prob * (1 - stk.prob)) / probWindowLength);\\n        }\\n        const signalStrength = 1 + (stk.bullish() ? (stk.nearTermForecast > stk.prob ? 1 : 0) + (stk.prob > 0.8 ? 1 : 0) : (stk.nearTermForecast < stk.prob ? 1 : 0) + (stk.prob < 0.2 ? 1 : 0));\\n        if (prepSummary) { // Example: AERO  ++   Prob: 54% (t51: 54%, t10: 67%) tLast⇄:190 Vol:0.640% ER: 2.778BP Spread:1.784% ttProfit: 65 Pos: 14.7M long  (held 189 ticks)\\n            stk.debugLog = `${stk.sym.padEnd(5, ' ')} ${(stk.bullish() ? '+' : '-').repeat(signalStrength).padEnd(3)} ` +\\n                `Prob:${(stk.prob * 100).toFixed(0).padStart(3)}% (t${probWindowLength.toFixed(0).padStart(2)}:${(stk.longTermForecast * 100).toFixed(0).padStart(3)}%, ` +\\n                `t${Math.min(stk.priceHistory.length, nearTermForecastWindowLength).toFixed(0).padStart(2)}:${(stk.nearTermForecast * 100).toFixed(0).padStart(3)}%) ` +\\n                `tLast⇄:${(stk.lastInversion + 1).toFixed(0).padStart(3)} Vol:${(stk.vol * 100).toFixed(2)}% ER:${formatBP(stk.expectedReturn()).padStart(8)} ` +\\n                `Spread:${(stk.spread_pct * 100).toFixed(2)}% ttProfit:${stk.blackoutWindow().toFixed(0).padStart(3)}`;\\n            if (stk.owned()) stk.debugLog += ` Pos: ${formatNumberShort(stk.ownedShares(), 3, 1)} (${stk.ownedShares() == stk.maxShares ? 'max' :\\n                ((100 * stk.ownedShares() / stk.maxShares).toFixed(0).padStart(2) + '%')}) ${stk.sharesLong > 0 ? 'long ' : 'short'} (held ${stk.ticksHeld} ticks)`;\\n            if (stk.possibleInversionDetected) stk.debugLog += ' ⇄⇄⇄';\\n        }\\n    }\\n    // Print a summary of stocks as of this most recent tick (if enabled)\\n    if (prepSummary) {\\n        summary += `Market day ${detectedCycleTick + 1}${marketCycleDetected ? '' : '?'} of ${marketCycleLength} (${marketCycleDetected ? (100 * inversionAgreementThreshold / 19).toPrecision(2) : '0'}% certain) ` +\\n            `Current Stock Summary and Pre-4S Forecasts (by best payoff-time):\\\\n` + allStocks.sort(purchaseOrder).map(s => s.debugLog).join(\\\"\\\\n\\\")\\n        if (showMarketSummary) await updateForecastFile(ns, summary); else log(ns, summary);\\n    }\\n    // Write out a file of stock probabilities so that other scripts can make use of this (e.g. hack orchestrator can manipulate the stock market)\\n    await ns.write('/Temp/stock-probabilities.txt', JSON.stringify(Object.fromEntries(\\n        allStocks.map(stk => [stk.sym, { prob: stk.prob, sharesLong: stk.sharesLong, sharesShort: stk.sharesShort }]))), \\\"w\\\");\\n}\\n\\n// Helpers to display the stock market summary in a separate window.\\nlet summaryFile = '/Temp/stockmarket-summary.txt';\\nlet updateForecastFile = async (ns, summary) => await ns.write(summaryFile, summary, 'w');\\nlet launchSummaryTail = async ns => {\\n    let summaryTailScript = summaryFile.replace('.txt', '-tail.js');\\n    if (await getNsDataThroughFile(ns, `ns.scriptRunning('${summaryTailScript}', ns.getHostname())`, '/Temp/stockmarket-summary-is-running.txt'))\\n        return;\\n    //await getNsDataThroughFile(ns, `ns.scriptKill('${summaryTailScript}', ns.getHostname())`, summaryTailScript.replace('.js', '-kill.js')); // Only needed if we're changing the script below\\n    await runCommand(ns, `ns.disableLog('sleep'); ns.tail(); let lastRead = '';\\n        while (true) { \\n            let read = ns.read('${summaryFile}');\\n            if (lastRead != read) ns.print(lastRead = read);\\n            await ns.sleep(1000); \\n        }`, summaryTailScript);\\n}\\n\\n// Ram-dodging helpers that spawn temporary scripts to buy/sell rather than pay 2.5GB ram per variant\\nlet buyStockWrapper = async (ns, sym, numShares) => await transactStock(ns, sym, numShares, 'buy'); // ns.stock.buy(sym, numShares);\\nlet buyShortWrapper = async (ns, sym, numShares) => await transactStock(ns, sym, numShares, 'short'); // ns.stock.short(sym, numShares);\\nlet sellStockWrapper = async (ns, sym, numShares) => await transactStock(ns, sym, numShares, 'sell'); // ns.stock.sell(sym, numShares);\\nlet sellShortWrapper = async (ns, sym, numShares) => await transactStock(ns, sym, numShares, 'sellShort'); // ns.stock.sellShort(sym, numShares);\\nlet transactStock = async (ns, sym, numShares, action) => await getNsDataThroughFile(ns, `ns.stock.${action}('${sym}', ${numShares})`, '/Temp/transact-stock.txt'); // ns.stock.sellShort(sym, numShares);\\n\\n/** @param {NS} ns \\n * Automatically buys either a short or long position depending on the outlook of the stock. */\\nasync function doBuy(ns, stk, sharesBought) {\\n    // We include -2*commission in the \\\"holdings value\\\" of our stock, but if we make repeated purchases of the same stock, we have to track\\n    // the additional commission somewhere. So only subtract it from our running profit if this isn't our first purchase of this symbol\\n    if (stk.owned())\\n        totalProfit -= commission;\\n    let long = stk.bullish();\\n    let expectedPrice = long ? stk.ask_price : stk.bid_price; // Depends on whether we will be buying a long or short position\\n    let price;\\n    try {\\n        price = mock ? expectedPrice : Number(await transactStock(ns, stk.sym, sharesBought, long ? 'buy' : 'short'));\\n    } catch (err) {\\n        if (long) throw err;\\n        disableShorts = true;\\n        log(ns, `WARN: Failed to short ${stk.sym} (Shorts not available?). Disabling shorts...`, true, 'warning');\\n        return 0;\\n    }\\n\\n    log(ns, `INFO: ${long ? 'Bought ' : 'Shorted'} ${formatNumberShort(sharesBought, 3, 3).padStart(5)}${stk.maxShares == sharesBought + stk.ownedShares() ? ' (max shares)' : ''} ` +\\n        `${stk.sym.padEnd(5)} @ ${formatMoney(price).padStart(9)} for ${formatMoney(sharesBought * price).padStart(9)} (Spread:${(stk.spread_pct * 100).toFixed(2)}% ` +\\n        `ER:${formatBP(stk.expectedReturn()).padStart(8)}) Ticks to Profit: ${stk.timeToCoverTheSpread().toFixed(2)}`, noisy, 'info');\\n    // The rest of this work is for troubleshooting / mock-mode purposes\\n    if (price == 0) {\\n        log(ns, `ERROR: Failed to ${long ? 'buy' : 'short'} ${stk.sym} @ ${formatMoney(expectedPrice)} - 0 was returned.`, true, 'error');\\n        return 0;\\n    } else if (price != expectedPrice) {\\n        log(ns, `WARNING: ${long ? 'Bought' : 'Shorted'} ${stk.sym} @ ${formatMoney(price)} but expected ${formatMoney(expectedPrice)} (spread: ${formatMoney(stk.spread)})`, false, 'warning');\\n        price = expectedPrice; // Known Bitburner bug for now, short returns \\\"price\\\" instead of \\\"bit_price\\\". Correct this so running profit calcs are correct.\\n    }\\n    if (mock && long) stk.boughtPrice = (stk.boughtPrice * stk.sharesLong + price * sharesBought) / (stk.sharesLong + sharesBought);\\n    if (mock && !long) stk.boughtPriceShort = (stk.boughtPriceShort * stk.sharesShort + price * sharesBought) / (stk.sharesShort + sharesBought);\\n    if (long) stk.sharesLong += sharesBought; else stk.sharesShort += sharesBought; // Maintained for mock mode, otherwise, redundant (overwritten at next refresh)\\n    return sharesBought * price + commission; // Return the amount spent on the transaction so it can be subtracted from our cash on hand\\n}\\n\\n/** @param {NS} ns \\n * Sell our current position in this stock. */\\nasync function doSellAll(ns, stk) {\\n    let long = stk.sharesLong > 0;\\n    if (long && stk.sharesShort > 0) // Detect any issues here - we should always sell one before buying the other.\\n        log(ns, `ERROR: Somehow ended up both ${stk.sharesShort} short and ${stk.sharesLong} long on ${stk.sym}`, true, 'error');\\n    let expectedPrice = long ? stk.bid_price : stk.ask_price; // Depends on whether we will be selling a long or short position\\n    let sharesSold = long ? stk.sharesLong : stk.sharesShort;\\n    let price = mock ? expectedPrice : await transactStock(ns, stk.sym, sharesSold, long ? 'sell' : 'sellShort');\\n    const profit = (long ? stk.sharesLong * (price - stk.boughtPrice) : stk.sharesShort * (stk.boughtPriceShort - price)) - 2 * commission;\\n    log(ns, `${profit > 0 ? 'SUCCESS' : 'WARNING'}: Sold all ${formatNumberShort(sharesSold, 3, 3).padStart(5)} ${stk.sym.padEnd(5)} ${long ? ' long' : 'short'} positions ` +\\n        `@ ${formatMoney(price).padStart(9)} for a ` + (profit > 0 ? `PROFIT of ${formatMoney(profit).padStart(9)}` : ` LOSS  of ${formatMoney(-profit).padStart(9)}`) + ` after ${stk.ticksHeld} ticks`,\\n        noisy, noisy ? (profit > 0 ? 'success' : 'error') : undefined);\\n    if (price == 0) {\\n        log(ns, `ERROR: Failed to sell ${sharesSold} ${stk.sym} ${long ? 'shares' : 'shorts'} @ ${formatMoney(expectedPrice)} - 0 was returned.`, true, 'error');\\n        return 0;\\n    } else if (price != expectedPrice) {\\n        log(ns, `WARNING: Sold ${stk.sym} ${long ? 'shares' : 'shorts'} @ ${formatMoney(price)} but expected ${formatMoney(expectedPrice)} (spread: ${formatMoney(stk.spread)})`, false, 'warning');\\n        price = expectedPrice; // Known Bitburner bug for now, sellSort returns \\\"price\\\" instead of \\\"ask_price\\\". Correct this so running profit calcs are correct.\\n    }\\n    if (long) stk.sharesLong -= sharesSold; else stk.sharesShort -= sharesSold; // Maintained for mock mode, otherwise, redundant (overwritten at next refresh)\\n    totalProfit += profit;\\n    return price * sharesSold - commission; // Return the amount of money recieved from the transaction\\n}\\n\\nlet formatBP = fraction => formatNumberShort(fraction * 100 * 100, 3, 2) + \\\" BP\\\";\\n\\n/** Log / tprint / toast helper.\\n * @param {NS} ns */\\nlet log = (ns, message, tprint = false, toastStyle = \\\"\\\") => {\\n    if (message == lastLog) return;\\n    ns.print(message);\\n    if (tprint) ns.tprint(message);\\n    if (toastStyle) ns.toast(message, toastStyle);\\n    return lastLog = message;\\n}\\n\\nfunction doStatusUpdate(ns, stocks, myStocks, hudElement = null) {\\n    let maxReturnBP = 10000 * Math.max(...myStocks.map(s => s.absReturn())); // The largest return (in basis points) in our portfolio\\n    let minReturnBP = 10000 * Math.min(...myStocks.map(s => s.absReturn())); // The smallest return (in basis points) in our portfolio\\n    let est_holdings_cost = myStocks.reduce((sum, stk) => sum + (stk.owned() ? commission : 0) +\\n        stk.sharesLong * stk.boughtPrice + stk.sharesShort * stk.boughtPriceShort, 0);\\n    let liquidation_value = myStocks.reduce((sum, stk) => sum - (stk.owned() ? commission : 0) + stk.positionValue(), 0);\\n    let status = `Long ${myStocks.filter(s => s.sharesLong > 0).length}, Short ${myStocks.filter(s => s.sharesShort > 0).length} of ${stocks.length} stocks ` +\\n        (myStocks.length == 0 ? '' : `(ER ${minReturnBP.toFixed(1)}-${maxReturnBP.toFixed(1)} BP) `) +\\n        `Profit: ${formatMoney(totalProfit, 3)} Holdings: ${formatMoney(liquidation_value, 3)} (Cost: ${formatMoney(est_holdings_cost, 3)}) ` +\\n        `Net: ${formatMoney(totalProfit + liquidation_value - est_holdings_cost, 3)}`\\n    log(ns, status);\\n    if (hudElement) hudElement.innerText = formatMoney(liquidation_value, 6, 3);\\n}\\n\\n/** @param {NS} ns **/\\nasync function liquidate(ns, allStockSymbols) {\\n    let totalStocks = 0, totalSharesLong = 0, totalSharesShort = 0, totalRevenue = 0;\\n    const dictPositions = mock ? null : await getStockInfoDict(ns, 'getPosition');\\n    for (const sym of allStockSymbols) {\\n        var [sharesLong, , sharesShort, avgShortCost] = dictPositions[sym];\\n        if (sharesLong + sharesShort == 0) continue;\\n        totalStocks++, totalSharesLong += sharesLong, totalSharesShort += sharesShort;\\n        if (sharesLong > 0) totalRevenue += (await sellStockWrapper(ns, sym, sharesLong)) * sharesLong - commission;\\n        if (sharesShort > 0) totalRevenue += (2 * avgShortCost - (await sellShortWrapper(ns, sym, sharesShort))) * sharesShort - commission;\\n    }\\n    log(ns, `Sold ${totalSharesLong.toLocaleString()} long shares and ${totalSharesShort.toLocaleString()} short shares ` +\\n        `in ${totalStocks} stocks for ${formatMoney(totalRevenue, 3)}`, true, 'success');\\n}\\n\\n/** @param {NS} ns **/\\n/** @param {Player} playerStats **/\\nasync function tryGet4SApi(ns, playerStats, bitnodeMults, corpus, allStockSymbols) {\\n    if (playerStats.has4SDataTixApi) return false; // Only return true if we just bought it\\n    const cost4sData = bitnodeMults.FourSigmaMarketDataCost * 5000000000;\\n    const cost4sApi = bitnodeMults.FourSigmaMarketDataApiCost * 25000000000;\\n    const totalCost = (playerStats.has4SData ? 0 : cost4sData) + cost4sApi;\\n    // Liquidate shares if it would allow us to afford 4S API data\\n    if (totalCost > corpus * 0.9 /* Need to reserve some money to invest */) return false;\\n    if (playerStats.money < totalCost)\\n        await liquidate(ns, allStockSymbols);\\n    if (!playerStats.has4SData) {\\n        if (await getNsDataThroughFile(ns, 'ns.stock.purchase4SMarketData()', '/Temp/purchase-4s.txt'))\\n            log(ns, `Purchased 4SMarketData for ${formatMoney(cost4sData)}!`, true, 'success');\\n        else\\n            log(ns, 'ERROR attempting to purchase 4SMarketData!', false, 'error');\\n    }\\n    if (await getNsDataThroughFile(ns, 'ns.stock.purchase4SMarketDataTixApi()', '/Temp/purchase-4s-api.txt')) {\\n        log(ns, `Purchased 4SMarketDataTixApi for ${formatMoney(cost4sApi)}!`, true, 'success');\\n        return true;\\n    } else {\\n        log(ns, 'ERROR attempting to purchase 4SMarketDataTixApi!', false, 'error');\\n        if (!(5 in dictSourceFiles)) { // If we do not have access to bitnode multipliers, assume the cost is double and try again later\\n            log(ns, 'INFO: Bitnode mults are not available (SF5) - assuming everything is twice as expensive in the current bitnode.');\\n            bitnodeMults.FourSigmaMarketDataCost *= 2;\\n            bitnodeMults.FourSigmaMarketDataApiCost *= 2;\\n        }\\n    }\\n    return false;\\n}\\n\\nfunction initializeHud() {\\n    const d = eval(\\\"document\\\");\\n    let htmlDisplay = d.getElementById(\\\"stock-display-1\\\");\\n    if (htmlDisplay !== null) return htmlDisplay;\\n    // Get the custom display elements in HUD.\\n    let customElements = d.getElementById(\\\"overview-extra-hook-0\\\").parentElement.parentElement;\\n    // Make a clone - in case other scripts are using them\\n    let stockValueTracker = customElements.cloneNode(true);\\n    // Clear id since duplicate id's are invalid\\n    stockValueTracker.querySelectorAll(\\\"p\\\").forEach((el, i) => el.id = \\\"stock-display-\\\" + i);\\n    // Get out output element\\n    htmlDisplay = stockValueTracker.querySelector(\\\"#stock-display-1\\\");\\n    // Display label and default value\\n    stockValueTracker.querySelectorAll(\\\"p\\\")[0].innerText = \\\"Stock\\\";\\n    htmlDisplay.innerText = \\\"$0.000\\\"\\n    // Insert our element right after Money\\n    customElements.parentElement.insertBefore(stockValueTracker, customElements.parentElement.childNodes[2]);\\n    return htmlDisplay;\\n}\",\"filename\":\"stockmaster.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"helpers.js\",\"url\":\"blob:https://danielyxie.github.io/03896eac-1326-4276-987d-f9be9b893619\",\"moduleSequenceNumber\":42150},{\"filename\":\"stockmaster.js\",\"url\":\"blob:https://danielyxie.github.io/857e3010-4174-4f70-a669-19890a880dff\",\"moduleSequenceNumber\":42388}],\"dependents\":[],\"ramUsage\":3.2,\"server\":\"home\",\"moduleSequenceNumber\":154,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"run\",\"cost\":1},{\"type\":\"fn\",\"name\":\"isRunning\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {\\n    getNsDataThroughFile, runCommand, getActiveSourceFiles, tryGetBitNodeMultipliers,\\n    formatDuration, formatMoney, formatNumberShort, disableLogs\\n} from './helpers.js'\\n\\nconst companySpecificConfigs = [\\n    { name: \\\"NWO\\\", statModifier: 25 },\\n    { name: \\\"MegaCorp\\\", statModifier: 25 },\\n    { name: \\\"Blade Industries\\\", statModifier: 25 },\\n    { name: \\\"Fulcrum Secret Technologies\\\", companyName: \\\"Fulcrum Technologies\\\", repRequiredForFaction: 250000 }, // Special snowflake\\n    { name: \\\"Silhouette\\\", companyName: \\\"TBD\\\", repRequiredForFaction: 999e9 /* Hack to force work until max promotion. */ }\\n]\\nconst jobs = [ // Job stat requirements for a company with a base stat modifier of +224 (modifier of all megacorps except the ones above which are 25 higher)\\n    { name: \\\"it\\\", reqRep: [0, 7E3, 35E3, 175E3], reqHack: [225, 250, 275, 375], reqCha: [0, 0, 275, 300], repMult: [0.9, 1.1, 1.3, 1.4] },\\n    { name: \\\"software\\\", reqRep: [0, 8E3, 40E3, 200E3, 400E3, 800E3, 1.6e6, 3.2e6], reqHack: [225, 275, 475, 625, 725, 725, 825, 975], reqCha: [0, 0, 275, 375, 475, 475, 625, 725], repMult: [0.9, 1.1, 1.3, 1.5, 1.6, 1.6, 1.75, 2] },\\n]\\nconst factionSpecificConfigs = [\\n    { name: \\\"Slum Snakes\\\", forceUnlock: true },\\n]\\nconst factions = [\\\"Illuminati\\\", \\\"Daedalus\\\", \\\"The Covenant\\\", \\\"ECorp\\\", \\\"MegaCorp\\\", \\\"Bachman & Associates\\\", \\\"Blade Industries\\\", \\\"NWO\\\", \\\"Clarke Incorporated\\\", \\\"OmniTek Incorporated\\\",\\n    \\\"Four Sigma\\\", \\\"KuaiGong International\\\", \\\"Fulcrum Secret Technologies\\\", \\\"BitRunners\\\", \\\"The Black Hand\\\", \\\"NiteSec\\\", \\\"Aevum\\\", \\\"Chongqing\\\", \\\"Ishima\\\", \\\"New Tokyo\\\", \\\"Sector-12\\\",\\n    \\\"Volhaven\\\", \\\"Speakers for the Dead\\\", \\\"The Dark Army\\\", \\\"The Syndicate\\\", \\\"Silhouette\\\", \\\"Tetrads\\\", \\\"Slum Snakes\\\", \\\"Netburners\\\", \\\"Tian Di Hui\\\", \\\"CyberSec\\\"]; //TODO: Add Bladeburner Automation at BN7.1\\n// These factions should ideally be completed in this order (TODO: Check for augmentation dependencies)\\nconst preferredEarlyFactionOrder = [\\n    \\\"Slum Snakes\\\", // Unlock Gangs\\n    \\\"Netburners\\\", // Required to set up hash income\\n    \\\"Tian Di Hui\\\", \\\"Aevum\\\", // These give all the company_rep and faction_rep bonuses early game    \\n    \\\"CyberSec\\\", /* Quick, and NightSec aug depends on an aug from here */ \\\"NiteSec\\\", \\\"Tetrads\\\", // Cha augs to speed up earning company promotions\\n    \\\"Bachman & Associates\\\", // Boost company/faction rep for future augs\\n    \\\"Daedalus\\\", // Once we have all faction_rep boosting augs, there's no reason not to work towards Daedalus as soon as it's available/feasible so we can buy Red Pill\\n    \\\"Fulcrum Secret Technologies\\\", // Will be removed if hack level is too low to backdoor their server\\n    \\\"ECorp\\\", // More cmp_rep augs, and some strong hack ones as well\\n    \\\"BitRunners\\\", \\\"The Black Hand\\\", // Fastest sources of hacking augs after the above companies\\n    \\\"The Dark Army\\\", // Unique cmp_rep aug TODO: Can it sensibly be gotten before corps? Requires 300 all combat stats.\\n    \\\"Clarke Incorporated\\\", \\\"OmniTek Incorporated\\\", \\\"NWO\\\", // More hack augs from companies\\n    \\\"Chongqing\\\", // Unique Source of big 1.4x hack exp boost (Can only join if not in e.g. Aevum as well)\\n];\\n// This is an approximate order of most useful augmentations left to offer, assuming all early-game factions have been cleaned out\\nconst preferredCompanyFactionOrder = [\\n    \\\"Bachman & Associates\\\", // Augs boost company_rep by 1.65, faction_rep by 1.50. Lower rep-requirements than ECorp augs, so should be a priority to speed up future resets\\n    \\\"ECorp\\\", // Offers 2.26 multi worth of company_rep and major hacking stat boosts (1.51 hack / 1.54 exp / 1.43 success / 3.0 grow / 2.8 money / 1.25 speed), but high rep reqs\\n    \\\"Clarke Incorporated\\\", // Biggest boost to hacking after above factions (1.38)\\n    \\\"OmniTek Incorporated\\\", // Next big boost to hacking after above factions (1.20) (NWO is bigger, but this has lower Cha reqs.)\\n    \\\"NWO\\\", // Biggest boost to hacking after above factions (1.26)\\n    \\\"Blade Industries\\\", // Mostly redundant after Ecorp - provides remaining hack-related augs (1.10 money, 1.03 speed)\\n    \\\"MegaCorp\\\", // Offers 1 unique aug boosting all physical traits by 1.35\\n    \\\"KuaiGong International\\\", // 1.40 to agility, defense, strength\\n    \\\"Fulcrum Secret Technologies\\\", // Big boosts to company_rep and hacking, but requires high hack level to backdoor their server, so might have to be left until later\\n    \\\"Four Sigma\\\", // No unique augs, but note that if accessible early on, Fulcrum + Four Sigma is a one-two punch to get all company rep boosting augs in just 2 factions\\n]\\n// Order in which to focus on crime factions\\nconst preferredCrimeFactionOrder = [\\\"Netburners\\\", \\\"Slum Snakes\\\", \\\"NiteSec\\\", \\\"Tetrads\\\", \\\"The Black Hand\\\", \\\"The Syndicate\\\", \\\"The Dark Army\\\", \\\"Speakers for the Dead\\\", \\\"Daedalus\\\"]\\n\\nconst loopSleepInterval = 5000; // 5 seconds\\nconst statusUpdateInterval = 60000; // 1 minute (outside of this, minor updates in e.g. stats aren't logged)\\nconst restartWorkInteval = 30000; // Collect e.g. rep earned by stopping and starting work;\\nlet noFocus = false; // Can be set via command line to disable doing work that requires focusing (crime, studying, or focused faction/company work)\\nlet noStudying = false; // Disable studying for Charisma. Useful in longer resets when Cha augs are insufficient to meet promotion requirements (Also disabled with --no-focus)\\nlet noCrime = false; // Disable doing crimes at all. (Also disabled with --no-focus)\\nlet crimeFocus = false; // Useful in crime-focused BNs when you want to focus on crime related factions\\nlet fastCrimesOnly = false; // Can be set via command line argument\\nlet prioritizeInvites = false;\\nlet hasFocusPenaly = true;\\nlet shouldFocusAtWork = false; // Whether we should focus on work or let it be backgrounded (based on whether \\\"Neuroreceptor Management Implant\\\" is owned, or \\\"--no-focus\\\" is specified)\\nlet repToDonate = 150; // Updated after looking at bitnode mults\\nlet lastActionRestart = 0;\\nlet crimeCount = 0; // A simple count of crime commited since last script restart\\nlet ownedAugmentations = [];\\nlet mostExpensiveAugByFaction = [];\\nlet mostExpensiveDesiredAugByFaction = [];\\nlet playerGang = null;\\nlet allGangFactions = [];\\nlet dictFactionFavors;\\n\\nlet options;\\nconst argsSchema = [\\n    ['first', []], // Grind rep with these factions first. Also forces a join of this faction if we normally wouldn't (e.g. no desired augs or all augs owned)\\n    ['skip', []], // Don't work for these factions\\n    ['o', false], // Immediately grind company factions for rep after getting their invite, rather than first getting all company invites we can\\n    ['desired-stats', ['hacking', 'faction_rep', 'company_rep', 'charisma', 'hacknet']], // Factions will be removed from our 'early-faction-order' once all augs with these stats have been bought out\\n    ['no-focus', false], // Disable doing work that requires focusing (crime, studying, or focused faction/company work)\\n    ['no-studying', false], // Disable studying for Charisma. Useful in longer resets when Cha augs are insufficient to meet promotion requirements (Also disabled with --no-focus)\\n    ['no-coding-contracts', false], // Disable purchasing coding contracts for reputation\\n    ['no-crime', false], // Disable doing crimes at all. (Also disabled with --no-focus)\\n    ['crime-focus', false], // Useful in crime-focused BNs when you want to focus on crime related factions\\n    ['fast-crimes-only', false], // Assasination and Heist are so slow, I can see people wanting to disable them just so they can interrupt at will.\\n    ['invites-only', false], // Just work to get invites, don't work for augmentations / faction rep\\n    ['prioritize-invites', false], // Prioritize working for as many invites as is practical before starting to grind for faction reputation\\n];\\n\\nexport function autocomplete(data, args) {\\n    data.flags(argsSchema);\\n    const lastFlag = args.length > 1 ? args[args.length - 2] : null;\\n    if (lastFlag == \\\"--first\\\" || lastFlag == \\\"--skip\\\")\\n        return factions.map(f => f.replaceAll(' ', '_')).sort();\\n    return [];\\n}\\n\\n/** @param {NS} ns */\\nexport async function main(ns) {\\n    disableLogs(ns, ['sleep', 'getServerRequiredHackingLevel'])\\n    ns.tail()\\n    options = ns.flags(argsSchema);\\n    const desiredAugStats = (options['desired-stats'] || []);\\n    const firstFactions = options.first = (options.first || []).map(f => f.replaceAll('_', ' '));\\n    let skipFactionsConfig = options.skip = (options.skip || []).map(f => f.replaceAll('_', ' '));\\n    noFocus = options['no-focus'];\\n    noStudying = options['no-studying'] || noFocus; // Can't study if we aren't allowed to steal focus\\n    noCrime = options['no-crime'] || noFocus; // Can't crime if we aren't allowed to steal focus\\n    crimeFocus = options['crime-focus'];\\n    prioritizeInvites = options['prioritize-invites'];\\n    if (crimeFocus && noFocus)\\n        return ns.tprint(\\\"ERROR: Cannot use --no-focus and --crime-focus at the same time. You need to focus to do crime!\\\");\\n    if (desiredAugStats.length == 0)\\n        desiredAugStats.push(...(crimeFocus ? ['str', 'def', 'dex', 'agi', 'faction_rep', 'hacking', 'hacknet'] : ['hacking', 'faction_rep', 'company_rep', 'charisma', 'hacknet']))\\n    fastCrimesOnly = options['fast-crimes-only'];\\n    // Log command line args used\\n    if (firstFactions.length > 0) ns.print(`--first factions: ${firstFactions.join(\\\", \\\")}`);\\n    if (skipFactionsConfig.length > 0) ns.print(`--skip factions: ${skipFactionsConfig.join(\\\", \\\")}`);\\n    if (desiredAugStats.length > 0) ns.print(`--desired-stats matching: ${desiredAugStats.join(\\\", \\\")}`);\\n    if (fastCrimesOnly) ns.print(`--fast-crimes-only`);\\n\\n\\n    let dictSourceFiles = await getActiveSourceFiles(ns); // Find out what source files the user has unlocked\\n    if (!(4 in dictSourceFiles))\\n        return ns.tprint(\\\"ERROR: You cannot automate working for factions until you have unlocked singularity access (SF4).\\\");\\n    else if (dictSourceFiles[4] < 3)\\n        ns.tprint(`WARNING: Singularity functions are much more expensive with lower levels of SF4 (you have SF4.${dictSourceFiles[4]}). ` +\\n            `You may encounter RAM issues with and have to wait until you have more RAM available to run this script successfully.`);\\n\\n    let bitnodeMults = await tryGetBitNodeMultipliers(ns); // Find out the current bitnode multipliers (if available)\\n    repToDonate = 150 * (bitnodeMults?.RepToDonateToFaction || 1);\\n    crimeCount = 0;\\n\\n    // Get some information about gangs (if unlocked)\\n    if (2 in dictSourceFiles) {\\n        const gangInfo = await getNsDataThroughFile(ns, 'ns.gang.inGang() ? ns.gang.getGangInformation() : false', '/Temp/gang-stats.txt');\\n        if (gangInfo && gangInfo.faction) {\\n            playerGang = gangInfo.faction;\\n            let configGangIndex = preferredEarlyFactionOrder.findIndex(f => f === \\\"Slum Snakes\\\");\\n            if (playerGang && configGangIndex != -1) // If we're in a gang, don't need to earn an invite to slum snakes anymore\\n                preferredEarlyFactionOrder.splice(configGangIndex, 1);\\n            allGangFactions = await getNsDataThroughFile(ns, 'Object.keys(ns.gang.getOtherGangInformation())', '/Temp/gang-names.txt') || [];\\n        }\\n    }\\n\\n    // Get some augmentation information to decide what remains to be purchased\\n    const dictFactionAugs = await getNsDataThroughFile(ns, dictCommand(factions, 'ns.getAugmentationsFromFaction(o)'), '/Temp/faction-augs.txt');\\n    const augmentationNames = [...new Set(Object.values(dictFactionAugs).flat())];\\n    const dictAugRepReqs = await getNsDataThroughFile(ns, dictCommand(augmentationNames, 'ns.getAugmentationRepReq(o)'), '/Temp/aug-repreqs.txt');\\n    const dictAugStats = await getNsDataThroughFile(ns, dictCommand(augmentationNames, 'ns.getAugmentationStats(o)'), '/Temp/aug-stats.txt');\\n    dictFactionFavors = await getNsDataThroughFile(ns, dictCommand(factions, 'ns.getFactionFavor(o)'), '/Temp/faction-favor.txt');\\n\\n    ownedAugmentations = await getNsDataThroughFile(ns, `ns.getOwnedAugmentations(true)`, '/Temp/player-augs-purchased.txt');\\n    let installedAugmentations = await getNsDataThroughFile(ns, `ns.getOwnedAugmentations()`, '/Temp/player-augs-installed.txt');\\n    hasFocusPenaly = !installedAugmentations.includes(\\\"Neuroreceptor Management Implant\\\"); // Check if we have an augmentation that lets us not have to focus at work (always nicer if we can background it)\\n    shouldFocusAtWork = !noFocus && hasFocusPenaly; // Focus at work for the best rate of rep gain, unless focus activities are disabled via command line\\n\\n    mostExpensiveAugByFaction = Object.fromEntries(factions.map(f => [f, dictFactionAugs[f]\\n        .filter(aug => !ownedAugmentations.includes(aug))\\n        .reduce((max, aug) => Math.max(max, dictAugRepReqs[aug]), -1)]));\\n    //ns.print(\\\"Most expensive unowned aug by faction: \\\" + JSON.stringify(mostExpensiveAugByFaction));\\n    // TODO: Detect when the most expensive aug from two factions is the same - only need it from the first one. (Update lists and remove 'afforded' augs?)\\n    mostExpensiveDesiredAugByFaction = Object.fromEntries(factions.map(f => [f, dictFactionAugs[f]\\n        .filter(aug => !ownedAugmentations.includes(aug) && (Object.keys(dictAugStats[aug]).length == 0 || !desiredAugStats ||\\n            Object.keys(dictAugStats[aug]).some(key => desiredAugStats.some(stat => key.includes(stat)))))\\n        .reduce((max, aug) => Math.max(max, dictAugRepReqs[aug]), -1)]));\\n\\n    //ns.print(\\\"Most expensive desired aug by faction: \\\" + JSON.stringify(mostExpensiveDesiredAugByFaction));\\n    let completedFactions = Object.keys(mostExpensiveAugByFaction).filter(fac => mostExpensiveAugByFaction[fac] == -1 && !factionSpecificConfigs.find(c => c.name == fac)?.forceUnlock);\\n    let skipFactions = skipFactionsConfig.concat(completedFactions);\\n    let softCompletedFactions = Object.keys(mostExpensiveDesiredAugByFaction).filter(fac => mostExpensiveDesiredAugByFaction[fac] == -1 &&\\n        !completedFactions.includes(fac) && !factionSpecificConfigs.find(c => c.name == fac)?.forceUnlock);\\n    if (completedFactions.length > 0)\\n        ns.print(`${completedFactions.length} factions are completed (all augs purchased): ${completedFactions.join(\\\", \\\")}`);\\n    if (softCompletedFactions.length > 0)\\n        ns.print(`${softCompletedFactions.length} factions will initially be skipped (all desired augs purchased): ${softCompletedFactions.join(\\\", \\\")}`);\\n\\n    let scope = 0; // Scope increases each time we complete a type of work and haven't progressed enough to unlock more factions\\n    let numJoinedFactions = ns.getPlayer().factions.length;\\n    while (true) { // After each loop, we will repeat all prevous work \\\"strategies\\\" to see if anything new has been unlocked, and add one more \\\"strategy\\\" to the queue\\n        scope++;\\n        ns.print(`INFO: Starting main work loop with scope: ${scope}...`);\\n        const player = ns.getPlayer();\\n        if (player.factions.length > numJoinedFactions) { // If we've recently joined a new faction, reset our work scope\\n            scope = 1; // Back to basics until we've satisfied all highest-priority work\\n            numJoinedFactions = player.factions.length;\\n        }\\n\\n        // Remove Fulcrum from our \\\"EarlyFactionOrder\\\" if hack level is insufficient to backdoor their server\\n        let priorityFactions = crimeFocus ? preferredCrimeFactionOrder.slice() : preferredEarlyFactionOrder.slice();\\n        let fulcrummHackReq = ns.getServerRequiredHackingLevel(\\\"fulcrumassets\\\");\\n        if (player.hacking < fulcrummHackReq - 10) { // Assume that if we're within 10, we'll get there by the time we've earned the invite\\n            priorityFactions.splice(priorityFactions.findIndex(c => c == \\\"Fulcrum Secret Technologies\\\"), 1);\\n            ns.print(`Fulcrum faction server requires ${fulcrummHackReq} hack, so removing from our initial priority list for now.`);\\n        } // TODO: Otherwise, if we get Fulcrum, we have no need for a couple other company factions\\n        // Strategy 1: Tackle a consolidated list of desired faction order, interleaving simple factions and megacorporations\\n        const factionWorkOrder = firstFactions.concat(priorityFactions.filter(f => !firstFactions.includes(f) && !skipFactions.includes(f)))\\n            .filter(f => !softCompletedFactions.includes(f)); // Remove factions from our initial \\\"work order\\\" if we've bought all desired augmentations.        \\n        for (const faction of factionWorkOrder) {\\n            let earnedNewFactionInvite = false;\\n            if (preferredCompanyFactionOrder.includes(faction)) // If this is a company faction, we need to work for the company first\\n                earnedNewFactionInvite = await workForMegacorpFactionInvite(ns, faction, true);\\n            // If new work was done for a company or their faction, restart the main work loop to see if we've since unlocked a higher-priority faction in the list\\n            if (earnedNewFactionInvite || await workForSingleFaction(ns, faction)) {\\n                scope--; // De-increment scope so that effecitve scope doesn't increase on the next loop (i.e. it will be incrementedback to what it is now)\\n                break;\\n            }\\n        }\\n        if (scope <= 1) continue;\\n\\n        // Strategy 2: Grind XP with all priority factions that are joined or can be joined, until every single one has desired REP\\n        for (const faction of factionWorkOrder)\\n            await workForSingleFaction(ns, faction);\\n        if (scope <= 2) continue;\\n\\n        // Strategy 3: Work for any megacorporations not yet completed to earn their faction invites. Once joined, we don't lose these factions on reset.\\n        let megacorpFactions = preferredCompanyFactionOrder.filter(f => !skipFactions.includes(f));\\n        await workForAllMegacorps(ns, megacorpFactions, false);\\n        if (scope <= 3) continue;\\n\\n        // Strategy 4: Work for megacorps again, but this time also work for the company factions once the invite is earned\\n        await workForAllMegacorps(ns, megacorpFactions, true);\\n        if (scope <= 4) continue;\\n\\n        // Strategies 5+ now work towards getting an invite to *all factions in the game* (sorted by least-expensive final aug (correlated to easiest faction-invite requirement))\\n        let joinedFactions = player.factions; // In case our hard-coded list of factions is missing anything, merge it with the list of all factions\\n        let knownFactions = factions.concat(joinedFactions.filter(f => !factions.includes(f)));\\n        let allIncompleteFactions = knownFactions.filter(f => !skipFactions.includes(f) && !completedFactions.includes(f)).sort((a, b) => mostExpensiveAugByFaction[a] - mostExpensiveAugByFaction[b]);\\n        // Strategy 5: For *all factions in the game*, try to earn an invite and work for rep until we can afford the most-expensive *desired* aug (or unlock donations, whichever comes first)\\n        for (const faction of allIncompleteFactions.filter(f => !softCompletedFactions.includes(f)))\\n            await workForSingleFaction(ns, faction);\\n        if (scope <= 5) continue;\\n\\n        // Strategy 6: Revisit all factions until each has enough rep to unlock donations - so if we can't afford all augs this reset, at least we don't need to grind for rep on the next reset\\n        // For this, we reverse the order (ones with augs costing the most-rep to least) since these will take the most time to re-grind rep for if we can't buy them this reset.\\n        for (const faction of allIncompleteFactions.reverse())\\n            await workForSingleFaction(ns, faction, true);\\n        if (scope <= 6) continue;\\n\\n        // Strategy 7:  Next, revisit all factions and grind XP until we can afford the most expensive aug, even if we could just buy the required rep next reset\\n        for (const faction of allIncompleteFactions.reverse()) // Re-reverse the sort order so we start with the easiest (cheapest) faction augs to complete\\n            await workForSingleFaction(ns, faction, true, true);\\n        if (scope <= 7) continue;\\n\\n        // Strategy 8: Busy ourselves for a while longer, then loop to see if there anything more we can do for the above factions\\n        let factionsWeCanWorkFor = knownFactions.filter(f => !skipFactionsConfig.includes(f) && !allGangFactions.includes(f));\\n        if (factionsWeCanWorkFor.length > 0 && !crimeFocus) {\\n            // Do a little work for whatever faction has the most favor (e.g. to earn EXP and enable additional neuroflux purchases)\\n            let mostFavorFaction = factionsWeCanWorkFor.sort((a, b) => dictFactionFavors[b] - dictFactionFavors[a])[0];\\n            let targetRep = 1000 + ns.getFactionRep(mostFavorFaction) * 1.05; // Hack: Grow rep by ~5%, plus 1000 incase it's currently 0\\n            ns.print(`INFO: All useful work complete. Grinding an additional 5% rep (to ${formatNumberShort(targetRep)}) with highest-favor faction: ${mostFavorFaction} (${dictFactionFavors[mostFavorFaction]?.toFixed(2)} favor)`);\\n            await workForSingleFaction(ns, mostFavorFaction, false, false, targetRep);\\n        } else if (!noCrime) { // Otherwise, kill some time by doing crimes for a little while\\n            ns.print(`INFO: Nothing to do. Doing a little crime...`);\\n            await crimeForKillsKarmaStats(ns, 0, -ns.heart.break() + 100 /* Hack: Decrease Karma by 100 */, 0);\\n        } else { // If our hands our tied, twiddle our thumbs a bit\\n            ns.print(`INFO: Nothing to do. Sleeping for 30 seconds to see if magically we join a faction`);\\n            await ns.sleep(30000);\\n        }\\n        if (scope <= 8) scope--; // Cap the 'scope' value from increasing perpetually when we're on our last strategy\\n\\n        await ns.sleep(1); // Infinite loop protection in case somehow we loop without doing any meaningful work\\n    }\\n}\\n\\n// Ram-dodging helper, runs a command for all items in a list and returns a dictionary.\\nconst dictCommand = (list, command) => `Object.fromEntries(${JSON.stringify(list)}.map(o => [o, ${command}]))`;\\n\\n/** @param {NS} ns \\n * Prints a message, and also toasts it! */\\nfunction announce(ns, log, toastVariant = 'info') {\\n    if (!ns.print || !ns.toast) return; // If an error is caught/logged because the script is being killed, ns becomes undefined\\n    ns.print(`${toastVariant}: ${log}`);\\n    ns.toast(log, toastVariant);\\n}\\n\\nconst requiredMoneyByFaction = {\\n    \\\"Tian Di Hui\\\": 1E6, \\\"Sector-12\\\": 15E6, \\\"Chongqing\\\": 20E6, \\\"New Tokyo\\\": 20E6, \\\"Ishima\\\": 30E6, \\\"Aevum\\\": 40E6, \\\"Volhaven\\\": 50E6,\\n    \\\"Slum Snakes\\\": 1E6, \\\"Silhouette\\\": 15E6, \\\"The Syndicate\\\": 10E6, \\\"The Covenant\\\": 75E9, \\\"Daedalus\\\": 100E9, \\\"Illuminati\\\": 150E9\\n};\\nconst requiredBackdoorByFaction = { \\\"CyberSec\\\": \\\"CSEC\\\", \\\"NiteSec\\\": \\\"avmnite-02h\\\", \\\"The Black Hand\\\": \\\"I.I.I.I\\\", \\\"BitRunners\\\": \\\"run4theh111z\\\", \\\"Fulcrum Secret Technologies\\\": \\\"fulcrumassets\\\" };\\nconst requiredHackByFaction = { \\\"Tian Di Hui\\\": 50, \\\"Netburners\\\": 80, \\\"Speakers for the Dead\\\": 100, \\\"The Dark Army\\\": 300, \\\"The Syndicate\\\": 200, \\\"The Covenant\\\": 850, \\\"Daedalus\\\": 2500, \\\"Illuminati\\\": 1500 };\\nconst requiredCombatByFaction = { \\\"Slum Snakes\\\": 30, \\\"Tetrads\\\": 75, \\\"Speakers for the Dead\\\": 300, \\\"The Dark Army\\\": 300, \\\"The Syndicate\\\": 200, \\\"The Covenant\\\": 850, \\\"Daedalus\\\": 1500, \\\"Illuminati\\\": 1200 };\\nconst requiredKarmaByFaction = { \\\"Slum Snakes\\\": 9, \\\"Tetrads\\\": 18, \\\"Silhouette\\\": 22, \\\"Speakers for the Dead\\\": 45, \\\"The Dark Army\\\": 45, \\\"The Syndicate\\\": 90 };\\nconst requiredKillsByFaction = { \\\"Speakers for the Dead\\\": 30, \\\"The Dark Army\\\": 5 };\\nconst reqHackingOrCombat = [\\\"Daedalus\\\"]; // Special case factions that require only hacking or combat stats, not both\\n\\n/** @param {NS} ns */\\nasync function earnFactionInvite(ns, factionName) {\\n    const player = ns.getPlayer();\\n    const joinedFactions = player.factions;\\n    if (joinedFactions.includes(factionName)) return true;\\n    var invitations = await getNsDataThroughFile(ns, 'ns.checkFactionInvitations()', '/Temp/player-faction-invites.txt');\\n    if (invitations.includes(factionName))\\n        return await tryJoinFaction(ns, factionName);\\n\\n    // Can't join certain factions for various reasons\\n    let reasonPrefix = `Cannot join faction \\\"${factionName}\\\" because`;\\n    let precludingFaction;\\n    if ([\\\"Aevum\\\", \\\"Sector-12\\\"].includes(factionName) && (precludingFaction = [\\\"Chongqing\\\", \\\"New Tokyo\\\", \\\"Ishima\\\", \\\"Volhaven\\\"].find(f => joinedFactions.includes(f))) ||\\n        [\\\"Chongqing\\\", \\\"New Tokyo\\\", \\\"Ishima\\\"].includes(factionName) && (precludingFaction = [\\\"Aevum\\\", \\\"Sector-12\\\", \\\"Volhaven\\\"].find(f => joinedFactions.includes(f))) ||\\n        [\\\"Volhaven\\\"].includes(factionName) && (precludingFaction = [\\\"Aevum\\\", \\\"Sector-12\\\", \\\"Chongqing\\\", \\\"New Tokyo\\\", \\\"Ishima\\\"].find(f => joinedFactions.includes(f))))\\n        return ns.print(`${reasonPrefix} precluding faction \\\"${precludingFaction}\\\"\\\" has been joined.`);\\n    let requirement;\\n    // See if we can take action to earn an invite for the next faction under consideration\\n    let workedForInvite = false;\\n    // If committing crimes can help us join a faction - we know how to do that\\n    let doCrime = false;\\n    if ((requirement = requiredKarmaByFaction[factionName]) && -ns.heart.break() < requirement) {\\n        ns.print(`${reasonPrefix} you have insufficient Karma. Need: ${-requirement}, Have: ${ns.heart.break()}`);\\n        doCrime = true;\\n    }\\n    if ((requirement = requiredKillsByFaction[factionName]) && player.numPeopleKilled < requirement) {\\n        ns.print(`${reasonPrefix} you have insufficient kills. Need: ${requirement}, Have: ${player.numPeopleKilled}`);\\n        doCrime = true;\\n    }\\n    let deficientStats;\\n    if ((requirement = requiredCombatByFaction[factionName]) &&\\n        (deficientStats = [{ name: \\\"str\\\", value: player.strength }, { name: \\\"str\\\", value: player.defense }, { name: \\\"str\\\", value: player.dexterity }, { name: \\\"str\\\", value: player.agility }]\\n            .filter(stat => stat.value < requirement)).length > 0\\n        && !(reqHackingOrCombat.includes(factionName) && player.hacking >= requiredHackByFaction[factionName])) { // Some special-case factions (just 'Daedalus' for now) require *either* hacking *or* combat\\n        ns.print(`${reasonPrefix} you have insufficient combat stats. Need: ${requirement} of each, ` +\\n            `Have Str: ${player.strength}, Def: ${player.defense}, Dex: ${player.dexterity}, Agi: ${player.agility}`);\\n        const em = requirement / 50; // Hack: A rough heuristic suggesting we need an additional x1 multi for every ~50 pysical stat points we wish to grind out in a reasonable amount of time. TODO: Be smarter\\n        if (!crimeFocus && (player.strength_exp_mult * player.strength_mult < em || player.defense_exp_mult * player.defense_mult < em ||\\n            player.dexterity_exp_mult * player.dexterity_mult < em || player.agility_exp_mult * player.agility_mult < em))\\n            return ns.print(\\\"Physical mults / exp_mults are too low to increase stats in a reasonable amount of time\\\");\\n        doCrime = true; // TODO: There could be more efficient ways to gain combat stats than homicide, although at least this serves future crime factions\\n    }\\n    if (doCrime && noCrime)\\n        return ns.print(`--no-crime (or --no-focus): Doing crime to meet faction requirements is disabled.`);\\n    if (doCrime)\\n        workedForInvite = await crimeForKillsKarmaStats(ns, requiredKillsByFaction[factionName] || 0, requiredKarmaByFaction[factionName] || 0, requiredCombatByFaction[factionName] || 0);\\n\\n    // Skip factions for which money/hack level requirements aren't met. We do not attempt to \\\"train up\\\" for these things (happens automatically outside this script)\\n    if ((requirement = requiredMoneyByFaction[factionName]) && player.money < requirement)\\n        return ns.print(`${reasonPrefix} you have insufficient money. Need: ${formatMoney(requirement)}, Have: ${formatMoney(player.money)}`);\\n    if ((requirement = requiredHackByFaction[factionName]) && player.hacking < requirement && !reqHackingOrCombat.includes(factionName))\\n        return ns.print(`${reasonPrefix} you have insufficient hack level. Need: ${requirement}, Have: ${player.hacking}`);\\n    // Note: This only complains if we have insuffient hack to backdoor this faction server. If we have sufficient hack, we will \\\"waitForInvite\\\" below assuming an external script is backdooring ASAP \\n    if ((requirement = requiredBackdoorByFaction[factionName]) && player.hacking < ns.getServerRequiredHackingLevel(requirement))\\n        return ns.print(`${reasonPrefix} you must fist backdoor ${requirement}, which needs hack: ${ns.getServerRequiredHackingLevel(requirement)}, Have: ${player.hacking}`);\\n    //await getNsDataThroughFile(ns, `ns.connect('fulcrumassets'); await ns.installBackdoor(); ns.connect(home)`, '/Temp/backdoor-fulcrum.txt') // TODO: Do backdoor if we can but haven't yet?\\n\\n    // If travelling can help us join a faction - we can do that too\\n    if (['Tian Di Hui', 'Tetrads', 'The Dark Army'].includes(factionName))\\n        workedForInvite = await goToCity(ns, 'Chongqing');\\n    else if (['The Syndicate'].includes(factionName))\\n        workedForInvite = await goToCity(ns, 'Sector-12');\\n    else if ([\\\"Aevum\\\", \\\"Chongqing\\\", \\\"Sector-12\\\", \\\"New Tokyo\\\", \\\"Ishima\\\", \\\"Volhaven\\\"].includes(factionName))\\n        workedForInvite = await goToCity(ns, factionName);\\n    // Special case, earn a CEO position to gain an invite to Silhouette\\n    if (\\\"Silhouette\\\" == factionName) {\\n        ns.print(`You must be a CO (e.g. CEO/CTO) of a company to earn an invite to ${factionName}. This may take a while!`);\\n        let factionConfig = companySpecificConfigs.find(f => f.name == factionName); // We set up Silhouette with a \\\"company-specific-config\\\" so that we can work for an invite like any megacorporation faction.\\n        let companyNames = preferredCompanyFactionOrder.map(f => companySpecificConfigs.find(cf => cf.name == f)?.companyName || f);\\n        let favorByCompany = await getNsDataThroughFile(ns, dictCommand(companyNames, 'ns.getCompanyFavor(o)'), '/Temp/company-favors.txt');\\n        // Change the company to work for into whichever company we can get to CEO fastest with. Minimize needed_rep/rep_gain_rate. CEO job is at 3.2e6 rep, so (3.2e6-current_rep)/(100+favor).\\n        factionConfig.companyName = companyNames.sort((a, b) => (3.2e6 - ns.getCompanyRep(a)) / (100 + favorByCompany[a]) - (3.2e6 - ns.getCompanyRep(b)) / (100 + favorByCompany[b]))[0];\\n        // Super-hack. Kick off an external script that just loops until it joins the faction, since we can't have concurrent ns calls in here.\\n        try { await runCommand(ns, `while(true) { if(ns.joinFaction('${factionName}')) return; else await ns.sleep(1000); }`, '/Temp/join-faction-loop.js'); }\\n        catch { ns.print(`WARN: Could not start a temporary script to join ${factionName} when avaialble. (Still running from a previous run?) Proceeding under the assumption something will join for us...`); }\\n        workedForInvite = await workForMegacorpFactionInvite(ns, factionName, false); // Work until CTO and the external script joins this faction, triggering an exit condition.\\n    }\\n\\n    if (workedForInvite) // If we took some action to earn the faction invite, wait for it to come in\\n        return await waitForFactionInvite(ns, factionName);\\n    else\\n        return ns.print(`Noting we can do at this time to earn an invitation to faction \\\"${factionName}\\\"...`);\\n}\\n\\n/** @param {NS} ns */\\nasync function goToCity(ns, cityName) {\\n    if (ns.getPlayer().city == cityName) {\\n        ns.print(`Already in city ${cityName}`);\\n        return true;\\n    }\\n    if (await getNsDataThroughFile(ns, `ns.travelToCity('${cityName}')`, '/Temp/travel.txt')) {\\n        lastActionRestart = Date.now();\\n        announce(ns, `Travelled to ${cityName}`, 'info');\\n        return true;\\n    }\\n    announce(ns, `Failed to travelled to ${cityName} for some reason...`, 'error');\\n    return false;\\n}\\n\\n/** @param {NS} ns \\n *  @param {function} crimeCommand if you want to commit the RAM footprint, you can pass in ns.commitCrime, otherise it will run via ram-dodging getNsDataThroughFile */\\nexport async function crimeForKillsKarmaStats(ns, reqKills, reqKarma, reqStats, crimeCommand = null, doFastCrimesOnly = false) {\\n    const bestCrimesByDifficulty = [\\\"heist\\\", \\\"assassinate\\\", \\\"homicide\\\", \\\"mug\\\"]; // Will change crimes as our success rate improves\\n    const chanceThresholds = [0.75, 0.9, 0.5, 0]; // Will change crimes once we reach this probability of success for better all-round gains\\n    doFastCrimesOnly = doFastCrimesOnly || fastCrimesOnly;\\n    if (!crimeCommand) crimeCommand = async crime => await getNsDataThroughFile(ns, `ns.commitCrime('${crime}')`, '/Temp/crime-time.txt');\\n    let player = ns.getPlayer();\\n    let strRequirements = [];\\n    let forever = reqKills >= Number.MAX_SAFE_INTEGER || reqKarma >= Number.MAX_SAFE_INTEGER || reqStats >= Number.MAX_SAFE_INTEGER;\\n    if (reqKills) strRequirements.push(() => `${reqKills} kills (Have ${player.numPeopleKilled})`);\\n    if (reqKarma) strRequirements.push(() => `-${reqKarma} Karma (Have ${ns.heart.break()})`);\\n    if (reqStats) strRequirements.push(() => `${reqStats} of each combat stat (Have Str: ${player.strength}, Def: ${player.defense}, Dex: ${player.dexterity}, Agi: ${player.agility})`);\\n    let crime, lastCrime, lastStatusUpdateTime;\\n    while (forever || player.strength < reqStats || player.defense < reqStats || player.dexterity < reqStats || player.agility < reqStats || player.numPeopleKilled < reqKills || -ns.heart.break() < reqKarma) {\\n        let crimeChances = await getNsDataThroughFile(ns, `Object.fromEntries(${JSON.stringify(bestCrimesByDifficulty)}.map(c => [c, ns.getCrimeChance(c)]))`, '/Temp/crime-chances.txt');\\n        let needStats = player.strength < reqStats || player.defense < reqStats || player.dexterity < reqStats || player.agility < reqStats;\\n        let karma = -ns.heart.break();\\n        crime = crimeCount < 10 ? (crimeChances[\\\"homicide\\\"] > 0.75 ? \\\"homicide\\\" : \\\"mug\\\") : // Start with a few fast & easy crimes to boost stats if we're just starting\\n            (!needStats && (player.numPeopleKilled < reqKills || karma < reqKarma)) ? \\\"homicide\\\" : // If *all* we need now is kills or Karma, homicide is the fastest way to do that\\n                bestCrimesByDifficulty.find((c, index) => doFastCrimesOnly ? index > 1 : crimeChances[c] >= chanceThresholds[index]); // Otherwise, crime based on success chance vs relative reward (precomputed)\\n        if (lastCrime != crime || (Date.now() - lastStatusUpdateTime) > statusUpdateInterval) {\\n            ns.print(`Committing \\\"${crime}\\\" (${(100 * crimeChances[crime]).toPrecision(3)}% success) ` + (forever ? 'forever...' : `until we reach ${strRequirements.map(r => r()).join(', ')}`));\\n            lastCrime = crime;\\n            lastStatusUpdateTime = Date.now();\\n        }\\n        ns.tail(); // Force a tail window open when auto-criming, or else it's very difficult to stop if it was accidentally closed.\\n        await ns.sleep(await crimeCommand(crime));\\n        while ((player = ns.getPlayer()).crimeType == `commit ${crime}` || player.crimeType == crime) // If we woke up too early, wait a little longer for the crime to finish\\n            await ns.sleep(10);\\n        crimeCount++;\\n    }\\n    ns.print(`Done committing crimes. Reached ${strRequirements.map(r => r()).join(', ')}`);\\n    return true;\\n}\\n\\n/** @param {NS} ns */\\nasync function studyForCharisma(ns) {\\n    await goToCity(ns, 'Volhaven');\\n    if (await getNsDataThroughFile(ns, `ns.universityCourse('ZB Institute Of Technology', 'Leadership')`, '/Temp/study.txt')) {\\n        lastActionRestart = Date.now();\\n        announce(ns, `Started studying 'Leadership' at 'ZB Institute Of Technology`, 'success');\\n        return true;\\n    }\\n    announce(ns, `For some reason, failed to study at university (not in correct city?)`, 'error');\\n    return false;\\n}\\n\\n/** @param {NS} ns */\\nexport async function waitForFactionInvite(ns, factionName, maxWaitTime = 20000) {\\n    ns.print(`Waiting for invite from faction \\\"${factionName}\\\"...`);\\n    let waitTime = maxWaitTime;\\n    do {\\n        var invitations = await getNsDataThroughFile(ns, 'ns.checkFactionInvitations()', '/Temp/player-faction-invites.txt');\\n        var joinedFactions = ns.getPlayer().factions;\\n        if (invitations.includes(factionName) || joinedFactions.includes(factionName))\\n            break;\\n        await ns.sleep(loopSleepInterval);\\n    } while (!invitations.includes(factionName) && !joinedFactions.includes(factionName) && (waitTime -= 1000) > 0);\\n    if (joinedFactions.includes(factionName)) // Another script may have auto-joined this faction before we could\\n        ns.print(`An external script has joined faction \\\"${factionName}\\\" for us.`);\\n    else if (!invitations.includes(factionName))\\n        return announce(ns, `Waited ${formatDuration(maxWaitTime)}, but still have not recieved an invite for faction: \\\"${factionName}\\\" (Requirements not met?)`, 'error');\\n    else if (!(await tryJoinFaction(ns, factionName)))\\n        return announce(ns, `Something went wrong. Earned \\\"${factionName}\\\" faction invite, but failed to join it.`, 'error');\\n    return true;\\n}\\n\\n/** @param {NS} ns */\\nexport async function tryJoinFaction(ns, factionName) {\\n    var joinedFactions = ns.getPlayer().factions;\\n    if (joinedFactions.includes(factionName))\\n        return true;\\n    if (!(await getNsDataThroughFile(ns, `ns.joinFaction('${factionName}')`, '/Temp/join-faction.txt')))\\n        return false;\\n    announce(ns, `Joined faction \\\"${factionName}\\\"`, 'success');\\n    return true;\\n}\\n\\n/** @param {NS} ns */\\nasync function getCurrentFactionFavour(ns, factionName) {\\n    return await getNsDataThroughFile(ns, `ns.getFactionFavor('${factionName}')`, '/Temp/faction-favor.txt');\\n}\\n\\nlet lastFactionWorkStatus = \\\"\\\";\\n/** @param {NS} ns \\n * Checks how much reputation we need with this faction to either buy all augmentations or get 150 favour, then works to that amount.\\n * */\\nexport async function workForSingleFaction(ns, factionName, forceUnlockDonations = false, forceBestAug = false, forceRep = undefined) {\\n    const repToFavour = (rep) => Math.ceil(25500 * 1.02 ** (rep - 1) - 25000);\\n    const factionConfig = factionSpecificConfigs.find(c => c.name == factionName);\\n    const forceUnlock = factionConfig?.forceUnlock || options.first.includes(factionName);\\n    let highestRepAug = forceBestAug ? mostExpensiveAugByFaction[factionName] : mostExpensiveDesiredAugByFaction[factionName];\\n    let startingFavor = dictFactionFavors[factionName];\\n    let favorRepRequired = Math.max(0, repToFavour(repToDonate) - repToFavour(startingFavor));\\n    // When to stop grinding faction rep (usually ~467,000 to get 150 favour) Set this lower if there are no augs requiring that much REP\\n    let factionRepRequired = forceRep ? forceRep : forceUnlockDonations ? favorRepRequired : Math.min(highestRepAug, favorRepRequired);\\n    if (highestRepAug == -1 && !forceUnlock && !forceRep)\\n        return ns.print(`All \\\"${factionName}\\\" augmentations are owned. Skipping unlocking faction...`);\\n    // Ensure we get an invite to location-based factions we might want / need\\n    if (!await earnFactionInvite(ns, factionName))\\n        return ns.print(`We are not yet part of faction \\\"${factionName}\\\". Skipping working for faction...`);\\n    if (startingFavor >= repToDonate && !forceRep) // If we have already unlocked donations via favour - no need to grind for rep\\n        return ns.print(`Donations already unlocked for \\\"${factionName}\\\". You should buy access to augs. Skipping working for faction...`);\\n    // Cannot work for gang factions. Detect if this is our gang faction!\\n    if (factionName === playerGang || allGangFactions.includes(factionName))\\n        return ns.print(`\\\"${factionName}\\\" is an active gang faction. Cannot work for gang factions...`);\\n    if (forceUnlockDonations && mostExpensiveAugByFaction[factionName] < 0.2 * factionRepRequired) { // Special check to avoid pointless donation unlocking\\n        ns.print(`The last \\\"${factionName}\\\" aug is only ${mostExpensiveAugByFaction[factionName].toLocaleString()} rep, ` +\\n            `not worth grinding ${favorRepRequired.toLocaleString()} rep to unlock donations.`);\\n        forceUnlockDonations = false;\\n        factionRepRequired = highestRepAug = mostExpensiveAugByFaction[factionName];\\n    }\\n\\n    if (ns.getPlayer().workRepGained > 0) // If we're currently doing faction work, stop to collect reputation and find out how much is remaining\\n        await getNsDataThroughFile(ns, `ns.stopAction()`, '/Temp/stop-action.txt');\\n    let currentReputation = ns.getFactionRep(factionName);\\n    // If the best faction aug is within 10% of our current rep, grind all the way to it so we can get it immediately, regardless of our current rep target\\n    if (forceBestAug || highestRepAug <= 1.1 * Math.max(currentReputation, factionRepRequired)) {\\n        forceBestAug = true;\\n        factionRepRequired = Math.max(highestRepAug, factionRepRequired);\\n    }\\n\\n    if (currentReputation >= factionRepRequired)\\n        return ns.print(`Faction \\\"${factionName}\\\" required rep of ${Math.round(factionRepRequired).toLocaleString()} has already been attained ` +\\n            `(Current rep: ${Math.round(currentReputation).toLocaleString()}). Skipping working for faction...`)\\n\\n    ns.print(`Faction \\\"${factionName}\\\" Highest Aug Req: ${highestRepAug.toLocaleString()}, Current Favor (` +\\n        `${startingFavor?.toFixed(2)}/${repToDonate?.toFixed(2)}) Req: ${Math.round(favorRepRequired).toLocaleString()}`);\\n    if (options['invites-only'])\\n        return ns.print(`--invites-only Skipping working for faction...`);\\n    if (prioritizeInvites && !forceUnlockDonations && !forceBestAug && !forceRep)\\n        return ns.print(`--prioritize-invites Skipping working for faction for now...`);\\n\\n    let lastStatusUpdateTime = 0, lastRepMeasurement = ns.getFactionRep(factionName), repGainRatePerMs = 0;\\n    while ((currentReputation = ns.getFactionRep(factionName)) < factionRepRequired) {\\n        const factionWork = await detectBestFactionWork(ns, factionName); // Before each loop - determine what work gives the most rep/second for our current stats\\n        if (await getNsDataThroughFile(ns, `ns.workForFaction('${factionName}', '${factionWork}',  ${shouldFocusAtWork})`, '/Temp/work-for-faction.txt')) {\\n            if (shouldFocusAtWork) ns.tail(); // Force a tail window open to help the user kill this script if they accidentally closed the tail window and don't want to keep stealing focus\\n            currentReputation = ns.getFactionRep(factionName); // Update to capture the reputation earned when restarting work\\n            if (currentReputation > factionRepRequired) break;\\n            lastActionRestart = Date.now(); repGainRatePerMs = ns.getPlayer().workRepGainRate; // Note: In order to get an accurate rep gain rate, we must wait for the first game tick (200ms) after starting work\\n            while (repGainRatePerMs === ns.getPlayer().workRepGainRate && (Date.now() - lastActionRestart < 400)) await ns.sleep(1); // TODO: Remove this if/when the game bug is fixed\\n            repGainRatePerMs = ns.getPlayer().workRepGainRate / 200 * (hasFocusPenaly && !shouldFocusAtWork ? 0.8 : 1 /* penalty if we aren't focused but don't have the aug to compensate */);\\n        } else {\\n            announce(ns, `Something went wrong, failed to start \\\"${factionWork}\\\" work for faction \\\"${factionName}\\\" (Is gang faction, or not joined?)`, 'error');\\n            break;\\n        }\\n        let status = `Doing '${factionWork}' work for \\\"${factionName}\\\" until ${Math.round(factionRepRequired).toLocaleString()} rep.`;\\n        if (lastFactionWorkStatus != status || (Date.now() - lastStatusUpdateTime) > statusUpdateInterval) {\\n            // Actually measure how much reputation we've earned since our last update, to give a more accurate ETA including external sources of rep\\n            let measuredRepGainRatePerMs = (ns.getFactionRep(factionName) - lastRepMeasurement) / (Date.now() - lastStatusUpdateTime);\\n            if (currentReputation > lastRepMeasurement + statusUpdateInterval * repGainRatePerMs * 2) // Detect a sudden increase in rep, but don't use it to update the expected rate\\n                ns.print('SUCCESS: Reputation spike! (Perhaps a coding contract was just solved?) ETA reduced.');\\n            else if (lastStatusUpdateTime != 0 && Math.abs(measuredRepGainRatePerMs - repGainRatePerMs) / repGainRatePerMs > 0.05) // Stick to the game-provided rate if we measured something within 5% of that number\\n                repGainRatePerMs = measuredRepGainRatePerMs; // If we measure a significantly different rep gain rate, this could be due to external sources of rep (e.g. sleeves) - account for it in the ETA\\n            lastStatusUpdateTime = Date.now(); lastRepMeasurement = currentReputation;\\n            const eta_milliseconds = (factionRepRequired - currentReputation) / repGainRatePerMs;\\n            ns.print((lastFactionWorkStatus = status) + ` Currently at ${Math.round(currentReputation).toLocaleString()}, earning ${formatNumberShort(repGainRatePerMs * 1000)} rep/sec. ` +\\n                (hasFocusPenaly && !shouldFocusAtWork ? 'after 20% non-focus Penalty ' : '') + `(ETA: ${formatDuration(eta_milliseconds)})`);\\n        }\\n        await tryBuyReputation(ns);\\n        await ns.sleep(restartWorkInteval);\\n        if (!forceBestAug && !forceRep) { // Detect our rep requirement decreasing (e.g. if we exported for our daily +1 faction rep)\\n            let currentFavor = await getCurrentFactionFavour(ns, factionName);\\n            if (currentFavor > startingFavor) {\\n                startingFavor = dictFactionFavors[factionName] = currentFavor;\\n                favorRepRequired = Math.max(0, repToFavour(repToDonate) - repToFavour(startingFavor));\\n                factionRepRequired = forceUnlockDonations ? favorRepRequired : Math.min(highestRepAug, favorRepRequired);\\n            }\\n        }\\n        let workRepGained = ns.getPlayer().workRepGained; // Try to align ourselves to the next game tick so we aren't missing out on a few ms of rep\\n        while (workRepGained === ns.getPlayer().workRepGainRate && (Date.now() - lastActionRestart < 200)) await ns.sleep(1);\\n        // If we explicitly stop working, we immediately get our updated faction rep, otherwise it lags by 1 loop (until after next time we call workForFaction)\\n        if (currentReputation + ns.getPlayer().workRepGained >= factionRepRequired)\\n            await getNsDataThroughFile(ns, `ns.stopAction()`, '/Temp/stop-action.txt'); // We're close - stop working so our current rep is accurate when we check the while loop condition\\n    }\\n    if (currentReputation >= factionRepRequired)\\n        ns.print(`Attained ${Math.round(currentReputation).toLocaleString()} rep with \\\"${factionName}\\\" (needed ${factionRepRequired.toLocaleString()}).`);\\n    return currentReputation >= factionRepRequired;\\n}\\n\\n/** @param {NS} ns \\n * Try all work types and see what gives the best rep gain with this faction! */\\nasync function detectBestFactionWork(ns, factionName) {\\n    let bestWork, bestRepRate = 0;\\n    for (const work of [\\\"security\\\", \\\"field\\\", \\\"hacking\\\"]) {\\n        if (!await getNsDataThroughFile(ns, `ns.workForFaction('${factionName}', '${work}',  ${shouldFocusAtWork})`, '/Temp/work-for-faction.txt')) {\\n            //ns.print(`\\\"${factionName}\\\" work ${work} not supported.`);\\n            continue; // This type of faction work must not be supported\\n        }\\n        const currentRepGainRate = ns.getPlayer().workRepGainRate;\\n        //ns.print(`\\\"${factionName}\\\" work ${work} provides ${formatNumberShort(currentRepGainRate)} rep rate`);\\n        if (currentRepGainRate > bestRepRate) {\\n            bestRepRate = currentRepGainRate;\\n            bestWork = work;\\n        }\\n    }\\n    return bestWork;\\n}\\n\\n/** @param {NS} ns \\n *  @param {Array<string>} megacorpFactionsInPreferredOrder - The list of all corporate factions to work for, sorted in the order they should be worked for\\n *  @param {Array<string>} megacorpFactionsInPreferredOrder - The list of all corporate factions, sorted in the order they should be worked for\\n * */\\nexport async function workForAllMegacorps(ns, megacorpFactionsInPreferredOrder, alsoWorkForCompanyFactions, oneCompanyFactionAtATime) {\\n    let player = ns.getPlayer();\\n    if (player.hacking < 225)\\n        return ns.print(`Hacking Skill ${player.hacking} is to low to work for any megacorps (min req. 225).`);\\n    let joinedCompanyFactions = player.factions.filter(f => megacorpFactionsInPreferredOrder.includes(f)); // Company factions we've already joined\\n    if (joinedCompanyFactions.length > 0)\\n        ns.print(`${joinedCompanyFactions.length} companies' factions have already been joined: ${joinedCompanyFactions.join(\\\", \\\")}`)\\n    let doFactionWork = alsoWorkForCompanyFactions && oneCompanyFactionAtATime;\\n    // Earn each obtainabl megacorp faction invite, and optionally also grind faction rep\\n    for (const factionName of megacorpFactionsInPreferredOrder) {\\n        if ((await workForMegacorpFactionInvite(ns, factionName, doFactionWork)) && doFactionWork)\\n            await workForSingleFaction(ns, factionName);\\n    }\\n    if (alsoWorkForCompanyFactions && !oneCompanyFactionAtATime) { // If configured, start grinding rep with company factions we've joined\\n        ns.print(`Done working for companies, now working for all incomplete company factions...`);\\n        for (const factionName of megacorpFactionsInPreferredOrder)\\n            await workForSingleFaction(ns, factionName);\\n    }\\n}\\n\\n/** If we're wealthy, hashes have relatively little monetary value, spend hacknet-node hashes on contracts to gain rep faster\\n * @param {NS} ns */\\nexport async function tryBuyReputation(ns) {\\n    if (options['no-coding-contracts']) return;\\n    if (ns.getPlayer().money > 100E9) { // If we're wealthy, hashes have relatively little monetary value, spend hacknet-node hashes on contracts to gain rep faster\\n        let spentHashes = await getNsDataThroughFile(ns, 'ns.hacknet.numHashes() + ns.hacknet.spendHashes(\\\"Generate Coding Contract\\\") - ns.hacknet.numHashes()', '/Temp/spend-hacknet-hashes.txt');\\n        if (spentHashes > 0) {\\n            announce(ns, `Generated a new coding contract for ${formatNumberShort(Math.round(spentHashes / 100) * 100)} hashes`, 'success');\\n        }\\n    }\\n}\\n\\n// Used when working for a company to see if their server has been backdoored. If so, we can expect an increase in rep-gain (used for predicting an ETA)\\nconst serverByCompany = { \\\"Bachman & Associates\\\": \\\"b-and-a\\\", \\\"ECorp\\\": \\\"ecorp\\\", \\\"Clarke Incorporated\\\": \\\"clarkinc\\\", \\\"OmniTek Incorporated\\\": \\\"omnitek\\\", \\\"NWO\\\": \\\"nwo\\\", \\\"Blade Industries\\\": \\\"blade\\\", \\\"MegaCorp\\\": \\\"megacorp\\\", \\\"KuaiGong International\\\": \\\"kuai-gong\\\", \\\"Fulcrum Technologies\\\": \\\"fulcrumtech\\\", \\\"Four Sigma\\\": \\\"4sigma\\\" };\\n\\n/** @param {NS} ns */\\nexport async function workForMegacorpFactionInvite(ns, factionName, waitForInvite) {\\n    const companyConfig = companySpecificConfigs.find(c => c.name == factionName); // For anything company-specific\\n    const companyName = companyConfig?.companyName || factionName; // Name of the company that gives the faction (same for all but Fulcrum)\\n    const statModifier = companyConfig?.statModifier || 0; // How much e.g. Hack / Cha is needed for a promotion above the base requirement for the job\\n    const repRequiredForFaction = companyConfig?.repRequiredForFaction || 200000; // Required to unlock the faction\\n\\n    let player = ns.getPlayer();\\n    if (player.factions.includes(factionName))\\n        return false; // Only return true if we did work to earn a new faction invite\\n    if ((await getNsDataThroughFile(ns, 'ns.checkFactionInvitations()', '/Temp/player-faction-invites.txt')).includes(factionName))\\n        return waitForInvite ? await waitForFactionInvite(ns, factionName) : false;\\n    // TODO: In some scenarios, the best career path may require combat stats, this hard-codes the optimal path for hack stats\\n    const itJob = jobs.find(j => j.name == \\\"it\\\");\\n    const softwareJob = jobs.find(j => j.name == \\\"software\\\");\\n    if (itJob.reqHack[0] + statModifier > player.hacking) // We don't qualify to work for this company yet if we can't meet IT qualifications (lowest there are)\\n        return ns.print(`Cannot yet work for \\\"${companyName}\\\": Need Hack ${itJob.reqHack[0] + statModifier} to get hired (current Hack: ${player.hacking});`);\\n    ns.print(`Going to work for Company \\\"${companyName}\\\" next...`)\\n    let currentReputation, currentRole = \\\"\\\", currentJobTier = -1; // TODO: Derive our current position and promotion index based on player.jobs[companyName]\\n    let lastStatus = \\\"\\\", lastStatusUpdateTime = 0, lastRepMeasurement = ns.getCompanyRep(companyName), repGainRatePerMs = 0;\\n    let studying = false, working = false, backdoored = false;\\n    while (((currentReputation = ns.getCompanyRep(companyName)) < repRequiredForFaction) && !player.factions.includes(factionName)) {\\n        player = ns.getPlayer();\\n        // Determine the next promotion we're striving for (the sooner we get promoted, the faster we can earn company rep)\\n        const getTier = job => Math.min(job.reqRep.filter(r => r <= currentReputation).length, job.reqHack.filter(h => h <= player.hacking).length, job.reqCha.filter(c => c <= player.charisma).length) - 1;\\n        // It's generally best to hop back-and-forth between it and software engineer career paths (rep gain is about the same, but better money from software)\\n        const qualifyingItTier = getTier(itJob), qualifyingSoftwareTier = getTier(softwareJob);\\n        const bestJobTier = Math.max(qualifyingItTier, qualifyingSoftwareTier); // Go with whatever job promotes us higher\\n        const bestRoleName = qualifyingItTier > qualifyingSoftwareTier ? \\\"it\\\" : \\\"software\\\"; // If tied for qualifying tier, go for software\\n        if (currentJobTier < bestJobTier || currentRole != bestRoleName) { // We are ready for a promotion, ask for one!\\n            if (await getNsDataThroughFile(ns, `ns.applyToCompany('${companyName}','${bestRoleName}')`, '/Temp/apply-to-company.txt'))\\n                announce(ns, `Successfully applied to \\\"${companyName}\\\" for a '${bestRoleName}' Job or Promotion`, 'success');\\n            else if (currentJobTier !== -1) // Unless we just restarted \\\"work-for-factions\\\" and lost track of our current job, this is an error\\n                announce(ns, `Application to \\\"${companyName}\\\" for a '${bestRoleName}' Job or Promotion failed.`, 'error');\\n            currentJobTier = bestJobTier; // API to apply for a job immediately gives us the highest tier we qualify for\\n            currentRole = bestRoleName;\\n            player = ns.getPlayer();\\n        }\\n        const currentJob = player.jobs[companyName];\\n        const nextJobTier = currentRole == \\\"it\\\" ? currentJobTier : currentJobTier + 1;\\n        const nextJobName = currentRole == \\\"it\\\" || nextJobTier >= itJob.reqRep.length ? \\\"software\\\" : \\\"it\\\";\\n        const nextJob = nextJobName == \\\"it\\\" ? itJob : softwareJob;\\n        const requiredHack = nextJob.reqHack[nextJobTier] === 0 ? 0 : nextJob.reqHack[nextJobTier] + statModifier; // Stat modifier only applies to non-zero reqs\\n        const requiredCha = nextJob.reqCha[nextJobTier] === 0 ? 0 : nextJob.reqCha[nextJobTier] + statModifier; // Stat modifier only applies to non-zero reqs\\n        const requiredRep = nextJob.reqRep[nextJobTier]; // No modifier on rep requirements\\n        let status = `Next promotion ('${nextJobName}' #${nextJobTier}) at Hack:${requiredHack} Cha:${requiredCha} Rep:${requiredRep?.toLocaleString()}` +\\n            (repRequiredForFaction > nextJob.reqRep[nextJobTier] ? '' : `, but we won't need it, because we'll sooner hit ${repRequiredForFaction.toLocaleString()} reputation to unlock company faction \\\"${factionName}\\\"!`);\\n        // We should only study at university if every other requirement is met but Charisma\\n        if (currentReputation >= requiredRep && player.hacking >= requiredHack && player.charisma < requiredCha && !noStudying) {\\n            status = `Studying at ZB university until Cha reaches ${requiredCha}...\\\\n` + status;\\n            if (studying && player.className !== 'taking a Leadership course' && player.className !== 'Leadership' /* In case className is made more intuitive in the future */) {\\n                announce(ns, `Leadership studies were interrupted. player.className=\\\"${player.className}\\\" Restarting in 5 seconds...`, 'warning');\\n                studying = false; // If something external has interrupted our studies, take note\\n                ns.tail(); // Force a tail window open to help the user kill this script if they accidentally closed the tail window and don't want to keep studying\\n            }\\n            if (!studying) { // Study at ZB university if CHA is the limiter.\\n                if (await studyForCharisma(ns))\\n                    working = !(studying = true);\\n            }\\n            if (requiredCha - player.charisma > 10) { // Try to spend hacknet-node hashes on university upgrades while we've got a ways to study to make it go faster\\n                let spentHashes = await getNsDataThroughFile(ns, 'ns.hacknet.numHashes() + ns.hacknet.spendHashes(\\\"Improve Studying\\\") - ns.hacknet.numHashes()', '/Temp/spend-hacknet-hashes.txt');\\n                if (spentHashes > 0) {\\n                    announce(ns, 'Bought a \\\"Improve Studying\\\" upgrade.', 'success');\\n                    await studyForCharisma(ns); // We must restart studying for the upgrade to take effect.\\n                }\\n            }\\n        } else if (studying) { // If we no longer need to study and we currently are, turn off study mode and get back to work!\\n            studying = false;\\n            continue; // Restart the loop so we refresh our promotion index and apply for a promotion before working more\\n        }\\n        await tryBuyReputation(ns);\\n\\n        // Regardless of the earlier promotion logic, always try for a promotion to make sure we don't miss a promotion due to buggy logic \\n        if (await getNsDataThroughFile(ns, `ns.applyToCompany('${companyName}','${currentRole}')`, '/Temp/apply-to-company.txt'))\\n            announce(ns, `Unexpected '${currentRole}' promotion from ${currentJob} to \\\"${ns.getPlayer().jobs[companyName]}. Promotion logic must be off...\\\"`, 'warning');\\n        // TODO: If we ever get rid of the below periodic restart-work, we will need to monitor for interruptions with player.workType == e.g. \\\"Work for Company\\\"\\n        if (!studying && (!working || (Date.now() - lastActionRestart >= restartWorkInteval) /* We must periodically restart work to collect Rep Gains */)) {\\n            // Work for the company (assume daemon is grinding hack XP as fast as it can, so no point in studying for that)\\n            if (await getNsDataThroughFile(ns, `ns.workForCompany('${companyName}',  ${shouldFocusAtWork})`, '/Temp/work-for-company.txt')) {\\n                working = true;\\n                if (shouldFocusAtWork) ns.tail(); // Force a tail window open to help the user kill this script if they accidentally closed the tail window and don't want to keep stealing focus\\n                currentReputation = ns.getCompanyRep(companyName); // Update to capture the reputation earned when restarting work\\n                lastActionRestart = Date.now(); repGainRatePerMs = ns.getPlayer().workRepGainRate; // Note: In order to get an accurate rep gain rate, we must wait for the first game tick (200ms) after starting work\\n                while (repGainRatePerMs === ns.getPlayer().workRepGainRate && (Date.now() - lastActionRestart < 400)) await ns.sleep(1); // TODO: Remove this if/when the game bug is fixed\\n                repGainRatePerMs = ns.getPlayer().workRepGainRate / 200 * (hasFocusPenaly && !shouldFocusAtWork ? 0.8 : 1 /* penalty if we aren't focused but don't have the aug to compensate */);\\n            } else {\\n                announce(ns, `Something went wrong, failed to start working for company \\\"${companyName}\\\".`, 'error');\\n                break;\\n            }\\n        }\\n        if (lastStatus != status || (Date.now() - lastStatusUpdateTime) > statusUpdateInterval) {\\n            if (!backdoored) // Check if an external script has backdoored this company's server yet. If so, it affects our ETA. (Don't need to check again once we discover it is)\\n                backdoored = await getNsDataThroughFile(ns, `ns.getServer('${serverByCompany[companyName]}').backdoorInstalled`, '/Temp/company-is-backdoored.txt');\\n            const cancellationMult = backdoored ? 0.75 : 0.5; // We will lose some of our gained reputation when we stop working early\\n            repGainRatePerMs *= cancellationMult;\\n            // Actually measure how much reputation we've earned since our last update, to give a more accurate ETA including external sources of rep\\n            let measuredRepGainRatePerMs = (ns.getCompanyRep(companyName) - lastRepMeasurement) / (Date.now() - lastStatusUpdateTime);\\n            if (currentReputation > lastRepMeasurement + statusUpdateInterval * repGainRatePerMs * 2) // Detect a sudden increase in rep, but don't use it to update the expected rate\\n                ns.print('SUCCESS: Reputation spike! (Perhaps a coding contract was just solved?) ETA reduced.');\\n            else if (lastStatusUpdateTime != 0 && Math.abs(measuredRepGainRatePerMs - repGainRatePerMs) / repGainRatePerMs > 0.05) // Stick to the game-provided rate if we measured something within 5% of that number\\n                repGainRatePerMs = measuredRepGainRatePerMs; // If we measure a significantly different rep gain rate, this could be due to external sources of rep (e.g. sleeves) - account for it in the ETA\\n            lastStatusUpdateTime = Date.now(); lastRepMeasurement = currentReputation;\\n            const eta_milliseconds = ((requiredRep || repRequiredForFaction) - currentReputation) / repGainRatePerMs;\\n            player = ns.getPlayer();\\n            ns.print(`Currently a \\\"${player.jobs[companyName]}\\\" ('${currentRole}' #${currentJobTier}) for \\\"${companyName}\\\" earning ${formatNumberShort(repGainRatePerMs * 1000)} rep/sec. ` +\\n                `(after ${(100 * (1 - cancellationMult))?.toFixed(0)}% early-quit penalty` + (hasFocusPenaly && !shouldFocusAtWork ? ' and 20% non-focus Penalty' : '') + `)\\\\n` +\\n                `${status}\\\\nCurrent player stats are Hack:${player.hacking} ${player.hacking >= (requiredHack || 0) ? '✓' : '✗'} ` +\\n                `Cha:${player.charisma} ${player.charisma >= (requiredCha || 0) ? '✓' : '✗'} ` +\\n                `Rep:${Math.round(currentReputation).toLocaleString()} ${currentReputation >= (requiredRep || repRequiredForFaction) ? '✓' : `✗ (ETA: ${formatDuration(eta_milliseconds)})`}`);\\n            lastStatus = status;\\n        }\\n        await ns.sleep(loopSleepInterval); // Sleep now and wake up periodically and stop working to check our stats / reputation progress\\n    }\\n    // Return true if we succeeded, false otherwise.\\n    if (currentReputation >= repRequiredForFaction) {\\n        ns.print(`Attained ${repRequiredForFaction.toLocaleString()} rep with \\\"${companyName}\\\".`);\\n        if (!player.factions.includes(factionName) && waitForInvite)\\n            return await waitForFactionInvite(ns, factionName);\\n        return true;\\n    }\\n    ns.print(`Stopped working for \\\"${companyName}\\\" repRequiredForFaction: ${repRequiredForFaction.toLocaleString()} ` +\\n        `currentReputation: ${Math.round(currentReputation).toLocaleString()} inFaction: ${player.factions.includes(factionName)}`);\\n    return false;\\n}\",\"filename\":\"work-for-factions.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"helpers.js\",\"url\":\"blob:https://danielyxie.github.io/4c7b6a38-3c57-4fca-ab51-ce237f8ab8c8\",\"moduleSequenceNumber\":142},{\"filename\":\"work-for-factions.js\",\"url\":\"blob:https://danielyxie.github.io/fdc6b753-5e91-4118-9fdc-710ac0fd582a\",\"moduleSequenceNumber\":316}],\"dependents\":[],\"ramUsage\":5.3,\"server\":\"home\",\"moduleSequenceNumber\":316,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getFactionRep\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getCompanyRep\",\"cost\":1},{\"type\":\"fn\",\"name\":\"run\",\"cost\":1},{\"type\":\"fn\",\"name\":\"isRunning\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns \\n * Wait until an appointed time and then execute a grow. */\\nexport async function main(ns) {\\n    //args[0: target, 1: desired start time, 2: expected end, 3: expected duration, 4: description, 5: manipulate stock, 6: loop]\\n    const sleepDuration = ns.args.length > 1 ? ns.args[1] - Date.now() : 0;\\n    const expectedDuration = ns.args.length > 3 ? ns.args[3] : 0;\\n    const manipulateStock = ns.args.length > 5 && ns.args[5] ? true : false;\\n    const loop = ns.args.length > 6 ? ns.args[6] : false;\\n    const cycleTime = expectedDuration / 3.2 * 4;\\n    if (sleepDuration > 0)\\n        await ns.sleep(sleepDuration);\\n    do {\\n        await ns.grow(ns.args[0], { stock: manipulateStock });\\n        if (loop) await ns.sleep(cycleTime - expectedDuration);\\n    } while (loop);\\n}\",\"filename\":\"/Remote/grow-target.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/Remote/grow-target.js\",\"url\":\"blob:https://danielyxie.github.io/df44db7b-8851-4cb4-96fa-f25581098aa5\",\"moduleSequenceNumber\":281}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"home\",\"moduleSequenceNumber\":281,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns \\n * Wait until an appointed time and then execute a hack. */\\nexport async function main(ns) {\\n    //args[0: target, 1: desired start time, 2: expected end, 3: expected duration, 4: description, 5: manipulate stock, 6: disable toast warnings, 7: loop]\\n    const sleepDuration = ns.args.length > 1 ? ns.args[1] - Date.now() : 0;\\n    const expectedDuration = ns.args.length > 3 ? ns.args[3] : 0;\\n    const manipulateStock = ns.args.length > 5 && ns.args[5] ? true : false;\\n    const disableToastWarnings = ns.args.length > 6 ? ns.args[6] : false;\\n    const loop = ns.args.length > 7 ? ns.args[7] : false;\\n    let cycleTime = expectedDuration * 4;\\n    if (cycleTime < 100) cycleTime = Math.max(1, Math.min(5, cycleTime * 2)); // For fast hacking loops, inject a delay on hack in case grow/weaken are running a bit slow.\\n    if (sleepDuration > 0)\\n        await ns.sleep(sleepDuration);\\n    do {\\n        if (!await ns.hack(ns.args[0], { stock: manipulateStock }) && !disableToastWarnings)\\n            ns.toast(`Warning, hack stole 0 money. Might be a misfire. ${JSON.stringify(ns.args)}`, 'warning');\\n        if (loop) await ns.sleep(cycleTime - expectedDuration);\\n    } while (loop);\\n}\",\"filename\":\"/Remote/hack-target.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/Remote/hack-target.js\",\"url\":\"blob:https://danielyxie.github.io/6619906c-0b7d-4442-88a6-c319c4903ec6\",\"moduleSequenceNumber\":4494}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"home\",\"moduleSequenceNumber\":157,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns \\n * Wait until an appointed time and then execute a manual hack. */\\nexport async function main(ns) {\\n    //args[0: target, 1: desired start time, 2: expected end, 3: expected duration, 4: description, 5: manipulate stock (N/A ignored), 6: disable toast warnings, 7: loop]\\n    const sleepDuration = ns.args.length > 1 ? ns.args[1] - Date.now() : 0;\\n    const expectedDuration = ns.args.length > 3 ? ns.args[3] : 0;\\n    const manipulateStock = ns.args.length > 5 && ns.args[5] ? true : false;\\n    const disableToastWarnings = ns.args.length > 6 ? ns.args[6] : false;\\n    const loop = ns.args.length > 7 ? ns.args[7] : false;\\n    let cycleTime = expectedDuration * 4;\\n    if (cycleTime < 100) cycleTime = Math.max(1, Math.min(5, cycleTime * 2)); // For fast hacking loops, inject a delay on hack in case grow/weaken are running a bit slow.\\n    if (sleepDuration > 0)\\n        await ns.sleep(sleepDuration);\\n    do {\\n        if (!await ns.manualHack() && !disableToastWarnings)\\n            ns.toast(`Warning, hack stole 0 money. Might be a misfire. ${JSON.stringify(ns.args)}`, 'warning');\\n        if (loop) await ns.sleep(cycleTime - expectedDuration);\\n    } while (loop);\\n}\",\"filename\":\"/Remote/manualhack-target.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.6,\"server\":\"home\",\"moduleSequenceNumber\":158,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"manualHack\",\"cost\":2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tawait ns.share()\\n}\",\"filename\":\"/Remote/share.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/Remote/share.js\",\"url\":\"blob:https://danielyxie.github.io/b397c921-f131-4521-a341-795036e59818\",\"moduleSequenceNumber\":268}],\"dependents\":[],\"ramUsage\":4,\"server\":\"home\",\"moduleSequenceNumber\":268,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns \\n * Wait until an appointed time and then execute a weaken. */\\nexport async function main(ns) {\\n    //args[0: target, 1: desired start time, 2: expected end, 3: expected duration, 4: description, 5: disable toast warnings, 6: loop]\\n    let sleepDuration = ns.args[1] - Date.now();\\n    const disableToastWarnings = ns.args.length > 5 ? ns.args[5] : false;\\n    const loop = ns.args.length > 6 ? ns.args[6] : false;\\n    if (sleepDuration > 0)\\n        await ns.sleep(sleepDuration);\\n    do {\\n        if (!await ns.weaken(ns.args[0]) && !disableToastWarnings)\\n            ns.toast(`Warning, weaken reduced 0 security. Might be a misfire. ${JSON.stringify(ns.args)}`, 'warning');\\n    } while (loop);\\n}\",\"filename\":\"/Remote/weak-target.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/Remote/weak-target.js\",\"url\":\"blob:https://danielyxie.github.io/bcebdb84-fb57-4fc0-a07d-ec4c92c7b604\",\"moduleSequenceNumber\":283}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"home\",\"moduleSequenceNumber\":283,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getNsDataThroughFile, getFilePath } from 'helpers.js'\\n\\nlet spawnDelay = 50; // Delay to allow time for `installBackdoor` to start running before a background script connects back to 'home'\\n\\n/** @param {NS} ns \\n * Scan all servers, backdoor anything that can be backdoored, and leave a file to indicate it's been done\\n * Requires: SF-4.1 **/\\nexport let main = async ns => {\\n    let anyConnected = false;\\n    try {\\n        let servers = [\\\"home\\\"],\\n            routes = { home: [\\\"home\\\"] },\\n            myHackingLevel = ns.getHackingLevel();\\n        // Scan all servers and keep track of the path to get to them\\n        ns.disableLog(\\\"scan\\\");\\n        for (let i = 0, j; i < servers.length; i++)\\n            for (j of ns.scan(servers[i]))\\n                if (!servers.includes(j)) servers.push(j), routes[j] = routes[servers[i]].slice(), routes[j].push(j);\\n        // Filter out servers that cannot or should not be hacked / backdoored\\n        ns.disableLog(\\\"getServerRequiredHackingLevel\\\");\\n        let hackableServers = servers.filter(s => s != \\\"home\\\" && !s.includes(\\\"hacknet-\\\") && !s.includes(\\\"daemon\\\")) /*or whatever you name your purchased servers*/\\n        ns.print(`${hackableServers.length} not-owned servers on the network.`);\\n        ns.print(`${hackableServers.filter(s => ns.hasRootAccess(s)).length} servers are currently rooted.`);\\n        ns.print(`${hackableServers.filter(s => myHackingLevel > ns.getServerRequiredHackingLevel(s)).length} servers are within our hack level (${myHackingLevel}).`);\\n        ns.print(`${hackableServers.filter(s => myHackingLevel > ns.getServerRequiredHackingLevel(s) && ns.hasRootAccess(s)).length} rooted servers are within our hack level (${myHackingLevel})`);\\n\\n        let toBackdoor = await getNsDataThroughFile(ns, `${JSON.stringify(hackableServers)}.filter(s => !ns.getServer(s).backdoorInstalled)`, '/Temp/servers-to-backdoor.txt');\\n        let count = toBackdoor.length;\\n        ns.print(`${count} servers have yet to be backdoored.`);\\n        if (count == 0) return;\\n\\n        ns.print(`${toBackdoor.filter(s => ns.hasRootAccess(s)).length} of ${count} servers to backdoor are currently rooted.`);\\n        toBackdoor = toBackdoor.filter(s => myHackingLevel > ns.getServerRequiredHackingLevel(s));\\n        ns.print(`${toBackdoor.length} of ${count} servers to backdoor are within our hack level (${myHackingLevel}).`);\\n        toBackdoor = toBackdoor.filter(s => ns.hasRootAccess(s));\\n        ns.print(`${toBackdoor.length} of ${count} servers to be backdoored are rooted and within our hack level (${myHackingLevel})`);\\n\\n        for (const server of toBackdoor) {\\n            ns.print(`Hopping to ${server}`);\\n            anyConnected = true;\\n            for (let hop of routes[server])\\n                ns.connect(hop);\\n            if (server === \\\"w0r1d_d43m0n\\\") {\\n                ns.alert(\\\"Ready to hack w0r1d_d43m0n!\\\");\\n                while (true) await ns.sleep(10000); // Sleep forever so the script isn't run multiple times to create multiple overlapping alerts\\n            }\\n            ns.print(`Installing backdoor on \\\"${server}\\\"...`);\\n            // Kick off a separate script that will run backdoor before we connect to home.\\n            var pid = ns.run(getFilePath('/Tasks/backdoor-all-servers.js.backdoor-one.js'), 1, server);\\n            if (pid === 0)\\n                return ns.print(`Couldn't initiate a new backdoor of \\\"${server}\\\"\\\" (insufficient RAM?). Will try again later.`);\\n            await ns.sleep(spawnDelay); // Wait some time for the external backdoor script to initiate its backdoor of the current connected server\\n            ns.connect(\\\"home\\\");\\n        }\\n    } catch (err) {\\n        ns.tprint(String(err));\\n    } finally {\\n        if (anyConnected)\\n            ns.connect(\\\"home\\\");\\n    }\\n};\",\"filename\":\"/Tasks/backdoor-all-servers.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"helpers.js\",\"url\":\"blob:https://danielyxie.github.io/671ff0fb-eb9f-47bf-813e-84fa8676974a\",\"moduleSequenceNumber\":142},{\"filename\":\"/Tasks/backdoor-all-servers.js\",\"url\":\"blob:https://danielyxie.github.io/72ca1a95-0822-4b84-b4cb-27acb5e70154\",\"moduleSequenceNumber\":320}],\"dependents\":[],\"ramUsage\":5.1,\"server\":\"home\",\"moduleSequenceNumber\":320,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"connect\",\"cost\":2},{\"type\":\"fn\",\"name\":\"run\",\"cost\":1},{\"type\":\"fn\",\"name\":\"isRunning\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let target = ns.args.length > 0 ? ns.args[0] : '(unspecified server)';\\n    try {\\n        await ns.installBackdoor();\\n        ns.toast(`Backdoored ${target}`, 'success');\\n    }\\n    catch (err) {\\n        ns.tprint(`Error while running backdoor (intended for ${target}): ${String(err)}`);\\n        throw (err);\\n    }\\n}\",\"filename\":\"/Tasks/backdoor-all-servers.js.backdoor-one.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/Tasks/backdoor-all-servers.js.backdoor-one.js\",\"url\":\"blob:https://danielyxie.github.io/11c58a91-d1a8-4d0d-a0a6-9e9ee0b6672a\",\"moduleSequenceNumber\":311}],\"dependents\":[],\"ramUsage\":3.6,\"server\":\"home\",\"moduleSequenceNumber\":162,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"installBackdoor\",\"cost\":2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getFilePath, getNsDataThroughFile, disableLogs, scanAllServers } from 'helpers.js'\\nconst scriptSolver = getFilePath(\\\"/Tasks/contractor.js.solver.js\\\");\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    disableLogs(ns, [\\\"scan\\\"]);\\n    ns.print(\\\"Getting server list...\\\");\\n    const servers = scanAllServers(ns);\\n    ns.print(`Got ${servers.length} servers. Searching for contracts on each...`);\\n    // Retrieve all contracts and convert them to objects with the required information to solve\\n    const contractsDb = servers.map(hostname => ({ hostname, contracts: ns.ls(hostname, '.cct') }))\\n        .filter(o => o.contracts.length > 0)\\n        .map(o => o.contracts.map(contract => ({ contract, hostname: o.hostname }))).flat();\\n    if (contractsDb.length == 0)\\n        return ns.print(\\\"Found no contracts to solve.\\\");\\n\\n    // Spawn temporary scripts to gather the remainder of contract data required for solving\\n    ns.print(`Found ${contractsDb.length} contracts to solve. Gathering contract data via separate scripts...\\\"`);\\n    let contractsDictCommand = command => `Object.fromEntries(${JSON.stringify(contractsDb)}.map(c => [c.contract, ${command}]))`;\\n    let dictContractTypes = await getNsDataThroughFile(ns, contractsDictCommand('ns.codingcontract.getContractType(c.contract, c.hostname)'), '/Temp/contract-types.txt');\\n    let dictContractData = await getNsDataThroughFile(ns, contractsDictCommand('ns.codingcontract.getData(c.contract, c.hostname)'), '/Temp/contract-data.txt');\\n    contractsDb.forEach(c => c.type = dictContractTypes[c.contract]);\\n    contractsDb.forEach(c => c.data = dictContractData[c.contract]);\\n\\n    // Let this script die to free up ram, and start up a new script (after a delay) that will solve all these contracts using the minimum ram footprint of 11.6 GB\\n    ns.run(getFilePath('/Tasks/run-with-delay.js'), 1, scriptSolver, 1, JSON.stringify(contractsDb));\\n}\",\"filename\":\"/Tasks/contractor.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"helpers.js\",\"url\":\"blob:https://danielyxie.github.io/17223127-332a-48a1-a1f0-a5c28b87f3e7\",\"moduleSequenceNumber\":142},{\"filename\":\"/Tasks/contractor.js\",\"url\":\"blob:https://danielyxie.github.io/258ec690-ce72-410b-8131-048ae4e835a0\",\"moduleSequenceNumber\":319}],\"dependents\":[],\"ramUsage\":3.1,\"server\":\"home\",\"moduleSequenceNumber\":319,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"run\",\"cost\":1},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"isRunning\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// This contract solver has the bare-minimum footprint of 1.6 GB (base) + 10 GB (ns.codingcontract.attempt)\\n// It does this by requiring all contract information being gathered in advance and passed in as a JSON blob argument.\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    if (ns.args.length < 1)\\n        ns.tprint('Contractor solver was incorrectly invoked without arguments.')\\n    var contractsDb = JSON.parse(ns.args[0]);\\n    for (const contractInfo of contractsDb) {\\n        const answer = findAnswer(contractInfo)\\n        if (answer != null) {\\n            const solvingResult = ns.codingcontract.attempt(answer, contractInfo.contract, contractInfo.hostname, { returnReward: true })\\n            if (solvingResult) {\\n                ns.toast(`Solved ${contractInfo.contract} on ${contractInfo.hostname}`, 'success');\\n                ns.tprint(`Solved ${contractInfo.contract} on ${contractInfo.hostname}. Reward: ${solvingResult}`)\\n            } else {\\n                ns.tprint(`Wrong answer for ${contractInfo.contract} on ${contractInfo.hostname}: ${JSON.stringify(answer)}`)\\n            }\\n        } else {\\n            ns.tprint(`Unable to find the answer for: ${JSON.stringify(contractInfo)}`)\\n        }\\n        await ns.sleep(10)\\n    }\\n}\\n\\nfunction findAnswer(contract) {\\n    const codingContractSolution = codingContractTypesMetadata.find((codingContractTypeMetadata) => codingContractTypeMetadata.name === contract.type)\\n    return codingContractSolution ? codingContractSolution.solver(contract.data) : null;\\n}\\n\\nfunction convert2DArrayToString(arr) {\\n    var components = []\\n    arr.forEach(function (e) {\\n        var s = e.toString()\\n        s = ['[', s, ']'].join('')\\n        components.push(s)\\n    })\\n    return components.join(',').replace(/\\\\s/g, '')\\n}\\n\\n// Based on https://github.com/danielyxie/bitburner/blob/master/src/data/codingcontracttypes.ts\\nconst codingContractTypesMetadata = [{\\n    name: 'Find Largest Prime Factor',\\n    solver: function (data) {\\n        var fac = 2\\n        var n = data\\n        while (n > (fac - 1) * (fac - 1)) {\\n            while (n % fac === 0) {\\n                n = Math.round(n / fac)\\n            }\\n            ++fac\\n        }\\n        return n === 1 ? fac - 1 : n\\n    },\\n},\\n{\\n    name: 'Subarray with Maximum Sum',\\n    solver: function (data) {\\n        var nums = data.slice()\\n        for (var i = 1; i < nums.length; i++) {\\n            nums[i] = Math.max(nums[i], nums[i] + nums[i - 1])\\n        }\\n        return Math.max.apply(Math, nums)\\n    },\\n},\\n{\\n    name: 'Total Ways to Sum',\\n    solver: function (data) {\\n        var ways = [1]\\n        ways.length = data + 1\\n        ways.fill(0, 1)\\n        for (var i = 1; i < data; ++i) {\\n            for (var j = i; j <= data; ++j) {\\n                ways[j] += ways[j - i]\\n            }\\n        }\\n        return ways[data]\\n    },\\n},\\n{\\n    name: 'Spiralize Matrix',\\n    solver: function (data, ans) {\\n        var spiral = []\\n        var m = data.length\\n        var n = data[0].length\\n        var u = 0\\n        var d = m - 1\\n        var l = 0\\n        var r = n - 1\\n        var k = 0\\n        while (true) {\\n            // Up\\n            for (var col = l; col <= r; col++) {\\n                spiral[k] = data[u][col]\\n                ++k\\n            }\\n            if (++u > d) {\\n                break\\n            }\\n            // Right\\n            for (var row = u; row <= d; row++) {\\n                spiral[k] = data[row][r]\\n                ++k\\n            }\\n            if (--r < l) {\\n                break\\n            }\\n            // Down\\n            for (var col = r; col >= l; col--) {\\n                spiral[k] = data[d][col]\\n                ++k\\n            }\\n            if (--d < u) {\\n                break\\n            }\\n            // Left\\n            for (var row = d; row >= u; row--) {\\n                spiral[k] = data[row][l]\\n                ++k\\n            }\\n            if (++l > r) {\\n                break\\n            }\\n        }\\n\\n        return spiral\\n    },\\n},\\n{\\n    name: 'Array Jumping Game',\\n    solver: function (data) {\\n        var n = data.length\\n        var i = 0\\n        for (var reach = 0; i < n && i <= reach; ++i) {\\n            reach = Math.max(i + data[i], reach)\\n        }\\n        var solution = i === n\\n        return solution ? 1 : 0\\n    },\\n},\\n{\\n    name: 'Merge Overlapping Intervals',\\n    solver: function (data) {\\n        var intervals = data.slice()\\n        intervals.sort(function (a, b) {\\n            return a[0] - b[0]\\n        })\\n        var result = []\\n        var start = intervals[0][0]\\n        var end = intervals[0][1]\\n        for (var _i = 0, intervals_1 = intervals; _i < intervals_1.length; _i++) {\\n            var interval = intervals_1[_i]\\n            if (interval[0] <= end) {\\n                end = Math.max(end, interval[1])\\n            } else {\\n                result.push([start, end])\\n                start = interval[0]\\n                end = interval[1]\\n            }\\n        }\\n        result.push([start, end])\\n        var sanitizedResult = convert2DArrayToString(result)\\n        return sanitizedResult\\n    },\\n},\\n{\\n    name: 'Generate IP Addresses',\\n    solver: function (data, ans) {\\n        var ret = []\\n        for (var a = 1; a <= 3; ++a) {\\n            for (var b = 1; b <= 3; ++b) {\\n                for (var c = 1; c <= 3; ++c) {\\n                    for (var d = 1; d <= 3; ++d) {\\n                        if (a + b + c + d === data.length) {\\n                            var A = parseInt(data.substring(0, a), 10)\\n                            var B = parseInt(data.substring(a, a + b), 10)\\n                            var C = parseInt(data.substring(a + b, a + b + c), 10)\\n                            var D = parseInt(data.substring(a + b + c, a + b + c + d), 10)\\n                            if (A <= 255 && B <= 255 && C <= 255 && D <= 255) {\\n                                var ip = [A.toString(), '.', B.toString(), '.', C.toString(), '.', D.toString()].join('')\\n                                if (ip.length === data.length + 3) {\\n                                    ret.push(ip)\\n                                }\\n                            }\\n                        }\\n                    }\\n                }\\n            }\\n        }\\n        return ret\\n    },\\n},\\n{\\n    name: 'Algorithmic Stock Trader I',\\n    solver: function (data) {\\n        var maxCur = 0\\n        var maxSoFar = 0\\n        for (var i = 1; i < data.length; ++i) {\\n            maxCur = Math.max(0, (maxCur += data[i] - data[i - 1]))\\n            maxSoFar = Math.max(maxCur, maxSoFar)\\n        }\\n        return maxSoFar.toString()\\n    },\\n},\\n{\\n    name: 'Algorithmic Stock Trader II',\\n    solver: function (data) {\\n        var profit = 0\\n        for (var p = 1; p < data.length; ++p) {\\n            profit += Math.max(data[p] - data[p - 1], 0)\\n        }\\n        return profit.toString()\\n    },\\n},\\n{\\n    name: 'Algorithmic Stock Trader III',\\n    solver: function (data) {\\n        var hold1 = Number.MIN_SAFE_INTEGER\\n        var hold2 = Number.MIN_SAFE_INTEGER\\n        var release1 = 0\\n        var release2 = 0\\n        for (var _i = 0, data_1 = data; _i < data_1.length; _i++) {\\n            var price = data_1[_i]\\n            release2 = Math.max(release2, hold2 + price)\\n            hold2 = Math.max(hold2, release1 - price)\\n            release1 = Math.max(release1, hold1 + price)\\n            hold1 = Math.max(hold1, price * -1)\\n        }\\n        return release2.toString()\\n    },\\n},\\n{\\n    name: 'Algorithmic Stock Trader IV',\\n    solver: function (data) {\\n        var k = data[0]\\n        var prices = data[1]\\n        var len = prices.length\\n        if (len < 2) {\\n            return 0\\n        }\\n        if (k > len / 2) {\\n            var res = 0\\n            for (var i = 1; i < len; ++i) {\\n                res += Math.max(prices[i] - prices[i - 1], 0)\\n            }\\n            return res\\n        }\\n        var hold = []\\n        var rele = []\\n        hold.length = k + 1\\n        rele.length = k + 1\\n        for (var i = 0; i <= k; ++i) {\\n            hold[i] = Number.MIN_SAFE_INTEGER\\n            rele[i] = 0\\n        }\\n        var cur\\n        for (var i = 0; i < len; ++i) {\\n            cur = prices[i]\\n            for (var j = k; j > 0; --j) {\\n                rele[j] = Math.max(rele[j], hold[j] + cur)\\n                hold[j] = Math.max(hold[j], rele[j - 1] - cur)\\n            }\\n        }\\n        return rele[k]\\n    },\\n},\\n{\\n    name: 'Minimum Path Sum in a Triangle',\\n    solver: function (data) {\\n        var n = data.length\\n        var dp = data[n - 1].slice()\\n        for (var i = n - 2; i > -1; --i) {\\n            for (var j = 0; j < data[i].length; ++j) {\\n                dp[j] = Math.min(dp[j], dp[j + 1]) + data[i][j]\\n            }\\n        }\\n        return dp[0]\\n    },\\n},\\n{\\n    name: 'Unique Paths in a Grid I',\\n    solver: function (data) {\\n        var n = data[0] // Number of rows\\n        var m = data[1] // Number of columns\\n        var currentRow = []\\n        currentRow.length = n\\n        for (var i = 0; i < n; i++) {\\n            currentRow[i] = 1\\n        }\\n        for (var row = 1; row < m; row++) {\\n            for (var i = 1; i < n; i++) {\\n                currentRow[i] += currentRow[i - 1]\\n            }\\n        }\\n        return currentRow[n - 1]\\n    },\\n},\\n{\\n    name: 'Unique Paths in a Grid II',\\n    solver: function (data) {\\n        var obstacleGrid = []\\n        obstacleGrid.length = data.length\\n        for (var i = 0; i < obstacleGrid.length; ++i) {\\n            obstacleGrid[i] = data[i].slice()\\n        }\\n        for (var i = 0; i < obstacleGrid.length; i++) {\\n            for (var j = 0; j < obstacleGrid[0].length; j++) {\\n                if (obstacleGrid[i][j] == 1) {\\n                    obstacleGrid[i][j] = 0\\n                } else if (i == 0 && j == 0) {\\n                    obstacleGrid[0][0] = 1\\n                } else {\\n                    obstacleGrid[i][j] = (i > 0 ? obstacleGrid[i - 1][j] : 0) + (j > 0 ? obstacleGrid[i][j - 1] : 0)\\n                }\\n            }\\n        }\\n        return obstacleGrid[obstacleGrid.length - 1][obstacleGrid[0].length - 1]\\n    },\\n},\\n{\\n    name: 'Sanitize Parentheses in Expression',\\n    solver: function (data) {\\n        var left = 0\\n        var right = 0\\n        var res = []\\n        for (var i = 0; i < data.length; ++i) {\\n            if (data[i] === '(') {\\n                ++left\\n            } else if (data[i] === ')') {\\n                left > 0 ? --left : ++right\\n            }\\n        }\\n\\n        function dfs(pair, index, left, right, s, solution, res) {\\n            if (s.length === index) {\\n                if (left === 0 && right === 0 && pair === 0) {\\n                    for (var i = 0; i < res.length; i++) {\\n                        if (res[i] === solution) {\\n                            return\\n                        }\\n                    }\\n                    res.push(solution)\\n                }\\n                return\\n            }\\n            if (s[index] === '(') {\\n                if (left > 0) {\\n                    dfs(pair, index + 1, left - 1, right, s, solution, res)\\n                }\\n                dfs(pair + 1, index + 1, left, right, s, solution + s[index], res)\\n            } else if (s[index] === ')') {\\n                if (right > 0) dfs(pair, index + 1, left, right - 1, s, solution, res)\\n                if (pair > 0) dfs(pair - 1, index + 1, left, right, s, solution + s[index], res)\\n            } else {\\n                dfs(pair, index + 1, left, right, s, solution + s[index], res)\\n            }\\n        }\\n        dfs(0, 0, left, right, data, '', res)\\n\\n        return res\\n    },\\n},\\n{\\n    name: 'Find All Valid Math Expressions',\\n    solver: function (data) {\\n        var num = data[0]\\n        var target = data[1]\\n\\n        function helper(res, path, num, target, pos, evaluated, multed) {\\n            if (pos === num.length) {\\n                if (target === evaluated) {\\n                    res.push(path)\\n                }\\n                return\\n            }\\n            for (var i = pos; i < num.length; ++i) {\\n                if (i != pos && num[pos] == '0') {\\n                    break\\n                }\\n                var cur = parseInt(num.substring(pos, i + 1))\\n                if (pos === 0) {\\n                    helper(res, path + cur, num, target, i + 1, cur, cur)\\n                } else {\\n                    helper(res, path + '+' + cur, num, target, i + 1, evaluated + cur, cur)\\n                    helper(res, path + '-' + cur, num, target, i + 1, evaluated - cur, -cur)\\n                    helper(res, path + '*' + cur, num, target, i + 1, evaluated - multed + multed * cur, multed * cur)\\n                }\\n            }\\n        }\\n\\n        if (num == null || num.length === 0) {\\n            return []\\n        }\\n        var result = []\\n        helper(result, '', num, target, 0, 0, 0)\\n        return result\\n    },\\n},\\n]\",\"filename\":\"/Tasks/contractor.js.solver.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/Tasks/contractor.js.solver.js\",\"url\":\"blob:https://danielyxie.github.io/994f0369-22b1-41a4-9c98-5e1a0092464d\",\"moduleSequenceNumber\":571}],\"dependents\":[],\"ramUsage\":11.6,\"server\":\"home\",\"moduleSequenceNumber\":571,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"codingcontract.attempt\",\"cost\":10}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns \\n * Blindly try to open all ports and crack the specified target, regardless of owned tools. */\\nexport async function main(ns) {\\n    const target = ns.args[0];\\n    try { ns.brutessh(target); } catch { }\\n    try { ns.ftpcrack(target); } catch { }\\n    try { ns.relaysmtp(target); } catch { }\\n    try { ns.httpworm(target); } catch { }\\n    try { ns.sqlinject(target); } catch { }\\n    try { ns.nuke(target); } catch { }\\n}\",\"filename\":\"/Tasks/crack-host.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/Tasks/crack-host.js\",\"url\":\"blob:https://danielyxie.github.io/6de7bf41-c92f-47fc-9656-ad8ad97350a7\",\"moduleSequenceNumber\":312}],\"dependents\":[],\"ramUsage\":1.9,\"server\":\"home\",\"moduleSequenceNumber\":165,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns \\n * the purpose of the program-manager is to buy all the programs\\n * from the darkweb we can afford so we don't have to do it manually\\n * or write them ourselves. Like tor-manager, this script dies a natural death\\n * once all programs are bought. **/\\nexport async function main(ns) {\\n    const programNames = [\\\"BruteSSH.exe\\\", \\\"FTPCrack.exe\\\", \\\"relaySMTP.exe\\\", \\\"HTTPWorm.exe\\\", \\\"SQLInject.exe\\\"];\\n    const interval = 2000;\\n\\n    const keepRunning = ns.args.length > 0 && ns.args[0] == \\\"-c\\\";\\n    if (!keepRunning)\\n        ns.print(`program-manager will run once. Run with argument \\\"-c\\\" to run continuously.`)\\n\\n    do {\\n        let foundMissingProgram = false;\\n        for (const prog of programNames) {\\n            if (!ns.fileExists(prog, \\\"home\\\") && ns.purchaseProgram(prog))\\n                ns.toast(`Purchased ${prog}`, 'success');\\n            else if (keepRunning)\\n                foundMissingProgram = true;\\n        }\\n        if (keepRunning && foundMissingProgram)\\n            await ns.sleep(interval);\\n    } while (keepRunning && foundMissingProgram);\\n}\",\"filename\":\"/Tasks/program-manager.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/Tasks/program-manager.js\",\"url\":\"blob:https://danielyxie.github.io/77ca2d46-912c-4251-a67f-2e9a991964ea\",\"moduleSequenceNumber\":5172}],\"dependents\":[],\"ramUsage\":3.7,\"server\":\"home\",\"moduleSequenceNumber\":166,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"purchaseProgram\",\"cost\":2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { formatMoney, formatNumberShort } from 'helpers.js'\\n\\nconst max_spend_ratio = 0.1; // Don't spend more than this proportion of money\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    const reserve = Number.parseFloat(ns.read('reserve.txt') || 0);\\n    const money = ns.getServerMoneyAvailable(\\\"home\\\");\\n    const spendable = Math.min(money - reserve, money * max_spend_ratio);\\n    const cost = ns.getUpgradeHomeRamCost();\\n    const currentRam = ns.getServerMaxRam(\\\"home\\\");\\n    if (currentRam >= 2 ** 20)\\n        return ns.print(`We're at max home RAM (2^20 = ${formatNumberShort(currentRam)}GB)`);\\n    const nextRam = currentRam * 2;\\n    const upgradeDesc = `home RAM from ${formatNumberShort(currentRam)}GB to ${formatNumberShort(nextRam)}GB`;\\n    if (spendable < cost)\\n        return ns.print(`Money we're allowed to spend (${formatMoney(spendable)}) is less than the cost (${formatMoney(cost)}) to upgrade ${upgradeDesc}`);\\n    if (ns.upgradeHomeRam()) {\\n        announce(ns, `SUCCESS: Upgraded ${upgradeDesc}`, 'success');\\n        if (nextRam != ns.getServerMaxRam(\\\"home\\\"))\\n            announce(ns, `WARNING: Expected to upgrade ${upgradeDesc}, but new home ram is ${formatNumberShort(ns.getServerMaxRam(\\\"home\\\"))}GB`, 'warning');\\n    } else {\\n        announce(ns, `ERROR: Failed to upgrade ${upgradeDesc} thinking we could afford it (cost: ${formatMoney(cost)} cash: ${formatMoney(money)} budget: ${formatMoney(spendable)})`, 'error');\\n    }\\n}\\n\\nfunction announce(ns, message, toastStyle) {\\n    ns.print(message);\\n    ns.tprint(message);\\n    if (toastStyle) ns.toast(message, toastStyle);\\n}\",\"filename\":\"/Tasks/ram-manager.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"helpers.js\",\"url\":\"blob:https://danielyxie.github.io/a06867e8-3bcc-4a03-86ed-95bf9cc9a00f\",\"moduleSequenceNumber\":5043},{\"filename\":\"/Tasks/ram-manager.js\",\"url\":\"blob:https://danielyxie.github.io/08187b14-28f3-4120-8840-7114ede288bc\",\"moduleSequenceNumber\":5231}],\"dependents\":[],\"ramUsage\":6.25,\"server\":\"home\",\"moduleSequenceNumber\":167,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getUpgradeHomeRamCost\",\"cost\":1.5},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"upgradeHomeRam\",\"cost\":3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * @param {NS} ns\\n * Similar to ns.spawn, but can be run for cheaper (1GB for ns.run vs 2GB for ns.spawn), the delay can be shorter,\\n * and you have the option to *not* shut down the current script, but instead continue execution.\\n **/\\nexport async function main(ns) {\\n    var scriptpath = ns.args[0]; // Name of script to run is arg 0\\n    var delay = ns.args[1]; // Delay time is arg 1\\n    // Any additional args are forwarded to the script being run\\n    var forwardedArgs = ns.args.length > 2 ? ns.args.slice(2) : [];\\n    await ns.sleep(delay || 100);\\n    var pid = ns.run(scriptpath, 1, ...forwardedArgs);\\n    if (!pid)\\n        ns.tprint(`Failed to spawn \\\"${scriptpath}\\\" with args: ${forwardedArgs} (bad file name or insufficient RAM?)`);\\n}\",\"filename\":\"/Tasks/run-with-delay.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/Tasks/run-with-delay.js\",\"url\":\"blob:https://danielyxie.github.io/efcf5e2a-0c2e-48f5-910d-3fd3dd670fe5\",\"moduleSequenceNumber\":570}],\"dependents\":[],\"ramUsage\":2.6,\"server\":\"home\",\"moduleSequenceNumber\":570,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"run\",\"cost\":1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns \\n * the purpose of tor-manager is to buy the TOR router ASAP\\n * so that another script can buy the port breakers. This script\\n * dies a natural death once tor is bought. **/\\nexport async function main(ns) {\\n    const interval = 2000;\\n\\n    var keepRunning = ns.args.length > 0 && ns.args[0] == \\\"-c\\\";\\n    if (!keepRunning)\\n        ns.print(`tor-manager will run once. Run with argument \\\"-c\\\" to run continuously.`)\\n\\n    let hasTor = () => ns.scan(\\\"home\\\").includes(\\\"darkweb\\\");\\n    if (hasTor())\\n        return ns.print('Player already has Tor');\\n    do {\\n        if (hasTor()) {\\n            ns.toast(`Purchased the Tor router!`, 'success');\\n            break;\\n        }\\n        ns.purchaseTor();\\n        if (keepRunning)\\n            await ns.sleep(interval);\\n    }\\n    while (keepRunning);\\n}\",\"filename\":\"/Tasks/tor-manager.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/Tasks/tor-manager.js\",\"url\":\"blob:https://danielyxie.github.io/373ce5c6-e982-4c7f-b517-4ba7c9a60096\",\"moduleSequenceNumber\":5171}],\"dependents\":[],\"ramUsage\":3.8,\"server\":\"home\",\"moduleSequenceNumber\":169,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"purchaseTor\",\"cost\":2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns\\n * A way to write a new file from some args data **/\\nexport async function main(ns) {\\n    if (ns.args.length == 0) return ns.tprint(\\\"You must run this script with the arguments to pass to ns.write\\\")\\n    if(ns.args.length == 2) // Default to \\\"w\\\" (overwrite mode)\\n        ns.args.push(\\\"w\\\")\\n    return await ns.write(...ns.args);\\n}\",\"filename\":\"/Tasks/write-file.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"server\":\"home\",\"moduleSequenceNumber\":170,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { formatMoney, formatNumberShort, formatDuration, parseShortNumber, scanAllServers } from 'helpers.js'\\nexport async function main(ns) { try { let result = \\\"\\\"; try { result = JSON.stringify(ns.getPlayer()); } catch { }\\n        if (ns.read(\\\"/Temp/player-info.txt\\\") != result) await ns.write(\\\"/Temp/player-info.txt\\\", result, 'w'); } catch(err) { ns.tprint(String(err)); throw(err); } }\",\"filename\":\"/Temp/player-info.txt.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"helpers.js\",\"url\":\"blob:https://danielyxie.github.io/f138d2ef-b743-4dbc-90f7-82bb3ef5e0f3\",\"moduleSequenceNumber\":142},{\"filename\":\"/Temp/player-info.txt.js\",\"url\":\"blob:https://danielyxie.github.io/203e1c7e-9901-456f-82b4-2fe2417f2192\",\"moduleSequenceNumber\":289}],\"dependents\":[],\"ramUsage\":2.1,\"server\":\"home\",\"moduleSequenceNumber\":289,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { formatMoney, formatNumberShort, formatDuration, parseShortNumber, scanAllServers } from 'helpers.js'\\nexport async function main(ns) { try { let result = \\\"\\\"; try { result = JSON.stringify(Object.fromEntries(ns.getOwnedSourceFiles().map(sf => [sf.n, sf.lvl]))); } catch { }\\n        if (ns.read(\\\"/Temp/owned-source-files.txt\\\") != result) await ns.write(\\\"/Temp/owned-source-files.txt\\\", result, 'w'); } catch(err) { ns.tprint(String(err)); throw(err); } }\",\"filename\":\"/Temp/owned-source-files.txt.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"helpers.js\",\"url\":\"blob:https://danielyxie.github.io/d85a55ea-f711-4a1d-adf3-bcf7790fe0dc\",\"moduleSequenceNumber\":142},{\"filename\":\"/Temp/owned-source-files.txt.js\",\"url\":\"blob:https://danielyxie.github.io/45e583c9-3f70-46d5-ad0e-a2e4fa30b7cf\",\"moduleSequenceNumber\":287}],\"dependents\":[],\"ramUsage\":6.6,\"server\":\"home\",\"moduleSequenceNumber\":287,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getOwnedSourceFiles\",\"cost\":5}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { formatMoney, formatNumberShort, formatDuration, parseShortNumber, scanAllServers } from 'helpers.js'\\nexport async function main(ns) { try { let result = \\\"\\\"; try { result = JSON.stringify(Object.fromEntries([\\\"/Remote/weak-target.js\\\",\\\"/Remote/grow-target.js\\\",\\\"/Remote/hack-target.js\\\",\\\"/Remote/manualhack-target.js\\\",\\\"/Remote/share.js\\\",\\\"stats.js\\\",\\\"hacknet-upgrade-manager.js\\\",\\\"stockmaster.js\\\",\\\"gangs.js\\\",\\\"spend-hacknet-hashes.js\\\",\\\"sleeve.js\\\",\\\"work-for-factions.js\\\",\\\"/Tasks/tor-manager.js\\\",\\\"/Tasks/program-manager.js\\\",\\\"/Tasks/ram-manager.js\\\",\\\"hacknet-upgrade-manager.js\\\",\\\"hacknet-upgrade-manager.js\\\",\\\"faction-manager.js\\\",\\\"/Tasks/contractor.js\\\",\\\"/Tasks/backdoor-all-servers.js\\\",\\\"host-manager.js\\\"].map(s => [s, ns.getScriptRam(s, 'home')]))); } catch { }\\n        if (ns.read(\\\"/Temp/script-costs.txt\\\") != result) await ns.write(\\\"/Temp/script-costs.txt\\\", result, 'w'); } catch(err) { ns.tprint(String(err)); throw(err); } }\",\"filename\":\"/Temp/script-costs.txt.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"helpers.js\",\"url\":\"blob:https://danielyxie.github.io/99985186-bb5a-4fe2-a22f-d68e337e2731\",\"moduleSequenceNumber\":142},{\"filename\":\"/Temp/script-costs.txt.js\",\"url\":\"blob:https://danielyxie.github.io/1d89b287-792e-4146-bb11-124d72c4f492\",\"moduleSequenceNumber\":290}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"home\",\"moduleSequenceNumber\":290,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { formatMoney, formatNumberShort, formatDuration, parseShortNumber, scanAllServers } from 'helpers.js'\\nexport async function main(ns) { try { let result = \\\"\\\"; try { result = JSON.stringify(Object.fromEntries([\\\"home\\\",\\\"hacknet-node-9\\\",\\\"hacknet-node-8\\\",\\\"hacknet-node-7\\\",\\\"hacknet-node-6\\\",\\\"hacknet-node-5\\\",\\\"hacknet-node-4\\\",\\\"hacknet-node-3\\\",\\\"hacknet-node-2\\\",\\\"hacknet-node-1\\\",\\\"darkweb\\\",\\\"hacknet-node-0\\\",\\\"iron-gym\\\",\\\"harakiri-sushi\\\",\\\"hong-fang-tea\\\",\\\"max-hardware\\\",\\\"zer0\\\",\\\"neo-net\\\",\\\"avmnite-02h\\\",\\\"johnson-ortho\\\",\\\"joesguns\\\",\\\"sigma-cosmetics\\\",\\\"CSEC\\\",\\\"phantasy\\\",\\\"comptek\\\",\\\"I.I.I.I\\\",\\\"lexo-corp\\\",\\\"aerocorp\\\",\\\"unitalife\\\",\\\"solaris\\\",\\\"taiyang-digital\\\",\\\"omnia\\\",\\\"foodnstuff\\\",\\\"nectar-net\\\",\\\"omega-net\\\",\\\"crush-fitness\\\",\\\"catalyst\\\",\\\"syscore\\\",\\\"aevum-police\\\",\\\"rho-construction\\\",\\\"snap-fitness\\\",\\\"the-hub\\\",\\\"silver-helix\\\",\\\"netlink\\\",\\\"summit-uni\\\",\\\"millenium-fitness\\\",\\\"galactic-cyber\\\",\\\"zb-institute\\\",\\\"alpha-ent\\\",\\\"global-pharm\\\",\\\"deltaone\\\",\\\"zeus-med\\\",\\\"univ-energy\\\",\\\"icarus\\\",\\\"infocomm\\\",\\\"run4theh111z\\\",\\\"fulcrumtech\\\",\\\"kuai-gong\\\",\\\"powerhouse-fitness\\\",\\\"defcomm\\\",\\\"nova-med\\\",\\\"applied-energetics\\\",\\\"microdyne\\\",\\\"helios\\\",\\\"4sigma\\\",\\\"stormtech\\\",\\\".\\\",\\\"clarkinc\\\",\\\"b-and-a\\\",\\\"megacorp\\\",\\\"zb-def\\\",\\\"titan-labs\\\",\\\"vitalife\\\",\\\"omnitek\\\",\\\"nwo\\\",\\\"fulcrumassets\\\",\\\"ecorp\\\",\\\"blade\\\",\\\"The-Cave\\\",\\\"rothman-uni\\\",\\\"n00dles\\\"].map(server => [server, ns.getServerRequiredHackingLevel(server)]))); } catch { }\\n        if (ns.read(\\\"/Temp/servers-hack-req.txt\\\") != result) await ns.write(\\\"/Temp/servers-hack-req.txt\\\", result, 'w'); } catch(err) { ns.tprint(String(err)); throw(err); } }\",\"filename\":\"/Temp/servers-hack-req.txt.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"helpers.js\",\"url\":\"blob:https://danielyxie.github.io/9267dc72-0a00-4f32-9c7c-0f89154c8494\",\"moduleSequenceNumber\":142},{\"filename\":\"/Temp/servers-hack-req.txt.js\",\"url\":\"blob:https://danielyxie.github.io/3d93959b-26ba-4cd6-87fd-27f80c88b63d\",\"moduleSequenceNumber\":296}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"home\",\"moduleSequenceNumber\":296,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { formatMoney, formatNumberShort, formatDuration, parseShortNumber, scanAllServers } from 'helpers.js'\\nexport async function main(ns) { try { let result = \\\"\\\"; try { result = JSON.stringify(Object.fromEntries([\\\"home\\\",\\\"hacknet-node-9\\\",\\\"hacknet-node-8\\\",\\\"hacknet-node-7\\\",\\\"hacknet-node-6\\\",\\\"hacknet-node-5\\\",\\\"hacknet-node-4\\\",\\\"hacknet-node-3\\\",\\\"hacknet-node-2\\\",\\\"hacknet-node-1\\\",\\\"darkweb\\\",\\\"hacknet-node-0\\\",\\\"iron-gym\\\",\\\"harakiri-sushi\\\",\\\"hong-fang-tea\\\",\\\"max-hardware\\\",\\\"zer0\\\",\\\"neo-net\\\",\\\"avmnite-02h\\\",\\\"johnson-ortho\\\",\\\"joesguns\\\",\\\"sigma-cosmetics\\\",\\\"CSEC\\\",\\\"phantasy\\\",\\\"comptek\\\",\\\"I.I.I.I\\\",\\\"lexo-corp\\\",\\\"aerocorp\\\",\\\"unitalife\\\",\\\"solaris\\\",\\\"taiyang-digital\\\",\\\"omnia\\\",\\\"foodnstuff\\\",\\\"nectar-net\\\",\\\"omega-net\\\",\\\"crush-fitness\\\",\\\"catalyst\\\",\\\"syscore\\\",\\\"aevum-police\\\",\\\"rho-construction\\\",\\\"snap-fitness\\\",\\\"the-hub\\\",\\\"silver-helix\\\",\\\"netlink\\\",\\\"summit-uni\\\",\\\"millenium-fitness\\\",\\\"galactic-cyber\\\",\\\"zb-institute\\\",\\\"alpha-ent\\\",\\\"global-pharm\\\",\\\"deltaone\\\",\\\"zeus-med\\\",\\\"univ-energy\\\",\\\"icarus\\\",\\\"infocomm\\\",\\\"run4theh111z\\\",\\\"fulcrumtech\\\",\\\"kuai-gong\\\",\\\"powerhouse-fitness\\\",\\\"defcomm\\\",\\\"nova-med\\\",\\\"applied-energetics\\\",\\\"microdyne\\\",\\\"helios\\\",\\\"4sigma\\\",\\\"stormtech\\\",\\\".\\\",\\\"clarkinc\\\",\\\"b-and-a\\\",\\\"megacorp\\\",\\\"zb-def\\\",\\\"titan-labs\\\",\\\"vitalife\\\",\\\"omnitek\\\",\\\"nwo\\\",\\\"fulcrumassets\\\",\\\"ecorp\\\",\\\"blade\\\",\\\"The-Cave\\\",\\\"rothman-uni\\\",\\\"n00dles\\\"].map(server => [server, ns.getServerNumPortsRequired(server)]))); } catch { }\\n        if (ns.read(\\\"/Temp/servers-num-ports.txt\\\") != result) await ns.write(\\\"/Temp/servers-num-ports.txt\\\", result, 'w'); } catch(err) { ns.tprint(String(err)); throw(err); } }\",\"filename\":\"/Temp/servers-num-ports.txt.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"helpers.js\",\"url\":\"blob:https://danielyxie.github.io/cde2ce1e-e27d-42c0-a0ba-72c865cd6274\",\"moduleSequenceNumber\":142},{\"filename\":\"/Temp/servers-num-ports.txt.js\",\"url\":\"blob:https://danielyxie.github.io/14aca6af-69a5-4bd0-a9c0-30247710184f\",\"moduleSequenceNumber\":302}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"home\",\"moduleSequenceNumber\":302,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { formatMoney, formatNumberShort, formatDuration, parseShortNumber, scanAllServers } from 'helpers.js'\\nexport async function main(ns) { try { let result = \\\"\\\"; try { result = JSON.stringify(Object.fromEntries([\\\"home\\\",\\\"darkweb\\\",\\\"iron-gym\\\",\\\"harakiri-sushi\\\",\\\"hong-fang-tea\\\",\\\"max-hardware\\\",\\\"zer0\\\",\\\"neo-net\\\",\\\"avmnite-02h\\\",\\\"johnson-ortho\\\",\\\"joesguns\\\",\\\"sigma-cosmetics\\\",\\\"CSEC\\\",\\\"phantasy\\\",\\\"comptek\\\",\\\"I.I.I.I\\\",\\\"lexo-corp\\\",\\\"aerocorp\\\",\\\"unitalife\\\",\\\"solaris\\\",\\\"taiyang-digital\\\",\\\"omnia\\\",\\\"foodnstuff\\\",\\\"nectar-net\\\",\\\"omega-net\\\",\\\"crush-fitness\\\",\\\"catalyst\\\",\\\"syscore\\\",\\\"aevum-police\\\",\\\"rho-construction\\\",\\\"snap-fitness\\\",\\\"the-hub\\\",\\\"silver-helix\\\",\\\"netlink\\\",\\\"summit-uni\\\",\\\"millenium-fitness\\\",\\\"galactic-cyber\\\",\\\"zb-institute\\\",\\\"alpha-ent\\\",\\\"global-pharm\\\",\\\"deltaone\\\",\\\"zeus-med\\\",\\\"univ-energy\\\",\\\"icarus\\\",\\\"infocomm\\\",\\\"run4theh111z\\\",\\\"fulcrumtech\\\",\\\"kuai-gong\\\",\\\"powerhouse-fitness\\\",\\\"defcomm\\\",\\\"nova-med\\\",\\\"applied-energetics\\\",\\\"microdyne\\\",\\\"helios\\\",\\\"4sigma\\\",\\\"stormtech\\\",\\\".\\\",\\\"clarkinc\\\",\\\"b-and-a\\\",\\\"megacorp\\\",\\\"zb-def\\\",\\\"titan-labs\\\",\\\"vitalife\\\",\\\"omnitek\\\",\\\"nwo\\\",\\\"fulcrumassets\\\",\\\"ecorp\\\",\\\"blade\\\",\\\"The-Cave\\\",\\\"rothman-uni\\\",\\\"n00dles\\\"].map(server => [server, ns.getServerMinSecurityLevel(server)]))); } catch { }\\n        if (ns.read(\\\"/Temp/servers-security.txt\\\") != result) await ns.write(\\\"/Temp/servers-security.txt\\\", result, 'w'); } catch(err) { ns.tprint(String(err)); throw(err); } }\",\"filename\":\"/Temp/servers-security.txt.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"helpers.js\",\"url\":\"blob:https://danielyxie.github.io/476cfcac-2821-495a-bc5a-2362f986ba04\",\"moduleSequenceNumber\":142},{\"filename\":\"/Temp/servers-security.txt.js\",\"url\":\"blob:https://danielyxie.github.io/5c8d4c2c-d570-4e11-8ea2-f26acaaffb5b\",\"moduleSequenceNumber\":322}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"home\",\"moduleSequenceNumber\":322,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { formatMoney, formatNumberShort, formatDuration, parseShortNumber, scanAllServers } from 'helpers.js'\\nexport async function main(ns) { try { let result = \\\"\\\"; try { result = JSON.stringify(Object.fromEntries([\\\"home\\\",\\\"darkweb\\\",\\\"iron-gym\\\",\\\"harakiri-sushi\\\",\\\"hong-fang-tea\\\",\\\"max-hardware\\\",\\\"zer0\\\",\\\"neo-net\\\",\\\"avmnite-02h\\\",\\\"johnson-ortho\\\",\\\"joesguns\\\",\\\"sigma-cosmetics\\\",\\\"CSEC\\\",\\\"phantasy\\\",\\\"comptek\\\",\\\"I.I.I.I\\\",\\\"lexo-corp\\\",\\\"aerocorp\\\",\\\"unitalife\\\",\\\"solaris\\\",\\\"taiyang-digital\\\",\\\"omnia\\\",\\\"foodnstuff\\\",\\\"nectar-net\\\",\\\"omega-net\\\",\\\"crush-fitness\\\",\\\"catalyst\\\",\\\"syscore\\\",\\\"aevum-police\\\",\\\"rho-construction\\\",\\\"snap-fitness\\\",\\\"the-hub\\\",\\\"silver-helix\\\",\\\"netlink\\\",\\\"summit-uni\\\",\\\"millenium-fitness\\\",\\\"galactic-cyber\\\",\\\"zb-institute\\\",\\\"alpha-ent\\\",\\\"global-pharm\\\",\\\"deltaone\\\",\\\"zeus-med\\\",\\\"univ-energy\\\",\\\"icarus\\\",\\\"infocomm\\\",\\\"run4theh111z\\\",\\\"fulcrumtech\\\",\\\"kuai-gong\\\",\\\"powerhouse-fitness\\\",\\\"defcomm\\\",\\\"nova-med\\\",\\\"applied-energetics\\\",\\\"microdyne\\\",\\\"helios\\\",\\\"4sigma\\\",\\\"stormtech\\\",\\\".\\\",\\\"clarkinc\\\",\\\"b-and-a\\\",\\\"megacorp\\\",\\\"zb-def\\\",\\\"titan-labs\\\",\\\"vitalife\\\",\\\"omnitek\\\",\\\"nwo\\\",\\\"fulcrumassets\\\",\\\"ecorp\\\",\\\"blade\\\",\\\"The-Cave\\\",\\\"rothman-uni\\\",\\\"n00dles\\\"].map(server => [server, ns.getServerMaxMoney(server)]))); } catch { }\\n        if (ns.read(\\\"/Temp/servers-max-money.txt\\\") != result) await ns.write(\\\"/Temp/servers-max-money.txt\\\", result, 'w'); } catch(err) { ns.tprint(String(err)); throw(err); } }\",\"filename\":\"/Temp/servers-max-money.txt.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"helpers.js\",\"url\":\"blob:https://danielyxie.github.io/d7454dbf-0157-4a71-b10f-74bde829d818\",\"moduleSequenceNumber\":142},{\"filename\":\"/Temp/servers-max-money.txt.js\",\"url\":\"blob:https://danielyxie.github.io/105f210e-9146-414f-8fe0-b457db1df12a\",\"moduleSequenceNumber\":326}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"home\",\"moduleSequenceNumber\":326,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { formatMoney, formatNumberShort, formatDuration, parseShortNumber, scanAllServers } from 'helpers.js'\\nexport async function main(ns) { try { let result = \\\"\\\"; try { result = JSON.stringify(ns.stock.getSymbols()); } catch { }\\n        if (ns.read(\\\"/Temp/stock-symbols.txt\\\") != result) await ns.write(\\\"/Temp/stock-symbols.txt\\\", result, 'w'); } catch(err) { ns.tprint(String(err)); throw(err); } }\",\"filename\":\"/Temp/stock-symbols.txt.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"helpers.js\",\"url\":\"blob:https://danielyxie.github.io/5939ca93-a740-4062-bb78-4c1f196b64c2\",\"moduleSequenceNumber\":42150},{\"filename\":\"/Temp/stock-symbols.txt.js\",\"url\":\"blob:https://danielyxie.github.io/527a621d-dc6e-439a-ae5e-de0eb7b43736\",\"moduleSequenceNumber\":42400}],\"dependents\":[],\"ramUsage\":3.6,\"server\":\"home\",\"moduleSequenceNumber\":178,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"stock.getSymbols\",\"cost\":2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { formatMoney, formatNumberShort, formatDuration, parseShortNumber, scanAllServers } from 'helpers.js'\\nexport async function main(ns) { try { let result = \\\"\\\"; try { result = JSON.stringify(ns.gang.inGang()); } catch { }\\n        if (ns.read(\\\"/Temp/player-gang-joined.txt\\\") != result) await ns.write(\\\"/Temp/player-gang-joined.txt\\\", result, 'w'); } catch(err) { ns.tprint(String(err)); throw(err); } }\",\"filename\":\"/Temp/player-gang-joined.txt.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"helpers.js\",\"url\":\"blob:https://danielyxie.github.io/e9ce68ac-3eba-4189-9dee-baea8ddb4b17\",\"moduleSequenceNumber\":142},{\"filename\":\"/Temp/player-gang-joined.txt.js\",\"url\":\"blob:https://danielyxie.github.io/f1e9cf86-8613-424a-9c9d-acb1d2d9887c\",\"moduleSequenceNumber\":294}],\"dependents\":[],\"ramUsage\":2.6,\"server\":\"home\",\"moduleSequenceNumber\":294,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"gang.inGang\",\"cost\":1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { formatMoney, formatNumberShort, formatDuration, parseShortNumber, scanAllServers } from 'helpers.js'\\nexport async function main(ns) { try { let result = \\\"\\\"; try { result = JSON.stringify(Object.fromEntries([{\\\"contract\\\":\\\"contract-538152.cct\\\",\\\"hostname\\\":\\\"titan-labs\\\"}].map(c => [c.contract, ns.codingcontract.getContractType(c.contract, c.hostname)]))); } catch { }\\n        if (ns.read(\\\"/Temp/contract-types.txt\\\") != result) await ns.write(\\\"/Temp/contract-types.txt\\\", result, 'w'); } catch(err) { ns.tprint(String(err)); throw(err); } }\",\"filename\":\"/Temp/contract-types.txt.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"helpers.js\",\"url\":\"blob:https://danielyxie.github.io/868f7d3d-f971-4418-bf06-329876d93be2\",\"moduleSequenceNumber\":142},{\"filename\":\"/Temp/contract-types.txt.js\",\"url\":\"blob:https://danielyxie.github.io/a255a87c-4fe2-4f21-af32-a4efab6ad901\",\"moduleSequenceNumber\":565}],\"dependents\":[],\"ramUsage\":6.6,\"server\":\"home\",\"moduleSequenceNumber\":565,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"codingcontract.getContractType\",\"cost\":5}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { formatMoney, formatNumberShort, formatDuration, parseShortNumber, scanAllServers } from 'helpers.js'\\nexport async function main(ns) { try { let result = \\\"\\\"; try { result = JSON.stringify(ns.gang.getEquipmentNames()); } catch { }\\n        if (ns.read(\\\"/Temp/gang-equipment-names.txt\\\") != result) await ns.write(\\\"/Temp/gang-equipment-names.txt\\\", result, 'w'); } catch(err) { ns.tprint(String(err)); throw(err); } }\",\"filename\":\"/Temp/gang-equipment-names.txt.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"helpers.js\",\"url\":\"blob:https://danielyxie.github.io/f19f4738-4177-4a72-8096-2ead383f362f\",\"moduleSequenceNumber\":142},{\"filename\":\"/Temp/gang-equipment-names.txt.js\",\"url\":\"blob:https://danielyxie.github.io/17d6bbfc-4a68-4798-8fb2-01270eff7524\",\"moduleSequenceNumber\":310}],\"dependents\":[],\"ramUsage\":2.6,\"server\":\"home\",\"moduleSequenceNumber\":310,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"gang.getEquipmentNames\",\"cost\":1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { formatMoney, formatNumberShort, formatDuration, parseShortNumber, scanAllServers } from 'helpers.js'\\nexport async function main(ns) { try { let result = \\\"\\\"; try { result = JSON.stringify(Object.fromEntries([\\\"ECP\\\",\\\"MGCP\\\",\\\"BLD\\\",\\\"CLRK\\\",\\\"OMTK\\\",\\\"FSIG\\\",\\\"KGI\\\",\\\"FLCM\\\",\\\"STM\\\",\\\"DCOMM\\\",\\\"HLS\\\",\\\"VITA\\\",\\\"ICRS\\\",\\\"UNV\\\",\\\"AERO\\\",\\\"OMN\\\",\\\"SLRS\\\",\\\"GPH\\\",\\\"NVMD\\\",\\\"WDS\\\",\\\"LXO\\\",\\\"RHOC\\\",\\\"APHE\\\",\\\"SYSC\\\",\\\"CTK\\\",\\\"NTLK\\\",\\\"OMGA\\\",\\\"FNS\\\",\\\"JGN\\\",\\\"SGC\\\",\\\"CTYS\\\",\\\"MDYN\\\",\\\"TITN\\\"].map(sym => [sym, ns.stock.getMaxShares(sym)]))); } catch { }\\n        if (ns.read(\\\"/Temp/stock-getMaxShares.txt\\\") != result) await ns.write(\\\"/Temp/stock-getMaxShares.txt\\\", result, 'w'); } catch(err) { ns.tprint(String(err)); throw(err); } }\",\"filename\":\"/Temp/stock-getMaxShares.txt.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"helpers.js\",\"url\":\"blob:https://danielyxie.github.io/9754ba36-0476-41fb-b34d-c6c63548af96\",\"moduleSequenceNumber\":42150},{\"filename\":\"/Temp/stock-getMaxShares.txt.js\",\"url\":\"blob:https://danielyxie.github.io/008a30ba-7250-4a38-8c48-683a31c44b54\",\"moduleSequenceNumber\":42411}],\"dependents\":[],\"ramUsage\":3.6,\"server\":\"home\",\"moduleSequenceNumber\":182,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"stock.getMaxShares\",\"cost\":2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { formatMoney, formatNumberShort, formatDuration, parseShortNumber, scanAllServers } from 'helpers.js'\\nexport async function main(ns) { try { let result = \\\"\\\"; try { result = JSON.stringify(Object.fromEntries([{\\\"contract\\\":\\\"contract-538152.cct\\\",\\\"hostname\\\":\\\"titan-labs\\\"}].map(c => [c.contract, ns.codingcontract.getData(c.contract, c.hostname)]))); } catch { }\\n        if (ns.read(\\\"/Temp/contract-data.txt\\\") != result) await ns.write(\\\"/Temp/contract-data.txt\\\", result, 'w'); } catch(err) { ns.tprint(String(err)); throw(err); } }\",\"filename\":\"/Temp/contract-data.txt.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"helpers.js\",\"url\":\"blob:https://danielyxie.github.io/33004521-b80d-42ab-bb39-a8f5009a891f\",\"moduleSequenceNumber\":142},{\"filename\":\"/Temp/contract-data.txt.js\",\"url\":\"blob:https://danielyxie.github.io/5fe25bce-2533-4069-aa80-64d19fdb870e\",\"moduleSequenceNumber\":569}],\"dependents\":[],\"ramUsage\":6.6,\"server\":\"home\",\"moduleSequenceNumber\":569,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"codingcontract.getData\",\"cost\":5}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { formatMoney, formatNumberShort, formatDuration, parseShortNumber, scanAllServers } from 'helpers.js'\\nexport async function main(ns) { try { let result = \\\"\\\"; try { result = JSON.stringify([\\\"ECP\\\",\\\"MGCP\\\",\\\"BLD\\\",\\\"CLRK\\\",\\\"OMTK\\\",\\\"FSIG\\\",\\\"KGI\\\",\\\"FLCM\\\",\\\"STM\\\",\\\"DCOMM\\\",\\\"HLS\\\",\\\"VITA\\\",\\\"ICRS\\\",\\\"UNV\\\",\\\"AERO\\\",\\\"OMN\\\",\\\"SLRS\\\",\\\"GPH\\\",\\\"NVMD\\\",\\\"WDS\\\",\\\"LXO\\\",\\\"RHOC\\\",\\\"APHE\\\",\\\"SYSC\\\",\\\"CTK\\\",\\\"NTLK\\\",\\\"OMGA\\\",\\\"FNS\\\",\\\"JGN\\\",\\\"SGC\\\",\\\"CTYS\\\",\\\"MDYN\\\",\\\"TITN\\\"].map(sym => ({ sym, pos: ns.stock.getPosition(sym), ask: ns.stock.getAskPrice(sym), bid: ns.stock.getBidPrice(sym) })).reduce((total, stk) => total + stk.pos[0] * stk.bid + stk.pos[2] * (stk.pos[3] * 2 - stk.ask) -100000 * (stk.pos[0] + stk.pos[2] > 0 ? 1 : 0), 0)); } catch { }\\n        if (ns.read(\\\"/Temp/stock-portfolio-value.txt\\\") != result) await ns.write(\\\"/Temp/stock-portfolio-value.txt\\\", result, 'w'); } catch(err) { ns.tprint(String(err)); throw(err); } }\",\"filename\":\"/Temp/stock-portfolio-value.txt.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"helpers.js\",\"url\":\"blob:https://danielyxie.github.io/7d3f8993-9fa1-4365-b160-3e78d6cc54a8\",\"moduleSequenceNumber\":42150},{\"filename\":\"/Temp/stock-portfolio-value.txt.js\",\"url\":\"blob:https://danielyxie.github.io/cb8cd087-b57e-4ffc-b290-e53b339a8cf4\",\"moduleSequenceNumber\":42414}],\"dependents\":[],\"ramUsage\":7.6,\"server\":\"home\",\"moduleSequenceNumber\":184,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"stock.getPosition\",\"cost\":2},{\"type\":\"fn\",\"name\":\"stock.getAskPrice\",\"cost\":2},{\"type\":\"fn\",\"name\":\"stock.getBidPrice\",\"cost\":2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { formatMoney, formatNumberShort, formatDuration, parseShortNumber, scanAllServers } from 'helpers.js'\\nexport async function main(ns) { try { let result = \\\"\\\"; try { result = JSON.stringify(ns.gang.inGang() ? ns.gang.getGangInformation() : false); } catch { }\\n        if (ns.read(\\\"/Temp/gang-stats.txt\\\") != result) await ns.write(\\\"/Temp/gang-stats.txt\\\", result, 'w'); } catch(err) { ns.tprint(String(err)); throw(err); } }\",\"filename\":\"/Temp/gang-stats.txt.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"helpers.js\",\"url\":\"blob:https://danielyxie.github.io/c26e949f-c0a6-4031-8c29-fb0c566a38bd\",\"moduleSequenceNumber\":142},{\"filename\":\"/Temp/gang-stats.txt.js\",\"url\":\"blob:https://danielyxie.github.io/c28d66cf-b338-450e-ab02-7d4ce3a249ba\",\"moduleSequenceNumber\":297}],\"dependents\":[],\"ramUsage\":4.6,\"server\":\"home\",\"moduleSequenceNumber\":297,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"gang.inGang\",\"cost\":1},{\"type\":\"fn\",\"name\":\"gang.getGangInformation\",\"cost\":2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { formatMoney, formatNumberShort, formatDuration, parseShortNumber, scanAllServers } from 'helpers.js'\\nexport async function main(ns) { try { let result = \\\"\\\"; try { result = JSON.stringify(Object.fromEntries([\\\"Baseball Bat\\\",\\\"Katana\\\",\\\"Glock 18C\\\",\\\"P90C\\\",\\\"Steyr AUG\\\",\\\"AK-47\\\",\\\"M15A10 Assault Rifle\\\",\\\"AWM Sniper Rifle\\\",\\\"Bulletproof Vest\\\",\\\"Full Body Armor\\\",\\\"Liquid Body Armor\\\",\\\"Graphene Plating Armor\\\",\\\"Ford Flex V20\\\",\\\"ATX1070 Superbike\\\",\\\"Mercedes-Benz S9001\\\",\\\"White Ferrari\\\",\\\"NUKE Rootkit\\\",\\\"Soulstealer Rootkit\\\",\\\"Demon Rootkit\\\",\\\"Hmap Node\\\",\\\"Jack the Ripper\\\",\\\"Bionic Arms\\\",\\\"Bionic Legs\\\",\\\"Bionic Spine\\\",\\\"BrachiBlades\\\",\\\"Nanofiber Weave\\\",\\\"Synthetic Heart\\\",\\\"Synfibril Muscle\\\",\\\"BitWire\\\",\\\"Neuralstimulator\\\",\\\"DataJack\\\",\\\"Graphene Bone Lacings\\\"].map(e => [e, ns.gang.getEquipmentType(e)]))); } catch { }\\n        if (ns.read(\\\"/Temp/gang-getEquipmentType.txt\\\") != result) await ns.write(\\\"/Temp/gang-getEquipmentType.txt\\\", result, 'w'); } catch(err) { ns.tprint(String(err)); throw(err); } }\",\"filename\":\"/Temp/gang-getEquipmentType.txt.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"helpers.js\",\"url\":\"blob:https://danielyxie.github.io/3cd783dc-6867-47de-9529-311bf634e493\",\"moduleSequenceNumber\":142},{\"filename\":\"/Temp/gang-getEquipmentType.txt.js\",\"url\":\"blob:https://danielyxie.github.io/ab9d7eec-d701-40e8-94b4-664407e544d8\",\"moduleSequenceNumber\":312}],\"dependents\":[],\"ramUsage\":3.6,\"server\":\"home\",\"moduleSequenceNumber\":312,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"gang.getEquipmentType\",\"cost\":2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { formatMoney, formatNumberShort, formatDuration, parseShortNumber, scanAllServers } from 'helpers.js'\\nexport async function main(ns) { try { let result = \\\"\\\"; try { result = JSON.stringify(ns.ps()); } catch { }\\n        if (ns.read(\\\"/Temp/process-list.txt\\\") != result) await ns.write(\\\"/Temp/process-list.txt\\\", result, 'w'); } catch(err) { ns.tprint(String(err)); throw(err); } }\",\"filename\":\"/Temp/process-list.txt.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"helpers.js\",\"url\":\"blob:https://danielyxie.github.io/29f29252-0a1b-4d0f-bf96-f0d4e7ca1bcb\",\"moduleSequenceNumber\":42150},{\"filename\":\"/Temp/process-list.txt.js\",\"url\":\"blob:https://danielyxie.github.io/3da59377-4c05-4ff1-83ec-eeeb1273842c\",\"moduleSequenceNumber\":42417}],\"dependents\":[],\"ramUsage\":1.8,\"server\":\"home\",\"moduleSequenceNumber\":187,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"ps\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { formatMoney, formatNumberShort, formatDuration, parseShortNumber, scanAllServers } from 'helpers.js'\\nexport async function main(ns) { try { let result = \\\"\\\"; try { result = JSON.stringify(ns.scriptRunning('/Temp/stockmarket-summary-tail.js', ns.getHostname())); } catch { }\\n        if (ns.read(\\\"/Temp/stockmarket-summary-is-running.txt\\\") != result) await ns.write(\\\"/Temp/stockmarket-summary-is-running.txt\\\", result, 'w'); } catch(err) { ns.tprint(String(err)); throw(err); } }\",\"filename\":\"/Temp/stockmarket-summary-is-running.txt.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"helpers.js\",\"url\":\"blob:https://danielyxie.github.io/3e573341-08ca-4058-95ad-18951ce80f17\",\"moduleSequenceNumber\":42150},{\"filename\":\"/Temp/stockmarket-summary-is-running.txt.js\",\"url\":\"blob:https://danielyxie.github.io/c98f8819-77ef-48d6-9c42-8c975369b2ea\",\"moduleSequenceNumber\":42431}],\"dependents\":[],\"ramUsage\":2.65,\"server\":\"home\",\"moduleSequenceNumber\":188,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scriptRunning\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { formatMoney, formatNumberShort, formatDuration, parseShortNumber, scanAllServers } from 'helpers.js'\\nexport async function main(ns) { try { let result = \\\"\\\"; try { result = JSON.stringify(Object.fromEntries([\\\"Baseball Bat\\\",\\\"Bulletproof Vest\\\",\\\"Ford Flex V20\\\",\\\"Full Body Armor\\\",\\\"NUKE Rootkit\\\",\\\"ATX1070 Superbike\\\",\\\"Katana\\\",\\\"Mercedes-Benz S9001\\\",\\\"Glock 18C\\\",\\\"Liquid Body Armor\\\",\\\"Soulstealer Rootkit\\\",\\\"White Ferrari\\\",\\\"Graphene Plating Armor\\\",\\\"Hmap Node\\\",\\\"P90C\\\",\\\"Steyr AUG\\\",\\\"Demon Rootkit\\\",\\\"Jack the Ripper\\\",\\\"AK-47\\\",\\\"M15A10 Assault Rifle\\\",\\\"AWM Sniper Rifle\\\",\\\"BitWire\\\",\\\"DataJack\\\",\\\"Bionic Arms\\\",\\\"Bionic Legs\\\",\\\"Neuralstimulator\\\",\\\"Nanofiber Weave\\\",\\\"Bionic Spine\\\",\\\"Synfibril Muscle\\\",\\\"BrachiBlades\\\",\\\"Synthetic Heart\\\",\\\"Graphene Bone Lacings\\\"].map(e => [e, ns.gang.getEquipmentCost(e)]))); } catch { }\\n        if (ns.read(\\\"/Temp/gang-getEquipmentCost.txt\\\") != result) await ns.write(\\\"/Temp/gang-getEquipmentCost.txt\\\", result, 'w'); } catch(err) { ns.tprint(String(err)); throw(err); } }\",\"filename\":\"/Temp/gang-getEquipmentCost.txt.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"helpers.js\",\"url\":\"blob:https://danielyxie.github.io/da8b3f7a-14d0-49f9-8b04-c74b49330482\",\"moduleSequenceNumber\":142},{\"filename\":\"/Temp/gang-getEquipmentCost.txt.js\",\"url\":\"blob:https://danielyxie.github.io/f2686ad1-e06e-485d-b99e-c020492142c5\",\"moduleSequenceNumber\":365}],\"dependents\":[],\"ramUsage\":3.6,\"server\":\"home\",\"moduleSequenceNumber\":365,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"gang.getEquipmentCost\",\"cost\":2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { formatMoney, formatNumberShort, formatDuration, parseShortNumber, scanAllServers } from 'helpers.js'\\nexport async function main(ns) { try { let result = \\\"\\\"; try { result = JSON.stringify(Object.fromEntries([\\\"Baseball Bat\\\",\\\"Katana\\\",\\\"Glock 18C\\\",\\\"P90C\\\",\\\"Steyr AUG\\\",\\\"AK-47\\\",\\\"M15A10 Assault Rifle\\\",\\\"AWM Sniper Rifle\\\",\\\"Bulletproof Vest\\\",\\\"Full Body Armor\\\",\\\"Liquid Body Armor\\\",\\\"Graphene Plating Armor\\\",\\\"Ford Flex V20\\\",\\\"ATX1070 Superbike\\\",\\\"Mercedes-Benz S9001\\\",\\\"White Ferrari\\\",\\\"NUKE Rootkit\\\",\\\"Soulstealer Rootkit\\\",\\\"Demon Rootkit\\\",\\\"Hmap Node\\\",\\\"Jack the Ripper\\\",\\\"Bionic Arms\\\",\\\"Bionic Legs\\\",\\\"Bionic Spine\\\",\\\"BrachiBlades\\\",\\\"Nanofiber Weave\\\",\\\"Synthetic Heart\\\",\\\"Synfibril Muscle\\\",\\\"BitWire\\\",\\\"Neuralstimulator\\\",\\\"DataJack\\\",\\\"Graphene Bone Lacings\\\"].map(e => [e, ns.gang.getEquipmentStats(e)]))); } catch { }\\n        if (ns.read(\\\"/Temp/gang-getEquipmentStats.txt\\\") != result) await ns.write(\\\"/Temp/gang-getEquipmentStats.txt\\\", result, 'w'); } catch(err) { ns.tprint(String(err)); throw(err); } }\",\"filename\":\"/Temp/gang-getEquipmentStats.txt.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"helpers.js\",\"url\":\"blob:https://danielyxie.github.io/cc87c99f-1bcd-4606-bc28-f2498ce76bd4\",\"moduleSequenceNumber\":142},{\"filename\":\"/Temp/gang-getEquipmentStats.txt.js\",\"url\":\"blob:https://danielyxie.github.io/400a1897-21f7-4ee9-8d29-18a639f2a1e6\",\"moduleSequenceNumber\":317}],\"dependents\":[],\"ramUsage\":3.6,\"server\":\"home\",\"moduleSequenceNumber\":317,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"gang.getEquipmentStats\",\"cost\":2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { formatMoney, formatNumberShort, formatDuration, parseShortNumber, scanAllServers } from 'helpers.js'\\nexport async function main(ns) { try { ns.disableLog('sleep'); ns.tail(); let lastRead = '';\\n        while (true) { \\n            let read = ns.read('/Temp/stockmarket-summary.txt');\\n            if (lastRead != read) ns.print(lastRead = read);\\n            await ns.sleep(1000); \\n        }; } catch(err) { ns.tprint(String(err)); throw(err); } }\",\"filename\":\"/Temp/stockmarket-summary-tail.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"helpers.js\",\"url\":\"blob:https://danielyxie.github.io/4e070b01-2e7b-4c97-9551-219d3a10b7f3\",\"moduleSequenceNumber\":42150},{\"filename\":\"/Temp/stockmarket-summary-tail.js\",\"url\":\"blob:https://danielyxie.github.io/7b3b13df-4aaf-40a3-abb4-550d87a9ce19\",\"moduleSequenceNumber\":42437}],\"dependents\":[],\"ramUsage\":1.6,\"server\":\"home\",\"moduleSequenceNumber\":191,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { formatMoney, formatNumberShort, formatDuration, parseShortNumber, scanAllServers } from 'helpers.js'\\nexport async function main(ns) { try { let result = \\\"\\\"; try { result = JSON.stringify(Object.fromEntries([\\\"ECP\\\",\\\"MGCP\\\",\\\"BLD\\\",\\\"CLRK\\\",\\\"OMTK\\\",\\\"FSIG\\\",\\\"KGI\\\",\\\"FLCM\\\",\\\"STM\\\",\\\"DCOMM\\\",\\\"HLS\\\",\\\"VITA\\\",\\\"ICRS\\\",\\\"UNV\\\",\\\"AERO\\\",\\\"OMN\\\",\\\"SLRS\\\",\\\"GPH\\\",\\\"NVMD\\\",\\\"WDS\\\",\\\"LXO\\\",\\\"RHOC\\\",\\\"APHE\\\",\\\"SYSC\\\",\\\"CTK\\\",\\\"NTLK\\\",\\\"OMGA\\\",\\\"FNS\\\",\\\"JGN\\\",\\\"SGC\\\",\\\"CTYS\\\",\\\"MDYN\\\",\\\"TITN\\\"].map(sym => [sym, ns.stock.getAskPrice(sym)]))); } catch { }\\n        if (ns.read(\\\"/Temp/stock-getAskPrice.txt\\\") != result) await ns.write(\\\"/Temp/stock-getAskPrice.txt\\\", result, 'w'); } catch(err) { ns.tprint(String(err)); throw(err); } }\",\"filename\":\"/Temp/stock-getAskPrice.txt.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"helpers.js\",\"url\":\"blob:https://danielyxie.github.io/9eb21f17-21f8-4054-b9e4-dddc796fc685\",\"moduleSequenceNumber\":42150},{\"filename\":\"/Temp/stock-getAskPrice.txt.js\",\"url\":\"blob:https://danielyxie.github.io/8f4ecf49-1f3e-4a39-bfc2-9abe8ae65376\",\"moduleSequenceNumber\":42438}],\"dependents\":[],\"ramUsage\":3.6,\"server\":\"home\",\"moduleSequenceNumber\":192,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"stock.getAskPrice\",\"cost\":2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { formatMoney, formatNumberShort, formatDuration, parseShortNumber, scanAllServers } from 'helpers.js'\\nexport async function main(ns) { try { let result = \\\"\\\"; try { result = JSON.stringify(Object.fromEntries([\\\"ECP\\\",\\\"MGCP\\\",\\\"BLD\\\",\\\"CLRK\\\",\\\"OMTK\\\",\\\"FSIG\\\",\\\"KGI\\\",\\\"FLCM\\\",\\\"STM\\\",\\\"DCOMM\\\",\\\"HLS\\\",\\\"VITA\\\",\\\"ICRS\\\",\\\"UNV\\\",\\\"AERO\\\",\\\"OMN\\\",\\\"SLRS\\\",\\\"GPH\\\",\\\"NVMD\\\",\\\"WDS\\\",\\\"LXO\\\",\\\"RHOC\\\",\\\"APHE\\\",\\\"SYSC\\\",\\\"CTK\\\",\\\"NTLK\\\",\\\"OMGA\\\",\\\"FNS\\\",\\\"JGN\\\",\\\"SGC\\\",\\\"CTYS\\\",\\\"MDYN\\\",\\\"TITN\\\"].map(sym => [sym, ns.stock.getBidPrice(sym)]))); } catch { }\\n        if (ns.read(\\\"/Temp/stock-getBidPrice.txt\\\") != result) await ns.write(\\\"/Temp/stock-getBidPrice.txt\\\", result, 'w'); } catch(err) { ns.tprint(String(err)); throw(err); } }\",\"filename\":\"/Temp/stock-getBidPrice.txt.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"helpers.js\",\"url\":\"blob:https://danielyxie.github.io/e33d30f4-0440-404c-8abf-7e95851b7b0c\",\"moduleSequenceNumber\":42150},{\"filename\":\"/Temp/stock-getBidPrice.txt.js\",\"url\":\"blob:https://danielyxie.github.io/59fd804c-72bc-4fe2-a558-2f3095426bea\",\"moduleSequenceNumber\":42444}],\"dependents\":[],\"ramUsage\":3.6,\"server\":\"home\",\"moduleSequenceNumber\":193,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"stock.getBidPrice\",\"cost\":2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { formatMoney, formatNumberShort, formatDuration, parseShortNumber, scanAllServers } from 'helpers.js'\\nexport async function main(ns) { try { let result = \\\"\\\"; try { result = JSON.stringify(ns.gang.getTaskNames()); } catch { }\\n        if (ns.read(\\\"/Temp/gang-task-names.txt\\\") != result) await ns.write(\\\"/Temp/gang-task-names.txt\\\", result, 'w'); } catch(err) { ns.tprint(String(err)); throw(err); } }\",\"filename\":\"/Temp/gang-task-names.txt.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"helpers.js\",\"url\":\"blob:https://danielyxie.github.io/db7bd0b3-d957-45d8-948f-feefec6b5fb0\",\"moduleSequenceNumber\":142},{\"filename\":\"/Temp/gang-task-names.txt.js\",\"url\":\"blob:https://danielyxie.github.io/0fad0a82-1660-40ba-9c50-3885623e3a40\",\"moduleSequenceNumber\":324}],\"dependents\":[],\"ramUsage\":2.6,\"server\":\"home\",\"moduleSequenceNumber\":324,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"gang.getTaskNames\",\"cost\":1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { formatMoney, formatNumberShort, formatDuration, parseShortNumber, scanAllServers } from 'helpers.js'\\nexport async function main(ns) { try { let result = \\\"\\\"; try { result = JSON.stringify(Object.fromEntries([\\\"ECP\\\",\\\"MGCP\\\",\\\"BLD\\\",\\\"CLRK\\\",\\\"OMTK\\\",\\\"FSIG\\\",\\\"KGI\\\",\\\"FLCM\\\",\\\"STM\\\",\\\"DCOMM\\\",\\\"HLS\\\",\\\"VITA\\\",\\\"ICRS\\\",\\\"UNV\\\",\\\"AERO\\\",\\\"OMN\\\",\\\"SLRS\\\",\\\"GPH\\\",\\\"NVMD\\\",\\\"WDS\\\",\\\"LXO\\\",\\\"RHOC\\\",\\\"APHE\\\",\\\"SYSC\\\",\\\"CTK\\\",\\\"NTLK\\\",\\\"OMGA\\\",\\\"FNS\\\",\\\"JGN\\\",\\\"SGC\\\",\\\"CTYS\\\",\\\"MDYN\\\",\\\"TITN\\\"].map(sym => [sym, ns.stock.getVolatility(sym)]))); } catch { }\\n        if (ns.read(\\\"/Temp/stock-getVolatility.txt\\\") != result) await ns.write(\\\"/Temp/stock-getVolatility.txt\\\", result, 'w'); } catch(err) { ns.tprint(String(err)); throw(err); } }\",\"filename\":\"/Temp/stock-getVolatility.txt.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"helpers.js\",\"url\":\"blob:https://danielyxie.github.io/f3b4ddae-11cc-42c0-8247-7fc6a9f0704a\",\"moduleSequenceNumber\":42150},{\"filename\":\"/Temp/stock-getVolatility.txt.js\",\"url\":\"blob:https://danielyxie.github.io/7f9e7a33-eacd-4a3c-b01e-48f3978e0419\",\"moduleSequenceNumber\":42450}],\"dependents\":[],\"ramUsage\":4.1,\"server\":\"home\",\"moduleSequenceNumber\":195,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"stock.getVolatility\",\"cost\":2.5}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { formatMoney, formatNumberShort, formatDuration, parseShortNumber, scanAllServers } from 'helpers.js'\\nexport async function main(ns) { try { let result = \\\"\\\"; try { result = JSON.stringify(Object.fromEntries([\\\"Unassigned\\\",\\\"Ransomware\\\",\\\"Phishing\\\",\\\"Identity Theft\\\",\\\"DDoS Attacks\\\",\\\"Plant Virus\\\",\\\"Fraud & Counterfeiting\\\",\\\"Money Laundering\\\",\\\"Cyberterrorism\\\",\\\"Ethical Hacking\\\",\\\"Vigilante Justice\\\",\\\"Train Combat\\\",\\\"Train Hacking\\\",\\\"Train Charisma\\\",\\\"Territory Warfare\\\"].map(e => [e, ns.gang.getTaskStats(e)]))); } catch { }\\n        if (ns.read(\\\"/Temp/gang-getTaskStats.txt\\\") != result) await ns.write(\\\"/Temp/gang-getTaskStats.txt\\\", result, 'w'); } catch(err) { ns.tprint(String(err)); throw(err); } }\",\"filename\":\"/Temp/gang-getTaskStats.txt.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"helpers.js\",\"url\":\"blob:https://danielyxie.github.io/b3018c4d-2a71-4b0e-9248-4ec206ac07ce\",\"moduleSequenceNumber\":142},{\"filename\":\"/Temp/gang-getTaskStats.txt.js\",\"url\":\"blob:https://danielyxie.github.io/547a75ee-82d5-4571-92b2-f9671ad44e38\",\"moduleSequenceNumber\":327}],\"dependents\":[],\"ramUsage\":2.6,\"server\":\"home\",\"moduleSequenceNumber\":327,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"gang.getTaskStats\",\"cost\":1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { formatMoney, formatNumberShort, formatDuration, parseShortNumber, scanAllServers } from 'helpers.js'\\nexport async function main(ns) { try { let result = \\\"\\\"; try { result = JSON.stringify(Object.fromEntries([\\\"ECP\\\",\\\"MGCP\\\",\\\"BLD\\\",\\\"CLRK\\\",\\\"OMTK\\\",\\\"FSIG\\\",\\\"KGI\\\",\\\"FLCM\\\",\\\"STM\\\",\\\"DCOMM\\\",\\\"HLS\\\",\\\"VITA\\\",\\\"ICRS\\\",\\\"UNV\\\",\\\"AERO\\\",\\\"OMN\\\",\\\"SLRS\\\",\\\"GPH\\\",\\\"NVMD\\\",\\\"WDS\\\",\\\"LXO\\\",\\\"RHOC\\\",\\\"APHE\\\",\\\"SYSC\\\",\\\"CTK\\\",\\\"NTLK\\\",\\\"OMGA\\\",\\\"FNS\\\",\\\"JGN\\\",\\\"SGC\\\",\\\"CTYS\\\",\\\"MDYN\\\",\\\"TITN\\\"].map(sym => [sym, ns.stock.getForecast(sym)]))); } catch { }\\n        if (ns.read(\\\"/Temp/stock-getForecast.txt\\\") != result) await ns.write(\\\"/Temp/stock-getForecast.txt\\\", result, 'w'); } catch(err) { ns.tprint(String(err)); throw(err); } }\",\"filename\":\"/Temp/stock-getForecast.txt.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"helpers.js\",\"url\":\"blob:https://danielyxie.github.io/5d5b291e-9433-47bc-bc71-e56362b753b7\",\"moduleSequenceNumber\":42150},{\"filename\":\"/Temp/stock-getForecast.txt.js\",\"url\":\"blob:https://danielyxie.github.io/5993b3ff-922b-4710-8fd5-cb065fbd2223\",\"moduleSequenceNumber\":42455}],\"dependents\":[],\"ramUsage\":4.1,\"server\":\"home\",\"moduleSequenceNumber\":197,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"stock.getForecast\",\"cost\":2.5}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { formatMoney, formatNumberShort, formatDuration, parseShortNumber, scanAllServers } from 'helpers.js'\\nexport async function main(ns) { try { let result = \\\"\\\"; try { result = JSON.stringify(Object.fromEntries([\\\"ECP\\\",\\\"MGCP\\\",\\\"BLD\\\",\\\"CLRK\\\",\\\"OMTK\\\",\\\"FSIG\\\",\\\"KGI\\\",\\\"FLCM\\\",\\\"STM\\\",\\\"DCOMM\\\",\\\"HLS\\\",\\\"VITA\\\",\\\"ICRS\\\",\\\"UNV\\\",\\\"AERO\\\",\\\"OMN\\\",\\\"SLRS\\\",\\\"GPH\\\",\\\"NVMD\\\",\\\"WDS\\\",\\\"LXO\\\",\\\"RHOC\\\",\\\"APHE\\\",\\\"SYSC\\\",\\\"CTK\\\",\\\"NTLK\\\",\\\"OMGA\\\",\\\"FNS\\\",\\\"JGN\\\",\\\"SGC\\\",\\\"CTYS\\\",\\\"MDYN\\\",\\\"TITN\\\"].map(sym => [sym, ns.stock.getPosition(sym)]))); } catch { }\\n        if (ns.read(\\\"/Temp/stock-getPosition.txt\\\") != result) await ns.write(\\\"/Temp/stock-getPosition.txt\\\", result, 'w'); } catch(err) { ns.tprint(String(err)); throw(err); } }\",\"filename\":\"/Temp/stock-getPosition.txt.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"helpers.js\",\"url\":\"blob:https://danielyxie.github.io/aec56dbd-5991-4cef-b7f1-2504730de74c\",\"moduleSequenceNumber\":42150},{\"filename\":\"/Temp/stock-getPosition.txt.js\",\"url\":\"blob:https://danielyxie.github.io/d83de4e8-d1f9-4516-b50d-b5286bf2d601\",\"moduleSequenceNumber\":42458}],\"dependents\":[],\"ramUsage\":3.6,\"server\":\"home\",\"moduleSequenceNumber\":198,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"stock.getPosition\",\"cost\":2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { formatMoney, formatNumberShort, formatDuration, parseShortNumber, scanAllServers } from 'helpers.js'\\nexport async function main(ns) { try { let result = \\\"\\\"; try { result = JSON.stringify(ns.gang.getMemberNames()); } catch { }\\n        if (ns.read(\\\"/Temp/gang-member-names.txt\\\") != result) await ns.write(\\\"/Temp/gang-member-names.txt\\\", result, 'w'); } catch(err) { ns.tprint(String(err)); throw(err); } }\",\"filename\":\"/Temp/gang-member-names.txt.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"helpers.js\",\"url\":\"blob:https://danielyxie.github.io/90271ed6-197b-4fe7-9363-01de3e72a60e\",\"moduleSequenceNumber\":142},{\"filename\":\"/Temp/gang-member-names.txt.js\",\"url\":\"blob:https://danielyxie.github.io/349cd105-a17d-49f9-8975-734b471bc2a4\",\"moduleSequenceNumber\":332}],\"dependents\":[],\"ramUsage\":2.6,\"server\":\"home\",\"moduleSequenceNumber\":332,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"gang.getMemberNames\",\"cost\":1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { formatMoney, formatNumberShort, formatDuration, parseShortNumber, scanAllServers } from 'helpers.js'\\nexport async function main(ns) { try { let result = \\\"\\\"; try { result = JSON.stringify(Object.fromEntries([\\\"Thug 1\\\",\\\"Thug 2\\\",\\\"Thug 3\\\",\\\"Thug 4\\\",\\\"Thug 5\\\",\\\"Thug 6\\\",\\\"Thug 7\\\",\\\"Thug 8\\\",\\\"Thug 9\\\",\\\"Thug 10\\\",\\\"Thug 11\\\"].map(e => [e, ns.gang.getMemberInformation(e)]))); } catch { }\\n        if (ns.read(\\\"/Temp/gang-getMemberInformation.txt\\\") != result) await ns.write(\\\"/Temp/gang-getMemberInformation.txt\\\", result, 'w'); } catch(err) { ns.tprint(String(err)); throw(err); } }\",\"filename\":\"/Temp/gang-getMemberInformation.txt.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"helpers.js\",\"url\":\"blob:https://danielyxie.github.io/f71a6d27-019e-4966-85ca-1d874fa3cbfe\",\"moduleSequenceNumber\":142},{\"filename\":\"/Temp/gang-getMemberInformation.txt.js\",\"url\":\"blob:https://danielyxie.github.io/034fc298-9678-4beb-a3f4-633cd5d00fb6\",\"moduleSequenceNumber\":334}],\"dependents\":[],\"ramUsage\":3.6,\"server\":\"home\",\"moduleSequenceNumber\":334,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"gang.getMemberInformation\",\"cost\":2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { formatMoney, formatNumberShort, formatDuration, parseShortNumber, scanAllServers } from 'helpers.js'\\nexport async function main(ns) { try { let result = \\\"\\\"; try { result = JSON.stringify([{\\\"name\\\":\\\"Thug 1\\\",\\\"task\\\":\\\"Plant Virus\\\"},{\\\"name\\\":\\\"Thug 6\\\",\\\"task\\\":\\\"Plant Virus\\\"},{\\\"name\\\":\\\"Thug 8\\\",\\\"task\\\":\\\"Cyberterrorism\\\"},{\\\"name\\\":\\\"Thug 9\\\",\\\"task\\\":\\\"Cyberterrorism\\\"},{\\\"name\\\":\\\"Thug 10\\\",\\\"task\\\":\\\"Cyberterrorism\\\"},{\\\"name\\\":\\\"Thug 11\\\",\\\"task\\\":\\\"Cyberterrorism\\\"}].reduce((success, m) => success && ns.gang.setMemberTask(m.name, m.task), true)); } catch { }\\n        if (ns.read(\\\"/Temp/gang-set-member-tasks.txt\\\") != result) await ns.write(\\\"/Temp/gang-set-member-tasks.txt\\\", result, 'w'); } catch(err) { ns.tprint(String(err)); throw(err); } }\",\"filename\":\"/Temp/gang-set-member-tasks.txt.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"helpers.js\",\"url\":\"blob:https://danielyxie.github.io/e4ff19b2-475e-4990-b402-f9593f242484\",\"moduleSequenceNumber\":142},{\"filename\":\"/Temp/gang-set-member-tasks.txt.js\",\"url\":\"blob:https://danielyxie.github.io/f87731c7-1293-4906-901c-2061f438bc69\",\"moduleSequenceNumber\":577}],\"dependents\":[],\"ramUsage\":3.6,\"server\":\"home\",\"moduleSequenceNumber\":577,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"gang.setMemberTask\",\"cost\":2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { formatMoney, formatNumberShort, formatDuration, parseShortNumber, scanAllServers } from 'helpers.js'\\nexport async function main(ns) { try { let result = \\\"\\\"; try { result = JSON.stringify(ns.gang.getOtherGangInformation()); } catch { }\\n        if (ns.read(\\\"/Temp/gang-other-gang-info.txt\\\") != result) await ns.write(\\\"/Temp/gang-other-gang-info.txt\\\", result, 'w'); } catch(err) { ns.tprint(String(err)); throw(err); } }\",\"filename\":\"/Temp/gang-other-gang-info.txt.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"helpers.js\",\"url\":\"blob:https://danielyxie.github.io/3b5edf44-11d4-4ca3-b331-74033535ec6c\",\"moduleSequenceNumber\":142},{\"filename\":\"/Temp/gang-other-gang-info.txt.js\",\"url\":\"blob:https://danielyxie.github.io/0c7ad062-f54a-4e09-8702-ae6e07723807\",\"moduleSequenceNumber\":352}],\"dependents\":[],\"ramUsage\":3.6,\"server\":\"home\",\"moduleSequenceNumber\":352,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"gang.getOtherGangInformation\",\"cost\":2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { formatMoney, formatNumberShort, formatDuration, parseShortNumber, scanAllServers } from 'helpers.js'\\nexport async function main(ns) { try { let result = \\\"\\\"; try { result = JSON.stringify(Object.fromEntries([\\\"Thug 1\\\",\\\"Thug 2\\\",\\\"Thug 3\\\",\\\"Thug 4\\\",\\\"Thug 5\\\",\\\"Thug 6\\\",\\\"Thug 7\\\",\\\"Thug 8\\\",\\\"Thug 9\\\",\\\"Thug 10\\\",\\\"Thug 11\\\"].map(e => [e, ns.gang.getAscensionResult(e)]))); } catch { }\\n        if (ns.read(\\\"/Temp/gang-getAscensionResult.txt\\\") != result) await ns.write(\\\"/Temp/gang-getAscensionResult.txt\\\", result, 'w'); } catch(err) { ns.tprint(String(err)); throw(err); } }\",\"filename\":\"/Temp/gang-getAscensionResult.txt.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"helpers.js\",\"url\":\"blob:https://danielyxie.github.io/f23620fb-22e7-42ca-8b94-55d26faca65a\",\"moduleSequenceNumber\":142},{\"filename\":\"/Temp/gang-getAscensionResult.txt.js\",\"url\":\"blob:https://danielyxie.github.io/25c35215-232e-4cbd-8c3a-c75b0cf6f97d\",\"moduleSequenceNumber\":359}],\"dependents\":[],\"ramUsage\":3.6,\"server\":\"home\",\"moduleSequenceNumber\":359,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"gang.getAscensionResult\",\"cost\":2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { formatMoney, formatNumberShort, formatDuration, parseShortNumber, scanAllServers } from 'helpers.js'\\nexport async function main(ns) { try { let result = \\\"\\\"; try { result = JSON.stringify(ns.gang.ascendMember('Thug 6')); } catch { }\\n        if (ns.read(\\\"/Temp/gang-ascend-member.txt\\\") != result) await ns.write(\\\"/Temp/gang-ascend-member.txt\\\", result, 'w'); } catch(err) { ns.tprint(String(err)); throw(err); } }\",\"filename\":\"/Temp/gang-ascend-member.txt.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"helpers.js\",\"url\":\"blob:https://danielyxie.github.io/503eb7ea-74a5-48be-badd-012f733964ef\",\"moduleSequenceNumber\":142},{\"filename\":\"/Temp/gang-ascend-member.txt.js\",\"url\":\"blob:https://danielyxie.github.io/0bcdd417-1904-49d9-b310-3989e7ea4c38\",\"moduleSequenceNumber\":363}],\"dependents\":[],\"ramUsage\":5.6,\"server\":\"home\",\"moduleSequenceNumber\":363,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"gang.ascendMember\",\"cost\":4}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { formatMoney, formatNumberShort, formatDuration, parseShortNumber, scanAllServers } from 'helpers.js'\\nexport async function main(ns) { try { let result = \\\"\\\"; try { result = JSON.stringify([{\\\"member\\\":\\\"Thug 6\\\",\\\"type\\\":\\\"Rootkit\\\",\\\"equipmentName\\\":\\\"Jack the Ripper\\\",\\\"cost\\\":56206080.26419799},{\\\"member\\\":\\\"Thug 10\\\",\\\"type\\\":\\\"Rootkit\\\",\\\"equipmentName\\\":\\\"Jack the Ripper\\\",\\\"cost\\\":56206080.26419799}].reduce((success, o) => success && ns.gang.purchaseEquipment(o.member, o.equipmentName), true)); } catch { }\\n        if (ns.read(\\\"/Temp/gang-upgrade-members.txt\\\") != result) await ns.write(\\\"/Temp/gang-upgrade-members.txt\\\", result, 'w'); } catch(err) { ns.tprint(String(err)); throw(err); } }\",\"filename\":\"/Temp/gang-upgrade-members.txt.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"helpers.js\",\"url\":\"blob:https://danielyxie.github.io/282f592a-ffe8-43a0-8a5f-1ca5665d169b\",\"moduleSequenceNumber\":142},{\"filename\":\"/Temp/gang-upgrade-members.txt.js\",\"url\":\"blob:https://danielyxie.github.io/00b91944-ea3b-4ac5-8deb-151664b5f526\",\"moduleSequenceNumber\":432}],\"dependents\":[],\"ramUsage\":5.6,\"server\":\"home\",\"moduleSequenceNumber\":432,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"gang.purchaseEquipment\",\"cost\":4}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { formatMoney, formatNumberShort, formatDuration, parseShortNumber, scanAllServers } from 'helpers.js'\\nexport async function main(ns) { try { let result = \\\"\\\"; try { result = JSON.stringify(ns.stock.buy('BLD', 11626)); } catch { }\\n        if (ns.read(\\\"/Temp/transact-stock.txt\\\") != result) await ns.write(\\\"/Temp/transact-stock.txt\\\", result, 'w'); } catch(err) { ns.tprint(String(err)); throw(err); } }\",\"filename\":\"/Temp/transact-stock.txt.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"helpers.js\",\"url\":\"blob:https://danielyxie.github.io/850fcbef-bcf1-4f17-be81-7c42bfa15700\",\"moduleSequenceNumber\":42150},{\"filename\":\"/Temp/transact-stock.txt.js\",\"url\":\"blob:https://danielyxie.github.io/d1785c56-23e9-48c6-8e5b-d2b9fd30fdb1\",\"moduleSequenceNumber\":43128}],\"dependents\":[],\"ramUsage\":4.1,\"server\":\"home\",\"moduleSequenceNumber\":206,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"stock.buy\",\"cost\":2.5}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { formatMoney, formatNumberShort, formatDuration, parseShortNumber, scanAllServers } from 'helpers.js'\\nexport async function main(ns) { try { let result = \\\"\\\"; try { result = JSON.stringify(await ns.scp([\\\"/Remote/share.js\\\",\\\"helpers.js\\\"], 'home', 'n00dles')); } catch { }\\n        if (ns.read(\\\"/Temp/copy-scripts.txt\\\") != result) await ns.write(\\\"/Temp/copy-scripts.txt\\\", result, 'w'); } catch(err) { ns.tprint(String(err)); throw(err); } }\",\"filename\":\"/Temp/copy-scripts.txt.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"helpers.js\",\"url\":\"blob:https://danielyxie.github.io/47277563-d4ca-43eb-a121-1477f7523a7a\",\"moduleSequenceNumber\":136},{\"filename\":\"/Temp/copy-scripts.txt.js\",\"url\":\"blob:https://danielyxie.github.io/0f5ac16d-2bc5-4a97-8069-567f32e162c1\",\"moduleSequenceNumber\":1411}],\"dependents\":[],\"ramUsage\":2.2,\"server\":\"home\",\"moduleSequenceNumber\":207,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { formatMoney, formatNumberShort, formatDuration, parseShortNumber, scanAllServers } from 'helpers.js'\\nexport async function main(ns) { try { ns.ps().filter(proc => proc.filename == 'stockmaster.js' && !proc.args.includes('-l') && !proc.args.includes('--liquidate')).forEach(proc => ns.kill(proc.pid)); } catch(err) { ns.tprint(String(err)); throw(err); } }\",\"filename\":\"/Temp/kill-script.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"helpers.js\",\"url\":\"blob:https://danielyxie.github.io/14b652b2-ad15-4747-9c76-e490c4a86199\",\"moduleSequenceNumber\":37253},{\"filename\":\"/Temp/kill-script.js\",\"url\":\"blob:https://danielyxie.github.io/1ed3163f-ebe7-44e4-9778-19ef1cc70d48\",\"moduleSequenceNumber\":39091}],\"dependents\":[],\"ramUsage\":2.3,\"server\":\"home\",\"moduleSequenceNumber\":208,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"ps\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"kill\",\"cost\":0.5}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { formatMoney, formatNumberShort, formatDuration, parseShortNumber, scanAllServers } from 'helpers.js'\\nexport async function main(ns) { try { [\\\"Speakers for the Dead\\\",\\\"The Dark Army\\\",\\\"The Syndicate\\\",\\\"Slum Snakes\\\",\\\"NiteSec\\\",\\\"The Black Hand\\\"].forEach(g => ns.gang.createGang(g)); } catch(err) { ns.tprint(String(err)); throw(err); } }\",\"filename\":\"/Temp/gang-createGang.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"helpers.js\",\"url\":\"blob:https://danielyxie.github.io/aa790969-c564-4237-946e-c962b4ccb7e5\",\"moduleSequenceNumber\":132},{\"filename\":\"/Temp/gang-createGang.js\",\"url\":\"blob:https://danielyxie.github.io/05a3ced0-2cea-4df1-ad73-b8e6afafad45\",\"moduleSequenceNumber\":273}],\"dependents\":[],\"ramUsage\":2.6,\"server\":\"home\",\"moduleSequenceNumber\":209,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"gang.createGang\",\"cost\":1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { formatMoney, formatNumberShort, formatDuration, parseShortNumber, scanAllServers } from 'helpers.js'\\nexport async function main(ns) { try { let result = \\\"\\\"; try { result = JSON.stringify(Object.fromEntries([\\\"BitRunners\\\",\\\"The Black Hand\\\",\\\"NiteSec\\\",\\\"CyberSec\\\",\\\"Netburners\\\",\\\"Tian Di Hui\\\",\\\"Sector-12\\\",\\\"Chongqing\\\",\\\"New Tokyo\\\",\\\"Ishima\\\",\\\"Aevum\\\",\\\"Volhaven\\\",\\\"Slum Snakes\\\",\\\"Tetrads\\\",\\\"Daedalus\\\"].map(faction => [faction, ns.getAugmentationsFromFaction(faction)]))); } catch { }\\n        if (ns.read(\\\"/Temp/faction-augs.txt\\\") != result) await ns.write(\\\"/Temp/faction-augs.txt\\\", result, 'w'); } catch(err) { ns.tprint(String(err)); throw(err); } }\",\"filename\":\"/Temp/faction-augs.txt.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"helpers.js\",\"url\":\"blob:https://danielyxie.github.io/c1929e84-3785-4dab-909f-0d7780e912d4\",\"moduleSequenceNumber\":142},{\"filename\":\"/Temp/faction-augs.txt.js\",\"url\":\"blob:https://danielyxie.github.io/d422a718-6f65-4a97-91c9-e3d0ad711c38\",\"moduleSequenceNumber\":383}],\"dependents\":[],\"ramUsage\":6.6,\"server\":\"home\",\"moduleSequenceNumber\":383,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getAugmentationsFromFaction\",\"cost\":5}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { formatMoney, formatNumberShort, formatDuration, parseShortNumber, scanAllServers } from 'helpers.js'\\nexport async function main(ns) { try { let result = \\\"\\\"; try { result = JSON.stringify(Object.fromEntries([\\\"Artificial Bio-neural Network Implant\\\",\\\"Enhanced Myelin Sheathing\\\",\\\"DataJack\\\",\\\"Embedded Netburner Module\\\",\\\"Embedded Netburner Module Core Implant\\\",\\\"Embedded Netburner Module Core V2 Upgrade\\\",\\\"Neural Accelerator\\\",\\\"Cranial Signal Processors - Gen III\\\",\\\"Cranial Signal Processors - Gen IV\\\",\\\"Cranial Signal Processors - Gen V\\\",\\\"NeuroFlux Governor\\\",\\\"Neurotrainer II\\\",\\\"BitRunners Neurolink\\\",\\\"Artificial Synaptic Potentiation\\\",\\\"Neuralstimulator\\\",\\\"The Black Hand\\\",\\\"Unstable Circadian Modulator\\\",\\\"HemoRecirculator\\\",\\\"Augmented Targeting I\\\",\\\"Augmented Targeting II\\\",\\\"Augmented Targeting III\\\",\\\"Synthetic Heart\\\",\\\"Synfibril Muscle\\\",\\\"Combat Rib I\\\",\\\"Combat Rib II\\\",\\\"Combat Rib III\\\",\\\"Nanofiber Weave\\\",\\\"NEMEAN Subdermal Weave\\\",\\\"Wired Reflexes\\\",\\\"Graphene Bone Lacings\\\",\\\"Bionic Spine\\\",\\\"Graphene Bionic Spine Upgrade\\\",\\\"Bionic Legs\\\",\\\"Graphene Bionic Legs Upgrade\\\",\\\"Speech Processor Implant\\\",\\\"TITN-41 Gene-Modification Injection\\\",\\\"Enhanced Social Interaction Implant\\\",\\\"BitWire\\\",\\\"Synaptic Enhancement Implant\\\",\\\"Neural-Retention Enhancement\\\",\\\"Embedded Netburner Module Core V3 Upgrade\\\",\\\"Embedded Netburner Module Analyze Engine\\\",\\\"Embedded Netburner Module Direct Memory Access Upgrade\\\",\\\"Cranial Signal Processors - Gen I\\\",\\\"Cranial Signal Processors - Gen II\\\",\\\"Neuronal Densification\\\",\\\"Nuoptimal Nootropic Injector Implant\\\",\\\"Speech Enhancement\\\",\\\"FocusWire\\\",\\\"PC Direct-Neural Interface\\\",\\\"PC Direct-Neural Interface Optimization Submodule\\\",\\\"PC Direct-Neural Interface NeuroNet Injector\\\",\\\"ADR-V1 Pheromone Gene\\\",\\\"ADR-V2 Pheromone Gene\\\",\\\"The Shadow's Simulacrum\\\",\\\"Hacknet Node CPU Architecture Neural-Upload\\\",\\\"Hacknet Node Cache Architecture Neural-Upload\\\",\\\"Hacknet Node NIC Architecture Neural-Upload\\\",\\\"Hacknet Node Kernel Direct-Neural Interface\\\",\\\"Hacknet Node Core Direct-Neural Interface\\\",\\\"Neurotrainer I\\\",\\\"Neurotrainer III\\\",\\\"HyperSight Corneal Implant\\\",\\\"LuminCloaking-V1 Skin Implant\\\",\\\"LuminCloaking-V2 Skin Implant\\\",\\\"SmartSonar Implant\\\",\\\"Power Recirculation Core\\\",\\\"QLink\\\",\\\"SPTN-97 Gene Modification\\\",\\\"ECorp HVMind Implant\\\",\\\"CordiARC Fusion Reactor\\\",\\\"SmartJaw\\\",\\\"Neotra\\\",\\\"Xanipher\\\",\\\"Hydroflame Left Arm\\\",\\\"nextSENS Gene Modification\\\",\\\"OmniTek InfoLoad\\\",\\\"Photosynthetic Cells\\\",\\\"CRTX42-AA Gene Modification\\\",\\\"Neuregen Gene Modification\\\",\\\"CashRoot Starter Kit\\\",\\\"NutriGen Implant\\\",\\\"PCMatrix\\\",\\\"INFRARET Enhancement\\\",\\\"DermaForce Particle Barrier\\\",\\\"Graphene BrachiBlades Upgrade\\\",\\\"Graphene Bionic Arms Upgrade\\\",\\\"BrachiBlades\\\",\\\"Bionic Arms\\\",\\\"Social Negotiation Assistant (S.N.A)\\\",\\\"Neuroreceptor Management Implant\\\",\\\"The Red Pill\\\"].map(aug => [aug, ns.getAugmentationRepReq(aug)]))); } catch { }\\n        if (ns.read(\\\"/Temp/aug-repreqs.txt\\\") != result) await ns.write(\\\"/Temp/aug-repreqs.txt\\\", result, 'w'); } catch(err) { ns.tprint(String(err)); throw(err); } }\",\"filename\":\"/Temp/aug-repreqs.txt.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"helpers.js\",\"url\":\"blob:https://danielyxie.github.io/ce0b59c2-6b64-4429-8343-ab31cc68d52d\",\"moduleSequenceNumber\":142},{\"filename\":\"/Temp/aug-repreqs.txt.js\",\"url\":\"blob:https://danielyxie.github.io/5ea3b4c7-b9b8-4fbc-ac6d-6473b710af21\",\"moduleSequenceNumber\":391}],\"dependents\":[],\"ramUsage\":4.1,\"server\":\"home\",\"moduleSequenceNumber\":391,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getAugmentationRepReq\",\"cost\":2.5}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { formatMoney, formatNumberShort, formatDuration, parseShortNumber, scanAllServers } from 'helpers.js'\\nexport async function main(ns) { try { let result = \\\"\\\"; try { result = JSON.stringify(Object.fromEntries([\\\"Artificial Bio-neural Network Implant\\\",\\\"Enhanced Myelin Sheathing\\\",\\\"DataJack\\\",\\\"Embedded Netburner Module\\\",\\\"Embedded Netburner Module Core Implant\\\",\\\"Embedded Netburner Module Core V2 Upgrade\\\",\\\"Neural Accelerator\\\",\\\"Cranial Signal Processors - Gen III\\\",\\\"Cranial Signal Processors - Gen IV\\\",\\\"Cranial Signal Processors - Gen V\\\",\\\"NeuroFlux Governor\\\",\\\"Neurotrainer II\\\",\\\"BitRunners Neurolink\\\",\\\"Artificial Synaptic Potentiation\\\",\\\"Neuralstimulator\\\",\\\"The Black Hand\\\",\\\"Unstable Circadian Modulator\\\",\\\"HemoRecirculator\\\",\\\"Augmented Targeting I\\\",\\\"Augmented Targeting II\\\",\\\"Augmented Targeting III\\\",\\\"Synthetic Heart\\\",\\\"Synfibril Muscle\\\",\\\"Combat Rib I\\\",\\\"Combat Rib II\\\",\\\"Combat Rib III\\\",\\\"Nanofiber Weave\\\",\\\"NEMEAN Subdermal Weave\\\",\\\"Wired Reflexes\\\",\\\"Graphene Bone Lacings\\\",\\\"Bionic Spine\\\",\\\"Graphene Bionic Spine Upgrade\\\",\\\"Bionic Legs\\\",\\\"Graphene Bionic Legs Upgrade\\\",\\\"Speech Processor Implant\\\",\\\"TITN-41 Gene-Modification Injection\\\",\\\"Enhanced Social Interaction Implant\\\",\\\"BitWire\\\",\\\"Synaptic Enhancement Implant\\\",\\\"Neural-Retention Enhancement\\\",\\\"Embedded Netburner Module Core V3 Upgrade\\\",\\\"Embedded Netburner Module Analyze Engine\\\",\\\"Embedded Netburner Module Direct Memory Access Upgrade\\\",\\\"Cranial Signal Processors - Gen I\\\",\\\"Cranial Signal Processors - Gen II\\\",\\\"Neuronal Densification\\\",\\\"Nuoptimal Nootropic Injector Implant\\\",\\\"Speech Enhancement\\\",\\\"FocusWire\\\",\\\"PC Direct-Neural Interface\\\",\\\"PC Direct-Neural Interface Optimization Submodule\\\",\\\"PC Direct-Neural Interface NeuroNet Injector\\\",\\\"ADR-V1 Pheromone Gene\\\",\\\"ADR-V2 Pheromone Gene\\\",\\\"The Shadow's Simulacrum\\\",\\\"Hacknet Node CPU Architecture Neural-Upload\\\",\\\"Hacknet Node Cache Architecture Neural-Upload\\\",\\\"Hacknet Node NIC Architecture Neural-Upload\\\",\\\"Hacknet Node Kernel Direct-Neural Interface\\\",\\\"Hacknet Node Core Direct-Neural Interface\\\",\\\"Neurotrainer I\\\",\\\"Neurotrainer III\\\",\\\"HyperSight Corneal Implant\\\",\\\"LuminCloaking-V1 Skin Implant\\\",\\\"LuminCloaking-V2 Skin Implant\\\",\\\"SmartSonar Implant\\\",\\\"Power Recirculation Core\\\",\\\"QLink\\\",\\\"SPTN-97 Gene Modification\\\",\\\"ECorp HVMind Implant\\\",\\\"CordiARC Fusion Reactor\\\",\\\"SmartJaw\\\",\\\"Neotra\\\",\\\"Xanipher\\\",\\\"Hydroflame Left Arm\\\",\\\"nextSENS Gene Modification\\\",\\\"OmniTek InfoLoad\\\",\\\"Photosynthetic Cells\\\",\\\"CRTX42-AA Gene Modification\\\",\\\"Neuregen Gene Modification\\\",\\\"CashRoot Starter Kit\\\",\\\"NutriGen Implant\\\",\\\"PCMatrix\\\",\\\"INFRARET Enhancement\\\",\\\"DermaForce Particle Barrier\\\",\\\"Graphene BrachiBlades Upgrade\\\",\\\"Graphene Bionic Arms Upgrade\\\",\\\"BrachiBlades\\\",\\\"Bionic Arms\\\",\\\"Social Negotiation Assistant (S.N.A)\\\",\\\"Neuroreceptor Management Implant\\\",\\\"The Red Pill\\\"].map(aug => [aug, ns.getAugmentationStats(aug)]))); } catch { }\\n        if (ns.read(\\\"/Temp/aug-stats.txt\\\") != result) await ns.write(\\\"/Temp/aug-stats.txt\\\", result, 'w'); } catch(err) { ns.tprint(String(err)); throw(err); } }\",\"filename\":\"/Temp/aug-stats.txt.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"helpers.js\",\"url\":\"blob:https://danielyxie.github.io/499b08dd-bb94-4874-a988-c342b11c2827\",\"moduleSequenceNumber\":142},{\"filename\":\"/Temp/aug-stats.txt.js\",\"url\":\"blob:https://danielyxie.github.io/1e2f6f48-372b-4f13-a5f0-9cd076a9c1d1\",\"moduleSequenceNumber\":393}],\"dependents\":[],\"ramUsage\":6.6,\"server\":\"home\",\"moduleSequenceNumber\":393,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getAugmentationStats\",\"cost\":5}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { formatMoney, formatNumberShort, formatDuration, parseShortNumber, scanAllServers } from 'helpers.js'\\nexport async function main(ns) { try { let result = \\\"\\\"; try { result = JSON.stringify(Object.fromEntries([\\\"BitRunners\\\",\\\"The Black Hand\\\",\\\"NiteSec\\\",\\\"CyberSec\\\",\\\"Netburners\\\",\\\"Tian Di Hui\\\",\\\"Sector-12\\\",\\\"Chongqing\\\",\\\"New Tokyo\\\",\\\"Ishima\\\",\\\"Aevum\\\",\\\"Volhaven\\\",\\\"Slum Snakes\\\",\\\"Tetrads\\\",\\\"Daedalus\\\"].map(faction => [faction, ns.getFactionFavor(faction)]))); } catch { }\\n        if (ns.read(\\\"/Temp/faction-favor.txt\\\") != result) await ns.write(\\\"/Temp/faction-favor.txt\\\", result, 'w'); } catch(err) { ns.tprint(String(err)); throw(err); } }\",\"filename\":\"/Temp/faction-favor.txt.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"helpers.js\",\"url\":\"blob:https://danielyxie.github.io/62821340-7594-4f4a-9938-d287ff31df89\",\"moduleSequenceNumber\":142},{\"filename\":\"/Temp/faction-favor.txt.js\",\"url\":\"blob:https://danielyxie.github.io/e05ad86b-a606-4123-9459-10430dd34c17\",\"moduleSequenceNumber\":389}],\"dependents\":[],\"ramUsage\":2.6,\"server\":\"home\",\"moduleSequenceNumber\":389,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getFactionFavor\",\"cost\":1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { formatMoney, formatNumberShort, formatDuration, parseShortNumber, scanAllServers } from 'helpers.js'\\nexport async function main(ns) { try { let result = \\\"\\\"; try { result = JSON.stringify(ns.getOwnedAugmentations(true)); } catch { }\\n        if (ns.read(\\\"/Temp/player-augs-purchased.txt\\\") != result) await ns.write(\\\"/Temp/player-augs-purchased.txt\\\", result, 'w'); } catch(err) { ns.tprint(String(err)); throw(err); } }\",\"filename\":\"/Temp/player-augs-purchased.txt.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"helpers.js\",\"url\":\"blob:https://danielyxie.github.io/baa50347-210e-473e-b755-4fe2e4c6121f\",\"moduleSequenceNumber\":142},{\"filename\":\"/Temp/player-augs-purchased.txt.js\",\"url\":\"blob:https://danielyxie.github.io/5d7b02d9-d076-4f9c-9ee5-c123bf8bbe40\",\"moduleSequenceNumber\":303}],\"dependents\":[],\"ramUsage\":6.6,\"server\":\"home\",\"moduleSequenceNumber\":303,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getOwnedAugmentations\",\"cost\":5}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { formatMoney, formatNumberShort, formatDuration, parseShortNumber, scanAllServers } from 'helpers.js'\\nexport async function main(ns) { try { let result = \\\"\\\"; try { result = JSON.stringify(ns.getOwnedAugmentations()); } catch { }\\n        if (ns.read(\\\"/Temp/player-augs-installed.txt\\\") != result) await ns.write(\\\"/Temp/player-augs-installed.txt\\\", result, 'w'); } catch(err) { ns.tprint(String(err)); throw(err); } }\",\"filename\":\"/Temp/player-augs-installed.txt.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"helpers.js\",\"url\":\"blob:https://danielyxie.github.io/ac752c36-5f5c-469d-b352-7c7df7df0a69\",\"moduleSequenceNumber\":142},{\"filename\":\"/Temp/player-augs-installed.txt.js\",\"url\":\"blob:https://danielyxie.github.io/a6bd0a86-caa4-43dd-825b-984564de097b\",\"moduleSequenceNumber\":355}],\"dependents\":[],\"ramUsage\":6.6,\"server\":\"home\",\"moduleSequenceNumber\":355,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getOwnedAugmentations\",\"cost\":5}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { formatMoney, formatNumberShort, formatDuration, parseShortNumber, scanAllServers } from 'helpers.js'\\nexport async function main(ns) { try { let result = \\\"\\\"; try { result = JSON.stringify(ns.checkFactionInvitations()); } catch { }\\n        if (ns.read(\\\"/Temp/player-faction-invites.txt\\\") != result) await ns.write(\\\"/Temp/player-faction-invites.txt\\\", result, 'w'); } catch(err) { ns.tprint(String(err)); throw(err); } }\",\"filename\":\"/Temp/player-faction-invites.txt.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"helpers.js\",\"url\":\"blob:https://danielyxie.github.io/1ce36f73-d238-4885-aaf7-2157bfd05194\",\"moduleSequenceNumber\":142},{\"filename\":\"/Temp/player-faction-invites.txt.js\",\"url\":\"blob:https://danielyxie.github.io/61df1a90-6b9e-4f1f-aa86-e7419ab740a9\",\"moduleSequenceNumber\":328}],\"dependents\":[],\"ramUsage\":4.6,\"server\":\"home\",\"moduleSequenceNumber\":328,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"checkFactionInvitations\",\"cost\":3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { formatMoney, formatNumberShort, formatDuration, parseShortNumber, scanAllServers } from 'helpers.js'\\nexport async function main(ns) { try { let result = \\\"\\\"; try { result = JSON.stringify(Object.fromEntries([\\\"heist\\\",\\\"assassinate\\\",\\\"homicide\\\",\\\"mug\\\"].map(c => [c, ns.getCrimeChance(c)]))); } catch { }\\n        if (ns.read(\\\"/Temp/crime-chances.txt\\\") != result) await ns.write(\\\"/Temp/crime-chances.txt\\\", result, 'w'); } catch(err) { ns.tprint(String(err)); throw(err); } }\",\"filename\":\"/Temp/crime-chances.txt.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"helpers.js\",\"url\":\"blob:https://danielyxie.github.io/7db84f19-1f2b-4eb1-83fd-c13c632e8565\",\"moduleSequenceNumber\":5043},{\"filename\":\"/Temp/crime-chances.txt.js\",\"url\":\"blob:https://danielyxie.github.io/c4a0de42-ef15-40ef-ae52-ab86ddb78a8e\",\"moduleSequenceNumber\":5220}],\"dependents\":[],\"ramUsage\":6.6,\"server\":\"home\",\"moduleSequenceNumber\":217,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getCrimeChance\",\"cost\":5}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { formatMoney, formatNumberShort, formatDuration, parseShortNumber, scanAllServers } from 'helpers.js'\\nexport async function main(ns) { try { let result = \\\"\\\"; try { result = JSON.stringify(ns.commitCrime('mug')); } catch { }\\n        if (ns.read(\\\"/Temp/crime-time.txt\\\") != result) await ns.write(\\\"/Temp/crime-time.txt\\\", result, 'w'); } catch(err) { ns.tprint(String(err)); throw(err); } }\",\"filename\":\"/Temp/crime-time.txt.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"helpers.js\",\"url\":\"blob:https://danielyxie.github.io/02a425ca-8eeb-4807-a1a7-cee572d09d4a\",\"moduleSequenceNumber\":5043},{\"filename\":\"/Temp/crime-time.txt.js\",\"url\":\"blob:https://danielyxie.github.io/7c709f4b-e09b-4bde-8ac5-5d6a2bf4026f\",\"moduleSequenceNumber\":5223}],\"dependents\":[],\"ramUsage\":6.6,\"server\":\"home\",\"moduleSequenceNumber\":218,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"commitCrime\",\"cost\":5}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { formatMoney, formatNumberShort, formatDuration, parseShortNumber, scanAllServers } from 'helpers.js'\\nexport async function main(ns) { try { let result = \\\"\\\"; try { result = JSON.stringify([\\\"n00dles\\\",\\\"foodnstuff\\\",\\\"sigma-cosmetics\\\",\\\"joesguns\\\",\\\"hong-fang-tea\\\",\\\"harakiri-sushi\\\",\\\"iron-gym\\\",\\\"darkweb\\\",\\\"nectar-net\\\",\\\"CSEC\\\",\\\"zer0\\\",\\\"max-hardware\\\",\\\"silver-helix\\\",\\\"omega-net\\\",\\\"phantasy\\\",\\\"neo-net\\\",\\\"netlink\\\",\\\"the-hub\\\",\\\"crush-fitness\\\",\\\"comptek\\\",\\\"johnson-ortho\\\",\\\"avmnite-02h\\\",\\\"rothman-uni\\\",\\\"zb-institute\\\",\\\"summit-uni\\\",\\\"syscore\\\",\\\"catalyst\\\",\\\"I.I.I.I\\\",\\\"alpha-ent\\\",\\\"millenium-fitness\\\",\\\"rho-construction\\\",\\\"aevum-police\\\",\\\"lexo-corp\\\",\\\"global-pharm\\\",\\\"galactic-cyber\\\",\\\"snap-fitness\\\",\\\"aerocorp\\\",\\\"deltaone\\\",\\\"omnia\\\",\\\"unitalife\\\",\\\"defcomm\\\",\\\"icarus\\\",\\\"univ-energy\\\",\\\"zeus-med\\\",\\\"solaris\\\",\\\"zb-def\\\",\\\"nova-med\\\",\\\"infocomm\\\",\\\"taiyang-digital\\\",\\\"titan-labs\\\",\\\"microdyne\\\",\\\"applied-energetics\\\",\\\"run4theh111z\\\",\\\"vitalife\\\",\\\"stormtech\\\",\\\"helios\\\",\\\"fulcrumtech\\\",\\\"omnitek\\\",\\\".\\\",\\\"4sigma\\\",\\\"kuai-gong\\\",\\\"blade\\\",\\\"nwo\\\",\\\"b-and-a\\\",\\\"clarkinc\\\",\\\"powerhouse-fitness\\\",\\\"The-Cave\\\",\\\"ecorp\\\",\\\"fulcrumassets\\\",\\\"megacorp\\\"].filter(s => !ns.getServer(s).backdoorInstalled)); } catch { }\\n        if (ns.read(\\\"/Temp/servers-to-backdoor.txt\\\") != result) await ns.write(\\\"/Temp/servers-to-backdoor.txt\\\", result, 'w'); } catch(err) { ns.tprint(String(err)); throw(err); } }\",\"filename\":\"/Temp/servers-to-backdoor.txt.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"helpers.js\",\"url\":\"blob:https://danielyxie.github.io/64770e50-a6f4-409a-a694-c22476452833\",\"moduleSequenceNumber\":142},{\"filename\":\"/Temp/servers-to-backdoor.txt.js\",\"url\":\"blob:https://danielyxie.github.io/b098a373-8f73-46bb-a194-c00a3c7ef65f\",\"moduleSequenceNumber\":323}],\"dependents\":[],\"ramUsage\":3.6,\"server\":\"home\",\"moduleSequenceNumber\":323,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { formatMoney, formatNumberShort, formatDuration, parseShortNumber, scanAllServers } from 'helpers.js'\\nexport async function main(ns) { try { let result = \\\"\\\"; try { result = JSON.stringify(Object.fromEntries([\\\"BitRunners\\\",\\\"The Black Hand\\\",\\\"NiteSec\\\",\\\"CyberSec\\\",\\\"Netburners\\\",\\\"Tian Di Hui\\\",\\\"Sector-12\\\",\\\"Chongqing\\\",\\\"New Tokyo\\\",\\\"Ishima\\\",\\\"Aevum\\\",\\\"Volhaven\\\",\\\"Slum Snakes\\\",\\\"Tetrads\\\",\\\"Daedalus\\\"].map(faction => [faction, ns.getFactionRep(faction)]))); } catch { }\\n        if (ns.read(\\\"/Temp/faction-rep.txt\\\") != result) await ns.write(\\\"/Temp/faction-rep.txt\\\", result, 'w'); } catch(err) { ns.tprint(String(err)); throw(err); } }\",\"filename\":\"/Temp/faction-rep.txt.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"helpers.js\",\"url\":\"blob:https://danielyxie.github.io/4fc7d378-de44-410f-b026-c5f69223e872\",\"moduleSequenceNumber\":142},{\"filename\":\"/Temp/faction-rep.txt.js\",\"url\":\"blob:https://danielyxie.github.io/82e2a7c5-d0e9-46cf-89dd-142b967ef933\",\"moduleSequenceNumber\":333}],\"dependents\":[],\"ramUsage\":2.6,\"server\":\"home\",\"moduleSequenceNumber\":333,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getFactionRep\",\"cost\":1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { formatMoney, formatNumberShort, formatDuration, parseShortNumber, scanAllServers } from 'helpers.js'\\nexport async function main(ns) { try { let result = \\\"\\\"; try { result = JSON.stringify(ns.gang.inGang() ? ns.gang.getGangInformation().faction : false); } catch { }\\n        if (ns.read(\\\"/Temp/gang-faction.txt\\\") != result) await ns.write(\\\"/Temp/gang-faction.txt\\\", result, 'w'); } catch(err) { ns.tprint(String(err)); throw(err); } }\",\"filename\":\"/Temp/gang-faction.txt.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"helpers.js\",\"url\":\"blob:https://danielyxie.github.io/36ca9870-dead-4f39-99aa-55802e5922c6\",\"moduleSequenceNumber\":142},{\"filename\":\"/Temp/gang-faction.txt.js\",\"url\":\"blob:https://danielyxie.github.io/561d588f-72a9-46ad-90d7-5c3c15db5fa2\",\"moduleSequenceNumber\":336}],\"dependents\":[],\"ramUsage\":4.6,\"server\":\"home\",\"moduleSequenceNumber\":336,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"gang.inGang\",\"cost\":1},{\"type\":\"fn\",\"name\":\"gang.getGangInformation\",\"cost\":2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { formatMoney, formatNumberShort, formatDuration, parseShortNumber, scanAllServers } from 'helpers.js'\\nexport async function main(ns) { try { let result = \\\"\\\"; try { result = JSON.stringify(Object.fromEntries([\\\"Artificial Bio-neural Network Implant\\\",\\\"Enhanced Myelin Sheathing\\\",\\\"DataJack\\\",\\\"Embedded Netburner Module\\\",\\\"Embedded Netburner Module Core Implant\\\",\\\"Embedded Netburner Module Core V2 Upgrade\\\",\\\"Neural Accelerator\\\",\\\"Cranial Signal Processors - Gen III\\\",\\\"Cranial Signal Processors - Gen IV\\\",\\\"Cranial Signal Processors - Gen V\\\",\\\"NeuroFlux Governor\\\",\\\"Neurotrainer II\\\",\\\"BitRunners Neurolink\\\",\\\"Artificial Synaptic Potentiation\\\",\\\"Neuralstimulator\\\",\\\"The Black Hand\\\",\\\"Unstable Circadian Modulator\\\",\\\"HemoRecirculator\\\",\\\"Augmented Targeting I\\\",\\\"Augmented Targeting II\\\",\\\"Augmented Targeting III\\\",\\\"Synthetic Heart\\\",\\\"Synfibril Muscle\\\",\\\"Combat Rib I\\\",\\\"Combat Rib II\\\",\\\"Combat Rib III\\\",\\\"Nanofiber Weave\\\",\\\"NEMEAN Subdermal Weave\\\",\\\"Wired Reflexes\\\",\\\"Graphene Bone Lacings\\\",\\\"Bionic Spine\\\",\\\"Graphene Bionic Spine Upgrade\\\",\\\"Bionic Legs\\\",\\\"Graphene Bionic Legs Upgrade\\\",\\\"Speech Processor Implant\\\",\\\"TITN-41 Gene-Modification Injection\\\",\\\"Enhanced Social Interaction Implant\\\",\\\"BitWire\\\",\\\"Synaptic Enhancement Implant\\\",\\\"Neural-Retention Enhancement\\\",\\\"Embedded Netburner Module Core V3 Upgrade\\\",\\\"Embedded Netburner Module Analyze Engine\\\",\\\"Embedded Netburner Module Direct Memory Access Upgrade\\\",\\\"Cranial Signal Processors - Gen I\\\",\\\"Cranial Signal Processors - Gen II\\\",\\\"Neuronal Densification\\\",\\\"Nuoptimal Nootropic Injector Implant\\\",\\\"Speech Enhancement\\\",\\\"FocusWire\\\",\\\"PC Direct-Neural Interface\\\",\\\"PC Direct-Neural Interface Optimization Submodule\\\",\\\"PC Direct-Neural Interface NeuroNet Injector\\\",\\\"ADR-V1 Pheromone Gene\\\",\\\"ADR-V2 Pheromone Gene\\\",\\\"The Shadow's Simulacrum\\\",\\\"Hacknet Node CPU Architecture Neural-Upload\\\",\\\"Hacknet Node Cache Architecture Neural-Upload\\\",\\\"Hacknet Node NIC Architecture Neural-Upload\\\",\\\"Hacknet Node Kernel Direct-Neural Interface\\\",\\\"Hacknet Node Core Direct-Neural Interface\\\",\\\"Neurotrainer I\\\",\\\"Neurotrainer III\\\",\\\"HyperSight Corneal Implant\\\",\\\"LuminCloaking-V1 Skin Implant\\\",\\\"LuminCloaking-V2 Skin Implant\\\",\\\"SmartSonar Implant\\\",\\\"Power Recirculation Core\\\",\\\"QLink\\\",\\\"SPTN-97 Gene Modification\\\",\\\"ECorp HVMind Implant\\\",\\\"CordiARC Fusion Reactor\\\",\\\"SmartJaw\\\",\\\"Neotra\\\",\\\"Xanipher\\\",\\\"Hydroflame Left Arm\\\",\\\"nextSENS Gene Modification\\\",\\\"OmniTek InfoLoad\\\",\\\"Photosynthetic Cells\\\",\\\"CRTX42-AA Gene Modification\\\",\\\"Neuregen Gene Modification\\\",\\\"CashRoot Starter Kit\\\",\\\"NutriGen Implant\\\",\\\"PCMatrix\\\",\\\"INFRARET Enhancement\\\",\\\"DermaForce Particle Barrier\\\",\\\"Graphene BrachiBlades Upgrade\\\",\\\"Graphene Bionic Arms Upgrade\\\",\\\"BrachiBlades\\\",\\\"Bionic Arms\\\",\\\"Social Negotiation Assistant (S.N.A)\\\",\\\"Neuroreceptor Management Implant\\\",\\\"The Red Pill\\\"].map(aug => [aug, ns.getAugmentationPrice(aug)]))); } catch { }\\n        if (ns.read(\\\"/Temp/aug-prices.txt\\\") != result) await ns.write(\\\"/Temp/aug-prices.txt\\\", result, 'w'); } catch(err) { ns.tprint(String(err)); throw(err); } }\",\"filename\":\"/Temp/aug-prices.txt.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"helpers.js\",\"url\":\"blob:https://danielyxie.github.io/3e162019-762e-4251-8ddf-e86e0adf3536\",\"moduleSequenceNumber\":142},{\"filename\":\"/Temp/aug-prices.txt.js\",\"url\":\"blob:https://danielyxie.github.io/94720643-b9cd-4b66-91be-fc2ce4446def\",\"moduleSequenceNumber\":345}],\"dependents\":[],\"ramUsage\":4.1,\"server\":\"home\",\"moduleSequenceNumber\":345,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getAugmentationPrice\",\"cost\":2.5}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { formatMoney, formatNumberShort, formatDuration, parseShortNumber, scanAllServers } from 'helpers.js'\\nexport async function main(ns) { try { let result = \\\"\\\"; try { result = JSON.stringify(Object.fromEntries([\\\"Artificial Bio-neural Network Implant\\\",\\\"Enhanced Myelin Sheathing\\\",\\\"DataJack\\\",\\\"Embedded Netburner Module\\\",\\\"Embedded Netburner Module Core Implant\\\",\\\"Embedded Netburner Module Core V2 Upgrade\\\",\\\"Neural Accelerator\\\",\\\"Cranial Signal Processors - Gen III\\\",\\\"Cranial Signal Processors - Gen IV\\\",\\\"Cranial Signal Processors - Gen V\\\",\\\"NeuroFlux Governor\\\",\\\"Neurotrainer II\\\",\\\"BitRunners Neurolink\\\",\\\"Artificial Synaptic Potentiation\\\",\\\"Neuralstimulator\\\",\\\"The Black Hand\\\",\\\"Unstable Circadian Modulator\\\",\\\"HemoRecirculator\\\",\\\"Augmented Targeting I\\\",\\\"Augmented Targeting II\\\",\\\"Augmented Targeting III\\\",\\\"Synthetic Heart\\\",\\\"Synfibril Muscle\\\",\\\"Combat Rib I\\\",\\\"Combat Rib II\\\",\\\"Combat Rib III\\\",\\\"Nanofiber Weave\\\",\\\"NEMEAN Subdermal Weave\\\",\\\"Wired Reflexes\\\",\\\"Graphene Bone Lacings\\\",\\\"Bionic Spine\\\",\\\"Graphene Bionic Spine Upgrade\\\",\\\"Bionic Legs\\\",\\\"Graphene Bionic Legs Upgrade\\\",\\\"Speech Processor Implant\\\",\\\"TITN-41 Gene-Modification Injection\\\",\\\"Enhanced Social Interaction Implant\\\",\\\"BitWire\\\",\\\"Synaptic Enhancement Implant\\\",\\\"Neural-Retention Enhancement\\\",\\\"Embedded Netburner Module Core V3 Upgrade\\\",\\\"Embedded Netburner Module Analyze Engine\\\",\\\"Embedded Netburner Module Direct Memory Access Upgrade\\\",\\\"Cranial Signal Processors - Gen I\\\",\\\"Cranial Signal Processors - Gen II\\\",\\\"Neuronal Densification\\\",\\\"Nuoptimal Nootropic Injector Implant\\\",\\\"Speech Enhancement\\\",\\\"FocusWire\\\",\\\"PC Direct-Neural Interface\\\",\\\"PC Direct-Neural Interface Optimization Submodule\\\",\\\"PC Direct-Neural Interface NeuroNet Injector\\\",\\\"ADR-V1 Pheromone Gene\\\",\\\"ADR-V2 Pheromone Gene\\\",\\\"The Shadow's Simulacrum\\\",\\\"Hacknet Node CPU Architecture Neural-Upload\\\",\\\"Hacknet Node Cache Architecture Neural-Upload\\\",\\\"Hacknet Node NIC Architecture Neural-Upload\\\",\\\"Hacknet Node Kernel Direct-Neural Interface\\\",\\\"Hacknet Node Core Direct-Neural Interface\\\",\\\"Neurotrainer I\\\",\\\"Neurotrainer III\\\",\\\"HyperSight Corneal Implant\\\",\\\"LuminCloaking-V1 Skin Implant\\\",\\\"LuminCloaking-V2 Skin Implant\\\",\\\"SmartSonar Implant\\\",\\\"Power Recirculation Core\\\",\\\"QLink\\\",\\\"SPTN-97 Gene Modification\\\",\\\"ECorp HVMind Implant\\\",\\\"CordiARC Fusion Reactor\\\",\\\"SmartJaw\\\",\\\"Neotra\\\",\\\"Xanipher\\\",\\\"Hydroflame Left Arm\\\",\\\"nextSENS Gene Modification\\\",\\\"OmniTek InfoLoad\\\",\\\"Photosynthetic Cells\\\",\\\"CRTX42-AA Gene Modification\\\",\\\"Neuregen Gene Modification\\\",\\\"CashRoot Starter Kit\\\",\\\"NutriGen Implant\\\",\\\"PCMatrix\\\",\\\"INFRARET Enhancement\\\",\\\"DermaForce Particle Barrier\\\",\\\"Graphene BrachiBlades Upgrade\\\",\\\"Graphene Bionic Arms Upgrade\\\",\\\"BrachiBlades\\\",\\\"Bionic Arms\\\",\\\"Social Negotiation Assistant (S.N.A)\\\",\\\"Neuroreceptor Management Implant\\\",\\\"The Red Pill\\\"].map(aug => [aug, ns.getAugmentationPrereq(aug)]))); } catch { }\\n        if (ns.read(\\\"/Temp/aug-prereqs.txt\\\") != result) await ns.write(\\\"/Temp/aug-prereqs.txt\\\", result, 'w'); } catch(err) { ns.tprint(String(err)); throw(err); } }\",\"filename\":\"/Temp/aug-prereqs.txt.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"helpers.js\",\"url\":\"blob:https://danielyxie.github.io/298dbe45-fb44-4f76-8de9-51320987783e\",\"moduleSequenceNumber\":142},{\"filename\":\"/Temp/aug-prereqs.txt.js\",\"url\":\"blob:https://danielyxie.github.io/2ef37927-8026-4d80-ae66-f7549dd32ac4\",\"moduleSequenceNumber\":350}],\"dependents\":[],\"ramUsage\":6.6,\"server\":\"home\",\"moduleSequenceNumber\":350,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getAugmentationPrereq\",\"cost\":5}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { formatMoney, formatNumberShort, formatDuration, parseShortNumber, scanAllServers } from 'helpers.js'\\nexport async function main(ns) { try { let result = \\\"\\\"; try { result = JSON.stringify(ns.getBitNodeMultipliers()); } catch { }\\n        if (ns.read(\\\"/Temp/bitnode-multipliers.txt\\\") != result) await ns.write(\\\"/Temp/bitnode-multipliers.txt\\\", result, 'w'); } catch(err) { ns.tprint(String(err)); throw(err); } }\",\"filename\":\"/Temp/bitnode-multipliers.txt.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"helpers.js\",\"url\":\"blob:https://danielyxie.github.io/e1ab32d9-babf-4a5e-bbcb-aefb358c36a7\",\"moduleSequenceNumber\":142},{\"filename\":\"/Temp/bitnode-multipliers.txt.js\",\"url\":\"blob:https://danielyxie.github.io/443feedb-51fe-425e-91b0-91a055a968f2\",\"moduleSequenceNumber\":315}],\"dependents\":[],\"ramUsage\":5.6,\"server\":\"home\",\"moduleSequenceNumber\":315,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getBitNodeMultipliers\",\"cost\":4}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { formatMoney, formatNumberShort, formatDuration, parseShortNumber, scanAllServers } from 'helpers.js'\\nexport async function main(ns) { try { let result = \\\"\\\"; try { result = JSON.stringify(ns.joinFaction('Slum Snakes')); } catch { }\\n        if (ns.read(\\\"/Temp/join-faction.txt\\\") != result) await ns.write(\\\"/Temp/join-faction.txt\\\", result, 'w'); } catch(err) { ns.tprint(String(err)); throw(err); } }\",\"filename\":\"/Temp/join-faction.txt.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"helpers.js\",\"url\":\"blob:https://danielyxie.github.io/1e4ccbb8-485f-4b78-8085-a7ec758df39a\",\"moduleSequenceNumber\":42150},{\"filename\":\"/Temp/join-faction.txt.js\",\"url\":\"blob:https://danielyxie.github.io/c03f6f5c-f698-4e54-9e00-1fef95bbb52b\",\"moduleSequenceNumber\":43106}],\"dependents\":[],\"ramUsage\":4.6,\"server\":\"home\",\"moduleSequenceNumber\":225,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"joinFaction\",\"cost\":3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { formatMoney, formatNumberShort, formatDuration, parseShortNumber, scanAllServers } from 'helpers.js'\\nexport async function main(ns) { try { let result = \\\"\\\"; try { result = JSON.stringify(ns.getAugmentationsFromFaction('NiteSec')); } catch { }\\n        if (ns.read(\\\"/Temp/gang-augs.txt\\\") != result) await ns.write(\\\"/Temp/gang-augs.txt\\\", result, 'w'); } catch(err) { ns.tprint(String(err)); throw(err); } }\",\"filename\":\"/Temp/gang-augs.txt.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"helpers.js\",\"url\":\"blob:https://danielyxie.github.io/309452d6-7831-40bc-9536-0e8e9ac5f64c\",\"moduleSequenceNumber\":142},{\"filename\":\"/Temp/gang-augs.txt.js\",\"url\":\"blob:https://danielyxie.github.io/1f25c7d4-82e3-445c-af43-649a4cba9059\",\"moduleSequenceNumber\":300}],\"dependents\":[],\"ramUsage\":6.6,\"server\":\"home\",\"moduleSequenceNumber\":300,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getAugmentationsFromFaction\",\"cost\":5}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { formatMoney, formatNumberShort, formatDuration, parseShortNumber, scanAllServers } from 'helpers.js'\\nexport async function main(ns) { try { let result = \\\"\\\"; try { result = JSON.stringify(ns.gang.canRecruitMember() && ns.gang.recruitMember('Thug 11')); } catch { }\\n        if (ns.read(\\\"/Temp/gang-recruit-member.txt\\\") != result) await ns.write(\\\"/Temp/gang-recruit-member.txt\\\", result, 'w'); } catch(err) { ns.tprint(String(err)); throw(err); } }\",\"filename\":\"/Temp/gang-recruit-member.txt.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"helpers.js\",\"url\":\"blob:https://danielyxie.github.io/1088345f-bee2-4cbe-9f24-680311e859f6\",\"moduleSequenceNumber\":147},{\"filename\":\"/Temp/gang-recruit-member.txt.js\",\"url\":\"blob:https://danielyxie.github.io/8ab7121a-1da6-47da-b369-057ac6f44b4a\",\"moduleSequenceNumber\":4842}],\"dependents\":[],\"ramUsage\":4.6,\"server\":\"home\",\"moduleSequenceNumber\":227,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"gang.canRecruitMember\",\"cost\":1},{\"type\":\"fn\",\"name\":\"gang.recruitMember\",\"cost\":2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { formatMoney, formatNumberShort, formatDuration, parseShortNumber, scanAllServers } from 'helpers.js'\\nexport async function main(ns) { try { let result = \\\"\\\"; try { result = JSON.stringify(ns.getFactionRep('NiteSec')); } catch { }\\n        if (ns.read(\\\"/Temp/gang-faction-rep.txt\\\") != result) await ns.write(\\\"/Temp/gang-faction-rep.txt\\\", result, 'w'); } catch(err) { ns.tprint(String(err)); throw(err); } }\",\"filename\":\"/Temp/gang-faction-rep.txt.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"helpers.js\",\"url\":\"blob:https://danielyxie.github.io/f328a1af-5b74-4fe6-965b-e729859fd106\",\"moduleSequenceNumber\":142},{\"filename\":\"/Temp/gang-faction-rep.txt.js\",\"url\":\"blob:https://danielyxie.github.io/e0b9604c-db7c-4bef-8aca-06eef2fd4926\",\"moduleSequenceNumber\":339}],\"dependents\":[],\"ramUsage\":2.6,\"server\":\"home\",\"moduleSequenceNumber\":339,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getFactionRep\",\"cost\":1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { formatMoney, formatNumberShort, formatDuration, parseShortNumber, scanAllServers } from 'helpers.js'\\nexport async function main(ns) { try { let result = \\\"\\\"; try { result = JSON.stringify(Object.keys(ns.gang.getOtherGangInformation())); } catch { }\\n        if (ns.read(\\\"/Temp/gang-names.txt\\\") != result) await ns.write(\\\"/Temp/gang-names.txt\\\", result, 'w'); } catch(err) { ns.tprint(String(err)); throw(err); } }\",\"filename\":\"/Temp/gang-names.txt.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"helpers.js\",\"url\":\"blob:https://danielyxie.github.io/fb4845da-aaa3-4d65-8f10-d66bb21a8b0a\",\"moduleSequenceNumber\":142},{\"filename\":\"/Temp/gang-names.txt.js\",\"url\":\"blob:https://danielyxie.github.io/6b643b72-39cf-41f6-8f00-a20f21673af1\",\"moduleSequenceNumber\":329}],\"dependents\":[],\"ramUsage\":3.6,\"server\":\"home\",\"moduleSequenceNumber\":329,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"gang.getOtherGangInformation\",\"cost\":2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { formatMoney, formatNumberShort, formatDuration, parseShortNumber, scanAllServers } from 'helpers.js'\\nexport async function main(ns) { try { let result = \\\"\\\"; try { result = JSON.stringify(ns.travelToCity('Aevum')); } catch { }\\n        if (ns.read(\\\"/Temp/travel.txt\\\") != result) await ns.write(\\\"/Temp/travel.txt\\\", result, 'w'); } catch(err) { ns.tprint(String(err)); throw(err); } }\",\"filename\":\"/Temp/travel.txt.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"helpers.js\",\"url\":\"blob:https://danielyxie.github.io/4302c90d-7272-4c8b-8649-e21f3fb5f1fd\",\"moduleSequenceNumber\":142},{\"filename\":\"/Temp/travel.txt.js\",\"url\":\"blob:https://danielyxie.github.io/04f81337-0a7b-42b2-b475-ea4f624ce9f2\",\"moduleSequenceNumber\":356}],\"dependents\":[],\"ramUsage\":3.6,\"server\":\"home\",\"moduleSequenceNumber\":356,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"travelToCity\",\"cost\":2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { formatMoney, formatNumberShort, formatDuration, parseShortNumber, scanAllServers } from 'helpers.js'\\nexport async function main(ns) { try { let result = \\\"\\\"; try { result = JSON.stringify(ns.workForFaction('Tian Di Hui', 'hacking',  true)); } catch { }\\n        if (ns.read(\\\"/Temp/work-for-faction.txt\\\") != result) await ns.write(\\\"/Temp/work-for-faction.txt\\\", result, 'w'); } catch(err) { ns.tprint(String(err)); throw(err); } }\",\"filename\":\"/Temp/work-for-faction.txt.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"helpers.js\",\"url\":\"blob:https://danielyxie.github.io/92bea968-a103-4df5-953f-b873de8bfec1\",\"moduleSequenceNumber\":147},{\"filename\":\"/Temp/work-for-faction.txt.js\",\"url\":\"blob:https://danielyxie.github.io/443e5371-bc80-4bf8-a39f-72af24ef6ac3\",\"moduleSequenceNumber\":365}],\"dependents\":[],\"ramUsage\":4.6,\"server\":\"home\",\"moduleSequenceNumber\":231,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"workForFaction\",\"cost\":3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { formatMoney, formatNumberShort, formatDuration, parseShortNumber, scanAllServers } from 'helpers.js'\\nexport async function main(ns) { try { ns.gang.setTerritoryWarfare(true); } catch(err) { ns.tprint(String(err)); throw(err); } }\",\"filename\":\"/Temp/gang-set-warfare.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"helpers.js\",\"url\":\"blob:https://danielyxie.github.io/4cb6b091-ac48-45d6-baaa-a118bcde9801\",\"moduleSequenceNumber\":126},{\"filename\":\"/Temp/gang-set-warfare.js\",\"url\":\"blob:https://danielyxie.github.io/bef76460-3572-4205-9060-c322893b5e24\",\"moduleSequenceNumber\":3710}],\"dependents\":[],\"ramUsage\":3.6,\"server\":\"home\",\"moduleSequenceNumber\":232,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"gang.setTerritoryWarfare\",\"cost\":2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { formatMoney, formatNumberShort, formatDuration, parseShortNumber, scanAllServers } from 'helpers.js'\\nexport async function main(ns) { try { let result = \\\"\\\"; try { result = JSON.stringify(ns.hacknet.numHashes() + ns.hacknet.spendHashes(\\\"Generate Coding Contract\\\") - ns.hacknet.numHashes()); } catch { }\\n        if (ns.read(\\\"/Temp/spend-hacknet-hashes.txt\\\") != result) await ns.write(\\\"/Temp/spend-hacknet-hashes.txt\\\", result, 'w'); } catch(err) { ns.tprint(String(err)); throw(err); } }\",\"filename\":\"/Temp/spend-hacknet-hashes.txt.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"helpers.js\",\"url\":\"blob:https://danielyxie.github.io/32c1bbc0-257f-40e0-b456-b63d0c12f764\",\"moduleSequenceNumber\":126},{\"filename\":\"/Temp/spend-hacknet-hashes.txt.js\",\"url\":\"blob:https://danielyxie.github.io/0e01dca1-a6a7-4de2-9a80-25fe27165232\",\"moduleSequenceNumber\":971}],\"dependents\":[],\"ramUsage\":5.6,\"server\":\"home\",\"moduleSequenceNumber\":233,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"ns\",\"name\":\"hacknet\",\"cost\":4}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { formatMoney, formatNumberShort, formatDuration, parseShortNumber, scanAllServers } from 'helpers.js'\\nexport async function main(ns) { try { let result = \\\"\\\"; try { result = JSON.stringify(ns.stopAction()); } catch { }\\n        if (ns.read(\\\"/Temp/stop-action.txt\\\") != result) await ns.write(\\\"/Temp/stop-action.txt\\\", result, 'w'); } catch(err) { ns.tprint(String(err)); throw(err); } }\",\"filename\":\"/Temp/stop-action.txt.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"helpers.js\",\"url\":\"blob:https://danielyxie.github.io/b06fafd6-35ad-44d1-ae93-867b405bc9de\",\"moduleSequenceNumber\":1093},{\"filename\":\"/Temp/stop-action.txt.js\",\"url\":\"blob:https://danielyxie.github.io/0c595b49-1fbe-4c34-b438-5e88e4aeb183\",\"moduleSequenceNumber\":1652}],\"dependents\":[],\"ramUsage\":2.6,\"server\":\"home\",\"moduleSequenceNumber\":234,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"stopAction\",\"cost\":1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { formatMoney, formatNumberShort, formatDuration, parseShortNumber, scanAllServers } from 'helpers.js'\\nexport async function main(ns) { try { let result = \\\"\\\"; try { result = JSON.stringify(ns.applyToCompany('Fulcrum Technologies','software')); } catch { }\\n        if (ns.read(\\\"/Temp/apply-to-company.txt\\\") != result) await ns.write(\\\"/Temp/apply-to-company.txt\\\", result, 'w'); } catch(err) { ns.tprint(String(err)); throw(err); } }\",\"filename\":\"/Temp/apply-to-company.txt.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"helpers.js\",\"url\":\"blob:https://danielyxie.github.io/897a049b-f2af-48d6-92bc-487ee87f5543\",\"moduleSequenceNumber\":1093},{\"filename\":\"/Temp/apply-to-company.txt.js\",\"url\":\"blob:https://danielyxie.github.io/290f82c7-fc6e-446f-a0a8-04a6ecafbcd8\",\"moduleSequenceNumber\":3338}],\"dependents\":[],\"ramUsage\":4.6,\"server\":\"home\",\"moduleSequenceNumber\":235,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"applyToCompany\",\"cost\":3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { formatMoney, formatNumberShort, formatDuration, parseShortNumber, scanAllServers } from 'helpers.js'\\nexport async function main(ns) { try { let result = \\\"\\\"; try { result = JSON.stringify(ns.workForCompany('Fulcrum Technologies',  true)); } catch { }\\n        if (ns.read(\\\"/Temp/work-for-company.txt\\\") != result) await ns.write(\\\"/Temp/work-for-company.txt\\\", result, 'w'); } catch(err) { ns.tprint(String(err)); throw(err); } }\",\"filename\":\"/Temp/work-for-company.txt.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"helpers.js\",\"url\":\"blob:https://danielyxie.github.io/c6a9f47c-b092-4a9d-a162-ce31d55458c9\",\"moduleSequenceNumber\":1093},{\"filename\":\"/Temp/work-for-company.txt.js\",\"url\":\"blob:https://danielyxie.github.io/5cecc91c-e7c3-4bea-8e96-bcee47a8679e\",\"moduleSequenceNumber\":3339}],\"dependents\":[],\"ramUsage\":4.6,\"server\":\"home\",\"moduleSequenceNumber\":236,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"workForCompany\",\"cost\":3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { formatMoney, formatNumberShort, formatDuration, parseShortNumber, scanAllServers } from 'helpers.js'\\nexport async function main(ns) { try { let result = \\\"\\\"; try { result = JSON.stringify(ns.getServer('fulcrumtech').backdoorInstalled); } catch { }\\n        if (ns.read(\\\"/Temp/company-is-backdoored.txt\\\") != result) await ns.write(\\\"/Temp/company-is-backdoored.txt\\\", result, 'w'); } catch(err) { ns.tprint(String(err)); throw(err); } }\",\"filename\":\"/Temp/company-is-backdoored.txt.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"helpers.js\",\"url\":\"blob:https://danielyxie.github.io/b70bb7f8-4a97-495b-a0e4-3331f309d7bc\",\"moduleSequenceNumber\":1093},{\"filename\":\"/Temp/company-is-backdoored.txt.js\",\"url\":\"blob:https://danielyxie.github.io/68950f43-9d25-4fc8-af11-c243afab4e97\",\"moduleSequenceNumber\":3340}],\"dependents\":[],\"ramUsage\":3.6,\"server\":\"home\",\"moduleSequenceNumber\":237,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { formatMoney, formatNumberShort, formatDuration, parseShortNumber, scanAllServers } from 'helpers.js'\\nexport async function main(ns) { try { let result = \\\"\\\"; try { result = JSON.stringify(Object.fromEntries([\\\"Bachman & Associates\\\",\\\"ECorp\\\",\\\"Clarke Incorporated\\\",\\\"OmniTek Incorporated\\\",\\\"NWO\\\",\\\"Blade Industries\\\",\\\"MegaCorp\\\",\\\"KuaiGong International\\\",\\\"Fulcrum Technologies\\\",\\\"Four Sigma\\\"].map(o => [o, ns.getCompanyFavor(o)]))); } catch { }\\n        if (ns.read(\\\"/Temp/company-favors.txt\\\") != result) await ns.write(\\\"/Temp/company-favors.txt\\\", result, 'w'); } catch(err) { ns.tprint(String(err)); throw(err); } }\",\"filename\":\"/Temp/company-favors.txt.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"helpers.js\",\"url\":\"blob:https://danielyxie.github.io/4cdf1425-14bf-441a-a291-5b1dca84a397\",\"moduleSequenceNumber\":1093},{\"filename\":\"/Temp/company-favors.txt.js\",\"url\":\"blob:https://danielyxie.github.io/93580bf2-e40f-480e-84e1-7abcd6f86302\",\"moduleSequenceNumber\":3336}],\"dependents\":[],\"ramUsage\":2.6,\"server\":\"home\",\"moduleSequenceNumber\":238,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getCompanyFavor\",\"cost\":1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { formatMoney, formatNumberShort, formatDuration, parseShortNumber, scanAllServers } from 'helpers.js'\\nexport async function main(ns) { try { while(true) { if(ns.joinFaction('Silhouette')) return; else await ns.sleep(1000); }; } catch(err) { ns.tprint(String(err)); throw(err); } }\",\"filename\":\"/Temp/join-faction-loop.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"helpers.js\",\"url\":\"blob:https://danielyxie.github.io/57c8bd56-9e1e-47c8-b7c6-43400c7719a7\",\"moduleSequenceNumber\":1093},{\"filename\":\"/Temp/join-faction-loop.js\",\"url\":\"blob:https://danielyxie.github.io/a5524eba-3347-4c14-a4da-d6fa8df84328\",\"moduleSequenceNumber\":3337}],\"dependents\":[],\"ramUsage\":4.6,\"server\":\"home\",\"moduleSequenceNumber\":239,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"joinFaction\",\"cost\":3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { formatMoney, formatNumberShort, formatDuration, parseShortNumber, scanAllServers } from 'helpers.js'\\nexport async function main(ns) { try { let result = \\\"\\\"; try { result = JSON.stringify(ns.stanek.activeFragments()); } catch { }\\n        if (ns.read(\\\"/Temp/stanek-fragments.txt\\\") != result) await ns.write(\\\"/Temp/stanek-fragments.txt\\\", result, 'w'); } catch(err) { ns.tprint(String(err)); throw(err); } }\",\"filename\":\"/Temp/stanek-fragments.txt.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"helpers.js\",\"url\":\"blob:https://danielyxie.github.io/e711a8f5-16a8-469a-b8b2-afcaade193af\",\"moduleSequenceNumber\":1093},{\"filename\":\"/Temp/stanek-fragments.txt.js\",\"url\":\"blob:https://danielyxie.github.io/fb119ca7-e5dc-4312-af49-a34f0426119b\",\"moduleSequenceNumber\":4139}],\"dependents\":[],\"ramUsage\":6.6,\"server\":\"home\",\"moduleSequenceNumber\":240,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"stanek.activeFragments\",\"cost\":5}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { formatMoney, formatNumberShort, formatDuration, parseShortNumber, scanAllServers } from 'helpers.js'\\nexport async function main(ns) { try { 0; if(ns.hacknet.spendHashes(\\\"Sell for Money\\\")) ns.toast('Sold 4 hashes for $1M', 'success'); } catch(err) { ns.tprint(String(err)); throw(err); } }\",\"filename\":\"/Temp/sell-hashes-for-money.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"helpers.js\",\"url\":\"blob:https://danielyxie.github.io/e998a595-b822-41f2-bbf2-114929672402\",\"moduleSequenceNumber\":5043},{\"filename\":\"/Temp/sell-hashes-for-money.js\",\"url\":\"blob:https://danielyxie.github.io/785670b3-d1a3-4ead-87da-8fcb5db67d8d\",\"moduleSequenceNumber\":5177}],\"dependents\":[],\"ramUsage\":5.6,\"server\":\"home\",\"moduleSequenceNumber\":241,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"ns\",\"name\":\"hacknet\",\"cost\":4}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { formatMoney, formatNumberShort, formatDuration, parseShortNumber, scanAllServers } from 'helpers.js'\\nexport async function main(ns) { try { let result = \\\"\\\"; try { result = JSON.stringify([ns.hacknet.numHashes(), ns.hacknet.hashCapacity()]); } catch { }\\n        if (ns.read(\\\"/Temp/hash-stats.txt\\\") != result) await ns.write(\\\"/Temp/hash-stats.txt\\\", result, 'w'); } catch(err) { ns.tprint(String(err)); throw(err); } }\",\"filename\":\"/Temp/hash-stats.txt.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"helpers.js\",\"url\":\"blob:https://danielyxie.github.io/18dc48a8-d7d2-46f3-93e9-834727390c35\",\"moduleSequenceNumber\":142},{\"filename\":\"/Temp/hash-stats.txt.js\",\"url\":\"blob:https://danielyxie.github.io/a9bb893e-7d7d-4c1d-a8b0-f6afa846993c\",\"moduleSequenceNumber\":291}],\"dependents\":[],\"ramUsage\":5.6,\"server\":\"home\",\"moduleSequenceNumber\":291,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"ns\",\"name\":\"hacknet\",\"cost\":4}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { formatMoney, formatNumberShort, formatDuration, parseShortNumber, scanAllServers } from 'helpers.js'\\nexport async function main(ns) { try { let result = \\\"\\\"; try { result = JSON.stringify(ns.sleeve.getNumSleeves()); } catch { }\\n        if (ns.read(\\\"/Temp/sleeve-count.txt\\\") != result) await ns.write(\\\"/Temp/sleeve-count.txt\\\", result, 'w'); } catch(err) { ns.tprint(String(err)); throw(err); } }\",\"filename\":\"/Temp/sleeve-count.txt.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"helpers.js\",\"url\":\"blob:https://danielyxie.github.io/7ce4d5a8-1ceb-442e-8631-0192c446f08c\",\"moduleSequenceNumber\":142},{\"filename\":\"/Temp/sleeve-count.txt.js\",\"url\":\"blob:https://danielyxie.github.io/76694125-d8be-443f-a384-ade10d4f738b\",\"moduleSequenceNumber\":288}],\"dependents\":[],\"ramUsage\":5.6,\"server\":\"home\",\"moduleSequenceNumber\":288,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"sleeve.getNumSleeves\",\"cost\":4}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { formatMoney, formatNumberShort, formatDuration, parseShortNumber, scanAllServers } from 'helpers.js'\\nexport async function main(ns) { try { let result = \\\"\\\"; try { result = JSON.stringify(ns.sleeve.setToShockRecovery(1)); } catch { }\\n        if (ns.read(\\\"/Temp/sleeve-set-task.txt\\\") != result) await ns.write(\\\"/Temp/sleeve-set-task.txt\\\", result, 'w'); } catch(err) { ns.tprint(String(err)); throw(err); } }\",\"filename\":\"/Temp/sleeve-set-task.txt.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"helpers.js\",\"url\":\"blob:https://danielyxie.github.io/2813a766-fa9d-4b26-937b-c7577910bcf7\",\"moduleSequenceNumber\":142},{\"filename\":\"/Temp/sleeve-set-task.txt.js\",\"url\":\"blob:https://danielyxie.github.io/94ed57dc-017a-4e3c-abc9-fef6024e977e\",\"moduleSequenceNumber\":434}],\"dependents\":[],\"ramUsage\":5.6,\"server\":\"home\",\"moduleSequenceNumber\":434,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"sleeve.setToShockRecovery\",\"cost\":4}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { formatMoney, formatNumberShort, formatDuration, parseShortNumber, scanAllServers } from 'helpers.js'\\nexport async function main(ns) { try { let result = \\\"\\\"; try { result = JSON.stringify(ns.sleeve.getSleevePurchasableAugs(0)); } catch { }\\n        if (ns.read(\\\"/Temp/sleeve-augs.txt\\\") != result) await ns.write(\\\"/Temp/sleeve-augs.txt\\\", result, 'w'); } catch(err) { ns.tprint(String(err)); throw(err); } }\",\"filename\":\"/Temp/sleeve-augs.txt.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"helpers.js\",\"url\":\"blob:https://danielyxie.github.io/625667ae-77c8-4a29-8b87-682d58b372cf\",\"moduleSequenceNumber\":42150},{\"filename\":\"/Temp/sleeve-augs.txt.js\",\"url\":\"blob:https://danielyxie.github.io/34b5ca63-e99d-48a9-afb0-1545304f7ee0\",\"moduleSequenceNumber\":42409}],\"dependents\":[],\"ramUsage\":5.6,\"server\":\"home\",\"moduleSequenceNumber\":245,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"sleeve.getSleevePurchasableAugs\",\"cost\":4}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { formatMoney, formatNumberShort, formatDuration, parseShortNumber, scanAllServers } from 'helpers.js'\\nexport async function main(ns) { try { let result = \\\"\\\"; try { result = JSON.stringify([\\\"Embedded Netburner Module\\\",\\\"Bionic Arms\\\",\\\"Neuregen Gene Modification\\\",\\\"The Shadow's Simulacrum\\\",\\\"Cranial Signal Processors - Gen III\\\",\\\"ADR-V2 Pheromone Gene\\\",\\\"The Black Hand\\\",\\\"Neuroreceptor Management Implant\\\",\\\"FocusWire\\\",\\\"Enhanced Myelin Sheathing\\\",\\\"PCMatrix\\\",\\\"Neuralstimulator\\\"].reduce((s, aug) => s && ns.sleeve.purchaseSleeveAug(0, aug), true)); } catch { }\\n        if (ns.read(\\\"/Temp/sleeve-purchase.txt\\\") != result) await ns.write(\\\"/Temp/sleeve-purchase.txt\\\", result, 'w'); } catch(err) { ns.tprint(String(err)); throw(err); } }\",\"filename\":\"/Temp/sleeve-purchase.txt.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"helpers.js\",\"url\":\"blob:https://danielyxie.github.io/f0bbf59e-50f8-41f9-bbd7-061e5bd0cdb1\",\"moduleSequenceNumber\":37253},{\"filename\":\"/Temp/sleeve-purchase.txt.js\",\"url\":\"blob:https://danielyxie.github.io/f67f93b9-61a4-4969-a995-870758804c2b\",\"moduleSequenceNumber\":41980}],\"dependents\":[],\"ramUsage\":5.6,\"server\":\"home\",\"moduleSequenceNumber\":246,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"sleeve.purchaseSleeveAug\",\"cost\":4}]}}],\"serversOnNetwork\":[\"n00dles\",\"foodnstuff\",\"sigma-cosmetics\",\"joesguns\",\"hong-fang-tea\",\"harakiri-sushi\",\"iron-gym\",\"hacknet-node-0\",\"darkweb\",\"hacknet-node-1\",\"hacknet-node-2\",\"hacknet-node-3\",\"hacknet-node-4\",\"hacknet-node-5\",\"hacknet-node-6\",\"hacknet-node-7\",\"hacknet-node-8\",\"hacknet-node-9\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"reserve.txt\",\"text\":\"100000000\"}},{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"/Flags/deleting.txt\",\"text\":\"\"}},{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"/Temp/player-info.txt\",\"text\":\"{\\\"hacking\\\":3204,\\\"hp\\\":22,\\\"max_hp\\\":22,\\\"strength\\\":94,\\\"defense\\\":127,\\\"dexterity\\\":85,\\\"agility\\\":147,\\\"charisma\\\":41,\\\"intelligence\\\":1359,\\\"hacking_chance_mult\\\":14.217749711070892,\\\"hacking_speed_mult\\\":11.223314137548785,\\\"hacking_money_mult\\\":33.46337089984325,\\\"hacking_grow_mult\\\":3.9508112042317878,\\\"hacking_exp\\\":9060424374.346176,\\\"strength_exp\\\":725.1852287504315,\\\"defense_exp\\\":725.1852287504315,\\\"dexterity_exp\\\":725.1852287504315,\\\"agility_exp\\\":725.1852287504315,\\\"charisma_exp\\\":159.69150000000127,\\\"hacking_mult\\\":17.156252302579368,\\\"strength_mult\\\":8.349976567426264,\\\"defense_mult\\\":11.181707751162127,\\\"dexterity_mult\\\":7.481071198368953,\\\"agility_mult\\\":12.93663497741667,\\\"charisma_mult\\\":11.205540262360355,\\\"hacking_exp_mult\\\":22.698643688106717,\\\"strength_exp_mult\\\":6.297197978425045,\\\"defense_exp_mult\\\":6.297197978425045,\\\"dexterity_exp_mult\\\":6.297197978425045,\\\"agility_exp_mult\\\":6.297197978425045,\\\"charisma_exp_mult\\\":7.562424472837089,\\\"company_rep_mult\\\":9.403710431440906,\\\"faction_rep_mult\\\":5.480017733939923,\\\"numPeopleKilled\\\":0,\\\"money\\\":7666307515755.895,\\\"city\\\":\\\"Aevum\\\",\\\"location\\\":\\\"The Slums\\\",\\\"companyName\\\":\\\"\\\",\\\"crime_money_mult\\\":8.559787700414157,\\\"crime_success_mult\\\":6.766630593212774,\\\"isWorking\\\":true,\\\"workType\\\":\\\"Working for Faction\\\",\\\"currentWorkFactionName\\\":\\\"Daedalus\\\",\\\"currentWorkFactionDescription\\\":\\\"carrying out hacking contracts\\\",\\\"workHackExpGainRate\\\":3.4047965532160074,\\\"workStrExpGainRate\\\":0,\\\"workDefExpGainRate\\\":0,\\\"workDexExpGainRate\\\":0,\\\"workAgiExpGainRate\\\":0,\\\"workChaExpGainRate\\\":0,\\\"workRepGainRate\\\":42.98923242855446,\\\"workMoneyGainRate\\\":0,\\\"workMoneyLossRate\\\":0,\\\"workHackExpGained\\\":266183.58973387396,\\\"workStrExpGained\\\":0,\\\"workDefExpGained\\\":0,\\\"workDexExpGained\\\":0,\\\"workAgiExpGained\\\":0,\\\"workChaExpGained\\\":0,\\\"workRepGained\\\":2478032.63088177,\\\"workMoneyGained\\\":0,\\\"createProgramName\\\":\\\"\\\",\\\"createProgramReqLvl\\\":400,\\\"className\\\":\\\"\\\",\\\"crimeType\\\":\\\"\\\",\\\"work_money_mult\\\":3.812186249697339,\\\"hacknet_node_money_mult\\\":9.964316245622966,\\\"hacknet_node_purchase_cost_mult\\\":0.17321174254536037,\\\"hacknet_node_ram_cost_mult\\\":0.22642057849066713,\\\"hacknet_node_core_cost_mult\\\":0.22642057849066713,\\\"hacknet_node_level_cost_mult\\\":0.19245749171706708,\\\"hasWseAccount\\\":false,\\\"hasTixApiAccess\\\":false,\\\"has4SData\\\":false,\\\"has4SDataTixApi\\\":false,\\\"bladeburner_max_stamina_mult\\\":1.2540000000000002,\\\"bladeburner_stamina_gain_mult\\\":1.1400000000000001,\\\"bladeburner_analysis_mult\\\":1.1400000000000001,\\\"bladeburner_success_chance_mult\\\":1.3292400000000004,\\\"bitNodeN\\\":10,\\\"totalPlaytime\\\":3434608000,\\\"playtimeSinceLastAug\\\":16037400,\\\"playtimeSinceLastBitnode\\\":184696600,\\\"jobs\\\":{},\\\"factions\\\":[\\\"NiteSec\\\",\\\"Sector-12\\\",\\\"Daedalus\\\",\\\"CyberSec\\\",\\\"BitRunners\\\",\\\"Netburners\\\",\\\"Slum Snakes\\\",\\\"The Black Hand\\\",\\\"Aevum\\\"],\\\"tor\\\":true,\\\"hasCorporation\\\":false}\"}},{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"/Temp/owned-source-files.txt\",\"text\":\"{\\\"1\\\":3,\\\"2\\\":3,\\\"4\\\":3,\\\"5\\\":3,\\\"6\\\":3,\\\"7\\\":3,\\\"9\\\":3,\\\"10\\\":1}\"}},{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"/Temp/script-costs.txt\",\"text\":\"{\\\"/Remote/weak-target.js\\\":1.75,\\\"/Remote/grow-target.js\\\":1.75,\\\"/Remote/hack-target.js\\\":1.7,\\\"/Remote/manualhack-target.js\\\":3.6,\\\"/Remote/share.js\\\":4,\\\"stats.js\\\":3.3,\\\"hacknet-upgrade-manager.js\\\":6.1,\\\"stockmaster.js\\\":3.2,\\\"gangs.js\\\":4.7,\\\"spend-hacknet-hashes.js\\\":5.6,\\\"sleeve.js\\\":6.8,\\\"work-for-factions.js\\\":5.3,\\\"/Tasks/tor-manager.js\\\":3.8,\\\"/Tasks/program-manager.js\\\":3.7,\\\"/Tasks/ram-manager.js\\\":6.25,\\\"faction-manager.js\\\":2.8,\\\"/Tasks/contractor.js\\\":3.1,\\\"/Tasks/backdoor-all-servers.js\\\":5.1,\\\"host-manager.js\\\":5.8}\"}},{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"/Temp/servers-hack-req.txt\",\"text\":\"{\\\"home\\\":1,\\\"hacknet-node-9\\\":1,\\\"hacknet-node-8\\\":1,\\\"hacknet-node-7\\\":1,\\\"hacknet-node-6\\\":1,\\\"hacknet-node-5\\\":1,\\\"hacknet-node-4\\\":1,\\\"hacknet-node-3\\\":1,\\\"hacknet-node-2\\\":1,\\\"hacknet-node-1\\\":1,\\\"darkweb\\\":1,\\\"hacknet-node-0\\\":1,\\\"iron-gym\\\":100,\\\"harakiri-sushi\\\":40,\\\"hong-fang-tea\\\":30,\\\"max-hardware\\\":80,\\\"zer0\\\":75,\\\"neo-net\\\":50,\\\"avmnite-02h\\\":202,\\\"johnson-ortho\\\":267,\\\"joesguns\\\":10,\\\"sigma-cosmetics\\\":5,\\\"CSEC\\\":51,\\\"phantasy\\\":100,\\\"comptek\\\":363,\\\"I.I.I.I\\\":361,\\\"lexo-corp\\\":676,\\\"aerocorp\\\":888,\\\"unitalife\\\":782,\\\"solaris\\\":849,\\\"taiyang-digital\\\":871,\\\"omnia\\\":880,\\\"foodnstuff\\\":1,\\\"nectar-net\\\":20,\\\"omega-net\\\":213,\\\"crush-fitness\\\":267,\\\"catalyst\\\":450,\\\"syscore\\\":634,\\\"aevum-police\\\":436,\\\"rho-construction\\\":512,\\\"snap-fitness\\\":726,\\\"the-hub\\\":279,\\\"silver-helix\\\":150,\\\"netlink\\\":415,\\\"summit-uni\\\":458,\\\"millenium-fitness\\\":478,\\\"galactic-cyber\\\":853,\\\"zb-institute\\\":766,\\\"alpha-ent\\\":513,\\\"global-pharm\\\":849,\\\"deltaone\\\":810,\\\"zeus-med\\\":850,\\\"univ-energy\\\":829,\\\"icarus\\\":892,\\\"infocomm\\\":897,\\\"run4theh111z\\\":515,\\\"fulcrumtech\\\":974,\\\"kuai-gong\\\":1110,\\\"powerhouse-fitness\\\":974,\\\"defcomm\\\":863,\\\"nova-med\\\":837,\\\"applied-energetics\\\":848,\\\"microdyne\\\":859,\\\"helios\\\":884,\\\"4sigma\\\":1241,\\\"stormtech\\\":960,\\\".\\\":540,\\\"clarkinc\\\":1031,\\\"b-and-a\\\":957,\\\"megacorp\\\":1282,\\\"zb-def\\\":791,\\\"titan-labs\\\":819,\\\"vitalife\\\":806,\\\"omnitek\\\":1010,\\\"nwo\\\":955,\\\"fulcrumassets\\\":1536,\\\"ecorp\\\":1156,\\\"blade\\\":1087,\\\"The-Cave\\\":925,\\\"rothman-uni\\\":426,\\\"n00dles\\\":1}\"}},{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"/Temp/servers-num-ports.txt\",\"text\":\"{\\\"home\\\":5,\\\"hacknet-node-9\\\":5,\\\"hacknet-node-8\\\":5,\\\"hacknet-node-7\\\":5,\\\"hacknet-node-6\\\":5,\\\"hacknet-node-5\\\":5,\\\"hacknet-node-4\\\":5,\\\"hacknet-node-3\\\":5,\\\"hacknet-node-2\\\":5,\\\"hacknet-node-1\\\":5,\\\"darkweb\\\":5,\\\"hacknet-node-0\\\":5,\\\"iron-gym\\\":1,\\\"harakiri-sushi\\\":0,\\\"hong-fang-tea\\\":0,\\\"max-hardware\\\":1,\\\"zer0\\\":1,\\\"neo-net\\\":1,\\\"avmnite-02h\\\":2,\\\"johnson-ortho\\\":2,\\\"joesguns\\\":0,\\\"sigma-cosmetics\\\":0,\\\"CSEC\\\":1,\\\"phantasy\\\":2,\\\"comptek\\\":3,\\\"I.I.I.I\\\":3,\\\"lexo-corp\\\":4,\\\"aerocorp\\\":5,\\\"unitalife\\\":4,\\\"solaris\\\":5,\\\"taiyang-digital\\\":5,\\\"omnia\\\":5,\\\"foodnstuff\\\":0,\\\"nectar-net\\\":0,\\\"omega-net\\\":2,\\\"crush-fitness\\\":2,\\\"catalyst\\\":3,\\\"syscore\\\":4,\\\"aevum-police\\\":4,\\\"rho-construction\\\":3,\\\"snap-fitness\\\":4,\\\"the-hub\\\":2,\\\"silver-helix\\\":2,\\\"netlink\\\":3,\\\"summit-uni\\\":3,\\\"millenium-fitness\\\":3,\\\"galactic-cyber\\\":5,\\\"zb-institute\\\":5,\\\"alpha-ent\\\":4,\\\"global-pharm\\\":4,\\\"deltaone\\\":5,\\\"zeus-med\\\":5,\\\"univ-energy\\\":4,\\\"icarus\\\":5,\\\"infocomm\\\":5,\\\"run4theh111z\\\":4,\\\"fulcrumtech\\\":5,\\\"kuai-gong\\\":5,\\\"powerhouse-fitness\\\":5,\\\"defcomm\\\":5,\\\"nova-med\\\":4,\\\"applied-energetics\\\":4,\\\"microdyne\\\":5,\\\"helios\\\":5,\\\"4sigma\\\":5,\\\"stormtech\\\":5,\\\".\\\":4,\\\"clarkinc\\\":5,\\\"b-and-a\\\":5,\\\"megacorp\\\":5,\\\"zb-def\\\":4,\\\"titan-labs\\\":5,\\\"vitalife\\\":5,\\\"omnitek\\\":5,\\\"nwo\\\":5,\\\"fulcrumassets\\\":5,\\\"ecorp\\\":5,\\\"blade\\\":5,\\\"The-Cave\\\":5,\\\"rothman-uni\\\":3,\\\"n00dles\\\":0}\"}},{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"/Temp/servers-security.txt\",\"text\":\"{\\\"home\\\":1,\\\"darkweb\\\":1,\\\"iron-gym\\\":10,\\\"harakiri-sushi\\\":5,\\\"hong-fang-tea\\\":5,\\\"max-hardware\\\":5,\\\"zer0\\\":8,\\\"neo-net\\\":8,\\\"avmnite-02h\\\":1,\\\"johnson-ortho\\\":15,\\\"joesguns\\\":5,\\\"sigma-cosmetics\\\":3,\\\"CSEC\\\":1,\\\"phantasy\\\":7,\\\"comptek\\\":21,\\\"I.I.I.I\\\":1,\\\"lexo-corp\\\":27,\\\"aerocorp\\\":28,\\\"unitalife\\\":24,\\\"solaris\\\":25,\\\"taiyang-digital\\\":23,\\\"omnia\\\":32,\\\"foodnstuff\\\":3,\\\"nectar-net\\\":7,\\\"omega-net\\\":11,\\\"crush-fitness\\\":14,\\\"catalyst\\\":21,\\\"syscore\\\":25,\\\"aevum-police\\\":24,\\\"rho-construction\\\":14,\\\"snap-fitness\\\":15,\\\"the-hub\\\":14,\\\"silver-helix\\\":10,\\\"netlink\\\":20,\\\"summit-uni\\\":18,\\\"millenium-fitness\\\":17,\\\"galactic-cyber\\\":21,\\\"zb-institute\\\":28,\\\"alpha-ent\\\":23,\\\"global-pharm\\\":28,\\\"deltaone\\\":26,\\\"zeus-med\\\":27,\\\"univ-energy\\\":29,\\\"icarus\\\":29,\\\"infocomm\\\":23,\\\"run4theh111z\\\":1,\\\"fulcrumtech\\\":30,\\\"kuai-gong\\\":32,\\\"powerhouse-fitness\\\":22,\\\"defcomm\\\":29,\\\"nova-med\\\":24,\\\"applied-energetics\\\":26,\\\"microdyne\\\":22,\\\"helios\\\":28,\\\"4sigma\\\":25,\\\"stormtech\\\":26,\\\".\\\":1,\\\"clarkinc\\\":21,\\\"b-and-a\\\":26,\\\"megacorp\\\":33,\\\"zb-def\\\":18,\\\"titan-labs\\\":25,\\\"vitalife\\\":30,\\\"omnitek\\\":31,\\\"nwo\\\":33,\\\"fulcrumassets\\\":33,\\\"ecorp\\\":33,\\\"blade\\\":31,\\\"The-Cave\\\":1,\\\"rothman-uni\\\":17,\\\"n00dles\\\":1}\"}},{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"/Temp/servers-max-money.txt\",\"text\":\"{\\\"home\\\":0,\\\"darkweb\\\":0,\\\"iron-gym\\\":500000000,\\\"harakiri-sushi\\\":100000000,\\\"hong-fang-tea\\\":75000000,\\\"max-hardware\\\":250000000,\\\"zer0\\\":187500000,\\\"neo-net\\\":125000000,\\\"avmnite-02h\\\":0,\\\"johnson-ortho\\\":1857371725,\\\"joesguns\\\":62500000,\\\"sigma-cosmetics\\\":57500000,\\\"CSEC\\\":0,\\\"phantasy\\\":600000000,\\\"comptek\\\":5534379075,\\\"I.I.I.I\\\":0,\\\"lexo-corp\\\":19543540675,\\\"aerocorp\\\":26782484125,\\\"unitalife\\\":26725019075,\\\"solaris\\\":19327691100,\\\"taiyang-digital\\\":20584406225,\\\"omnia\\\":22750318775,\\\"foodnstuff\\\":50000000,\\\"nectar-net\\\":68750000,\\\"omega-net\\\":1647203025,\\\"crush-fitness\\\":1037020600,\\\"catalyst\\\":13498456525,\\\"syscore\\\":10451329250,\\\"aevum-police\\\":6121414750,\\\"rho-construction\\\":13399433075,\\\"snap-fitness\\\":11250000000,\\\"the-hub\\\":4405288225,\\\"silver-helix\\\":1125000000,\\\"netlink\\\":6875000000,\\\"summit-uni\\\":8589179425,\\\"millenium-fitness\\\":6250000000,\\\"galactic-cyber\\\":20948621450,\\\"zb-institute\\\":23032252900,\\\"alpha-ent\\\":18740612000,\\\"global-pharm\\\":41427913375,\\\"deltaone\\\":41204633375,\\\"zeus-med\\\":35867193000,\\\"univ-energy\\\":28923928375,\\\"icarus\\\":23728301325,\\\"infocomm\\\":17068882550,\\\"run4theh111z\\\":0,\\\"fulcrumtech\\\":36749778700,\\\"kuai-gong\\\":506313143950,\\\"powerhouse-fitness\\\":22500000000,\\\"defcomm\\\":21874538300,\\\"nova-med\\\":29849371400,\\\"applied-energetics\\\":19424753650,\\\"microdyne\\\":12904789975,\\\"helios\\\":18256103900,\\\"4sigma\\\":435553217075,\\\"stormtech\\\":28050190125,\\\".\\\":0,\\\"clarkinc\\\":457294428925,\\\"b-and-a\\\":618928491025,\\\"megacorp\\\":1355180803175,\\\"zb-def\\\":25035662475,\\\"titan-labs\\\":19061301575,\\\"vitalife\\\":19831500675,\\\"omnitek\\\":429532987025,\\\"nwo\\\":620104181175,\\\"fulcrumassets\\\":25000000,\\\"ecorp\\\":1296665394350,\\\"blade\\\":713966378725,\\\"The-Cave\\\":0,\\\"rothman-uni\\\":4717521925,\\\"n00dles\\\":1750000}\"}},{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"/Temp/analyze-hack.txt\",\"text\":\"[{\\\"hostname\\\":\\\"joesguns\\\",\\\"gainRate\\\":0.05704333190211536,\\\"expRate\\\":990.7722333903299},{\\\"hostname\\\":\\\"nectar-net\\\",\\\"gainRate\\\":0.06274766509232689,\\\"expRate\\\":964.4166413211329},{\\\"hostname\\\":\\\"foodnstuff\\\",\\\"gainRate\\\":0.045634665521692284,\\\"expRate\\\":825.0465943151705},{\\\"hostname\\\":\\\"sigma-cosmetics\\\",\\\"gainRate\\\":0.05247986534994613,\\\"expRate\\\":778.9974820743237},{\\\"hostname\\\":\\\"hong-fang-tea\\\",\\\"gainRate\\\":0.06845199828253844,\\\"expRate\\\":707.6944524216642},{\\\"hostname\\\":\\\"neo-net\\\",\\\"gainRate\\\":0.11408666380423071,\\\"expRate\\\":680.1837629179801},{\\\"hostname\\\":\\\"harakiri-sushi\\\",\\\"gainRate\\\":0.09126933104338457,\\\"expRate\\\":619.232645868956},{\\\"hostname\\\":\\\"zer0\\\",\\\"gainRate\\\":0.17112999570634607,\\\"expRate\\\":510.1378221884849},{\\\"hostname\\\":\\\"max-hardware\\\",\\\"gainRate\\\":0.22817332760846143,\\\"expRate\\\":412.82176391263744},{\\\"hostname\\\":\\\"iron-gym\\\",\\\"gainRate\\\":0.45634665521692286,\\\"expRate\\\":406.9323812103258},{\\\"hostname\\\":\\\"phantasy\\\",\\\"gainRate\\\":0.5476159862603075,\\\"expRate\\\":364.33517561020585},{\\\"hostname\\\":\\\"silver-helix\\\",\\\"gainRate\\\":1.0267799742380765,\\\"expRate\\\":287.2463867367006},{\\\"hostname\\\":\\\"omega-net\\\",\\\"gainRate\\\":1.5033911818438948,\\\"expRate\\\":204.64109214826263},{\\\"hostname\\\":\\\"johnson-ortho\\\",\\\"gainRate\\\":1.6952107483964727,\\\"expRate\\\":177.16679583769795},{\\\"hostname\\\":\\\"the-hub\\\",\\\"gainRate\\\":4.02067709349049,\\\"expRate\\\":169.7177829217141},{\\\"hostname\\\":\\\"crush-fitness\\\",\\\"gainRate\\\":0.946481764402093,\\\"expRate\\\":168.8110149304005},{\\\"hostname\\\":\\\"comptek\\\",\\\"gainRate\\\":5.0511907591575556,\\\"expRate\\\":132.14078172354468},{\\\"hostname\\\":\\\"netlink\\\",\\\"gainRate\\\":6.274766509232689,\\\"expRate\\\":115.95437360027393},{\\\"hostname\\\":\\\"n00dles\\\",\\\"gainRate\\\":0.0015972132932592302,\\\"expRate\\\":114.97004568703757},{\\\"hostname\\\":\\\"rothman-uni\\\",\\\"gainRate\\\":4.305650702772499,\\\"expRate\\\":110.88349586120968},{\\\"hostname\\\":\\\"aevum-police\\\",\\\"gainRate\\\":5.586974292716072,\\\"expRate\\\":107.46712068694056},{\\\"hostname\\\":\\\"catalyst\\\",\\\"gainRate\\\":12.319950971549595,\\\"expRate\\\":107.12303994023732},{\\\"hostname\\\":\\\"summit-uni\\\",\\\"gainRate\\\":7.839286603313526,\\\"expRate\\\":103.42493320938942},{\\\"hostname\\\":\\\"millenium-fitness\\\",\\\"gainRate\\\":5.704333190211536,\\\"expRate\\\":99.1106144846412},{\\\"hostname\\\":\\\"rho-construction\\\",\\\"gainRate\\\":12.229572931158515,\\\"expRate\\\":92.40221182630803},{\\\"hostname\\\":\\\"alpha-ent\\\",\\\"gainRate\\\":17.104431205836256,\\\"expRate\\\":91.49964290228952},{\\\"hostname\\\":\\\"syscore\\\",\\\"gainRate\\\":9.538858291616583,\\\"expRate\\\":74.40215170258539},{\\\"hostname\\\":\\\"lexo-corp\\\",\\\"gainRate\\\":17.837258836264265,\\\"expRate\\\":69.93306169891713},{\\\"hostname\\\":\\\"snap-fitness\\\",\\\"gainRate\\\":10.267799742380765,\\\"expRate\\\":65.72990591137956},{\\\"hostname\\\":\\\"zb-institute\\\",\\\"gainRate\\\":21.021383146050542,\\\"expRate\\\":61.83157863494923},{\\\"hostname\\\":\\\"zb-def\\\",\\\"gainRate\\\":22.84988166321216,\\\"expRate\\\":61.59868790416989},{\\\"hostname\\\":\\\"unitalife\\\",\\\"gainRate\\\":24.391746130969423,\\\"expRate\\\":60.41909400071353},{\\\"hostname\\\":\\\"vitalife\\\",\\\"gainRate\\\":18.100078001936797,\\\"expRate\\\":59.50869786183858},{\\\"hostname\\\":\\\"deltaone\\\",\\\"gainRate\\\":37.60719324024168,\\\"expRate\\\":59.18727255822099},{\\\"hostname\\\":\\\"titan-labs\\\",\\\"gainRate\\\":17.397122435664627,\\\"expRate\\\":58.53428076260296},{\\\"hostname\\\":\\\"univ-energy\\\",\\\"gainRate\\\":26.398675939330193,\\\"expRate\\\":58.52640625349548},{\\\"hostname\\\":\\\"applied-energetics\\\",\\\"gainRate\\\":17.728842713180427,\\\"expRate\\\":57.27989637397063},{\\\"hostname\\\":\\\"nova-med\\\",\\\"gainRate\\\":27.243321597435358,\\\"expRate\\\":57.278740878640306},{\\\"hostname\\\":\\\"global-pharm\\\",\\\"gainRate\\\":37.81097940259534,\\\"expRate\\\":57.17559878900474},{\\\"hostname\\\":\\\"zeus-med\\\",\\\"gainRate\\\":32.73574711513966,\\\"expRate\\\":56.43397729627386},{\\\"hostname\\\":\\\"defcomm\\\",\\\"gainRate\\\":19.964744775238948,\\\"expRate\\\":56.238895389502666},{\\\"hostname\\\":\\\"taiyang-digital\\\",\\\"gainRate\\\":18.787249860810313,\\\"expRate\\\":55.84874487546154},{\\\"hostname\\\":\\\"microdyne\\\",\\\"gainRate\\\":11.778115482736256,\\\"expRate\\\":55.80797860005922},{\\\"hostname\\\":\\\"solaris\\\",\\\"gainRate\\\":17.64025437310178,\\\"expRate\\\":55.73650104207682},{\\\"hostname\\\":\\\"galactic-cyber\\\",\\\"gainRate\\\":19.11966666022597,\\\"expRate\\\":55.300275798743925},{\\\"hostname\\\":\\\"helios\\\",\\\"gainRate\\\":16.66222390411524,\\\"expRate\\\":54.930003774047044},{\\\"hostname\\\":\\\"icarus\\\",\\\"gainRate\\\":21.65666188728606,\\\"expRate\\\":54.424528693838575},{\\\"hostname\\\":\\\"infocomm\\\",\\\"gainRate\\\":15.578654919966002,\\\"expRate\\\":54.24548293721921},{\\\"hostname\\\":\\\"aerocorp\\\",\\\"gainRate\\\":24.44419409768817,\\\"expRate\\\":54.044515409739134},{\\\"hostname\\\":\\\"omnia\\\",\\\"gainRate\\\":20.764063756180025,\\\"expRate\\\":53.98556606393608},{\\\"hostname\\\":\\\"stormtech\\\",\\\"gainRate\\\":25.60122088348502,\\\"expRate\\\":50.65036305755558},{\\\"hostname\\\":\\\"nwo\\\",\\\"gainRate\\\":565.96493793048,\\\"expRate\\\":50.29788848603216},{\\\"hostname\\\":\\\"b-and-a\\\",\\\"gainRate\\\":564.891893395432,\\\"expRate\\\":49.528733539887455},{\\\"hostname\\\":\\\"fulcrumtech\\\",\\\"gainRate\\\":33.54127717941423,\\\"expRate\\\":48.768876068365195},{\\\"hostname\\\":\\\"powerhouse-fitness\\\",\\\"gainRate\\\":20.53559948476153,\\\"expRate\\\":48.537962611596576},{\\\"hostname\\\":\\\"omnitek\\\",\\\"gainRate\\\":392.03188386838536,\\\"expRate\\\":47.061424746184265},{\\\"hostname\\\":\\\"clarkinc\\\",\\\"gainRate\\\":417.36956617851325,\\\"expRate\\\":45.84018559986494},{\\\"hostname\\\":\\\"blade\\\",\\\"gainRate\\\":651.6323377369852,\\\"expRate\\\":44.2206452987753},{\\\"hostname\\\":\\\"kuai-gong\\\",\\\"gainRate\\\":462.1086194678938,\\\"expRate\\\":43.76019298583058},{\\\"hostname\\\":\\\"ecorp\\\",\\\"gainRate\\\":1183.4578312943095,\\\"expRate\\\":41.59793296480937},{\\\"hostname\\\":\\\"4sigma\\\",\\\"gainRate\\\":397.5265075622932,\\\"expRate\\\":38.75728598132318},{\\\"hostname\\\":\\\"megacorp\\\",\\\"gainRate\\\":1236.8644534861887,\\\"expRate\\\":37.52876142978662},{\\\"hostname\\\":\\\"fulcrumassets\\\",\\\"gainRate\\\":0.009870306667986287,\\\"expRate\\\":31.347223969000748}]\"}},{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"/Temp/stock-symbols.txt\",\"text\":\"[\\\"ECP\\\",\\\"MGCP\\\",\\\"BLD\\\",\\\"CLRK\\\",\\\"OMTK\\\",\\\"FSIG\\\",\\\"KGI\\\",\\\"FLCM\\\",\\\"STM\\\",\\\"DCOMM\\\",\\\"HLS\\\",\\\"VITA\\\",\\\"ICRS\\\",\\\"UNV\\\",\\\"AERO\\\",\\\"OMN\\\",\\\"SLRS\\\",\\\"GPH\\\",\\\"NVMD\\\",\\\"WDS\\\",\\\"LXO\\\",\\\"RHOC\\\",\\\"APHE\\\",\\\"SYSC\\\",\\\"CTK\\\",\\\"NTLK\\\",\\\"OMGA\\\",\\\"FNS\\\",\\\"JGN\\\",\\\"SGC\\\",\\\"CTYS\\\",\\\"MDYN\\\",\\\"TITN\\\"]\"}},{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"/Temp/player-gang-joined.txt\",\"text\":\"true\"}},{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"/Temp/contract-types.txt\",\"text\":\"{\\\"contract-538152.cct\\\":\\\"Unique Paths in a Grid I\\\"}\"}},{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"/Temp/gang-equipment-names.txt\",\"text\":\"[\\\"Baseball Bat\\\",\\\"Katana\\\",\\\"Glock 18C\\\",\\\"P90C\\\",\\\"Steyr AUG\\\",\\\"AK-47\\\",\\\"M15A10 Assault Rifle\\\",\\\"AWM Sniper Rifle\\\",\\\"Bulletproof Vest\\\",\\\"Full Body Armor\\\",\\\"Liquid Body Armor\\\",\\\"Graphene Plating Armor\\\",\\\"Ford Flex V20\\\",\\\"ATX1070 Superbike\\\",\\\"Mercedes-Benz S9001\\\",\\\"White Ferrari\\\",\\\"NUKE Rootkit\\\",\\\"Soulstealer Rootkit\\\",\\\"Demon Rootkit\\\",\\\"Hmap Node\\\",\\\"Jack the Ripper\\\",\\\"Bionic Arms\\\",\\\"Bionic Legs\\\",\\\"Bionic Spine\\\",\\\"BrachiBlades\\\",\\\"Nanofiber Weave\\\",\\\"Synthetic Heart\\\",\\\"Synfibril Muscle\\\",\\\"BitWire\\\",\\\"Neuralstimulator\\\",\\\"DataJack\\\",\\\"Graphene Bone Lacings\\\"]\"}},{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"/Temp/stock-getMaxShares.txt\",\"text\":\"{\\\"ECP\\\":18500000,\\\"MGCP\\\":15400000,\\\"BLD\\\":23700000,\\\"CLRK\\\":19200000,\\\"OMTK\\\":9000000,\\\"FSIG\\\":7100000,\\\"KGI\\\":21500000,\\\"FLCM\\\":12500000,\\\"STM\\\":11100000,\\\"DCOMM\\\":12000000,\\\"HLS\\\":10700000,\\\"VITA\\\":19700000,\\\"ICRS\\\":9100000,\\\"UNV\\\":11100000,\\\"AERO\\\":11100000,\\\"OMN\\\":9000000,\\\"SLRS\\\":7400000,\\\"GPH\\\":5100000,\\\"NVMD\\\":5000000,\\\"WDS\\\":18000000,\\\"LXO\\\":10700000,\\\"RHOC\\\":8700000,\\\"APHE\\\":6100000,\\\"SYSC\\\":6600000,\\\"CTK\\\":17700000,\\\"NTLK\\\":3200000,\\\"OMGA\\\":1500000,\\\"FNS\\\":9200000,\\\"JGN\\\":10700000,\\\"SGC\\\":1800000,\\\"CTYS\\\":37900000,\\\"MDYN\\\":2500000,\\\"TITN\\\":3700000}\"}},{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"/Temp/contract-data.txt\",\"text\":\"{\\\"contract-538152.cct\\\":[3,10]}\"}},{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"/Temp/stock-portfolio-value.txt\",\"text\":\"10104395206.524982\"}},{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"/Temp/gang-stats.txt\",\"text\":\"{\\\"faction\\\":\\\"NiteSec\\\",\\\"isHacking\\\":true,\\\"moneyGainRate\\\":0,\\\"power\\\":78.88157894736842,\\\"respect\\\":1318897.8444660448,\\\"respectGainRate\\\":389.1603987716182,\\\"territory\\\":0.14285714285714285,\\\"territoryClashChance\\\":0,\\\"territoryWarfareEngaged\\\":false,\\\"wantedLevel\\\":845.1694558763616,\\\"wantedLevelGainRate\\\":0.5718297484997087,\\\"wantedPenalty\\\":0.99935959543111}\"}},{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"/Temp/gang-getEquipmentType.txt\",\"text\":\"{\\\"Baseball Bat\\\":\\\"Weapon\\\",\\\"Katana\\\":\\\"Weapon\\\",\\\"Glock 18C\\\":\\\"Weapon\\\",\\\"P90C\\\":\\\"Weapon\\\",\\\"Steyr AUG\\\":\\\"Weapon\\\",\\\"AK-47\\\":\\\"Weapon\\\",\\\"M15A10 Assault Rifle\\\":\\\"Weapon\\\",\\\"AWM Sniper Rifle\\\":\\\"Weapon\\\",\\\"Bulletproof Vest\\\":\\\"Armor\\\",\\\"Full Body Armor\\\":\\\"Armor\\\",\\\"Liquid Body Armor\\\":\\\"Armor\\\",\\\"Graphene Plating Armor\\\":\\\"Armor\\\",\\\"Ford Flex V20\\\":\\\"Vehicle\\\",\\\"ATX1070 Superbike\\\":\\\"Vehicle\\\",\\\"Mercedes-Benz S9001\\\":\\\"Vehicle\\\",\\\"White Ferrari\\\":\\\"Vehicle\\\",\\\"NUKE Rootkit\\\":\\\"Rootkit\\\",\\\"Soulstealer Rootkit\\\":\\\"Rootkit\\\",\\\"Demon Rootkit\\\":\\\"Rootkit\\\",\\\"Hmap Node\\\":\\\"Rootkit\\\",\\\"Jack the Ripper\\\":\\\"Rootkit\\\",\\\"Bionic Arms\\\":\\\"Augmentation\\\",\\\"Bionic Legs\\\":\\\"Augmentation\\\",\\\"Bionic Spine\\\":\\\"Augmentation\\\",\\\"BrachiBlades\\\":\\\"Augmentation\\\",\\\"Nanofiber Weave\\\":\\\"Augmentation\\\",\\\"Synthetic Heart\\\":\\\"Augmentation\\\",\\\"Synfibril Muscle\\\":\\\"Augmentation\\\",\\\"BitWire\\\":\\\"Augmentation\\\",\\\"Neuralstimulator\\\":\\\"Augmentation\\\",\\\"DataJack\\\":\\\"Augmentation\\\",\\\"Graphene Bone Lacings\\\":\\\"Augmentation\\\"}\"}},{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"/Temp/process-list.txt\",\"text\":\"[{\\\"filename\\\":\\\"daemon.js\\\",\\\"threads\\\":1,\\\"args\\\":[\\\"-s\\\",\\\"-x\\\"],\\\"pid\\\":1},{\\\"filename\\\":\\\"stats.js\\\",\\\"threads\\\":1,\\\"args\\\":[],\\\"pid\\\":14},{\\\"filename\\\":\\\"hacknet-upgrade-manager.js\\\",\\\"threads\\\":1,\\\"args\\\":[\\\"-c\\\",\\\"--max-payoff-time\\\",\\\"1h\\\"],\\\"pid\\\":15},{\\\"filename\\\":\\\"stockmaster.js\\\",\\\"threads\\\":1,\\\"args\\\":[\\\"--show-market-summary\\\"],\\\"pid\\\":16},{\\\"filename\\\":\\\"gangs.js\\\",\\\"threads\\\":1,\\\"args\\\":[],\\\"pid\\\":17},{\\\"filename\\\":\\\"spend-hacknet-hashes.js\\\",\\\"threads\\\":1,\\\"args\\\":[\\\"-v\\\"],\\\"pid\\\":18},{\\\"filename\\\":\\\"sleeve.js\\\",\\\"threads\\\":1,\\\"args\\\":[],\\\"pid\\\":19},{\\\"filename\\\":\\\"work-for-factions.js\\\",\\\"threads\\\":1,\\\"args\\\":[\\\"--fast-crimes-only\\\",\\\"--no-coding-contracts\\\"],\\\"pid\\\":20},{\\\"filename\\\":\\\"faction-manager.js\\\",\\\"threads\\\":1,\\\"args\\\":[\\\"--join-only\\\"],\\\"pid\\\":24},{\\\"filename\\\":\\\"/Tasks/backdoor-all-servers.js.backdoor-one.js\\\",\\\"threads\\\":1,\\\"args\\\":[\\\"n00dles\\\"],\\\"pid\\\":56},{\\\"filename\\\":\\\"/Tasks/backdoor-all-servers.js.backdoor-one.js\\\",\\\"threads\\\":1,\\\"args\\\":[\\\"foodnstuff\\\"],\\\"pid\\\":62},{\\\"filename\\\":\\\"/Tasks/backdoor-all-servers.js.backdoor-one.js\\\",\\\"threads\\\":1,\\\"args\\\":[\\\"sigma-cosmetics\\\"],\\\"pid\\\":66},{\\\"filename\\\":\\\"/Tasks/backdoor-all-servers.js.backdoor-one.js\\\",\\\"threads\\\":1,\\\"args\\\":[\\\"joesguns\\\"],\\\"pid\\\":72},{\\\"filename\\\":\\\"/Temp/process-list.txt.js\\\",\\\"threads\\\":1,\\\"args\\\":[],\\\"pid\\\":78},{\\\"filename\\\":\\\"/Temp/faction-augs.txt.js\\\",\\\"threads\\\":1,\\\"args\\\":[],\\\"pid\\\":79}]\"}},{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"/Temp/stockmarket-summary-is-running.txt\",\"text\":\"false\"}},{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"/Temp/gang-getEquipmentCost.txt\",\"text\":\"{\\\"Baseball Bat\\\":744639.9916863422,\\\"Bulletproof Vest\\\":1489279.9833726843,\\\"Ford Flex V20\\\":2233919.9750590264,\\\"Full Body Armor\\\":3723199.958431711,\\\"NUKE Rootkit\\\":3723199.958431711,\\\"ATX1070 Superbike\\\":6701759.92517708,\\\"Katana\\\":8935679.900236106,\\\"Mercedes-Benz S9001\\\":13403519.85035416,\\\"Glock 18C\\\":18615999.792158555,\\\"Liquid Body Armor\\\":18615999.792158555,\\\"Soulstealer Rootkit\\\":18615999.792158555,\\\"White Ferrari\\\":22339199.750590265,\\\"Graphene Plating Armor\\\":29785599.667453688,\\\"Hmap Node\\\":29785599.667453688,\\\"P90C\\\":37231999.58431711,\\\"Steyr AUG\\\":44678399.50118053,\\\"Demon Rootkit\\\":55847999.37647566,\\\"Jack the Ripper\\\":55847999.37647566,\\\"AK-47\\\":74463999.16863422,\\\"M15A10 Assault Rifle\\\":111695998.75295132,\\\"AWM Sniper Rifle\\\":167543998.129427,\\\"BitWire\\\":3723199958.431711,\\\"DataJack\\\":5584799937.647567,\\\"Bionic Arms\\\":7446399916.863422,\\\"Bionic Legs\\\":7446399916.863422,\\\"Neuralstimulator\\\":7446399916.863422,\\\"Nanofiber Weave\\\":8935679900.236107,\\\"Bionic Spine\\\":11169599875.295134,\\\"Synfibril Muscle\\\":11169599875.295134,\\\"BrachiBlades\\\":14892799833.726845,\\\"Synthetic Heart\\\":18615999792.158554,\\\"Graphene Bone Lacings\\\":37231999584.31711}\"}},{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"/Temp/gang-getEquipmentStats.txt\",\"text\":\"{\\\"Baseball Bat\\\":{\\\"str\\\":1.04,\\\"def\\\":1.04},\\\"Katana\\\":{\\\"str\\\":1.08,\\\"def\\\":1.08,\\\"dex\\\":1.08},\\\"Glock 18C\\\":{\\\"str\\\":1.1,\\\"def\\\":1.1,\\\"dex\\\":1.1,\\\"agi\\\":1.1},\\\"P90C\\\":{\\\"str\\\":1.12,\\\"def\\\":1.1,\\\"agi\\\":1.1},\\\"Steyr AUG\\\":{\\\"str\\\":1.2,\\\"def\\\":1.15},\\\"AK-47\\\":{\\\"str\\\":1.25,\\\"def\\\":1.2},\\\"M15A10 Assault Rifle\\\":{\\\"str\\\":1.3,\\\"def\\\":1.25},\\\"AWM Sniper Rifle\\\":{\\\"str\\\":1.3,\\\"dex\\\":1.25,\\\"agi\\\":1.3},\\\"Bulletproof Vest\\\":{\\\"def\\\":1.04},\\\"Full Body Armor\\\":{\\\"def\\\":1.08},\\\"Liquid Body Armor\\\":{\\\"def\\\":1.15,\\\"agi\\\":1.15},\\\"Graphene Plating Armor\\\":{\\\"def\\\":1.2},\\\"Ford Flex V20\\\":{\\\"agi\\\":1.04,\\\"cha\\\":1.04},\\\"ATX1070 Superbike\\\":{\\\"agi\\\":1.08,\\\"cha\\\":1.08},\\\"Mercedes-Benz S9001\\\":{\\\"agi\\\":1.12,\\\"cha\\\":1.12},\\\"White Ferrari\\\":{\\\"agi\\\":1.16,\\\"cha\\\":1.16},\\\"NUKE Rootkit\\\":{\\\"hack\\\":1.05},\\\"Soulstealer Rootkit\\\":{\\\"hack\\\":1.1},\\\"Demon Rootkit\\\":{\\\"hack\\\":1.15},\\\"Hmap Node\\\":{\\\"hack\\\":1.12},\\\"Jack the Ripper\\\":{\\\"hack\\\":1.15},\\\"Bionic Arms\\\":{\\\"str\\\":1.3,\\\"dex\\\":1.3},\\\"Bionic Legs\\\":{\\\"agi\\\":1.6},\\\"Bionic Spine\\\":{\\\"str\\\":1.15,\\\"def\\\":1.15,\\\"dex\\\":1.15,\\\"agi\\\":1.15},\\\"BrachiBlades\\\":{\\\"str\\\":1.4,\\\"def\\\":1.4},\\\"Nanofiber Weave\\\":{\\\"str\\\":1.2,\\\"def\\\":1.2},\\\"Synthetic Heart\\\":{\\\"str\\\":1.5,\\\"agi\\\":1.5},\\\"Synfibril Muscle\\\":{\\\"str\\\":1.3,\\\"def\\\":1.3},\\\"BitWire\\\":{\\\"hack\\\":1.05},\\\"Neuralstimulator\\\":{\\\"hack\\\":1.15},\\\"DataJack\\\":{\\\"hack\\\":1.1},\\\"Graphene Bone Lacings\\\":{\\\"str\\\":1.7,\\\"def\\\":1.7}}\"}},{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"/Temp/stock-getAskPrice.txt\",\"text\":\"{\\\"ECP\\\":25386.69552783659,\\\"MGCP\\\":31539.988809679227,\\\"BLD\\\":13595.963575912581,\\\"CLRK\\\":15529.159413546995,\\\"OMTK\\\":39529.586042284136,\\\"FSIG\\\":58574.715992522295,\\\"KGI\\\":18193.113073031807,\\\"FLCM\\\":32200.586080033547,\\\"STM\\\":22260.170461451715,\\\"DCOMM\\\":14932.066083170886,\\\"HLS\\\":15391.890443008073,\\\"VITA\\\":10265.454310162851,\\\"ICRS\\\":18125.45048457389,\\\"UNV\\\":16582.363511961918,\\\"AERO\\\":11909.505847635763,\\\"OMN\\\":13832.415444595077,\\\"SLRS\\\":19469.790166196763,\\\"GPH\\\":27151.446910631526,\\\"NVMD\\\":25492.815404888162,\\\"WDS\\\":5325.941296642564,\\\"LXO\\\":5772.327072001347,\\\"RHOC\\\":4109.832517843495,\\\"APHE\\\":8106.501250346542,\\\"SYSC\\\":5895.089475939793,\\\"CTK\\\":2108.9609851660894,\\\"NTLK\\\":3351.3535609702776,\\\"OMGA\\\":7979.02131115777,\\\"FNS\\\":969.4883316857128,\\\"JGN\\\":682.9775524413214,\\\"SGC\\\":3454.647323575701,\\\"CTYS\\\":566.3899650949651,\\\"MDYN\\\":30131.774285560023,\\\"TITN\\\":22560.27273843383}\"}},{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"/Temp/stock-getBidPrice.txt\",\"text\":\"{\\\"ECP\\\":25285.35143391309,\\\"MGCP\\\":31351.31489855453,\\\"BLD\\\":13568.798813523148,\\\"CLRK\\\":15467.166761197504,\\\"OMTK\\\":39058.060165040195,\\\"FSIG\\\":57529.775568473335,\\\"KGI\\\":18120.485875135473,\\\"FLCM\\\":32136.249244708808,\\\"STM\\\":21906.83442238105,\\\"DCOMM\\\":14872.457036930684,\\\"HLS\\\":15238.737304271677,\\\"VITA\\\":10224.474452637252,\\\"ICRS\\\":17909.24232770024,\\\"UNV\\\":16351.82419799224,\\\"AERO\\\":11814.609386698427,\\\"OMN\\\":13640.107782008852,\\\"SLRS\\\":19122.459915461837,\\\"GPH\\\":26720.471562843722,\\\"NVMD\\\":25188.726155525677,\\\"WDS\\\":5262.411181772077,\\\"LXO\\\":5692.076248756046,\\\"RHOC\\\":4068.9386619445554,\\\"APHE\\\":7882.653089587466,\\\"SYSC\\\":5778.355030871679,\\\"CTK\\\":2058.9461001423874,\\\"NTLK\\\":3318.006759368584,\\\"OMGA\\\":7774.2290563797815,\\\"FNS\\\":956.0098444527437,\\\"JGN\\\":674.8307029092182,\\\"SGC\\\":3413.438806793486,\\\"CTYS\\\":552.9577920097089,\\\"MDYN\\\":29653.492154043197,\\\"TITN\\\":22470.21176941812}\"}},{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"/Temp/gang-task-names.txt\",\"text\":\"[\\\"Unassigned\\\",\\\"Ransomware\\\",\\\"Phishing\\\",\\\"Identity Theft\\\",\\\"DDoS Attacks\\\",\\\"Plant Virus\\\",\\\"Fraud & Counterfeiting\\\",\\\"Money Laundering\\\",\\\"Cyberterrorism\\\",\\\"Ethical Hacking\\\",\\\"Vigilante Justice\\\",\\\"Train Combat\\\",\\\"Train Hacking\\\",\\\"Train Charisma\\\",\\\"Territory Warfare\\\"]\"}},{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"/Temp/stock-getVolatility.txt\",\"text\":\"{\\\"ECP\\\":0.005,\\\"MGCP\\\":0.004,\\\"BLD\\\":0.0074,\\\"CLRK\\\":0.006999999999999999,\\\"OMTK\\\":0.006,\\\"FSIG\\\":0.0106,\\\"KGI\\\":0.0079,\\\"FLCM\\\":0.0121,\\\"STM\\\":0.008100000000000001,\\\"DCOMM\\\":0.0068000000000000005,\\\"HLS\\\":0.0063,\\\"VITA\\\":0.0070999999999999995,\\\"ICRS\\\":0.0060999999999999995,\\\"UNV\\\":0.0051,\\\"AERO\\\":0.006500000000000001,\\\"OMN\\\":0.0072,\\\"SLRS\\\":0.0074,\\\"GPH\\\":0.006500000000000001,\\\"NVMD\\\":0.0078000000000000005,\\\"WDS\\\":0.0245,\\\"LXO\\\":0.0121,\\\"RHOC\\\":0.0054,\\\"APHE\\\":0.0179,\\\"SYSC\\\":0.015600000000000001,\\\"CTK\\\":0.0091,\\\"NTLK\\\":0.0248,\\\"OMGA\\\":0.009000000000000001,\\\"FNS\\\":0.0077,\\\"JGN\\\":0.0345,\\\"SGC\\\":0.0177,\\\"CTYS\\\":0.0132,\\\"MDYN\\\":0.0074,\\\"TITN\\\":0.006999999999999999}\"}},{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"/Temp/gang-getTaskStats.txt\",\"text\":\"{\\\"Unassigned\\\":{\\\"name\\\":\\\"Unassigned\\\",\\\"desc\\\":\\\"This gang member is currently idle\\\",\\\"isHacking\\\":true,\\\"isCombat\\\":true,\\\"baseRespect\\\":0,\\\"baseWanted\\\":0,\\\"baseMoney\\\":0,\\\"hackWeight\\\":100,\\\"strWeight\\\":0,\\\"defWeight\\\":0,\\\"dexWeight\\\":0,\\\"agiWeight\\\":0,\\\"chaWeight\\\":0,\\\"difficulty\\\":1,\\\"territory\\\":{\\\"money\\\":1,\\\"respect\\\":1,\\\"wanted\\\":1}},\\\"Ransomware\\\":{\\\"name\\\":\\\"Ransomware\\\",\\\"desc\\\":\\\"Assign this gang member to create and distribute ransomware<br><br>Earns money - Slightly increases respect - Slightly increases wanted level\\\",\\\"isHacking\\\":true,\\\"isCombat\\\":false,\\\"baseRespect\\\":0.00005,\\\"baseWanted\\\":0.0001,\\\"baseMoney\\\":3,\\\"hackWeight\\\":100,\\\"strWeight\\\":0,\\\"defWeight\\\":0,\\\"dexWeight\\\":0,\\\"agiWeight\\\":0,\\\"chaWeight\\\":0,\\\"difficulty\\\":1,\\\"territory\\\":{\\\"money\\\":1,\\\"respect\\\":1,\\\"wanted\\\":1}},\\\"Phishing\\\":{\\\"name\\\":\\\"Phishing\\\",\\\"desc\\\":\\\"Assign this gang member to attempt phishing scams and attacks<br><br>Earns money - Slightly increases respect - Slightly increases wanted level\\\",\\\"isHacking\\\":true,\\\"isCombat\\\":false,\\\"baseRespect\\\":0.00008,\\\"baseWanted\\\":0.003,\\\"baseMoney\\\":7.5,\\\"hackWeight\\\":85,\\\"strWeight\\\":0,\\\"defWeight\\\":0,\\\"dexWeight\\\":0,\\\"agiWeight\\\":0,\\\"chaWeight\\\":15,\\\"difficulty\\\":3.5,\\\"territory\\\":{\\\"money\\\":1,\\\"respect\\\":1,\\\"wanted\\\":1}},\\\"Identity Theft\\\":{\\\"name\\\":\\\"Identity Theft\\\",\\\"desc\\\":\\\"Assign this gang member to attempt identity theft<br><br>Earns money - Increases respect - Increases wanted level\\\",\\\"isHacking\\\":true,\\\"isCombat\\\":false,\\\"baseRespect\\\":0.0001,\\\"baseWanted\\\":0.075,\\\"baseMoney\\\":18,\\\"hackWeight\\\":80,\\\"strWeight\\\":0,\\\"defWeight\\\":0,\\\"dexWeight\\\":0,\\\"agiWeight\\\":0,\\\"chaWeight\\\":20,\\\"difficulty\\\":5,\\\"territory\\\":{\\\"money\\\":1,\\\"respect\\\":1,\\\"wanted\\\":1}},\\\"DDoS Attacks\\\":{\\\"name\\\":\\\"DDoS Attacks\\\",\\\"desc\\\":\\\"Assign this gang member to carry out DDoS attacks<br><br>Increases respect - Increases wanted level\\\",\\\"isHacking\\\":true,\\\"isCombat\\\":false,\\\"baseRespect\\\":0.0004,\\\"baseWanted\\\":0.2,\\\"baseMoney\\\":0,\\\"hackWeight\\\":100,\\\"strWeight\\\":0,\\\"defWeight\\\":0,\\\"dexWeight\\\":0,\\\"agiWeight\\\":0,\\\"chaWeight\\\":0,\\\"difficulty\\\":8,\\\"territory\\\":{\\\"money\\\":1,\\\"respect\\\":1,\\\"wanted\\\":1}},\\\"Plant Virus\\\":{\\\"name\\\":\\\"Plant Virus\\\",\\\"desc\\\":\\\"Assign this gang member to create and distribute malicious viruses<br><br>Increases respect - Increases wanted level\\\",\\\"isHacking\\\":true,\\\"isCombat\\\":false,\\\"baseRespect\\\":0.0006,\\\"baseWanted\\\":0.4,\\\"baseMoney\\\":0,\\\"hackWeight\\\":100,\\\"strWeight\\\":0,\\\"defWeight\\\":0,\\\"dexWeight\\\":0,\\\"agiWeight\\\":0,\\\"chaWeight\\\":0,\\\"difficulty\\\":12,\\\"territory\\\":{\\\"money\\\":1,\\\"respect\\\":1,\\\"wanted\\\":1}},\\\"Fraud & Counterfeiting\\\":{\\\"name\\\":\\\"Fraud & Counterfeiting\\\",\\\"desc\\\":\\\"Assign this gang member to commit financial fraud and digital counterfeiting<br><br>Earns money - Slightly increases respect - Slightly increases wanted level\\\",\\\"isHacking\\\":true,\\\"isCombat\\\":false,\\\"baseRespect\\\":0.0004,\\\"baseWanted\\\":0.3,\\\"baseMoney\\\":45,\\\"hackWeight\\\":80,\\\"strWeight\\\":0,\\\"defWeight\\\":0,\\\"dexWeight\\\":0,\\\"agiWeight\\\":0,\\\"chaWeight\\\":20,\\\"difficulty\\\":20,\\\"territory\\\":{\\\"money\\\":1,\\\"respect\\\":1,\\\"wanted\\\":1}},\\\"Money Laundering\\\":{\\\"name\\\":\\\"Money Laundering\\\",\\\"desc\\\":\\\"Assign this gang member to launder money<br><br>Earns money - Increases respect - Increases wanted level\\\",\\\"isHacking\\\":true,\\\"isCombat\\\":false,\\\"baseRespect\\\":0.001,\\\"baseWanted\\\":1.25,\\\"baseMoney\\\":360,\\\"hackWeight\\\":75,\\\"strWeight\\\":0,\\\"defWeight\\\":0,\\\"dexWeight\\\":0,\\\"agiWeight\\\":0,\\\"chaWeight\\\":25,\\\"difficulty\\\":25,\\\"territory\\\":{\\\"money\\\":1,\\\"respect\\\":1,\\\"wanted\\\":1}},\\\"Cyberterrorism\\\":{\\\"name\\\":\\\"Cyberterrorism\\\",\\\"desc\\\":\\\"Assign this gang member to commit acts of cyberterrorism<br><br>Greatly increases respect - Greatly increases wanted level\\\",\\\"isHacking\\\":true,\\\"isCombat\\\":false,\\\"baseRespect\\\":0.01,\\\"baseWanted\\\":6,\\\"baseMoney\\\":0,\\\"hackWeight\\\":80,\\\"strWeight\\\":0,\\\"defWeight\\\":0,\\\"dexWeight\\\":0,\\\"agiWeight\\\":0,\\\"chaWeight\\\":20,\\\"difficulty\\\":36,\\\"territory\\\":{\\\"money\\\":1,\\\"respect\\\":1,\\\"wanted\\\":1}},\\\"Ethical Hacking\\\":{\\\"name\\\":\\\"Ethical Hacking\\\",\\\"desc\\\":\\\"Assign this gang member to be an ethical hacker for corporations<br><br>Earns money - Lowers wanted level\\\",\\\"isHacking\\\":true,\\\"isCombat\\\":false,\\\"baseRespect\\\":0,\\\"baseWanted\\\":-0.001,\\\"baseMoney\\\":3,\\\"hackWeight\\\":90,\\\"strWeight\\\":0,\\\"defWeight\\\":0,\\\"dexWeight\\\":0,\\\"agiWeight\\\":0,\\\"chaWeight\\\":10,\\\"difficulty\\\":1,\\\"territory\\\":{\\\"money\\\":1,\\\"respect\\\":1,\\\"wanted\\\":1}},\\\"Vigilante Justice\\\":{\\\"name\\\":\\\"Vigilante Justice\\\",\\\"desc\\\":\\\"Assign this gang member to be a vigilante and protect the city from criminals<br><br>Decreases wanted level\\\",\\\"isHacking\\\":true,\\\"isCombat\\\":true,\\\"baseRespect\\\":0,\\\"baseWanted\\\":-0.001,\\\"baseMoney\\\":0,\\\"hackWeight\\\":20,\\\"strWeight\\\":20,\\\"defWeight\\\":20,\\\"dexWeight\\\":20,\\\"agiWeight\\\":20,\\\"chaWeight\\\":0,\\\"difficulty\\\":1,\\\"territory\\\":{\\\"money\\\":1,\\\"respect\\\":1,\\\"wanted\\\":0.9}},\\\"Train Combat\\\":{\\\"name\\\":\\\"Train Combat\\\",\\\"desc\\\":\\\"Assign this gang member to increase their combat stats (str, def, dex, agi)\\\",\\\"isHacking\\\":true,\\\"isCombat\\\":true,\\\"baseRespect\\\":0,\\\"baseWanted\\\":0,\\\"baseMoney\\\":0,\\\"hackWeight\\\":0,\\\"strWeight\\\":25,\\\"defWeight\\\":25,\\\"dexWeight\\\":25,\\\"agiWeight\\\":25,\\\"chaWeight\\\":0,\\\"difficulty\\\":100,\\\"territory\\\":{\\\"money\\\":1,\\\"respect\\\":1,\\\"wanted\\\":1}},\\\"Train Hacking\\\":{\\\"name\\\":\\\"Train Hacking\\\",\\\"desc\\\":\\\"Assign this gang member to train their hacking skills\\\",\\\"isHacking\\\":true,\\\"isCombat\\\":true,\\\"baseRespect\\\":0,\\\"baseWanted\\\":0,\\\"baseMoney\\\":0,\\\"hackWeight\\\":100,\\\"strWeight\\\":0,\\\"defWeight\\\":0,\\\"dexWeight\\\":0,\\\"agiWeight\\\":0,\\\"chaWeight\\\":0,\\\"difficulty\\\":45,\\\"territory\\\":{\\\"money\\\":1,\\\"respect\\\":1,\\\"wanted\\\":1}},\\\"Train Charisma\\\":{\\\"name\\\":\\\"Train Charisma\\\",\\\"desc\\\":\\\"Assign this gang member to train their charisma\\\",\\\"isHacking\\\":true,\\\"isCombat\\\":true,\\\"baseRespect\\\":0,\\\"baseWanted\\\":0,\\\"baseMoney\\\":0,\\\"hackWeight\\\":0,\\\"strWeight\\\":0,\\\"defWeight\\\":0,\\\"dexWeight\\\":0,\\\"agiWeight\\\":0,\\\"chaWeight\\\":100,\\\"difficulty\\\":8,\\\"territory\\\":{\\\"money\\\":1,\\\"respect\\\":1,\\\"wanted\\\":1}},\\\"Territory Warfare\\\":{\\\"name\\\":\\\"Territory Warfare\\\",\\\"desc\\\":\\\"Assign this gang member to engage in territorial warfare with other gangs. Members assigned to this task will help increase your gang's territory and will defend your territory from being taken.\\\",\\\"isHacking\\\":true,\\\"isCombat\\\":true,\\\"baseRespect\\\":0,\\\"baseWanted\\\":0,\\\"baseMoney\\\":0,\\\"hackWeight\\\":15,\\\"strWeight\\\":20,\\\"defWeight\\\":20,\\\"dexWeight\\\":20,\\\"agiWeight\\\":20,\\\"chaWeight\\\":5,\\\"difficulty\\\":5,\\\"territory\\\":{\\\"money\\\":1,\\\"respect\\\":1,\\\"wanted\\\":1}}}\"}},{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"/Temp/stock-getForecast.txt\",\"text\":\"{\\\"ECP\\\":0.6913116280003777,\\\"MGCP\\\":0.6902388759835961,\\\"BLD\\\":0.6280280385619653,\\\"CLRK\\\":0.6204101142908898,\\\"OMTK\\\":0.6210838513881654,\\\"FSIG\\\":0.6700908144007193,\\\"KGI\\\":0.5986958211372748,\\\"FLCM\\\":0.6584390715215811,\\\"STM\\\":0.5688066048398792,\\\"DCOMM\\\":0.6004225358320706,\\\"HLS\\\":0.5931316587646678,\\\"VITA\\\":0.5701191587128376,\\\"ICRS\\\":0.5718375635465669,\\\"UNV\\\":0.5993899428611026,\\\"AERO\\\":0.5625853536972347,\\\"OMN\\\":0.5422273469340577,\\\"SLRS\\\":0.5847281669876362,\\\"GPH\\\":0.6067145036612749,\\\"NVMD\\\":0.5506543158665953,\\\"WDS\\\":0.516339564600447,\\\"LXO\\\":0.5587883834127186,\\\"RHOC\\\":0.5203967988890333,\\\"APHE\\\":0.5977540715025695,\\\"SYSC\\\":0.516517515485168,\\\"CTK\\\":0.5417377217791344,\\\"NTLK\\\":0.5176224438928441,\\\"OMGA\\\":0.5153495955917836,\\\"FNS\\\":0.47298174807961685,\\\"JGN\\\":0.537154013248405,\\\"SGC\\\":0.47330357033167203,\\\"CTYS\\\":0.6344244483145753,\\\"MDYN\\\":0.5804427521432006,\\\"TITN\\\":0.6091438967237359}\"}},{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"/Temp/stock-getPosition.txt\",\"text\":\"{\\\"ECP\\\":[0,0,0,0],\\\"MGCP\\\":[0,0,0,0],\\\"BLD\\\":[370331,13613.432713091193,0,0],\\\"CLRK\\\":[0,0,0,0],\\\"OMTK\\\":[0,0,0,0],\\\"FSIG\\\":[0,0,0,0],\\\"KGI\\\":[0,0,0,0],\\\"FLCM\\\":[158066,31888.316200145237,0,0],\\\"STM\\\":[0,0,0,0],\\\"DCOMM\\\":[0,0,0,0],\\\"HLS\\\":[0,0,0,0],\\\"VITA\\\":[0,0,0,0],\\\"ICRS\\\":[0,0,0,0],\\\"UNV\\\":[0,0,0,0],\\\"AERO\\\":[0,0,0,0],\\\"OMN\\\":[0,0,0,0],\\\"SLRS\\\":[0,0,0,0],\\\"GPH\\\":[0,0,0,0],\\\"NVMD\\\":[0,0,0,0],\\\"WDS\\\":[0,0,0,0],\\\"LXO\\\":[0,0,0,0],\\\"RHOC\\\":[0,0,0,0],\\\"APHE\\\":[0,0,0,0],\\\"SYSC\\\":[0,0,0,0],\\\"CTK\\\":[0,0,0,0],\\\"NTLK\\\":[0,0,0,0],\\\"OMGA\\\":[0,0,0,0],\\\"FNS\\\":[0,0,0,0],\\\"JGN\\\":[0,0,0,0],\\\"SGC\\\":[0,0,0,0],\\\"CTYS\\\":[0,0,0,0],\\\"MDYN\\\":[0,0,0,0],\\\"TITN\\\":[0,0,0,0]}\"}},{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"/Temp/stockmarket-summary.txt\",\"text\":\"Market day 14? of 75 (0% certain) Current Stock Summary and Pre-4S Forecasts (by best payoff-time):\\nFLCM  +   Prob: 66% (t13: 50%, t10: 56%) tLast⇄: 14 Vol:1.21% ER: 19.2 BP Spread:0.20% ttProfit:  2 Pos: 158k ( 1%) long  (held 12 ticks)\\nBLD   +   Prob: 63% (t13: 58%, t10: 44%) tLast⇄: 14 Vol:0.74% ER: 9.47 BP Spread:0.20% ttProfit:  3 Pos: 370k ( 2%) long  (held 12 ticks)\\nECP   +   Prob: 69% (t13: 25%, t10: 22%) tLast⇄: 14 Vol:0.50% ER: 9.57 BP Spread:0.40% ttProfit:  5\\nCLRK  +   Prob: 62% (t13: 42%, t10: 44%) tLast⇄: 14 Vol:0.70% ER: 8.43 BP Spread:0.40% ttProfit:  5\\nKGI   ++  Prob: 60% (t13: 67%, t10: 78%) tLast⇄: 14 Vol:0.79% ER: 7.80 BP Spread:0.40% ttProfit:  6\\nTITN  +   Prob: 61% (t13: 50%, t10: 44%) tLast⇄: 14 Vol:0.70% ER: 7.64 BP Spread:0.40% ttProfit:  6\\nDCOMM +   Prob: 60% (t13: 42%, t10: 33%) tLast⇄: 14 Vol:0.68% ER: 6.83 BP Spread:0.40% ttProfit:  6\\nMGCP  +   Prob: 69% (t13: 58%, t10: 56%) tLast⇄: 14 Vol:0.40% ER: 7.61 BP Spread:0.60% ttProfit:  8\\nVITA  ++  Prob: 57% (t13: 58%, t10: 67%) tLast⇄: 14 Vol:0.71% ER: 4.98 BP Spread:0.40% ttProfit:  9\\nFSIG  +   Prob: 67% (t13: 75%, t10: 67%) tLast⇄: 14 Vol:1.06% ER: 18.0 BP Spread:1.78% ttProfit: 10\\nJGN   +   Prob: 54% (t13: 25%, t10: 22%) tLast⇄: 14 Vol:3.45% ER: 12.8 BP Spread:1.19% ttProfit: 10\\nCTYS  ++  Prob: 63% (t13: 83%, t10: 89%) tLast⇄: 14 Vol:1.32% ER: 17.7 BP Spread:2.37% ttProfit: 14\\nAPHE  +   Prob: 60% (t13: 50%, t10: 44%) tLast⇄: 14 Vol:1.79% ER: 17.5 BP Spread:2.76% ttProfit: 17\\nOMTK  +   Prob: 62% (t13: 33%, t10: 44%) tLast⇄: 14 Vol:0.60% ER: 7.27 BP Spread:1.19% ttProfit: 17\\nHLS   +   Prob: 59% (t13: 50%, t10: 33%) tLast⇄: 14 Vol:0.63% ER: 5.87 BP Spread:1.00% ttProfit: 18\\nLXO   +   Prob: 56% (t13: 50%, t10: 56%) tLast⇄: 14 Vol:1.21% ER: 7.11 BP Spread:1.39% ttProfit: 20\\nAERO  ++  Prob: 56% (t13: 83%, t10: 78%) tLast⇄: 14 Vol:0.65% ER: 4.07 BP Spread:0.80% ttProfit: 20\\nNTLK  +   Prob: 52% (t13: 33%, t10: 22%) tLast⇄: 14 Vol:2.48% ER: 4.37 BP Spread:1.00% ttProfit: 23\\nGPH   +   Prob: 61% (t13: 33%, t10: 44%) tLast⇄: 14 Vol:0.65% ER: 6.94 BP Spread:1.59% ttProfit: 24\\nSGC   -   Prob: 47% (t13: 58%, t10: 56%) tLast⇄: 14 Vol:1.77% ER:-4.73 BP Spread:1.19% ttProfit: 26\\nMDYN  ++  Prob: 58% (t13: 67%, t10: 67%) tLast⇄: 14 Vol:0.74% ER: 5.95 BP Spread:1.59% ttProfit: 27\\nUNV   +   Prob: 60% (t13: 58%, t10: 56%) tLast⇄: 14 Vol:0.51% ER: 5.07 BP Spread:1.39% ttProfit: 28\\nICRS  ++  Prob: 57% (t13: 67%, t10: 67%) tLast⇄: 14 Vol:0.61% ER: 4.38 BP Spread:1.19% ttProfit: 28\\nSLRS  ++  Prob: 58% (t13: 67%, t10: 67%) tLast⇄: 14 Vol:0.74% ER: 6.27 BP Spread:1.78% ttProfit: 29\\nSTM   +   Prob: 57% (t13: 67%, t10: 56%) tLast⇄: 14 Vol:0.81% ER: 5.57 BP Spread:1.59% ttProfit: 29\\nWDS   ++  Prob: 52% (t13: 58%, t10: 67%) tLast⇄: 14 Vol:2.45% ER: 4.00 BP Spread:1.19% ttProfit: 30\\nNVMD  ++  Prob: 55% (t13: 83%, t10: 89%) tLast⇄: 14 Vol:0.78% ER: 3.95 BP Spread:1.19% ttProfit: 31\\nOMN   ++  Prob: 54% (t13: 75%, t10: 78%) tLast⇄: 14 Vol:0.72% ER: 3.04 BP Spread:1.39% ttProfit: 47\\nCTK   ++  Prob: 54% (t13: 50%, t10: 67%) tLast⇄: 14 Vol:0.91% ER: 3.80 BP Spread:2.37% ttProfit: 64\\nFNS   --  Prob: 47% (t13: 42%, t10: 33%) tLast⇄: 14 Vol:0.77% ER:-2.08 BP Spread:1.39% ttProfit: 68\\nSYSC  +   Prob: 52% (t13: 42%, t10: 33%) tLast⇄: 14 Vol:1.56% ER: 2.58 BP Spread:1.98% ttProfit: 78\\nRHOC  ++  Prob: 52% (t13: 42%, t10: 56%) tLast⇄: 14 Vol:0.54% ER: 1.10 BP Spread:1.00% ttProfit: 91\\nOMGA  +   Prob: 52% (t13: 58%, t10: 44%) tLast⇄: 14 Vol:0.90% ER: 1.38 BP Spread:2.57% ttProfit:189\"}},{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"/Temp/stock-probabilities.txt\",\"text\":\"{\\\"FLCM\\\":{\\\"prob\\\":0.6584390715215811,\\\"sharesLong\\\":158066,\\\"sharesShort\\\":0},\\\"BLD\\\":{\\\"prob\\\":0.6280280385619653,\\\"sharesLong\\\":370331,\\\"sharesShort\\\":0},\\\"ECP\\\":{\\\"prob\\\":0.6913116280003777,\\\"sharesLong\\\":0,\\\"sharesShort\\\":0},\\\"CLRK\\\":{\\\"prob\\\":0.6204101142908898,\\\"sharesLong\\\":0,\\\"sharesShort\\\":0},\\\"KGI\\\":{\\\"prob\\\":0.5986958211372748,\\\"sharesLong\\\":0,\\\"sharesShort\\\":0},\\\"TITN\\\":{\\\"prob\\\":0.6091438967237359,\\\"sharesLong\\\":0,\\\"sharesShort\\\":0},\\\"DCOMM\\\":{\\\"prob\\\":0.6004225358320706,\\\"sharesLong\\\":0,\\\"sharesShort\\\":0},\\\"MGCP\\\":{\\\"prob\\\":0.6902388759835961,\\\"sharesLong\\\":0,\\\"sharesShort\\\":0},\\\"VITA\\\":{\\\"prob\\\":0.5701191587128376,\\\"sharesLong\\\":0,\\\"sharesShort\\\":0},\\\"FSIG\\\":{\\\"prob\\\":0.6700908144007193,\\\"sharesLong\\\":0,\\\"sharesShort\\\":0},\\\"JGN\\\":{\\\"prob\\\":0.537154013248405,\\\"sharesLong\\\":0,\\\"sharesShort\\\":0},\\\"CTYS\\\":{\\\"prob\\\":0.6344244483145753,\\\"sharesLong\\\":0,\\\"sharesShort\\\":0},\\\"APHE\\\":{\\\"prob\\\":0.5977540715025695,\\\"sharesLong\\\":0,\\\"sharesShort\\\":0},\\\"OMTK\\\":{\\\"prob\\\":0.6210838513881654,\\\"sharesLong\\\":0,\\\"sharesShort\\\":0},\\\"HLS\\\":{\\\"prob\\\":0.5931316587646678,\\\"sharesLong\\\":0,\\\"sharesShort\\\":0},\\\"LXO\\\":{\\\"prob\\\":0.5587883834127186,\\\"sharesLong\\\":0,\\\"sharesShort\\\":0},\\\"AERO\\\":{\\\"prob\\\":0.5625853536972347,\\\"sharesLong\\\":0,\\\"sharesShort\\\":0},\\\"NTLK\\\":{\\\"prob\\\":0.5176224438928441,\\\"sharesLong\\\":0,\\\"sharesShort\\\":0},\\\"GPH\\\":{\\\"prob\\\":0.6067145036612749,\\\"sharesLong\\\":0,\\\"sharesShort\\\":0},\\\"SGC\\\":{\\\"prob\\\":0.47330357033167203,\\\"sharesLong\\\":0,\\\"sharesShort\\\":0},\\\"MDYN\\\":{\\\"prob\\\":0.5804427521432006,\\\"sharesLong\\\":0,\\\"sharesShort\\\":0},\\\"UNV\\\":{\\\"prob\\\":0.5993899428611026,\\\"sharesLong\\\":0,\\\"sharesShort\\\":0},\\\"ICRS\\\":{\\\"prob\\\":0.5718375635465669,\\\"sharesLong\\\":0,\\\"sharesShort\\\":0},\\\"SLRS\\\":{\\\"prob\\\":0.5847281669876362,\\\"sharesLong\\\":0,\\\"sharesShort\\\":0},\\\"STM\\\":{\\\"prob\\\":0.5688066048398792,\\\"sharesLong\\\":0,\\\"sharesShort\\\":0},\\\"WDS\\\":{\\\"prob\\\":0.516339564600447,\\\"sharesLong\\\":0,\\\"sharesShort\\\":0},\\\"NVMD\\\":{\\\"prob\\\":0.5506543158665953,\\\"sharesLong\\\":0,\\\"sharesShort\\\":0},\\\"OMN\\\":{\\\"prob\\\":0.5422273469340577,\\\"sharesLong\\\":0,\\\"sharesShort\\\":0},\\\"CTK\\\":{\\\"prob\\\":0.5417377217791344,\\\"sharesLong\\\":0,\\\"sharesShort\\\":0},\\\"FNS\\\":{\\\"prob\\\":0.47298174807961685,\\\"sharesLong\\\":0,\\\"sharesShort\\\":0},\\\"SYSC\\\":{\\\"prob\\\":0.516517515485168,\\\"sharesLong\\\":0,\\\"sharesShort\\\":0},\\\"RHOC\\\":{\\\"prob\\\":0.5203967988890333,\\\"sharesLong\\\":0,\\\"sharesShort\\\":0},\\\"OMGA\\\":{\\\"prob\\\":0.5153495955917836,\\\"sharesLong\\\":0,\\\"sharesShort\\\":0}}\"}},{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"/Temp/gang-member-names.txt\",\"text\":\"[\\\"Thug 1\\\",\\\"Thug 2\\\",\\\"Thug 3\\\",\\\"Thug 4\\\",\\\"Thug 5\\\",\\\"Thug 6\\\",\\\"Thug 7\\\",\\\"Thug 8\\\",\\\"Thug 9\\\",\\\"Thug 10\\\",\\\"Thug 11\\\"]\"}},{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"/Temp/gang-getMemberInformation.txt\",\"text\":\"{\\\"Thug 1\\\":{\\\"name\\\":\\\"Thug 1\\\",\\\"task\\\":\\\"Vigilante Justice\\\",\\\"earnedRespect\\\":89.58816222687034,\\\"hack\\\":2477,\\\"str\\\":133,\\\"def\\\":15,\\\"dex\\\":3,\\\"agi\\\":8,\\\"cha\\\":1,\\\"hack_exp\\\":1796.463469663551,\\\"str_exp\\\":123.50785827922795,\\\"def_exp\\\":39.68055714265155,\\\"dex_exp\\\":24.175682379327327,\\\"agi_exp\\\":31.16354143004314,\\\"cha_exp\\\":2.1425388050106413,\\\"hack_mult\\\":2.2723515045000005,\\\"str_mult\\\":8.65899216,\\\"def_mult\\\":4.618129152,\\\"dex_mult\\\":1.4949999999999999,\\\"agi_mult\\\":2.8704,\\\"cha_mult\\\":1.04,\\\"hack_asc_mult\\\":22.649364810187368,\\\"str_asc_mult\\\":2.009213464811417,\\\"def_asc_mult\\\":1,\\\"dex_asc_mult\\\":1,\\\"agi_asc_mult\\\":1,\\\"cha_asc_mult\\\":1,\\\"hack_asc_points\\\":1025987.4526099078,\\\"str_asc_points\\\":8073.877494358996,\\\"def_asc_points\\\":1561.4469619323104,\\\"dex_asc_points\\\":0,\\\"agi_asc_points\\\":307.4275466170689,\\\"cha_asc_points\\\":60.465337645424825,\\\"upgrades\\\":[\\\"Baseball Bat\\\",\\\"Bulletproof Vest\\\",\\\"Ford Flex V20\\\",\\\"NUKE Rootkit\\\",\\\"Soulstealer Rootkit\\\",\\\"Hmap Node\\\",\\\"Demon Rootkit\\\",\\\"Jack the Ripper\\\"],\\\"augmentations\\\":[\\\"BitWire\\\",\\\"DataJack\\\",\\\"Bionic Arms\\\",\\\"Bionic Legs\\\",\\\"Neuralstimulator\\\",\\\"Nanofiber Weave\\\",\\\"Bionic Spine\\\",\\\"Synfibril Muscle\\\",\\\"BrachiBlades\\\",\\\"Synthetic Heart\\\",\\\"Graphene Bone Lacings\\\"],\\\"respectGain\\\":0,\\\"wantedLevelGain\\\":-0.02293793560671012,\\\"moneyGain\\\":0},\\\"Thug 2\\\":{\\\"name\\\":\\\"Thug 2\\\",\\\"task\\\":\\\"Cyberterrorism\\\",\\\"earnedRespect\\\":165744.70315669183,\\\"hack\\\":12068,\\\"str\\\":182,\\\"def\\\":23,\\\"dex\\\":5,\\\"agi\\\":12,\\\"cha\\\":44,\\\"hack_exp\\\":256650.9852121993,\\\"str_exp\\\":206.0774643060988,\\\"def_exp\\\":73.15387200873664,\\\"dex_exp\\\":43.30954713798196,\\\"agi_exp\\\":56.48327083587308,\\\"cha_exp\\\":1454.7749856102178,\\\"hack_mult\\\":2.2723515045000005,\\\"str_mult\\\":8.65899216,\\\"def_mult\\\":4.618129152,\\\"dex_mult\\\":1.4949999999999999,\\\"agi_mult\\\":2.8704,\\\"cha_mult\\\":1.04,\\\"hack_asc_mult\\\":26.737221370708784,\\\"str_asc_mult\\\":1.8383574430380458,\\\"def_asc_mult\\\":1,\\\"dex_asc_mult\\\":1,\\\"agi_asc_mult\\\":1,\\\"cha_asc_mult\\\":1,\\\"hack_asc_points\\\":1429758.013252573,\\\"str_asc_points\\\":6759.116176746765,\\\"def_asc_points\\\":1386.2232331945918,\\\"dex_asc_points\\\":0,\\\"agi_asc_points\\\":210.08820866939692,\\\"cha_asc_points\\\":865.8078793841355,\\\"upgrades\\\":[\\\"Baseball Bat\\\",\\\"Bulletproof Vest\\\",\\\"Ford Flex V20\\\",\\\"NUKE Rootkit\\\",\\\"Soulstealer Rootkit\\\",\\\"Hmap Node\\\",\\\"Demon Rootkit\\\",\\\"Jack the Ripper\\\"],\\\"augmentations\\\":[\\\"BitWire\\\",\\\"DataJack\\\",\\\"Bionic Arms\\\",\\\"Bionic Legs\\\",\\\"Neuralstimulator\\\",\\\"Nanofiber Weave\\\",\\\"Bionic Spine\\\",\\\"Synfibril Muscle\\\",\\\"BrachiBlades\\\",\\\"Synthetic Heart\\\",\\\"Graphene Bone Lacings\\\"],\\\"respectGain\\\":41.86466919663317,\\\"wantedLevelGain\\\":0.05421182235678834,\\\"moneyGain\\\":0},\\\"Thug 3\\\":{\\\"name\\\":\\\"Thug 3\\\",\\\"task\\\":\\\"Cyberterrorism\\\",\\\"earnedRespect\\\":210685.43286896023,\\\"hack\\\":16666,\\\"str\\\":107,\\\"def\\\":23,\\\"dex\\\":5,\\\"agi\\\":12,\\\"cha\\\":44,\\\"hack_exp\\\":337878.8686775333,\\\"str_exp\\\":153.97211946456915,\\\"def_exp\\\":73.78871610473665,\\\"dex_exp\\\":43.6841304713153,\\\"agi_exp\\\":56.972470835873075,\\\"cha_exp\\\":1446.3052009307062,\\\"hack_mult\\\":2.2723515045000005,\\\"str_mult\\\":8.65899216,\\\"def_mult\\\":4.618129152,\\\"dex_mult\\\":1.4949999999999999,\\\"agi_mult\\\":2.8704,\\\"cha_mult\\\":1.04,\\\"hack_asc_mult\\\":35.36058171472938,\\\"str_asc_mult\\\":1.3617382664100965,\\\"def_asc_mult\\\":1,\\\"dex_asc_mult\\\":1,\\\"agi_asc_mult\\\":1,\\\"cha_asc_mult\\\":1,\\\"hack_asc_points\\\":2500741.4784081075,\\\"str_asc_points\\\":3708.6622124111504,\\\"def_asc_points\\\":854.1358272604388,\\\"dex_asc_points\\\":0,\\\"agi_asc_points\\\":0,\\\"cha_asc_points\\\":887.7649251824324,\\\"upgrades\\\":[\\\"Baseball Bat\\\",\\\"Bulletproof Vest\\\",\\\"Ford Flex V20\\\",\\\"NUKE Rootkit\\\",\\\"Soulstealer Rootkit\\\",\\\"Hmap Node\\\",\\\"Demon Rootkit\\\",\\\"Jack the Ripper\\\"],\\\"augmentations\\\":[\\\"BitWire\\\",\\\"DataJack\\\",\\\"Bionic Arms\\\",\\\"Bionic Legs\\\",\\\"Neuralstimulator\\\",\\\"Nanofiber Weave\\\",\\\"Bionic Spine\\\",\\\"Synfibril Muscle\\\",\\\"BrachiBlades\\\",\\\"Synthetic Heart\\\",\\\"Graphene Bone Lacings\\\"],\\\"respectGain\\\":53.41465491214658,\\\"wantedLevelGain\\\":0.041760069272955516,\\\"moneyGain\\\":0},\\\"Thug 4\\\":{\\\"name\\\":\\\"Thug 4\\\",\\\"task\\\":\\\"Cyberterrorism\\\",\\\"earnedRespect\\\":201709.25932985512,\\\"hack\\\":15284,\\\"str\\\":114,\\\"def\\\":23,\\\"dex\\\":5,\\\"agi\\\":11,\\\"cha\\\":45,\\\"hack_exp\\\":317893.9359910493,\\\"str_exp\\\":156.54155461191436,\\\"def_exp\\\":71.24933972073664,\\\"dex_exp\\\":42.185797137981965,\\\"agi_exp\\\":55.01567083587309,\\\"cha_exp\\\":1488.5702650740116,\\\"hack_mult\\\":2.2723515045000005,\\\"str_mult\\\":8.65899216,\\\"def_mult\\\":4.618129152,\\\"dex_mult\\\":1.4949999999999999,\\\"agi_mult\\\":2.8704,\\\"cha_mult\\\":1.04,\\\"hack_asc_mult\\\":32.734867589412,\\\"str_asc_mult\\\":1.433741531163439,\\\"def_asc_mult\\\":1,\\\"dex_asc_mult\\\":1,\\\"agi_asc_mult\\\":1,\\\"cha_asc_mult\\\":1,\\\"hack_asc_points\\\":2143143.112192672,\\\"str_asc_points\\\":4111.229556365764,\\\"def_asc_points\\\":1172.7386224088377,\\\"dex_asc_points\\\":0,\\\"agi_asc_points\\\":108.36497203974938,\\\"cha_asc_points\\\":1979.8286821912382,\\\"upgrades\\\":[\\\"Baseball Bat\\\",\\\"Bulletproof Vest\\\",\\\"Ford Flex V20\\\",\\\"NUKE Rootkit\\\",\\\"Soulstealer Rootkit\\\",\\\"Hmap Node\\\",\\\"Demon Rootkit\\\",\\\"Jack the Ripper\\\"],\\\"augmentations\\\":[\\\"BitWire\\\",\\\"DataJack\\\",\\\"Bionic Arms\\\",\\\"Bionic Legs\\\",\\\"Neuralstimulator\\\",\\\"Nanofiber Weave\\\",\\\"Bionic Spine\\\",\\\"Synfibril Muscle\\\",\\\"BrachiBlades\\\",\\\"Synthetic Heart\\\",\\\"Graphene Bone Lacings\\\"],\\\"respectGain\\\":50.04157957693937,\\\"wantedLevelGain\\\":0.04478263730865028,\\\"moneyGain\\\":0},\\\"Thug 5\\\":{\\\"name\\\":\\\"Thug 5\\\",\\\"task\\\":\\\"Cyberterrorism\\\",\\\"earnedRespect\\\":15757.990654569585,\\\"hack\\\":19991,\\\"str\\\":45,\\\"def\\\":17,\\\"dex\\\":4,\\\"agi\\\":9,\\\"cha\\\":24,\\\"hack_exp\\\":176748.55125898868,\\\"str_exp\\\":75.74364790291412,\\\"def_exp\\\":49.25984650509334,\\\"dex_exp\\\":29.429887298878874,\\\"agi_exp\\\":38.239166322678614,\\\"cha_exp\\\":231.06971786907476,\\\"hack_mult\\\":2.2723515045000005,\\\"str_mult\\\":8.65899216,\\\"def_mult\\\":4.618129152,\\\"dex_mult\\\":1.4949999999999999,\\\"agi_mult\\\":2.8704,\\\"cha_mult\\\":1.04,\\\"hack_asc_mult\\\":47.11210980754694,\\\"str_asc_mult\\\":1,\\\"def_asc_mult\\\":1,\\\"dex_asc_mult\\\":1,\\\"agi_asc_mult\\\":1,\\\"cha_asc_mult\\\":1.9009485439363425,\\\"hack_asc_points\\\":4439101.781036722,\\\"str_asc_points\\\":1533.487401868702,\\\"def_asc_points\\\":244.78061845431097,\\\"dex_asc_points\\\":0,\\\"agi_asc_points\\\":0,\\\"cha_asc_points\\\":7227.210733387402,\\\"upgrades\\\":[\\\"Baseball Bat\\\",\\\"Bulletproof Vest\\\",\\\"Ford Flex V20\\\",\\\"NUKE Rootkit\\\",\\\"Soulstealer Rootkit\\\",\\\"Hmap Node\\\",\\\"Demon Rootkit\\\",\\\"Jack the Ripper\\\"],\\\"augmentations\\\":[\\\"BitWire\\\",\\\"DataJack\\\",\\\"Bionic Arms\\\",\\\"Bionic Legs\\\",\\\"Neuralstimulator\\\",\\\"Nanofiber Weave\\\",\\\"Bionic Spine\\\",\\\"Synfibril Muscle\\\",\\\"BrachiBlades\\\",\\\"Synthetic Heart\\\",\\\"Graphene Bone Lacings\\\"],\\\"respectGain\\\":61.24122146598205,\\\"wantedLevelGain\\\":0.0360690040699915,\\\"moneyGain\\\":0},\\\"Thug 6\\\":{\\\"name\\\":\\\"Thug 6\\\",\\\"task\\\":\\\"Vigilante Justice\\\",\\\"earnedRespect\\\":0,\\\"hack\\\":3851,\\\"str\\\":38,\\\"def\\\":15,\\\"dex\\\":3,\\\"agi\\\":8,\\\"cha\\\":3,\\\"hack_exp\\\":1069.47763796685,\\\"str_exp\\\":61.33948189728886,\\\"def_exp\\\":39.64118233433995,\\\"dex_exp\\\":24.079526982772773,\\\"agi_exp\\\":31.077125615993257,\\\"cha_exp\\\":4.403332616612455,\\\"hack_mult\\\":2.2723515045000005,\\\"str_mult\\\":8.65899216,\\\"def_mult\\\":4.618129152,\\\"dex_mult\\\":1.4949999999999999,\\\"agi_mult\\\":2.8704,\\\"cha_mult\\\":1.04,\\\"hack_asc_mult\\\":46.86067749078376,\\\"str_asc_mult\\\":1,\\\"def_asc_mult\\\":1,\\\"dex_asc_mult\\\":1,\\\"agi_asc_mult\\\":1,\\\"cha_asc_mult\\\":2.4629704305668203,\\\"hack_asc_points\\\":4391846.189790495,\\\"str_asc_points\\\":1597.5260079195834,\\\"def_asc_points\\\":446.54613042977496,\\\"dex_asc_points\\\":0,\\\"agi_asc_points\\\":0,\\\"cha_asc_points\\\":12132.446683693019,\\\"upgrades\\\":[\\\"Baseball Bat\\\",\\\"Bulletproof Vest\\\",\\\"Ford Flex V20\\\",\\\"NUKE Rootkit\\\",\\\"Soulstealer Rootkit\\\",\\\"Hmap Node\\\",\\\"Demon Rootkit\\\",\\\"Jack the Ripper\\\"],\\\"augmentations\\\":[\\\"BitWire\\\",\\\"DataJack\\\",\\\"Bionic Arms\\\",\\\"Bionic Legs\\\",\\\"Neuralstimulator\\\",\\\"Nanofiber Weave\\\",\\\"Bionic Spine\\\",\\\"Synfibril Muscle\\\",\\\"BrachiBlades\\\",\\\"Synthetic Heart\\\",\\\"Graphene Bone Lacings\\\"],\\\"respectGain\\\":0,\\\"wantedLevelGain\\\":-0.03414191484710816,\\\"moneyGain\\\":0},\\\"Thug 7\\\":{\\\"name\\\":\\\"Thug 7\\\",\\\"task\\\":\\\"Cyberterrorism\\\",\\\"earnedRespect\\\":80497.33612013476,\\\"hack\\\":13527,\\\"str\\\":214,\\\"def\\\":37,\\\"dex\\\":7,\\\"agi\\\":18,\\\"cha\\\":51,\\\"hack_exp\\\":172696.99561536044,\\\"str_exp\\\":315.20344111608296,\\\"def_exp\\\":131.52015403242476,\\\"dex_exp\\\":77.6750584080941,\\\"agi_exp\\\":101.403255021823,\\\"cha_exp\\\":946.8894961734969,\\\"hack_mult\\\":2.2723515045000005,\\\"str_mult\\\":8.65899216,\\\"def_mult\\\":4.618129152,\\\"dex_mult\\\":1.4949999999999999,\\\"agi_mult\\\":2.8704,\\\"cha_mult\\\":1.04,\\\"hack_asc_mult\\\":32.00735074042702,\\\"str_asc_mult\\\":1.565426855365113,\\\"def_asc_mult\\\":1,\\\"dex_asc_mult\\\":1,\\\"agi_asc_mult\\\":1,\\\"cha_asc_mult\\\":1.4764674748609574,\\\"hack_asc_points\\\":2048941.0028414282,\\\"str_asc_points\\\":4901.122478996613,\\\"def_asc_points\\\":1444.360952701079,\\\"dex_asc_points\\\":0,\\\"agi_asc_points\\\":71.54717987142112,\\\"cha_asc_points\\\":4359.912408644584,\\\"upgrades\\\":[\\\"Baseball Bat\\\",\\\"Bulletproof Vest\\\",\\\"Ford Flex V20\\\",\\\"NUKE Rootkit\\\",\\\"Soulstealer Rootkit\\\",\\\"Hmap Node\\\",\\\"Demon Rootkit\\\",\\\"Jack the Ripper\\\"],\\\"augmentations\\\":[\\\"BitWire\\\",\\\"DataJack\\\",\\\"Bionic Arms\\\",\\\"Bionic Legs\\\",\\\"Neuralstimulator\\\",\\\"Nanofiber Weave\\\",\\\"Bionic Spine\\\",\\\"Synfibril Muscle\\\",\\\"BrachiBlades\\\",\\\"Synthetic Heart\\\",\\\"Graphene Bone Lacings\\\"],\\\"respectGain\\\":45.640253139634645,\\\"wantedLevelGain\\\":0.049423718564071864,\\\"moneyGain\\\":0},\\\"Thug 8\\\":{\\\"name\\\":\\\"Thug 8\\\",\\\"task\\\":\\\"Vigilante Justice\\\",\\\"earnedRespect\\\":37941.990801059466,\\\"hack\\\":6639,\\\"str\\\":125,\\\"def\\\":38,\\\"dex\\\":8,\\\"agi\\\":19,\\\"cha\\\":24,\\\"hack_exp\\\":87629.45597098189,\\\"str_exp\\\":238.91960463643625,\\\"def_exp\\\":138.50343908842467,\\\"dex_exp\\\":81.79547507476077,\\\"agi_exp\\\":106.78445502182296,\\\"cha_exp\\\":544.7753053964854,\\\"hack_mult\\\":2.2723515045000005,\\\"str_mult\\\":8.65899216,\\\"def_mult\\\":4.618129152,\\\"dex_mult\\\":1.4949999999999999,\\\"agi_mult\\\":2.8704,\\\"cha_mult\\\":1.04,\\\"hack_asc_mult\\\":17.77432885230146,\\\"str_asc_mult\\\":1.1267643324552228,\\\"def_asc_mult\\\":1,\\\"dex_asc_mult\\\":1,\\\"agi_asc_mult\\\":1,\\\"cha_asc_mult\\\":1,\\\"hack_asc_points\\\":631853.5322995121,\\\"str_asc_points\\\":2539.195721786528,\\\"def_asc_points\\\":1055.9410023998103,\\\"dex_asc_points\\\":0,\\\"agi_asc_points\\\":164.32949488214794,\\\"cha_asc_points\\\":43.230317013149715,\\\"upgrades\\\":[\\\"Hmap Node\\\",\\\"Baseball Bat\\\",\\\"Bulletproof Vest\\\",\\\"Ford Flex V20\\\",\\\"NUKE Rootkit\\\",\\\"Soulstealer Rootkit\\\",\\\"Demon Rootkit\\\",\\\"Jack the Ripper\\\"],\\\"augmentations\\\":[\\\"BitWire\\\",\\\"DataJack\\\",\\\"Bionic Arms\\\",\\\"Bionic Legs\\\",\\\"Neuralstimulator\\\",\\\"Nanofiber Weave\\\",\\\"Bionic Spine\\\",\\\"Synfibril Muscle\\\",\\\"BrachiBlades\\\",\\\"Synthetic Heart\\\",\\\"Graphene Bone Lacings\\\"],\\\"respectGain\\\":0,\\\"wantedLevelGain\\\":-0.05966841641592742,\\\"moneyGain\\\":0},\\\"Thug 9\\\":{\\\"name\\\":\\\"Thug 9\\\",\\\"task\\\":\\\"Money Laundering\\\",\\\"earnedRespect\\\":31432.106561048568,\\\"hack\\\":5231,\\\"str\\\":154,\\\"def\\\":38,\\\"dex\\\":8,\\\"agi\\\":19,\\\"cha\\\":24,\\\"hack_exp\\\":71451.27337489022,\\\"str_exp\\\":269.4093015189109,\\\"def_exp\\\":139.13828318442467,\\\"dex_exp\\\":82.1700584080941,\\\"agi_exp\\\":107.27365502182296,\\\"cha_exp\\\":537.1500193515429,\\\"hack_mult\\\":2.2723515045000005,\\\"str_mult\\\":8.65899216,\\\"def_mult\\\":4.618129152,\\\"dex_mult\\\":1.4949999999999999,\\\"agi_mult\\\":2.8704,\\\"cha_mult\\\":1.04,\\\"hack_asc_mult\\\":14.579813085914664,\\\"str_asc_mult\\\":1.2647610137059253,\\\"def_asc_mult\\\":1,\\\"dex_asc_mult\\\":1,\\\"agi_asc_mult\\\":1,\\\"cha_asc_mult\\\":1,\\\"hack_asc_points\\\":425141.8992404169,\\\"str_asc_points\\\":3199.2408435808793,\\\"def_asc_points\\\":1246.4968587462693,\\\"dex_asc_points\\\":0,\\\"agi_asc_points\\\":270.18605342268586,\\\"cha_asc_points\\\":43.58504198086666,\\\"upgrades\\\":[\\\"Hmap Node\\\",\\\"Baseball Bat\\\",\\\"Bulletproof Vest\\\",\\\"Ford Flex V20\\\",\\\"NUKE Rootkit\\\",\\\"Soulstealer Rootkit\\\",\\\"Demon Rootkit\\\",\\\"Jack the Ripper\\\"],\\\"augmentations\\\":[\\\"BitWire\\\",\\\"DataJack\\\",\\\"Bionic Arms\\\",\\\"Bionic Legs\\\",\\\"Neuralstimulator\\\",\\\"Nanofiber Weave\\\",\\\"Bionic Spine\\\",\\\"Synfibril Muscle\\\",\\\"BrachiBlades\\\",\\\"Synthetic Heart\\\",\\\"Graphene Bone Lacings\\\"],\\\"respectGain\\\":3.812530032394254,\\\"wantedLevelGain\\\":0.023375784846059018,\\\"moneyGain\\\":29577.743693467022},\\\"Thug 10\\\":{\\\"name\\\":\\\"Thug 10\\\",\\\"task\\\":\\\"Vigilante Justice\\\",\\\"earnedRespect\\\":189.40547625860415,\\\"hack\\\":11010,\\\"str\\\":48,\\\"def\\\":18,\\\"dex\\\":4,\\\"agi\\\":9,\\\"cha\\\":2,\\\"hack_exp\\\":94784.30192470156,\\\"str_exp\\\":83.24627549589995,\\\"def_exp\\\":54.15405398478177,\\\"dex_exp\\\":32.33039856899099,\\\"agi_exp\\\":42.02035050862872,\\\"cha_exp\\\":19.98211180835669,\\\"hack_mult\\\":2.2723515045000005,\\\"str_mult\\\":8.65899216,\\\"def_mult\\\":4.618129152,\\\"dex_mult\\\":1.4949999999999999,\\\"agi_mult\\\":2.8704,\\\"cha_mult\\\":1.04,\\\"hack_asc_mult\\\":29.035666954270084,\\\"str_asc_mult\\\":1,\\\"def_asc_mult\\\":1,\\\"dex_asc_mult\\\":1,\\\"agi_asc_mult\\\":1,\\\"cha_asc_mult\\\":1,\\\"hack_asc_points\\\":1686139.9109585835,\\\"str_asc_points\\\":0,\\\"def_asc_points\\\":0,\\\"dex_asc_points\\\":0,\\\"agi_asc_points\\\":0,\\\"cha_asc_points\\\":674.3431461154266,\\\"upgrades\\\":[\\\"Baseball Bat\\\",\\\"Bulletproof Vest\\\",\\\"Ford Flex V20\\\",\\\"NUKE Rootkit\\\",\\\"Soulstealer Rootkit\\\",\\\"Hmap Node\\\",\\\"Demon Rootkit\\\",\\\"Jack the Ripper\\\"],\\\"augmentations\\\":[\\\"BitWire\\\",\\\"DataJack\\\",\\\"Bionic Arms\\\",\\\"Bionic Legs\\\",\\\"Neuralstimulator\\\",\\\"Nanofiber Weave\\\",\\\"Bionic Spine\\\",\\\"Synfibril Muscle\\\",\\\"BrachiBlades\\\",\\\"Synthetic Heart\\\",\\\"Graphene Bone Lacings\\\"],\\\"respectGain\\\":0,\\\"wantedLevelGain\\\":-0.0969858140422727,\\\"moneyGain\\\":0},\\\"Thug 11\\\":{\\\"name\\\":\\\"Thug 11\\\",\\\"task\\\":\\\"Vigilante Justice\\\",\\\"earnedRespect\\\":28540.86091501434,\\\"hack\\\":4663,\\\"str\\\":102,\\\"def\\\":39,\\\"dex\\\":8,\\\"agi\\\":19,\\\"cha\\\":23,\\\"hack_exp\\\":63975.19917513547,\\\"str_exp\\\":215.92677054811344,\\\"def_exp\\\":141.04281547242465,\\\"dex_exp\\\":83.29380840809411,\\\"agi_exp\\\":108.74125502182295,\\\"cha_exp\\\":514.2741612167157,\\\"hack_mult\\\":2.2723515045000005,\\\"str_mult\\\":8.65899216,\\\"def_mult\\\":4.618129152,\\\"dex_mult\\\":1.4949999999999999,\\\"agi_mult\\\":2.8704,\\\"cha_mult\\\":1.04,\\\"hack_asc_mult\\\":13.293671107530452,\\\"str_asc_mult\\\":1,\\\"def_asc_mult\\\":1,\\\"dex_asc_mult\\\":1,\\\"agi_asc_mult\\\":1,\\\"cha_asc_mult\\\":1,\\\"hack_asc_points\\\":353443.3830303798,\\\"str_asc_points\\\":0,\\\"def_asc_points\\\":0,\\\"dex_asc_points\\\":0,\\\"agi_asc_points\\\":0,\\\"cha_asc_points\\\":43.93976694858361,\\\"upgrades\\\":[\\\"Hmap Node\\\",\\\"Baseball Bat\\\",\\\"Bulletproof Vest\\\",\\\"Ford Flex V20\\\",\\\"NUKE Rootkit\\\",\\\"Soulstealer Rootkit\\\",\\\"Demon Rootkit\\\",\\\"Jack the Ripper\\\"],\\\"augmentations\\\":[\\\"BitWire\\\",\\\"DataJack\\\",\\\"Bionic Arms\\\",\\\"Bionic Legs\\\",\\\"Neuralstimulator\\\",\\\"Nanofiber Weave\\\",\\\"Bionic Spine\\\",\\\"Synfibril Muscle\\\",\\\"BrachiBlades\\\",\\\"Synthetic Heart\\\",\\\"Graphene Bone Lacings\\\"],\\\"respectGain\\\":0,\\\"wantedLevelGain\\\":-0.04216603133202182,\\\"moneyGain\\\":0}}\"}},{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"/Temp/gang-set-member-tasks.txt\",\"text\":\"true\"}},{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"/Temp/gang-other-gang-info.txt\",\"text\":\"{\\\"Slum Snakes\\\":{\\\"power\\\":10.09181183190839,\\\"territory\\\":0},\\\"Tetrads\\\":{\\\"power\\\":4.264825351467738,\\\"territory\\\":0},\\\"The Syndicate\\\":{\\\"power\\\":4.475744312163255,\\\"territory\\\":0},\\\"The Dark Army\\\":{\\\"power\\\":4.316057078354389,\\\"territory\\\":0},\\\"Speakers for the Dead\\\":{\\\"power\\\":240.53025188237547,\\\"territory\\\":0.42553855396509127},\\\"NiteSec\\\":{\\\"power\\\":78.88157894736842,\\\"territory\\\":0.14285714285714285},\\\"The Black Hand\\\":{\\\"power\\\":236.90808132053982,\\\"territory\\\":0.4316043031777644}}\"}},{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"/Temp/gang-getAscensionResult.txt\",\"text\":\"{\\\"Thug 1\\\":{\\\"respect\\\":89.58816222687034,\\\"hack\\\":1.000383221796642,\\\"str\\\":1,\\\"def\\\":1,\\\"dex\\\":1,\\\"agi\\\":1,\\\"cha\\\":1},\\\"Thug 2\\\":{\\\"respect\\\":164698.67698309387,\\\"hack\\\":1.0853480337422985,\\\"str\\\":1,\\\"def\\\":1,\\\"dex\\\":1,\\\"agi\\\":1,\\\"cha\\\":1},\\\"Thug 3\\\":{\\\"respect\\\":209350.7307619961,\\\"hack\\\":1.064934933181032,\\\"str\\\":1,\\\"def\\\":1,\\\"dex\\\":1,\\\"agi\\\":1,\\\"cha\\\":1},\\\"Thug 4\\\":{\\\"respect\\\":200458.89903374613,\\\"hack\\\":1.0710689874906076,\\\"str\\\":1,\\\"def\\\":1,\\\"dex\\\":1,\\\"agi\\\":1,\\\"cha\\\":1.1090376825396282},\\\"Thug 5\\\":{\\\"respect\\\":14229.337525332798,\\\"hack\\\":1.0193732283940542,\\\"str\\\":1,\\\"def\\\":1,\\\"dex\\\":1,\\\"agi\\\":1,\\\"cha\\\":1},\\\"Thug 6\\\":{\\\"respect\\\":0,\\\"hack\\\":1.0000055658451494,\\\"str\\\":1,\\\"def\\\":1,\\\"dex\\\":1,\\\"agi\\\":1,\\\"cha\\\":1},\\\"Thug 7\\\":{\\\"respect\\\":79357.54028401429,\\\"hack\\\":1.0407243836205469,\\\"str\\\":1,\\\"def\\\":1,\\\"dex\\\":1,\\\"agi\\\":1,\\\"cha\\\":1},\\\"Thug 8\\\":{\\\"respect\\\":37941.990801059466,\\\"hack\\\":1.0663448497948782,\\\"str\\\":1,\\\"def\\\":1,\\\"dex\\\":1,\\\"agi\\\":1,\\\"cha\\\":1},\\\"Thug 9\\\":{\\\"respect\\\":31336.89543265886,\\\"hack\\\":1.0792073786427059,\\\"str\\\":1,\\\"def\\\":1,\\\"dex\\\":1,\\\"agi\\\":1,\\\"cha\\\":1},\\\"Thug 10\\\":{\\\"respect\\\":189.40547625860415,\\\"hack\\\":1.027430360568583,\\\"str\\\":1,\\\"def\\\":1,\\\"dex\\\":1,\\\"agi\\\":1,\\\"cha\\\":1},\\\"Thug 11\\\":{\\\"respect\\\":28540.86091501434,\\\"hack\\\":1.0854306405814071,\\\"str\\\":1,\\\"def\\\":1,\\\"dex\\\":1,\\\"agi\\\":1,\\\"cha\\\":1}}\"}},{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"/Temp/gang-ascend-member.txt\",\"text\":\"{\\\"respect\\\":458908.14797138615,\\\"hack\\\":1.10614489519737,\\\"str\\\":1,\\\"def\\\":1,\\\"dex\\\":1,\\\"agi\\\":1,\\\"cha\\\":1.2308925394824826}\"}},{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"/Temp/gang-upgrade-members.txt\",\"text\":\"true\"}},{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"/Temp/transact-stock.txt\",\"text\":\"13595.963575912581\"}},{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"/Temp/copy-scripts.txt\",\"text\":\"true\"}},{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"/Temp/faction-augs.txt\",\"text\":\"{\\\"BitRunners\\\":[\\\"Artificial Bio-neural Network Implant\\\",\\\"Enhanced Myelin Sheathing\\\",\\\"DataJack\\\",\\\"Embedded Netburner Module\\\",\\\"Embedded Netburner Module Core Implant\\\",\\\"Embedded Netburner Module Core V2 Upgrade\\\",\\\"Neural Accelerator\\\",\\\"Cranial Signal Processors - Gen III\\\",\\\"Cranial Signal Processors - Gen IV\\\",\\\"Cranial Signal Processors - Gen V\\\",\\\"NeuroFlux Governor\\\",\\\"Neurotrainer II\\\",\\\"BitRunners Neurolink\\\"],\\\"The Black Hand\\\":[\\\"Artificial Synaptic Potentiation\\\",\\\"Enhanced Myelin Sheathing\\\",\\\"DataJack\\\",\\\"Embedded Netburner Module\\\",\\\"Embedded Netburner Module Core Implant\\\",\\\"Neuralstimulator\\\",\\\"Cranial Signal Processors - Gen III\\\",\\\"Cranial Signal Processors - Gen IV\\\",\\\"NeuroFlux Governor\\\",\\\"The Black Hand\\\"],\\\"NiteSec\\\":[\\\"Unstable Circadian Modulator\\\",\\\"HemoRecirculator\\\",\\\"Augmented Targeting I\\\",\\\"Augmented Targeting II\\\",\\\"Augmented Targeting III\\\",\\\"Synthetic Heart\\\",\\\"Synfibril Muscle\\\",\\\"Combat Rib I\\\",\\\"Combat Rib II\\\",\\\"Combat Rib III\\\",\\\"Nanofiber Weave\\\",\\\"NEMEAN Subdermal Weave\\\",\\\"Wired Reflexes\\\",\\\"Graphene Bone Lacings\\\",\\\"Bionic Spine\\\",\\\"Graphene Bionic Spine Upgrade\\\",\\\"Bionic Legs\\\",\\\"Graphene Bionic Legs Upgrade\\\",\\\"Speech Processor Implant\\\",\\\"TITN-41 Gene-Modification Injection\\\",\\\"Enhanced Social Interaction Implant\\\",\\\"BitWire\\\",\\\"Artificial Bio-neural Network Implant\\\",\\\"Artificial Synaptic Potentiation\\\",\\\"Enhanced Myelin Sheathing\\\",\\\"Synaptic Enhancement Implant\\\",\\\"Neural-Retention Enhancement\\\",\\\"DataJack\\\",\\\"Embedded Netburner Module\\\",\\\"Embedded Netburner Module Core Implant\\\",\\\"Embedded Netburner Module Core V2 Upgrade\\\",\\\"Embedded Netburner Module Core V3 Upgrade\\\",\\\"Embedded Netburner Module Analyze Engine\\\",\\\"Embedded Netburner Module Direct Memory Access Upgrade\\\",\\\"Neuralstimulator\\\",\\\"Neural Accelerator\\\",\\\"Cranial Signal Processors - Gen I\\\",\\\"Cranial Signal Processors - Gen II\\\",\\\"Cranial Signal Processors - Gen III\\\",\\\"Cranial Signal Processors - Gen IV\\\",\\\"Cranial Signal Processors - Gen V\\\",\\\"Neuronal Densification\\\",\\\"Nuoptimal Nootropic Injector Implant\\\",\\\"Speech Enhancement\\\",\\\"FocusWire\\\",\\\"PC Direct-Neural Interface\\\",\\\"PC Direct-Neural Interface Optimization Submodule\\\",\\\"PC Direct-Neural Interface NeuroNet Injector\\\",\\\"ADR-V1 Pheromone Gene\\\",\\\"ADR-V2 Pheromone Gene\\\",\\\"The Shadow's Simulacrum\\\",\\\"Hacknet Node CPU Architecture Neural-Upload\\\",\\\"Hacknet Node Cache Architecture Neural-Upload\\\",\\\"Hacknet Node NIC Architecture Neural-Upload\\\",\\\"Hacknet Node Kernel Direct-Neural Interface\\\",\\\"Hacknet Node Core Direct-Neural Interface\\\",\\\"Neurotrainer I\\\",\\\"Neurotrainer II\\\",\\\"Neurotrainer III\\\",\\\"HyperSight Corneal Implant\\\",\\\"LuminCloaking-V1 Skin Implant\\\",\\\"LuminCloaking-V2 Skin Implant\\\",\\\"SmartSonar Implant\\\",\\\"Power Recirculation Core\\\",\\\"QLink\\\",\\\"SPTN-97 Gene Modification\\\",\\\"ECorp HVMind Implant\\\",\\\"CordiARC Fusion Reactor\\\",\\\"SmartJaw\\\",\\\"Neotra\\\",\\\"Xanipher\\\",\\\"Hydroflame Left Arm\\\",\\\"nextSENS Gene Modification\\\",\\\"OmniTek InfoLoad\\\",\\\"Photosynthetic Cells\\\",\\\"BitRunners Neurolink\\\",\\\"The Black Hand\\\",\\\"CRTX42-AA Gene Modification\\\",\\\"Neuregen Gene Modification\\\",\\\"CashRoot Starter Kit\\\",\\\"NutriGen Implant\\\",\\\"PCMatrix\\\",\\\"INFRARET Enhancement\\\",\\\"DermaForce Particle Barrier\\\",\\\"Graphene BrachiBlades Upgrade\\\",\\\"Graphene Bionic Arms Upgrade\\\",\\\"BrachiBlades\\\",\\\"Bionic Arms\\\",\\\"Social Negotiation Assistant (S.N.A)\\\",\\\"Neuroreceptor Management Implant\\\"],\\\"CyberSec\\\":[\\\"BitWire\\\",\\\"Synaptic Enhancement Implant\\\",\\\"Cranial Signal Processors - Gen I\\\",\\\"Cranial Signal Processors - Gen II\\\",\\\"NeuroFlux Governor\\\",\\\"Neurotrainer I\\\"],\\\"Netburners\\\":[\\\"Hacknet Node CPU Architecture Neural-Upload\\\",\\\"Hacknet Node Cache Architecture Neural-Upload\\\",\\\"Hacknet Node NIC Architecture Neural-Upload\\\",\\\"Hacknet Node Kernel Direct-Neural Interface\\\",\\\"Hacknet Node Core Direct-Neural Interface\\\",\\\"NeuroFlux Governor\\\"],\\\"Tian Di Hui\\\":[\\\"Nanofiber Weave\\\",\\\"Wired Reflexes\\\",\\\"Speech Processor Implant\\\",\\\"Nuoptimal Nootropic Injector Implant\\\",\\\"Speech Enhancement\\\",\\\"ADR-V1 Pheromone Gene\\\",\\\"NeuroFlux Governor\\\",\\\"Social Negotiation Assistant (S.N.A)\\\",\\\"Neuroreceptor Management Implant\\\"],\\\"Sector-12\\\":[\\\"Augmented Targeting I\\\",\\\"Augmented Targeting II\\\",\\\"Wired Reflexes\\\",\\\"Speech Processor Implant\\\",\\\"Neuralstimulator\\\",\\\"NeuroFlux Governor\\\",\\\"CashRoot Starter Kit\\\"],\\\"Chongqing\\\":[\\\"Speech Processor Implant\\\",\\\"DataJack\\\",\\\"Neuralstimulator\\\",\\\"Nuoptimal Nootropic Injector Implant\\\",\\\"NeuroFlux Governor\\\",\\\"Neuregen Gene Modification\\\"],\\\"New Tokyo\\\":[\\\"Speech Processor Implant\\\",\\\"DataJack\\\",\\\"Neuralstimulator\\\",\\\"Nuoptimal Nootropic Injector Implant\\\",\\\"NeuroFlux Governor\\\",\\\"NutriGen Implant\\\"],\\\"Ishima\\\":[\\\"Augmented Targeting I\\\",\\\"Combat Rib I\\\",\\\"Wired Reflexes\\\",\\\"Speech Processor Implant\\\",\\\"Neuralstimulator\\\",\\\"NeuroFlux Governor\\\",\\\"INFRARET Enhancement\\\"],\\\"Aevum\\\":[\\\"Wired Reflexes\\\",\\\"Speech Processor Implant\\\",\\\"Synaptic Enhancement Implant\\\",\\\"Neuralstimulator\\\",\\\"NeuroFlux Governor\\\",\\\"Neurotrainer I\\\",\\\"PCMatrix\\\"],\\\"Volhaven\\\":[\\\"Combat Rib I\\\",\\\"Combat Rib II\\\",\\\"Wired Reflexes\\\",\\\"Speech Processor Implant\\\",\\\"Neuralstimulator\\\",\\\"Nuoptimal Nootropic Injector Implant\\\",\\\"NeuroFlux Governor\\\",\\\"DermaForce Particle Barrier\\\"],\\\"Slum Snakes\\\":[\\\"Augmented Targeting I\\\",\\\"Combat Rib I\\\",\\\"Wired Reflexes\\\",\\\"NeuroFlux Governor\\\",\\\"LuminCloaking-V1 Skin Implant\\\",\\\"LuminCloaking-V2 Skin Implant\\\",\\\"SmartSonar Implant\\\"],\\\"Tetrads\\\":[\\\"HemoRecirculator\\\",\\\"NeuroFlux Governor\\\",\\\"LuminCloaking-V1 Skin Implant\\\",\\\"LuminCloaking-V2 Skin Implant\\\",\\\"Power Recirculation Core\\\",\\\"Bionic Arms\\\"],\\\"Daedalus\\\":[\\\"Synthetic Heart\\\",\\\"Synfibril Muscle\\\",\\\"NEMEAN Subdermal Weave\\\",\\\"Embedded Netburner Module Core V3 Upgrade\\\",\\\"Embedded Netburner Module Analyze Engine\\\",\\\"Embedded Netburner Module Direct Memory Access Upgrade\\\",\\\"NeuroFlux Governor\\\",\\\"The Red Pill\\\"]}\"}},{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"/Temp/aug-repreqs.txt\",\"text\":\"{\\\"Artificial Bio-neural Network Implant\\\":550000,\\\"Enhanced Myelin Sheathing\\\":200000,\\\"DataJack\\\":225000,\\\"Embedded Netburner Module\\\":30000,\\\"Embedded Netburner Module Core Implant\\\":350000,\\\"Embedded Netburner Module Core V2 Upgrade\\\":2000000,\\\"Neural Accelerator\\\":400000,\\\"Cranial Signal Processors - Gen III\\\":100000,\\\"Cranial Signal Processors - Gen IV\\\":250000,\\\"Cranial Signal Processors - Gen V\\\":500000,\\\"NeuroFlux Governor\\\":490326238.1264618,\\\"Neurotrainer II\\\":20000,\\\"BitRunners Neurolink\\\":1750000,\\\"Artificial Synaptic Potentiation\\\":12500,\\\"Neuralstimulator\\\":100000,\\\"The Black Hand\\\":200000,\\\"Unstable Circadian Modulator\\\":725000,\\\"HemoRecirculator\\\":20000,\\\"Augmented Targeting I\\\":10000,\\\"Augmented Targeting II\\\":17500,\\\"Augmented Targeting III\\\":55000,\\\"Synthetic Heart\\\":1500000,\\\"Synfibril Muscle\\\":875000,\\\"Combat Rib I\\\":15000,\\\"Combat Rib II\\\":37500,\\\"Combat Rib III\\\":70000,\\\"Nanofiber Weave\\\":75000,\\\"NEMEAN Subdermal Weave\\\":1750000,\\\"Wired Reflexes\\\":2500,\\\"Graphene Bone Lacings\\\":2250000,\\\"Bionic Spine\\\":90000,\\\"Graphene Bionic Spine Upgrade\\\":3250000,\\\"Bionic Legs\\\":300000,\\\"Graphene Bionic Legs Upgrade\\\":1500000,\\\"Speech Processor Implant\\\":15000,\\\"TITN-41 Gene-Modification Injection\\\":50000,\\\"Enhanced Social Interaction Implant\\\":750000,\\\"BitWire\\\":7500,\\\"Synaptic Enhancement Implant\\\":4000,\\\"Neural-Retention Enhancement\\\":40000,\\\"Embedded Netburner Module Core V3 Upgrade\\\":3500000,\\\"Embedded Netburner Module Analyze Engine\\\":1250000,\\\"Embedded Netburner Module Direct Memory Access Upgrade\\\":2000000,\\\"Cranial Signal Processors - Gen I\\\":20000,\\\"Cranial Signal Processors - Gen II\\\":37500,\\\"Neuronal Densification\\\":375000,\\\"Nuoptimal Nootropic Injector Implant\\\":10000,\\\"Speech Enhancement\\\":5000,\\\"FocusWire\\\":150000,\\\"PC Direct-Neural Interface\\\":750000,\\\"PC Direct-Neural Interface Optimization Submodule\\\":1000000,\\\"PC Direct-Neural Interface NeuroNet Injector\\\":3000000,\\\"ADR-V1 Pheromone Gene\\\":7500,\\\"ADR-V2 Pheromone Gene\\\":125000,\\\"The Shadow's Simulacrum\\\":75000,\\\"Hacknet Node CPU Architecture Neural-Upload\\\":7500,\\\"Hacknet Node Cache Architecture Neural-Upload\\\":5000,\\\"Hacknet Node NIC Architecture Neural-Upload\\\":3750,\\\"Hacknet Node Kernel Direct-Neural Interface\\\":15000,\\\"Hacknet Node Core Direct-Neural Interface\\\":25000,\\\"Neurotrainer I\\\":2000,\\\"Neurotrainer III\\\":50000,\\\"HyperSight Corneal Implant\\\":300000,\\\"LuminCloaking-V1 Skin Implant\\\":3000,\\\"LuminCloaking-V2 Skin Implant\\\":10000,\\\"SmartSonar Implant\\\":45000,\\\"Power Recirculation Core\\\":50000,\\\"QLink\\\":3750000,\\\"SPTN-97 Gene Modification\\\":2500000,\\\"ECorp HVMind Implant\\\":3000000,\\\"CordiARC Fusion Reactor\\\":2250000,\\\"SmartJaw\\\":750000,\\\"Neotra\\\":1125000,\\\"Xanipher\\\":1750000,\\\"Hydroflame Left Arm\\\":2500000,\\\"nextSENS Gene Modification\\\":875000,\\\"OmniTek InfoLoad\\\":1250000,\\\"Photosynthetic Cells\\\":1125000,\\\"CRTX42-AA Gene Modification\\\":90000,\\\"Neuregen Gene Modification\\\":75000,\\\"CashRoot Starter Kit\\\":25000,\\\"NutriGen Implant\\\":12500,\\\"PCMatrix\\\":200000,\\\"INFRARET Enhancement\\\":15000,\\\"DermaForce Particle Barrier\\\":30000,\\\"Graphene BrachiBlades Upgrade\\\":450000,\\\"Graphene Bionic Arms Upgrade\\\":1000000,\\\"BrachiBlades\\\":25000,\\\"Bionic Arms\\\":125000,\\\"Social Negotiation Assistant (S.N.A)\\\":12500,\\\"Neuroreceptor Management Implant\\\":150000,\\\"The Red Pill\\\":5000000}\"}},{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"/Temp/aug-stats.txt\",\"text\":\"{\\\"Artificial Bio-neural Network Implant\\\":{\\\"hacking_mult\\\":1.12,\\\"hacking_speed_mult\\\":1.03,\\\"hacking_money_mult\\\":1.15},\\\"Enhanced Myelin Sheathing\\\":{\\\"hacking_mult\\\":1.08,\\\"hacking_exp_mult\\\":1.1,\\\"hacking_speed_mult\\\":1.03},\\\"DataJack\\\":{\\\"hacking_money_mult\\\":1.25},\\\"Embedded Netburner Module\\\":{\\\"hacking_mult\\\":1.08},\\\"Embedded Netburner Module Core Implant\\\":{\\\"hacking_mult\\\":1.07,\\\"hacking_exp_mult\\\":1.07,\\\"hacking_chance_mult\\\":1.03,\\\"hacking_speed_mult\\\":1.03,\\\"hacking_money_mult\\\":1.1},\\\"Embedded Netburner Module Core V2 Upgrade\\\":{\\\"hacking_mult\\\":1.08,\\\"hacking_exp_mult\\\":1.15,\\\"hacking_chance_mult\\\":1.05,\\\"hacking_speed_mult\\\":1.05,\\\"hacking_money_mult\\\":1.3},\\\"Neural Accelerator\\\":{\\\"hacking_mult\\\":1.1,\\\"hacking_exp_mult\\\":1.15,\\\"hacking_money_mult\\\":1.2},\\\"Cranial Signal Processors - Gen III\\\":{\\\"hacking_mult\\\":1.09,\\\"hacking_speed_mult\\\":1.02,\\\"hacking_money_mult\\\":1.15},\\\"Cranial Signal Processors - Gen IV\\\":{\\\"hacking_speed_mult\\\":1.02,\\\"hacking_money_mult\\\":1.2,\\\"hacking_grow_mult\\\":1.25},\\\"Cranial Signal Processors - Gen V\\\":{\\\"hacking_mult\\\":1.3,\\\"hacking_money_mult\\\":1.25,\\\"hacking_grow_mult\\\":1.75},\\\"NeuroFlux Governor\\\":{\\\"hacking_mult\\\":1.01,\\\"strength_mult\\\":1.01,\\\"defense_mult\\\":1.01,\\\"dexterity_mult\\\":1.01,\\\"agility_mult\\\":1.01,\\\"charisma_mult\\\":1.01,\\\"hacking_exp_mult\\\":1.01,\\\"strength_exp_mult\\\":1.01,\\\"defense_exp_mult\\\":1.01,\\\"dexterity_exp_mult\\\":1.01,\\\"agility_exp_mult\\\":1.01,\\\"charisma_exp_mult\\\":1.01,\\\"hacking_chance_mult\\\":1.01,\\\"hacking_speed_mult\\\":1.01,\\\"hacking_money_mult\\\":1.01,\\\"hacking_grow_mult\\\":1.01,\\\"company_rep_mult\\\":1.01,\\\"faction_rep_mult\\\":1.01,\\\"crime_money_mult\\\":1.01,\\\"crime_success_mult\\\":1.01,\\\"work_money_mult\\\":1.01,\\\"hacknet_node_money_mult\\\":1.01,\\\"hacknet_node_purchase_cost_mult\\\":0.99,\\\"hacknet_node_ram_cost_mult\\\":0.99,\\\"hacknet_node_core_cost_mult\\\":0.99,\\\"hacknet_node_level_cost_mult\\\":0.99},\\\"Neurotrainer II\\\":{\\\"hacking_exp_mult\\\":1.15,\\\"strength_exp_mult\\\":1.15,\\\"defense_exp_mult\\\":1.15,\\\"dexterity_exp_mult\\\":1.15,\\\"agility_exp_mult\\\":1.15,\\\"charisma_exp_mult\\\":1.15},\\\"BitRunners Neurolink\\\":{\\\"hacking_mult\\\":1.15,\\\"hacking_exp_mult\\\":1.2,\\\"hacking_chance_mult\\\":1.1,\\\"hacking_speed_mult\\\":1.05},\\\"Artificial Synaptic Potentiation\\\":{\\\"hacking_exp_mult\\\":1.05,\\\"hacking_chance_mult\\\":1.05,\\\"hacking_speed_mult\\\":1.02},\\\"Neuralstimulator\\\":{\\\"hacking_exp_mult\\\":1.12,\\\"hacking_chance_mult\\\":1.1,\\\"hacking_speed_mult\\\":1.02},\\\"The Black Hand\\\":{\\\"hacking_mult\\\":1.1,\\\"strength_mult\\\":1.15,\\\"dexterity_mult\\\":1.15,\\\"hacking_speed_mult\\\":1.02,\\\"hacking_money_mult\\\":1.1},\\\"Unstable Circadian Modulator\\\":{\\\"hacking_mult\\\":1.15,\\\"hacking_exp_mult\\\":2},\\\"HemoRecirculator\\\":{\\\"strength_mult\\\":1.08,\\\"defense_mult\\\":1.08,\\\"dexterity_mult\\\":1.08,\\\"agility_mult\\\":1.08},\\\"Augmented Targeting I\\\":{\\\"dexterity_mult\\\":1.1},\\\"Augmented Targeting II\\\":{\\\"dexterity_mult\\\":1.2},\\\"Augmented Targeting III\\\":{\\\"dexterity_mult\\\":1.3},\\\"Synthetic Heart\\\":{\\\"strength_mult\\\":1.5,\\\"agility_mult\\\":1.5},\\\"Synfibril Muscle\\\":{\\\"strength_mult\\\":1.3,\\\"defense_mult\\\":1.3},\\\"Combat Rib I\\\":{\\\"strength_mult\\\":1.1,\\\"defense_mult\\\":1.1},\\\"Combat Rib II\\\":{\\\"strength_mult\\\":1.14,\\\"defense_mult\\\":1.14},\\\"Combat Rib III\\\":{\\\"strength_mult\\\":1.18,\\\"defense_mult\\\":1.18},\\\"Nanofiber Weave\\\":{\\\"strength_mult\\\":1.2,\\\"defense_mult\\\":1.2},\\\"NEMEAN Subdermal Weave\\\":{\\\"defense_mult\\\":2.2},\\\"Wired Reflexes\\\":{\\\"dexterity_mult\\\":1.05,\\\"agility_mult\\\":1.05},\\\"Graphene Bone Lacings\\\":{\\\"strength_mult\\\":1.7,\\\"defense_mult\\\":1.7},\\\"Bionic Spine\\\":{\\\"strength_mult\\\":1.15,\\\"defense_mult\\\":1.15,\\\"dexterity_mult\\\":1.15,\\\"agility_mult\\\":1.15},\\\"Graphene Bionic Spine Upgrade\\\":{\\\"strength_mult\\\":1.6,\\\"defense_mult\\\":1.6,\\\"dexterity_mult\\\":1.6,\\\"agility_mult\\\":1.6},\\\"Bionic Legs\\\":{\\\"agility_mult\\\":1.6},\\\"Graphene Bionic Legs Upgrade\\\":{\\\"agility_mult\\\":2.5},\\\"Speech Processor Implant\\\":{\\\"charisma_mult\\\":1.2},\\\"TITN-41 Gene-Modification Injection\\\":{\\\"charisma_mult\\\":1.15,\\\"charisma_exp_mult\\\":1.15},\\\"Enhanced Social Interaction Implant\\\":{\\\"charisma_mult\\\":1.6,\\\"charisma_exp_mult\\\":1.6},\\\"BitWire\\\":{\\\"hacking_mult\\\":1.05},\\\"Synaptic Enhancement Implant\\\":{\\\"hacking_speed_mult\\\":1.03},\\\"Neural-Retention Enhancement\\\":{\\\"hacking_exp_mult\\\":1.25},\\\"Embedded Netburner Module Core V3 Upgrade\\\":{\\\"hacking_mult\\\":1.1,\\\"hacking_exp_mult\\\":1.25,\\\"hacking_chance_mult\\\":1.1,\\\"hacking_speed_mult\\\":1.05,\\\"hacking_money_mult\\\":1.4},\\\"Embedded Netburner Module Analyze Engine\\\":{\\\"hacking_speed_mult\\\":1.1},\\\"Embedded Netburner Module Direct Memory Access Upgrade\\\":{\\\"hacking_chance_mult\\\":1.2,\\\"hacking_money_mult\\\":1.4},\\\"Cranial Signal Processors - Gen I\\\":{\\\"hacking_mult\\\":1.05,\\\"hacking_speed_mult\\\":1.01},\\\"Cranial Signal Processors - Gen II\\\":{\\\"hacking_mult\\\":1.07,\\\"hacking_chance_mult\\\":1.05,\\\"hacking_speed_mult\\\":1.02},\\\"Neuronal Densification\\\":{\\\"hacking_mult\\\":1.15,\\\"hacking_exp_mult\\\":1.1,\\\"hacking_speed_mult\\\":1.03},\\\"Nuoptimal Nootropic Injector Implant\\\":{\\\"company_rep_mult\\\":1.2},\\\"Speech Enhancement\\\":{\\\"charisma_mult\\\":1.1,\\\"company_rep_mult\\\":1.1},\\\"FocusWire\\\":{\\\"hacking_exp_mult\\\":1.05,\\\"strength_exp_mult\\\":1.05,\\\"defense_exp_mult\\\":1.05,\\\"dexterity_exp_mult\\\":1.05,\\\"agility_exp_mult\\\":1.05,\\\"charisma_exp_mult\\\":1.05,\\\"company_rep_mult\\\":1.1,\\\"work_money_mult\\\":1.2},\\\"PC Direct-Neural Interface\\\":{\\\"hacking_mult\\\":1.08,\\\"company_rep_mult\\\":1.3},\\\"PC Direct-Neural Interface Optimization Submodule\\\":{\\\"hacking_mult\\\":1.1,\\\"company_rep_mult\\\":1.75},\\\"PC Direct-Neural Interface NeuroNet Injector\\\":{\\\"hacking_mult\\\":1.1,\\\"hacking_speed_mult\\\":1.05,\\\"company_rep_mult\\\":2},\\\"ADR-V1 Pheromone Gene\\\":{\\\"company_rep_mult\\\":1.1,\\\"faction_rep_mult\\\":1.1},\\\"ADR-V2 Pheromone Gene\\\":{\\\"company_rep_mult\\\":1.2,\\\"faction_rep_mult\\\":1.2},\\\"The Shadow's Simulacrum\\\":{\\\"company_rep_mult\\\":1.15,\\\"faction_rep_mult\\\":1.15},\\\"Hacknet Node CPU Architecture Neural-Upload\\\":{\\\"hacknet_node_money_mult\\\":1.15,\\\"hacknet_node_purchase_cost_mult\\\":0.85},\\\"Hacknet Node Cache Architecture Neural-Upload\\\":{\\\"hacknet_node_money_mult\\\":1.1,\\\"hacknet_node_level_cost_mult\\\":0.85},\\\"Hacknet Node NIC Architecture Neural-Upload\\\":{\\\"hacknet_node_money_mult\\\":1.1,\\\"hacknet_node_purchase_cost_mult\\\":0.9},\\\"Hacknet Node Kernel Direct-Neural Interface\\\":{\\\"hacknet_node_money_mult\\\":1.25},\\\"Hacknet Node Core Direct-Neural Interface\\\":{\\\"hacknet_node_money_mult\\\":1.45},\\\"Neurotrainer I\\\":{\\\"hacking_exp_mult\\\":1.1,\\\"strength_exp_mult\\\":1.1,\\\"defense_exp_mult\\\":1.1,\\\"dexterity_exp_mult\\\":1.1,\\\"agility_exp_mult\\\":1.1,\\\"charisma_exp_mult\\\":1.1},\\\"Neurotrainer III\\\":{\\\"hacking_exp_mult\\\":1.2,\\\"strength_exp_mult\\\":1.2,\\\"defense_exp_mult\\\":1.2,\\\"dexterity_exp_mult\\\":1.2,\\\"agility_exp_mult\\\":1.2,\\\"charisma_exp_mult\\\":1.2},\\\"HyperSight Corneal Implant\\\":{\\\"dexterity_mult\\\":1.4,\\\"hacking_speed_mult\\\":1.03,\\\"hacking_money_mult\\\":1.1},\\\"LuminCloaking-V1 Skin Implant\\\":{\\\"agility_mult\\\":1.05,\\\"crime_money_mult\\\":1.1},\\\"LuminCloaking-V2 Skin Implant\\\":{\\\"defense_mult\\\":1.1,\\\"agility_mult\\\":1.1,\\\"crime_money_mult\\\":1.25},\\\"SmartSonar Implant\\\":{\\\"dexterity_mult\\\":1.1,\\\"dexterity_exp_mult\\\":1.15,\\\"crime_money_mult\\\":1.25},\\\"Power Recirculation Core\\\":{\\\"hacking_mult\\\":1.05,\\\"strength_mult\\\":1.05,\\\"defense_mult\\\":1.05,\\\"dexterity_mult\\\":1.05,\\\"agility_mult\\\":1.05,\\\"charisma_mult\\\":1.05,\\\"hacking_exp_mult\\\":1.1,\\\"strength_exp_mult\\\":1.1,\\\"defense_exp_mult\\\":1.1,\\\"dexterity_exp_mult\\\":1.1,\\\"agility_exp_mult\\\":1.1,\\\"charisma_exp_mult\\\":1.1},\\\"QLink\\\":{\\\"hacking_mult\\\":1.75,\\\"hacking_chance_mult\\\":2.5,\\\"hacking_speed_mult\\\":2,\\\"hacking_money_mult\\\":4},\\\"SPTN-97 Gene Modification\\\":{\\\"hacking_mult\\\":1.15,\\\"strength_mult\\\":1.75,\\\"defense_mult\\\":1.75,\\\"dexterity_mult\\\":1.75,\\\"agility_mult\\\":1.75},\\\"ECorp HVMind Implant\\\":{\\\"hacking_grow_mult\\\":3},\\\"CordiARC Fusion Reactor\\\":{\\\"strength_mult\\\":1.35,\\\"defense_mult\\\":1.35,\\\"dexterity_mult\\\":1.35,\\\"agility_mult\\\":1.35,\\\"strength_exp_mult\\\":1.35,\\\"defense_exp_mult\\\":1.35,\\\"dexterity_exp_mult\\\":1.35,\\\"agility_exp_mult\\\":1.35},\\\"SmartJaw\\\":{\\\"charisma_mult\\\":1.5,\\\"charisma_exp_mult\\\":1.5,\\\"company_rep_mult\\\":1.25,\\\"faction_rep_mult\\\":1.25},\\\"Neotra\\\":{\\\"strength_mult\\\":1.55,\\\"defense_mult\\\":1.55},\\\"Xanipher\\\":{\\\"hacking_mult\\\":1.2,\\\"strength_mult\\\":1.2,\\\"defense_mult\\\":1.2,\\\"dexterity_mult\\\":1.2,\\\"agility_mult\\\":1.2,\\\"charisma_mult\\\":1.2,\\\"hacking_exp_mult\\\":1.15,\\\"strength_exp_mult\\\":1.15,\\\"defense_exp_mult\\\":1.15,\\\"dexterity_exp_mult\\\":1.15,\\\"agility_exp_mult\\\":1.15,\\\"charisma_exp_mult\\\":1.15},\\\"Hydroflame Left Arm\\\":{\\\"strength_mult\\\":2.7},\\\"nextSENS Gene Modification\\\":{\\\"hacking_mult\\\":1.2,\\\"strength_mult\\\":1.2,\\\"defense_mult\\\":1.2,\\\"dexterity_mult\\\":1.2,\\\"agility_mult\\\":1.2,\\\"charisma_mult\\\":1.2},\\\"OmniTek InfoLoad\\\":{\\\"hacking_mult\\\":1.2,\\\"hacking_exp_mult\\\":1.25},\\\"Photosynthetic Cells\\\":{\\\"strength_mult\\\":1.4,\\\"defense_mult\\\":1.4,\\\"agility_mult\\\":1.4},\\\"CRTX42-AA Gene Modification\\\":{\\\"hacking_mult\\\":1.08,\\\"hacking_exp_mult\\\":1.15},\\\"Neuregen Gene Modification\\\":{\\\"hacking_exp_mult\\\":1.4},\\\"CashRoot Starter Kit\\\":{},\\\"NutriGen Implant\\\":{\\\"strength_exp_mult\\\":1.2,\\\"defense_exp_mult\\\":1.2,\\\"dexterity_exp_mult\\\":1.2,\\\"agility_exp_mult\\\":1.2},\\\"PCMatrix\\\":{\\\"charisma_mult\\\":1.0777,\\\"charisma_exp_mult\\\":1.0777,\\\"company_rep_mult\\\":1.0777,\\\"faction_rep_mult\\\":1.0777,\\\"crime_money_mult\\\":1.0777,\\\"crime_success_mult\\\":1.0777,\\\"work_money_mult\\\":1.777},\\\"INFRARET Enhancement\\\":{\\\"dexterity_mult\\\":1.1,\\\"crime_money_mult\\\":1.1,\\\"crime_success_mult\\\":1.25},\\\"DermaForce Particle Barrier\\\":{\\\"defense_mult\\\":1.4},\\\"Graphene BrachiBlades Upgrade\\\":{\\\"strength_mult\\\":1.4,\\\"defense_mult\\\":1.4,\\\"crime_money_mult\\\":1.3,\\\"crime_success_mult\\\":1.1},\\\"Graphene Bionic Arms Upgrade\\\":{\\\"strength_mult\\\":1.85,\\\"dexterity_mult\\\":1.85},\\\"BrachiBlades\\\":{\\\"strength_mult\\\":1.15,\\\"defense_mult\\\":1.15,\\\"crime_money_mult\\\":1.15,\\\"crime_success_mult\\\":1.1},\\\"Bionic Arms\\\":{\\\"strength_mult\\\":1.3,\\\"dexterity_mult\\\":1.3},\\\"Social Negotiation Assistant (S.N.A)\\\":{\\\"company_rep_mult\\\":1.15,\\\"faction_rep_mult\\\":1.15,\\\"work_money_mult\\\":1.1},\\\"Neuroreceptor Management Implant\\\":{},\\\"The Red Pill\\\":{}}\"}},{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"/Temp/faction-favor.txt\",\"text\":\"{\\\"BitRunners\\\":50.1331,\\\"The Black Hand\\\":215.0713,\\\"NiteSec\\\":51.1359,\\\"CyberSec\\\":56.2133,\\\"Netburners\\\":62.4814,\\\"Tian Di Hui\\\":129.2155,\\\"Sector-12\\\":60.8768,\\\"Chongqing\\\":0,\\\"New Tokyo\\\":0,\\\"Ishima\\\":0,\\\"Aevum\\\":52.9079,\\\"Volhaven\\\":0,\\\"Slum Snakes\\\":50.1844,\\\"Tetrads\\\":50.1791,\\\"Daedalus\\\":0}\"}},{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"/Temp/player-augs-purchased.txt\",\"text\":\"[\\\"I.N.T.E.R.L.I.N.K.E.D\\\",\\\"Embedded Netburner Module Analyze Engine\\\",\\\"Embedded Netburner Module Core V3 Upgrade\\\",\\\"Neuregen Gene Modification\\\",\\\"The Black Hand\\\",\\\"SmartJaw\\\",\\\"Hyperion Plasma Cannon V1\\\",\\\"QLink\\\",\\\"BLADE-51b Tesla Armor: Omnibeam Upgrade\\\",\\\"INFRARET Enhancement\\\",\\\"Neural-Retention Enhancement\\\",\\\"Enhanced Myelin Sheathing\\\",\\\"TITN-41 Gene-Modification Injection\\\",\\\"PC Direct-Neural Interface\\\",\\\"DataJack\\\",\\\"BitRunners Neurolink\\\",\\\"Neurotrainer II\\\",\\\"Graphene Bionic Legs Upgrade\\\",\\\"Combat Rib III\\\",\\\"OmniTek InfoLoad\\\",\\\"Artificial Synaptic Potentiation\\\",\\\"NeuroFlux Governor\\\",\\\"Neuroreceptor Management Implant\\\",\\\"Embedded Netburner Module\\\",\\\"Neuralstimulator\\\",\\\"Embedded Netburner Module Core Implant\\\",\\\"Cranial Signal Processors - Gen I\\\",\\\"BitWire\\\",\\\"Synaptic Enhancement Implant\\\",\\\"Neurotrainer I\\\",\\\"Wired Reflexes\\\",\\\"NutriGen Implant\\\",\\\"LuminCloaking-V1 Skin Implant\\\",\\\"Hacknet Node Cache Architecture Neural-Upload\\\",\\\"Hacknet Node NIC Architecture Neural-Upload\\\",\\\"Hacknet Node CPU Architecture Neural-Upload\\\",\\\"Speech Enhancement\\\",\\\"Augmented Targeting I\\\",\\\"ADR-V1 Pheromone Gene\\\",\\\"Nuoptimal Nootropic Injector Implant\\\",\\\"Combat Rib I\\\",\\\"LuminCloaking-V2 Skin Implant\\\",\\\"Social Negotiation Assistant (S.N.A)\\\",\\\"Hacknet Node Kernel Direct-Neural Interface\\\",\\\"Augmented Targeting II\\\",\\\"HemoRecirculator\\\",\\\"Speech Processor Implant\\\",\\\"DermaForce Particle Barrier\\\",\\\"Hacknet Node Core Direct-Neural Interface\\\",\\\"Combat Rib II\\\",\\\"BrachiBlades\\\",\\\"Neurotrainer III\\\",\\\"Power Recirculation Core\\\",\\\"Cranial Signal Processors - Gen II\\\"]\"}},{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"/Temp/player-augs-installed.txt\",\"text\":\"[\\\"I.N.T.E.R.L.I.N.K.E.D\\\",\\\"Embedded Netburner Module Analyze Engine\\\",\\\"Embedded Netburner Module Core V3 Upgrade\\\",\\\"Neuregen Gene Modification\\\",\\\"The Black Hand\\\",\\\"SmartJaw\\\",\\\"Hyperion Plasma Cannon V1\\\",\\\"QLink\\\",\\\"BLADE-51b Tesla Armor: Omnibeam Upgrade\\\",\\\"INFRARET Enhancement\\\",\\\"Neural-Retention Enhancement\\\",\\\"Enhanced Myelin Sheathing\\\",\\\"TITN-41 Gene-Modification Injection\\\",\\\"PC Direct-Neural Interface\\\",\\\"DataJack\\\",\\\"BitRunners Neurolink\\\",\\\"Neurotrainer II\\\",\\\"Graphene Bionic Legs Upgrade\\\",\\\"Combat Rib III\\\",\\\"OmniTek InfoLoad\\\",\\\"Artificial Synaptic Potentiation\\\",\\\"NeuroFlux Governor\\\",\\\"Neuroreceptor Management Implant\\\",\\\"Embedded Netburner Module\\\",\\\"Neuralstimulator\\\",\\\"Embedded Netburner Module Core Implant\\\",\\\"Cranial Signal Processors - Gen I\\\",\\\"BitWire\\\",\\\"Synaptic Enhancement Implant\\\",\\\"Neurotrainer I\\\",\\\"Wired Reflexes\\\",\\\"NutriGen Implant\\\",\\\"LuminCloaking-V1 Skin Implant\\\",\\\"Hacknet Node Cache Architecture Neural-Upload\\\",\\\"Hacknet Node NIC Architecture Neural-Upload\\\",\\\"Hacknet Node CPU Architecture Neural-Upload\\\",\\\"Speech Enhancement\\\",\\\"Augmented Targeting I\\\",\\\"ADR-V1 Pheromone Gene\\\",\\\"Nuoptimal Nootropic Injector Implant\\\",\\\"Combat Rib I\\\",\\\"LuminCloaking-V2 Skin Implant\\\",\\\"Social Negotiation Assistant (S.N.A)\\\",\\\"Hacknet Node Kernel Direct-Neural Interface\\\",\\\"Augmented Targeting II\\\",\\\"HemoRecirculator\\\",\\\"Speech Processor Implant\\\",\\\"DermaForce Particle Barrier\\\",\\\"Hacknet Node Core Direct-Neural Interface\\\",\\\"Combat Rib II\\\",\\\"BrachiBlades\\\"]\"}},{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"/Temp/player-faction-invites.txt\",\"text\":\"[]\"}},{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"/Temp/crime-chances.txt\",\"text\":\"{\\\"heist\\\":0.011487004863152532,\\\"assassinate\\\":0.02385666919089795,\\\"homicide\\\":0.20676608753674555,\\\"mug\\\":0.9443213088799417}\"}},{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"/Temp/crime-time.txt\",\"text\":\"4000\"}},{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"/Temp/servers-to-backdoor.txt\",\"text\":\"[]\"}},{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"/Temp/faction-rep.txt\",\"text\":\"{\\\"BitRunners\\\":964833.5302692127,\\\"The Black Hand\\\":2509506.239228587,\\\"NiteSec\\\":336645.9399796194,\\\"CyberSec\\\":1107330.970555548,\\\"Netburners\\\":1257505.1718336076,\\\"Tian Di Hui\\\":0,\\\"Sector-12\\\":1295217.7192017625,\\\"Chongqing\\\":0,\\\"New Tokyo\\\":0,\\\"Ishima\\\":0,\\\"Aevum\\\":0,\\\"Volhaven\\\":0,\\\"Slum Snakes\\\":963450.1202531105,\\\"Tetrads\\\":0,\\\"Daedalus\\\":28.07967933816483}\"}},{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"/Temp/gang-faction.txt\",\"text\":\"\\\"NiteSec\\\"\"}},{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"/Temp/aug-prices.txt\",\"text\":\"{\\\"Artificial Bio-neural Network Implant\\\":102884999999.99998,\\\"Enhanced Myelin Sheathing\\\":47155624999.99999,\\\"DataJack\\\":15432749999.999998,\\\"Embedded Netburner Module\\\":8573749999.999999,\\\"Embedded Netburner Module Core Implant\\\":85737499999.99998,\\\"Embedded Netburner Module Core V2 Upgrade\\\":154327499999.99997,\\\"Neural Accelerator\\\":60016249999.99999,\\\"Cranial Signal Processors - Gen III\\\":18862249999.999996,\\\"Cranial Signal Processors - Gen IV\\\":37724499999.99999,\\\"Cranial Signal Processors - Gen V\\\":77163749999.99998,\\\"NeuroFlux Governor\\\":12611803752410.256,\\\"Neurotrainer II\\\":1543274999.9999998,\\\"BitRunners Neurolink\\\":150040624999.99997,\\\"Artificial Synaptic Potentiation\\\":2743599999.9999995,\\\"Neuralstimulator\\\":102884999999.99998,\\\"The Black Hand\\\":18862249999.999996,\\\"Unstable Circadian Modulator\\\":171474999999.99997,\\\"HemoRecirculator\\\":1543274999.9999998,\\\"Augmented Targeting I\\\":514424999.99999994,\\\"Augmented Targeting II\\\":1457537499.9999998,\\\"Augmented Targeting III\\\":3943924999.9999995,\\\"Synthetic Heart\\\":98598124999.99998,\\\"Synfibril Muscle\\\":38581874999.99999,\\\"Combat Rib I\\\":814506249.9999999,\\\"Combat Rib II\\\":2229174999.9999995,\\\"Combat Rib III\\\":4115399999.9999995,\\\"Nanofiber Weave\\\":4286874999.9999995,\\\"NEMEAN Subdermal Weave\\\":111458749999.99998,\\\"Wired Reflexes\\\":85737499.99999999,\\\"Graphene Bone Lacings\\\":145753749999.99997,\\\"Bionic Spine\\\":4286874999.9999995,\\\"Graphene Bionic Spine Upgrade\\\":205769999999.99997,\\\"Bionic Legs\\\":12860624999.999998,\\\"Graphene Bionic Legs Upgrade\\\":154327499999.99997,\\\"Speech Processor Implant\\\":1714749999.9999998,\\\"TITN-41 Gene-Modification Injection\\\":6516049999.999999,\\\"Enhanced Social Interaction Implant\\\":47155624999.99999,\\\"BitWire\\\":342949999.99999994,\\\"Synaptic Enhancement Implant\\\":257212499.99999997,\\\"Neural-Retention Enhancement\\\":8573749999.999999,\\\"Embedded Netburner Module Core V3 Upgrade\\\":257212499999.99997,\\\"Embedded Netburner Module Analyze Engine\\\":205769999999.99997,\\\"Embedded Netburner Module Direct Memory Access Upgrade\\\":240064999999.99997,\\\"Cranial Signal Processors - Gen I\\\":2400649999.9999995,\\\"Cranial Signal Processors - Gen II\\\":4286874999.9999995,\\\"Neuronal Densification\\\":47155624999.99999,\\\"Nuoptimal Nootropic Injector Implant\\\":685899999.9999999,\\\"Speech Enhancement\\\":428687499.99999994,\\\"FocusWire\\\":30865499999.999996,\\\"PC Direct-Neural Interface\\\":128606249999.99998,\\\"PC Direct-Neural Interface Optimization Submodule\\\":154327499999.99997,\\\"PC Direct-Neural Interface NeuroNet Injector\\\":257212499999.99997,\\\"ADR-V1 Pheromone Gene\\\":600162499.9999999,\\\"ADR-V2 Pheromone Gene\\\":18862249999.999996,\\\"The Shadow's Simulacrum\\\":13717999999.999998,\\\"Hacknet Node CPU Architecture Neural-Upload\\\":377244999.99999994,\\\"Hacknet Node Cache Architecture Neural-Upload\\\":188622499.99999997,\\\"Hacknet Node NIC Architecture Neural-Upload\\\":154327499.99999997,\\\"Hacknet Node Kernel Direct-Neural Interface\\\":1371799999.9999998,\\\"Hacknet Node Core Direct-Neural Interface\\\":2057699999.9999998,\\\"Neurotrainer I\\\":137179999.99999997,\\\"Neurotrainer III\\\":4458349999.999999,\\\"HyperSight Corneal Implant\\\":94311249999.99998,\\\"LuminCloaking-V1 Skin Implant\\\":171474999.99999997,\\\"LuminCloaking-V2 Skin Implant\\\":1028849999.9999999,\\\"SmartSonar Implant\\\":2572124999.9999995,\\\"Power Recirculation Core\\\":6173099999.999999,\\\"QLink\\\":857374999999999.9,\\\"SPTN-97 Gene Modification\\\":167188124999.99997,\\\"ECorp HVMind Implant\\\":188622499999.99997,\\\"CordiARC Fusion Reactor\\\":171474999999.99997,\\\"SmartJaw\\\":94311249999.99998,\\\"Neotra\\\":98598124999.99998,\\\"Xanipher\\\":145753749999.99997,\\\"Hydroflame Left Arm\\\":85737499999999.98,\\\"nextSENS Gene Modification\\\":66017874999.99999,\\\"OmniTek InfoLoad\\\":98598124999.99998,\\\"Photosynthetic Cells\\\":94311249999.99998,\\\"CRTX42-AA Gene Modification\\\":7716374999.999999,\\\"Neuregen Gene Modification\\\":12860624999.999998,\\\"CashRoot Starter Kit\\\":4286874999.9999995,\\\"NutriGen Implant\\\":85737499.99999999,\\\"PCMatrix\\\":68589999999.99999,\\\"INFRARET Enhancement\\\":1028849999.9999999,\\\"DermaForce Particle Barrier\\\":1714749999.9999998,\\\"Graphene BrachiBlades Upgrade\\\":85737499999.99998,\\\"Graphene Bionic Arms Upgrade\\\":128606249999.99998,\\\"BrachiBlades\\\":3086549999.9999995,\\\"Bionic Arms\\\":9431124999.999998,\\\"Social Negotiation Assistant (S.N.A)\\\":1028849999.9999999,\\\"Neuroreceptor Management Implant\\\":18862249999.999996,\\\"The Red Pill\\\":0}\"}},{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"/Temp/aug-prereqs.txt\",\"text\":\"{\\\"Artificial Bio-neural Network Implant\\\":[],\\\"Enhanced Myelin Sheathing\\\":[],\\\"DataJack\\\":[],\\\"Embedded Netburner Module\\\":[],\\\"Embedded Netburner Module Core Implant\\\":[\\\"Embedded Netburner Module\\\"],\\\"Embedded Netburner Module Core V2 Upgrade\\\":[\\\"Embedded Netburner Module Core Implant\\\"],\\\"Neural Accelerator\\\":[],\\\"Cranial Signal Processors - Gen III\\\":[\\\"Cranial Signal Processors - Gen II\\\"],\\\"Cranial Signal Processors - Gen IV\\\":[\\\"Cranial Signal Processors - Gen III\\\"],\\\"Cranial Signal Processors - Gen V\\\":[\\\"Cranial Signal Processors - Gen IV\\\"],\\\"NeuroFlux Governor\\\":[],\\\"Neurotrainer II\\\":[],\\\"BitRunners Neurolink\\\":[],\\\"Artificial Synaptic Potentiation\\\":[],\\\"Neuralstimulator\\\":[],\\\"The Black Hand\\\":[],\\\"Unstable Circadian Modulator\\\":[],\\\"HemoRecirculator\\\":[],\\\"Augmented Targeting I\\\":[],\\\"Augmented Targeting II\\\":[\\\"Augmented Targeting I\\\"],\\\"Augmented Targeting III\\\":[\\\"Augmented Targeting II\\\"],\\\"Synthetic Heart\\\":[],\\\"Synfibril Muscle\\\":[],\\\"Combat Rib I\\\":[],\\\"Combat Rib II\\\":[\\\"Combat Rib I\\\"],\\\"Combat Rib III\\\":[\\\"Combat Rib II\\\"],\\\"Nanofiber Weave\\\":[],\\\"NEMEAN Subdermal Weave\\\":[],\\\"Wired Reflexes\\\":[],\\\"Graphene Bone Lacings\\\":[],\\\"Bionic Spine\\\":[],\\\"Graphene Bionic Spine Upgrade\\\":[\\\"Bionic Spine\\\"],\\\"Bionic Legs\\\":[],\\\"Graphene Bionic Legs Upgrade\\\":[\\\"Bionic Legs\\\"],\\\"Speech Processor Implant\\\":[],\\\"TITN-41 Gene-Modification Injection\\\":[],\\\"Enhanced Social Interaction Implant\\\":[],\\\"BitWire\\\":[],\\\"Synaptic Enhancement Implant\\\":[],\\\"Neural-Retention Enhancement\\\":[],\\\"Embedded Netburner Module Core V3 Upgrade\\\":[\\\"Embedded Netburner Module Core V2 Upgrade\\\"],\\\"Embedded Netburner Module Analyze Engine\\\":[\\\"Embedded Netburner Module\\\"],\\\"Embedded Netburner Module Direct Memory Access Upgrade\\\":[\\\"Embedded Netburner Module\\\"],\\\"Cranial Signal Processors - Gen I\\\":[],\\\"Cranial Signal Processors - Gen II\\\":[\\\"Cranial Signal Processors - Gen I\\\"],\\\"Neuronal Densification\\\":[],\\\"Nuoptimal Nootropic Injector Implant\\\":[],\\\"Speech Enhancement\\\":[],\\\"FocusWire\\\":[],\\\"PC Direct-Neural Interface\\\":[],\\\"PC Direct-Neural Interface Optimization Submodule\\\":[\\\"PC Direct-Neural Interface\\\"],\\\"PC Direct-Neural Interface NeuroNet Injector\\\":[\\\"PC Direct-Neural Interface\\\"],\\\"ADR-V1 Pheromone Gene\\\":[],\\\"ADR-V2 Pheromone Gene\\\":[],\\\"The Shadow's Simulacrum\\\":[],\\\"Hacknet Node CPU Architecture Neural-Upload\\\":[],\\\"Hacknet Node Cache Architecture Neural-Upload\\\":[],\\\"Hacknet Node NIC Architecture Neural-Upload\\\":[],\\\"Hacknet Node Kernel Direct-Neural Interface\\\":[],\\\"Hacknet Node Core Direct-Neural Interface\\\":[],\\\"Neurotrainer I\\\":[],\\\"Neurotrainer III\\\":[],\\\"HyperSight Corneal Implant\\\":[],\\\"LuminCloaking-V1 Skin Implant\\\":[],\\\"LuminCloaking-V2 Skin Implant\\\":[\\\"LuminCloaking-V1 Skin Implant\\\"],\\\"SmartSonar Implant\\\":[],\\\"Power Recirculation Core\\\":[],\\\"QLink\\\":[],\\\"SPTN-97 Gene Modification\\\":[],\\\"ECorp HVMind Implant\\\":[],\\\"CordiARC Fusion Reactor\\\":[],\\\"SmartJaw\\\":[],\\\"Neotra\\\":[],\\\"Xanipher\\\":[],\\\"Hydroflame Left Arm\\\":[],\\\"nextSENS Gene Modification\\\":[],\\\"OmniTek InfoLoad\\\":[],\\\"Photosynthetic Cells\\\":[],\\\"CRTX42-AA Gene Modification\\\":[],\\\"Neuregen Gene Modification\\\":[],\\\"CashRoot Starter Kit\\\":[],\\\"NutriGen Implant\\\":[],\\\"PCMatrix\\\":[],\\\"INFRARET Enhancement\\\":[],\\\"DermaForce Particle Barrier\\\":[],\\\"Graphene BrachiBlades Upgrade\\\":[\\\"BrachiBlades\\\"],\\\"Graphene Bionic Arms Upgrade\\\":[\\\"Bionic Arms\\\"],\\\"BrachiBlades\\\":[],\\\"Bionic Arms\\\":[],\\\"Social Negotiation Assistant (S.N.A)\\\":[],\\\"Neuroreceptor Management Implant\\\":[],\\\"The Red Pill\\\":[]}\"}},{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"/Temp/bitnode-multipliers.txt\",\"text\":\"{\\\"HackingLevelMultiplier\\\":0.35,\\\"StrengthLevelMultiplier\\\":0.4,\\\"DefenseLevelMultiplier\\\":0.4,\\\"DexterityLevelMultiplier\\\":0.4,\\\"AgilityLevelMultiplier\\\":0.4,\\\"CharismaLevelMultiplier\\\":0.4,\\\"ServerGrowthRate\\\":1,\\\"ServerMaxMoney\\\":1,\\\"ServerStartingMoney\\\":1,\\\"ServerStartingSecurity\\\":1,\\\"ServerWeakenRate\\\":1,\\\"HomeComputerRamCost\\\":1.5,\\\"PurchasedServerCost\\\":5,\\\"PurchasedServerSoftcap\\\":1.1,\\\"PurchasedServerLimit\\\":0.6,\\\"PurchasedServerMaxRam\\\":0.5,\\\"CompanyWorkMoney\\\":0.5,\\\"CrimeMoney\\\":0.5,\\\"HacknetNodeMoney\\\":0.5,\\\"ManualHackMoney\\\":0.5,\\\"ScriptHackMoney\\\":0.5,\\\"ScriptHackMoneyGain\\\":1,\\\"CodingContractMoney\\\":0.5,\\\"ClassGymExpGain\\\":1,\\\"CompanyWorkExpGain\\\":1,\\\"CrimeExpGain\\\":1,\\\"FactionWorkExpGain\\\":1,\\\"HackExpGain\\\":1,\\\"FactionPassiveRepGain\\\":1,\\\"FactionWorkRepGain\\\":1,\\\"RepToDonateToFaction\\\":1,\\\"AugmentationMoneyCost\\\":5,\\\"AugmentationRepCost\\\":2,\\\"InfiltrationMoney\\\":0.5,\\\"InfiltrationRep\\\":1,\\\"FourSigmaMarketDataCost\\\":1,\\\"FourSigmaMarketDataApiCost\\\":1,\\\"CorporationValuation\\\":0.5,\\\"CorporationSoftCap\\\":0.9,\\\"BladeburnerRank\\\":0.8,\\\"BladeburnerSkillCost\\\":1,\\\"GangSoftcap\\\":0.9,\\\"DaedalusAugsRequirement\\\":1,\\\"StaneksGiftPowerMultiplier\\\":0.75,\\\"StaneksGiftExtraSize\\\":-3,\\\"WorldDaemonDifficulty\\\":2}\"}},{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"/Temp/join-faction.txt\",\"text\":\"true\"}},{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"/Temp/gang-augs.txt\",\"text\":\"[\\\"Unstable Circadian Modulator\\\",\\\"HemoRecirculator\\\",\\\"Augmented Targeting I\\\",\\\"Augmented Targeting II\\\",\\\"Augmented Targeting III\\\",\\\"Synthetic Heart\\\",\\\"Synfibril Muscle\\\",\\\"Combat Rib I\\\",\\\"Combat Rib II\\\",\\\"Combat Rib III\\\",\\\"Nanofiber Weave\\\",\\\"NEMEAN Subdermal Weave\\\",\\\"Wired Reflexes\\\",\\\"Graphene Bone Lacings\\\",\\\"Bionic Spine\\\",\\\"Graphene Bionic Spine Upgrade\\\",\\\"Bionic Legs\\\",\\\"Graphene Bionic Legs Upgrade\\\",\\\"Speech Processor Implant\\\",\\\"TITN-41 Gene-Modification Injection\\\",\\\"Enhanced Social Interaction Implant\\\",\\\"BitWire\\\",\\\"Artificial Bio-neural Network Implant\\\",\\\"Artificial Synaptic Potentiation\\\",\\\"Enhanced Myelin Sheathing\\\",\\\"Synaptic Enhancement Implant\\\",\\\"Neural-Retention Enhancement\\\",\\\"DataJack\\\",\\\"Embedded Netburner Module\\\",\\\"Embedded Netburner Module Core Implant\\\",\\\"Embedded Netburner Module Core V2 Upgrade\\\",\\\"Embedded Netburner Module Core V3 Upgrade\\\",\\\"Embedded Netburner Module Analyze Engine\\\",\\\"Embedded Netburner Module Direct Memory Access Upgrade\\\",\\\"Neuralstimulator\\\",\\\"Neural Accelerator\\\",\\\"Cranial Signal Processors - Gen I\\\",\\\"Cranial Signal Processors - Gen II\\\",\\\"Cranial Signal Processors - Gen III\\\",\\\"Cranial Signal Processors - Gen IV\\\",\\\"Cranial Signal Processors - Gen V\\\",\\\"Neuronal Densification\\\",\\\"Nuoptimal Nootropic Injector Implant\\\",\\\"Speech Enhancement\\\",\\\"FocusWire\\\",\\\"PC Direct-Neural Interface\\\",\\\"PC Direct-Neural Interface Optimization Submodule\\\",\\\"PC Direct-Neural Interface NeuroNet Injector\\\",\\\"ADR-V1 Pheromone Gene\\\",\\\"ADR-V2 Pheromone Gene\\\",\\\"The Shadow's Simulacrum\\\",\\\"Hacknet Node CPU Architecture Neural-Upload\\\",\\\"Hacknet Node Cache Architecture Neural-Upload\\\",\\\"Hacknet Node NIC Architecture Neural-Upload\\\",\\\"Hacknet Node Kernel Direct-Neural Interface\\\",\\\"Hacknet Node Core Direct-Neural Interface\\\",\\\"Neurotrainer I\\\",\\\"Neurotrainer II\\\",\\\"Neurotrainer III\\\",\\\"HyperSight Corneal Implant\\\",\\\"LuminCloaking-V1 Skin Implant\\\",\\\"LuminCloaking-V2 Skin Implant\\\",\\\"SmartSonar Implant\\\",\\\"Power Recirculation Core\\\",\\\"QLink\\\",\\\"SPTN-97 Gene Modification\\\",\\\"ECorp HVMind Implant\\\",\\\"CordiARC Fusion Reactor\\\",\\\"SmartJaw\\\",\\\"Neotra\\\",\\\"Xanipher\\\",\\\"Hydroflame Left Arm\\\",\\\"nextSENS Gene Modification\\\",\\\"OmniTek InfoLoad\\\",\\\"Photosynthetic Cells\\\",\\\"BitRunners Neurolink\\\",\\\"The Black Hand\\\",\\\"CRTX42-AA Gene Modification\\\",\\\"Neuregen Gene Modification\\\",\\\"CashRoot Starter Kit\\\",\\\"NutriGen Implant\\\",\\\"PCMatrix\\\",\\\"INFRARET Enhancement\\\",\\\"DermaForce Particle Barrier\\\",\\\"Graphene BrachiBlades Upgrade\\\",\\\"Graphene Bionic Arms Upgrade\\\",\\\"BrachiBlades\\\",\\\"Bionic Arms\\\",\\\"Social Negotiation Assistant (S.N.A)\\\",\\\"Neuroreceptor Management Implant\\\"]\"}},{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"/Temp/gang-recruit-member.txt\",\"text\":\"true\"}},{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"/Temp/gang-faction-rep.txt\",\"text\":\"341561.91825184016\"}},{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"/Temp/gang-names.txt\",\"text\":\"[\\\"Slum Snakes\\\",\\\"Tetrads\\\",\\\"The Syndicate\\\",\\\"The Dark Army\\\",\\\"Speakers for the Dead\\\",\\\"NiteSec\\\",\\\"The Black Hand\\\"]\"}},{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"/Temp/travel.txt\",\"text\":\"true\"}},{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"/Temp/work-for-faction.txt\",\"text\":\"true\"}},{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"/Temp/spend-hacknet-hashes.txt\",\"text\":\"201\"}},{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"/Temp/stop-action.txt\",\"text\":\"true\"}},{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"/Temp/apply-to-company.txt\",\"text\":\"false\"}},{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"/Temp/work-for-company.txt\",\"text\":\"true\"}},{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"/Temp/company-is-backdoored.txt\",\"text\":\"true\"}},{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"/Temp/company-favors.txt\",\"text\":\"{\\\"Bachman & Associates\\\":116.4023,\\\"ECorp\\\":117.3045,\\\"Clarke Incorporated\\\":114.5915,\\\"OmniTek Incorporated\\\":114.9644,\\\"NWO\\\":116.0419,\\\"Blade Industries\\\":114.7821,\\\"MegaCorp\\\":112.1215,\\\"KuaiGong International\\\":112.2691,\\\"Fulcrum Technologies\\\":246.0983,\\\"Four Sigma\\\":113.3621}\"}},{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"/Temp/stanek-fragments.txt\",\"text\":\"[]\"}},{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"/Temp/hash-stats.txt\",\"text\":\"[618.3643829028131,640]\"}},{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"/Temp/sleeve-count.txt\",\"text\":\"2\"}},{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"/Temp/sleeve-set-task.txt\",\"text\":\"true\"}},{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"/Temp/sleeve-augs.txt\",\"text\":\"[{\\\"name\\\":\\\"Enhanced Myelin Sheathing\\\",\\\"cost\\\":6875000000},{\\\"name\\\":\\\"DataJack\\\",\\\"cost\\\":2250000000},{\\\"name\\\":\\\"Neuralstimulator\\\",\\\"cost\\\":15000000000},{\\\"name\\\":\\\"Cranial Signal Processors - Gen IV\\\",\\\"cost\\\":5500000000},{\\\"name\\\":\\\"FocusWire\\\",\\\"cost\\\":4500000000},{\\\"name\\\":\\\"PCMatrix\\\",\\\"cost\\\":10000000000}]\"}},{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"/Temp/sleeve-purchase.txt\",\"text\":\"false\"}}],\"purchasedByPlayer\":true,\"backdoorInstalled\":true,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":1,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"ecorp\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"ecorp\",\"httpPortOpen\":true,\"ip\":\"23.5.5.7\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"ECorp\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"nwo\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":99,\"hackDifficulty\":99,\"minDifficulty\":33,\"moneyAvailable\":51866615774,\"moneyMax\":1296665394350,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1156,\"serverGrowth\":99}},\"megacorp\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"megacorp\",\"httpPortOpen\":true,\"ip\":\"93.7.8.4\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"MegaCorp\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"b-and-a\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":99,\"hackDifficulty\":99,\"minDifficulty\":33,\"moneyAvailable\":54207232127,\"moneyMax\":1355180803175,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1282,\"serverGrowth\":99}},\"b-and-a\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"b-and-a\",\"httpPortOpen\":true,\"ip\":\"22.8.7.0\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Bachman & Associates\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\".\",\"megacorp\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":77,\"hackDifficulty\":77,\"minDifficulty\":26,\"moneyAvailable\":24757139641,\"moneyMax\":618928491025,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":957,\"serverGrowth\":76}},\"blade\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"blade\",\"httpPortOpen\":true,\"ip\":\"34.8.7.7\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"beyond-man.lit\"],\"organizationName\":\"Blade Industries\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"omnitek\",\"The-Cave\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":93,\"hackDifficulty\":93,\"minDifficulty\":31,\"moneyAvailable\":28558655149,\"moneyMax\":713966378725,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1087,\"serverGrowth\":70}},\"nwo\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"nwo\",\"httpPortOpen\":true,\"ip\":\"65.6.5.4\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"the-hidden-world.lit\"],\"organizationName\":\"NWO\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"omnitek\",\"ecorp\",\"fulcrumassets\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":99,\"hackDifficulty\":99,\"minDifficulty\":33,\"moneyAvailable\":24804167247,\"moneyMax\":620104181175,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":955,\"serverGrowth\":70}},\"clarkinc\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"clarkinc\",\"httpPortOpen\":true,\"ip\":\"31.3.1.3\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"beyond-man.lit\",\"cost-of-immortality.lit\"],\"organizationName\":\"Clarke Incorporated\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\".\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":62,\"hackDifficulty\":62,\"minDifficulty\":21,\"moneyAvailable\":18291777157,\"moneyMax\":457294428925,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1031,\"serverGrowth\":49}},\"omnitek\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"omnitek\",\"httpPortOpen\":true,\"ip\":\"92.5.1.0\",\"isConnectedTo\":false,\"maxRam\":256,\"messages\":[\"coded-intelligence.lit\",\"history-of-synthoids.lit\"],\"organizationName\":\"OmniTek Incorporated\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"vitalife\",\"blade\",\"nwo\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":92,\"hackDifficulty\":92,\"minDifficulty\":31,\"moneyAvailable\":17181319481,\"moneyMax\":429532987025,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1010,\"serverGrowth\":96}},\"4sigma\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"4sigma\",\"httpPortOpen\":true,\"ip\":\"7.7.7.0\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Four Sigma\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"helios\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":75,\"hackDifficulty\":75,\"minDifficulty\":25,\"moneyAvailable\":17422128683,\"moneyMax\":435553217075,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1241,\"serverGrowth\":84}},\"kuai-gong\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"kuai-gong\",\"httpPortOpen\":true,\"ip\":\"54.7.8.4\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"KuaiGong International\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"fulcrumtech\",\"powerhouse-fitness\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":97,\"hackDifficulty\":97,\"minDifficulty\":32,\"moneyAvailable\":20252525758,\"moneyMax\":506313143950,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1110,\"serverGrowth\":96}},\"fulcrumtech\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"fulcrumtech\",\"httpPortOpen\":true,\"ip\":\"29.3.1.2\",\"isConnectedTo\":false,\"maxRam\":512,\"messages\":[\"simulated-reality.lit\"],\"organizationName\":\"Fulcrum Technologies\",\"programs\":[],\"ramUsed\":23.8,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"iron-gym\",1645773541981,1645773542249,268,\"Batch 0-hack\",0,1,0],\"dataMap\":{},\"filename\":\"/Remote/hack-target.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.6100000000000001,\"pid\":701,\"ramUsage\":1.7,\"server\":\"fulcrumtech\",\"threads\":14,\"dependencies\":[{\"filename\":\"/Remote/hack-target.js\",\"url\":\"blob:https://danielyxie.github.io/5ffacec8-76b9-43ed-9044-e5644d39e650\",\"moduleSequenceNumber\":286}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns \\n * Wait until an appointed time and then execute a hack. */\\nexport async function main(ns) {\\n    //args[0: target, 1: desired start time, 2: expected end, 3: expected duration, 4: description, 5: manipulate stock, 6: disable toast warnings, 7: loop]\\n    const sleepDuration = ns.args.length > 1 ? ns.args[1] - Date.now() : 0;\\n    const expectedDuration = ns.args.length > 3 ? ns.args[3] : 0;\\n    const manipulateStock = ns.args.length > 5 && ns.args[5] ? true : false;\\n    const disableToastWarnings = ns.args.length > 6 ? ns.args[6] : false;\\n    const loop = ns.args.length > 7 ? ns.args[7] : false;\\n    let cycleTime = expectedDuration * 4;\\n    if (cycleTime < 100) cycleTime = Math.max(1, Math.min(5, cycleTime * 2)); // For fast hacking loops, inject a delay on hack in case grow/weaken are running a bit slow.\\n    if (sleepDuration > 0)\\n        await ns.sleep(sleepDuration);\\n    do {\\n        if (!await ns.hack(ns.args[0], { stock: manipulateStock }) && !disableToastWarnings)\\n            ns.toast(`Warning, hack stole 0 money. Might be a misfire. ${JSON.stringify(ns.args)}`, 'warning');\\n        if (loop) await ns.sleep(cycleTime - expectedDuration);\\n    } while (loop);\\n}\",\"filename\":\"/Remote/hack-target.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/Remote/hack-target.js\",\"url\":\"blob:https://danielyxie.github.io/5ffacec8-76b9-43ed-9044-e5644d39e650\",\"moduleSequenceNumber\":286}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"fulcrumtech\",\"moduleSequenceNumber\":286,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Return a formatted representation of the monetary amount using scale sympols (e.g. $6.50M)\\n * @param {number} num - The number to format\\n * @param {number=} maxSignificantFigures - (default: 6) The maximum significant figures you wish to see (e.g. 123, 12.3 and 1.23 all have 3 significant figures)\\n * @param {number=} maxDecimalPlaces - (default: 3) The maximum decimal places you wish to see, regardless of significant figures. (e.g. 12.3, 1.2, 0.1 all have 1 decimal)\\n **/\\nexport function formatMoney(num, maxSignificantFigures = 6, maxDecimalPlaces = 3) {\\n    let numberShort = formatNumberShort(num, maxSignificantFigures, maxDecimalPlaces);\\n    return num >= 0 ? \\\"$\\\" + numberShort : numberShort.replace(\\\"-\\\", \\\"-$\\\");\\n}\\n\\nconst symbols = [\\\"\\\", \\\"k\\\", \\\"m\\\", \\\"b\\\", \\\"t\\\", \\\"q\\\", \\\"Q\\\", \\\"s\\\", \\\"S\\\", \\\"o\\\", \\\"n\\\", \\\"e33\\\", \\\"e36\\\", \\\"e39\\\"];\\n\\n/**\\n * Return a formatted representation of the monetary amount using scale sympols (e.g. 6.50M) \\n * @param {number} num - The number to format\\n * @param {number=} maxSignificantFigures - (default: 6) The maximum significant figures you wish to see (e.g. 123, 12.3 and 1.23 all have 3 significant figures)\\n * @param {number=} maxDecimalPlaces - (default: 3) The maximum decimal places you wish to see, regardless of significant figures. (e.g. 12.3, 1.2, 0.1 all have 1 decimal)\\n **/\\nexport function formatNumberShort(num, maxSignificantFigures = 6, maxDecimalPlaces = 3) {\\n    for (var i = 0, sign = Math.sign(num), num = Math.abs(num); num >= 1000 && i < symbols.length; i++) num /= 1000;\\n    // TODO: A number like 9.999 once rounted to show 3 sig figs, will become 10.00, which is now 4 sig figs.\\n    return ((sign < 0) ? \\\"-\\\" : \\\"\\\") + num.toFixed(Math.max(0, Math.min(maxDecimalPlaces, maxSignificantFigures - Math.floor(1 + Math.log10(num))))) + symbols[i];\\n}\\n\\n/** Convert a shortened number back into a value */\\nexport function parseShortNumber(text = \\\"0\\\") {\\n    let parsed = Number(text);\\n    if (!isNaN(parsed)) return parsed;\\n    for (const sym of symbols.slice(1))\\n        if (text.toLowerCase().endsWith(sym))\\n            return Number.parseFloat(text.slice(0, text.length - sym.length)) * Math.pow(10, 3 * symbols.indexOf(sym));\\n    return Number.NaN;\\n}\\n\\n/**\\n * Return a number formatted with the specified number of significatnt figures or decimal places, whichever is more limiting.\\n * @param {number} num - The number to format\\n * @param {number=} minSignificantFigures - (default: 6) The minimum significant figures you wish to see (e.g. 123, 12.3 and 1.23 all have 3 significant figures)\\n * @param {number=} minDecimalPlaces - (default: 3) The minimum decimal places you wish to see, regardless of significant figures. (e.g. 12.3, 1.2, 0.1 all have 1 decimal)\\n **/\\nexport function formatNumber(num, minSignificantFigures = 3, minDecimalPlaces = 1) {\\n    return num == 0.0 ? num : num.toFixed(Math.max(minDecimalPlaces, Math.max(0, minSignificantFigures - Math.ceil(Math.log10(num)))));\\n}\\n\\n/** Formats some RAM amount as a round number of GB with thousands separators e.g. `1,028 GB` */\\nexport function formatRam(num) { return `${Math.round(num).toLocaleString()} GB`; }\\n\\n/** Return a datatime in ISO format */\\nexport function formatDateTime(datetime) { return datetime.toISOString(); }\\n\\n/** Format a duration (in milliseconds) as e.g. '1h 21m 6s' for big durations or e.g '12.5s' / '23ms' for small durations */\\nexport function formatDuration(duration) {\\n    if (duration < 1000) return `${duration.toFixed(0)}ms`\\n    const portions = [];\\n    const msInHour = 1000 * 60 * 60;\\n    const hours = Math.trunc(duration / msInHour);\\n    if (hours > 0) {\\n        portions.push(hours + 'h');\\n        duration -= (hours * msInHour);\\n    }\\n    const msInMinute = 1000 * 60;\\n    const minutes = Math.trunc(duration / msInMinute);\\n    if (minutes > 0) {\\n        portions.push(minutes + 'm');\\n        duration -= (minutes * msInMinute);\\n    }\\n    let seconds = (duration / 1000.0)\\n    // Include millisecond precision if we're on the order of seconds\\n    seconds = (hours == 0 && minutes == 0) ? seconds.toPrecision(3) : seconds.toFixed(0);\\n    if (seconds > 0) {\\n        portions.push(seconds + 's');\\n        duration -= (minutes * 1000);\\n    }\\n    return portions.join(' ');\\n}\\n\\n/** Generate a hashCode for a string that is pretty unique most of the time */\\nexport function hashCode(s) { return s.split(\\\"\\\").reduce(function (a, b) { a = ((a << 5) - a) + b.charCodeAt(0); return a & a }, 0); }\\n\\n/** @param {NS} ns **/\\nexport function disableLogs(ns, listOfLogs) { ['disableLog'].concat(...listOfLogs).forEach(log => checkNsInstance(ns, '\\\"disableLogs\\\"').disableLog(log)); }\\n\\n/** Joins all arguments as components in a path, e.g. pathJoin(\\\"foo\\\", \\\"bar\\\", \\\"/baz\\\") = \\\"foo/bar/baz\\\" **/\\nexport function pathJoin(...args) {\\n    return args.filter(s => !!s).join('/').replace(/\\\\/\\\\/+/g, '/');\\n}\\n\\n/** Gets the path for the given local file, taking into account optional subfolder relocation via git-pull.js **/\\nexport function getFilePath(file) {\\n    const subfolder = '';  // git-pull.js optionally modifies this when downloading\\n    return pathJoin(subfolder, file);\\n}\\n\\n// FUNCTIONS THAT PROVIDE ALTERNATIVE IMPLEMENTATIONS TO EXPENSIVE NS FUNCTIONS\\n// VARIATIONS ON NS.RUN\\n\\n/** @param {NS} ns\\n *  Use where a function is required to run a script and you have already referenced ns.run in your script **/\\nexport function getFnRunViaNsRun(ns) { return checkNsInstance(ns, '\\\"getFnRunViaNsRun\\\"').run; }\\n\\n/** @param {NS} ns\\n *  Use where a function is required to run a script and you have already referenced ns.exec in your script **/\\nexport function getFnRunViaNsExec(ns, host = \\\"home\\\") {\\n    checkNsInstance(ns, '\\\"getFnRunViaNsExec\\\"');\\n    return function (scriptPath, ...args) { return ns.exec(scriptPath, host, ...args); }\\n}\\n// VARIATIONS ON NS.ISRUNNING\\n\\n/** @param {NS} ns\\n *  Use where a function is required to run a script and you have already referenced ns.run in your script  */\\nexport function getFnIsAliveViaNsIsRunning(ns) { return checkNsInstance(ns, '\\\"getFnIsAliveViaNsIsRunning\\\"').isRunning; }\\n\\n/** @param {NS} ns\\n *  Use where a function is required to run a script and you have already referenced ns.exec in your script  */\\nexport function getFnIsAliveViaNsPs(ns) {\\n    checkNsInstance(ns, '\\\"getFnIsAliveViaNsPs\\\"');\\n    return function (pid, host) { return ns.ps(host).some(process => process.pid === pid); }\\n}\\n\\n/**\\n * Retrieve the result of an ns command by executing it in a temporary .js script, writing the result to a file, then shuting it down\\n * Importing incurs a maximum of 1.1 GB RAM (0 GB for ns.read, 1 GB for ns.run, 0.1 GB for ns.isRunning).\\n * Has the capacity to retry if there is a failure (e.g. due to lack of RAM available). Not recommended for performance-critical code.\\n * @param {NS} ns - The nestcript instance passed to your script's main entry point\\n * @param {string} command - The ns command that should be invoked to get the desired data (e.g. \\\"ns.getServer('home')\\\" )\\n * @param {string=} fName - (default \\\"/Temp/{commandhash}-data.txt\\\") The name of the file to which data will be written to disk by a temporary process\\n * @param {bool=} verbose - (default false) If set to true, pid and result of command are logged.\\n **/\\nexport async function getNsDataThroughFile(ns, command, fName, verbose = false, maxRetries = 5, retryDelayMs = 50) {\\n    checkNsInstance(ns, '\\\"getNsDataThroughFile\\\"');\\n    if (!verbose) disableLogs(ns, ['run', 'isRunning']);\\n    return await getNsDataThroughFile_Custom(ns, ns.run, ns.isRunning, command, fName, verbose, maxRetries, retryDelayMs);\\n}\\n\\n/**\\n * An advanced version of getNsDataThroughFile that lets you pass your own \\\"fnRun\\\" and \\\"fnIsAlive\\\" implementations to reduce RAM requirements\\n * Importing incurs no RAM (now that ns.read is free) plus whatever fnRun / fnIsAlive you provide it\\n * Has the capacity to retry if there is a failure (e.g. due to lack of RAM available). Not recommended for performance-critical code.\\n * @param {NS} ns - The nestcript instance passed to your script's main entry point\\n * @param {function} fnRun - A single-argument function used to start the new sript, e.g. `ns.run` or `(f,...args) => ns.exec(f, \\\"home\\\", ...args)`\\n * @param {function} fnIsAlive - A single-argument function used to start the new sript, e.g. `ns.isRunning` or `pid => ns.ps(\\\"home\\\").some(process => process.pid === pid)`\\n **/\\nexport async function getNsDataThroughFile_Custom(ns, fnRun, fnIsAlive, command, fName, verbose = false, maxRetries = 5, retryDelayMs = 50) {\\n    checkNsInstance(ns, '\\\"getNsDataThroughFile_Custom\\\"');\\n    if (!verbose) disableLogs(ns, ['read']);\\n    const commandHash = hashCode(command);\\n    fName = fName || `/Temp/${commandHash}-data.txt`;\\n    const fNameCommand = (fName || `/Temp/${commandHash}-command`) + '.js'\\n    // Prepare a command that will write out a new file containing the results of the command\\n    // unless it already exists with the same contents (saves time/ram to check first)\\n    // If an error occurs, it will write an empty file to avoid old results being misread.\\n    const commandToFile = `let result = \\\"\\\"; try { result = JSON.stringify(${command}); } catch { }\\n        if (ns.read(\\\"${fName}\\\") != result) await ns.write(\\\"${fName}\\\", result, 'w')`;\\n    // Run the command with auto-retries if it fails\\n    const pid = await runCommand_Custom(ns, fnRun, commandToFile, fNameCommand, false, maxRetries, retryDelayMs);\\n    // Wait for the process to complete\\n    await waitForProcessToComplete_Custom(ns, fnIsAlive, pid, verbose);\\n    if (verbose) ns.print(`Process ${pid} is done. Reading the contents of ${fName}...`);\\n    // Read the file, with auto-retries if it fails\\n    const fileData = await autoRetry(ns, () => ns.read(fName), f => f !== undefined && f !== \\\"\\\",\\n        () => `ns.read('${fName}') somehow returned undefined or an empty string`,\\n        maxRetries, retryDelayMs, undefined, verbose);\\n    if (verbose) ns.print(`Read the following data for command ${command}:\\\\n${fileData}`);\\n    return JSON.parse(fileData); // Deserialize it back into an object/array and return\\n}\\n\\n/** Evaluate an arbitrary ns command by writing it to a new script and then running or executing it.\\n * @param {NS} ns - The nestcript instance passed to your script's main entry point\\n * @param {string} command - The ns command that should be invoked to get the desired data (e.g. \\\"ns.getServer('home')\\\" )\\n * @param {string=} fileName - (default \\\"/Temp/{commandhash}-data.txt\\\") The name of the file to which data will be written to disk by a temporary process\\n * @param {bool=} verbose - (default false) If set to true, the evaluation result of the command is printed to the terminal\\n * @param {...args} args - args to be passed in as arguments to command being run as a new script.\\n */\\nexport async function runCommand(ns, command, fileName, verbose = false, maxRetries = 5, retryDelayMs = 50, ...args) {\\n    checkNsInstance(ns, '\\\"runCommand\\\"');\\n    if (!verbose) disableLogs(ns, ['run', 'sleep']);\\n    return await runCommand_Custom(ns, ns.run, command, fileName, verbose, maxRetries, retryDelayMs, ...args);\\n}\\n\\n/**\\n * An advanced version of runCommand that lets you pass your own \\\"isAlive\\\" test to reduce RAM requirements (e.g. to avoid referencing ns.isRunning)\\n * Importing incurs 0 GB RAM (assuming fnRun, fnWrite are implemented using another ns function you already reference elsewhere like ns.exec)\\n * @param {NS} ns - The nestcript instance passed to your script's main entry point\\n * @param {function} fnRun - A single-argument function used to start the new sript, e.g. `ns.run` or `(f,...args) => ns.exec(f, \\\"home\\\", ...args)`\\n **/\\nexport async function runCommand_Custom(ns, fnRun, command, fileName, verbose = false, maxRetries = 5, retryDelayMs = 50, ...args) {\\n    checkNsInstance(ns, '\\\"runCommand_Custom\\\"');\\n    let script = `import { formatMoney, formatNumberShort, formatDuration, parseShortNumber, scanAllServers } fr` + `om '${getFilePath('helpers.js')}'\\\\n` +\\n        `export async function main(ns) { try { ` +\\n        (verbose ? `let output = ${command}; ns.tprint(output)` : command) +\\n        `; } catch(err) { ns.tprint(String(err)); throw(err); } }`;\\n    fileName = fileName || `/Temp/${hashCode(command)}-command.js`;\\n    // To improve performance and save on garbage collection, we can skip writing this exact same script was previously written (common for repeatedly-queried data)\\n    if (ns.read(fileName) != script) await ns.write(fileName, script, \\\"w\\\");\\n    return await autoRetry(ns, () => fnRun(fileName, ...args), temp_pid => temp_pid !== 0,\\n        () => `Run command returned no pid. Destination: ${fileName} Command: ${command}\\\\nEnsure you have sufficient free RAM to run this temporary script.`,\\n        maxRetries, retryDelayMs, undefined, verbose);\\n}\\n\\n/**\\n * Wait for a process id to complete running\\n * Importing incurs a maximum of 0.1 GB RAM (for ns.isRunning) \\n * @param {NS} ns - The nestcript instance passed to your script's main entry point\\n * @param {int} pid - The process id to monitor\\n * @param {bool=} verbose - (default false) If set to true, pid and result of command are logged.\\n **/\\nexport async function waitForProcessToComplete(ns, pid, verbose) {\\n    checkNsInstance(ns, '\\\"waitForProcessToComplete\\\"');\\n    if (!verbose) disableLogs(ns, ['isRunning']);\\n    return await waitForProcessToComplete_Custom(ns, ns.isRunning, pid, verbose);\\n}\\n/**\\n * An advanced version of waitForProcessToComplete that lets you pass your own \\\"isAlive\\\" test to reduce RAM requirements (e.g. to avoid referencing ns.isRunning)\\n * Importing incurs 0 GB RAM (assuming fnIsAlive is implemented using another ns function you already reference elsewhere like ns.ps) \\n * @param {NS} ns - The nestcript instance passed to your script's main entry point\\n * @param {function} fnIsAlive - A single-argument function used to start the new sript, e.g. `ns.isRunning` or `pid => ns.ps(\\\"home\\\").some(process => process.pid === pid)`\\n **/\\nexport async function waitForProcessToComplete_Custom(ns, fnIsAlive, pid, verbose) {\\n    checkNsInstance(ns, '\\\"waitForProcessToComplete_Custom\\\"');\\n    if (!verbose) disableLogs(ns, ['sleep']);\\n    // Wait for the PID to stop running (cheaper than e.g. deleting (rm) a possibly pre-existing file and waiting for it to be recreated)\\n    for (var retries = 0; retries < 1000; retries++) {\\n        if (!fnIsAlive(pid)) break; // Script is done running\\n        if (verbose && retries % 100 === 0) ns.print(`Waiting for pid ${pid} to complete... (${retries})`);\\n        await ns.sleep(10);\\n    }\\n    // Make sure that the process has shut down and we haven't just stopped retrying\\n    if (fnIsAlive(pid)) {\\n        let errorMessage = `run-command pid ${pid} is running much longer than expected. Max retries exceeded.`;\\n        ns.print(errorMessage);\\n        throw errorMessage;\\n    }\\n}\\n\\n/** Helper to retry something that failed temporarily (can happen when e.g. we temporarily don't have enough RAM to run)\\n * @param {NS} ns - The nestcript instance passed to your script's main entry point */\\nexport async function autoRetry(ns, fnFunctionThatMayFail, fnSuccessCondition, errorContext = \\\"Success condition not met\\\",\\n    maxRetries = 5, initialRetryDelayMs = 50, backoffRate = 3, verbose = false) {\\n    checkNsInstance(ns, '\\\"autoRetry\\\"');\\n    let retryDelayMs = initialRetryDelayMs;\\n    while (maxRetries-- > 0) {\\n        try {\\n            const result = await fnFunctionThatMayFail()\\n            if (!fnSuccessCondition(result)) throw typeof errorContext === 'string' ? errorContext : errorContext();\\n            return result;\\n        }\\n        catch (error) {\\n            const fatal = maxRetries === 0;\\n            const errorLog = `${fatal ? 'FAIL' : 'WARN'}: (${maxRetries} retries remaining): ${String(error)}`\\n            log(ns, errorLog, fatal, !verbose ? undefined : (fatal ? 'error' : 'warning'))\\n            if (fatal) throw error;\\n            await ns.sleep(retryDelayMs);\\n            retryDelayMs *= backoffRate;\\n        }\\n    }\\n}\\n\\n/** Helper to log a message, and optionally also tprint it and toast it\\n * @param {NS} ns - The nestcript instance passed to your script's main entry point */\\nexport function log(ns, message = \\\"\\\", alsoPrintToTerminal = false, toastStyle = \\\"\\\", maxToastLength = 100) {\\n    checkNsInstance(ns, '\\\"log\\\"');\\n    ns.print(message);\\n    if (alsoPrintToTerminal) ns.tprint(message);\\n    if (toastStyle) ns.toast(message.length <= maxToastLength ? message : message.substring(0, maxToastLength - 3) + \\\"...\\\", toastStyle);\\n    return message;\\n}\\n\\n/** Helper to get a list of all hostnames on the network\\n * @param {NS} ns - The nestcript instance passed to your script's main entry point */\\nexport function scanAllServers(ns) {\\n    checkNsInstance(ns, '\\\"scanAllServers\\\"');\\n    let discoveredHosts = []; // Hosts (a.k.a. servers) we have scanned\\n    let hostsToScan = [\\\"home\\\"]; // Hosts we know about, but have no yet scanned\\n    let infiniteLoopProtection = 9999; // In case you mess with this code, this should save you from getting stuck\\n    while (hostsToScan.length > 0 && infiniteLoopProtection-- > 0) { // Loop until the list of hosts to scan is empty\\n        let hostName = hostsToScan.pop(); // Get the next host to be scanned\\n        for (const connectedHost of ns.scan(hostName)) // \\\"scan\\\" (list all hosts connected to this one)\\n            if (!discoveredHosts.includes(connectedHost)) // If we haven't already scanned this host\\n                hostsToScan.push(connectedHost); // Add it to the queue of hosts to be scanned\\n        discoveredHosts.push(hostName); // Mark this host as \\\"scanned\\\"\\n    }\\n    return discoveredHosts; // The list of scanned hosts should now be the set of all hosts in the game!\\n}\\n\\n/** @param {NS} ns \\n * Get a dictionary of active source files, taking into account the current active bitnode as well. **/\\nexport async function getActiveSourceFiles(ns) {\\n    return await getActiveSourceFiles_Custom(ns, getNsDataThroughFile);\\n}\\n\\n/** @param {NS} ns \\n * getActiveSourceFiles Helper that allows the user to pass in their chosen implementation of getNsDataThroughFile to minimize RAM usage **/\\nexport async function getActiveSourceFiles_Custom(ns, fnGetNsDataThroughFile) {\\n    checkNsInstance(ns, '\\\"getActiveSourceFiles\\\"');\\n    let tempFile = '/Temp/owned-source-files.txt';\\n    // Find out what source files the user has unlocked\\n    let dictSourceFiles;\\n    try { await fnGetNsDataThroughFile(ns, `Object.fromEntries(ns.getOwnedSourceFiles().map(sf => [sf.n, sf.lvl]))`, tempFile); } catch { }\\n    if (!dictSourceFiles) { // Bit of a hack, but if RAM is so low that this fails, we can fallback to using an older version of this file, and even assuming we have no source files.\\n        dictSourceFiles = ns.read(tempFile)\\n        dictSourceFiles = dictSourceFiles ? JSON.parse(dictSourceFiles) : {};\\n    }\\n    // If the user is currently in a given bitnode, they will have its features unlocked\\n    dictSourceFiles[(await fnGetNsDataThroughFile(ns, 'ns.getPlayer()', '/Temp/player-info.txt')).bitNodeN] = 3;\\n    return dictSourceFiles;\\n}\\n\\n/** @param {NS} ns \\n * Return bitnode multiplers, or null if they cannot be accessed. **/\\nexport async function tryGetBitNodeMultipliers(ns) {\\n    return await tryGetBitNodeMultipliers_Custom(ns, getNsDataThroughFile);\\n}\\n\\n/** @param {NS} ns\\n * tryGetBitNodeMultipliers Helper that allows the user to pass in their chosen implementation of getNsDataThroughFile to minimize RAM usage **/\\nexport async function tryGetBitNodeMultipliers_Custom(ns, fnGetNsDataThroughFile) {\\n    checkNsInstance(ns, '\\\"tryGetBitNodeMultipliers\\\"');\\n    let canGetBitNodeMultipliers = false;\\n    try { canGetBitNodeMultipliers = 5 in (await getActiveSourceFiles_Custom(ns, fnGetNsDataThroughFile)); } catch { }\\n    if (!canGetBitNodeMultipliers) return null;\\n    try { return await fnGetNsDataThroughFile(ns, 'ns.getBitNodeMultipliers()', '/Temp/bitnode-multipliers.txt'); } catch { }\\n    return null;\\n}\\n\\n/** @param {NS} ns \\n * Returns a helpful error message if we forgot to pass the ns instance to a function */\\nexport function checkNsInstance(ns, fnName = \\\"this function\\\") { if (!ns.print) throw `The first argument to ${fnName} should be a 'ns' instance.`; return ns; }\",\"filename\":\"helpers.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4.4,\"server\":\"fulcrumtech\",\"moduleSequenceNumber\":248,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"run\",\"cost\":1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"isRunning\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"ps\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}}],\"serversOnNetwork\":[\"run4theh111z\",\"kuai-gong\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":89,\"hackDifficulty\":89,\"minDifficulty\":30,\"moneyAvailable\":1469991148,\"moneyMax\":36749778700,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":974,\"serverGrowth\":99}},\"fulcrumassets\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"fulcrumassets\",\"httpPortOpen\":true,\"ip\":\"39.6.8.8\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Fulcrum Technologies\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"nwo\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":99,\"hackDifficulty\":99,\"minDifficulty\":33,\"moneyAvailable\":1000000,\"moneyMax\":25000000,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1536,\"serverGrowth\":1}},\"stormtech\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"stormtech\",\"httpPortOpen\":true,\"ip\":\"29.5.0.3\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Storm Technologies\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"microdyne\",\".\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":79,\"hackDifficulty\":79,\"minDifficulty\":26,\"moneyAvailable\":1122007605,\"moneyMax\":28050190125,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":960,\"serverGrowth\":73}},\"defcomm\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"defcomm\",\"httpPortOpen\":true,\"ip\":\"53.9.2.0\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"DefComm\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"deltaone\",\"zb-def\",\"nova-med\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":88,\"hackDifficulty\":88,\"minDifficulty\":29,\"moneyAvailable\":874981532,\"moneyMax\":21874538300,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":863,\"serverGrowth\":54}},\"infocomm\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"infocomm\",\"httpPortOpen\":true,\"ip\":\"64.7.9.7\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"InfoComm\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"icarus\",\"run4theh111z\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":70,\"hackDifficulty\":70,\"minDifficulty\":23,\"moneyAvailable\":682755302,\"moneyMax\":17068882550,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":897,\"serverGrowth\":45}},\"helios\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"helios\",\"httpPortOpen\":true,\"ip\":\"75.5.7.5\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"beyond-man.lit\"],\"organizationName\":\"Helios Labs\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"microdyne\",\"4sigma\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":85,\"hackDifficulty\":85,\"minDifficulty\":28,\"moneyAvailable\":730244156,\"moneyMax\":18256103900,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":884,\"serverGrowth\":73}},\"vitalife\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"vitalife\",\"httpPortOpen\":true,\"ip\":\"96.1.7.9\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"A-Green-Tomorrow.lit\"],\"organizationName\":\"VitaLife\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tawait ns.share()\\n}\",\"filename\":\"/Remote/share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/Remote/share.js\",\"url\":\"blob:https://danielyxie.github.io/12841be5-1d0d-4251-8b3b-56ab99c85dfd\",\"moduleSequenceNumber\":368}],\"dependents\":[],\"ramUsage\":4,\"server\":\"vitalife\",\"moduleSequenceNumber\":249,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Return a formatted representation of the monetary amount using scale sympols (e.g. $6.50M)\\n * @param {number} num - The number to format\\n * @param {number=} maxSignificantFigures - (default: 6) The maximum significant figures you wish to see (e.g. 123, 12.3 and 1.23 all have 3 significant figures)\\n * @param {number=} maxDecimalPlaces - (default: 3) The maximum decimal places you wish to see, regardless of significant figures. (e.g. 12.3, 1.2, 0.1 all have 1 decimal)\\n **/\\nexport function formatMoney(num, maxSignificantFigures = 6, maxDecimalPlaces = 3) {\\n    let numberShort = formatNumberShort(num, maxSignificantFigures, maxDecimalPlaces);\\n    return num >= 0 ? \\\"$\\\" + numberShort : numberShort.replace(\\\"-\\\", \\\"-$\\\");\\n}\\n\\nconst symbols = [\\\"\\\", \\\"k\\\", \\\"m\\\", \\\"b\\\", \\\"t\\\", \\\"q\\\", \\\"Q\\\", \\\"s\\\", \\\"S\\\", \\\"o\\\", \\\"n\\\", \\\"e33\\\", \\\"e36\\\", \\\"e39\\\"];\\n\\n/**\\n * Return a formatted representation of the monetary amount using scale sympols (e.g. 6.50M) \\n * @param {number} num - The number to format\\n * @param {number=} maxSignificantFigures - (default: 6) The maximum significant figures you wish to see (e.g. 123, 12.3 and 1.23 all have 3 significant figures)\\n * @param {number=} maxDecimalPlaces - (default: 3) The maximum decimal places you wish to see, regardless of significant figures. (e.g. 12.3, 1.2, 0.1 all have 1 decimal)\\n **/\\nexport function formatNumberShort(num, maxSignificantFigures = 6, maxDecimalPlaces = 3) {\\n    for (var i = 0, sign = Math.sign(num), num = Math.abs(num); num >= 1000 && i < symbols.length; i++) num /= 1000;\\n    // TODO: A number like 9.999 once rounted to show 3 sig figs, will become 10.00, which is now 4 sig figs.\\n    return ((sign < 0) ? \\\"-\\\" : \\\"\\\") + num.toFixed(Math.max(0, Math.min(maxDecimalPlaces, maxSignificantFigures - Math.floor(1 + Math.log10(num))))) + symbols[i];\\n}\\n\\n/** Convert a shortened number back into a value */\\nexport function parseShortNumber(text = \\\"0\\\") {\\n    let parsed = Number(text);\\n    if (!isNaN(parsed)) return parsed;\\n    for (const sym of symbols.slice(1))\\n        if (text.toLowerCase().endsWith(sym))\\n            return Number.parseFloat(text.slice(0, text.length - sym.length)) * Math.pow(10, 3 * symbols.indexOf(sym));\\n    return Number.NaN;\\n}\\n\\n/**\\n * Return a number formatted with the specified number of significatnt figures or decimal places, whichever is more limiting.\\n * @param {number} num - The number to format\\n * @param {number=} minSignificantFigures - (default: 6) The minimum significant figures you wish to see (e.g. 123, 12.3 and 1.23 all have 3 significant figures)\\n * @param {number=} minDecimalPlaces - (default: 3) The minimum decimal places you wish to see, regardless of significant figures. (e.g. 12.3, 1.2, 0.1 all have 1 decimal)\\n **/\\nexport function formatNumber(num, minSignificantFigures = 3, minDecimalPlaces = 1) {\\n    return num == 0.0 ? num : num.toFixed(Math.max(minDecimalPlaces, Math.max(0, minSignificantFigures - Math.ceil(Math.log10(num)))));\\n}\\n\\n/** Formats some RAM amount as a round number of GB with thousands separators e.g. `1,028 GB` */\\nexport function formatRam(num) { return `${Math.round(num).toLocaleString()} GB`; }\\n\\n/** Return a datatime in ISO format */\\nexport function formatDateTime(datetime) { return datetime.toISOString(); }\\n\\n/** Format a duration (in milliseconds) as e.g. '1h 21m 6s' for big durations or e.g '12.5s' / '23ms' for small durations */\\nexport function formatDuration(duration) {\\n    if (duration < 1000) return `${duration.toFixed(0)}ms`\\n    const portions = [];\\n    const msInHour = 1000 * 60 * 60;\\n    const hours = Math.trunc(duration / msInHour);\\n    if (hours > 0) {\\n        portions.push(hours + 'h');\\n        duration -= (hours * msInHour);\\n    }\\n    const msInMinute = 1000 * 60;\\n    const minutes = Math.trunc(duration / msInMinute);\\n    if (minutes > 0) {\\n        portions.push(minutes + 'm');\\n        duration -= (minutes * msInMinute);\\n    }\\n    let seconds = (duration / 1000.0)\\n    // Include millisecond precision if we're on the order of seconds\\n    seconds = (hours == 0 && minutes == 0) ? seconds.toPrecision(3) : seconds.toFixed(0);\\n    if (seconds > 0) {\\n        portions.push(seconds + 's');\\n        duration -= (minutes * 1000);\\n    }\\n    return portions.join(' ');\\n}\\n\\n/** Generate a hashCode for a string that is pretty unique most of the time */\\nexport function hashCode(s) { return s.split(\\\"\\\").reduce(function (a, b) { a = ((a << 5) - a) + b.charCodeAt(0); return a & a }, 0); }\\n\\n/** @param {NS} ns **/\\nexport function disableLogs(ns, listOfLogs) { ['disableLog'].concat(...listOfLogs).forEach(log => checkNsInstance(ns, '\\\"disableLogs\\\"').disableLog(log)); }\\n\\n/** Joins all arguments as components in a path, e.g. pathJoin(\\\"foo\\\", \\\"bar\\\", \\\"/baz\\\") = \\\"foo/bar/baz\\\" **/\\nexport function pathJoin(...args) {\\n    return args.filter(s => !!s).join('/').replace(/\\\\/\\\\/+/g, '/');\\n}\\n\\n/** Gets the path for the given local file, taking into account optional subfolder relocation via git-pull.js **/\\nexport function getFilePath(file) {\\n    const subfolder = '';  // git-pull.js optionally modifies this when downloading\\n    return pathJoin(subfolder, file);\\n}\\n\\n// FUNCTIONS THAT PROVIDE ALTERNATIVE IMPLEMENTATIONS TO EXPENSIVE NS FUNCTIONS\\n// VARIATIONS ON NS.RUN\\n\\n/** @param {NS} ns\\n *  Use where a function is required to run a script and you have already referenced ns.run in your script **/\\nexport function getFnRunViaNsRun(ns) { return checkNsInstance(ns, '\\\"getFnRunViaNsRun\\\"').run; }\\n\\n/** @param {NS} ns\\n *  Use where a function is required to run a script and you have already referenced ns.exec in your script **/\\nexport function getFnRunViaNsExec(ns, host = \\\"home\\\") {\\n    checkNsInstance(ns, '\\\"getFnRunViaNsExec\\\"');\\n    return function (scriptPath, ...args) { return ns.exec(scriptPath, host, ...args); }\\n}\\n// VARIATIONS ON NS.ISRUNNING\\n\\n/** @param {NS} ns\\n *  Use where a function is required to run a script and you have already referenced ns.run in your script  */\\nexport function getFnIsAliveViaNsIsRunning(ns) { return checkNsInstance(ns, '\\\"getFnIsAliveViaNsIsRunning\\\"').isRunning; }\\n\\n/** @param {NS} ns\\n *  Use where a function is required to run a script and you have already referenced ns.exec in your script  */\\nexport function getFnIsAliveViaNsPs(ns) {\\n    checkNsInstance(ns, '\\\"getFnIsAliveViaNsPs\\\"');\\n    return function (pid, host) { return ns.ps(host).some(process => process.pid === pid); }\\n}\\n\\n/**\\n * Retrieve the result of an ns command by executing it in a temporary .js script, writing the result to a file, then shuting it down\\n * Importing incurs a maximum of 1.1 GB RAM (0 GB for ns.read, 1 GB for ns.run, 0.1 GB for ns.isRunning).\\n * Has the capacity to retry if there is a failure (e.g. due to lack of RAM available). Not recommended for performance-critical code.\\n * @param {NS} ns - The nestcript instance passed to your script's main entry point\\n * @param {string} command - The ns command that should be invoked to get the desired data (e.g. \\\"ns.getServer('home')\\\" )\\n * @param {string=} fName - (default \\\"/Temp/{commandhash}-data.txt\\\") The name of the file to which data will be written to disk by a temporary process\\n * @param {bool=} verbose - (default false) If set to true, pid and result of command are logged.\\n **/\\nexport async function getNsDataThroughFile(ns, command, fName, verbose = false, maxRetries = 5, retryDelayMs = 50) {\\n    checkNsInstance(ns, '\\\"getNsDataThroughFile\\\"');\\n    if (!verbose) disableLogs(ns, ['run', 'isRunning']);\\n    return await getNsDataThroughFile_Custom(ns, ns.run, ns.isRunning, command, fName, verbose, maxRetries, retryDelayMs);\\n}\\n\\n/**\\n * An advanced version of getNsDataThroughFile that lets you pass your own \\\"fnRun\\\" and \\\"fnIsAlive\\\" implementations to reduce RAM requirements\\n * Importing incurs no RAM (now that ns.read is free) plus whatever fnRun / fnIsAlive you provide it\\n * Has the capacity to retry if there is a failure (e.g. due to lack of RAM available). Not recommended for performance-critical code.\\n * @param {NS} ns - The nestcript instance passed to your script's main entry point\\n * @param {function} fnRun - A single-argument function used to start the new sript, e.g. `ns.run` or `(f,...args) => ns.exec(f, \\\"home\\\", ...args)`\\n * @param {function} fnIsAlive - A single-argument function used to start the new sript, e.g. `ns.isRunning` or `pid => ns.ps(\\\"home\\\").some(process => process.pid === pid)`\\n **/\\nexport async function getNsDataThroughFile_Custom(ns, fnRun, fnIsAlive, command, fName, verbose = false, maxRetries = 5, retryDelayMs = 50) {\\n    checkNsInstance(ns, '\\\"getNsDataThroughFile_Custom\\\"');\\n    if (!verbose) disableLogs(ns, ['read']);\\n    const commandHash = hashCode(command);\\n    fName = fName || `/Temp/${commandHash}-data.txt`;\\n    const fNameCommand = (fName || `/Temp/${commandHash}-command`) + '.js'\\n    // Prepare a command that will write out a new file containing the results of the command\\n    // unless it already exists with the same contents (saves time/ram to check first)\\n    // If an error occurs, it will write an empty file to avoid old results being misread.\\n    const commandToFile = `let result = \\\"\\\"; try { result = JSON.stringify(${command}); } catch { }\\n        if (ns.read(\\\"${fName}\\\") != result) await ns.write(\\\"${fName}\\\", result, 'w')`;\\n    // Run the command with auto-retries if it fails\\n    const pid = await runCommand_Custom(ns, fnRun, commandToFile, fNameCommand, false, maxRetries, retryDelayMs);\\n    // Wait for the process to complete\\n    await waitForProcessToComplete_Custom(ns, fnIsAlive, pid, verbose);\\n    if (verbose) ns.print(`Process ${pid} is done. Reading the contents of ${fName}...`);\\n    // Read the file, with auto-retries if it fails\\n    const fileData = await autoRetry(ns, () => ns.read(fName), f => f !== undefined && f !== \\\"\\\",\\n        () => `ns.read('${fName}') somehow returned undefined or an empty string`,\\n        maxRetries, retryDelayMs, undefined, verbose);\\n    if (verbose) ns.print(`Read the following data for command ${command}:\\\\n${fileData}`);\\n    return JSON.parse(fileData); // Deserialize it back into an object/array and return\\n}\\n\\n/** Evaluate an arbitrary ns command by writing it to a new script and then running or executing it.\\n * @param {NS} ns - The nestcript instance passed to your script's main entry point\\n * @param {string} command - The ns command that should be invoked to get the desired data (e.g. \\\"ns.getServer('home')\\\" )\\n * @param {string=} fileName - (default \\\"/Temp/{commandhash}-data.txt\\\") The name of the file to which data will be written to disk by a temporary process\\n * @param {bool=} verbose - (default false) If set to true, the evaluation result of the command is printed to the terminal\\n * @param {...args} args - args to be passed in as arguments to command being run as a new script.\\n */\\nexport async function runCommand(ns, command, fileName, verbose = false, maxRetries = 5, retryDelayMs = 50, ...args) {\\n    checkNsInstance(ns, '\\\"runCommand\\\"');\\n    if (!verbose) disableLogs(ns, ['run', 'sleep']);\\n    return await runCommand_Custom(ns, ns.run, command, fileName, verbose, maxRetries, retryDelayMs, ...args);\\n}\\n\\n/**\\n * An advanced version of runCommand that lets you pass your own \\\"isAlive\\\" test to reduce RAM requirements (e.g. to avoid referencing ns.isRunning)\\n * Importing incurs 0 GB RAM (assuming fnRun, fnWrite are implemented using another ns function you already reference elsewhere like ns.exec)\\n * @param {NS} ns - The nestcript instance passed to your script's main entry point\\n * @param {function} fnRun - A single-argument function used to start the new sript, e.g. `ns.run` or `(f,...args) => ns.exec(f, \\\"home\\\", ...args)`\\n **/\\nexport async function runCommand_Custom(ns, fnRun, command, fileName, verbose = false, maxRetries = 5, retryDelayMs = 50, ...args) {\\n    checkNsInstance(ns, '\\\"runCommand_Custom\\\"');\\n    let script = `import { formatMoney, formatNumberShort, formatDuration, parseShortNumber, scanAllServers } fr` + `om '${getFilePath('helpers.js')}'\\\\n` +\\n        `export async function main(ns) { try { ` +\\n        (verbose ? `let output = ${command}; ns.tprint(output)` : command) +\\n        `; } catch(err) { ns.tprint(String(err)); throw(err); } }`;\\n    fileName = fileName || `/Temp/${hashCode(command)}-command.js`;\\n    // To improve performance and save on garbage collection, we can skip writing this exact same script was previously written (common for repeatedly-queried data)\\n    if (ns.read(fileName) != script) await ns.write(fileName, script, \\\"w\\\");\\n    return await autoRetry(ns, () => fnRun(fileName, ...args), temp_pid => temp_pid !== 0,\\n        () => `Run command returned no pid. Destination: ${fileName} Command: ${command}\\\\nEnsure you have sufficient free RAM to run this temporary script.`,\\n        maxRetries, retryDelayMs, undefined, verbose);\\n}\\n\\n/**\\n * Wait for a process id to complete running\\n * Importing incurs a maximum of 0.1 GB RAM (for ns.isRunning) \\n * @param {NS} ns - The nestcript instance passed to your script's main entry point\\n * @param {int} pid - The process id to monitor\\n * @param {bool=} verbose - (default false) If set to true, pid and result of command are logged.\\n **/\\nexport async function waitForProcessToComplete(ns, pid, verbose) {\\n    checkNsInstance(ns, '\\\"waitForProcessToComplete\\\"');\\n    if (!verbose) disableLogs(ns, ['isRunning']);\\n    return await waitForProcessToComplete_Custom(ns, ns.isRunning, pid, verbose);\\n}\\n/**\\n * An advanced version of waitForProcessToComplete that lets you pass your own \\\"isAlive\\\" test to reduce RAM requirements (e.g. to avoid referencing ns.isRunning)\\n * Importing incurs 0 GB RAM (assuming fnIsAlive is implemented using another ns function you already reference elsewhere like ns.ps) \\n * @param {NS} ns - The nestcript instance passed to your script's main entry point\\n * @param {function} fnIsAlive - A single-argument function used to start the new sript, e.g. `ns.isRunning` or `pid => ns.ps(\\\"home\\\").some(process => process.pid === pid)`\\n **/\\nexport async function waitForProcessToComplete_Custom(ns, fnIsAlive, pid, verbose) {\\n    checkNsInstance(ns, '\\\"waitForProcessToComplete_Custom\\\"');\\n    if (!verbose) disableLogs(ns, ['sleep']);\\n    // Wait for the PID to stop running (cheaper than e.g. deleting (rm) a possibly pre-existing file and waiting for it to be recreated)\\n    for (var retries = 0; retries < 1000; retries++) {\\n        if (!fnIsAlive(pid)) break; // Script is done running\\n        if (verbose && retries % 100 === 0) ns.print(`Waiting for pid ${pid} to complete... (${retries})`);\\n        await ns.sleep(10);\\n    }\\n    // Make sure that the process has shut down and we haven't just stopped retrying\\n    if (fnIsAlive(pid)) {\\n        let errorMessage = `run-command pid ${pid} is running much longer than expected. Max retries exceeded.`;\\n        ns.print(errorMessage);\\n        throw errorMessage;\\n    }\\n}\\n\\n/** Helper to retry something that failed temporarily (can happen when e.g. we temporarily don't have enough RAM to run)\\n * @param {NS} ns - The nestcript instance passed to your script's main entry point */\\nexport async function autoRetry(ns, fnFunctionThatMayFail, fnSuccessCondition, errorContext = \\\"Success condition not met\\\",\\n    maxRetries = 5, initialRetryDelayMs = 50, backoffRate = 3, verbose = false) {\\n    checkNsInstance(ns, '\\\"autoRetry\\\"');\\n    let retryDelayMs = initialRetryDelayMs;\\n    while (maxRetries-- > 0) {\\n        try {\\n            const result = await fnFunctionThatMayFail()\\n            if (!fnSuccessCondition(result)) throw typeof errorContext === 'string' ? errorContext : errorContext();\\n            return result;\\n        }\\n        catch (error) {\\n            const fatal = maxRetries === 0;\\n            const errorLog = `${fatal ? 'FAIL' : 'WARN'}: (${maxRetries} retries remaining): ${String(error)}`\\n            log(ns, errorLog, fatal, !verbose ? undefined : (fatal ? 'error' : 'warning'))\\n            if (fatal) throw error;\\n            await ns.sleep(retryDelayMs);\\n            retryDelayMs *= backoffRate;\\n        }\\n    }\\n}\\n\\n/** Helper to log a message, and optionally also tprint it and toast it\\n * @param {NS} ns - The nestcript instance passed to your script's main entry point */\\nexport function log(ns, message = \\\"\\\", alsoPrintToTerminal = false, toastStyle = \\\"\\\", maxToastLength = 100) {\\n    checkNsInstance(ns, '\\\"log\\\"');\\n    ns.print(message);\\n    if (alsoPrintToTerminal) ns.tprint(message);\\n    if (toastStyle) ns.toast(message.length <= maxToastLength ? message : message.substring(0, maxToastLength - 3) + \\\"...\\\", toastStyle);\\n    return message;\\n}\\n\\n/** Helper to get a list of all hostnames on the network\\n * @param {NS} ns - The nestcript instance passed to your script's main entry point */\\nexport function scanAllServers(ns) {\\n    checkNsInstance(ns, '\\\"scanAllServers\\\"');\\n    let discoveredHosts = []; // Hosts (a.k.a. servers) we have scanned\\n    let hostsToScan = [\\\"home\\\"]; // Hosts we know about, but have no yet scanned\\n    let infiniteLoopProtection = 9999; // In case you mess with this code, this should save you from getting stuck\\n    while (hostsToScan.length > 0 && infiniteLoopProtection-- > 0) { // Loop until the list of hosts to scan is empty\\n        let hostName = hostsToScan.pop(); // Get the next host to be scanned\\n        for (const connectedHost of ns.scan(hostName)) // \\\"scan\\\" (list all hosts connected to this one)\\n            if (!discoveredHosts.includes(connectedHost)) // If we haven't already scanned this host\\n                hostsToScan.push(connectedHost); // Add it to the queue of hosts to be scanned\\n        discoveredHosts.push(hostName); // Mark this host as \\\"scanned\\\"\\n    }\\n    return discoveredHosts; // The list of scanned hosts should now be the set of all hosts in the game!\\n}\\n\\n/** @param {NS} ns \\n * Get a dictionary of active source files, taking into account the current active bitnode as well. **/\\nexport async function getActiveSourceFiles(ns) {\\n    return await getActiveSourceFiles_Custom(ns, getNsDataThroughFile);\\n}\\n\\n/** @param {NS} ns \\n * getActiveSourceFiles Helper that allows the user to pass in their chosen implementation of getNsDataThroughFile to minimize RAM usage **/\\nexport async function getActiveSourceFiles_Custom(ns, fnGetNsDataThroughFile) {\\n    checkNsInstance(ns, '\\\"getActiveSourceFiles\\\"');\\n    let tempFile = '/Temp/owned-source-files.txt';\\n    // Find out what source files the user has unlocked\\n    let dictSourceFiles;\\n    try { await fnGetNsDataThroughFile(ns, `Object.fromEntries(ns.getOwnedSourceFiles().map(sf => [sf.n, sf.lvl]))`, tempFile); } catch { }\\n    if (!dictSourceFiles) { // Bit of a hack, but if RAM is so low that this fails, we can fallback to using an older version of this file, and even assuming we have no source files.\\n        dictSourceFiles = ns.read(tempFile)\\n        dictSourceFiles = dictSourceFiles ? JSON.parse(dictSourceFiles) : {};\\n    }\\n    // If the user is currently in a given bitnode, they will have its features unlocked\\n    dictSourceFiles[(await fnGetNsDataThroughFile(ns, 'ns.getPlayer()', '/Temp/player-info.txt')).bitNodeN] = 3;\\n    return dictSourceFiles;\\n}\\n\\n/** @param {NS} ns \\n * Return bitnode multiplers, or null if they cannot be accessed. **/\\nexport async function tryGetBitNodeMultipliers(ns) {\\n    return await tryGetBitNodeMultipliers_Custom(ns, getNsDataThroughFile);\\n}\\n\\n/** @param {NS} ns\\n * tryGetBitNodeMultipliers Helper that allows the user to pass in their chosen implementation of getNsDataThroughFile to minimize RAM usage **/\\nexport async function tryGetBitNodeMultipliers_Custom(ns, fnGetNsDataThroughFile) {\\n    checkNsInstance(ns, '\\\"tryGetBitNodeMultipliers\\\"');\\n    let canGetBitNodeMultipliers = false;\\n    try { canGetBitNodeMultipliers = 5 in (await getActiveSourceFiles_Custom(ns, fnGetNsDataThroughFile)); } catch { }\\n    if (!canGetBitNodeMultipliers) return null;\\n    try { return await fnGetNsDataThroughFile(ns, 'ns.getBitNodeMultipliers()', '/Temp/bitnode-multipliers.txt'); } catch { }\\n    return null;\\n}\\n\\n/** @param {NS} ns \\n * Returns a helpful error message if we forgot to pass the ns instance to a function */\\nexport function checkNsInstance(ns, fnName = \\\"this function\\\") { if (!ns.print) throw `The first argument to ${fnName} should be a 'ns' instance.`; return ns; }\",\"filename\":\"helpers.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4.4,\"server\":\"vitalife\",\"moduleSequenceNumber\":250,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"run\",\"cost\":1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"isRunning\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"ps\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}}],\"serversOnNetwork\":[\"titan-labs\",\"omnitek\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":90,\"hackDifficulty\":90,\"minDifficulty\":30,\"moneyAvailable\":793260027,\"moneyMax\":19831500675,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":806,\"serverGrowth\":62}},\"icarus\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"icarus\",\"httpPortOpen\":true,\"ip\":\"48.0.4.4\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Icarus Microsystems\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"deltaone\",\"infocomm\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":88,\"hackDifficulty\":88,\"minDifficulty\":29,\"moneyAvailable\":949132053,\"moneyMax\":23728301325,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":892,\"serverGrowth\":93}},\"univ-energy\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"univ-energy\",\"httpPortOpen\":true,\"ip\":\"81.5.9.1\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[],\"organizationName\":\"Universal Energy\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"deltaone\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":88,\"hackDifficulty\":88,\"minDifficulty\":29,\"moneyAvailable\":1156957135,\"moneyMax\":28923928375,\"numOpenPortsRequired\":4,\"openPortCount\":5,\"requiredHackingSkill\":829,\"serverGrowth\":82}},\"titan-labs\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"titan-labs\",\"httpPortOpen\":true,\"ip\":\"80.7.2.5\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"coded-intelligence.lit\"],\"organizationName\":\"Titan Laboratories\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"zb-def\",\"vitalife\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":75,\"hackDifficulty\":75,\"minDifficulty\":25,\"moneyAvailable\":762452063,\"moneyMax\":19061301575,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":819,\"serverGrowth\":80}},\"microdyne\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"microdyne\",\"httpPortOpen\":true,\"ip\":\"56.9.4.8\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"synthetic-muscles.lit\"],\"organizationName\":\"Microdyne Technologies\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"nova-med\",\"stormtech\",\"helios\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":66,\"hackDifficulty\":66,\"minDifficulty\":22,\"moneyAvailable\":516191599,\"moneyMax\":12904789975,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":859,\"serverGrowth\":79}},\"taiyang-digital\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"taiyang-digital\",\"httpPortOpen\":true,\"ip\":\"6.4.3.8\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"A-Green-Tomorrow.lit\",\"brighter-than-the-sun.lit\"],\"organizationName\":\"Taiyang Digital\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"solaris\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":70,\"hackDifficulty\":70,\"minDifficulty\":23,\"moneyAvailable\":823376249,\"moneyMax\":20584406225,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":871,\"serverGrowth\":79}},\"galactic-cyber\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"galactic-cyber\",\"httpPortOpen\":true,\"ip\":\"92.6.9.0\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Galactic Cybersystems\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"millenium-fitness\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":62,\"hackDifficulty\":62,\"minDifficulty\":21,\"moneyAvailable\":837944858,\"moneyMax\":20948621450,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":853,\"serverGrowth\":83}},\"aerocorp\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"aerocorp\",\"httpPortOpen\":true,\"ip\":\"85.9.1.1\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"man-and-machine.lit\"],\"organizationName\":\"AeroCorp\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"lexo-corp\",\"omnia\",\"unitalife\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":84,\"hackDifficulty\":84,\"minDifficulty\":28,\"moneyAvailable\":1071299365,\"moneyMax\":26782484125,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":888,\"serverGrowth\":58}},\"omnia\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"omnia\",\"httpPortOpen\":true,\"ip\":\"94.3.7.8\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"history-of-synthoids.lit\"],\"organizationName\":\"Omnia Cybersystems\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"aerocorp\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":95,\"hackDifficulty\":95,\"minDifficulty\":32,\"moneyAvailable\":910012751,\"moneyMax\":22750318775,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":880,\"serverGrowth\":68}},\"zb-def\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"zb-def\",\"httpPortOpen\":true,\"ip\":\"22.6.2.2\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"synthetic-muscles.lit\"],\"organizationName\":\"ZB Defense Industries\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"defcomm\",\"titan-labs\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":55,\"hackDifficulty\":55,\"minDifficulty\":18,\"moneyAvailable\":1001426499,\"moneyMax\":25035662475,\"numOpenPortsRequired\":4,\"openPortCount\":5,\"requiredHackingSkill\":791,\"serverGrowth\":75}},\"applied-energetics\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"applied-energetics\",\"httpPortOpen\":true,\"ip\":\"10.3.6.1\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Applied Energetics\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"nova-med\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":79,\"hackDifficulty\":79,\"minDifficulty\":26,\"moneyAvailable\":776990146,\"moneyMax\":19424753650,\"numOpenPortsRequired\":4,\"openPortCount\":5,\"requiredHackingSkill\":848,\"serverGrowth\":74}},\"solaris\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"solaris\",\"httpPortOpen\":true,\"ip\":\"53.3.5.0\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[\"A-Green-Tomorrow.lit\",\"the-failed-frontier.lit\"],\"organizationName\":\"Solaris Space Systems\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"unitalife\",\"taiyang-digital\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":74,\"hackDifficulty\":74,\"minDifficulty\":25,\"moneyAvailable\":773107644,\"moneyMax\":19327691100,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":849,\"serverGrowth\":76}},\"deltaone\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"deltaone\",\"httpPortOpen\":true,\"ip\":\"19.7.1.1\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"DeltaOne\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"global-pharm\",\"defcomm\",\"icarus\",\"univ-energy\",\"zeus-med\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":78,\"hackDifficulty\":78,\"minDifficulty\":26,\"moneyAvailable\":1648185335,\"moneyMax\":41204633375,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":810,\"serverGrowth\":70}},\"global-pharm\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"global-pharm\",\"httpPortOpen\":true,\"ip\":\"80.6.1.6\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"A-Green-Tomorrow.lit\"],\"organizationName\":\"Global Pharmaceuticals\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"alpha-ent\",\"deltaone\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":85,\"hackDifficulty\":85,\"minDifficulty\":28,\"moneyAvailable\":1657116535,\"moneyMax\":41427913375,\"numOpenPortsRequired\":4,\"openPortCount\":5,\"requiredHackingSkill\":849,\"serverGrowth\":80}},\"nova-med\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"nova-med\",\"httpPortOpen\":true,\"ip\":\"96.5.8.9\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Nova Medical\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"defcomm\",\"microdyne\",\"applied-energetics\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":72,\"hackDifficulty\":72,\"minDifficulty\":24,\"moneyAvailable\":1193974856,\"moneyMax\":29849371400,\"numOpenPortsRequired\":4,\"openPortCount\":5,\"requiredHackingSkill\":837,\"serverGrowth\":69}},\"zeus-med\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"zeus-med\",\"httpPortOpen\":true,\"ip\":\"9.3.6.3\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Zeus Medical\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"deltaone\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":81,\"hackDifficulty\":81,\"minDifficulty\":27,\"moneyAvailable\":1434687720,\"moneyMax\":35867193000,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":850,\"serverGrowth\":76}},\"unitalife\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"unitalife\",\"httpPortOpen\":true,\"ip\":\"88.8.2.6\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"UnitaLife Group\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"aerocorp\",\"solaris\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":71,\"hackDifficulty\":71,\"minDifficulty\":24,\"moneyAvailable\":1069000763,\"moneyMax\":26725019075,\"numOpenPortsRequired\":4,\"openPortCount\":5,\"requiredHackingSkill\":782,\"serverGrowth\":76}},\"lexo-corp\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"lexo-corp\",\"httpPortOpen\":true,\"ip\":\"29.5.2.2\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[],\"organizationName\":\"LexoCorp\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"I.I.I.I\",\"aerocorp\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":80,\"hackDifficulty\":80,\"minDifficulty\":27,\"moneyAvailable\":781741627,\"moneyMax\":19543540675,\"numOpenPortsRequired\":4,\"openPortCount\":5,\"requiredHackingSkill\":676,\"serverGrowth\":62}},\"rho-construction\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"rho-construction\",\"httpPortOpen\":true,\"ip\":\"31.9.6.2\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Rho Construction\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"syscore\",\"snap-fitness\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":42,\"hackDifficulty\":42,\"minDifficulty\":14,\"moneyAvailable\":535977323,\"moneyMax\":13399433075,\"numOpenPortsRequired\":3,\"openPortCount\":5,\"requiredHackingSkill\":512,\"serverGrowth\":48}},\"alpha-ent\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"alpha-ent\",\"httpPortOpen\":true,\"ip\":\"92.8.5.5\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"sector-12-crime.lit\"],\"organizationName\":\"Alpha Enterprises\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"zb-institute\",\"global-pharm\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":68,\"hackDifficulty\":68,\"minDifficulty\":23,\"moneyAvailable\":749624480,\"moneyMax\":18740612000,\"numOpenPortsRequired\":4,\"openPortCount\":5,\"requiredHackingSkill\":513,\"serverGrowth\":56}},\"aevum-police\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"aevum-police\",\"httpPortOpen\":true,\"ip\":\"52.1.5.7\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[],\"organizationName\":\"Aevum Police Headquarters\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"syscore\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":71,\"hackDifficulty\":71,\"minDifficulty\":24,\"moneyAvailable\":244856590,\"moneyMax\":6121414750,\"numOpenPortsRequired\":4,\"openPortCount\":5,\"requiredHackingSkill\":436,\"serverGrowth\":44}},\"rothman-uni\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"rothman-uni\",\"httpPortOpen\":true,\"ip\":\"41.2.3.1\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"secret-societies.lit\",\"the-failed-frontier.lit\",\"tensions-in-tech-race.lit\"],\"organizationName\":\"Rothman University\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"netlink\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":51,\"hackDifficulty\":51,\"minDifficulty\":17,\"moneyAvailable\":188700877,\"moneyMax\":4717521925,\"numOpenPortsRequired\":3,\"openPortCount\":5,\"requiredHackingSkill\":426,\"serverGrowth\":41}},\"zb-institute\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"zb-institute\",\"httpPortOpen\":true,\"ip\":\"37.9.8.4\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[],\"organizationName\":\"ZB Institute of Technology\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"netlink\",\"alpha-ent\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":83,\"hackDifficulty\":83,\"minDifficulty\":28,\"moneyAvailable\":921290116,\"moneyMax\":23032252900,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":766,\"serverGrowth\":85}},\"summit-uni\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"summit-uni\",\"httpPortOpen\":true,\"ip\":\"59.5.9.2\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"secret-societies.lit\",\"the-failed-frontier.lit\",\"synthetic-muscles.lit\"],\"organizationName\":\"Summit University\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"netlink\",\"millenium-fitness\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":54,\"hackDifficulty\":54,\"minDifficulty\":18,\"moneyAvailable\":343567177,\"moneyMax\":8589179425,\"numOpenPortsRequired\":3,\"openPortCount\":5,\"requiredHackingSkill\":458,\"serverGrowth\":55}},\"syscore\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"syscore\",\"httpPortOpen\":true,\"ip\":\"12.6.5.1\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"SysCore Securities\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"crush-fitness\",\"rho-construction\",\"aevum-police\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":74,\"hackDifficulty\":74,\"minDifficulty\":25,\"moneyAvailable\":418053170,\"moneyMax\":10451329250,\"numOpenPortsRequired\":4,\"openPortCount\":5,\"requiredHackingSkill\":634,\"serverGrowth\":69}},\"catalyst\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"catalyst\",\"httpPortOpen\":true,\"ip\":\"21.6.5.5\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"tensions-in-tech-race.lit\"],\"organizationName\":\"Catalyst Ventures\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"crush-fitness\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":64,\"hackDifficulty\":64,\"minDifficulty\":21,\"moneyAvailable\":539938261,\"moneyMax\":13498456525,\"numOpenPortsRequired\":3,\"openPortCount\":5,\"requiredHackingSkill\":450,\"serverGrowth\":36}},\"the-hub\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"the-hub\",\"httpPortOpen\":false,\"ip\":\"71.7.1.4\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"The Hub\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"omega-net\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":43,\"hackDifficulty\":43,\"minDifficulty\":14,\"moneyAvailable\":176211529,\"moneyMax\":4405288225,\"numOpenPortsRequired\":2,\"openPortCount\":2,\"requiredHackingSkill\":279,\"serverGrowth\":55}},\"comptek\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"comptek\",\"httpPortOpen\":true,\"ip\":\"32.5.6.3\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"man-and-machine.lit\"],\"organizationName\":\"CompuTek\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"phantasy\",\"I.I.I.I\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":64,\"hackDifficulty\":64,\"minDifficulty\":21,\"moneyAvailable\":221375163,\"moneyMax\":5534379075,\"numOpenPortsRequired\":3,\"openPortCount\":5,\"requiredHackingSkill\":363,\"serverGrowth\":54}},\"netlink\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"netlink\",\"httpPortOpen\":true,\"ip\":\"53.5.4.9\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"simulated-reality.lit\"],\"organizationName\":\"NetLink Technologies\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"silver-helix\",\"rothman-uni\",\"zb-institute\",\"summit-uni\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":61,\"hackDifficulty\":61,\"minDifficulty\":20,\"moneyAvailable\":275000000,\"moneyMax\":6875000000,\"numOpenPortsRequired\":3,\"openPortCount\":5,\"requiredHackingSkill\":415,\"serverGrowth\":63}},\"johnson-ortho\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"johnson-ortho\",\"httpPortOpen\":false,\"ip\":\"86.5.4.6\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Johnson Orthopedics\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"neo-net\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":46,\"hackDifficulty\":46,\"minDifficulty\":15,\"moneyAvailable\":74294869,\"moneyMax\":1857371725,\"numOpenPortsRequired\":2,\"openPortCount\":2,\"requiredHackingSkill\":267,\"serverGrowth\":53}},\"n00dles\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"n00dles\",\"httpPortOpen\":false,\"ip\":\"88.0.5.8\",\"isConnectedTo\":false,\"maxRam\":4,\"messages\":[],\"organizationName\":\"Noodle Bar\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tawait ns.share()\\n}\",\"filename\":\"/Remote/share.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/Remote/share.js\",\"url\":\"blob:https://danielyxie.github.io/fa75d8cf-0fca-40f5-8ec6-23a943b31760\",\"moduleSequenceNumber\":400}],\"dependents\":[],\"ramUsage\":4,\"server\":\"n00dles\",\"moduleSequenceNumber\":400,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Return a formatted representation of the monetary amount using scale sympols (e.g. $6.50M)\\n * @param {number} num - The number to format\\n * @param {number=} maxSignificantFigures - (default: 6) The maximum significant figures you wish to see (e.g. 123, 12.3 and 1.23 all have 3 significant figures)\\n * @param {number=} maxDecimalPlaces - (default: 3) The maximum decimal places you wish to see, regardless of significant figures. (e.g. 12.3, 1.2, 0.1 all have 1 decimal)\\n **/\\nexport function formatMoney(num, maxSignificantFigures = 6, maxDecimalPlaces = 3) {\\n    let numberShort = formatNumberShort(num, maxSignificantFigures, maxDecimalPlaces);\\n    return num >= 0 ? \\\"$\\\" + numberShort : numberShort.replace(\\\"-\\\", \\\"-$\\\");\\n}\\n\\nconst symbols = [\\\"\\\", \\\"k\\\", \\\"m\\\", \\\"b\\\", \\\"t\\\", \\\"q\\\", \\\"Q\\\", \\\"s\\\", \\\"S\\\", \\\"o\\\", \\\"n\\\", \\\"e33\\\", \\\"e36\\\", \\\"e39\\\"];\\n\\n/**\\n * Return a formatted representation of the monetary amount using scale sympols (e.g. 6.50M) \\n * @param {number} num - The number to format\\n * @param {number=} maxSignificantFigures - (default: 6) The maximum significant figures you wish to see (e.g. 123, 12.3 and 1.23 all have 3 significant figures)\\n * @param {number=} maxDecimalPlaces - (default: 3) The maximum decimal places you wish to see, regardless of significant figures. (e.g. 12.3, 1.2, 0.1 all have 1 decimal)\\n **/\\nexport function formatNumberShort(num, maxSignificantFigures = 6, maxDecimalPlaces = 3) {\\n    for (var i = 0, sign = Math.sign(num), num = Math.abs(num); num >= 1000 && i < symbols.length; i++) num /= 1000;\\n    // TODO: A number like 9.999 once rounted to show 3 sig figs, will become 10.00, which is now 4 sig figs.\\n    return ((sign < 0) ? \\\"-\\\" : \\\"\\\") + num.toFixed(Math.max(0, Math.min(maxDecimalPlaces, maxSignificantFigures - Math.floor(1 + Math.log10(num))))) + symbols[i];\\n}\\n\\n/** Convert a shortened number back into a value */\\nexport function parseShortNumber(text = \\\"0\\\") {\\n    let parsed = Number(text);\\n    if (!isNaN(parsed)) return parsed;\\n    for (const sym of symbols.slice(1))\\n        if (text.toLowerCase().endsWith(sym))\\n            return Number.parseFloat(text.slice(0, text.length - sym.length)) * Math.pow(10, 3 * symbols.indexOf(sym));\\n    return Number.NaN;\\n}\\n\\n/**\\n * Return a number formatted with the specified number of significatnt figures or decimal places, whichever is more limiting.\\n * @param {number} num - The number to format\\n * @param {number=} minSignificantFigures - (default: 6) The minimum significant figures you wish to see (e.g. 123, 12.3 and 1.23 all have 3 significant figures)\\n * @param {number=} minDecimalPlaces - (default: 3) The minimum decimal places you wish to see, regardless of significant figures. (e.g. 12.3, 1.2, 0.1 all have 1 decimal)\\n **/\\nexport function formatNumber(num, minSignificantFigures = 3, minDecimalPlaces = 1) {\\n    return num == 0.0 ? num : num.toFixed(Math.max(minDecimalPlaces, Math.max(0, minSignificantFigures - Math.ceil(Math.log10(num)))));\\n}\\n\\n/** Formats some RAM amount as a round number of GB with thousands separators e.g. `1,028 GB` */\\nexport function formatRam(num) { return `${Math.round(num).toLocaleString()} GB`; }\\n\\n/** Return a datatime in ISO format */\\nexport function formatDateTime(datetime) { return datetime.toISOString(); }\\n\\n/** Format a duration (in milliseconds) as e.g. '1h 21m 6s' for big durations or e.g '12.5s' / '23ms' for small durations */\\nexport function formatDuration(duration) {\\n    if (duration < 1000) return `${duration.toFixed(0)}ms`\\n    const portions = [];\\n    const msInHour = 1000 * 60 * 60;\\n    const hours = Math.trunc(duration / msInHour);\\n    if (hours > 0) {\\n        portions.push(hours + 'h');\\n        duration -= (hours * msInHour);\\n    }\\n    const msInMinute = 1000 * 60;\\n    const minutes = Math.trunc(duration / msInMinute);\\n    if (minutes > 0) {\\n        portions.push(minutes + 'm');\\n        duration -= (minutes * msInMinute);\\n    }\\n    let seconds = (duration / 1000.0)\\n    // Include millisecond precision if we're on the order of seconds\\n    seconds = (hours == 0 && minutes == 0) ? seconds.toPrecision(3) : seconds.toFixed(0);\\n    if (seconds > 0) {\\n        portions.push(seconds + 's');\\n        duration -= (minutes * 1000);\\n    }\\n    return portions.join(' ');\\n}\\n\\n/** Generate a hashCode for a string that is pretty unique most of the time */\\nexport function hashCode(s) { return s.split(\\\"\\\").reduce(function (a, b) { a = ((a << 5) - a) + b.charCodeAt(0); return a & a }, 0); }\\n\\n/** @param {NS} ns **/\\nexport function disableLogs(ns, listOfLogs) { ['disableLog'].concat(...listOfLogs).forEach(log => checkNsInstance(ns, '\\\"disableLogs\\\"').disableLog(log)); }\\n\\n/** Joins all arguments as components in a path, e.g. pathJoin(\\\"foo\\\", \\\"bar\\\", \\\"/baz\\\") = \\\"foo/bar/baz\\\" **/\\nexport function pathJoin(...args) {\\n    return args.filter(s => !!s).join('/').replace(/\\\\/\\\\/+/g, '/');\\n}\\n\\n/** Gets the path for the given local file, taking into account optional subfolder relocation via git-pull.js **/\\nexport function getFilePath(file) {\\n    const subfolder = '';  // git-pull.js optionally modifies this when downloading\\n    return pathJoin(subfolder, file);\\n}\\n\\n// FUNCTIONS THAT PROVIDE ALTERNATIVE IMPLEMENTATIONS TO EXPENSIVE NS FUNCTIONS\\n// VARIATIONS ON NS.RUN\\n\\n/** @param {NS} ns\\n *  Use where a function is required to run a script and you have already referenced ns.run in your script **/\\nexport function getFnRunViaNsRun(ns) { return checkNsInstance(ns, '\\\"getFnRunViaNsRun\\\"').run; }\\n\\n/** @param {NS} ns\\n *  Use where a function is required to run a script and you have already referenced ns.exec in your script **/\\nexport function getFnRunViaNsExec(ns, host = \\\"home\\\") {\\n    checkNsInstance(ns, '\\\"getFnRunViaNsExec\\\"');\\n    return function (scriptPath, ...args) { return ns.exec(scriptPath, host, ...args); }\\n}\\n// VARIATIONS ON NS.ISRUNNING\\n\\n/** @param {NS} ns\\n *  Use where a function is required to run a script and you have already referenced ns.run in your script  */\\nexport function getFnIsAliveViaNsIsRunning(ns) { return checkNsInstance(ns, '\\\"getFnIsAliveViaNsIsRunning\\\"').isRunning; }\\n\\n/** @param {NS} ns\\n *  Use where a function is required to run a script and you have already referenced ns.exec in your script  */\\nexport function getFnIsAliveViaNsPs(ns) {\\n    checkNsInstance(ns, '\\\"getFnIsAliveViaNsPs\\\"');\\n    return function (pid, host) { return ns.ps(host).some(process => process.pid === pid); }\\n}\\n\\n/**\\n * Retrieve the result of an ns command by executing it in a temporary .js script, writing the result to a file, then shuting it down\\n * Importing incurs a maximum of 1.1 GB RAM (0 GB for ns.read, 1 GB for ns.run, 0.1 GB for ns.isRunning).\\n * Has the capacity to retry if there is a failure (e.g. due to lack of RAM available). Not recommended for performance-critical code.\\n * @param {NS} ns - The nestcript instance passed to your script's main entry point\\n * @param {string} command - The ns command that should be invoked to get the desired data (e.g. \\\"ns.getServer('home')\\\" )\\n * @param {string=} fName - (default \\\"/Temp/{commandhash}-data.txt\\\") The name of the file to which data will be written to disk by a temporary process\\n * @param {bool=} verbose - (default false) If set to true, pid and result of command are logged.\\n **/\\nexport async function getNsDataThroughFile(ns, command, fName, verbose = false, maxRetries = 5, retryDelayMs = 50) {\\n    checkNsInstance(ns, '\\\"getNsDataThroughFile\\\"');\\n    if (!verbose) disableLogs(ns, ['run', 'isRunning']);\\n    return await getNsDataThroughFile_Custom(ns, ns.run, ns.isRunning, command, fName, verbose, maxRetries, retryDelayMs);\\n}\\n\\n/**\\n * An advanced version of getNsDataThroughFile that lets you pass your own \\\"fnRun\\\" and \\\"fnIsAlive\\\" implementations to reduce RAM requirements\\n * Importing incurs no RAM (now that ns.read is free) plus whatever fnRun / fnIsAlive you provide it\\n * Has the capacity to retry if there is a failure (e.g. due to lack of RAM available). Not recommended for performance-critical code.\\n * @param {NS} ns - The nestcript instance passed to your script's main entry point\\n * @param {function} fnRun - A single-argument function used to start the new sript, e.g. `ns.run` or `(f,...args) => ns.exec(f, \\\"home\\\", ...args)`\\n * @param {function} fnIsAlive - A single-argument function used to start the new sript, e.g. `ns.isRunning` or `pid => ns.ps(\\\"home\\\").some(process => process.pid === pid)`\\n **/\\nexport async function getNsDataThroughFile_Custom(ns, fnRun, fnIsAlive, command, fName, verbose = false, maxRetries = 5, retryDelayMs = 50) {\\n    checkNsInstance(ns, '\\\"getNsDataThroughFile_Custom\\\"');\\n    if (!verbose) disableLogs(ns, ['read']);\\n    const commandHash = hashCode(command);\\n    fName = fName || `/Temp/${commandHash}-data.txt`;\\n    const fNameCommand = (fName || `/Temp/${commandHash}-command`) + '.js'\\n    // Prepare a command that will write out a new file containing the results of the command\\n    // unless it already exists with the same contents (saves time/ram to check first)\\n    // If an error occurs, it will write an empty file to avoid old results being misread.\\n    const commandToFile = `let result = \\\"\\\"; try { result = JSON.stringify(${command}); } catch { }\\n        if (ns.read(\\\"${fName}\\\") != result) await ns.write(\\\"${fName}\\\", result, 'w')`;\\n    // Run the command with auto-retries if it fails\\n    const pid = await runCommand_Custom(ns, fnRun, commandToFile, fNameCommand, false, maxRetries, retryDelayMs);\\n    // Wait for the process to complete\\n    await waitForProcessToComplete_Custom(ns, fnIsAlive, pid, verbose);\\n    if (verbose) ns.print(`Process ${pid} is done. Reading the contents of ${fName}...`);\\n    // Read the file, with auto-retries if it fails\\n    const fileData = await autoRetry(ns, () => ns.read(fName), f => f !== undefined && f !== \\\"\\\",\\n        () => `ns.read('${fName}') somehow returned undefined or an empty string`,\\n        maxRetries, retryDelayMs, undefined, verbose);\\n    if (verbose) ns.print(`Read the following data for command ${command}:\\\\n${fileData}`);\\n    return JSON.parse(fileData); // Deserialize it back into an object/array and return\\n}\\n\\n/** Evaluate an arbitrary ns command by writing it to a new script and then running or executing it.\\n * @param {NS} ns - The nestcript instance passed to your script's main entry point\\n * @param {string} command - The ns command that should be invoked to get the desired data (e.g. \\\"ns.getServer('home')\\\" )\\n * @param {string=} fileName - (default \\\"/Temp/{commandhash}-data.txt\\\") The name of the file to which data will be written to disk by a temporary process\\n * @param {bool=} verbose - (default false) If set to true, the evaluation result of the command is printed to the terminal\\n * @param {...args} args - args to be passed in as arguments to command being run as a new script.\\n */\\nexport async function runCommand(ns, command, fileName, verbose = false, maxRetries = 5, retryDelayMs = 50, ...args) {\\n    checkNsInstance(ns, '\\\"runCommand\\\"');\\n    if (!verbose) disableLogs(ns, ['run', 'sleep']);\\n    return await runCommand_Custom(ns, ns.run, command, fileName, verbose, maxRetries, retryDelayMs, ...args);\\n}\\n\\n/**\\n * An advanced version of runCommand that lets you pass your own \\\"isAlive\\\" test to reduce RAM requirements (e.g. to avoid referencing ns.isRunning)\\n * Importing incurs 0 GB RAM (assuming fnRun, fnWrite are implemented using another ns function you already reference elsewhere like ns.exec)\\n * @param {NS} ns - The nestcript instance passed to your script's main entry point\\n * @param {function} fnRun - A single-argument function used to start the new sript, e.g. `ns.run` or `(f,...args) => ns.exec(f, \\\"home\\\", ...args)`\\n **/\\nexport async function runCommand_Custom(ns, fnRun, command, fileName, verbose = false, maxRetries = 5, retryDelayMs = 50, ...args) {\\n    checkNsInstance(ns, '\\\"runCommand_Custom\\\"');\\n    let script = `import { formatMoney, formatNumberShort, formatDuration, parseShortNumber, scanAllServers } fr` + `om '${getFilePath('helpers.js')}'\\\\n` +\\n        `export async function main(ns) { try { ` +\\n        (verbose ? `let output = ${command}; ns.tprint(output)` : command) +\\n        `; } catch(err) { ns.tprint(String(err)); throw(err); } }`;\\n    fileName = fileName || `/Temp/${hashCode(command)}-command.js`;\\n    // To improve performance and save on garbage collection, we can skip writing this exact same script was previously written (common for repeatedly-queried data)\\n    if (ns.read(fileName) != script) await ns.write(fileName, script, \\\"w\\\");\\n    return await autoRetry(ns, () => fnRun(fileName, ...args), temp_pid => temp_pid !== 0,\\n        () => `Run command returned no pid. Destination: ${fileName} Command: ${command}\\\\nEnsure you have sufficient free RAM to run this temporary script.`,\\n        maxRetries, retryDelayMs, undefined, verbose);\\n}\\n\\n/**\\n * Wait for a process id to complete running\\n * Importing incurs a maximum of 0.1 GB RAM (for ns.isRunning) \\n * @param {NS} ns - The nestcript instance passed to your script's main entry point\\n * @param {int} pid - The process id to monitor\\n * @param {bool=} verbose - (default false) If set to true, pid and result of command are logged.\\n **/\\nexport async function waitForProcessToComplete(ns, pid, verbose) {\\n    checkNsInstance(ns, '\\\"waitForProcessToComplete\\\"');\\n    if (!verbose) disableLogs(ns, ['isRunning']);\\n    return await waitForProcessToComplete_Custom(ns, ns.isRunning, pid, verbose);\\n}\\n/**\\n * An advanced version of waitForProcessToComplete that lets you pass your own \\\"isAlive\\\" test to reduce RAM requirements (e.g. to avoid referencing ns.isRunning)\\n * Importing incurs 0 GB RAM (assuming fnIsAlive is implemented using another ns function you already reference elsewhere like ns.ps) \\n * @param {NS} ns - The nestcript instance passed to your script's main entry point\\n * @param {function} fnIsAlive - A single-argument function used to start the new sript, e.g. `ns.isRunning` or `pid => ns.ps(\\\"home\\\").some(process => process.pid === pid)`\\n **/\\nexport async function waitForProcessToComplete_Custom(ns, fnIsAlive, pid, verbose) {\\n    checkNsInstance(ns, '\\\"waitForProcessToComplete_Custom\\\"');\\n    if (!verbose) disableLogs(ns, ['sleep']);\\n    // Wait for the PID to stop running (cheaper than e.g. deleting (rm) a possibly pre-existing file and waiting for it to be recreated)\\n    for (var retries = 0; retries < 1000; retries++) {\\n        if (!fnIsAlive(pid)) break; // Script is done running\\n        if (verbose && retries % 100 === 0) ns.print(`Waiting for pid ${pid} to complete... (${retries})`);\\n        await ns.sleep(10);\\n    }\\n    // Make sure that the process has shut down and we haven't just stopped retrying\\n    if (fnIsAlive(pid)) {\\n        let errorMessage = `run-command pid ${pid} is running much longer than expected. Max retries exceeded.`;\\n        ns.print(errorMessage);\\n        throw errorMessage;\\n    }\\n}\\n\\n/** Helper to retry something that failed temporarily (can happen when e.g. we temporarily don't have enough RAM to run)\\n * @param {NS} ns - The nestcript instance passed to your script's main entry point */\\nexport async function autoRetry(ns, fnFunctionThatMayFail, fnSuccessCondition, errorContext = \\\"Success condition not met\\\",\\n    maxRetries = 5, initialRetryDelayMs = 50, backoffRate = 3, verbose = false) {\\n    checkNsInstance(ns, '\\\"autoRetry\\\"');\\n    let retryDelayMs = initialRetryDelayMs;\\n    while (maxRetries-- > 0) {\\n        try {\\n            const result = await fnFunctionThatMayFail()\\n            if (!fnSuccessCondition(result)) throw typeof errorContext === 'string' ? errorContext : errorContext();\\n            return result;\\n        }\\n        catch (error) {\\n            const fatal = maxRetries === 0;\\n            const errorLog = `${fatal ? 'FAIL' : 'WARN'}: (${maxRetries} retries remaining): ${String(error)}`\\n            log(ns, errorLog, fatal, !verbose ? undefined : (fatal ? 'error' : 'warning'))\\n            if (fatal) throw error;\\n            await ns.sleep(retryDelayMs);\\n            retryDelayMs *= backoffRate;\\n        }\\n    }\\n}\\n\\n/** Helper to log a message, and optionally also tprint it and toast it\\n * @param {NS} ns - The nestcript instance passed to your script's main entry point */\\nexport function log(ns, message = \\\"\\\", alsoPrintToTerminal = false, toastStyle = \\\"\\\", maxToastLength = 100) {\\n    checkNsInstance(ns, '\\\"log\\\"');\\n    ns.print(message);\\n    if (alsoPrintToTerminal) ns.tprint(message);\\n    if (toastStyle) ns.toast(message.length <= maxToastLength ? message : message.substring(0, maxToastLength - 3) + \\\"...\\\", toastStyle);\\n    return message;\\n}\\n\\n/** Helper to get a list of all hostnames on the network\\n * @param {NS} ns - The nestcript instance passed to your script's main entry point */\\nexport function scanAllServers(ns) {\\n    checkNsInstance(ns, '\\\"scanAllServers\\\"');\\n    let discoveredHosts = []; // Hosts (a.k.a. servers) we have scanned\\n    let hostsToScan = [\\\"home\\\"]; // Hosts we know about, but have no yet scanned\\n    let infiniteLoopProtection = 9999; // In case you mess with this code, this should save you from getting stuck\\n    while (hostsToScan.length > 0 && infiniteLoopProtection-- > 0) { // Loop until the list of hosts to scan is empty\\n        let hostName = hostsToScan.pop(); // Get the next host to be scanned\\n        for (const connectedHost of ns.scan(hostName)) // \\\"scan\\\" (list all hosts connected to this one)\\n            if (!discoveredHosts.includes(connectedHost)) // If we haven't already scanned this host\\n                hostsToScan.push(connectedHost); // Add it to the queue of hosts to be scanned\\n        discoveredHosts.push(hostName); // Mark this host as \\\"scanned\\\"\\n    }\\n    return discoveredHosts; // The list of scanned hosts should now be the set of all hosts in the game!\\n}\\n\\n/** @param {NS} ns \\n * Get a dictionary of active source files, taking into account the current active bitnode as well. **/\\nexport async function getActiveSourceFiles(ns) {\\n    return await getActiveSourceFiles_Custom(ns, getNsDataThroughFile);\\n}\\n\\n/** @param {NS} ns \\n * getActiveSourceFiles Helper that allows the user to pass in their chosen implementation of getNsDataThroughFile to minimize RAM usage **/\\nexport async function getActiveSourceFiles_Custom(ns, fnGetNsDataThroughFile) {\\n    checkNsInstance(ns, '\\\"getActiveSourceFiles\\\"');\\n    let tempFile = '/Temp/owned-source-files.txt';\\n    // Find out what source files the user has unlocked\\n    let dictSourceFiles;\\n    try { await fnGetNsDataThroughFile(ns, `Object.fromEntries(ns.getOwnedSourceFiles().map(sf => [sf.n, sf.lvl]))`, tempFile); } catch { }\\n    if (!dictSourceFiles) { // Bit of a hack, but if RAM is so low that this fails, we can fallback to using an older version of this file, and even assuming we have no source files.\\n        dictSourceFiles = ns.read(tempFile)\\n        dictSourceFiles = dictSourceFiles ? JSON.parse(dictSourceFiles) : {};\\n    }\\n    // If the user is currently in a given bitnode, they will have its features unlocked\\n    dictSourceFiles[(await fnGetNsDataThroughFile(ns, 'ns.getPlayer()', '/Temp/player-info.txt')).bitNodeN] = 3;\\n    return dictSourceFiles;\\n}\\n\\n/** @param {NS} ns \\n * Return bitnode multiplers, or null if they cannot be accessed. **/\\nexport async function tryGetBitNodeMultipliers(ns) {\\n    return await tryGetBitNodeMultipliers_Custom(ns, getNsDataThroughFile);\\n}\\n\\n/** @param {NS} ns\\n * tryGetBitNodeMultipliers Helper that allows the user to pass in their chosen implementation of getNsDataThroughFile to minimize RAM usage **/\\nexport async function tryGetBitNodeMultipliers_Custom(ns, fnGetNsDataThroughFile) {\\n    checkNsInstance(ns, '\\\"tryGetBitNodeMultipliers\\\"');\\n    let canGetBitNodeMultipliers = false;\\n    try { canGetBitNodeMultipliers = 5 in (await getActiveSourceFiles_Custom(ns, fnGetNsDataThroughFile)); } catch { }\\n    if (!canGetBitNodeMultipliers) return null;\\n    try { return await fnGetNsDataThroughFile(ns, 'ns.getBitNodeMultipliers()', '/Temp/bitnode-multipliers.txt'); } catch { }\\n    return null;\\n}\\n\\n/** @param {NS} ns \\n * Returns a helpful error message if we forgot to pass the ns instance to a function */\\nexport function checkNsInstance(ns, fnName = \\\"this function\\\") { if (!ns.print) throw `The first argument to ${fnName} should be a 'ns' instance.`; return ns; }\",\"filename\":\"helpers.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4.4,\"server\":\"n00dles\",\"moduleSequenceNumber\":252,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"run\",\"cost\":1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"isRunning\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"ps\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":1750000,\"moneyMax\":1750000,\"numOpenPortsRequired\":0,\"openPortCount\":2,\"requiredHackingSkill\":1,\"serverGrowth\":3000}},\"foodnstuff\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"foodnstuff\",\"httpPortOpen\":false,\"ip\":\"74.0.4.3\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"sector-12-crime.lit\"],\"organizationName\":\"FoodNStuff\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"home\",\"nectar-net\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":10,\"hackDifficulty\":3.024,\"minDifficulty\":3,\"moneyAvailable\":9425672,\"moneyMax\":50000000,\"numOpenPortsRequired\":0,\"openPortCount\":2,\"requiredHackingSkill\":1,\"serverGrowth\":5}},\"sigma-cosmetics\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"sigma-cosmetics\",\"httpPortOpen\":false,\"ip\":\"11.4.4.8\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Sigma Cosmetics\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"home\",\"CSEC\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":10,\"hackDifficulty\":3.024,\"minDifficulty\":3,\"moneyAvailable\":10897772,\"moneyMax\":57500000,\"numOpenPortsRequired\":0,\"openPortCount\":2,\"requiredHackingSkill\":5,\"serverGrowth\":10}},\"joesguns\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"joesguns\",\"httpPortOpen\":false,\"ip\":\"13.4.2.6\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Joe's Guns\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":15,\"hackDifficulty\":5,\"minDifficulty\":5,\"moneyAvailable\":35306432.52656255,\"moneyMax\":62500000,\"numOpenPortsRequired\":0,\"openPortCount\":2,\"requiredHackingSkill\":10,\"serverGrowth\":20}},\"zer0\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"zer0\",\"httpPortOpen\":false,\"ip\":\"78.4.5.6\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"ZER0 Nightclub\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tawait ns.share()\\n}\",\"filename\":\"/Remote/share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/Remote/share.js\",\"url\":\"blob:https://danielyxie.github.io/a281b537-a112-4a38-9544-b7fdd2732ec4\",\"moduleSequenceNumber\":5257}],\"dependents\":[],\"ramUsage\":4,\"server\":\"zer0\",\"moduleSequenceNumber\":253,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Return a formatted representation of the monetary amount using scale sympols (e.g. $6.50M)\\n * @param {number} num - The number to format\\n * @param {number=} maxSignificantFigures - (default: 6) The maximum significant figures you wish to see (e.g. 123, 12.3 and 1.23 all have 3 significant figures)\\n * @param {number=} maxDecimalPlaces - (default: 3) The maximum decimal places you wish to see, regardless of significant figures. (e.g. 12.3, 1.2, 0.1 all have 1 decimal)\\n **/\\nexport function formatMoney(num, maxSignificantFigures = 6, maxDecimalPlaces = 3) {\\n    let numberShort = formatNumberShort(num, maxSignificantFigures, maxDecimalPlaces);\\n    return num >= 0 ? \\\"$\\\" + numberShort : numberShort.replace(\\\"-\\\", \\\"-$\\\");\\n}\\n\\nconst symbols = [\\\"\\\", \\\"k\\\", \\\"m\\\", \\\"b\\\", \\\"t\\\", \\\"q\\\", \\\"Q\\\", \\\"s\\\", \\\"S\\\", \\\"o\\\", \\\"n\\\", \\\"e33\\\", \\\"e36\\\", \\\"e39\\\"];\\n\\n/**\\n * Return a formatted representation of the monetary amount using scale sympols (e.g. 6.50M) \\n * @param {number} num - The number to format\\n * @param {number=} maxSignificantFigures - (default: 6) The maximum significant figures you wish to see (e.g. 123, 12.3 and 1.23 all have 3 significant figures)\\n * @param {number=} maxDecimalPlaces - (default: 3) The maximum decimal places you wish to see, regardless of significant figures. (e.g. 12.3, 1.2, 0.1 all have 1 decimal)\\n **/\\nexport function formatNumberShort(num, maxSignificantFigures = 6, maxDecimalPlaces = 3) {\\n    for (var i = 0, sign = Math.sign(num), num = Math.abs(num); num >= 1000 && i < symbols.length; i++) num /= 1000;\\n    // TODO: A number like 9.999 once rounted to show 3 sig figs, will become 10.00, which is now 4 sig figs.\\n    return ((sign < 0) ? \\\"-\\\" : \\\"\\\") + num.toFixed(Math.max(0, Math.min(maxDecimalPlaces, maxSignificantFigures - Math.floor(1 + Math.log10(num))))) + symbols[i];\\n}\\n\\n/** Convert a shortened number back into a value */\\nexport function parseShortNumber(text = \\\"0\\\") {\\n    let parsed = Number(text);\\n    if (!isNaN(parsed)) return parsed;\\n    for (const sym of symbols.slice(1))\\n        if (text.toLowerCase().endsWith(sym))\\n            return Number.parseFloat(text.slice(0, text.length - sym.length)) * Math.pow(10, 3 * symbols.indexOf(sym));\\n    return Number.NaN;\\n}\\n\\n/**\\n * Return a number formatted with the specified number of significatnt figures or decimal places, whichever is more limiting.\\n * @param {number} num - The number to format\\n * @param {number=} minSignificantFigures - (default: 6) The minimum significant figures you wish to see (e.g. 123, 12.3 and 1.23 all have 3 significant figures)\\n * @param {number=} minDecimalPlaces - (default: 3) The minimum decimal places you wish to see, regardless of significant figures. (e.g. 12.3, 1.2, 0.1 all have 1 decimal)\\n **/\\nexport function formatNumber(num, minSignificantFigures = 3, minDecimalPlaces = 1) {\\n    return num == 0.0 ? num : num.toFixed(Math.max(minDecimalPlaces, Math.max(0, minSignificantFigures - Math.ceil(Math.log10(num)))));\\n}\\n\\n/** Formats some RAM amount as a round number of GB with thousands separators e.g. `1,028 GB` */\\nexport function formatRam(num) { return `${Math.round(num).toLocaleString()} GB`; }\\n\\n/** Return a datatime in ISO format */\\nexport function formatDateTime(datetime) { return datetime.toISOString(); }\\n\\n/** Format a duration (in milliseconds) as e.g. '1h 21m 6s' for big durations or e.g '12.5s' / '23ms' for small durations */\\nexport function formatDuration(duration) {\\n    if (duration < 1000) return `${duration.toFixed(0)}ms`\\n    const portions = [];\\n    const msInHour = 1000 * 60 * 60;\\n    const hours = Math.trunc(duration / msInHour);\\n    if (hours > 0) {\\n        portions.push(hours + 'h');\\n        duration -= (hours * msInHour);\\n    }\\n    const msInMinute = 1000 * 60;\\n    const minutes = Math.trunc(duration / msInMinute);\\n    if (minutes > 0) {\\n        portions.push(minutes + 'm');\\n        duration -= (minutes * msInMinute);\\n    }\\n    let seconds = (duration / 1000.0)\\n    // Include millisecond precision if we're on the order of seconds\\n    seconds = (hours == 0 && minutes == 0) ? seconds.toPrecision(3) : seconds.toFixed(0);\\n    if (seconds > 0) {\\n        portions.push(seconds + 's');\\n        duration -= (minutes * 1000);\\n    }\\n    return portions.join(' ');\\n}\\n\\n/** Generate a hashCode for a string that is pretty unique most of the time */\\nexport function hashCode(s) { return s.split(\\\"\\\").reduce(function (a, b) { a = ((a << 5) - a) + b.charCodeAt(0); return a & a }, 0); }\\n\\n/** @param {NS} ns **/\\nexport function disableLogs(ns, listOfLogs) { ['disableLog'].concat(...listOfLogs).forEach(log => checkNsInstance(ns, '\\\"disableLogs\\\"').disableLog(log)); }\\n\\n/** Joins all arguments as components in a path, e.g. pathJoin(\\\"foo\\\", \\\"bar\\\", \\\"/baz\\\") = \\\"foo/bar/baz\\\" **/\\nexport function pathJoin(...args) {\\n    return args.filter(s => !!s).join('/').replace(/\\\\/\\\\/+/g, '/');\\n}\\n\\n/** Gets the path for the given local file, taking into account optional subfolder relocation via git-pull.js **/\\nexport function getFilePath(file) {\\n    const subfolder = '';  // git-pull.js optionally modifies this when downloading\\n    return pathJoin(subfolder, file);\\n}\\n\\n// FUNCTIONS THAT PROVIDE ALTERNATIVE IMPLEMENTATIONS TO EXPENSIVE NS FUNCTIONS\\n// VARIATIONS ON NS.RUN\\n\\n/** @param {NS} ns\\n *  Use where a function is required to run a script and you have already referenced ns.run in your script **/\\nexport function getFnRunViaNsRun(ns) { return checkNsInstance(ns, '\\\"getFnRunViaNsRun\\\"').run; }\\n\\n/** @param {NS} ns\\n *  Use where a function is required to run a script and you have already referenced ns.exec in your script **/\\nexport function getFnRunViaNsExec(ns, host = \\\"home\\\") {\\n    checkNsInstance(ns, '\\\"getFnRunViaNsExec\\\"');\\n    return function (scriptPath, ...args) { return ns.exec(scriptPath, host, ...args); }\\n}\\n// VARIATIONS ON NS.ISRUNNING\\n\\n/** @param {NS} ns\\n *  Use where a function is required to run a script and you have already referenced ns.run in your script  */\\nexport function getFnIsAliveViaNsIsRunning(ns) { return checkNsInstance(ns, '\\\"getFnIsAliveViaNsIsRunning\\\"').isRunning; }\\n\\n/** @param {NS} ns\\n *  Use where a function is required to run a script and you have already referenced ns.exec in your script  */\\nexport function getFnIsAliveViaNsPs(ns) {\\n    checkNsInstance(ns, '\\\"getFnIsAliveViaNsPs\\\"');\\n    return function (pid, host) { return ns.ps(host).some(process => process.pid === pid); }\\n}\\n\\n/**\\n * Retrieve the result of an ns command by executing it in a temporary .js script, writing the result to a file, then shuting it down\\n * Importing incurs a maximum of 1.1 GB RAM (0 GB for ns.read, 1 GB for ns.run, 0.1 GB for ns.isRunning).\\n * Has the capacity to retry if there is a failure (e.g. due to lack of RAM available). Not recommended for performance-critical code.\\n * @param {NS} ns - The nestcript instance passed to your script's main entry point\\n * @param {string} command - The ns command that should be invoked to get the desired data (e.g. \\\"ns.getServer('home')\\\" )\\n * @param {string=} fName - (default \\\"/Temp/{commandhash}-data.txt\\\") The name of the file to which data will be written to disk by a temporary process\\n * @param {bool=} verbose - (default false) If set to true, pid and result of command are logged.\\n **/\\nexport async function getNsDataThroughFile(ns, command, fName, verbose = false, maxRetries = 5, retryDelayMs = 50) {\\n    checkNsInstance(ns, '\\\"getNsDataThroughFile\\\"');\\n    if (!verbose) disableLogs(ns, ['run', 'isRunning']);\\n    return await getNsDataThroughFile_Custom(ns, ns.run, ns.isRunning, command, fName, verbose, maxRetries, retryDelayMs);\\n}\\n\\n/**\\n * An advanced version of getNsDataThroughFile that lets you pass your own \\\"fnRun\\\" and \\\"fnIsAlive\\\" implementations to reduce RAM requirements\\n * Importing incurs no RAM (now that ns.read is free) plus whatever fnRun / fnIsAlive you provide it\\n * Has the capacity to retry if there is a failure (e.g. due to lack of RAM available). Not recommended for performance-critical code.\\n * @param {NS} ns - The nestcript instance passed to your script's main entry point\\n * @param {function} fnRun - A single-argument function used to start the new sript, e.g. `ns.run` or `(f,...args) => ns.exec(f, \\\"home\\\", ...args)`\\n * @param {function} fnIsAlive - A single-argument function used to start the new sript, e.g. `ns.isRunning` or `pid => ns.ps(\\\"home\\\").some(process => process.pid === pid)`\\n **/\\nexport async function getNsDataThroughFile_Custom(ns, fnRun, fnIsAlive, command, fName, verbose = false, maxRetries = 5, retryDelayMs = 50) {\\n    checkNsInstance(ns, '\\\"getNsDataThroughFile_Custom\\\"');\\n    if (!verbose) disableLogs(ns, ['read']);\\n    const commandHash = hashCode(command);\\n    fName = fName || `/Temp/${commandHash}-data.txt`;\\n    const fNameCommand = (fName || `/Temp/${commandHash}-command`) + '.js'\\n    // Prepare a command that will write out a new file containing the results of the command\\n    // unless it already exists with the same contents (saves time/ram to check first)\\n    // If an error occurs, it will write an empty file to avoid old results being misread.\\n    const commandToFile = `let result = \\\"\\\"; try { result = JSON.stringify(${command}); } catch { }\\n        if (ns.read(\\\"${fName}\\\") != result) await ns.write(\\\"${fName}\\\", result, 'w')`;\\n    // Run the command with auto-retries if it fails\\n    const pid = await runCommand_Custom(ns, fnRun, commandToFile, fNameCommand, false, maxRetries, retryDelayMs);\\n    // Wait for the process to complete\\n    await waitForProcessToComplete_Custom(ns, fnIsAlive, pid, verbose);\\n    if (verbose) ns.print(`Process ${pid} is done. Reading the contents of ${fName}...`);\\n    // Read the file, with auto-retries if it fails\\n    const fileData = await autoRetry(ns, () => ns.read(fName), f => f !== undefined && f !== \\\"\\\",\\n        () => `ns.read('${fName}') somehow returned undefined or an empty string`,\\n        maxRetries, retryDelayMs, undefined, verbose);\\n    if (verbose) ns.print(`Read the following data for command ${command}:\\\\n${fileData}`);\\n    return JSON.parse(fileData); // Deserialize it back into an object/array and return\\n}\\n\\n/** Evaluate an arbitrary ns command by writing it to a new script and then running or executing it.\\n * @param {NS} ns - The nestcript instance passed to your script's main entry point\\n * @param {string} command - The ns command that should be invoked to get the desired data (e.g. \\\"ns.getServer('home')\\\" )\\n * @param {string=} fileName - (default \\\"/Temp/{commandhash}-data.txt\\\") The name of the file to which data will be written to disk by a temporary process\\n * @param {bool=} verbose - (default false) If set to true, the evaluation result of the command is printed to the terminal\\n * @param {...args} args - args to be passed in as arguments to command being run as a new script.\\n */\\nexport async function runCommand(ns, command, fileName, verbose = false, maxRetries = 5, retryDelayMs = 50, ...args) {\\n    checkNsInstance(ns, '\\\"runCommand\\\"');\\n    if (!verbose) disableLogs(ns, ['run', 'sleep']);\\n    return await runCommand_Custom(ns, ns.run, command, fileName, verbose, maxRetries, retryDelayMs, ...args);\\n}\\n\\n/**\\n * An advanced version of runCommand that lets you pass your own \\\"isAlive\\\" test to reduce RAM requirements (e.g. to avoid referencing ns.isRunning)\\n * Importing incurs 0 GB RAM (assuming fnRun, fnWrite are implemented using another ns function you already reference elsewhere like ns.exec)\\n * @param {NS} ns - The nestcript instance passed to your script's main entry point\\n * @param {function} fnRun - A single-argument function used to start the new sript, e.g. `ns.run` or `(f,...args) => ns.exec(f, \\\"home\\\", ...args)`\\n **/\\nexport async function runCommand_Custom(ns, fnRun, command, fileName, verbose = false, maxRetries = 5, retryDelayMs = 50, ...args) {\\n    checkNsInstance(ns, '\\\"runCommand_Custom\\\"');\\n    let script = `import { formatMoney, formatNumberShort, formatDuration, parseShortNumber, scanAllServers } fr` + `om '${getFilePath('helpers.js')}'\\\\n` +\\n        `export async function main(ns) { try { ` +\\n        (verbose ? `let output = ${command}; ns.tprint(output)` : command) +\\n        `; } catch(err) { ns.tprint(String(err)); throw(err); } }`;\\n    fileName = fileName || `/Temp/${hashCode(command)}-command.js`;\\n    // To improve performance and save on garbage collection, we can skip writing this exact same script was previously written (common for repeatedly-queried data)\\n    if (ns.read(fileName) != script) await ns.write(fileName, script, \\\"w\\\");\\n    return await autoRetry(ns, () => fnRun(fileName, ...args), temp_pid => temp_pid !== 0,\\n        () => `Run command returned no pid. Destination: ${fileName} Command: ${command}\\\\nEnsure you have sufficient free RAM to run this temporary script.`,\\n        maxRetries, retryDelayMs, undefined, verbose);\\n}\\n\\n/**\\n * Wait for a process id to complete running\\n * Importing incurs a maximum of 0.1 GB RAM (for ns.isRunning) \\n * @param {NS} ns - The nestcript instance passed to your script's main entry point\\n * @param {int} pid - The process id to monitor\\n * @param {bool=} verbose - (default false) If set to true, pid and result of command are logged.\\n **/\\nexport async function waitForProcessToComplete(ns, pid, verbose) {\\n    checkNsInstance(ns, '\\\"waitForProcessToComplete\\\"');\\n    if (!verbose) disableLogs(ns, ['isRunning']);\\n    return await waitForProcessToComplete_Custom(ns, ns.isRunning, pid, verbose);\\n}\\n/**\\n * An advanced version of waitForProcessToComplete that lets you pass your own \\\"isAlive\\\" test to reduce RAM requirements (e.g. to avoid referencing ns.isRunning)\\n * Importing incurs 0 GB RAM (assuming fnIsAlive is implemented using another ns function you already reference elsewhere like ns.ps) \\n * @param {NS} ns - The nestcript instance passed to your script's main entry point\\n * @param {function} fnIsAlive - A single-argument function used to start the new sript, e.g. `ns.isRunning` or `pid => ns.ps(\\\"home\\\").some(process => process.pid === pid)`\\n **/\\nexport async function waitForProcessToComplete_Custom(ns, fnIsAlive, pid, verbose) {\\n    checkNsInstance(ns, '\\\"waitForProcessToComplete_Custom\\\"');\\n    if (!verbose) disableLogs(ns, ['sleep']);\\n    // Wait for the PID to stop running (cheaper than e.g. deleting (rm) a possibly pre-existing file and waiting for it to be recreated)\\n    for (var retries = 0; retries < 1000; retries++) {\\n        if (!fnIsAlive(pid)) break; // Script is done running\\n        if (verbose && retries % 100 === 0) ns.print(`Waiting for pid ${pid} to complete... (${retries})`);\\n        await ns.sleep(10);\\n    }\\n    // Make sure that the process has shut down and we haven't just stopped retrying\\n    if (fnIsAlive(pid)) {\\n        let errorMessage = `run-command pid ${pid} is running much longer than expected. Max retries exceeded.`;\\n        ns.print(errorMessage);\\n        throw errorMessage;\\n    }\\n}\\n\\n/** Helper to retry something that failed temporarily (can happen when e.g. we temporarily don't have enough RAM to run)\\n * @param {NS} ns - The nestcript instance passed to your script's main entry point */\\nexport async function autoRetry(ns, fnFunctionThatMayFail, fnSuccessCondition, errorContext = \\\"Success condition not met\\\",\\n    maxRetries = 5, initialRetryDelayMs = 50, backoffRate = 3, verbose = false) {\\n    checkNsInstance(ns, '\\\"autoRetry\\\"');\\n    let retryDelayMs = initialRetryDelayMs;\\n    while (maxRetries-- > 0) {\\n        try {\\n            const result = await fnFunctionThatMayFail()\\n            if (!fnSuccessCondition(result)) throw typeof errorContext === 'string' ? errorContext : errorContext();\\n            return result;\\n        }\\n        catch (error) {\\n            const fatal = maxRetries === 0;\\n            const errorLog = `${fatal ? 'FAIL' : 'WARN'}: (${maxRetries} retries remaining): ${String(error)}`\\n            log(ns, errorLog, fatal, !verbose ? undefined : (fatal ? 'error' : 'warning'))\\n            if (fatal) throw error;\\n            await ns.sleep(retryDelayMs);\\n            retryDelayMs *= backoffRate;\\n        }\\n    }\\n}\\n\\n/** Helper to log a message, and optionally also tprint it and toast it\\n * @param {NS} ns - The nestcript instance passed to your script's main entry point */\\nexport function log(ns, message = \\\"\\\", alsoPrintToTerminal = false, toastStyle = \\\"\\\", maxToastLength = 100) {\\n    checkNsInstance(ns, '\\\"log\\\"');\\n    ns.print(message);\\n    if (alsoPrintToTerminal) ns.tprint(message);\\n    if (toastStyle) ns.toast(message.length <= maxToastLength ? message : message.substring(0, maxToastLength - 3) + \\\"...\\\", toastStyle);\\n    return message;\\n}\\n\\n/** Helper to get a list of all hostnames on the network\\n * @param {NS} ns - The nestcript instance passed to your script's main entry point */\\nexport function scanAllServers(ns) {\\n    checkNsInstance(ns, '\\\"scanAllServers\\\"');\\n    let discoveredHosts = []; // Hosts (a.k.a. servers) we have scanned\\n    let hostsToScan = [\\\"home\\\"]; // Hosts we know about, but have no yet scanned\\n    let infiniteLoopProtection = 9999; // In case you mess with this code, this should save you from getting stuck\\n    while (hostsToScan.length > 0 && infiniteLoopProtection-- > 0) { // Loop until the list of hosts to scan is empty\\n        let hostName = hostsToScan.pop(); // Get the next host to be scanned\\n        for (const connectedHost of ns.scan(hostName)) // \\\"scan\\\" (list all hosts connected to this one)\\n            if (!discoveredHosts.includes(connectedHost)) // If we haven't already scanned this host\\n                hostsToScan.push(connectedHost); // Add it to the queue of hosts to be scanned\\n        discoveredHosts.push(hostName); // Mark this host as \\\"scanned\\\"\\n    }\\n    return discoveredHosts; // The list of scanned hosts should now be the set of all hosts in the game!\\n}\\n\\n/** @param {NS} ns \\n * Get a dictionary of active source files, taking into account the current active bitnode as well. **/\\nexport async function getActiveSourceFiles(ns) {\\n    return await getActiveSourceFiles_Custom(ns, getNsDataThroughFile);\\n}\\n\\n/** @param {NS} ns \\n * getActiveSourceFiles Helper that allows the user to pass in their chosen implementation of getNsDataThroughFile to minimize RAM usage **/\\nexport async function getActiveSourceFiles_Custom(ns, fnGetNsDataThroughFile) {\\n    checkNsInstance(ns, '\\\"getActiveSourceFiles\\\"');\\n    let tempFile = '/Temp/owned-source-files.txt';\\n    // Find out what source files the user has unlocked\\n    let dictSourceFiles;\\n    try { await fnGetNsDataThroughFile(ns, `Object.fromEntries(ns.getOwnedSourceFiles().map(sf => [sf.n, sf.lvl]))`, tempFile); } catch { }\\n    if (!dictSourceFiles) { // Bit of a hack, but if RAM is so low that this fails, we can fallback to using an older version of this file, and even assuming we have no source files.\\n        dictSourceFiles = ns.read(tempFile)\\n        dictSourceFiles = dictSourceFiles ? JSON.parse(dictSourceFiles) : {};\\n    }\\n    // If the user is currently in a given bitnode, they will have its features unlocked\\n    dictSourceFiles[(await fnGetNsDataThroughFile(ns, 'ns.getPlayer()', '/Temp/player-info.txt')).bitNodeN] = 3;\\n    return dictSourceFiles;\\n}\\n\\n/** @param {NS} ns \\n * Return bitnode multiplers, or null if they cannot be accessed. **/\\nexport async function tryGetBitNodeMultipliers(ns) {\\n    return await tryGetBitNodeMultipliers_Custom(ns, getNsDataThroughFile);\\n}\\n\\n/** @param {NS} ns\\n * tryGetBitNodeMultipliers Helper that allows the user to pass in their chosen implementation of getNsDataThroughFile to minimize RAM usage **/\\nexport async function tryGetBitNodeMultipliers_Custom(ns, fnGetNsDataThroughFile) {\\n    checkNsInstance(ns, '\\\"tryGetBitNodeMultipliers\\\"');\\n    let canGetBitNodeMultipliers = false;\\n    try { canGetBitNodeMultipliers = 5 in (await getActiveSourceFiles_Custom(ns, fnGetNsDataThroughFile)); } catch { }\\n    if (!canGetBitNodeMultipliers) return null;\\n    try { return await fnGetNsDataThroughFile(ns, 'ns.getBitNodeMultipliers()', '/Temp/bitnode-multipliers.txt'); } catch { }\\n    return null;\\n}\\n\\n/** @param {NS} ns \\n * Returns a helpful error message if we forgot to pass the ns instance to a function */\\nexport function checkNsInstance(ns, fnName = \\\"this function\\\") { if (!ns.print) throw `The first argument to ${fnName} should be a 'ns' instance.`; return ns; }\",\"filename\":\"helpers.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4.4,\"server\":\"zer0\",\"moduleSequenceNumber\":254,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"run\",\"cost\":1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"isRunning\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"ps\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}}],\"serversOnNetwork\":[\"hong-fang-tea\",\"neo-net\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":25,\"hackDifficulty\":25,\"minDifficulty\":8,\"moneyAvailable\":7500000,\"moneyMax\":187500000,\"numOpenPortsRequired\":1,\"openPortCount\":2,\"requiredHackingSkill\":75,\"serverGrowth\":40}},\"nectar-net\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"nectar-net\",\"httpPortOpen\":false,\"ip\":\"42.4.9.6\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Nectar Nightclub Network\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"foodnstuff\",\"silver-helix\",\"omega-net\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":20,\"hackDifficulty\":7.026,\"minDifficulty\":7,\"moneyAvailable\":11147104,\"moneyMax\":68750000,\"numOpenPortsRequired\":0,\"openPortCount\":2,\"requiredHackingSkill\":20,\"serverGrowth\":25}},\"neo-net\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"neo-net\",\"httpPortOpen\":false,\"ip\":\"3.9.3.2\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"the-hidden-world.lit\"],\"organizationName\":\"Neo Nightclub Network\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"zer0\",\"johnson-ortho\",\"avmnite-02h\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":25,\"hackDifficulty\":25,\"minDifficulty\":8,\"moneyAvailable\":5000000,\"moneyMax\":125000000,\"numOpenPortsRequired\":1,\"openPortCount\":2,\"requiredHackingSkill\":50,\"serverGrowth\":25}},\"silver-helix\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"silver-helix\",\"httpPortOpen\":false,\"ip\":\"39.1.7.1\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"new-triads.lit\"],\"organizationName\":\"Silver Helix\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"nectar-net\",\"netlink\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":30,\"hackDifficulty\":30,\"minDifficulty\":10,\"moneyAvailable\":45000000,\"moneyMax\":1125000000,\"numOpenPortsRequired\":2,\"openPortCount\":2,\"requiredHackingSkill\":150,\"serverGrowth\":30}},\"hong-fang-tea\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"hong-fang-tea\",\"httpPortOpen\":false,\"ip\":\"35.3.5.2\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"brighter-than-the-sun.lit\"],\"organizationName\":\"HongFang Teahouse\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"home\",\"zer0\",\"max-hardware\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":15,\"hackDifficulty\":5.026,\"minDifficulty\":5,\"moneyAvailable\":11010633,\"moneyMax\":75000000,\"numOpenPortsRequired\":0,\"openPortCount\":2,\"requiredHackingSkill\":30,\"serverGrowth\":20}},\"harakiri-sushi\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"harakiri-sushi\",\"httpPortOpen\":false,\"ip\":\"97.2.0.0\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"HaraKiri Sushi Bar Network\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":15,\"hackDifficulty\":5.026,\"minDifficulty\":5,\"moneyAvailable\":14949554,\"moneyMax\":100000000,\"numOpenPortsRequired\":0,\"openPortCount\":2,\"requiredHackingSkill\":40,\"serverGrowth\":40}},\"phantasy\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"phantasy\",\"httpPortOpen\":false,\"ip\":\"89.1.6.5\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Phantasy Club\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"CSEC\",\"comptek\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":20,\"hackDifficulty\":20,\"minDifficulty\":7,\"moneyAvailable\":24000000,\"moneyMax\":600000000,\"numOpenPortsRequired\":2,\"openPortCount\":2,\"requiredHackingSkill\":100,\"serverGrowth\":35}},\"max-hardware\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"max-hardware\",\"httpPortOpen\":false,\"ip\":\"4.8.4.2\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Max Hardware Store\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"hong-fang-tea\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":15,\"hackDifficulty\":5,\"minDifficulty\":5,\"moneyAvailable\":141331531.08085898,\"moneyMax\":250000000,\"numOpenPortsRequired\":1,\"openPortCount\":2,\"requiredHackingSkill\":80,\"serverGrowth\":30}},\"omega-net\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"omega-net\",\"httpPortOpen\":false,\"ip\":\"12.6.4.0\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"the-new-god.lit\"],\"organizationName\":\"Omega Software\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"nectar-net\",\"the-hub\",\"crush-fitness\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":32,\"hackDifficulty\":32,\"minDifficulty\":11,\"moneyAvailable\":65888121,\"moneyMax\":1647203025,\"numOpenPortsRequired\":2,\"openPortCount\":2,\"requiredHackingSkill\":213,\"serverGrowth\":39}},\"crush-fitness\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"crush-fitness\",\"httpPortOpen\":false,\"ip\":\"0.3.6.2\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Crush Fitness\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"omega-net\",\"syscore\",\"catalyst\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":41,\"hackDifficulty\":41,\"minDifficulty\":14,\"moneyAvailable\":41480824,\"moneyMax\":1037020600,\"numOpenPortsRequired\":2,\"openPortCount\":2,\"requiredHackingSkill\":267,\"serverGrowth\":27}},\"iron-gym\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"iron-gym\",\"httpPortOpen\":false,\"ip\":\"22.3.3.3\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Iron Gym Network\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":30,\"hackDifficulty\":10,\"minDifficulty\":10,\"moneyAvailable\":500000000,\"moneyMax\":500000000,\"numOpenPortsRequired\":1,\"openPortCount\":2,\"requiredHackingSkill\":100,\"serverGrowth\":20}},\"millenium-fitness\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"millenium-fitness\",\"httpPortOpen\":true,\"ip\":\"93.3.3.3\",\"isConnectedTo\":false,\"maxRam\":256,\"messages\":[],\"organizationName\":\"Millenium Fitness Network\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"summit-uni\",\"galactic-cyber\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":51,\"hackDifficulty\":51,\"minDifficulty\":17,\"moneyAvailable\":250000000,\"moneyMax\":6250000000,\"numOpenPortsRequired\":3,\"openPortCount\":5,\"requiredHackingSkill\":478,\"serverGrowth\":32}},\"powerhouse-fitness\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"powerhouse-fitness\",\"httpPortOpen\":true,\"ip\":\"33.3.9.2\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Powerhouse Fitness\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"kuai-gong\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":65,\"hackDifficulty\":65,\"minDifficulty\":22,\"moneyAvailable\":900000000,\"moneyMax\":22500000000,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":974,\"serverGrowth\":53}},\"snap-fitness\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"snap-fitness\",\"httpPortOpen\":true,\"ip\":\"50.7.8.8\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Snap Fitness\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"rho-construction\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":45,\"hackDifficulty\":45,\"minDifficulty\":15,\"moneyAvailable\":450000000,\"moneyMax\":11250000000,\"numOpenPortsRequired\":4,\"openPortCount\":5,\"requiredHackingSkill\":726,\"serverGrowth\":58}},\"run4theh111z\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"run4theh111z\",\"httpPortOpen\":true,\"ip\":\"85.9.8.3\",\"isConnectedTo\":false,\"maxRam\":512,\"messages\":[\"simulated-reality.lit\",\"the-new-god.lit\"],\"organizationName\":\"The Runners\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"infocomm\",\"fulcrumtech\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":0,\"hackDifficulty\":0,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":4,\"openPortCount\":5,\"requiredHackingSkill\":515,\"serverGrowth\":0}},\"I.I.I.I\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"I.I.I.I\",\"httpPortOpen\":true,\"ip\":\"6.9.6.1\",\"isConnectedTo\":false,\"maxRam\":256,\"messages\":[\"democracy-is-dead.lit\"],\"organizationName\":\"I.I.I.I\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"comptek\",\"lexo-corp\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":0,\"hackDifficulty\":0,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":3,\"openPortCount\":5,\"requiredHackingSkill\":361,\"serverGrowth\":0}},\"avmnite-02h\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"avmnite-02h\",\"httpPortOpen\":false,\"ip\":\"10.0.1.6\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"democracy-is-dead.lit\"],\"organizationName\":\"NiteSec\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns \\n * Wait until an appointed time and then execute a hack. */\\nexport async function main(ns) {\\n    //args[0: target, 1: desired start time, 2: expected end, 3: expected duration, 4: description, 5: manipulate stock, 6: disable toast warnings, 7: loop]\\n    const sleepDuration = ns.args.length > 1 ? ns.args[1] - Date.now() : 0;\\n    const expectedDuration = ns.args.length > 3 ? ns.args[3] : 0;\\n    const manipulateStock = ns.args.length > 5 && ns.args[5] ? true : false;\\n    const disableToastWarnings = ns.args.length > 6 ? ns.args[6] : false;\\n    const loop = ns.args.length > 7 ? ns.args[7] : false;\\n    let cycleTime = expectedDuration * 4;\\n    if (cycleTime < 100) cycleTime = Math.max(1, Math.min(5, cycleTime * 2)); // For fast hacking loops, inject a delay on hack in case grow/weaken are running a bit slow.\\n    if (sleepDuration > 0)\\n        await ns.sleep(sleepDuration);\\n    do {\\n        if (!await ns.hack(ns.args[0], { stock: manipulateStock }) && !disableToastWarnings)\\n            ns.toast(`Warning, hack stole 0 money. Might be a misfire. ${JSON.stringify(ns.args)}`, 'warning');\\n        if (loop) await ns.sleep(cycleTime - expectedDuration);\\n    } while (loop);\\n}\",\"filename\":\"/Remote/hack-target.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/Remote/hack-target.js\",\"url\":\"blob:https://danielyxie.github.io/fb939aa6-5c8a-416f-8009-26b1184cf2c3\",\"moduleSequenceNumber\":5399}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"avmnite-02h\",\"moduleSequenceNumber\":255,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Return a formatted representation of the monetary amount using scale sympols (e.g. $6.50M)\\n * @param {number} num - The number to format\\n * @param {number=} maxSignificantFigures - (default: 6) The maximum significant figures you wish to see (e.g. 123, 12.3 and 1.23 all have 3 significant figures)\\n * @param {number=} maxDecimalPlaces - (default: 3) The maximum decimal places you wish to see, regardless of significant figures. (e.g. 12.3, 1.2, 0.1 all have 1 decimal)\\n **/\\nexport function formatMoney(num, maxSignificantFigures = 6, maxDecimalPlaces = 3) {\\n    let numberShort = formatNumberShort(num, maxSignificantFigures, maxDecimalPlaces);\\n    return num >= 0 ? \\\"$\\\" + numberShort : numberShort.replace(\\\"-\\\", \\\"-$\\\");\\n}\\n\\nconst symbols = [\\\"\\\", \\\"k\\\", \\\"m\\\", \\\"b\\\", \\\"t\\\", \\\"q\\\", \\\"Q\\\", \\\"s\\\", \\\"S\\\", \\\"o\\\", \\\"n\\\", \\\"e33\\\", \\\"e36\\\", \\\"e39\\\"];\\n\\n/**\\n * Return a formatted representation of the monetary amount using scale sympols (e.g. 6.50M) \\n * @param {number} num - The number to format\\n * @param {number=} maxSignificantFigures - (default: 6) The maximum significant figures you wish to see (e.g. 123, 12.3 and 1.23 all have 3 significant figures)\\n * @param {number=} maxDecimalPlaces - (default: 3) The maximum decimal places you wish to see, regardless of significant figures. (e.g. 12.3, 1.2, 0.1 all have 1 decimal)\\n **/\\nexport function formatNumberShort(num, maxSignificantFigures = 6, maxDecimalPlaces = 3) {\\n    for (var i = 0, sign = Math.sign(num), num = Math.abs(num); num >= 1000 && i < symbols.length; i++) num /= 1000;\\n    // TODO: A number like 9.999 once rounted to show 3 sig figs, will become 10.00, which is now 4 sig figs.\\n    return ((sign < 0) ? \\\"-\\\" : \\\"\\\") + num.toFixed(Math.max(0, Math.min(maxDecimalPlaces, maxSignificantFigures - Math.floor(1 + Math.log10(num))))) + symbols[i];\\n}\\n\\n/** Convert a shortened number back into a value */\\nexport function parseShortNumber(text = \\\"0\\\") {\\n    let parsed = Number(text);\\n    if (!isNaN(parsed)) return parsed;\\n    for (const sym of symbols.slice(1))\\n        if (text.toLowerCase().endsWith(sym))\\n            return Number.parseFloat(text.slice(0, text.length - sym.length)) * Math.pow(10, 3 * symbols.indexOf(sym));\\n    return Number.NaN;\\n}\\n\\n/**\\n * Return a number formatted with the specified number of significatnt figures or decimal places, whichever is more limiting.\\n * @param {number} num - The number to format\\n * @param {number=} minSignificantFigures - (default: 6) The minimum significant figures you wish to see (e.g. 123, 12.3 and 1.23 all have 3 significant figures)\\n * @param {number=} minDecimalPlaces - (default: 3) The minimum decimal places you wish to see, regardless of significant figures. (e.g. 12.3, 1.2, 0.1 all have 1 decimal)\\n **/\\nexport function formatNumber(num, minSignificantFigures = 3, minDecimalPlaces = 1) {\\n    return num == 0.0 ? num : num.toFixed(Math.max(minDecimalPlaces, Math.max(0, minSignificantFigures - Math.ceil(Math.log10(num)))));\\n}\\n\\n/** Formats some RAM amount as a round number of GB with thousands separators e.g. `1,028 GB` */\\nexport function formatRam(num) { return `${Math.round(num).toLocaleString()} GB`; }\\n\\n/** Return a datatime in ISO format */\\nexport function formatDateTime(datetime) { return datetime.toISOString(); }\\n\\n/** Format a duration (in milliseconds) as e.g. '1h 21m 6s' for big durations or e.g '12.5s' / '23ms' for small durations */\\nexport function formatDuration(duration) {\\n    if (duration < 1000) return `${duration.toFixed(0)}ms`\\n    const portions = [];\\n    const msInHour = 1000 * 60 * 60;\\n    const hours = Math.trunc(duration / msInHour);\\n    if (hours > 0) {\\n        portions.push(hours + 'h');\\n        duration -= (hours * msInHour);\\n    }\\n    const msInMinute = 1000 * 60;\\n    const minutes = Math.trunc(duration / msInMinute);\\n    if (minutes > 0) {\\n        portions.push(minutes + 'm');\\n        duration -= (minutes * msInMinute);\\n    }\\n    let seconds = (duration / 1000.0)\\n    // Include millisecond precision if we're on the order of seconds\\n    seconds = (hours == 0 && minutes == 0) ? seconds.toPrecision(3) : seconds.toFixed(0);\\n    if (seconds > 0) {\\n        portions.push(seconds + 's');\\n        duration -= (minutes * 1000);\\n    }\\n    return portions.join(' ');\\n}\\n\\n/** Generate a hashCode for a string that is pretty unique most of the time */\\nexport function hashCode(s) { return s.split(\\\"\\\").reduce(function (a, b) { a = ((a << 5) - a) + b.charCodeAt(0); return a & a }, 0); }\\n\\n/** @param {NS} ns **/\\nexport function disableLogs(ns, listOfLogs) { ['disableLog'].concat(...listOfLogs).forEach(log => checkNsInstance(ns, '\\\"disableLogs\\\"').disableLog(log)); }\\n\\n/** Joins all arguments as components in a path, e.g. pathJoin(\\\"foo\\\", \\\"bar\\\", \\\"/baz\\\") = \\\"foo/bar/baz\\\" **/\\nexport function pathJoin(...args) {\\n    return args.filter(s => !!s).join('/').replace(/\\\\/\\\\/+/g, '/');\\n}\\n\\n/** Gets the path for the given local file, taking into account optional subfolder relocation via git-pull.js **/\\nexport function getFilePath(file) {\\n    const subfolder = '';  // git-pull.js optionally modifies this when downloading\\n    return pathJoin(subfolder, file);\\n}\\n\\n// FUNCTIONS THAT PROVIDE ALTERNATIVE IMPLEMENTATIONS TO EXPENSIVE NS FUNCTIONS\\n// VARIATIONS ON NS.RUN\\n\\n/** @param {NS} ns\\n *  Use where a function is required to run a script and you have already referenced ns.run in your script **/\\nexport function getFnRunViaNsRun(ns) { return checkNsInstance(ns, '\\\"getFnRunViaNsRun\\\"').run; }\\n\\n/** @param {NS} ns\\n *  Use where a function is required to run a script and you have already referenced ns.exec in your script **/\\nexport function getFnRunViaNsExec(ns, host = \\\"home\\\") {\\n    checkNsInstance(ns, '\\\"getFnRunViaNsExec\\\"');\\n    return function (scriptPath, ...args) { return ns.exec(scriptPath, host, ...args); }\\n}\\n// VARIATIONS ON NS.ISRUNNING\\n\\n/** @param {NS} ns\\n *  Use where a function is required to run a script and you have already referenced ns.run in your script  */\\nexport function getFnIsAliveViaNsIsRunning(ns) { return checkNsInstance(ns, '\\\"getFnIsAliveViaNsIsRunning\\\"').isRunning; }\\n\\n/** @param {NS} ns\\n *  Use where a function is required to run a script and you have already referenced ns.exec in your script  */\\nexport function getFnIsAliveViaNsPs(ns) {\\n    checkNsInstance(ns, '\\\"getFnIsAliveViaNsPs\\\"');\\n    return function (pid, host) { return ns.ps(host).some(process => process.pid === pid); }\\n}\\n\\n/**\\n * Retrieve the result of an ns command by executing it in a temporary .js script, writing the result to a file, then shuting it down\\n * Importing incurs a maximum of 1.1 GB RAM (0 GB for ns.read, 1 GB for ns.run, 0.1 GB for ns.isRunning).\\n * Has the capacity to retry if there is a failure (e.g. due to lack of RAM available). Not recommended for performance-critical code.\\n * @param {NS} ns - The nestcript instance passed to your script's main entry point\\n * @param {string} command - The ns command that should be invoked to get the desired data (e.g. \\\"ns.getServer('home')\\\" )\\n * @param {string=} fName - (default \\\"/Temp/{commandhash}-data.txt\\\") The name of the file to which data will be written to disk by a temporary process\\n * @param {bool=} verbose - (default false) If set to true, pid and result of command are logged.\\n **/\\nexport async function getNsDataThroughFile(ns, command, fName, verbose = false, maxRetries = 5, retryDelayMs = 50) {\\n    checkNsInstance(ns, '\\\"getNsDataThroughFile\\\"');\\n    if (!verbose) disableLogs(ns, ['run', 'isRunning']);\\n    return await getNsDataThroughFile_Custom(ns, ns.run, ns.isRunning, command, fName, verbose, maxRetries, retryDelayMs);\\n}\\n\\n/**\\n * An advanced version of getNsDataThroughFile that lets you pass your own \\\"fnRun\\\" and \\\"fnIsAlive\\\" implementations to reduce RAM requirements\\n * Importing incurs no RAM (now that ns.read is free) plus whatever fnRun / fnIsAlive you provide it\\n * Has the capacity to retry if there is a failure (e.g. due to lack of RAM available). Not recommended for performance-critical code.\\n * @param {NS} ns - The nestcript instance passed to your script's main entry point\\n * @param {function} fnRun - A single-argument function used to start the new sript, e.g. `ns.run` or `(f,...args) => ns.exec(f, \\\"home\\\", ...args)`\\n * @param {function} fnIsAlive - A single-argument function used to start the new sript, e.g. `ns.isRunning` or `pid => ns.ps(\\\"home\\\").some(process => process.pid === pid)`\\n **/\\nexport async function getNsDataThroughFile_Custom(ns, fnRun, fnIsAlive, command, fName, verbose = false, maxRetries = 5, retryDelayMs = 50) {\\n    checkNsInstance(ns, '\\\"getNsDataThroughFile_Custom\\\"');\\n    if (!verbose) disableLogs(ns, ['read']);\\n    const commandHash = hashCode(command);\\n    fName = fName || `/Temp/${commandHash}-data.txt`;\\n    const fNameCommand = (fName || `/Temp/${commandHash}-command`) + '.js'\\n    // Prepare a command that will write out a new file containing the results of the command\\n    // unless it already exists with the same contents (saves time/ram to check first)\\n    // If an error occurs, it will write an empty file to avoid old results being misread.\\n    const commandToFile = `let result = \\\"\\\"; try { result = JSON.stringify(${command}); } catch { }\\n        if (ns.read(\\\"${fName}\\\") != result) await ns.write(\\\"${fName}\\\", result, 'w')`;\\n    // Run the command with auto-retries if it fails\\n    const pid = await runCommand_Custom(ns, fnRun, commandToFile, fNameCommand, false, maxRetries, retryDelayMs);\\n    // Wait for the process to complete\\n    await waitForProcessToComplete_Custom(ns, fnIsAlive, pid, verbose);\\n    if (verbose) ns.print(`Process ${pid} is done. Reading the contents of ${fName}...`);\\n    // Read the file, with auto-retries if it fails\\n    const fileData = await autoRetry(ns, () => ns.read(fName), f => f !== undefined && f !== \\\"\\\",\\n        () => `ns.read('${fName}') somehow returned undefined or an empty string`,\\n        maxRetries, retryDelayMs, undefined, verbose);\\n    if (verbose) ns.print(`Read the following data for command ${command}:\\\\n${fileData}`);\\n    return JSON.parse(fileData); // Deserialize it back into an object/array and return\\n}\\n\\n/** Evaluate an arbitrary ns command by writing it to a new script and then running or executing it.\\n * @param {NS} ns - The nestcript instance passed to your script's main entry point\\n * @param {string} command - The ns command that should be invoked to get the desired data (e.g. \\\"ns.getServer('home')\\\" )\\n * @param {string=} fileName - (default \\\"/Temp/{commandhash}-data.txt\\\") The name of the file to which data will be written to disk by a temporary process\\n * @param {bool=} verbose - (default false) If set to true, the evaluation result of the command is printed to the terminal\\n * @param {...args} args - args to be passed in as arguments to command being run as a new script.\\n */\\nexport async function runCommand(ns, command, fileName, verbose = false, maxRetries = 5, retryDelayMs = 50, ...args) {\\n    checkNsInstance(ns, '\\\"runCommand\\\"');\\n    if (!verbose) disableLogs(ns, ['run', 'sleep']);\\n    return await runCommand_Custom(ns, ns.run, command, fileName, verbose, maxRetries, retryDelayMs, ...args);\\n}\\n\\n/**\\n * An advanced version of runCommand that lets you pass your own \\\"isAlive\\\" test to reduce RAM requirements (e.g. to avoid referencing ns.isRunning)\\n * Importing incurs 0 GB RAM (assuming fnRun, fnWrite are implemented using another ns function you already reference elsewhere like ns.exec)\\n * @param {NS} ns - The nestcript instance passed to your script's main entry point\\n * @param {function} fnRun - A single-argument function used to start the new sript, e.g. `ns.run` or `(f,...args) => ns.exec(f, \\\"home\\\", ...args)`\\n **/\\nexport async function runCommand_Custom(ns, fnRun, command, fileName, verbose = false, maxRetries = 5, retryDelayMs = 50, ...args) {\\n    checkNsInstance(ns, '\\\"runCommand_Custom\\\"');\\n    let script = `import { formatMoney, formatNumberShort, formatDuration, parseShortNumber, scanAllServers } fr` + `om '${getFilePath('helpers.js')}'\\\\n` +\\n        `export async function main(ns) { try { ` +\\n        (verbose ? `let output = ${command}; ns.tprint(output)` : command) +\\n        `; } catch(err) { ns.tprint(String(err)); throw(err); } }`;\\n    fileName = fileName || `/Temp/${hashCode(command)}-command.js`;\\n    // To improve performance and save on garbage collection, we can skip writing this exact same script was previously written (common for repeatedly-queried data)\\n    if (ns.read(fileName) != script) await ns.write(fileName, script, \\\"w\\\");\\n    return await autoRetry(ns, () => fnRun(fileName, ...args), temp_pid => temp_pid !== 0,\\n        () => `Run command returned no pid. Destination: ${fileName} Command: ${command}\\\\nEnsure you have sufficient free RAM to run this temporary script.`,\\n        maxRetries, retryDelayMs, undefined, verbose);\\n}\\n\\n/**\\n * Wait for a process id to complete running\\n * Importing incurs a maximum of 0.1 GB RAM (for ns.isRunning) \\n * @param {NS} ns - The nestcript instance passed to your script's main entry point\\n * @param {int} pid - The process id to monitor\\n * @param {bool=} verbose - (default false) If set to true, pid and result of command are logged.\\n **/\\nexport async function waitForProcessToComplete(ns, pid, verbose) {\\n    checkNsInstance(ns, '\\\"waitForProcessToComplete\\\"');\\n    if (!verbose) disableLogs(ns, ['isRunning']);\\n    return await waitForProcessToComplete_Custom(ns, ns.isRunning, pid, verbose);\\n}\\n/**\\n * An advanced version of waitForProcessToComplete that lets you pass your own \\\"isAlive\\\" test to reduce RAM requirements (e.g. to avoid referencing ns.isRunning)\\n * Importing incurs 0 GB RAM (assuming fnIsAlive is implemented using another ns function you already reference elsewhere like ns.ps) \\n * @param {NS} ns - The nestcript instance passed to your script's main entry point\\n * @param {function} fnIsAlive - A single-argument function used to start the new sript, e.g. `ns.isRunning` or `pid => ns.ps(\\\"home\\\").some(process => process.pid === pid)`\\n **/\\nexport async function waitForProcessToComplete_Custom(ns, fnIsAlive, pid, verbose) {\\n    checkNsInstance(ns, '\\\"waitForProcessToComplete_Custom\\\"');\\n    if (!verbose) disableLogs(ns, ['sleep']);\\n    // Wait for the PID to stop running (cheaper than e.g. deleting (rm) a possibly pre-existing file and waiting for it to be recreated)\\n    for (var retries = 0; retries < 1000; retries++) {\\n        if (!fnIsAlive(pid)) break; // Script is done running\\n        if (verbose && retries % 100 === 0) ns.print(`Waiting for pid ${pid} to complete... (${retries})`);\\n        await ns.sleep(10);\\n    }\\n    // Make sure that the process has shut down and we haven't just stopped retrying\\n    if (fnIsAlive(pid)) {\\n        let errorMessage = `run-command pid ${pid} is running much longer than expected. Max retries exceeded.`;\\n        ns.print(errorMessage);\\n        throw errorMessage;\\n    }\\n}\\n\\n/** Helper to retry something that failed temporarily (can happen when e.g. we temporarily don't have enough RAM to run)\\n * @param {NS} ns - The nestcript instance passed to your script's main entry point */\\nexport async function autoRetry(ns, fnFunctionThatMayFail, fnSuccessCondition, errorContext = \\\"Success condition not met\\\",\\n    maxRetries = 5, initialRetryDelayMs = 50, backoffRate = 3, verbose = false) {\\n    checkNsInstance(ns, '\\\"autoRetry\\\"');\\n    let retryDelayMs = initialRetryDelayMs;\\n    while (maxRetries-- > 0) {\\n        try {\\n            const result = await fnFunctionThatMayFail()\\n            if (!fnSuccessCondition(result)) throw typeof errorContext === 'string' ? errorContext : errorContext();\\n            return result;\\n        }\\n        catch (error) {\\n            const fatal = maxRetries === 0;\\n            const errorLog = `${fatal ? 'FAIL' : 'WARN'}: (${maxRetries} retries remaining): ${String(error)}`\\n            log(ns, errorLog, fatal, !verbose ? undefined : (fatal ? 'error' : 'warning'))\\n            if (fatal) throw error;\\n            await ns.sleep(retryDelayMs);\\n            retryDelayMs *= backoffRate;\\n        }\\n    }\\n}\\n\\n/** Helper to log a message, and optionally also tprint it and toast it\\n * @param {NS} ns - The nestcript instance passed to your script's main entry point */\\nexport function log(ns, message = \\\"\\\", alsoPrintToTerminal = false, toastStyle = \\\"\\\", maxToastLength = 100) {\\n    checkNsInstance(ns, '\\\"log\\\"');\\n    ns.print(message);\\n    if (alsoPrintToTerminal) ns.tprint(message);\\n    if (toastStyle) ns.toast(message.length <= maxToastLength ? message : message.substring(0, maxToastLength - 3) + \\\"...\\\", toastStyle);\\n    return message;\\n}\\n\\n/** Helper to get a list of all hostnames on the network\\n * @param {NS} ns - The nestcript instance passed to your script's main entry point */\\nexport function scanAllServers(ns) {\\n    checkNsInstance(ns, '\\\"scanAllServers\\\"');\\n    let discoveredHosts = []; // Hosts (a.k.a. servers) we have scanned\\n    let hostsToScan = [\\\"home\\\"]; // Hosts we know about, but have no yet scanned\\n    let infiniteLoopProtection = 9999; // In case you mess with this code, this should save you from getting stuck\\n    while (hostsToScan.length > 0 && infiniteLoopProtection-- > 0) { // Loop until the list of hosts to scan is empty\\n        let hostName = hostsToScan.pop(); // Get the next host to be scanned\\n        for (const connectedHost of ns.scan(hostName)) // \\\"scan\\\" (list all hosts connected to this one)\\n            if (!discoveredHosts.includes(connectedHost)) // If we haven't already scanned this host\\n                hostsToScan.push(connectedHost); // Add it to the queue of hosts to be scanned\\n        discoveredHosts.push(hostName); // Mark this host as \\\"scanned\\\"\\n    }\\n    return discoveredHosts; // The list of scanned hosts should now be the set of all hosts in the game!\\n}\\n\\n/** @param {NS} ns \\n * Get a dictionary of active source files, taking into account the current active bitnode as well. **/\\nexport async function getActiveSourceFiles(ns) {\\n    return await getActiveSourceFiles_Custom(ns, getNsDataThroughFile);\\n}\\n\\n/** @param {NS} ns \\n * getActiveSourceFiles Helper that allows the user to pass in their chosen implementation of getNsDataThroughFile to minimize RAM usage **/\\nexport async function getActiveSourceFiles_Custom(ns, fnGetNsDataThroughFile) {\\n    checkNsInstance(ns, '\\\"getActiveSourceFiles\\\"');\\n    let tempFile = '/Temp/owned-source-files.txt';\\n    // Find out what source files the user has unlocked\\n    let dictSourceFiles;\\n    try { await fnGetNsDataThroughFile(ns, `Object.fromEntries(ns.getOwnedSourceFiles().map(sf => [sf.n, sf.lvl]))`, tempFile); } catch { }\\n    if (!dictSourceFiles) { // Bit of a hack, but if RAM is so low that this fails, we can fallback to using an older version of this file, and even assuming we have no source files.\\n        dictSourceFiles = ns.read(tempFile)\\n        dictSourceFiles = dictSourceFiles ? JSON.parse(dictSourceFiles) : {};\\n    }\\n    // If the user is currently in a given bitnode, they will have its features unlocked\\n    dictSourceFiles[(await fnGetNsDataThroughFile(ns, 'ns.getPlayer()', '/Temp/player-info.txt')).bitNodeN] = 3;\\n    return dictSourceFiles;\\n}\\n\\n/** @param {NS} ns \\n * Return bitnode multiplers, or null if they cannot be accessed. **/\\nexport async function tryGetBitNodeMultipliers(ns) {\\n    return await tryGetBitNodeMultipliers_Custom(ns, getNsDataThroughFile);\\n}\\n\\n/** @param {NS} ns\\n * tryGetBitNodeMultipliers Helper that allows the user to pass in their chosen implementation of getNsDataThroughFile to minimize RAM usage **/\\nexport async function tryGetBitNodeMultipliers_Custom(ns, fnGetNsDataThroughFile) {\\n    checkNsInstance(ns, '\\\"tryGetBitNodeMultipliers\\\"');\\n    let canGetBitNodeMultipliers = false;\\n    try { canGetBitNodeMultipliers = 5 in (await getActiveSourceFiles_Custom(ns, fnGetNsDataThroughFile)); } catch { }\\n    if (!canGetBitNodeMultipliers) return null;\\n    try { return await fnGetNsDataThroughFile(ns, 'ns.getBitNodeMultipliers()', '/Temp/bitnode-multipliers.txt'); } catch { }\\n    return null;\\n}\\n\\n/** @param {NS} ns \\n * Returns a helpful error message if we forgot to pass the ns instance to a function */\\nexport function checkNsInstance(ns, fnName = \\\"this function\\\") { if (!ns.print) throw `The first argument to ${fnName} should be a 'ns' instance.`; return ns; }\",\"filename\":\"helpers.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4.4,\"server\":\"avmnite-02h\",\"moduleSequenceNumber\":256,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"run\",\"cost\":1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"isRunning\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"ps\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}}],\"serversOnNetwork\":[\"neo-net\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":0,\"hackDifficulty\":0,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":2,\"openPortCount\":2,\"requiredHackingSkill\":202,\"serverGrowth\":0}},\".\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\".\",\"httpPortOpen\":true,\"ip\":\"85.9.8.7\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\".\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"stormtech\",\"b-and-a\",\"clarkinc\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":0,\"hackDifficulty\":0,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":4,\"openPortCount\":5,\"requiredHackingSkill\":540,\"serverGrowth\":0}},\"CSEC\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"CSEC\",\"httpPortOpen\":false,\"ip\":\"68.9.1.4\",\"isConnectedTo\":false,\"maxRam\":8,\"messages\":[\"democracy-is-dead.lit\"],\"organizationName\":\"CyberSec\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tawait ns.share()\\n}\",\"filename\":\"/Remote/share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/Remote/share.js\",\"url\":\"blob:https://danielyxie.github.io/b1385c97-8a01-4305-8519-4c6dbd6517dd\",\"moduleSequenceNumber\":745}],\"dependents\":[],\"ramUsage\":4,\"server\":\"CSEC\",\"moduleSequenceNumber\":257,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Return a formatted representation of the monetary amount using scale sympols (e.g. $6.50M)\\n * @param {number} num - The number to format\\n * @param {number=} maxSignificantFigures - (default: 6) The maximum significant figures you wish to see (e.g. 123, 12.3 and 1.23 all have 3 significant figures)\\n * @param {number=} maxDecimalPlaces - (default: 3) The maximum decimal places you wish to see, regardless of significant figures. (e.g. 12.3, 1.2, 0.1 all have 1 decimal)\\n **/\\nexport function formatMoney(num, maxSignificantFigures = 6, maxDecimalPlaces = 3) {\\n    let numberShort = formatNumberShort(num, maxSignificantFigures, maxDecimalPlaces);\\n    return num >= 0 ? \\\"$\\\" + numberShort : numberShort.replace(\\\"-\\\", \\\"-$\\\");\\n}\\n\\nconst symbols = [\\\"\\\", \\\"k\\\", \\\"m\\\", \\\"b\\\", \\\"t\\\", \\\"q\\\", \\\"Q\\\", \\\"s\\\", \\\"S\\\", \\\"o\\\", \\\"n\\\", \\\"e33\\\", \\\"e36\\\", \\\"e39\\\"];\\n\\n/**\\n * Return a formatted representation of the monetary amount using scale sympols (e.g. 6.50M) \\n * @param {number} num - The number to format\\n * @param {number=} maxSignificantFigures - (default: 6) The maximum significant figures you wish to see (e.g. 123, 12.3 and 1.23 all have 3 significant figures)\\n * @param {number=} maxDecimalPlaces - (default: 3) The maximum decimal places you wish to see, regardless of significant figures. (e.g. 12.3, 1.2, 0.1 all have 1 decimal)\\n **/\\nexport function formatNumberShort(num, maxSignificantFigures = 6, maxDecimalPlaces = 3) {\\n    for (var i = 0, sign = Math.sign(num), num = Math.abs(num); num >= 1000 && i < symbols.length; i++) num /= 1000;\\n    // TODO: A number like 9.999 once rounted to show 3 sig figs, will become 10.00, which is now 4 sig figs.\\n    return ((sign < 0) ? \\\"-\\\" : \\\"\\\") + num.toFixed(Math.max(0, Math.min(maxDecimalPlaces, maxSignificantFigures - Math.floor(1 + Math.log10(num))))) + symbols[i];\\n}\\n\\n/** Convert a shortened number back into a value */\\nexport function parseShortNumber(text = \\\"0\\\") {\\n    let parsed = Number(text);\\n    if (!isNaN(parsed)) return parsed;\\n    for (const sym of symbols.slice(1))\\n        if (text.toLowerCase().endsWith(sym))\\n            return Number.parseFloat(text.slice(0, text.length - sym.length)) * Math.pow(10, 3 * symbols.indexOf(sym));\\n    return Number.NaN;\\n}\\n\\n/**\\n * Return a number formatted with the specified number of significatnt figures or decimal places, whichever is more limiting.\\n * @param {number} num - The number to format\\n * @param {number=} minSignificantFigures - (default: 6) The minimum significant figures you wish to see (e.g. 123, 12.3 and 1.23 all have 3 significant figures)\\n * @param {number=} minDecimalPlaces - (default: 3) The minimum decimal places you wish to see, regardless of significant figures. (e.g. 12.3, 1.2, 0.1 all have 1 decimal)\\n **/\\nexport function formatNumber(num, minSignificantFigures = 3, minDecimalPlaces = 1) {\\n    return num == 0.0 ? num : num.toFixed(Math.max(minDecimalPlaces, Math.max(0, minSignificantFigures - Math.ceil(Math.log10(num)))));\\n}\\n\\n/** Formats some RAM amount as a round number of GB with thousands separators e.g. `1,028 GB` */\\nexport function formatRam(num) { return `${Math.round(num).toLocaleString()} GB`; }\\n\\n/** Return a datatime in ISO format */\\nexport function formatDateTime(datetime) { return datetime.toISOString(); }\\n\\n/** Format a duration (in milliseconds) as e.g. '1h 21m 6s' for big durations or e.g '12.5s' / '23ms' for small durations */\\nexport function formatDuration(duration) {\\n    if (duration < 1000) return `${duration.toFixed(0)}ms`\\n    const portions = [];\\n    const msInHour = 1000 * 60 * 60;\\n    const hours = Math.trunc(duration / msInHour);\\n    if (hours > 0) {\\n        portions.push(hours + 'h');\\n        duration -= (hours * msInHour);\\n    }\\n    const msInMinute = 1000 * 60;\\n    const minutes = Math.trunc(duration / msInMinute);\\n    if (minutes > 0) {\\n        portions.push(minutes + 'm');\\n        duration -= (minutes * msInMinute);\\n    }\\n    let seconds = (duration / 1000.0)\\n    // Include millisecond precision if we're on the order of seconds\\n    seconds = (hours == 0 && minutes == 0) ? seconds.toPrecision(3) : seconds.toFixed(0);\\n    if (seconds > 0) {\\n        portions.push(seconds + 's');\\n        duration -= (minutes * 1000);\\n    }\\n    return portions.join(' ');\\n}\\n\\n/** Generate a hashCode for a string that is pretty unique most of the time */\\nexport function hashCode(s) { return s.split(\\\"\\\").reduce(function (a, b) { a = ((a << 5) - a) + b.charCodeAt(0); return a & a }, 0); }\\n\\n/** @param {NS} ns **/\\nexport function disableLogs(ns, listOfLogs) { ['disableLog'].concat(...listOfLogs).forEach(log => checkNsInstance(ns, '\\\"disableLogs\\\"').disableLog(log)); }\\n\\n/** Joins all arguments as components in a path, e.g. pathJoin(\\\"foo\\\", \\\"bar\\\", \\\"/baz\\\") = \\\"foo/bar/baz\\\" **/\\nexport function pathJoin(...args) {\\n    return args.filter(s => !!s).join('/').replace(/\\\\/\\\\/+/g, '/');\\n}\\n\\n/** Gets the path for the given local file, taking into account optional subfolder relocation via git-pull.js **/\\nexport function getFilePath(file) {\\n    const subfolder = '';  // git-pull.js optionally modifies this when downloading\\n    return pathJoin(subfolder, file);\\n}\\n\\n// FUNCTIONS THAT PROVIDE ALTERNATIVE IMPLEMENTATIONS TO EXPENSIVE NS FUNCTIONS\\n// VARIATIONS ON NS.RUN\\n\\n/** @param {NS} ns\\n *  Use where a function is required to run a script and you have already referenced ns.run in your script **/\\nexport function getFnRunViaNsRun(ns) { return checkNsInstance(ns, '\\\"getFnRunViaNsRun\\\"').run; }\\n\\n/** @param {NS} ns\\n *  Use where a function is required to run a script and you have already referenced ns.exec in your script **/\\nexport function getFnRunViaNsExec(ns, host = \\\"home\\\") {\\n    checkNsInstance(ns, '\\\"getFnRunViaNsExec\\\"');\\n    return function (scriptPath, ...args) { return ns.exec(scriptPath, host, ...args); }\\n}\\n// VARIATIONS ON NS.ISRUNNING\\n\\n/** @param {NS} ns\\n *  Use where a function is required to run a script and you have already referenced ns.run in your script  */\\nexport function getFnIsAliveViaNsIsRunning(ns) { return checkNsInstance(ns, '\\\"getFnIsAliveViaNsIsRunning\\\"').isRunning; }\\n\\n/** @param {NS} ns\\n *  Use where a function is required to run a script and you have already referenced ns.exec in your script  */\\nexport function getFnIsAliveViaNsPs(ns) {\\n    checkNsInstance(ns, '\\\"getFnIsAliveViaNsPs\\\"');\\n    return function (pid, host) { return ns.ps(host).some(process => process.pid === pid); }\\n}\\n\\n/**\\n * Retrieve the result of an ns command by executing it in a temporary .js script, writing the result to a file, then shuting it down\\n * Importing incurs a maximum of 1.1 GB RAM (0 GB for ns.read, 1 GB for ns.run, 0.1 GB for ns.isRunning).\\n * Has the capacity to retry if there is a failure (e.g. due to lack of RAM available). Not recommended for performance-critical code.\\n * @param {NS} ns - The nestcript instance passed to your script's main entry point\\n * @param {string} command - The ns command that should be invoked to get the desired data (e.g. \\\"ns.getServer('home')\\\" )\\n * @param {string=} fName - (default \\\"/Temp/{commandhash}-data.txt\\\") The name of the file to which data will be written to disk by a temporary process\\n * @param {bool=} verbose - (default false) If set to true, pid and result of command are logged.\\n **/\\nexport async function getNsDataThroughFile(ns, command, fName, verbose = false, maxRetries = 5, retryDelayMs = 50) {\\n    checkNsInstance(ns, '\\\"getNsDataThroughFile\\\"');\\n    if (!verbose) disableLogs(ns, ['run', 'isRunning']);\\n    return await getNsDataThroughFile_Custom(ns, ns.run, ns.isRunning, command, fName, verbose, maxRetries, retryDelayMs);\\n}\\n\\n/**\\n * An advanced version of getNsDataThroughFile that lets you pass your own \\\"fnRun\\\" and \\\"fnIsAlive\\\" implementations to reduce RAM requirements\\n * Importing incurs no RAM (now that ns.read is free) plus whatever fnRun / fnIsAlive you provide it\\n * Has the capacity to retry if there is a failure (e.g. due to lack of RAM available). Not recommended for performance-critical code.\\n * @param {NS} ns - The nestcript instance passed to your script's main entry point\\n * @param {function} fnRun - A single-argument function used to start the new sript, e.g. `ns.run` or `(f,...args) => ns.exec(f, \\\"home\\\", ...args)`\\n * @param {function} fnIsAlive - A single-argument function used to start the new sript, e.g. `ns.isRunning` or `pid => ns.ps(\\\"home\\\").some(process => process.pid === pid)`\\n **/\\nexport async function getNsDataThroughFile_Custom(ns, fnRun, fnIsAlive, command, fName, verbose = false, maxRetries = 5, retryDelayMs = 50) {\\n    checkNsInstance(ns, '\\\"getNsDataThroughFile_Custom\\\"');\\n    if (!verbose) disableLogs(ns, ['read']);\\n    const commandHash = hashCode(command);\\n    fName = fName || `/Temp/${commandHash}-data.txt`;\\n    const fNameCommand = (fName || `/Temp/${commandHash}-command`) + '.js'\\n    // Prepare a command that will write out a new file containing the results of the command\\n    // unless it already exists with the same contents (saves time/ram to check first)\\n    // If an error occurs, it will write an empty file to avoid old results being misread.\\n    const commandToFile = `let result = \\\"\\\"; try { result = JSON.stringify(${command}); } catch { }\\n        if (ns.read(\\\"${fName}\\\") != result) await ns.write(\\\"${fName}\\\", result, 'w')`;\\n    // Run the command with auto-retries if it fails\\n    const pid = await runCommand_Custom(ns, fnRun, commandToFile, fNameCommand, false, maxRetries, retryDelayMs);\\n    // Wait for the process to complete\\n    await waitForProcessToComplete_Custom(ns, fnIsAlive, pid, verbose);\\n    if (verbose) ns.print(`Process ${pid} is done. Reading the contents of ${fName}...`);\\n    // Read the file, with auto-retries if it fails\\n    const fileData = await autoRetry(ns, () => ns.read(fName), f => f !== undefined && f !== \\\"\\\",\\n        () => `ns.read('${fName}') somehow returned undefined or an empty string`,\\n        maxRetries, retryDelayMs, undefined, verbose);\\n    if (verbose) ns.print(`Read the following data for command ${command}:\\\\n${fileData}`);\\n    return JSON.parse(fileData); // Deserialize it back into an object/array and return\\n}\\n\\n/** Evaluate an arbitrary ns command by writing it to a new script and then running or executing it.\\n * @param {NS} ns - The nestcript instance passed to your script's main entry point\\n * @param {string} command - The ns command that should be invoked to get the desired data (e.g. \\\"ns.getServer('home')\\\" )\\n * @param {string=} fileName - (default \\\"/Temp/{commandhash}-data.txt\\\") The name of the file to which data will be written to disk by a temporary process\\n * @param {bool=} verbose - (default false) If set to true, the evaluation result of the command is printed to the terminal\\n * @param {...args} args - args to be passed in as arguments to command being run as a new script.\\n */\\nexport async function runCommand(ns, command, fileName, verbose = false, maxRetries = 5, retryDelayMs = 50, ...args) {\\n    checkNsInstance(ns, '\\\"runCommand\\\"');\\n    if (!verbose) disableLogs(ns, ['run', 'sleep']);\\n    return await runCommand_Custom(ns, ns.run, command, fileName, verbose, maxRetries, retryDelayMs, ...args);\\n}\\n\\n/**\\n * An advanced version of runCommand that lets you pass your own \\\"isAlive\\\" test to reduce RAM requirements (e.g. to avoid referencing ns.isRunning)\\n * Importing incurs 0 GB RAM (assuming fnRun, fnWrite are implemented using another ns function you already reference elsewhere like ns.exec)\\n * @param {NS} ns - The nestcript instance passed to your script's main entry point\\n * @param {function} fnRun - A single-argument function used to start the new sript, e.g. `ns.run` or `(f,...args) => ns.exec(f, \\\"home\\\", ...args)`\\n **/\\nexport async function runCommand_Custom(ns, fnRun, command, fileName, verbose = false, maxRetries = 5, retryDelayMs = 50, ...args) {\\n    checkNsInstance(ns, '\\\"runCommand_Custom\\\"');\\n    let script = `import { formatMoney, formatNumberShort, formatDuration, parseShortNumber, scanAllServers } fr` + `om '${getFilePath('helpers.js')}'\\\\n` +\\n        `export async function main(ns) { try { ` +\\n        (verbose ? `let output = ${command}; ns.tprint(output)` : command) +\\n        `; } catch(err) { ns.tprint(String(err)); throw(err); } }`;\\n    fileName = fileName || `/Temp/${hashCode(command)}-command.js`;\\n    // To improve performance and save on garbage collection, we can skip writing this exact same script was previously written (common for repeatedly-queried data)\\n    if (ns.read(fileName) != script) await ns.write(fileName, script, \\\"w\\\");\\n    return await autoRetry(ns, () => fnRun(fileName, ...args), temp_pid => temp_pid !== 0,\\n        () => `Run command returned no pid. Destination: ${fileName} Command: ${command}\\\\nEnsure you have sufficient free RAM to run this temporary script.`,\\n        maxRetries, retryDelayMs, undefined, verbose);\\n}\\n\\n/**\\n * Wait for a process id to complete running\\n * Importing incurs a maximum of 0.1 GB RAM (for ns.isRunning) \\n * @param {NS} ns - The nestcript instance passed to your script's main entry point\\n * @param {int} pid - The process id to monitor\\n * @param {bool=} verbose - (default false) If set to true, pid and result of command are logged.\\n **/\\nexport async function waitForProcessToComplete(ns, pid, verbose) {\\n    checkNsInstance(ns, '\\\"waitForProcessToComplete\\\"');\\n    if (!verbose) disableLogs(ns, ['isRunning']);\\n    return await waitForProcessToComplete_Custom(ns, ns.isRunning, pid, verbose);\\n}\\n/**\\n * An advanced version of waitForProcessToComplete that lets you pass your own \\\"isAlive\\\" test to reduce RAM requirements (e.g. to avoid referencing ns.isRunning)\\n * Importing incurs 0 GB RAM (assuming fnIsAlive is implemented using another ns function you already reference elsewhere like ns.ps) \\n * @param {NS} ns - The nestcript instance passed to your script's main entry point\\n * @param {function} fnIsAlive - A single-argument function used to start the new sript, e.g. `ns.isRunning` or `pid => ns.ps(\\\"home\\\").some(process => process.pid === pid)`\\n **/\\nexport async function waitForProcessToComplete_Custom(ns, fnIsAlive, pid, verbose) {\\n    checkNsInstance(ns, '\\\"waitForProcessToComplete_Custom\\\"');\\n    if (!verbose) disableLogs(ns, ['sleep']);\\n    // Wait for the PID to stop running (cheaper than e.g. deleting (rm) a possibly pre-existing file and waiting for it to be recreated)\\n    for (var retries = 0; retries < 1000; retries++) {\\n        if (!fnIsAlive(pid)) break; // Script is done running\\n        if (verbose && retries % 100 === 0) ns.print(`Waiting for pid ${pid} to complete... (${retries})`);\\n        await ns.sleep(10);\\n    }\\n    // Make sure that the process has shut down and we haven't just stopped retrying\\n    if (fnIsAlive(pid)) {\\n        let errorMessage = `run-command pid ${pid} is running much longer than expected. Max retries exceeded.`;\\n        ns.print(errorMessage);\\n        throw errorMessage;\\n    }\\n}\\n\\n/** Helper to retry something that failed temporarily (can happen when e.g. we temporarily don't have enough RAM to run)\\n * @param {NS} ns - The nestcript instance passed to your script's main entry point */\\nexport async function autoRetry(ns, fnFunctionThatMayFail, fnSuccessCondition, errorContext = \\\"Success condition not met\\\",\\n    maxRetries = 5, initialRetryDelayMs = 50, backoffRate = 3, verbose = false) {\\n    checkNsInstance(ns, '\\\"autoRetry\\\"');\\n    let retryDelayMs = initialRetryDelayMs;\\n    while (maxRetries-- > 0) {\\n        try {\\n            const result = await fnFunctionThatMayFail()\\n            if (!fnSuccessCondition(result)) throw typeof errorContext === 'string' ? errorContext : errorContext();\\n            return result;\\n        }\\n        catch (error) {\\n            const fatal = maxRetries === 0;\\n            const errorLog = `${fatal ? 'FAIL' : 'WARN'}: (${maxRetries} retries remaining): ${String(error)}`\\n            log(ns, errorLog, fatal, !verbose ? undefined : (fatal ? 'error' : 'warning'))\\n            if (fatal) throw error;\\n            await ns.sleep(retryDelayMs);\\n            retryDelayMs *= backoffRate;\\n        }\\n    }\\n}\\n\\n/** Helper to log a message, and optionally also tprint it and toast it\\n * @param {NS} ns - The nestcript instance passed to your script's main entry point */\\nexport function log(ns, message = \\\"\\\", alsoPrintToTerminal = false, toastStyle = \\\"\\\", maxToastLength = 100) {\\n    checkNsInstance(ns, '\\\"log\\\"');\\n    ns.print(message);\\n    if (alsoPrintToTerminal) ns.tprint(message);\\n    if (toastStyle) ns.toast(message.length <= maxToastLength ? message : message.substring(0, maxToastLength - 3) + \\\"...\\\", toastStyle);\\n    return message;\\n}\\n\\n/** Helper to get a list of all hostnames on the network\\n * @param {NS} ns - The nestcript instance passed to your script's main entry point */\\nexport function scanAllServers(ns) {\\n    checkNsInstance(ns, '\\\"scanAllServers\\\"');\\n    let discoveredHosts = []; // Hosts (a.k.a. servers) we have scanned\\n    let hostsToScan = [\\\"home\\\"]; // Hosts we know about, but have no yet scanned\\n    let infiniteLoopProtection = 9999; // In case you mess with this code, this should save you from getting stuck\\n    while (hostsToScan.length > 0 && infiniteLoopProtection-- > 0) { // Loop until the list of hosts to scan is empty\\n        let hostName = hostsToScan.pop(); // Get the next host to be scanned\\n        for (const connectedHost of ns.scan(hostName)) // \\\"scan\\\" (list all hosts connected to this one)\\n            if (!discoveredHosts.includes(connectedHost)) // If we haven't already scanned this host\\n                hostsToScan.push(connectedHost); // Add it to the queue of hosts to be scanned\\n        discoveredHosts.push(hostName); // Mark this host as \\\"scanned\\\"\\n    }\\n    return discoveredHosts; // The list of scanned hosts should now be the set of all hosts in the game!\\n}\\n\\n/** @param {NS} ns \\n * Get a dictionary of active source files, taking into account the current active bitnode as well. **/\\nexport async function getActiveSourceFiles(ns) {\\n    return await getActiveSourceFiles_Custom(ns, getNsDataThroughFile);\\n}\\n\\n/** @param {NS} ns \\n * getActiveSourceFiles Helper that allows the user to pass in their chosen implementation of getNsDataThroughFile to minimize RAM usage **/\\nexport async function getActiveSourceFiles_Custom(ns, fnGetNsDataThroughFile) {\\n    checkNsInstance(ns, '\\\"getActiveSourceFiles\\\"');\\n    let tempFile = '/Temp/owned-source-files.txt';\\n    // Find out what source files the user has unlocked\\n    let dictSourceFiles;\\n    try { await fnGetNsDataThroughFile(ns, `Object.fromEntries(ns.getOwnedSourceFiles().map(sf => [sf.n, sf.lvl]))`, tempFile); } catch { }\\n    if (!dictSourceFiles) { // Bit of a hack, but if RAM is so low that this fails, we can fallback to using an older version of this file, and even assuming we have no source files.\\n        dictSourceFiles = ns.read(tempFile)\\n        dictSourceFiles = dictSourceFiles ? JSON.parse(dictSourceFiles) : {};\\n    }\\n    // If the user is currently in a given bitnode, they will have its features unlocked\\n    dictSourceFiles[(await fnGetNsDataThroughFile(ns, 'ns.getPlayer()', '/Temp/player-info.txt')).bitNodeN] = 3;\\n    return dictSourceFiles;\\n}\\n\\n/** @param {NS} ns \\n * Return bitnode multiplers, or null if they cannot be accessed. **/\\nexport async function tryGetBitNodeMultipliers(ns) {\\n    return await tryGetBitNodeMultipliers_Custom(ns, getNsDataThroughFile);\\n}\\n\\n/** @param {NS} ns\\n * tryGetBitNodeMultipliers Helper that allows the user to pass in their chosen implementation of getNsDataThroughFile to minimize RAM usage **/\\nexport async function tryGetBitNodeMultipliers_Custom(ns, fnGetNsDataThroughFile) {\\n    checkNsInstance(ns, '\\\"tryGetBitNodeMultipliers\\\"');\\n    let canGetBitNodeMultipliers = false;\\n    try { canGetBitNodeMultipliers = 5 in (await getActiveSourceFiles_Custom(ns, fnGetNsDataThroughFile)); } catch { }\\n    if (!canGetBitNodeMultipliers) return null;\\n    try { return await fnGetNsDataThroughFile(ns, 'ns.getBitNodeMultipliers()', '/Temp/bitnode-multipliers.txt'); } catch { }\\n    return null;\\n}\\n\\n/** @param {NS} ns \\n * Returns a helpful error message if we forgot to pass the ns instance to a function */\\nexport function checkNsInstance(ns, fnName = \\\"this function\\\") { if (!ns.print) throw `The first argument to ${fnName} should be a 'ns' instance.`; return ns; }\",\"filename\":\"helpers.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4.4,\"server\":\"CSEC\",\"moduleSequenceNumber\":258,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"run\",\"cost\":1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"isRunning\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"ps\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}}],\"serversOnNetwork\":[\"sigma-cosmetics\",\"phantasy\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":0,\"hackDifficulty\":0,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":1,\"openPortCount\":2,\"requiredHackingSkill\":51,\"serverGrowth\":0}},\"The-Cave\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"The-Cave\",\"httpPortOpen\":true,\"ip\":\"29.9.3.1\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"alpha-omega.lit\"],\"organizationName\":\"Helios\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"blade\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":0,\"hackDifficulty\":0,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":925,\"serverGrowth\":0}},\"w0r1d_d43m0n\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"w0r1d_d43m0n\",\"httpPortOpen\":false,\"ip\":\"74.5.4.3\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"w0r1d_d43m0n\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":0,\"hackDifficulty\":0,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":6000,\"serverGrowth\":0}},\"hacknet-node-0\":{\"ctor\":\"HacknetServer\",\"data\":{\"contracts\":[],\"cpuCores\":13,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"hacknet-node-0\",\"httpPortOpen\":false,\"ip\":\"28.1.4.4\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"cache\":1,\"cores\":13,\"hashCapacity\":64,\"hashRate\":1.3600437285045288,\"level\":50,\"onlineTimeSeconds\":16028.400000000112,\"totalHashesGenerated\":15383.698740324842}},\"darkweb\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"darkweb\",\"httpPortOpen\":true,\"ip\":\"42.1.1.0\",\"isConnectedTo\":false,\"maxRam\":1,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"hacknet-node-1\":{\"ctor\":\"HacknetServer\",\"data\":{\"contracts\":[],\"cpuCores\":13,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"hacknet-node-1\",\"httpPortOpen\":false,\"ip\":\"99.4.9.4\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"cache\":1,\"cores\":13,\"hashCapacity\":64,\"hashRate\":1.3600437285045288,\"level\":50,\"onlineTimeSeconds\":16027.400000000112,\"totalHashesGenerated\":15383.117665497735}},\"hacknet-node-2\":{\"ctor\":\"HacknetServer\",\"data\":{\"contracts\":[],\"cpuCores\":13,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"hacknet-node-2\",\"httpPortOpen\":false,\"ip\":\"35.9.7.5\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"cache\":1,\"cores\":13,\"hashCapacity\":64,\"hashRate\":1.3600437285045288,\"level\":50,\"onlineTimeSeconds\":16026.40000000011,\"totalHashesGenerated\":15382.547837396723}},\"hacknet-node-3\":{\"ctor\":\"HacknetServer\",\"data\":{\"contracts\":[],\"cpuCores\":13,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"hacknet-node-3\",\"httpPortOpen\":false,\"ip\":\"33.1.9.0\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"cache\":1,\"cores\":13,\"hashCapacity\":64,\"hashRate\":1.3600437285045288,\"level\":50,\"onlineTimeSeconds\":16018.40000000011,\"totalHashesGenerated\":15381.971931385966}},\"hacknet-node-4\":{\"ctor\":\"HacknetServer\",\"data\":{\"contracts\":[],\"cpuCores\":13,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"hacknet-node-4\",\"httpPortOpen\":false,\"ip\":\"38.1.6.0\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"cache\":1,\"cores\":13,\"hashCapacity\":64,\"hashRate\":1.3600437285045288,\"level\":50,\"onlineTimeSeconds\":15999.200000000112,\"totalHashesGenerated\":15375.49580823902}},\"hacknet-node-5\":{\"ctor\":\"HacknetServer\",\"data\":{\"contracts\":[],\"cpuCores\":13,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"hacknet-node-5\",\"httpPortOpen\":false,\"ip\":\"39.4.8.9\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"cache\":1,\"cores\":13,\"hashCapacity\":64,\"hashRate\":1.3600437285045288,\"level\":50,\"onlineTimeSeconds\":15657.600000000119,\"totalHashesGenerated\":15353.211038689162}},\"hacknet-node-6\":{\"ctor\":\"HacknetServer\",\"data\":{\"contracts\":[],\"cpuCores\":13,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"hacknet-node-6\",\"httpPortOpen\":false,\"ip\":\"73.2.4.5\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"cache\":1,\"cores\":13,\"hashCapacity\":64,\"hashRate\":1.3600437285045288,\"level\":50,\"onlineTimeSeconds\":15582.000000000116,\"totalHashesGenerated\":14875.923242264154}},\"hacknet-node-7\":{\"ctor\":\"HacknetServer\",\"data\":{\"contracts\":[],\"cpuCores\":13,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"hacknet-node-7\",\"httpPortOpen\":false,\"ip\":\"13.4.0.3\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"cache\":1,\"cores\":13,\"hashCapacity\":64,\"hashRate\":1.3600437285045288,\"level\":50,\"onlineTimeSeconds\":15555.000000000116,\"totalHashesGenerated\":13072.390739758737}},\"hacknet-node-8\":{\"ctor\":\"HacknetServer\",\"data\":{\"contracts\":[],\"cpuCores\":13,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"hacknet-node-8\",\"httpPortOpen\":false,\"ip\":\"35.0.7.5\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"cache\":1,\"cores\":13,\"hashCapacity\":64,\"hashRate\":1.3600437285045288,\"level\":50,\"onlineTimeSeconds\":12355.800000000198,\"totalHashesGenerated\":13011.542959349083}},\"hacknet-node-9\":{\"ctor\":\"HacknetServer\",\"data\":{\"contracts\":[],\"cpuCores\":13,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"hacknet-node-9\",\"httpPortOpen\":false,\"ip\":\"4.7.1.8\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"cache\":1,\"cores\":13,\"hashCapacity\":64,\"hashRate\":1.3328428539344384,\"level\":49,\"onlineTimeSeconds\":3545.9999999999873,\"totalHashesGenerated\":4070.6078080752054}}}","CompaniesSave":"{\"ECorp\":{\"ctor\":\"Company\",\"data\":{\"name\":\"ECorp\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":3,\"salaryMultiplier\":3,\"jobStatReqOffset\":249,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.002,\"isMegacorp\":false}},\"MegaCorp\":{\"ctor\":\"Company\",\"data\":{\"name\":\"MegaCorp\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":3,\"salaryMultiplier\":3,\"jobStatReqOffset\":249,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.002,\"isMegacorp\":false}},\"Bachman & Associates\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Bachman & Associates\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.6,\"salaryMultiplier\":2.6,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.002,\"isMegacorp\":false}},\"Blade Industries\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Blade Industries\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.75,\"salaryMultiplier\":2.75,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.002,\"isMegacorp\":false}},\"NWO\":{\"ctor\":\"Company\",\"data\":{\"name\":\"NWO\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.75,\"salaryMultiplier\":2.75,\"jobStatReqOffset\":249,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.002,\"isMegacorp\":false}},\"Clarke Incorporated\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Clarke Incorporated\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.25,\"salaryMultiplier\":2.25,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.002,\"isMegacorp\":false}},\"OmniTek Incorporated\":{\"ctor\":\"Company\",\"data\":{\"name\":\"OmniTek Incorporated\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.25,\"salaryMultiplier\":2.25,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.002,\"isMegacorp\":false}},\"Four Sigma\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Four Sigma\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.5,\"salaryMultiplier\":2.5,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.002,\"isMegacorp\":false}},\"KuaiGong International\":{\"ctor\":\"Company\",\"data\":{\"name\":\"KuaiGong International\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.2,\"salaryMultiplier\":2.2,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.002,\"isMegacorp\":false}},\"Fulcrum Technologies\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Fulcrum Technologies\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true},\"expMultiplier\":2,\"salaryMultiplier\":2,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.002,\"isMegacorp\":false}},\"Storm Technologies\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Storm Technologies\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true},\"expMultiplier\":1.8,\"salaryMultiplier\":1.8,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.002,\"isMegacorp\":false}},\"DefComm\":{\"ctor\":\"Company\",\"data\":{\"name\":\"DefComm\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.75,\"salaryMultiplier\":1.75,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.002,\"isMegacorp\":false}},\"Helios Labs\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Helios Labs\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.8,\"salaryMultiplier\":1.8,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.002,\"isMegacorp\":false}},\"VitaLife\":{\"ctor\":\"Company\",\"data\":{\"name\":\"VitaLife\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.8,\"salaryMultiplier\":1.8,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.002,\"isMegacorp\":false}},\"Icarus Microsystems\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Icarus Microsystems\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.9,\"salaryMultiplier\":1.9,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.002,\"isMegacorp\":false}},\"Universal Energy\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Universal Energy\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":2,\"salaryMultiplier\":2,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.002,\"isMegacorp\":false}},\"Galactic Cybersystems\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Galactic Cybersystems\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.9,\"salaryMultiplier\":1.9,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.002,\"isMegacorp\":false}},\"AeroCorp\":{\"ctor\":\"Company\",\"data\":{\"name\":\"AeroCorp\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Operations Manager\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.7,\"salaryMultiplier\":1.7,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.002,\"isMegacorp\":false}},\"Omnia Cybersystems\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Omnia Cybersystems\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Operations Manager\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.7,\"salaryMultiplier\":1.7,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.002,\"isMegacorp\":false}},\"Solaris Space Systems\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Solaris Space Systems\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Operations Manager\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.7,\"salaryMultiplier\":1.7,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.002,\"isMegacorp\":false}},\"DeltaOne\":{\"ctor\":\"Company\",\"data\":{\"name\":\"DeltaOne\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Operations Manager\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.6,\"salaryMultiplier\":1.6,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.002,\"isMegacorp\":false}},\"Global Pharmaceuticals\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Global Pharmaceuticals\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.8,\"salaryMultiplier\":1.8,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.002,\"isMegacorp\":false}},\"Nova Medical\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Nova Medical\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.75,\"salaryMultiplier\":1.75,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.002,\"isMegacorp\":false}},\"Central Intelligence Agency\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Central Intelligence Agency\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true,\"Field Agent\":true,\"Secret Agent\":true,\"Special Operative\":true},\"expMultiplier\":2,\"salaryMultiplier\":2,\"jobStatReqOffset\":149,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.002,\"isMegacorp\":false}},\"National Security Agency\":{\"ctor\":\"Company\",\"data\":{\"name\":\"National Security Agency\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true,\"Field Agent\":true,\"Secret Agent\":true,\"Special Operative\":true},\"expMultiplier\":2,\"salaryMultiplier\":2,\"jobStatReqOffset\":149,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.002,\"isMegacorp\":false}},\"Watchdog Security\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Watchdog Security\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true,\"Field Agent\":true,\"Secret Agent\":true,\"Special Operative\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.5,\"salaryMultiplier\":1.5,\"jobStatReqOffset\":124,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.002,\"isMegacorp\":false}},\"LexoCorp\":{\"ctor\":\"Company\",\"data\":{\"name\":\"LexoCorp\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.4,\"salaryMultiplier\":1.4,\"jobStatReqOffset\":99,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.002,\"isMegacorp\":false}},\"Rho Construction\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Rho Construction\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true},\"expMultiplier\":1.3,\"salaryMultiplier\":1.3,\"jobStatReqOffset\":49,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.002,\"isMegacorp\":false}},\"Alpha Enterprises\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Alpha Enterprises\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.5,\"salaryMultiplier\":1.5,\"jobStatReqOffset\":99,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.002,\"isMegacorp\":false}},\"Aevum Police Headquarters\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Aevum Police Headquarters\",\"info\":\"\",\"companyPositions\":{\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true},\"expMultiplier\":1.3,\"salaryMultiplier\":1.3,\"jobStatReqOffset\":99,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.002,\"isMegacorp\":false}},\"SysCore Securities\":{\"ctor\":\"Company\",\"data\":{\"name\":\"SysCore Securities\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true},\"expMultiplier\":1.3,\"salaryMultiplier\":1.3,\"jobStatReqOffset\":124,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.002,\"isMegacorp\":false}},\"CompuTek\":{\"ctor\":\"Company\",\"data\":{\"name\":\"CompuTek\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true},\"expMultiplier\":1.2,\"salaryMultiplier\":1.2,\"jobStatReqOffset\":74,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.002,\"isMegacorp\":false}},\"NetLink Technologies\":{\"ctor\":\"Company\",\"data\":{\"name\":\"NetLink Technologies\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true},\"expMultiplier\":1.2,\"salaryMultiplier\":1.2,\"jobStatReqOffset\":99,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.002,\"isMegacorp\":false}},\"Carmichael Security\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Carmichael Security\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Field Agent\":true,\"Secret Agent\":true,\"Special Operative\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.2,\"salaryMultiplier\":1.2,\"jobStatReqOffset\":74,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.002,\"isMegacorp\":false}},\"FoodNStuff\":{\"ctor\":\"Company\",\"data\":{\"name\":\"FoodNStuff\",\"info\":\"\",\"companyPositions\":{\"Employee\":true,\"Part-time Employee\":true},\"expMultiplier\":1,\"salaryMultiplier\":1,\"jobStatReqOffset\":0,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.002,\"isMegacorp\":false}},\"Joe's Guns\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Joe's Guns\",\"info\":\"\",\"companyPositions\":{\"Employee\":true,\"Part-time Employee\":true},\"expMultiplier\":1,\"salaryMultiplier\":1,\"jobStatReqOffset\":0,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.002,\"isMegacorp\":false}},\"Omega Software\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Omega Software\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true},\"expMultiplier\":1.1,\"salaryMultiplier\":1.1,\"jobStatReqOffset\":49,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.002,\"isMegacorp\":false}},\"Noodle Bar\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Noodle Bar\",\"info\":\"\",\"companyPositions\":{\"Waiter\":true,\"Part-time Waiter\":true},\"expMultiplier\":1,\"salaryMultiplier\":1,\"jobStatReqOffset\":0,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.002,\"isMegacorp\":false}}}","FactionsSave":"{\"Illuminati\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Synthetic Heart\",\"Synfibril Muscle\",\"NEMEAN Subdermal Weave\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"NeuroFlux Governor\",\"QLink\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Illuminati\",\"playerReputation\":0}},\"Daedalus\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"Synthetic Heart\",\"Synfibril Muscle\",\"NEMEAN Subdermal Weave\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"NeuroFlux Governor\",\"The Red Pill\"],\"favor\":0,\"isBanned\":false,\"isMember\":true,\"name\":\"Daedalus\",\"playerReputation\":30.782075641661375}},\"The Covenant\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Augmented Targeting III\",\"Synthetic Heart\",\"Synfibril Muscle\",\"Combat Rib III\",\"NEMEAN Subdermal Weave\",\"Graphene Bone Lacings\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"NeuroFlux Governor\",\"SPTN-97 Gene Modification\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"The Covenant\",\"playerReputation\":0}},\"ECorp\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Graphene Bionic Spine Upgrade\",\"Graphene Bionic Legs Upgrade\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"PC Direct-Neural Interface\",\"PC Direct-Neural Interface Optimization Submodule\",\"NeuroFlux Governor\",\"ECorp HVMind Implant\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"ECorp\",\"playerReputation\":0}},\"MegaCorp\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Graphene Bionic Legs Upgrade\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"ADR-V1 Pheromone Gene\",\"NeuroFlux Governor\",\"CordiARC Fusion Reactor\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"MegaCorp\",\"playerReputation\":0}},\"Bachman & Associates\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Enhanced Social Interaction Implant\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"Speech Enhancement\",\"FocusWire\",\"ADR-V2 Pheromone Gene\",\"NeuroFlux Governor\",\"SmartJaw\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Bachman & Associates\",\"playerReputation\":0}},\"Blade Industries\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Synfibril Muscle\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Nanofiber Weave\",\"Bionic Spine\",\"Bionic Legs\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"PC Direct-Neural Interface\",\"PC Direct-Neural Interface Optimization Submodule\",\"NeuroFlux Governor\",\"HyperSight Corneal Implant\",\"Neotra\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Blade Industries\",\"playerReputation\":0}},\"NWO\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Synthetic Heart\",\"Synfibril Muscle\",\"Enhanced Social Interaction Implant\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"ADR-V1 Pheromone Gene\",\"NeuroFlux Governor\",\"Neurotrainer III\",\"Power Recirculation Core\",\"Xanipher\",\"Hydroflame Left Arm\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"NWO\",\"playerReputation\":0}},\"Clarke Incorporated\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Enhanced Social Interaction Implant\",\"Neuralstimulator\",\"Neuronal Densification\",\"Nuoptimal Nootropic Injector Implant\",\"Speech Enhancement\",\"FocusWire\",\"ADR-V2 Pheromone Gene\",\"NeuroFlux Governor\",\"nextSENS Gene Modification\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Clarke Incorporated\",\"playerReputation\":0}},\"OmniTek Incorporated\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Nanofiber Weave\",\"Bionic Spine\",\"Bionic Legs\",\"Enhanced Social Interaction Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"PC Direct-Neural Interface\",\"NeuroFlux Governor\",\"OmniTek InfoLoad\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"OmniTek Incorporated\",\"playerReputation\":0}},\"Four Sigma\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Enhanced Social Interaction Implant\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"Speech Enhancement\",\"FocusWire\",\"PC Direct-Neural Interface\",\"ADR-V1 Pheromone Gene\",\"ADR-V2 Pheromone Gene\",\"NeuroFlux Governor\",\"Neurotrainer III\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Four Sigma\",\"playerReputation\":0}},\"KuaiGong International\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Synthetic Heart\",\"Synfibril Muscle\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Bionic Spine\",\"Bionic Legs\",\"Embedded Netburner Module Core V2 Upgrade\",\"Speech Enhancement\",\"FocusWire\",\"NeuroFlux Governor\",\"HyperSight Corneal Implant\",\"Photosynthetic Cells\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"KuaiGong International\",\"playerReputation\":0}},\"Fulcrum Secret Technologies\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Synthetic Heart\",\"Synfibril Muscle\",\"Nanofiber Weave\",\"NEMEAN Subdermal Weave\",\"Graphene Bone Lacings\",\"Graphene Bionic Spine Upgrade\",\"Graphene Bionic Legs Upgrade\",\"Artificial Bio-neural Network Implant\",\"Enhanced Myelin Sheathing\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"PC Direct-Neural Interface Optimization Submodule\",\"PC Direct-Neural Interface NeuroNet Injector\",\"NeuroFlux Governor\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Fulcrum Secret Technologies\",\"playerReputation\":0}},\"BitRunners\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"Artificial Bio-neural Network Implant\",\"Enhanced Myelin Sheathing\",\"DataJack\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Neural Accelerator\",\"Cranial Signal Processors - Gen III\",\"Cranial Signal Processors - Gen IV\",\"Cranial Signal Processors - Gen V\",\"NeuroFlux Governor\",\"Neurotrainer II\",\"BitRunners Neurolink\"],\"favor\":50.1331,\"isBanned\":false,\"isMember\":true,\"name\":\"BitRunners\",\"playerReputation\":1220439.8583048654}},\"The Black Hand\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"Artificial Synaptic Potentiation\",\"Enhanced Myelin Sheathing\",\"DataJack\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Neuralstimulator\",\"Cranial Signal Processors - Gen III\",\"Cranial Signal Processors - Gen IV\",\"NeuroFlux Governor\",\"The Black Hand\"],\"favor\":215.0713,\"isBanned\":false,\"isMember\":true,\"name\":\"The Black Hand\",\"playerReputation\":3401558.710823558}},\"NiteSec\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"BitWire\",\"Artificial Synaptic Potentiation\",\"Neural-Retention Enhancement\",\"DataJack\",\"Embedded Netburner Module\",\"Cranial Signal Processors - Gen II\",\"Cranial Signal Processors - Gen III\",\"NeuroFlux Governor\",\"Neurotrainer II\",\"CRTX42-AA Gene Modification\"],\"favor\":51.1359,\"isBanned\":false,\"isMember\":true,\"name\":\"NiteSec\",\"playerReputation\":405187.8262022979}},\"Aevum\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"Wired Reflexes\",\"Speech Processor Implant\",\"Synaptic Enhancement Implant\",\"Neuralstimulator\",\"NeuroFlux Governor\",\"Neurotrainer I\",\"PCMatrix\"],\"favor\":52.9079,\"isBanned\":false,\"isMember\":true,\"name\":\"Aevum\",\"playerReputation\":1805.388401435093}},\"Chongqing\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Speech Processor Implant\",\"DataJack\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"NeuroFlux Governor\",\"Neuregen Gene Modification\"],\"favor\":0,\"isBanned\":true,\"isMember\":false,\"name\":\"Chongqing\",\"playerReputation\":0}},\"Ishima\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Augmented Targeting I\",\"Combat Rib I\",\"Wired Reflexes\",\"Speech Processor Implant\",\"Neuralstimulator\",\"NeuroFlux Governor\",\"INFRARET Enhancement\"],\"favor\":0,\"isBanned\":true,\"isMember\":false,\"name\":\"Ishima\",\"playerReputation\":0}},\"New Tokyo\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Speech Processor Implant\",\"DataJack\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"NeuroFlux Governor\",\"NutriGen Implant\"],\"favor\":0,\"isBanned\":true,\"isMember\":false,\"name\":\"New Tokyo\",\"playerReputation\":0}},\"Sector-12\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"Augmented Targeting I\",\"Augmented Targeting II\",\"Wired Reflexes\",\"Speech Processor Implant\",\"Neuralstimulator\",\"NeuroFlux Governor\",\"CashRoot Starter Kit\"],\"favor\":60.8768,\"isBanned\":false,\"isMember\":true,\"name\":\"Sector-12\",\"playerReputation\":1618051.5775069941}},\"Volhaven\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Combat Rib I\",\"Combat Rib II\",\"Wired Reflexes\",\"Speech Processor Implant\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"NeuroFlux Governor\",\"DermaForce Particle Barrier\"],\"favor\":0,\"isBanned\":true,\"isMember\":false,\"name\":\"Volhaven\",\"playerReputation\":0}},\"Speakers for the Dead\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Unstable Circadian Modulator\",\"Synthetic Heart\",\"Synfibril Muscle\",\"Nanofiber Weave\",\"Wired Reflexes\",\"Bionic Spine\",\"Bionic Legs\",\"Speech Enhancement\",\"The Shadow's Simulacrum\",\"NeuroFlux Governor\",\"Graphene BrachiBlades Upgrade\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Speakers for the Dead\",\"playerReputation\":0}},\"The Dark Army\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"HemoRecirculator\",\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Nanofiber Weave\",\"Wired Reflexes\",\"The Shadow's Simulacrum\",\"NeuroFlux Governor\",\"Power Recirculation Core\",\"Graphene Bionic Arms Upgrade\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"The Dark Army\",\"playerReputation\":0}},\"The Syndicate\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"HemoRecirculator\",\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Nanofiber Weave\",\"NEMEAN Subdermal Weave\",\"Wired Reflexes\",\"Bionic Spine\",\"Bionic Legs\",\"ADR-V1 Pheromone Gene\",\"The Shadow's Simulacrum\",\"NeuroFlux Governor\",\"Power Recirculation Core\",\"BrachiBlades\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"The Syndicate\",\"playerReputation\":0}},\"Silhouette\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Speech Processor Implant\",\"TITN-41 Gene-Modification Injection\",\"ADR-V2 Pheromone Gene\",\"NeuroFlux Governor\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Silhouette\",\"playerReputation\":0}},\"Tetrads\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"HemoRecirculator\",\"NeuroFlux Governor\",\"LuminCloaking-V1 Skin Implant\",\"LuminCloaking-V2 Skin Implant\",\"Power Recirculation Core\",\"Bionic Arms\"],\"favor\":50.1791,\"isBanned\":false,\"isMember\":false,\"name\":\"Tetrads\",\"playerReputation\":0}},\"Slum Snakes\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"Augmented Targeting I\",\"Combat Rib I\",\"Wired Reflexes\",\"NeuroFlux Governor\",\"LuminCloaking-V1 Skin Implant\",\"LuminCloaking-V2 Skin Implant\",\"SmartSonar Implant\"],\"favor\":50.1844,\"isBanned\":false,\"isMember\":true,\"name\":\"Slum Snakes\",\"playerReputation\":1219361.9223450858}},\"Netburners\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"Hacknet Node CPU Architecture Neural-Upload\",\"Hacknet Node Cache Architecture Neural-Upload\",\"Hacknet Node NIC Architecture Neural-Upload\",\"Hacknet Node Kernel Direct-Neural Interface\",\"Hacknet Node Core Direct-Neural Interface\",\"NeuroFlux Governor\"],\"favor\":62.4814,\"isBanned\":false,\"isMember\":true,\"name\":\"Netburners\",\"playerReputation\":1590940.6300374935}},\"Tian Di Hui\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Nanofiber Weave\",\"Wired Reflexes\",\"Speech Processor Implant\",\"Nuoptimal Nootropic Injector Implant\",\"Speech Enhancement\",\"ADR-V1 Pheromone Gene\",\"NeuroFlux Governor\",\"Social Negotiation Assistant (S.N.A)\",\"Neuroreceptor Management Implant\"],\"favor\":129.2155,\"isBanned\":false,\"isMember\":false,\"name\":\"Tian Di Hui\",\"playerReputation\":0}},\"CyberSec\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"BitWire\",\"Synaptic Enhancement Implant\",\"Cranial Signal Processors - Gen I\",\"Cranial Signal Processors - Gen II\",\"NeuroFlux Governor\",\"Neurotrainer I\"],\"favor\":56.2133,\"isBanned\":false,\"isMember\":true,\"name\":\"CyberSec\",\"playerReputation\":1400180.679082522}},\"Bladeburners\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"EsperTech Bladeburner Eyewear\",\"EMS-4 Recombination\",\"ORION-MKIV Shoulder\",\"Hyperion Plasma Cannon V1\",\"Hyperion Plasma Cannon V2\",\"GOLEM Serum\",\"Vangelis Virus\",\"Vangelis Virus 3.0\",\"I.N.T.E.R.L.I.N.K.E.D\",\"Blade's Runners\",\"BLADE-51b Tesla Armor\",\"BLADE-51b Tesla Armor: Power Cells Upgrade\",\"BLADE-51b Tesla Armor: Energy Shielding Upgrade\",\"BLADE-51b Tesla Armor: Unibeam Upgrade\",\"BLADE-51b Tesla Armor: Omnibeam Upgrade\",\"BLADE-51b Tesla Armor: IPU Upgrade\",\"The Blade's Simulacrum\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Bladeburners\",\"playerReputation\":0}},\"Church of the Machine God\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Stanek's Gift - Genesis\",\"Stanek's Gift - Awakening\",\"Stanek's Gift - Serenity\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Church of the Machine God\",\"playerReputation\":0}}}","AliasesSave":"{\"vi\":\"nano\",\"cl\":\"cls\",\"start\":\"run daemon.js -s --tail\"}","GlobalAliasesSave":"{}","MessagesSave":"{\"j0.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"j0.msg\",\"msg\":\"I know you can sense it. I know you're searching for it. It's why you spend night after night at your computer. <br><br>It's real, I've seen it. And I can help you find it. But not right now. You're not ready yet.<br><br>Use this program to track your progress<br><br>The fl1ght.exe program was added to your home computer<br><br>-jump3R\",\"recvd\":true}},\"j1.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"j1.msg\",\"msg\":\"Soon you will be contacted by a hacking group known as CyberSec. They can help you with your search. <br><br>You should join them, garner their favor, and exploit them for their Augmentations. But do not trust them. They are not what they seem. No one is.<br><br>-jump3R\",\"recvd\":true}},\"j2.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"j2.msg\",\"msg\":\"Do not try to save the world. There is no world to save. If you want to find the truth, worry only about yourself. Ethics and morals will get you killed. <br><br>Watch out for a hacking group known as NiteSec.<br><br>-jump3R\",\"recvd\":true}},\"j3.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"j3.msg\",\"msg\":\"You must learn to walk before you can run. And you must run before you can fly. Look for the black hand. <br><br>I.I.I.I <br><br>-jump3R\",\"recvd\":true}},\"j4.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"j4.msg\",\"msg\":\"To find what you are searching for, you must understand the bits. The bits are all around us. The runners will help you.<br><br>-jump3R\",\"recvd\":true}},\"csec-test.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"csec-test.msg\",\"msg\":\"We've been watching you. Your skills are very impressive. But you're wasting your talents. If you join us, you can put your skills to good use and change the world for the better. If you join us, we can unlock your full potential. <br><br>But first, you must pass our test. Find and install the backdoor on our server. <br><br>-CyberSec\",\"recvd\":true}},\"nitesec-test.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"nitesec-test.msg\",\"msg\":\"People say that the corrupted governments and corporations rule the world. Yes, maybe they do. But do you know who everyone really fears? People like us. Because they can't hide from us. Because they can't fight shadows and ideas with bullets. <br><br>Join us, and people will fear you, too. <br><br>Find and install the backdoor on our server. Then, we will contact you again.<br><br>-NiteSec\",\"recvd\":true}},\"19dfj3l1nd.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"19dfj3l1nd.msg\",\"msg\":\"We know what you are doing. We know what drives you. We know what you are looking for. <br><br> We can help you find the answers.<br><br>run4theh111z\",\"recvd\":true}},\"icarus.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"icarus.msg\",\"msg\":\"@)(#V%*N)@(#*)*C)@#%*)*V)@#(*%V@)(#VN%*)@#(*%<br>)@B(*#%)@)M#B*%V)____FIND___#$@)#%(B*)@#(*%B)<br>@_#(%_@#M(BDSPOMB__THE-CAVE_#)$(*@#$)@#BNBEGB<br>DFLSMFVMV)#@($*)@#*$MV)@#(*$V)M#(*$)M@(#*VM$)\",\"recvd\":false}}}","StockMarketSave":"{\"lastUpdate\":0,\"Orders\":{},\"storedCycles\":0,\"ticksUntilCycle\":0}","SettingsSave":"{\"ActiveScriptsServerPageSize\":100,\"ActiveScriptsScriptPageSize\":10,\"AutosaveInterval\":30,\"CodeInstructionRunTime\":5,\"DisableASCIIArt\":false,\"DisableHotkeys\":false,\"DisableTextEffects\":false,\"DisableOverviewProgressBars\":false,\"EnableBashHotkeys\":false,\"TimestampsFormat\":\"\",\"Locale\":\"en\",\"MaxLogCapacity\":500,\"MaxPortCapacity\":50,\"MaxTerminalCapacity\":500,\"OwnedAugmentationsOrder\":0,\"PurchaseAugmentationsOrder\":0,\"SaveGameOnFileSave\":true,\"SuppressBuyAugmentationConfirmation\":true,\"SuppressFactionInvites\":false,\"SuppressMessages\":false,\"SuppressTravelConfirmation\":true,\"SuppressBladeburnerPopup\":false,\"SuppressTIXPopup\":false,\"SuppressSavedGameToast\":true,\"UseIEC60027_2\":true,\"ExcludeRunningScriptsFromSave\":false,\"IsSidebarOpened\":true,\"MonacoTheme\":\"monokai\",\"MonacoInsertSpaces\":true,\"MonacoFontSize\":16,\"MonacoVim\":false,\"MonacoWordWrap\":\"off\",\"theme\":{\"primarylight\":\"#0f0\",\"primary\":\"#0c0\",\"primarydark\":\"#090\",\"successlight\":\"#0f0\",\"success\":\"#0c0\",\"successdark\":\"#090\",\"errorlight\":\"#f00\",\"error\":\"#c00\",\"errordark\":\"#900\",\"secondarylight\":\"#AAA\",\"secondary\":\"#888\",\"secondarydark\":\"#666\",\"warninglight\":\"#ff0\",\"warning\":\"#cc0\",\"warningdark\":\"#990\",\"infolight\":\"#69f\",\"info\":\"#36c\",\"infodark\":\"#039\",\"welllight\":\"#444\",\"well\":\"#222\",\"white\":\"#fff\",\"black\":\"#000\",\"hp\":\"#dd3434\",\"money\":\"#ffd700\",\"hack\":\"#adff2f\",\"combat\":\"#faffdf\",\"cha\":\"#a671d1\",\"int\":\"#6495ed\",\"rep\":\"#faffdf\",\"disabled\":\"#66cfbc\",\"backgroundprimary\":\"#000\",\"backgroundsecondary\":\"#000\",\"button\":\"#333\"},\"styles\":{\"lineHeight\":1.5,\"fontFamily\":\"Lucida Console, Lucida Sans Unicode, Fira Mono, Consolas, Courier New, Courier, monospace, Times New Roman\"},\"overview\":{\"x\":0,\"y\":0,\"opened\":true}}","VersionSave":"10","AllGangsSave":"{\"Slum Snakes\":{\"power\":10.502619659437137,\"territory\":0},\"Tetrads\":{\"power\":4.394380123644719,\"territory\":0},\"The Syndicate\":{\"power\":4.6579386324775145,\"territory\":0},\"The Dark Army\":{\"power\":4.469403983510107,\"territory\":0},\"Speakers for the Dead\":{\"power\":240.95044030798675,\"territory\":0.4256528199616324},\"NiteSec\":{\"power\":78.88157894736842,\"territory\":0.14285714285714285},\"The Black Hand\":{\"power\":232.68849812584233,\"territory\":0.43149003718122325}}","LastExportBonus":"1645757585990","StaneksGiftSave":"{\"ctor\":\"StaneksGift\",\"data\":{\"storedCycles\":0,\"fragments\":[]}}","SaveTimestamp":"1645773540754"}}